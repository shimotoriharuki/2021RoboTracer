
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019848  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bec  08019a08  08019a08  00029a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a5f4  0801a5f4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a5f4  0801a5f4  0002a5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a5fc  0801a5fc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a5fc  0801a5fc  0002a5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a604  0801a604  0002a604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a608  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00045b58  200001e0  0801a7e4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20045d38  0801a7e4  00035d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ae2d  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b7d  00000000  00000000  0006b039  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00074ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035499  00000000  00000000  00076f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265c9  00000000  00000000  000ac401  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110faa  00000000  00000000  000d29ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7d8  00000000  00000000  001e39f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080199f0 	.word	0x080199f0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080199f0 	.word	0x080199f0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 ffac 	bl	800af34 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20043830 	.word	0x20043830

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 ff94 	bl	800af34 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20043830 	.word	0x20043830

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fe35 	bl	800ac90 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fb9c 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fb96 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fb90 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fb8a 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fb84 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fb7e 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fb78 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fb72 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fb6c 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fb66 	bl	8009764 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fb5a 	bl	8009764 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fb54 	bl	8009764 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f835 	bl	8017198 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESCC1Ev>:
#define ESC_MIN_TIM3 1889
#define ESC_MAX_TIM3 3779
#define ESC_MIN_TIM10_11 3770
#define ESC_MAX_TIM10_11 7559

ESC::ESC()
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
{

}
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <_ZN3ESC4initEv>:

void ESC::init()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001174:	2100      	movs	r1, #0
 8001176:	4813      	ldr	r0, [pc, #76]	; (80011c4 <_ZN3ESC4initEv+0x58>)
 8001178:	f00d fca4 	bl	800eac4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800117c:	2104      	movs	r1, #4
 800117e:	4811      	ldr	r0, [pc, #68]	; (80011c4 <_ZN3ESC4initEv+0x58>)
 8001180:	f00d fca0 	bl	800eac4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4810      	ldr	r0, [pc, #64]	; (80011c8 <_ZN3ESC4initEv+0x5c>)
 8001188:	f00d fc9c 	bl	800eac4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800118c:	2100      	movs	r1, #0
 800118e:	480f      	ldr	r0, [pc, #60]	; (80011cc <_ZN3ESC4initEv+0x60>)
 8001190:	f00d fc98 	bl	800eac4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <_ZN3ESC4initEv+0x58>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f240 7261 	movw	r2, #1889	; 0x761
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <_ZN3ESC4initEv+0x58>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f240 7261 	movw	r2, #1889	; 0x761
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_ZN3ESC4initEv+0x5c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f640 62ba 	movw	r2, #3770	; 0xeba
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <_ZN3ESC4initEv+0x60>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f640 62ba 	movw	r2, #3770	; 0xeba
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2004391c 	.word	0x2004391c
 80011c8:	20043884 	.word	0x20043884
 80011cc:	200439a4 	.word	0x200439a4

080011d0 <_ZN3ESC2onEtttt>:

void ESC::on(uint16_t FL, uint16_t FR, uint16_t RL, uint16_t RR)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	4608      	mov	r0, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4603      	mov	r3, r0
 80011e0:	817b      	strh	r3, [r7, #10]
 80011e2:	460b      	mov	r3, r1
 80011e4:	813b      	strh	r3, [r7, #8]
 80011e6:	4613      	mov	r3, r2
 80011e8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3 + RL);
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	f203 7261 	addw	r2, r3, #1889	; 0x761
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <_ZN3ESC2onEtttt+0x58>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3 + FL);
 80011f6:	897b      	ldrh	r3, [r7, #10]
 80011f8:	f203 7261 	addw	r2, r3, #1889	; 0x761
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <_ZN3ESC2onEtttt+0x58>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11 + RR);
 8001202:	8b3b      	ldrh	r3, [r7, #24]
 8001204:	f603 62ba 	addw	r2, r3, #3770	; 0xeba
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <_ZN3ESC2onEtttt+0x5c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11 + FR);
 800120e:	893b      	ldrh	r3, [r7, #8]
 8001210:	f603 62ba 	addw	r2, r3, #3770	; 0xeba
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <_ZN3ESC2onEtttt+0x60>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2004391c 	.word	0x2004391c
 800122c:	20043884 	.word	0x20043884
 8001230:	200439a4 	.word	0x200439a4

08001234 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <_ZN3ESC3offEv+0x3c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f240 7261 	movw	r2, #1889	; 0x761
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <_ZN3ESC3offEv+0x3c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f240 7261 	movw	r2, #1889	; 0x761
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_ZN3ESC3offEv+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_ZN3ESC3offEv+0x44>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001262:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	2004391c 	.word	0x2004391c
 8001274:	20043884 	.word	0x20043884
 8001278:	200439a4 	.word	0x200439a4

0800127c <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80012dc:	213c      	movs	r1, #60	; 0x3c
 80012de:	4809      	ldr	r0, [pc, #36]	; (8001304 <_ZN7Encoder4initEv+0x30>)
 80012e0:	f00d fcc0 	bl	800ec64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80012e4:	213c      	movs	r1, #60	; 0x3c
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <_ZN7Encoder4initEv+0x34>)
 80012e8:	f00d fcbc 	bl	800ec64 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <_ZN7Encoder4initEv+0x38>)
 80012ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <_ZN7Encoder4initEv+0x3c>)
 80012f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20043a84 	.word	0x20043a84
 8001308:	20043768 	.word	0x20043768
 800130c:	40010000 	.word	0x40010000
 8001310:	40010400 	.word	0x40010400
 8001314:	00000000 	.word	0x00000000

08001318 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <_ZN7Encoder6updateEv+0x1b0>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80014cc <_ZN7Encoder6updateEv+0x1b4>
 8001330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001334:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80014d0 <_ZN7Encoder6updateEv+0x1b8>
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001340:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <_ZN7Encoder6updateEv+0x1bc>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80014cc <_ZN7Encoder6updateEv+0x1b4>
 8001350:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001354:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80014d0 <_ZN7Encoder6updateEv+0x1b8>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4a5d      	ldr	r2, [pc, #372]	; (80014d8 <_ZN7Encoder6updateEv+0x1c0>)
 8001364:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f905 	bl	8000578 <__aeabi_f2d>
 800136e:	a350      	add	r3, pc, #320	; (adr r3, 80014b0 <_ZN7Encoder6updateEv+0x198>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f958 	bl	8000628 <__aeabi_dmul>
 8001378:	4603      	mov	r3, r0
 800137a:	460c      	mov	r4, r1
 800137c:	4625      	mov	r5, r4
 800137e:	461c      	mov	r4, r3
 8001380:	4b56      	ldr	r3, [pc, #344]	; (80014dc <_ZN7Encoder6updateEv+0x1c4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8f7 	bl	8000578 <__aeabi_f2d>
 800138a:	a34b      	add	r3, pc, #300	; (adr r3, 80014b8 <_ZN7Encoder6updateEv+0x1a0>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f94a 	bl	8000628 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7fe ff8e 	bl	80002bc <__adddf3>
 80013a0:	4603      	mov	r3, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	4618      	mov	r0, r3
 80013a6:	4621      	mov	r1, r4
 80013a8:	f7ff fc36 	bl	8000c18 <__aeabi_d2f>
 80013ac:	4602      	mov	r2, r0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8df 	bl	8000578 <__aeabi_f2d>
 80013ba:	a33d      	add	r3, pc, #244	; (adr r3, 80014b0 <_ZN7Encoder6updateEv+0x198>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f932 	bl	8000628 <__aeabi_dmul>
 80013c4:	4603      	mov	r3, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	4625      	mov	r5, r4
 80013ca:	461c      	mov	r4, r3
 80013cc:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <_ZN7Encoder6updateEv+0x1c8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8d1 	bl	8000578 <__aeabi_f2d>
 80013d6:	a338      	add	r3, pc, #224	; (adr r3, 80014b8 <_ZN7Encoder6updateEv+0x1a0>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff f924 	bl	8000628 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7fe ff68 	bl	80002bc <__adddf3>
 80013ec:	4603      	mov	r3, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	4618      	mov	r0, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	f7ff fc10 	bl	8000c18 <__aeabi_d2f>
 80013f8:	4602      	mov	r2, r0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a38      	ldr	r2, [pc, #224]	; (80014e4 <_ZN7Encoder6updateEv+0x1cc>)
 8001404:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a34      	ldr	r2, [pc, #208]	; (80014dc <_ZN7Encoder6updateEv+0x1c4>)
 800140c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <_ZN7Encoder6updateEv+0x1c8>)
 8001414:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	ee17 0a90 	vmov	r0, s15
 800142a:	f7ff f8a5 	bl	8000578 <__aeabi_f2d>
 800142e:	a324      	add	r3, pc, #144	; (adr r3, 80014c0 <_ZN7Encoder6updateEv+0x1a8>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f8f8 	bl	8000628 <__aeabi_dmul>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	4618      	mov	r0, r3
 800143e:	4621      	mov	r1, r4
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001448:	f7ff fa18 	bl	800087c <__aeabi_ddiv>
 800144c:	4603      	mov	r3, r0
 800144e:	460c      	mov	r4, r1
 8001450:	4618      	mov	r0, r3
 8001452:	4621      	mov	r1, r4
 8001454:	f7ff fbe0 	bl	8000c18 <__aeabi_d2f>
 8001458:	4602      	mov	r2, r0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	ed93 7a05 	vldr	s14, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	edd3 7a02 	vldr	s15, [r3, #8]
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	ed93 7a06 	vldr	s14, [r3, #24]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a02 	vldr	s15, [r3, #8]
 8001496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <_ZN7Encoder6updateEv+0x1d0>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bdb0      	pop	{r4, r5, r7, pc}
 80014b0:	9999999a 	.word	0x9999999a
 80014b4:	3fa99999 	.word	0x3fa99999
 80014b8:	66666666 	.word	0x66666666
 80014bc:	3fee6666 	.word	0x3fee6666
 80014c0:	ce73a049 	.word	0xce73a049
 80014c4:	3f77a3f6 	.word	0x3f77a3f6
 80014c8:	40010000 	.word	0x40010000
 80014cc:	47000000 	.word	0x47000000
 80014d0:	3f912547 	.word	0x3f912547
 80014d4:	40010400 	.word	0x40010400
 80014d8:	20000200 	.word	0x20000200
 80014dc:	20000208 	.word	0x20000208
 80014e0:	2000020c 	.word	0x2000020c
 80014e4:	20000204 	.word	0x20000204
 80014e8:	200001fc 	.word	0x200001fc

080014ec <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_ZN7Encoder5clearEv+0x3c>)
 8001506:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <_ZN7Encoder5clearEv+0x40>)
 800150e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40010000 	.word	0x40010000
 800152c:	40010400 	.word	0x40010400

08001530 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	601a      	str	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	return distance_;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	ee07 3a90 	vmov	s15, r3
}
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	ee07 3a90 	vmov	s15, r3
}
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	return total_distance_;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	ee07 3a90 	vmov	s15, r3
}
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	619a      	str	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	4613      	mov	r3, r2
 8001652:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f900 	bl	8001860 <create_path>

	if(state == OVER_WRITE){
 8001660:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001668:	4822      	ldr	r0, [pc, #136]	; (80016f4 <sd_write_array_float+0xb0>)
 800166a:	f012 f87f 	bl	801376c <f_chdir>
		f_unlink(filepath);	//	一回消す
 800166e:	4822      	ldr	r0, [pc, #136]	; (80016f8 <sd_write_array_float+0xb4>)
 8001670:	f012 faea 	bl	8013c48 <f_unlink>
		f_chdir("..");
 8001674:	4821      	ldr	r0, [pc, #132]	; (80016fc <sd_write_array_float+0xb8>)
 8001676:	f012 f879 	bl	801376c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800167a:	f000 f907 	bl	800188c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800167e:	2300      	movs	r3, #0
 8001680:	82fb      	strh	r3, [r7, #22]
 8001682:	e028      	b.n	80016d6 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001684:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff71 	bl	8000578 <__aeabi_f2d>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	e9cd 3400 	strd	r3, r4, [sp]
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <sd_write_array_float+0xbc>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	4818      	ldr	r0, [pc, #96]	; (8001704 <sd_write_array_float+0xc0>)
 80016a4:	f014 fe2c 	bl	8016300 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <sd_write_array_float+0xc4>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4816      	ldr	r0, [pc, #88]	; (8001708 <sd_write_array_float+0xc4>)
 80016b0:	f012 f8a6 	bl	8013800 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80016b4:	4813      	ldr	r0, [pc, #76]	; (8001704 <sd_write_array_float+0xc0>)
 80016b6:	f7fe fda3 	bl	8000200 <strlen>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <sd_write_array_float+0xc8>)
 80016be:	4911      	ldr	r1, [pc, #68]	; (8001704 <sd_write_array_float+0xc0>)
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <sd_write_array_float+0xc4>)
 80016c2:	f011 fe14 	bl	80132ee <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80016c6:	f000 f8fb 	bl	80018c0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80016ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	82fb      	strh	r3, [r7, #22]
 80016d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbd0      	blt.n	8001684 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <sd_write_array_float+0xc4>)
 80016e4:	f012 f818 	bl	8013718 <f_close>

	return ret;
 80016e8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200424e4 	.word	0x200424e4
 80016f8:	200413a4 	.word	0x200413a4
 80016fc:	08019a24 	.word	0x08019a24
 8001700:	08019a08 	.word	0x08019a08
 8001704:	200425e4 	.word	0x200425e4
 8001708:	20042674 	.word	0x20042674
 800170c:	20042664 	.word	0x20042664

08001710 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	4613      	mov	r3, r2
 800171e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f898 	bl	8001860 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001730:	f000 f8ac 	bl	800188c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001734:	e019      	b.n	800176a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001736:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4913      	ldr	r1, [pc, #76]	; (8001790 <sd_read_array_float+0x80>)
 8001744:	4813      	ldr	r0, [pc, #76]	; (8001794 <sd_read_array_float+0x84>)
 8001746:	f014 fe2f 	bl	80163a8 <siscanf>
		i++;
 800174a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800174e:	b29b      	uxth	r3, r3
 8001750:	3301      	adds	r3, #1
 8001752:	b29b      	uxth	r3, r3
 8001754:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001756:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800175a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175e:	429a      	cmp	r2, r3
 8001760:	db03      	blt.n	800176a <sd_read_array_float+0x5a>
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	3b01      	subs	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <sd_read_array_float+0x88>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <sd_read_array_float+0x84>)
 8001770:	f012 fc48 	bl	8014004 <f_gets>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1dd      	bne.n	8001736 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800177a:	f000 f8a1 	bl	80018c0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <sd_read_array_float+0x88>)
 8001780:	f011 ffca 	bl	8013718 <f_close>

	return ret;
 8001784:	7d7b      	ldrb	r3, [r7, #21]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	08019a14 	.word	0x08019a14
 8001794:	200425e4 	.word	0x200425e4
 8001798:	20042674 	.word	0x20042674

0800179c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f852 	bl	8001860 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80017bc:	f000 f866 	bl	800188c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017c0:	e019      	b.n	80017f6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80017c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4913      	ldr	r1, [pc, #76]	; (800181c <sd_read_array_double+0x80>)
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <sd_read_array_double+0x84>)
 80017d2:	f014 fde9 	bl	80163a8 <siscanf>
		i++;
 80017d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3301      	adds	r3, #1
 80017de:	b29b      	uxth	r3, r3
 80017e0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	db03      	blt.n	80017f6 <sd_read_array_double+0x5a>
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <sd_read_array_double+0x88>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <sd_read_array_double+0x84>)
 80017fc:	f012 fc02 	bl	8014004 <f_gets>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1dd      	bne.n	80017c2 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001806:	f000 f85b 	bl	80018c0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <sd_read_array_double+0x88>)
 800180c:	f011 ff84 	bl	8013718 <f_close>

	return ret;
 8001810:	7d7b      	ldrb	r3, [r7, #21]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	08019a20 	.word	0x08019a20
 8001820:	200425e4 	.word	0x200425e4
 8001824:	20042674 	.word	0x20042674

08001828 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001832:	2201      	movs	r2, #1
 8001834:	4908      	ldr	r1, [pc, #32]	; (8001858 <sd_mount+0x30>)
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <sd_mount+0x34>)
 8001838:	f011 f9e6 	bl	8012c08 <f_mount>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <sd_mount+0x20>
 8001842:	2301      	movs	r3, #1
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	e001      	b.n	800184c <sd_mount+0x24>
	else ret = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800184c:	79fb      	ldrb	r3, [r7, #7]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	08019a30 	.word	0x08019a30
 800185c:	200414a4 	.word	0x200414a4

08001860 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <create_path+0x24>)
 800186e:	f014 fdc7 	bl	8016400 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <create_path+0x28>)
 8001876:	f014 fdc3 	bl	8016400 <strcpy>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200424e4 	.word	0x200424e4
 8001888:	200413a4 	.word	0x200413a4

0800188c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001890:	4807      	ldr	r0, [pc, #28]	; (80018b0 <fopen_folder_and_file+0x24>)
 8001892:	f012 fa9b 	bl	8013dcc <f_mkdir>

	f_chdir(dirpath);
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <fopen_folder_and_file+0x24>)
 8001898:	f011 ff68 	bl	801376c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800189c:	2213      	movs	r2, #19
 800189e:	4905      	ldr	r1, [pc, #20]	; (80018b4 <fopen_folder_and_file+0x28>)
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <fopen_folder_and_file+0x2c>)
 80018a2:	f011 f9f7 	bl	8012c94 <f_open>

	f_chdir("..");
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <fopen_folder_and_file+0x30>)
 80018a8:	f011 ff60 	bl	801376c <f_chdir>


}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200424e4 	.word	0x200424e4
 80018b4:	200413a4 	.word	0x200413a4
 80018b8:	20042674 	.word	0x20042674
 80018bc:	08019a24 	.word	0x08019a24

080018c0 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	e007      	b.n	80018dc <bufclear+0x1c>
		buffer[i] = '\0';
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <bufclear+0x30>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3301      	adds	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b7f      	cmp	r3, #127	; 0x7f
 80018e0:	ddf4      	ble.n	80018cc <bufclear+0xc>
	}
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200425e4 	.word	0x200425e4

080018f4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001904:	b2db      	uxtb	r3, r3
 8001906:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190e:	480e      	ldr	r0, [pc, #56]	; (8001948 <read_byte+0x54>)
 8001910:	f009 f9be 	bl	800ac90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001914:	f107 010f 	add.w	r1, r7, #15
 8001918:	2364      	movs	r3, #100	; 0x64
 800191a:	2201      	movs	r2, #1
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <read_byte+0x58>)
 800191e:	f00c fb67 	bl	800dff0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001922:	f107 010e 	add.w	r1, r7, #14
 8001926:	2364      	movs	r3, #100	; 0x64
 8001928:	2201      	movs	r2, #1
 800192a:	4808      	ldr	r0, [pc, #32]	; (800194c <read_byte+0x58>)
 800192c:	f00c fc94 	bl	800e258 <HAL_SPI_Receive>
	CS_SET;
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001936:	4804      	ldr	r0, [pc, #16]	; (8001948 <read_byte+0x54>)
 8001938:	f009 f9aa 	bl	800ac90 <HAL_GPIO_WritePin>

	return val;
 800193c:	7bbb      	ldrb	r3, [r7, #14]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40020400 	.word	0x40020400
 800194c:	20043710 	.word	0x20043710

08001950 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001966:	b2db      	uxtb	r3, r3
 8001968:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <write_byte+0x54>)
 8001972:	f009 f98d 	bl	800ac90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001976:	f107 010f 	add.w	r1, r7, #15
 800197a:	2364      	movs	r3, #100	; 0x64
 800197c:	2201      	movs	r2, #1
 800197e:	480a      	ldr	r0, [pc, #40]	; (80019a8 <write_byte+0x58>)
 8001980:	f00c fb36 	bl	800dff0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001984:	1db9      	adds	r1, r7, #6
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	2201      	movs	r2, #1
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <write_byte+0x58>)
 800198c:	f00c fb30 	bl	800dff0 <HAL_SPI_Transmit>
	CS_SET;
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001996:	4803      	ldr	r0, [pc, #12]	; (80019a4 <write_byte+0x54>)
 8001998:	f009 f97a 	bl	800ac90 <HAL_GPIO_WritePin>
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020400 	.word	0x40020400
 80019a8:	20043710 	.word	0x20043710

080019ac <IMU_init>:

uint16_t IMU_init() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff ff9c 	bl	80018f4 <read_byte>
 80019bc:	4603      	mov	r3, r0
 80019be:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80019c0:	797b      	ldrb	r3, [r7, #5]
 80019c2:	2be0      	cmp	r3, #224	; 0xe0
 80019c4:	d119      	bne.n	80019fa <IMU_init+0x4e>
		ret = 1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80019ca:	2101      	movs	r1, #1
 80019cc:	2006      	movs	r0, #6
 80019ce:	f7ff ffbf 	bl	8001950 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80019d2:	2110      	movs	r1, #16
 80019d4:	2003      	movs	r0, #3
 80019d6:	f7ff ffbb 	bl	8001950 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80019da:	2120      	movs	r1, #32
 80019dc:	207f      	movs	r0, #127	; 0x7f
 80019de:	f7ff ffb7 	bl	8001950 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019e2:	2106      	movs	r1, #6
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ffb3 	bl	8001950 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019ea:	2106      	movs	r1, #6
 80019ec:	2014      	movs	r0, #20
 80019ee:	f7ff ffaf 	bl	8001950 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019f2:	2100      	movs	r1, #0
 80019f4:	207f      	movs	r0, #127	; 0x7f
 80019f6:	f7ff ffab 	bl	8001950 <write_byte>
	}
	return ret;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <read_gyro_data>:

void read_gyro_data() {
 8001a04:	b598      	push	{r3, r4, r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a08:	2033      	movs	r0, #51	; 0x33
 8001a0a:	f7ff ff73 	bl	80018f4 <read_byte>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	b21c      	sxth	r4, r3
 8001a14:	2034      	movs	r0, #52	; 0x34
 8001a16:	f7ff ff6d 	bl	80018f4 <read_byte>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4323      	orrs	r3, r4
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <read_gyro_data+0x64>)
 8001a24:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a26:	2035      	movs	r0, #53	; 0x35
 8001a28:	f7ff ff64 	bl	80018f4 <read_byte>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b21c      	sxth	r4, r3
 8001a32:	2036      	movs	r0, #54	; 0x36
 8001a34:	f7ff ff5e 	bl	80018f4 <read_byte>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4323      	orrs	r3, r4
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <read_gyro_data+0x68>)
 8001a42:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a44:	2037      	movs	r0, #55	; 0x37
 8001a46:	f7ff ff55 	bl	80018f4 <read_byte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b21c      	sxth	r4, r3
 8001a50:	2038      	movs	r0, #56	; 0x38
 8001a52:	f7ff ff4f 	bl	80018f4 <read_byte>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4323      	orrs	r3, r4
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <read_gyro_data+0x6c>)
 8001a60:	801a      	strh	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	bd98      	pop	{r3, r4, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200436ac 	.word	0x200436ac
 8001a6c:	200436aa 	.word	0x200436aa
 8001a70:	200436a4 	.word	0x200436a4

08001a74 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	805a      	strh	r2, [r3, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	809a      	strh	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	80da      	strh	r2, [r3, #6]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	811a      	strh	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	815a      	strh	r2, [r3, #10]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
{

}
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001ac0:	f7ff ff74 	bl	80019ac <IMU_init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ac8:	f7ff faea 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001acc:	2100      	movs	r1, #0
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff faf6 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001ad4:	4809      	ldr	r0, [pc, #36]	; (8001afc <_ZN3IMU4initEv+0x44>)
 8001ad6:	f7ff fb1d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001ada:	2101      	movs	r1, #1
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff faef 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001ae2:	89fb      	ldrh	r3, [r7, #14]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <_ZN3IMU4initEv+0x48>)
 8001ae8:	f7ff fb14 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af0:	f007 fe38 	bl	8009764 <HAL_Delay>

}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	08019a34 	.word	0x08019a34
 8001b00:	08019a40 	.word	0x08019a40
 8001b04:	00000000 	.word	0x00000000

08001b08 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001b10:	f7ff ff78 	bl	8001a04 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <_ZN3IMU12updateValuesEv+0xa0>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <_ZN3IMU12updateValuesEv+0xa4>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <_ZN3IMU12updateValuesEv+0xa8>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd0b 	bl	8000554 <__aeabi_i2d>
 8001b3e:	a316      	add	r3, pc, #88	; (adr r3, 8001b98 <_ZN3IMU12updateValuesEv+0x90>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fd70 	bl	8000628 <__aeabi_dmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	460c      	mov	r4, r1
 8001b4c:	4625      	mov	r5, r4
 8001b4e:	461c      	mov	r4, r3
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <_ZN3IMU12updateValuesEv+0xac>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fcfc 	bl	8000554 <__aeabi_i2d>
 8001b5c:	a310      	add	r3, pc, #64	; (adr r3, 8001ba0 <_ZN3IMU12updateValuesEv+0x98>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f7fe fd61 	bl	8000628 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f7fe fba5 	bl	80002bc <__adddf3>
 8001b72:	4603      	mov	r3, r0
 8001b74:	460c      	mov	r4, r1
 8001b76:	4618      	mov	r0, r3
 8001b78:	4621      	mov	r1, r4
 8001b7a:	f7ff f805 	bl	8000b88 <__aeabi_d2iz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <_ZN3IMU12updateValuesEv+0xac>)
 8001b8e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdb0      	pop	{r4, r5, r7, pc}
 8001b98:	eb851eb8 	.word	0xeb851eb8
 8001b9c:	3f9eb851 	.word	0x3f9eb851
 8001ba0:	70a3d70a 	.word	0x70a3d70a
 8001ba4:	3fef0a3d 	.word	0x3fef0a3d
 8001ba8:	200436ac 	.word	0x200436ac
 8001bac:	200436aa 	.word	0x200436aa
 8001bb0:	200436a4 	.word	0x200436a4
 8001bb4:	20000210 	.word	0x20000210

08001bb8 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd8:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f7fe fccb 	bl	8000578 <__aeabi_f2d>
 8001be2:	a316      	add	r3, pc, #88	; (adr r3, 8001c3c <_ZN3IMU8getOmegaEv+0x84>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fe48 	bl	800087c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bf6:	a313      	add	r3, pc, #76	; (adr r3, 8001c44 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe fd12 	bl	8000628 <__aeabi_dmul>
 8001c04:	4603      	mov	r3, r0
 8001c06:	460c      	mov	r4, r1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <_ZN3IMU8getOmegaEv+0x80>)
 8001c12:	f7fe fe33 	bl	800087c <__aeabi_ddiv>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	f7fe fffb 	bl	8000c18 <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	ee07 3a90 	vmov	s15, r3
}
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bdb0      	pop	{r4, r5, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	f3af 8000 	nop.w
 8001c38:	40668000 	.word	0x40668000
 8001c3c:	66666666 	.word	0x66666666
 8001c40:	40306666 	.word	0x40306666
 8001c44:	54411744 	.word	0x54411744
 8001c48:	400921fb 	.word	0x400921fb

08001c4c <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	4603      	mov	r3, r0
 8001c54:	460a      	mov	r2, r1
 8001c56:	71fb      	strb	r3, [r7, #7]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	b299      	uxth	r1, r3
 8001c60:	1dfa      	adds	r2, r7, #7
 8001c62:	2364      	movs	r3, #100	; 0x64
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2301      	movs	r3, #1
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <INA260_read+0x50>)
 8001c6a:	f009 f963 	bl	800af34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	b299      	uxth	r1, r3
 8001c72:	f107 020c 	add.w	r2, r7, #12
 8001c76:	2364      	movs	r3, #100	; 0x64
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	4807      	ldr	r0, [pc, #28]	; (8001c9c <INA260_read+0x50>)
 8001c7e:	f009 fa57 	bl	800b130 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001c82:	7b3b      	ldrb	r3, [r7, #12]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	7b7b      	ldrb	r3, [r7, #13]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	81fb      	strh	r3, [r7, #14]
	return val;
 8001c92:	89fb      	ldrh	r3, [r7, #14]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200438c4 	.word	0x200438c4

08001ca0 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	71fb      	strb	r3, [r7, #7]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71bb      	strb	r3, [r7, #6]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	717b      	strb	r3, [r7, #5]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	733b      	strb	r3, [r7, #12]
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	737b      	strb	r3, [r7, #13]
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001cca:	793b      	ldrb	r3, [r7, #4]
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	f107 020c 	add.w	r2, r7, #12
 8001cd2:	2364      	movs	r3, #100	; 0x64
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <INA260_write+0x48>)
 8001cda:	f009 f92b 	bl	800af34 <HAL_I2C_Master_Transmit>
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd90      	pop	{r4, r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200438c4 	.word	0x200438c4

08001cec <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	71bb      	strb	r3, [r7, #6]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001cfe:	797b      	ldrb	r3, [r7, #5]
 8001d00:	79ba      	ldrb	r2, [r7, #6]
 8001d02:	79f9      	ldrb	r1, [r7, #7]
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff ffcb 	bl	8001ca0 <INA260_write>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	21df      	movs	r1, #223	; 0xdf
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ffe2 	bl	8001cec <setConfig>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
{

}
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d58:	482a      	ldr	r0, [pc, #168]	; (8001e04 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d5a:	f008 ff81 	bl	800ac60 <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <_ZN8JoyStick8getValueEv+0x2e>
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001d76:	2101      	movs	r1, #1
 8001d78:	4823      	ldr	r0, [pc, #140]	; (8001e08 <_ZN8JoyStick8getValueEv+0xc0>)
 8001d7a:	f008 ff71 	bl	800ac60 <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <_ZN8JoyStick8getValueEv+0x4e>
 8001d8e:	89fb      	ldrh	r3, [r7, #14]
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9a:	481a      	ldr	r0, [pc, #104]	; (8001e04 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d9c:	f008 ff60 	bl	800ac60 <HAL_GPIO_ReadPin>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <_ZN8JoyStick8getValueEv+0x70>
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001db8:	2104      	movs	r1, #4
 8001dba:	4814      	ldr	r0, [pc, #80]	; (8001e0c <_ZN8JoyStick8getValueEv+0xc4>)
 8001dbc:	f008 ff50 	bl	800ac60 <HAL_GPIO_ReadPin>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <_ZN8JoyStick8getValueEv+0x90>
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
 8001dd2:	f043 0308 	orr.w	r3, r3, #8
 8001dd6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	480a      	ldr	r0, [pc, #40]	; (8001e04 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ddc:	f008 ff40 	bl	800ac60 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <_ZN8JoyStick8getValueEv+0xb0>
 8001df0:	89fb      	ldrh	r3, [r7, #14]
 8001df2:	f043 0310 	orr.w	r3, r3, #16
 8001df6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001df8:	89fb      	ldrh	r3, [r7, #14]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40020c00 	.word	0x40020c00
 8001e0c:	40020400 	.word	0x40020400

08001e10 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	2b52      	cmp	r3, #82	; 0x52
 8001e20:	d112      	bne.n	8001e48 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e28:	4856      	ldr	r0, [pc, #344]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e2a:	f008 ff31 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e34:	4853      	ldr	r0, [pc, #332]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e36:	f008 ff2b 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e40:	4850      	ldr	r0, [pc, #320]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e42:	f008 ff25 	bl	800ac90 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001e46:	e098      	b.n	8001f7a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b47      	cmp	r3, #71	; 0x47
 8001e4c:	d112      	bne.n	8001e74 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e54:	484b      	ldr	r0, [pc, #300]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e56:	f008 ff1b 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e60:	4848      	ldr	r0, [pc, #288]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e62:	f008 ff15 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6c:	4845      	ldr	r0, [pc, #276]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e6e:	f008 ff0f 	bl	800ac90 <HAL_GPIO_WritePin>
}
 8001e72:	e082      	b.n	8001f7a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b42      	cmp	r3, #66	; 0x42
 8001e78:	d112      	bne.n	8001ea0 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e80:	4840      	ldr	r0, [pc, #256]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e82:	f008 ff05 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e8c:	483d      	ldr	r0, [pc, #244]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e8e:	f008 feff 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e98:	483a      	ldr	r0, [pc, #232]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001e9a:	f008 fef9 	bl	800ac90 <HAL_GPIO_WritePin>
}
 8001e9e:	e06c      	b.n	8001f7a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b43      	cmp	r3, #67	; 0x43
 8001ea4:	d112      	bne.n	8001ecc <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eac:	4835      	ldr	r0, [pc, #212]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f008 feef 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb8:	4832      	ldr	r0, [pc, #200]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f008 fee9 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec4:	482f      	ldr	r0, [pc, #188]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f008 fee3 	bl	800ac90 <HAL_GPIO_WritePin>
}
 8001eca:	e056      	b.n	8001f7a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b4d      	cmp	r3, #77	; 0x4d
 8001ed0:	d112      	bne.n	8001ef8 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	482a      	ldr	r0, [pc, #168]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f008 fed9 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee4:	4827      	ldr	r0, [pc, #156]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f008 fed3 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	4824      	ldr	r0, [pc, #144]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f008 fecd 	bl	800ac90 <HAL_GPIO_WritePin>
}
 8001ef6:	e040      	b.n	8001f7a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b59      	cmp	r3, #89	; 0x59
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	481f      	ldr	r0, [pc, #124]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f008 fec3 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	481c      	ldr	r0, [pc, #112]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f008 febd 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	4819      	ldr	r0, [pc, #100]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f008 feb7 	bl	800ac90 <HAL_GPIO_WritePin>
}
 8001f22:	e02a      	b.n	8001f7a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b57      	cmp	r3, #87	; 0x57
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	4814      	ldr	r0, [pc, #80]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f008 fead 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4811      	ldr	r0, [pc, #68]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f008 fea7 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	480e      	ldr	r0, [pc, #56]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f008 fea1 	bl	800ac90 <HAL_GPIO_WritePin>
}
 8001f4e:	e014      	b.n	8001f7a <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b7e      	cmp	r3, #126	; 0x7e
 8001f54:	d111      	bne.n	8001f7a <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f008 fe97 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4806      	ldr	r0, [pc, #24]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f008 fe91 	bl	800ac90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f008 fe8b 	bl	800ac90 <HAL_GPIO_WritePin>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40020000 	.word	0x40020000

08001f88 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
 8001f94:	4613      	mov	r3, r2
 8001f96:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d106      	bne.n	8001fae <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa6:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <_ZN3LED2LREaa+0x6c>)
 8001fa8:	f008 fe72 	bl	800ac90 <HAL_GPIO_WritePin>
 8001fac:	e009      	b.n	8001fc2 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <_ZN3LED2LREaa+0x6c>)
 8001fbe:	f008 fe67 	bl	800ac90 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001fc2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d106      	bne.n	8001fd8 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd0:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <_ZN3LED2LREaa+0x6c>)
 8001fd2:	f008 fe5d 	bl	800ac90 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001fd6:	e009      	b.n	8001fec <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001fd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe6:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <_ZN3LED2LREaa+0x6c>)
 8001fe8:	f008 fe52 	bl	800ac90 <HAL_GPIO_WritePin>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b092      	sub	sp, #72	; 0x48
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fe92 	bl	8001d30 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
 8002010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002012:	647b      	str	r3, [r7, #68]	; 0x44
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	331c      	adds	r3, #28
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
 800201a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	429a      	cmp	r2, r3
 8002020:	d008      	beq.n	8002034 <_ZN10LineSensorC1Ev+0x3c>
 8002022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 800202c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202e:	3302      	adds	r3, #2
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
 8002032:	e7f2      	b.n	800201a <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	643b      	str	r3, [r7, #64]	; 0x40
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	3338      	adds	r3, #56	; 0x38
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
 8002046:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	429a      	cmp	r2, r3
 800204c:	d009      	beq.n	8002062 <_ZN10LineSensorC1Ev+0x6a>
 800204e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002050:	623b      	str	r3, [r7, #32]
		s = 0;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800205a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205c:	3304      	adds	r3, #4
 800205e:	643b      	str	r3, [r7, #64]	; 0x40
 8002060:	e7f1      	b.n	8002046 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3338      	adds	r3, #56	; 0x38
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	429a      	cmp	r2, r3
 800207a:	d009      	beq.n	8002090 <_ZN10LineSensorC1Ev+0x98>
 800207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207e:	617b      	str	r3, [r7, #20]
		m = 0;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	3304      	adds	r3, #4
 800208c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800208e:	e7f1      	b.n	8002074 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	3338      	adds	r3, #56	; 0x38
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d009      	beq.n	80020be <_ZN10LineSensorC1Ev+0xc6>
 80020aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ac:	60bb      	str	r3, [r7, #8]
		s = 1;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020b4:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	3304      	adds	r3, #4
 80020ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80020bc:	e7f1      	b.n	80020a2 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	3748      	adds	r7, #72	; 0x48
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	220e      	movs	r2, #14
 80020d4:	4619      	mov	r1, r3
 80020d6:	4803      	ldr	r0, [pc, #12]	; (80020e4 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80020d8:	f007 fbaa 	bl	8009830 <HAL_ADC_Start_DMA>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200437e8 	.word	0x200437e8

080020e8 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b0d      	cmp	r3, #13
 80020f8:	dc2f      	bgt.n	800215a <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3392      	adds	r3, #146	; 0x92
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	ed93 7a00 	vldr	s14, [r3]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	33a0      	adds	r3, #160	; 0xa0
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	1a5b      	subs	r3, r3, r1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	440b      	add	r3, r1
 8002146:	3306      	adds	r3, #6
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e7cc      	b.n	80020f4 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002164:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b09      	cmp	r3, #9
 800216c:	d902      	bls.n	8002174 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]


}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	2000021c 	.word	0x2000021c
 8002184:	00000000 	.word	0x00000000

08002188 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b08e      	sub	sp, #56	; 0x38
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002196:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800219a:	2b0d      	cmp	r3, #13
 800219c:	f200 80b8 	bhi.w	8002310 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021aa:	2b09      	cmp	r3, #9
 80021ac:	d81c      	bhi.n	80021e8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80021ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80021b2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80021b6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4423      	add	r3, r4
 80021c6:	3306      	adds	r3, #6
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4403      	add	r3, r0
 80021cc:	3304      	adds	r3, #4
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	008b      	lsls	r3, r1, #2
 80021d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021d6:	440b      	add	r3, r1
 80021d8:	3b30      	subs	r3, #48	; 0x30
 80021da:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021e0:	3301      	adds	r3, #1
 80021e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021e6:	e7de      	b.n	80021a6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80021ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021f2:	2b09      	cmp	r3, #9
 80021f4:	d84d      	bhi.n	8002292 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80021f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021fa:	3301      	adds	r3, #1
 80021fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002200:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002204:	2b09      	cmp	r3, #9
 8002206:	d83e      	bhi.n	8002286 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002208:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002212:	4413      	add	r3, r2
 8002214:	3b30      	subs	r3, #48	; 0x30
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002224:	4413      	add	r3, r2
 8002226:	3b30      	subs	r3, #48	; 0x30
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	d521      	bpl.n	800227a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002236:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002240:	4413      	add	r3, r2
 8002242:	3b30      	subs	r3, #48	; 0x30
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002248:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800224c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002256:	440a      	add	r2, r1
 8002258:	3a30      	subs	r2, #48	; 0x30
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002262:	440b      	add	r3, r1
 8002264:	3b30      	subs	r3, #48	; 0x30
 8002266:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002268:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002272:	4413      	add	r3, r2
 8002274:	3b30      	subs	r3, #48	; 0x30
 8002276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002278:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800227a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800227e:	3301      	adds	r3, #1
 8002280:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002284:	e7bc      	b.n	8002200 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002286:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800228a:	3301      	adds	r3, #1
 800228c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002290:	e7ad      	b.n	80021ee <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f96f 	bl	8000578 <__aeabi_f2d>
 800229a:	a32a      	add	r3, pc, #168	; (adr r3, 8002344 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4603      	mov	r3, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	4625      	mov	r5, r4
 80022aa:	461c      	mov	r4, r3
 80022ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f95d 	bl	8000578 <__aeabi_f2d>
 80022be:	a31c      	add	r3, pc, #112	; (adr r3, 8002330 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe f9b0 	bl	8000628 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4620      	mov	r0, r4
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7fd fff4 	bl	80002bc <__adddf3>
 80022d4:	4603      	mov	r3, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	461a      	mov	r2, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc98 	bl	8000c18 <__aeabi_d2f>
 80022e8:	4601      	mov	r1, r0
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80022f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002308:	3301      	adds	r3, #1
 800230a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800230e:	e742      	b.n	8002196 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002318:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	3738      	adds	r7, #56	; 0x38
 8002328:	46bd      	mov	sp, r7
 800232a:	bdb0      	pop	{r4, r5, r7, pc}
 800232c:	f3af 8000 	nop.w
 8002330:	66666666 	.word	0x66666666
 8002334:	3fee6666 	.word	0x3fee6666
 8002338:	20000220 	.word	0x20000220
 800233c:	20000214 	.word	0x20000214
 8002340:	20000218 	.word	0x20000218
 8002344:	9999999a 	.word	0x9999999a
 8002348:	3fa99999 	.word	0x3fa99999

0800234c <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3338      	adds	r3, #56	; 0x38
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	429a      	cmp	r2, r3
 8002370:	d012      	beq.n	8002398 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80023ec <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	db02      	blt.n	8002390 <_ZN10LineSensor13emergencyStopEv+0x44>
 800238a:	8bfb      	ldrh	r3, [r7, #30]
 800238c:	3301      	adds	r3, #1
 800238e:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	3304      	adds	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e7e8      	b.n	800236a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002398:	8bfb      	ldrh	r3, [r7, #30]
 800239a:	2b0d      	cmp	r3, #13
 800239c:	d906      	bls.n	80023ac <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	e002      	b.n	80023b2 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	2b31      	cmp	r3, #49	; 0x31
 80023b8:	d903      	bls.n	80023c2 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e002      	b.n	80023c8 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d903      	bls.n	80023dc <_ZN10LineSensor13emergencyStopEv+0x90>
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80023d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80023da:	801a      	strh	r2, [r3, #0]

	return flag;
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80023de:	781b      	ldrb	r3, [r3, #0]

}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3724      	adds	r7, #36	; 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	442f0000 	.word	0x442f0000
 80023f0:	20000258 	.word	0x20000258
 80023f4:	2000025a 	.word	0x2000025a

080023f8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002402:	edd7 7a01 	vldr	s15, [r7, #4]
 8002406:	eef0 7ae7 	vabs.f32	s15, s15
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_fast_(0), kd_fast_(0), ki_fast_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	64da      	str	r2, [r3, #76]	; 0x4c
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80024c6:	3314      	adds	r3, #20
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80024d4:	3358      	adds	r3, #88	; 0x58
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80024e0:	335a      	adds	r3, #90	; 0x5a
 80024e2:	2200      	movs	r2, #0
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80024ec:	335c      	adds	r3, #92	; 0x5c
 80024ee:	2200      	movs	r2, #0
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80024f8:	3330      	adds	r3, #48	; 0x30
 80024fa:	2200      	movs	r2, #0
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002504:	3332      	adds	r3, #50	; 0x32
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002510:	3334      	adds	r3, #52	; 0x34
 8002512:	2200      	movs	r2, #0
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800251c:	3336      	adds	r3, #54	; 0x36
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002528:	3337      	adds	r3, #55	; 0x37
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002534:	3338      	adds	r3, #56	; 0x38
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002540:	333c      	adds	r3, #60	; 0x3c
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800254e:	3340      	adds	r3, #64	; 0x40
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800255c:	3344      	adds	r3, #68	; 0x44
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800256a:	3348      	adds	r3, #72	; 0x48
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002578:	334c      	adds	r3, #76	; 0x4c
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002584:	334e      	adds	r3, #78	; 0x4e
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a3a      	ldr	r2, [r7, #32]
 80025a0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ac:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b2:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b8:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80025ba:	2300      	movs	r3, #0
 80025bc:	82fb      	strh	r3, [r7, #22]
 80025be:	8afb      	ldrh	r3, [r7, #22]
 80025c0:	f241 726f 	movw	r2, #5999	; 0x176f
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d80d      	bhi.n	80025e4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1cc>
		velocity_table_[i] = 0;
 80025c8:	8afb      	ldrh	r3, [r7, #22]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80025d0:	3306      	adds	r3, #6
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80025dc:	8afb      	ldrh	r3, [r7, #22]
 80025de:	3301      	adds	r3, #1
 80025e0:	82fb      	strh	r3, [r7, #22]
 80025e2:	e7ec      	b.n	80025be <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80025e4:	2300      	movs	r3, #0
 80025e6:	82bb      	strh	r3, [r7, #20]
 80025e8:	8abb      	ldrh	r3, [r7, #20]
 80025ea:	2b63      	cmp	r3, #99	; 0x63
 80025ec:	d80d      	bhi.n	800260a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f2>
		crossline_distance_[i] = 0;
 80025ee:	8abb      	ldrh	r3, [r7, #20]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80025f6:	3318      	adds	r3, #24
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002602:	8abb      	ldrh	r3, [r7, #20]
 8002604:	3301      	adds	r3, #1
 8002606:	82bb      	strh	r3, [r7, #20]
 8002608:	e7ee      	b.n	80025e8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d0>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800260a:	2300      	movs	r3, #0
 800260c:	827b      	strh	r3, [r7, #18]
 800260e:	8a7b      	ldrh	r3, [r7, #18]
 8002610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002614:	d20d      	bcs.n	8002632 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21a>
		sideline_distance_[i] = 0;
 8002616:	8a7b      	ldrh	r3, [r7, #18]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800261e:	333c      	adds	r3, #60	; 0x3c
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800262a:	8a7b      	ldrh	r3, [r7, #18]
 800262c:	3301      	adds	r3, #1
 800262e:	827b      	strh	r3, [r7, #18]
 8002630:	e7ed      	b.n	800260e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002632:	2300      	movs	r3, #0
 8002634:	823b      	strh	r3, [r7, #16]
 8002636:	8a3b      	ldrh	r3, [r7, #16]
 8002638:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800263c:	d20d      	bcs.n	800265a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x242>
		all_sideline_distance_[i] = 0;
 800263e:	8a3b      	ldrh	r3, [r7, #16]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8002646:	3324      	adds	r3, #36	; 0x24
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002652:	8a3b      	ldrh	r3, [r7, #16]
 8002654:	3301      	adds	r3, #1
 8002656:	823b      	strh	r3, [r7, #16]
 8002658:	e7ed      	b.n	8002636 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21e>
	}
}
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_ZN9LineTrace9calcAngleEv>:
	return diff;

}

float LineTrace::calcAngle()
{
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b094      	sub	sp, #80	; 0x50
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	getSensorValues();
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f86d 	bl	8002750 <_ZN9LineTrace15getSensorValuesEv>

	float den = 0;
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float num = 0;
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
	float angle_list[SENSOR_NUM] = {-1.02, -0.85, -0.68, -0.51, -0.34, -0.17, 0, 0.17, 0.34, 0.51, 0.68, 0.85, 1.02};
 8002682:	4b31      	ldr	r3, [pc, #196]	; (8002748 <_ZN9LineTrace9calcAngleEv+0xe0>)
 8002684:	f107 040c 	add.w	r4, r7, #12
 8002688:	461d      	mov	r5, r3
 800268a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800268c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800268e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	6023      	str	r3, [r4, #0]

	for(uint16_t i = 0; i < SENSOR_NUM; i++){
 800269a:	2300      	movs	r3, #0
 800269c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80026a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d82e      	bhi.n	8002706 <_ZN9LineTrace9calcAngleEv+0x9e>


		num += angle_list[i] * sensor_digital_values_[i];
 80026a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026b2:	4413      	add	r3, r2
 80026b4:	3b44      	subs	r3, #68	; 0x44
 80026b6:	ed93 7a00 	vldr	s14, [r3]
 80026ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	3320      	adds	r3, #32
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3304      	adds	r3, #4
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		den += sensor_digital_values_[i];
 80026dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	3320      	adds	r3, #32
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	for(uint16_t i = 0; i < SENSOR_NUM; i++){
 80026fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026fe:	3301      	adds	r3, #1
 8002700:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002704:	e7cc      	b.n	80026a0 <_ZN9LineTrace9calcAngleEv+0x38>
		num += angle_list[i] * sensor_values_[i];
		den += sensor_values_[i];
		*/
	}

	float angle = 0;
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
	if(den != 0) angle = num / den;
 800270c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002710:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	d008      	beq.n	800272c <_ZN9LineTrace9calcAngleEv+0xc4>
 800271a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800271e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002726:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800272a:	e002      	b.n	8002732 <_ZN9LineTrace9calcAngleEv+0xca>
	else angle = 0;
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	643b      	str	r3, [r7, #64]	; 0x40

	mon_steer_angle = angle;
 8002732:	4a06      	ldr	r2, [pc, #24]	; (800274c <_ZN9LineTrace9calcAngleEv+0xe4>)
 8002734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002736:	6013      	str	r3, [r2, #0]

	return angle;
 8002738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273a:	ee07 3a90 	vmov	s15, r3
}
 800273e:	eeb0 0a67 	vmov.f32	s0, s15
 8002742:	3750      	adds	r7, #80	; 0x50
 8002744:	46bd      	mov	sp, r7
 8002746:	bdb0      	pop	{r4, r5, r7, pc}
 8002748:	08019a5c 	.word	0x08019a5c
 800274c:	2000025c 	.word	0x2000025c

08002750 <_ZN9LineTrace15getSensorValuesEv>:

void LineTrace::getSensorValues()
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	sensor_values_[0] = 1000 - line_sensor_->sensor[0];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8002760:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	sensor_values_[1] = 1000 - line_sensor_->sensor[1];
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002776:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 800277a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	sensor_values_[2] = 1000 - line_sensor_->sensor[2];
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800278c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	sensor_values_[3] = 1000 - line_sensor_->sensor[3];
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80027a2:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	sensor_values_[4] = 1000 - line_sensor_->sensor[4];
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80027b8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80027bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	sensor_values_[5] = 1000 - line_sensor_->sensor[5];
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80027ce:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	sensor_values_[6] = 1000 - (line_sensor_->sensor[6] + line_sensor_->sensor[7]) / 2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 80027ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	sensor_values_[7] = 1000 - line_sensor_->sensor[8];
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800280e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	sensor_values_[8] = 1000 - line_sensor_->sensor[9];
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002824:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	sensor_values_[9] = 1000 - line_sensor_->sensor[10];
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 800283a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 800283e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	sensor_values_[10] = 1000 - line_sensor_->sensor[11];
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002850:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	sensor_values_[11] = 1000 - line_sensor_->sensor[12];
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002866:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 800286a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	sensor_values_[12] = 1000 - line_sensor_->sensor[13];
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800287c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800296c <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	for(uint16_t i = 0; i < 12; i++){
 800288a:	2300      	movs	r3, #0
 800288c:	81fb      	strh	r3, [r7, #14]
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	2b0b      	cmp	r3, #11
 8002892:	d824      	bhi.n	80028de <_ZN9LineTrace15getSensorValuesEv+0x18e>
		if(sensor_values_[i] >= 500) sensor_digital_values_[i] = 1;
 8002894:	89fb      	ldrh	r3, [r7, #14]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	3314      	adds	r3, #20
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002970 <_ZN9LineTrace15getSensorValuesEv+0x220>
 80028a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	db09      	blt.n	80028c4 <_ZN9LineTrace15getSensorValuesEv+0x174>
 80028b0:	89fb      	ldrh	r3, [r7, #14]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	3320      	adds	r3, #32
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e008      	b.n	80028d6 <_ZN9LineTrace15getSensorValuesEv+0x186>
		else sensor_digital_values_[i] = 0;
 80028c4:	89fb      	ldrh	r3, [r7, #14]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	3320      	adds	r3, #32
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < 12; i++){
 80028d6:	89fb      	ldrh	r3, [r7, #14]
 80028d8:	3301      	adds	r3, #1
 80028da:	81fb      	strh	r3, [r7, #14]
 80028dc:	e7d7      	b.n	800288e <_ZN9LineTrace15getSensorValuesEv+0x13e>
	}

	mon_sens0 = sensor_digital_values_[0];
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e4:	4a23      	ldr	r2, [pc, #140]	; (8002974 <_ZN9LineTrace15getSensorValuesEv+0x224>)
 80028e6:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor_digital_values_[1];
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	4a22      	ldr	r2, [pc, #136]	; (8002978 <_ZN9LineTrace15getSensorValuesEv+0x228>)
 80028f0:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor_digital_values_[2];
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f8:	4a20      	ldr	r2, [pc, #128]	; (800297c <_ZN9LineTrace15getSensorValuesEv+0x22c>)
 80028fa:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor_digital_values_[3];
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <_ZN9LineTrace15getSensorValuesEv+0x230>)
 8002904:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor_digital_values_[4];
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <_ZN9LineTrace15getSensorValuesEv+0x234>)
 800290e:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor_digital_values_[5];
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <_ZN9LineTrace15getSensorValuesEv+0x238>)
 8002918:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor_digital_values_[6];
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002920:	4a1a      	ldr	r2, [pc, #104]	; (800298c <_ZN9LineTrace15getSensorValuesEv+0x23c>)
 8002922:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor_digital_values_[7];
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800292a:	4a19      	ldr	r2, [pc, #100]	; (8002990 <_ZN9LineTrace15getSensorValuesEv+0x240>)
 800292c:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor_digital_values_[8];
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002934:	4a17      	ldr	r2, [pc, #92]	; (8002994 <_ZN9LineTrace15getSensorValuesEv+0x244>)
 8002936:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor_digital_values_[9];
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <_ZN9LineTrace15getSensorValuesEv+0x248>)
 8002940:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor_digital_values_[10];
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <_ZN9LineTrace15getSensorValuesEv+0x24c>)
 800294a:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor_digital_values_[11];
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002952:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <_ZN9LineTrace15getSensorValuesEv+0x250>)
 8002954:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor_digital_values_[12];
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <_ZN9LineTrace15getSensorValuesEv+0x254>)
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	447a0000 	.word	0x447a0000
 8002970:	43fa0000 	.word	0x43fa0000
 8002974:	20000260 	.word	0x20000260
 8002978:	20000264 	.word	0x20000264
 800297c:	20000268 	.word	0x20000268
 8002980:	2000026c 	.word	0x2000026c
 8002984:	20000270 	.word	0x20000270
 8002988:	20000274 	.word	0x20000274
 800298c:	20000278 	.word	0x20000278
 8002990:	2000027c 	.word	0x2000027c
 8002994:	20000280 	.word	0x20000280
 8002998:	20000284 	.word	0x20000284
 800299c:	20000288 	.word	0x20000288
 80029a0:	2000028c 	.word	0x2000028c
 80029a4:	20000290 	.word	0x20000290

080029a8 <_ZN9LineTrace18steeringAngleTraceEv>:
	pre_diff = diff;

}

void LineTrace::steeringAngleTrace()
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	float steering_angle = calcAngle();
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fe59 	bl	8002668 <_ZN9LineTrace9calcAngleEv>
 80029b6:	ed87 0a03 	vstr	s0, [r7, #12]

	float r = 0;
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
	float current_velocity = velocity_ctrl_->getCurrentVelocity();
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 ffeb 	bl	80059a0 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 80029ca:	ed87 0a02 	vstr	s0, [r7, #8]
	//float current_velocity = 0.1;
	float target_omega = 0;
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]

	if(steering_angle != 0){
 80029d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	d022      	beq.n	8002a28 <_ZN9LineTrace18steeringAngleTraceEv+0x80>
		r = CENTER_OF_ROTATION_TO_CENTER_OF_SENSOR / tan(steering_angle);
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7fd fdc8 	bl	8000578 <__aeabi_f2d>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	ec44 3b10 	vmov	d0, r3, r4
 80029f0:	f011 fc3a 	bl	8014268 <tan>
 80029f4:	ec54 3b10 	vmov	r3, r4, d0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4623      	mov	r3, r4
 80029fc:	a11c      	add	r1, pc, #112	; (adr r1, 8002a70 <_ZN9LineTrace18steeringAngleTraceEv+0xc8>)
 80029fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a02:	f7fd ff3b 	bl	800087c <__aeabi_ddiv>
 8002a06:	4603      	mov	r3, r0
 8002a08:	460c      	mov	r4, r1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	f7fe f903 	bl	8000c18 <__aeabi_d2f>
 8002a12:	4603      	mov	r3, r0
 8002a14:	617b      	str	r3, [r7, #20]
		target_omega = current_velocity / r;
 8002a16:	edd7 6a02 	vldr	s13, [r7, #8]
 8002a1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a22:	edc7 7a04 	vstr	s15, [r7, #16]
 8002a26:	e002      	b.n	8002a2e <_ZN9LineTrace18steeringAngleTraceEv+0x86>
	}
	else target_omega = 0;
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002a38:	edd7 0a04 	vldr	s1, [r7, #16]
 8002a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a40:	4610      	mov	r0, r2
 8002a42:	f002 ff11 	bl	8005868 <_ZN12VelocityCtrl11setVelocityEff>
	target_omega_ = target_omega;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	monitor_target_omega = target_omega;
 8002a4e:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <_ZN9LineTrace18steeringAngleTraceEv+0xc0>)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	6013      	str	r3, [r2, #0]
	monitor_r = r;
 8002a54:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <_ZN9LineTrace18steeringAngleTraceEv+0xc4>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	6013      	str	r3, [r2, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	f3af 8000 	nop.w
 8002a68:	20000294 	.word	0x20000294
 8002a6c:	20000298 	.word	0x20000298
 8002a70:	eb851eb8 	.word	0xeb851eb8
 8002a74:	3faeb851 	.word	0x3faeb851

08002a78 <_ZN9LineTrace11loggerStartEv>:

void LineTrace::loggerStart()
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fda3 	bl	80015d0 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 f9be 	bl	8004e10 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fee9 	bl	8004870 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 ff4d 	bl	800495a <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002af4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b00:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b2c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002b30:	4a40      	ldr	r2, [pc, #256]	; (8002c34 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002b36:	4a40      	ldr	r2, [pc, #256]	; (8002c38 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d044      	beq.n	8002bd4 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b4e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002c40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5a:	d50f      	bpl.n	8002b7c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002b5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b60:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002c40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	d506      	bpl.n	8002b7c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002b6e:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	e002      	b.n	8002b82 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002b7c:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002b82:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d94d      	bls.n	8002c26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002b90:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ba2:	3338      	adds	r3, #56	; 0x38
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002bae:	335c      	adds	r3, #92	; 0x5c
 8002bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f001 faff 	bl	80041bc <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002bbe:	e032      	b.n	8002c26 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f001 fba1 	bl	8004308 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002bcc:	334c      	adds	r3, #76	; 0x4c
 8002bce:	2200      	movs	r2, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	e028      	b.n	8002c26 <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002bd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	dd0f      	ble.n	8002c06 <_ZN9LineTrace11isCrossLineEv+0x136>
 8002be6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002c4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	dd06      	ble.n	8002c06 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c02:	801a      	strh	r2, [r3, #0]
 8002c04:	e002      	b.n	8002c0c <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	2b09      	cmp	r3, #9
 8002c12:	d908      	bls.n	8002c26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200002a0 	.word	0x200002a0
 8002c38:	200002a4 	.word	0x200002a4
 8002c3c:	200002bb 	.word	0x200002bb
 8002c40:	44160000 	.word	0x44160000
 8002c44:	200002b8 	.word	0x200002b8
 8002c48:	200002ba 	.word	0x200002ba
 8002c4c:	43fa0000 	.word	0x43fa0000

08002c50 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c62:	335c      	adds	r3, #92	; 0x5c
 8002c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d143      	bne.n	8002cf4 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002c6c:	edd7 7a00 	vldr	s15, [r7]
 8002c70:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002d8c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	d504      	bpl.n	8002c88 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e076      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002c88:	edd7 7a00 	vldr	s15, [r7]
 8002c8c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002d90 <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c98:	d502      	bpl.n	8002ca0 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e06a      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002ca0:	edd7 7a00 	vldr	s15, [r7]
 8002ca4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d98 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8002ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb0:	d503      	bpl.n	8002cba <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e05d      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8002cba:	edd7 7a00 	vldr	s15, [r7]
 8002cbe:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002d9c <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	d502      	bpl.n	8002cd2 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002ccc:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e051      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002cd2:	edd7 7a00 	vldr	s15, [r7]
 8002cd6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002da4 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	d502      	bpl.n	8002cea <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8002ce4:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e045      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e040      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cfa:	335c      	adds	r3, #92	; 0x5c
 8002cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d136      	bne.n	8002d72 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8002d04:	edd7 7a00 	vldr	s15, [r7]
 8002d08:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002d8c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	d504      	bpl.n	8002d20 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e02a      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8002d20:	edd7 7a00 	vldr	s15, [r7]
 8002d24:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002d9c <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	d502      	bpl.n	8002d38 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e01e      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002d38:	edd7 7a00 	vldr	s15, [r7]
 8002d3c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002da4 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d48:	d502      	bpl.n	8002d50 <_ZN9LineTrace15radius2VelocityEf+0x100>
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e012      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8002d50:	edd7 7a00 	vldr	s15, [r7]
 8002d54:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002db0 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8002d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	d502      	bpl.n	8002d68 <_ZN9LineTrace15radius2VelocityEf+0x118>
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e006      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e001      	b.n	8002d76 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8002d74:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	ee07 3a90 	vmov	s15, r3
}
 8002d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	43960000 	.word	0x43960000
 8002d90:	44480000 	.word	0x44480000
 8002d94:	3fd9999a 	.word	0x3fd9999a
 8002d98:	447a0000 	.word	0x447a0000
 8002d9c:	44bb8000 	.word	0x44bb8000
 8002da0:	40133333 	.word	0x40133333
 8002da4:	44fa0000 	.word	0x44fa0000
 8002da8:	40200000 	.word	0x40200000
 8002dac:	40066666 	.word	0x40066666
 8002db0:	451c4000 	.word	0x451c4000
 8002db4:	40400000 	.word	0x40400000
 8002db8:	3fa66666 	.word	0x3fa66666

08002dbc <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b08b      	sub	sp, #44	; 0x2c
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 fca7 	bl	800471c <_ZN6Logger23getDistanceArrayPointerEv>
 8002dce:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 fcae 	bl	8004736 <_ZN6Logger20getThetaArrayPointerEv>
 8002dda:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ddc:	2300      	movs	r3, #0
 8002dde:	837b      	strh	r3, [r7, #26]
 8002de0:	8b7b      	ldrh	r3, [r7, #26]
 8002de2:	f241 726f 	movw	r2, #5999	; 0x176f
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d84b      	bhi.n	8002e82 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002dea:	8b7b      	ldrh	r3, [r7, #26]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002df6:	8b7b      	ldrh	r3, [r7, #26]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002e02:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	d101      	bne.n	8002e14 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e10:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8002e12:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002e14:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e20:	eeb0 0a66 	vmov.f32	s0, s13
 8002e24:	f7ff fae8 	bl	80023f8 <_ZSt3absf>
 8002e28:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e30:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002f48 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8002e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3c:	db01      	blt.n	8002e42 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002e3e:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8002e40:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002e42:	8b7c      	ldrh	r4, [r7, #26]
 8002e44:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff ff01 	bl	8002c50 <_ZN9LineTrace15radius2VelocityEf>
 8002e4e:	eef0 7a40 	vmov.f32	s15, s0
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8002e58:	3306      	adds	r3, #6
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002e62:	8b7b      	ldrh	r3, [r7, #26]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	441a      	add	r2, r3
 8002e6a:	8b7b      	ldrh	r3, [r7, #26]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	3334      	adds	r3, #52	; 0x34
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	3304      	adds	r3, #4
 8002e78:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e7a:	8b7b      	ldrh	r3, [r7, #26]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	837b      	strh	r3, [r7, #26]
 8002e80:	e7ae      	b.n	8002de0 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e88:	335c      	adds	r3, #92	; 0x5c
 8002e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d120      	bne.n	8002ed4 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002e9e:	3318      	adds	r3, #24
 8002ea0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ea8:	3340      	adds	r3, #64	; 0x40
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	6939      	ldr	r1, [r7, #16]
 8002eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f93f 	bl	8003138 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ec0:	333c      	adds	r3, #60	; 0x3c
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	6939      	ldr	r1, [r7, #16]
 8002ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f9d7 	bl	8003280 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8002ed2:	e027      	b.n	8002f24 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002eda:	335c      	adds	r3, #92	; 0x5c
 8002edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d11f      	bne.n	8002f24 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002efa:	3348      	adds	r3, #72	; 0x48
 8002efc:	edd3 7a00 	vldr	s15, [r3]
 8002f00:	6939      	ldr	r1, [r7, #16]
 8002f02:	eeb0 0a67 	vmov.f32	s0, s15
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f916 	bl	8003138 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f12:	3344      	adds	r3, #68	; 0x44
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	6939      	ldr	r1, [r7, #16]
 8002f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f9ae 	bl	8003280 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	9200      	str	r2, [sp, #0]
 8002f30:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f34:	4906      	ldr	r1, [pc, #24]	; (8002f50 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8002f36:	4807      	ldr	r0, [pc, #28]	; (8002f54 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8002f38:	f7fe fb84 	bl	8001644 <sd_write_array_float>

}
 8002f3c:	bf00      	nop
 8002f3e:	3724      	adds	r7, #36	; 0x24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}
 8002f44:	3727c5ac 	.word	0x3727c5ac
 8002f48:	459c4000 	.word	0x459c4000
 8002f4c:	459c4000 	.word	0x459c4000
 8002f50:	08019a90 	.word	0x08019a90
 8002f54:	08019aa0 	.word	0x08019aa0

08002f58 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b08b      	sub	sp, #44	; 0x2c
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69d8      	ldr	r0, [r3, #28]
 8002f64:	4b6b      	ldr	r3, [pc, #428]	; (8003114 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8002f66:	4a6c      	ldr	r2, [pc, #432]	; (8003118 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8002f68:	496c      	ldr	r1, [pc, #432]	; (800311c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8002f6a:	f001 fc63 	bl	8004834 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f74:	3360      	adds	r3, #96	; 0x60
 8002f76:	2264      	movs	r2, #100	; 0x64
 8002f78:	4969      	ldr	r1, [pc, #420]	; (8003120 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8002f7a:	4868      	ldr	r0, [pc, #416]	; (800311c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8002f7c:	f7fe fbc8 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002f86:	33f0      	adds	r3, #240	; 0xf0
 8002f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f8c:	4965      	ldr	r1, [pc, #404]	; (8003124 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8002f8e:	4863      	ldr	r0, [pc, #396]	; (800311c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8002f90:	f7fe fbbe 	bl	8001710 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 fbbf 	bl	800471c <_ZN6Logger23getDistanceArrayPointerEv>
 8002f9e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fbc6 	bl	8004736 <_ZN6Logger20getThetaArrayPointerEv>
 8002faa:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fac:	2300      	movs	r3, #0
 8002fae:	837b      	strh	r3, [r7, #26]
 8002fb0:	8b7b      	ldrh	r3, [r7, #26]
 8002fb2:	f241 726f 	movw	r2, #5999	; 0x176f
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d84b      	bhi.n	8003052 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8002fba:	8b7b      	ldrh	r3, [r7, #26]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002fc6:	8b7b      	ldrh	r3, [r7, #26]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002fd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	d101      	bne.n	8002fe4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8002fe0:	4b51      	ldr	r3, [pc, #324]	; (8003128 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8002fe2:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8002fe4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fe8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ff0:	eeb0 0a66 	vmov.f32	s0, s13
 8002ff4:	f7ff fa00 	bl	80023f8 <_ZSt3absf>
 8002ff8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8002ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003000:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800312c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8003004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	db01      	blt.n	8003012 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800300e:	4b48      	ldr	r3, [pc, #288]	; (8003130 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8003010:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8003012:	8b7c      	ldrh	r4, [r7, #26]
 8003014:	ed97 0a05 	vldr	s0, [r7, #20]
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff fe19 	bl	8002c50 <_ZN9LineTrace15radius2VelocityEf>
 800301e:	eef0 7a40 	vmov.f32	s15, s0
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003028:	3306      	adds	r3, #6
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003032:	8b7b      	ldrh	r3, [r7, #26]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	441a      	add	r2, r3
 800303a:	8b7b      	ldrh	r3, [r7, #26]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	3334      	adds	r3, #52	; 0x34
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3304      	adds	r3, #4
 8003048:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800304a:	8b7b      	ldrh	r3, [r7, #26]
 800304c:	3301      	adds	r3, #1
 800304e:	837b      	strh	r3, [r7, #26]
 8003050:	e7ae      	b.n	8002fb0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003058:	335c      	adds	r3, #92	; 0x5c
 800305a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d120      	bne.n	80030a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800306e:	3318      	adds	r3, #24
 8003070:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003078:	3340      	adds	r3, #64	; 0x40
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	6939      	ldr	r1, [r7, #16]
 8003080:	eeb0 0a67 	vmov.f32	s0, s15
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f857 	bl	8003138 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003090:	333c      	adds	r3, #60	; 0x3c
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	6939      	ldr	r1, [r7, #16]
 8003098:	eeb0 0a67 	vmov.f32	s0, s15
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8ef 	bl	8003280 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80030a2:	e027      	b.n	80030f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030aa:	335c      	adds	r3, #92	; 0x5c
 80030ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d11f      	bne.n	80030f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80030c0:	3318      	adds	r3, #24
 80030c2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030ca:	3348      	adds	r3, #72	; 0x48
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	6939      	ldr	r1, [r7, #16]
 80030d2:	eeb0 0a67 	vmov.f32	s0, s15
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f82e 	bl	8003138 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030e2:	3344      	adds	r3, #68	; 0x44
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	6939      	ldr	r1, [r7, #16]
 80030ea:	eeb0 0a67 	vmov.f32	s0, s15
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8c6 	bl	8003280 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80030fa:	3318      	adds	r3, #24
 80030fc:	2200      	movs	r2, #0
 80030fe:	9200      	str	r2, [sp, #0]
 8003100:	f241 7270 	movw	r2, #6000	; 0x1770
 8003104:	490b      	ldr	r1, [pc, #44]	; (8003134 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003108:	f7fe fa9c 	bl	8001644 <sd_write_array_float>

}
 800310c:	bf00      	nop
 800310e:	3724      	adds	r7, #36	; 0x24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}
 8003114:	08019aac 	.word	0x08019aac
 8003118:	08019ab8 	.word	0x08019ab8
 800311c:	08019aa0 	.word	0x08019aa0
 8003120:	08019ac8 	.word	0x08019ac8
 8003124:	08019ad8 	.word	0x08019ad8
 8003128:	3727c5ac 	.word	0x3727c5ac
 800312c:	459c4000 	.word	0x459c4000
 8003130:	459c4000 	.word	0x459c4000
 8003134:	08019a90 	.word	0x08019a90

08003138 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	ed87 0a02 	vstr	s0, [r7, #8]
 8003144:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003146:	f241 736f 	movw	r3, #5999	; 0x176f
 800314a:	83fb      	strh	r3, [r7, #30]
 800314c:	8bfb      	ldrh	r3, [r7, #30]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 808d 	beq.w	800326e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003154:	8bfb      	ldrh	r3, [r7, #30]
 8003156:	3b01      	subs	r3, #1
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800315e:	3306      	adds	r3, #6
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	ed93 7a00 	vldr	s14, [r3]
 8003168:	8bfb      	ldrh	r3, [r7, #30]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003170:	3306      	adds	r3, #6
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003182:	edd7 7a06 	vldr	s15, [r7, #24]
 8003186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	dd6a      	ble.n	8003266 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003190:	8bfb      	ldrh	r3, [r7, #30]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f9ec 	bl	8000578 <__aeabi_f2d>
 80031a0:	a335      	add	r3, pc, #212	; (adr r3, 8003278 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd fa3f 	bl	8000628 <__aeabi_dmul>
 80031aa:	4603      	mov	r3, r0
 80031ac:	460c      	mov	r4, r1
 80031ae:	4625      	mov	r5, r4
 80031b0:	461c      	mov	r4, r3
 80031b2:	69b8      	ldr	r0, [r7, #24]
 80031b4:	f7fd f9e0 	bl	8000578 <__aeabi_f2d>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fd fb5c 	bl	800087c <__aeabi_ddiv>
 80031c4:	4603      	mov	r3, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	4618      	mov	r0, r3
 80031ca:	4621      	mov	r1, r4
 80031cc:	f7fd fd24 	bl	8000c18 <__aeabi_d2f>
 80031d0:	4603      	mov	r3, r0
 80031d2:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80031d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80031d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e0:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80031e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80031e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	dd37      	ble.n	8003266 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80031f6:	8bfb      	ldrh	r3, [r7, #30]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80031fe:	3306      	adds	r3, #6
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f9b6 	bl	8000578 <__aeabi_f2d>
 800320c:	4604      	mov	r4, r0
 800320e:	460d      	mov	r5, r1
 8003210:	8bfb      	ldrh	r3, [r7, #30]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	ed93 7a00 	vldr	s14, [r3]
 800321c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003224:	ee17 0a90 	vmov	r0, s15
 8003228:	f7fd f9a6 	bl	8000578 <__aeabi_f2d>
 800322c:	a312      	add	r3, pc, #72	; (adr r3, 8003278 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f7fd f9f9 	bl	8000628 <__aeabi_dmul>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4620      	mov	r0, r4
 800323c:	4629      	mov	r1, r5
 800323e:	f7fd f83d 	bl	80002bc <__adddf3>
 8003242:	4603      	mov	r3, r0
 8003244:	460c      	mov	r4, r1
 8003246:	4619      	mov	r1, r3
 8003248:	4622      	mov	r2, r4
 800324a:	8bfb      	ldrh	r3, [r7, #30]
 800324c:	1e5c      	subs	r4, r3, #1
 800324e:	4608      	mov	r0, r1
 8003250:	4611      	mov	r1, r2
 8003252:	f7fd fce1 	bl	8000c18 <__aeabi_d2f>
 8003256:	4601      	mov	r1, r0
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800325e:	3306      	adds	r3, #6
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003266:	8bfb      	ldrh	r3, [r7, #30]
 8003268:	3b01      	subs	r3, #1
 800326a:	83fb      	strh	r3, [r7, #30]
 800326c:	e76e      	b.n	800314c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800326e:	bf00      	nop
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bdb0      	pop	{r4, r5, r7, pc}
 8003276:	bf00      	nop
 8003278:	d2f1a9fc 	.word	0xd2f1a9fc
 800327c:	3f50624d 	.word	0x3f50624d

08003280 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	ed87 0a02 	vstr	s0, [r7, #8]
 800328c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800328e:	2300      	movs	r3, #0
 8003290:	83fb      	strh	r3, [r7, #30]
 8003292:	8bfb      	ldrh	r3, [r7, #30]
 8003294:	f241 726f 	movw	r2, #5999	; 0x176f
 8003298:	4293      	cmp	r3, r2
 800329a:	f200 808d 	bhi.w	80033b8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800329e:	8bfb      	ldrh	r3, [r7, #30]
 80032a0:	3301      	adds	r3, #1
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032a8:	3306      	adds	r3, #6
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	ed93 7a00 	vldr	s14, [r3]
 80032b2:	8bfb      	ldrh	r3, [r7, #30]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032ba:	3306      	adds	r3, #6
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c8:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80032cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80032d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	dd6a      	ble.n	80033b0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80032da:	8bfb      	ldrh	r3, [r7, #30]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd f947 	bl	8000578 <__aeabi_f2d>
 80032ea:	a335      	add	r3, pc, #212	; (adr r3, 80033c0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fd f99a 	bl	8000628 <__aeabi_dmul>
 80032f4:	4603      	mov	r3, r0
 80032f6:	460c      	mov	r4, r1
 80032f8:	4625      	mov	r5, r4
 80032fa:	461c      	mov	r4, r3
 80032fc:	69b8      	ldr	r0, [r7, #24]
 80032fe:	f7fd f93b 	bl	8000578 <__aeabi_f2d>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f7fd fab7 	bl	800087c <__aeabi_ddiv>
 800330e:	4603      	mov	r3, r0
 8003310:	460c      	mov	r4, r1
 8003312:	4618      	mov	r0, r3
 8003314:	4621      	mov	r1, r4
 8003316:	f7fd fc7f 	bl	8000c18 <__aeabi_d2f>
 800331a:	4603      	mov	r3, r0
 800331c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800331e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003322:	ed97 7a05 	vldr	s14, [r7, #20]
 8003326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800332e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003332:	edd7 7a02 	vldr	s15, [r7, #8]
 8003336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	dd37      	ble.n	80033b0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003340:	8bfb      	ldrh	r3, [r7, #30]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003348:	3306      	adds	r3, #6
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd f911 	bl	8000578 <__aeabi_f2d>
 8003356:	4604      	mov	r4, r0
 8003358:	460d      	mov	r5, r1
 800335a:	8bfb      	ldrh	r3, [r7, #30]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	ed93 7a00 	vldr	s14, [r3]
 8003366:	edd7 7a02 	vldr	s15, [r7, #8]
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	ee17 0a90 	vmov	r0, s15
 8003372:	f7fd f901 	bl	8000578 <__aeabi_f2d>
 8003376:	a312      	add	r3, pc, #72	; (adr r3, 80033c0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f7fd f954 	bl	8000628 <__aeabi_dmul>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4620      	mov	r0, r4
 8003386:	4629      	mov	r1, r5
 8003388:	f7fc ff98 	bl	80002bc <__adddf3>
 800338c:	4603      	mov	r3, r0
 800338e:	460c      	mov	r4, r1
 8003390:	4619      	mov	r1, r3
 8003392:	4622      	mov	r2, r4
 8003394:	8bfb      	ldrh	r3, [r7, #30]
 8003396:	1c5c      	adds	r4, r3, #1
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	f7fd fc3c 	bl	8000c18 <__aeabi_d2f>
 80033a0:	4601      	mov	r1, r0
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80033a8:	3306      	adds	r3, #6
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80033b0:	8bfb      	ldrh	r3, [r7, #30]
 80033b2:	3301      	adds	r3, #1
 80033b4:	83fb      	strh	r3, [r7, #30]
 80033b6:	e76c      	b.n	8003292 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80033b8:	bf00      	nop
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bdb0      	pop	{r4, r5, r7, pc}
 80033c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80033c4:	3f50624d 	.word	0x3f50624d

080033c8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033d6:	3358      	adds	r3, #88	; 0x58
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8086 	beq.w	80034ec <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe f8d5 	bl	8001594 <_ZN7Encoder16getTotalDistanceEv>
 80033ea:	eeb0 7a40 	vmov.f32	s14, s0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80033f4:	3314      	adds	r3, #20
 80033f6:	edd3 7a00 	vldr	s15, [r3]
 80033fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	bfac      	ite	ge
 8003404:	2301      	movge	r3, #1
 8003406:	2300      	movlt	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d026      	beq.n	800345c <_ZN9LineTrace20updateTargetVelocityEv+0x94>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003414:	3314      	adds	r3, #20
 8003416:	ed93 7a00 	vldr	s14, [r3]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003420:	335a      	adds	r3, #90	; 0x5a
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	3334      	adds	r3, #52	; 0x34
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	3304      	adds	r3, #4
 800342e:	edd3 7a00 	vldr	s15, [r3]
 8003432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800343c:	3314      	adds	r3, #20
 800343e:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003448:	335a      	adds	r3, #90	; 0x5a
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003456:	335a      	adds	r3, #90	; 0x5a
 8003458:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 800345a:	e7c1      	b.n	80033e0 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003462:	335a      	adds	r3, #90	; 0x5a
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	f241 726f 	movw	r2, #5999	; 0x176f
 800346a:	4293      	cmp	r3, r2
 800346c:	d906      	bls.n	800347c <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003474:	335a      	adds	r3, #90	; 0x5a
 8003476:	f241 726f 	movw	r2, #5999	; 0x176f
 800347a:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003482:	3314      	adds	r3, #20
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003488:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe f880 	bl	8001594 <_ZN7Encoder16getTotalDistanceEv>
 8003494:	eef0 7a40 	vmov.f32	s15, s0
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800349a:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034a4:	335a      	adds	r3, #90	; 0x5a
 80034a6:	881a      	ldrh	r2, [r3, #0]
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80034aa:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034b2:	335a      	adds	r3, #90	; 0x5a
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034bc:	3306      	adds	r3, #6
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa06 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034d6:	335a      	adds	r3, #90	; 0x5a
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034e0:	3306      	adds	r3, #6
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a05      	ldr	r2, [pc, #20]	; (8003500 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80034ea:	6013      	str	r3, [r2, #0]

	}
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	200002a8 	.word	0x200002a8
 80034f8:	200002ac 	.word	0x200002ac
 80034fc:	200002b0 	.word	0x200002b0
 8003500:	200002b4 	.word	0x200002b4

08003504 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800350c:	2300      	movs	r3, #0
 800350e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe f82e 	bl	8001576 <_ZN7Encoder15getDistance10mmEv>
 800351a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fc63 	bl	8004dee <_ZN8Odometry8getThetaEv>
 8003528:	ec54 3b10 	vmov	r3, r4, d0
 800352c:	4618      	mov	r0, r3
 800352e:	4621      	mov	r1, r4
 8003530:	f7fd fb72 	bl	8000c18 <__aeabi_d2f>
 8003534:	4603      	mov	r3, r0
 8003536:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003538:	edd7 7a04 	vldr	s15, [r7, #16]
 800353c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	d101      	bne.n	800354a <_ZN9LineTrace8isStableEv+0x46>
 8003546:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <_ZN9LineTrace8isStableEv+0xd0>)
 8003548:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800354a:	ed97 7a02 	vldr	s14, [r7, #8]
 800354e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003552:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003556:	eeb0 0a66 	vmov.f32	s0, s13
 800355a:	f7fe ff4d 	bl	80023f8 <_ZSt3absf>
 800355e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003562:	edd7 7a03 	vldr	s15, [r7, #12]
 8003566:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80035d8 <_ZN9LineTrace8isStableEv+0xd4>
 800356a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003572:	db01      	blt.n	8003578 <_ZN9LineTrace8isStableEv+0x74>
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <_ZN9LineTrace8isStableEv+0xd8>)
 8003576:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800357e:	3338      	adds	r3, #56	; 0x38
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003588:	2200      	movs	r2, #0
 800358a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003592:	3338      	adds	r3, #56	; 0x38
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003598:	edd7 7a03 	vldr	s15, [r7, #12]
 800359c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80035e4 <_ZN9LineTrace8isStableEv+0xe0>
 80035a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	db06      	blt.n	80035b8 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <_ZN9LineTrace8isStableEv+0xdc>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <_ZN9LineTrace8isStableEv+0xdc>)
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	e002      	b.n	80035be <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <_ZN9LineTrace8isStableEv+0xdc>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <_ZN9LineTrace8isStableEv+0xdc>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	2b16      	cmp	r3, #22
 80035c4:	d901      	bls.n	80035ca <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}
 80035d4:	3727c5ac 	.word	0x3727c5ac
 80035d8:	459c4000 	.word	0x459c4000
 80035dc:	459c4000 	.word	0x459c4000
 80035e0:	200002bc 	.word	0x200002bc
 80035e4:	44fa0000 	.word	0x44fa0000

080035e8 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b092      	sub	sp, #72	; 0x48
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80035f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035f4:	2201      	movs	r2, #1
 80035f6:	4963      	ldr	r1, [pc, #396]	; (8003784 <_ZN9LineTrace4initEv+0x19c>)
 80035f8:	4863      	ldr	r0, [pc, #396]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 80035fa:	f7fe f889 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80035fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003602:	2201      	movs	r2, #1
 8003604:	4961      	ldr	r1, [pc, #388]	; (800378c <_ZN9LineTrace4initEv+0x1a4>)
 8003606:	4860      	ldr	r0, [pc, #384]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003608:	f7fe f882 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 800360c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003610:	2201      	movs	r2, #1
 8003612:	495f      	ldr	r1, [pc, #380]	; (8003790 <_ZN9LineTrace4initEv+0x1a8>)
 8003614:	485c      	ldr	r0, [pc, #368]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003616:	f7fe f87b 	bl	8001710 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 800361a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800361e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003622:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003626:	eeb0 1a66 	vmov.f32	s2, s13
 800362a:	eef0 0a47 	vmov.f32	s1, s14
 800362e:	eeb0 0a67 	vmov.f32	s0, s15
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8c6 	bl	80037c4 <_ZN9LineTrace7setGainEfff>

	float temp_kp_fast, temp_ki_fast, temp_kd_fast;
	sd_read_array_float("PARAMS", "KPFAST.TXT", 1, &temp_kp_fast);
 8003638:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800363c:	2201      	movs	r2, #1
 800363e:	4955      	ldr	r1, [pc, #340]	; (8003794 <_ZN9LineTrace4initEv+0x1ac>)
 8003640:	4851      	ldr	r0, [pc, #324]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003642:	f7fe f865 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KIFAST.TXT", 1, &temp_ki_fast);
 8003646:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800364a:	2201      	movs	r2, #1
 800364c:	4952      	ldr	r1, [pc, #328]	; (8003798 <_ZN9LineTrace4initEv+0x1b0>)
 800364e:	484e      	ldr	r0, [pc, #312]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003650:	f7fe f85e 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KDFAST.TXT", 1, &temp_kd_fast);
 8003654:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003658:	2201      	movs	r2, #1
 800365a:	4950      	ldr	r1, [pc, #320]	; (800379c <_ZN9LineTrace4initEv+0x1b4>)
 800365c:	484a      	ldr	r0, [pc, #296]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 800365e:	f7fe f857 	bl	8001710 <sd_read_array_float>
	setGainFast(temp_kp_fast, temp_ki_fast, temp_kd_fast);
 8003662:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003666:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800366a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800366e:	eeb0 1a66 	vmov.f32	s2, s13
 8003672:	eef0 0a47 	vmov.f32	s1, s14
 8003676:	eeb0 0a67 	vmov.f32	s0, s15
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8bb 	bl	80037f6 <_ZN9LineTrace11setGainFastEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003684:	2201      	movs	r2, #1
 8003686:	4946      	ldr	r1, [pc, #280]	; (80037a0 <_ZN9LineTrace4initEv+0x1b8>)
 8003688:	483f      	ldr	r0, [pc, #252]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 800368a:	f7fe f841 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 800368e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003692:	2201      	movs	r2, #1
 8003694:	4943      	ldr	r1, [pc, #268]	; (80037a4 <_ZN9LineTrace4initEv+0x1bc>)
 8003696:	483c      	ldr	r0, [pc, #240]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003698:	f7fe f83a 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 800369c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a0:	2201      	movs	r2, #1
 80036a2:	4941      	ldr	r1, [pc, #260]	; (80037a8 <_ZN9LineTrace4initEv+0x1c0>)
 80036a4:	4838      	ldr	r0, [pc, #224]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 80036a6:	f7fe f833 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 80036aa:	f107 0320 	add.w	r3, r7, #32
 80036ae:	2201      	movs	r2, #1
 80036b0:	493e      	ldr	r1, [pc, #248]	; (80037ac <_ZN9LineTrace4initEv+0x1c4>)
 80036b2:	4835      	ldr	r0, [pc, #212]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 80036b4:	f7fe f82c 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	2201      	movs	r2, #1
 80036be:	493c      	ldr	r1, [pc, #240]	; (80037b0 <_ZN9LineTrace4initEv+0x1c8>)
 80036c0:	4831      	ldr	r0, [pc, #196]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 80036c2:	f7fe f825 	bl	8001710 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 80036c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036ca:	eeb0 0a67 	vmov.f32	s0, s15
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f904 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80036d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036d8:	eeb0 0a67 	vmov.f32	s0, s15
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f90d 	bl	80038fc <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80036e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036e6:	eeb0 0a67 	vmov.f32	s0, s15
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f916 	bl	800391c <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 80036f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80036f4:	eeb0 0a67 	vmov.f32	s0, s15
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f91f 	bl	800393c <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 80036fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003702:	eeb0 0a67 	vmov.f32	s0, s15
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f928 	bl	800395c <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 800370c:	f107 0318 	add.w	r3, r7, #24
 8003710:	2201      	movs	r2, #1
 8003712:	4928      	ldr	r1, [pc, #160]	; (80037b4 <_ZN9LineTrace4initEv+0x1cc>)
 8003714:	481c      	ldr	r0, [pc, #112]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003716:	f7fd fffb 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 800371a:	f107 0314 	add.w	r3, r7, #20
 800371e:	2201      	movs	r2, #1
 8003720:	4925      	ldr	r1, [pc, #148]	; (80037b8 <_ZN9LineTrace4initEv+0x1d0>)
 8003722:	4819      	ldr	r0, [pc, #100]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003724:	f7fd fff4 	bl	8001710 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003728:	edd7 7a06 	vldr	s15, [r7, #24]
 800372c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003730:	eef0 0a47 	vmov.f32	s1, s14
 8003734:	eeb0 0a67 	vmov.f32	s0, s15
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f96f 	bl	8003a1c <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 800374a:	f107 0310 	add.w	r3, r7, #16
 800374e:	2201      	movs	r2, #1
 8003750:	491a      	ldr	r1, [pc, #104]	; (80037bc <_ZN9LineTrace4initEv+0x1d4>)
 8003752:	480d      	ldr	r0, [pc, #52]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003754:	f7fd ffdc 	bl	8001710 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	2201      	movs	r2, #1
 800375e:	4918      	ldr	r1, [pc, #96]	; (80037c0 <_ZN9LineTrace4initEv+0x1d8>)
 8003760:	4809      	ldr	r0, [pc, #36]	; (8003788 <_ZN9LineTrace4initEv+0x1a0>)
 8003762:	f7fd ffd5 	bl	8001710 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003766:	edd7 7a04 	vldr	s15, [r7, #16]
 800376a:	ed97 7a03 	vldr	s14, [r7, #12]
 800376e:	eef0 0a47 	vmov.f32	s1, s14
 8003772:	eeb0 0a67 	vmov.f32	s0, s15
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f96a 	bl	8003a50 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 800377c:	bf00      	nop
 800377e:	3748      	adds	r7, #72	; 0x48
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08019ae4 	.word	0x08019ae4
 8003788:	08019aec 	.word	0x08019aec
 800378c:	08019af4 	.word	0x08019af4
 8003790:	08019afc 	.word	0x08019afc
 8003794:	08019b04 	.word	0x08019b04
 8003798:	08019b10 	.word	0x08019b10
 800379c:	08019b1c 	.word	0x08019b1c
 80037a0:	08019b28 	.word	0x08019b28
 80037a4:	08019b34 	.word	0x08019b34
 80037a8:	08019b40 	.word	0x08019b40
 80037ac:	08019b4c 	.word	0x08019b4c
 80037b0:	08019b58 	.word	0x08019b58
 80037b4:	08019b64 	.word	0x08019b64
 80037b8:	08019b6c 	.word	0x08019b6c
 80037bc:	08019b74 	.word	0x08019b74
 80037c0:	08019b80 	.word	0x08019b80

080037c4 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80037d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80037d4:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <_ZN9LineTrace11setGainFastEfff>:

void LineTrace::setGainFast(float kp, float ki, float kd)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8003802:	edc7 0a01 	vstr	s1, [r7, #4]
 8003806:	ed87 1a00 	vstr	s2, [r7]
	kp_fast_ = kp;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
	ki_fast_ = ki;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
	kd_fast_ = kd;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	return kp_;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	ee07 3a90 	vmov	s15, r3
}
 8003838:	eeb0 0a67 	vmov.f32	s0, s15
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
	return ki_;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	ee07 3a90 	vmov	s15, r3
}
 8003856:	eeb0 0a67 	vmov.f32	s0, s15
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	return kd_;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	ee07 3a90 	vmov	s15, r3
}
 8003874:	eeb0 0a67 	vmov.f32	s0, s15
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_ZN9LineTrace9getKpFastEv>:

float LineTrace::getKpFast()
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	return kp_fast_;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	ee07 3a90 	vmov	s15, r3
}
 8003892:	eeb0 0a67 	vmov.f32	s0, s15
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_ZN9LineTrace9getKiFastEv>:

float LineTrace::getKiFast()
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	return ki_fast_;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	ee07 3a90 	vmov	s15, r3
}
 80038b0:	eeb0 0a67 	vmov.f32	s0, s15
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <_ZN9LineTrace9getKdFastEv>:

float LineTrace::getKdFast()
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
	return kd_fast_;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	ee07 3a90 	vmov	s15, r3
}
 80038ce:	eeb0 0a67 	vmov.f32	s0, s15
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800398a:	ee07 3a90 	vmov	s15, r3
}
 800398e:	eeb0 0a67 	vmov.f32	s0, s15
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039aa:	ee07 3a90 	vmov	s15, r3
}
 80039ae:	eeb0 0a67 	vmov.f32	s0, s15
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039ca:	ee07 3a90 	vmov	s15, r3
}
 80039ce:	eeb0 0a67 	vmov.f32	s0, s15
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80039ea:	ee07 3a90 	vmov	s15, r3
}
 80039ee:	eeb0 0a67 	vmov.f32	s0, s15
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003a0a:	ee07 3a90 	vmov	s15, r3
}
 8003a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a28:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003a32:	333c      	adds	r3, #60	; 0x3c
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003a3e:	3340      	adds	r3, #64	; 0x40
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <_ZN9LineTrace13setMaxAccDec2Eff>:
void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a5c:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003a66:	3344      	adds	r3, #68	; 0x44
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003a72:	3348      	adds	r3, #72	; 0x48
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	601a      	str	r2, [r3, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003a92:	333c      	adds	r3, #60	; 0x3c
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	ee07 3a90 	vmov	s15, r3
}
 8003a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ab6:	3348      	adds	r3, #72	; 0x48
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	ee07 3a90 	vmov	s15, r3
}
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <_ZN9LineTrace10getMaxAcc2Ev>:
float LineTrace::getMaxAcc2()
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ada:	3344      	adds	r3, #68	; 0x44
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	ee07 3a90 	vmov	s15, r3
}
 8003ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003afe:	3340      	adds	r3, #64	; 0x40
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	ee07 3a90 	vmov	s15, r3
}
 8003b06:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	//calcAngle();

	if(excution_flag_ == true){
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 815d 	beq.w	8003de2 <_ZN9LineTrace4flipEv+0x2ce>
		// ---- line following processing -----//
		//pidTrace();
		//pidAngularVelocityTrace();
		steeringAngleTrace();
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7fe ff3d 	bl	80029a8 <_ZN9LineTrace18steeringAngleTraceEv>


		if(isTargetDistance(10) == true){
 8003b2e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fb20 	bl	8004178 <_ZN9LineTrace16isTargetDistanceEf>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d042      	beq.n	8003bc4 <_ZN9LineTrace4flipEv+0xb0>
			// ---- Store Logs ------//
			storeLogs();
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa6e 	bl	8004020 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69dc      	ldr	r4, [r3, #28]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe f833 	bl	8001bb8 <_ZN3IMU8getOmegaEv>
 8003b52:	eef0 7a40 	vmov.f32	s15, s0
 8003b56:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 fcd2 	bl	8004504 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(getTargetOmega());
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69dc      	ldr	r4, [r3, #28]
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fab5 	bl	80040d4 <_ZN9LineTrace14getTargetOmegaEv>
 8003b6a:	eef0 7a40 	vmov.f32	s15, s0
 8003b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b72:	4620      	mov	r0, r4
 8003b74:	f000 fd03 	bl	800457e <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fcc3 	bl	8003504 <_ZN9LineTrace8isStableEv>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00c      	beq.n	8003b9e <_ZN9LineTrace4flipEv+0x8a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fbcf 	bl	800532c <_ZN10SideSensor9getStatusEv>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	43db      	mvns	r3, r3
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d101      	bne.n	8003b9e <_ZN9LineTrace4flipEv+0x8a>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <_ZN9LineTrace4flipEv+0x8c>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <_ZN9LineTrace4flipEv+0x9c>
#endif
				stable_flag_ = true;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003baa:	3337      	adds	r3, #55	; 0x37
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fd fd0b 	bl	80015d0 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f926 	bl	8004e10 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fbff 	bl	80033c8 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fe ff80 	bl	8002ad0 <_ZN9LineTrace11isCrossLineEv>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <_ZN9LineTrace4flipEv+0xd6>
			side_sensor_->enableIgnore();
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fbce 	bl	800537c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd fd1e 	bl	8001626 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f001 fbde 	bl	80053b0 <_ZN10SideSensor13getIgnoreFlagEv>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00f      	beq.n	8003c1a <_ZN9LineTrace4flipEv+0x106>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fd02 	bl	8001608 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003c04:	eeb0 7a40 	vmov.f32	s14, s0
 8003c08:	eddf 7a78 	vldr	s15, [pc, #480]	; 8003dec <_ZN9LineTrace4flipEv+0x2d8>
 8003c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	db01      	blt.n	8003c1a <_ZN9LineTrace4flipEv+0x106>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <_ZN9LineTrace4flipEv+0x108>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <_ZN9LineTrace4flipEv+0x116>
			side_sensor_->disableIgnore();
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 fbb6 	bl	8005396 <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c30:	3337      	adds	r3, #55	; 0x37
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <_ZN9LineTrace4flipEv+0x13c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 fb75 	bl	800532c <_ZN10SideSensor9getStatusEv>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d101      	bne.n	8003c50 <_ZN9LineTrace4flipEv+0x13c>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <_ZN9LineTrace4flipEv+0x13e>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d020      	beq.n	8003c98 <_ZN9LineTrace4flipEv+0x184>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003c5c:	335c      	adds	r3, #92	; 0x5c
 8003c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <_ZN9LineTrace4flipEv+0x15a>
				storeSideLineDistance();
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fade 	bl	8004228 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003c6c:	e008      	b.n	8003c80 <_ZN9LineTrace4flipEv+0x16c>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fb80 	bl	8004374 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c7a:	334c      	adds	r3, #76	; 0x4c
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c86:	3337      	adds	r3, #55	; 0x37
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c92:	3338      	adds	r3, #56	; 0x38
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c9e:	3337      	adds	r3, #55	; 0x37
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <_ZN9LineTrace4flipEv+0x1a4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	2201      	movs	r2, #1
 8003cac:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe f969 	bl	8001f88 <_ZN3LED2LREaa>
 8003cb6:	e007      	b.n	8003cc8 <_ZN9LineTrace4flipEv+0x1b4>
		else led_.LR(-1, 0);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe f960 	bl	8001f88 <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cce:	334e      	adds	r3, #78	; 0x4e
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	f083 0301 	eor.w	r3, r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <_ZN9LineTrace4flipEv+0x1e0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fb23 	bl	800532c <_ZN10SideSensor9getStatusEv>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d101      	bne.n	8003cf4 <_ZN9LineTrace4flipEv+0x1e0>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <_ZN9LineTrace4flipEv+0x1e2>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d011      	beq.n	8003d1e <_ZN9LineTrace4flipEv+0x20a>
#endif
			all_sideline_flag_ = true;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d00:	334e      	adds	r3, #78	; 0x4e
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d0c:	335c      	adds	r3, #92	; 0x5c
 8003d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d120      	bne.n	8003d58 <_ZN9LineTrace4flipEv+0x244>
				storeAllSideLineDistance();
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fabe 	bl	8004298 <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8003d1c:	e01c      	b.n	8003d58 <_ZN9LineTrace4flipEv+0x244>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d24:	334e      	adds	r3, #78	; 0x4e
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <_ZN9LineTrace4flipEv+0x232>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fafb 	bl	800532c <_ZN10SideSensor9getStatusEv>
 8003d36:	4603      	mov	r3, r0
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d101      	bne.n	8003d46 <_ZN9LineTrace4flipEv+0x232>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <_ZN9LineTrace4flipEv+0x234>
 8003d46:	2300      	movs	r3, #0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <_ZN9LineTrace4flipEv+0x244>
#endif
			all_sideline_flag_ = false;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d52:	334e      	adds	r3, #78	; 0x4e
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe faf5 	bl	800234c <_ZN10LineSensor13emergencyStopEv>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <_ZN9LineTrace4flipEv+0x266>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003df0 <_ZN9LineTrace4flipEv+0x2dc>
 8003d70:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003df0 <_ZN9LineTrace4flipEv+0x2dc>
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 fd8b 	bl	8005890 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d80:	334c      	adds	r3, #76	; 0x4c
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d8e:	334c      	adds	r3, #76	; 0x4c
 8003d90:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d98:	334c      	adds	r3, #76	; 0x4c
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d906      	bls.n	8003db2 <_ZN9LineTrace4flipEv+0x29e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003daa:	334c      	adds	r3, #76	; 0x4c
 8003dac:	f242 7210 	movw	r2, #10000	; 0x2710
 8003db0:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003db8:	334c      	adds	r3, #76	; 0x4c
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	2b50      	cmp	r3, #80	; 0x50
 8003dbe:	d808      	bhi.n	8003dd2 <_ZN9LineTrace4flipEv+0x2be>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe f8dc 	bl	8001f88 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003dd0:	e007      	b.n	8003de2 <_ZN9LineTrace4flipEv+0x2ce>
		else led_.LR(-1, 0);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe f8d3 	bl	8001f88 <_ZN3LED2LREaa>
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd90      	pop	{r4, r7, pc}
 8003dea:	bf00      	nop
 8003dec:	43480000 	.word	0x43480000
 8003df0:	00000000 	.word	0x00000000

08003df4 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	i_reset_flag_ = true;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	velocity_ctrl_->start();
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fd96 	bl	8005942 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 fa9e 	bl	800535c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e26:	3330      	adds	r3, #48	; 0x30
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e32:	3332      	adds	r3, #50	; 0x32
 8003e34:	2200      	movs	r2, #0
 8003e36:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e3e:	3334      	adds	r3, #52	; 0x34
 8003e40:	2200      	movs	r2, #0
 8003e42:	801a      	strh	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	velocity_ctrl_->stop();
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f001 fd81 	bl	8005968 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe f889 	bl	8001f88 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e7c:	335c      	adds	r3, #92	; 0x5c
 8003e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d107      	bne.n	8003e96 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69d8      	ldr	r0, [r3, #28]
 8003e8a:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <_ZN9LineTrace4stopEv+0xcc>)
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <_ZN9LineTrace4stopEv+0xd0>)
 8003e8e:	4924      	ldr	r1, [pc, #144]	; (8003f20 <_ZN9LineTrace4stopEv+0xd4>)
 8003e90:	f000 fc89 	bl	80047a6 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003e94:	e006      	b.n	8003ea4 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69d8      	ldr	r0, [r3, #28]
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <_ZN9LineTrace4stopEv+0xd8>)
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <_ZN9LineTrace4stopEv+0xdc>)
 8003e9e:	4920      	ldr	r1, [pc, #128]	; (8003f20 <_ZN9LineTrace4stopEv+0xd4>)
 8003ea0:	f000 fca4 	bl	80047ec <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003eaa:	3360      	adds	r3, #96	; 0x60
 8003eac:	2200      	movs	r2, #0
 8003eae:	9200      	str	r2, [sp, #0]
 8003eb0:	2264      	movs	r2, #100	; 0x64
 8003eb2:	491e      	ldr	r1, [pc, #120]	; (8003f2c <_ZN9LineTrace4stopEv+0xe0>)
 8003eb4:	481a      	ldr	r0, [pc, #104]	; (8003f20 <_ZN9LineTrace4stopEv+0xd4>)
 8003eb6:	f7fd fbc5 	bl	8001644 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003ec0:	33f0      	adds	r3, #240	; 0xf0
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	9200      	str	r2, [sp, #0]
 8003ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eca:	4919      	ldr	r1, [pc, #100]	; (8003f30 <_ZN9LineTrace4stopEv+0xe4>)
 8003ecc:	4814      	ldr	r0, [pc, #80]	; (8003f20 <_ZN9LineTrace4stopEv+0xd4>)
 8003ece:	f7fd fbb9 	bl	8001644 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ed8:	3390      	adds	r3, #144	; 0x90
 8003eda:	2200      	movs	r2, #0
 8003edc:	9200      	str	r2, [sp, #0]
 8003ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ee2:	4914      	ldr	r1, [pc, #80]	; (8003f34 <_ZN9LineTrace4stopEv+0xe8>)
 8003ee4:	480e      	ldr	r0, [pc, #56]	; (8003f20 <_ZN9LineTrace4stopEv+0xd4>)
 8003ee6:	f7fd fbad 	bl	8001644 <sd_write_array_float>

	led_.LR(-1, 0);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	330c      	adds	r3, #12
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe f847 	bl	8001f88 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fd02 	bl	8004908 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fcb1 	bl	8004870 <_ZN6Logger10resetLogs2Ev>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	08019aac 	.word	0x08019aac
 8003f1c:	08019ab8 	.word	0x08019ab8
 8003f20:	08019aa0 	.word	0x08019aa0
 8003f24:	08019b8c 	.word	0x08019b8c
 8003f28:	08019b98 	.word	0x08019b98
 8003f2c:	08019ac8 	.word	0x08019ac8
 8003f30:	08019ad8 	.word	0x08019ad8
 8003f34:	08019ba8 	.word	0x08019ba8

08003f38 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003f44:	2300      	movs	r3, #0
 8003f46:	737b      	strb	r3, [r7, #13]
	start();
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff53 	bl	8003df4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003f4e:	7b7b      	ldrb	r3, [r7, #13]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d15b      	bne.n	800400c <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003f54:	89fb      	ldrh	r3, [r7, #14]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <_ZN9LineTrace7runningEv+0x28>
 8003f5a:	2b0a      	cmp	r3, #10
 8003f5c:	d030      	beq.n	8003fc0 <_ZN9LineTrace7runningEv+0x88>
 8003f5e:	e054      	b.n	800400a <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 f9ed 	bl	8005344 <_ZN10SideSensor16getWhiteLineCntREv>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d044      	beq.n	8004004 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe fd7c 	bl	8002a78 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f86:	335c      	adds	r3, #92	; 0x5c
 8003f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8af 	bl	80040f4 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fb43 	bl	8001626 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fb21 	bl	80015ec <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	330c      	adds	r3, #12
 8003fae:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fd ffe7 	bl	8001f88 <_ZN3LED2LREaa>
				stage = 10;
 8003fba:	230a      	movs	r3, #10
 8003fbc:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003fbe:	e021      	b.n	8004004 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f9bd 	bl	8005344 <_ZN10SideSensor16getWhiteLineCntREv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe fd67 	bl	8002aae <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f89a 	bl	800411a <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003fe6:	2064      	movs	r0, #100	; 0x64
 8003fe8:	f005 fbbc 	bl	8009764 <HAL_Delay>

				setTargetVelocity(0);
 8003fec:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800401c <_ZN9LineTrace7runningEv+0xe4>
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fc73 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ffa:	f005 fbb3 	bl	8009764 <HAL_Delay>

				goal_flag = true;
 8003ffe:	2301      	movs	r3, #1
 8004000:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004002:	e001      	b.n	8004008 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004004:	bf00      	nop
 8004006:	e7a2      	b.n	8003f4e <_ZN9LineTrace7runningEv+0x16>
			break;
 8004008:	bf00      	nop
	while(goal_flag == false){
 800400a:	e7a0      	b.n	8003f4e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff1d 	bl	8003e4c <_ZN9LineTrace4stopEv>
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	00000000 	.word	0x00000000

08004020 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	ed2d 8b02 	vpush	{d8}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d046      	beq.n	80040c4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800403c:	335c      	adds	r3, #92	; 0x5c
 800403e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d11c      	bne.n	8004080 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69dc      	ldr	r4, [r3, #28]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd fa91 	bl	8001576 <_ZN7Encoder15getDistance10mmEv>
 8004054:	eeb0 8a40 	vmov.f32	s16, s0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fec6 	bl	8004dee <_ZN8Odometry8getThetaEv>
 8004062:	ec53 2b10 	vmov	r2, r3, d0
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	f7fc fdd5 	bl	8000c18 <__aeabi_d2f>
 800406e:	4603      	mov	r3, r0
 8004070:	ee00 3a90 	vmov	s1, r3
 8004074:	eeb0 0a48 	vmov.f32	s0, s16
 8004078:	4620      	mov	r0, r4
 800407a:	f000 fabf 	bl	80045fc <_ZN6Logger21storeDistanceAndThetaEff>
 800407e:	e01b      	b.n	80040b8 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69dc      	ldr	r4, [r3, #28]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fc89 	bl	80059a0 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800408e:	eeb0 8a40 	vmov.f32	s16, s0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fea9 	bl	8004dee <_ZN8Odometry8getThetaEv>
 800409c:	ec53 2b10 	vmov	r2, r3, d0
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7fc fdb8 	bl	8000c18 <__aeabi_d2f>
 80040a8:	4603      	mov	r3, r0
 80040aa:	ee00 3a90 	vmov	s1, r3
 80040ae:	eeb0 0a48 	vmov.f32	s0, s16
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 faea 	bl	800468c <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	3301      	adds	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80040c2:	801a      	strh	r2, [r3, #0]
	}
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	ecbd 8b02 	vpop	{d8}
 80040ce:	bd90      	pop	{r4, r7, pc}
 80040d0:	2000029c 	.word	0x2000029c

080040d4 <_ZN9LineTrace14getTargetOmegaEv>:

float LineTrace::getTargetOmega()
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	return target_omega_;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040e2:	ee07 3a90 	vmov	s15, r3
}
 80040e6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fd fa73 	bl	80015ec <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800410c:	3358      	adds	r3, #88	; 0x58
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004128:	3358      	adds	r3, #88	; 0x58
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004134:	335a      	adds	r3, #90	; 0x5a
 8004136:	2200      	movs	r2, #0
 8004138:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004140:	3314      	adds	r3, #20
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004166:	335c      	adds	r3, #92	; 0x5c
 8004168:	887a      	ldrh	r2, [r7, #2]
 800416a:	801a      	strh	r2, [r3, #0]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fd f9f2 	bl	8001576 <_ZN7Encoder15getDistance10mmEv>
 8004192:	eeb0 7a40 	vmov.f32	s14, s0
 8004196:	edd7 7a00 	vldr	s15, [r7]
 800419a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	bf94      	ite	ls
 80041a4:	2301      	movls	r3, #1
 80041a6:	2300      	movhi	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80041ce:	3330      	adds	r3, #48	; 0x30
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	461c      	mov	r4, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fd f9dd 	bl	8001594 <_ZN7Encoder16getTotalDistanceEv>
 80041da:	eef0 7a40 	vmov.f32	s15, s0
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80041e4:	3318      	adds	r3, #24
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80041f4:	3330      	adds	r3, #48	; 0x30
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004202:	3330      	adds	r3, #48	; 0x30
 8004204:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800420c:	3330      	adds	r3, #48	; 0x30
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	2b63      	cmp	r3, #99	; 0x63
 8004212:	d905      	bls.n	8004220 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800421a:	3330      	adds	r3, #48	; 0x30
 800421c:	2263      	movs	r2, #99	; 0x63
 800421e:	801a      	strh	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bd90      	pop	{r4, r7, pc}

08004228 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800423a:	3332      	adds	r3, #50	; 0x32
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	461c      	mov	r4, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f7fd f9a7 	bl	8001594 <_ZN7Encoder16getTotalDistanceEv>
 8004246:	eef0 7a40 	vmov.f32	s15, s0
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8004250:	333c      	adds	r3, #60	; 0x3c
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004260:	3332      	adds	r3, #50	; 0x32
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800426e:	3332      	adds	r3, #50	; 0x32
 8004270:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004278:	3332      	adds	r3, #50	; 0x32
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004280:	d306      	bcc.n	8004290 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800428e:	801a      	strh	r2, [r3, #0]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}

08004298 <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80042aa:	3334      	adds	r3, #52	; 0x34
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	461c      	mov	r4, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7fd f96f 	bl	8001594 <_ZN7Encoder16getTotalDistanceEv>
 80042b6:	eef0 7a40 	vmov.f32	s15, s0
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 80042c0:	3324      	adds	r3, #36	; 0x24
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80042d0:	3334      	adds	r3, #52	; 0x34
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80042de:	3334      	adds	r3, #52	; 0x34
 80042e0:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80042e8:	3334      	adds	r3, #52	; 0x34
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f0:	d306      	bcc.n	8004300 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x68>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80042f8:	3334      	adds	r3, #52	; 0x34
 80042fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042fe:	801a      	strh	r2, [r3, #0]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bd90      	pop	{r4, r7, pc}

08004308 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6959      	ldr	r1, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800431a:	3330      	adds	r3, #48	; 0x30
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8004324:	3318      	adds	r3, #24
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	edd3 7a00 	vldr	s15, [r3]
 800432e:	eeb0 0a67 	vmov.f32	s0, s15
 8004332:	4608      	mov	r0, r1
 8004334:	f7fd f93d 	bl	80015b2 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800433e:	3330      	adds	r3, #48	; 0x30
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800434c:	3330      	adds	r3, #48	; 0x30
 800434e:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004356:	3330      	adds	r3, #48	; 0x30
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	2b63      	cmp	r3, #99	; 0x63
 800435c:	d905      	bls.n	800436a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x62>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004364:	3330      	adds	r3, #48	; 0x30
 8004366:	2263      	movs	r2, #99	; 0x63
 8004368:	801a      	strh	r2, [r3, #0]

}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800437c:	2300      	movs	r3, #0
 800437e:	82fb      	strh	r3, [r7, #22]
 8004380:	8afb      	ldrh	r3, [r7, #22]
 8004382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004386:	d237      	bcs.n	80043f8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
		float temp_sideline_distance = sideline_distance_[i];
 8004388:	8afb      	ldrh	r3, [r7, #22]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004390:	333c      	adds	r3, #60	; 0x3c
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd f8f8 	bl	8001594 <_ZN7Encoder16getTotalDistanceEv>
 80043a4:	eeb0 7a40 	vmov.f32	s14, s0
 80043a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80043ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043b0:	eeb0 0a67 	vmov.f32	s0, s15
 80043b4:	f7fe f820 	bl	80023f8 <_ZSt3absf>
 80043b8:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80043bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004420 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xac>
 80043c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043cc:	d810      	bhi.n	80043f0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x7c>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6959      	ldr	r1, [r3, #20]
 80043d2:	8afb      	ldrh	r3, [r7, #22]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80043da:	333c      	adds	r3, #60	; 0x3c
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	edd3 7a00 	vldr	s15, [r3]
 80043e4:	eeb0 0a67 	vmov.f32	s0, s15
 80043e8:	4608      	mov	r0, r1
 80043ea:	f7fd f8e2 	bl	80015b2 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80043ee:	e003      	b.n	80043f8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80043f0:	8afb      	ldrh	r3, [r7, #22]
 80043f2:	3301      	adds	r3, #1
 80043f4:	82fb      	strh	r3, [r7, #22]
 80043f6:	e7c3      	b.n	8004380 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043fe:	3332      	adds	r3, #50	; 0x32
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004406:	d306      	bcc.n	8004416 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004414:	801a      	strh	r2, [r3, #0]

}
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	42a00000 	.word	0x42a00000

08004424 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004432:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004440:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004444:	2200      	movs	r2, #0
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800444e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004452:	2200      	movs	r2, #0
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800445c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004460:	2200      	movs	r2, #0
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004480:	f7fd f9d2 	bl	8001828 <sd_mount>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004494:	f7fc fe04 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004498:	2100      	movs	r1, #0
 800449a:	2000      	movs	r0, #0
 800449c:	f7fc fe10 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80044a0:	4815      	ldr	r0, [pc, #84]	; (80044f8 <_ZN6Logger10sdCardInitEv+0x84>)
 80044a2:	f7fc fe37 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80044a6:	2101      	movs	r1, #1
 80044a8:	2000      	movs	r0, #0
 80044aa:	f7fc fe09 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80044ae:	4813      	ldr	r0, [pc, #76]	; (80044fc <_ZN6Logger10sdCardInitEv+0x88>)
 80044b0:	f7fc fe30 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80044b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044b8:	f005 f954 	bl	8009764 <HAL_Delay>

	  ret = true;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e015      	b.n	80044ee <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80044c2:	f7fc fded 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80044c6:	2100      	movs	r1, #0
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7fc fdf9 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80044ce:	480a      	ldr	r0, [pc, #40]	; (80044f8 <_ZN6Logger10sdCardInitEv+0x84>)
 80044d0:	f7fc fe20 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80044d4:	2101      	movs	r1, #1
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7fc fdf2 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80044dc:	4808      	ldr	r0, [pc, #32]	; (8004500 <_ZN6Logger10sdCardInitEv+0x8c>)
 80044de:	f7fc fe19 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80044e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044e6:	f005 f93d 	bl	8009764 <HAL_Delay>

	  ret = false;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	08019bb8 	.word	0x08019bb8
 80044fc:	08019bc4 	.word	0x08019bc4
 8004500:	08019bcc 	.word	0x08019bcc

08004504 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004516:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d028      	beq.n	8004572 <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004526:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800453c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800454c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004550:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004558:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004562:	d306      	bcc.n	8004572 <_ZN6Logger8storeLogEf+0x6e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800456a:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800456e:	2200      	movs	r2, #0
 8004570:	801a      	strh	r2, [r3, #0]
	}
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004590:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d02a      	beq.n	80045f0 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80045a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80045ba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80045ca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80045ce:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80045d6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045e0:	d306      	bcc.n	80045f0 <_ZN6Logger9storeLog2Ef+0x72>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80045e8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80045ec:	2200      	movs	r2, #0
 80045ee:	801a      	strh	r2, [r3, #0]
	}
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	ed87 0a02 	vstr	s0, [r7, #8]
 8004608:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004612:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800462c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004638:	3310      	adds	r3, #16
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004648:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004658:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800465c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004664:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	f241 726f 	movw	r2, #5999	; 0x176f
 800466e:	4293      	cmp	r3, r2
 8004670:	d906      	bls.n	8004680 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004678:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800467c:	2200      	movs	r2, #0
 800467e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	ed87 0a02 	vstr	s0, [r7, #8]
 8004698:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046a2:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046bc:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	f503 43ab 	add.w	r3, r3, #21888	; 0x5580
 80046c8:	3370      	adds	r3, #112	; 0x70
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046d8:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046e8:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80046ec:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046f4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	f241 726f 	movw	r2, #5999	; 0x176f
 80046fe:	4293      	cmp	r3, r2
 8004700:	d906      	bls.n	8004710 <_ZN6Logger22storeDistanceAndTheta2Eff+0x84>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004708:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800470c:	2200      	movs	r2, #0
 800470e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004744:	3340      	adds	r3, #64	; 0x40
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af02      	add	r7, sp, #8
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	2300      	movs	r3, #0
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	68b8      	ldr	r0, [r7, #8]
 800476e:	f7fc ff69 	bl	8001644 <sd_write_array_float>
}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af02      	add	r7, sp, #8
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 800478c:	2300      	movs	r3, #0
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68b8      	ldr	r0, [r7, #8]
 800479a:	f7fc ff53 	bl	8001644 <sd_write_array_float>
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af02      	add	r7, sp, #8
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80047ba:	2300      	movs	r3, #0
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	f241 7270 	movw	r2, #6000	; 0x1770
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	68b8      	ldr	r0, [r7, #8]
 80047c8:	f7fc ff3c 	bl	8001644 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80047d2:	3340      	adds	r3, #64	; 0x40
 80047d4:	2200      	movs	r2, #0
 80047d6:	9200      	str	r2, [sp, #0]
 80047d8:	f241 7270 	movw	r2, #6000	; 0x1770
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	68b8      	ldr	r0, [r7, #8]
 80047e0:	f7fc ff30 	bl	8001644 <sd_write_array_float>
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8004800:	2300      	movs	r3, #0
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	f241 7270 	movw	r2, #6000	; 0x1770
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	68b8      	ldr	r0, [r7, #8]
 800480e:	f7fc ff19 	bl	8001644 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004818:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800481c:	2200      	movs	r2, #0
 800481e:	9200      	str	r2, [sp, #0]
 8004820:	f241 7270 	movw	r2, #6000	; 0x1770
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f7fc ff0c 	bl	8001644 <sd_write_array_float>
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004848:	f241 7270 	movw	r2, #6000	; 0x1770
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	68b8      	ldr	r0, [r7, #8]
 8004850:	f7fc ff5e 	bl	8001710 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800485a:	3340      	adds	r3, #64	; 0x40
 800485c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	68b8      	ldr	r0, [r7, #8]
 8004864:	f7fc ff54 	bl	8001710 <sd_read_array_float>
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004870:	b480      	push	{r7}
 8004872:	b08b      	sub	sp, #44	; 0x2c
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800488a:	3340      	adds	r3, #64	; 0x40
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	429a      	cmp	r2, r3
 8004894:	d009      	beq.n	80048aa <_ZN6Logger10resetLogs2Ev+0x3a>
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	617b      	str	r3, [r7, #20]
		log = 0;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	3304      	adds	r3, #4
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
 80048a8:	e7f1      	b.n	800488e <_ZN6Logger10resetLogs2Ev+0x1e>
	}
	for(auto &log : store_theta2_){
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80048b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80048c0:	3340      	adds	r3, #64	; 0x40
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d009      	beq.n	80048e0 <_ZN6Logger10resetLogs2Ev+0x70>
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	60bb      	str	r3, [r7, #8]
		log = 0;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	3304      	adds	r3, #4
 80048dc:	623b      	str	r3, [r7, #32]
 80048de:	e7f1      	b.n	80048c4 <_ZN6Logger10resetLogs2Ev+0x54>
	}

	log_index_tim_ = 0;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048e6:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80048ea:	2200      	movs	r2, #0
 80048ec:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048f4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048f8:	2200      	movs	r2, #0
 80048fa:	801a      	strh	r2, [r3, #0]
}
 80048fc:	bf00      	nop
 80048fe:	372c      	adds	r7, #44	; 0x2c
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004916:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800491a:	2200      	movs	r2, #0
 800491c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004924:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004928:	2200      	movs	r2, #0
 800492a:	801a      	strh	r2, [r3, #0]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004946:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004968:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	805a      	strh	r2, [r3, #2]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <_ZN5Motor4initEv>:

void Motor::init()
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80049a8:	2108      	movs	r1, #8
 80049aa:	4805      	ldr	r0, [pc, #20]	; (80049c0 <_ZN5Motor4initEv+0x20>)
 80049ac:	f00a f88a 	bl	800eac4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80049b0:	210c      	movs	r1, #12
 80049b2:	4803      	ldr	r0, [pc, #12]	; (80049c0 <_ZN5Motor4initEv+0x20>)
 80049b4:	f00a f886 	bl	800eac4 <HAL_TIM_PWM_Start>

}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	200437a8 	.word	0x200437a8

080049c4 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da0d      	bge.n	80049f2 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80049d6:	2200      	movs	r2, #0
 80049d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049dc:	481f      	ldr	r0, [pc, #124]	; (8004a5c <_ZN5Motor9motorCtrlEv+0x98>)
 80049de:	f006 f957 	bl	800ac90 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	425b      	negs	r3, r3
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	81fb      	strh	r3, [r7, #14]
 80049f0:	e00a      	b.n	8004a08 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80049f2:	2201      	movs	r2, #1
 80049f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049f8:	4818      	ldr	r0, [pc, #96]	; (8004a5c <_ZN5Motor9motorCtrlEv+0x98>)
 80049fa:	f006 f949 	bl	800ac90 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da0d      	bge.n	8004a2e <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004a12:	2201      	movs	r2, #1
 8004a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a18:	4810      	ldr	r0, [pc, #64]	; (8004a5c <_ZN5Motor9motorCtrlEv+0x98>)
 8004a1a:	f006 f939 	bl	800ac90 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	425b      	negs	r3, r3
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	81bb      	strh	r3, [r7, #12]
 8004a2c:	e00a      	b.n	8004a44 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a34:	4809      	ldr	r0, [pc, #36]	; (8004a5c <_ZN5Motor9motorCtrlEv+0x98>)
 8004a36:	f006 f92b 	bl	800ac90 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004a44:	89fa      	ldrh	r2, [r7, #14]
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004a4c:	89ba      	ldrh	r2, [r7, #12]
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40020c00 	.word	0x40020c00
 8004a60:	200437a8 	.word	0x200437a8

08004a64 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6178      	str	r0, [r7, #20]
 8004a6c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004a70:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <_ZN5Motor8setRatioEdd+0xd8>)
 8004a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a7e:	f7fc f863 	bl	8000b48 <__aeabi_dcmpgt>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <_ZN5Motor8setRatioEdd+0x30>
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	4c2b      	ldr	r4, [pc, #172]	; (8004b3c <_ZN5Motor8setRatioEdd+0xd8>)
 8004a8e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004a92:	e00e      	b.n	8004ab2 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <_ZN5Motor8setRatioEdd+0xdc>)
 8004a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a9e:	f7fc f835 	bl	8000b0c <__aeabi_dcmplt>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <_ZN5Motor8setRatioEdd+0x4e>
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	4c24      	ldr	r4, [pc, #144]	; (8004b40 <_ZN5Motor8setRatioEdd+0xdc>)
 8004aae:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <_ZN5Motor8setRatioEdd+0xd8>)
 8004ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004abc:	f7fc f844 	bl	8000b48 <__aeabi_dcmpgt>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <_ZN5Motor8setRatioEdd+0x6e>
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	4c1c      	ldr	r4, [pc, #112]	; (8004b3c <_ZN5Motor8setRatioEdd+0xd8>)
 8004acc:	e9c7 3400 	strd	r3, r4, [r7]
 8004ad0:	e00e      	b.n	8004af0 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004adc:	f7fc f816 	bl	8000b0c <__aeabi_dcmplt>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <_ZN5Motor8setRatioEdd+0x8c>
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	4c15      	ldr	r4, [pc, #84]	; (8004b40 <_ZN5Motor8setRatioEdd+0xdc>)
 8004aec:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <_ZN5Motor8setRatioEdd+0xe0>)
 8004af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004afa:	f7fb fd95 	bl	8000628 <__aeabi_dmul>
 8004afe:	4603      	mov	r3, r0
 8004b00:	460c      	mov	r4, r1
 8004b02:	4618      	mov	r0, r3
 8004b04:	4621      	mov	r1, r4
 8004b06:	f7fc f83f 	bl	8000b88 <__aeabi_d2iz>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	b21a      	sxth	r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <_ZN5Motor8setRatioEdd+0xe0>)
 8004b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b1c:	f7fb fd84 	bl	8000628 <__aeabi_dmul>
 8004b20:	4603      	mov	r3, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	4618      	mov	r0, r3
 8004b26:	4621      	mov	r1, r4
 8004b28:	f7fc f82e 	bl	8000b88 <__aeabi_d2iz>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	b21a      	sxth	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	805a      	strh	r2, [r3, #2]

}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}
 8004b3c:	3ff00000 	.word	0x3ff00000
 8004b40:	bff00000 	.word	0xbff00000
 8004b44:	409c2000 	.word	0x409c2000

08004b48 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004b48:	b490      	push	{r4, r7}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	f04f 0400 	mov.w	r4, #0
 8004b60:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	f04f 0400 	mov.w	r4, #0
 8004b6e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	f04f 0400 	mov.w	r4, #0
 8004b7c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	f04f 0400 	mov.w	r4, #0
 8004b8a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	f04f 0400 	mov.w	r4, #0
 8004b98:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	609a      	str	r2, [r3, #8]
}
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc90      	pop	{r4, r7}
 8004bb8:	4770      	bx	lr
 8004bba:	0000      	movs	r0, r0
 8004bbc:	0000      	movs	r0, r0
	...

08004bc0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc fff2 	bl	8001bb8 <_ZN3IMU8getOmegaEv>
 8004bd4:	ee10 3a10 	vmov	r3, s0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fb fccd 	bl	8000578 <__aeabi_f2d>
 8004bde:	4603      	mov	r3, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fcb4 	bl	8001558 <_ZN7Encoder11getDistanceEv>
 8004bf0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004bf4:	a376      	add	r3, pc, #472	; (adr r3, 8004dd0 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bfe:	f7fb fd13 	bl	8000628 <__aeabi_dmul>
 8004c02:	4603      	mov	r3, r0
 8004c04:	460c      	mov	r4, r1
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7fb fcb0 	bl	8000578 <__aeabi_f2d>
 8004c18:	4682      	mov	sl, r0
 8004c1a:	468b      	mov	fp, r1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c30:	f7fb fe24 	bl	800087c <__aeabi_ddiv>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb fb3e 	bl	80002bc <__adddf3>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	ec43 2b17 	vmov	d7, r2, r3
 8004c48:	eeb0 0a47 	vmov.f32	s0, s14
 8004c4c:	eef0 0a67 	vmov.f32	s1, s15
 8004c50:	f00f fa7e 	bl	8014150 <cos>
 8004c54:	ec53 2b10 	vmov	r2, r3, d0
 8004c58:	4650      	mov	r0, sl
 8004c5a:	4659      	mov	r1, fp
 8004c5c:	f7fb fce4 	bl	8000628 <__aeabi_dmul>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4620      	mov	r0, r4
 8004c66:	4629      	mov	r1, r5
 8004c68:	f7fb fb28 	bl	80002bc <__adddf3>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7fb fc7b 	bl	8000578 <__aeabi_f2d>
 8004c82:	4682      	mov	sl, r0
 8004c84:	468b      	mov	fp, r1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c9a:	f7fb fdef 	bl	800087c <__aeabi_ddiv>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	f7fb fb09 	bl	80002bc <__adddf3>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	ec43 2b17 	vmov	d7, r2, r3
 8004cb2:	eeb0 0a47 	vmov.f32	s0, s14
 8004cb6:	eef0 0a67 	vmov.f32	s1, s15
 8004cba:	f00f fa8d 	bl	80141d8 <sin>
 8004cbe:	ec53 2b10 	vmov	r2, r3, d0
 8004cc2:	4650      	mov	r0, sl
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	f7fb fcaf 	bl	8000628 <__aeabi_dmul>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb faf3 	bl	80002bc <__adddf3>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	460c      	mov	r4, r1
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004cec:	461a      	mov	r2, r3
 8004cee:	4623      	mov	r3, r4
 8004cf0:	f7fb fae4 	bl	80002bc <__adddf3>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	ed93 7b08 	vldr	d7, [r3, #32]
 8004d0a:	eeb0 0a47 	vmov.f32	s0, s14
 8004d0e:	eef0 0a67 	vmov.f32	s1, s15
 8004d12:	f00f fa1d 	bl	8014150 <cos>
 8004d16:	ec51 0b10 	vmov	r0, r1, d0
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004d20:	f7fb fc82 	bl	8000628 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	f7fb fac6 	bl	80002bc <__adddf3>
 8004d30:	4603      	mov	r3, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	ed93 7b08 	vldr	d7, [r3, #32]
 8004d46:	eeb0 0a47 	vmov.f32	s0, s14
 8004d4a:	eef0 0a67 	vmov.f32	s1, s15
 8004d4e:	f00f fa43 	bl	80141d8 <sin>
 8004d52:	ec51 0b10 	vmov	r0, r1, d0
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004d5c:	f7fb fc64 	bl	8000628 <__aeabi_dmul>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4620      	mov	r0, r4
 8004d66:	4629      	mov	r1, r5
 8004d68:	f7fb faa8 	bl	80002bc <__adddf3>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4621      	mov	r1, r4
 8004d80:	f7fb ff4a 	bl	8000c18 <__aeabi_d2f>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004d88:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004d90:	4618      	mov	r0, r3
 8004d92:	4621      	mov	r1, r4
 8004d94:	f7fb ff40 	bl	8000c18 <__aeabi_d2f>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004d9c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004da4:	4618      	mov	r0, r3
 8004da6:	4621      	mov	r1, r4
 8004da8:	f7fb ff36 	bl	8000c18 <__aeabi_d2f>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004db0:	601a      	str	r2, [r3, #0]
}
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	405b8000 	.word	0x405b8000
 8004dc4:	200002c0 	.word	0x200002c0
 8004dc8:	200002c4 	.word	0x200002c4
 8004dcc:	200002c8 	.word	0x200002c8
 8004dd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004dd4:	3f50624d 	.word	0x3f50624d

08004dd8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff feed 	bl	8004bc0 <_ZN8Odometry12calcPotitionEv>
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004dee:	b490      	push	{r4, r7}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
	return theta_;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004dfc:	ec44 3b17 	vmov	d7, r3, r4
}
 8004e00:	eeb0 0a47 	vmov.f32	s0, s14
 8004e04:	eef0 0a67 	vmov.f32	s1, s15
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc90      	pop	{r4, r7}
 8004e0e:	4770      	bx	lr

08004e10 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004e10:	b490      	push	{r4, r7}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	f04f 0400 	mov.w	r4, #0
 8004e22:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	f04f 0400 	mov.w	r4, #0
 8004e3e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004e42:	bf00      	nop
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc90      	pop	{r4, r7}
 8004e4a:	4770      	bx	lr

08004e4c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004e4c:	b490      	push	{r4, r7}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	f04f 0400 	mov.w	r4, #0
 8004e64:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	f04f 0400 	mov.w	r4, #0
 8004e72:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	f04f 0400 	mov.w	r4, #0
 8004e80:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004e8a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004e8e:	2200      	movs	r2, #0
 8004e90:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004e92:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <_ZN13PathFollowingC1Ev+0xec>)
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	f04f 0400 	mov.w	r4, #0
 8004e9c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004ea0:	4a25      	ldr	r2, [pc, #148]	; (8004f38 <_ZN13PathFollowingC1Ev+0xec>)
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	f04f 0400 	mov.w	r4, #0
 8004eaa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004eae:	4a22      	ldr	r2, [pc, #136]	; (8004f38 <_ZN13PathFollowingC1Ev+0xec>)
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	f04f 0400 	mov.w	r4, #0
 8004eb8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004ebc:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <_ZN13PathFollowingC1Ev+0xf0>)
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	f04f 0400 	mov.w	r4, #0
 8004ec6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004eca:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <_ZN13PathFollowingC1Ev+0xf0>)
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	f04f 0400 	mov.w	r4, #0
 8004ed4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004ed8:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <_ZN13PathFollowingC1Ev+0xf0>)
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	f04f 0400 	mov.w	r4, #0
 8004ee2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004ee6:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <_ZN13PathFollowingC1Ev+0xf0>)
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	f04f 0400 	mov.w	r4, #0
 8004ef0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004ef4:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <_ZN13PathFollowingC1Ev+0xf0>)
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	f04f 0400 	mov.w	r4, #0
 8004efe:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004f02:	4a0e      	ldr	r2, [pc, #56]	; (8004f3c <_ZN13PathFollowingC1Ev+0xf0>)
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	f04f 0400 	mov.w	r4, #0
 8004f0c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004f10:	4a0b      	ldr	r2, [pc, #44]	; (8004f40 <_ZN13PathFollowingC1Ev+0xf4>)
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	f04f 0400 	mov.w	r4, #0
 8004f1a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004f1e:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <_ZN13PathFollowingC1Ev+0xf4>)
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	f04f 0400 	mov.w	r4, #0
 8004f28:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc90      	pop	{r4, r7}
 8004f36:	4770      	bx	lr
 8004f38:	20043ca8 	.word	0x20043ca8
 8004f3c:	20043c38 	.word	0x20043c38
 8004f40:	20043c98 	.word	0x20043c98

08004f44 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004f4c:	f001 fcb2 	bl	80068b4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004f50:	f107 0318 	add.w	r3, r7, #24
 8004f54:	2201      	movs	r2, #1
 8004f56:	4915      	ldr	r1, [pc, #84]	; (8004fac <_ZN13PathFollowing4initEv+0x68>)
 8004f58:	4815      	ldr	r0, [pc, #84]	; (8004fb0 <_ZN13PathFollowing4initEv+0x6c>)
 8004f5a:	f7fc fc1f 	bl	800179c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004f5e:	f107 0310 	add.w	r3, r7, #16
 8004f62:	2201      	movs	r2, #1
 8004f64:	4913      	ldr	r1, [pc, #76]	; (8004fb4 <_ZN13PathFollowing4initEv+0x70>)
 8004f66:	4812      	ldr	r0, [pc, #72]	; (8004fb0 <_ZN13PathFollowing4initEv+0x6c>)
 8004f68:	f7fc fc18 	bl	800179c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004f6c:	f107 0308 	add.w	r3, r7, #8
 8004f70:	2201      	movs	r2, #1
 8004f72:	4911      	ldr	r1, [pc, #68]	; (8004fb8 <_ZN13PathFollowing4initEv+0x74>)
 8004f74:	480e      	ldr	r0, [pc, #56]	; (8004fb0 <_ZN13PathFollowing4initEv+0x6c>)
 8004f76:	f7fc fc11 	bl	800179c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004f7a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004f7e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004f82:	ed97 5b02 	vldr	d5, [r7, #8]
 8004f86:	eeb0 2a45 	vmov.f32	s4, s10
 8004f8a:	eef0 2a65 	vmov.f32	s5, s11
 8004f8e:	eeb0 1a46 	vmov.f32	s2, s12
 8004f92:	eef0 1a66 	vmov.f32	s3, s13
 8004f96:	eeb0 0a47 	vmov.f32	s0, s14
 8004f9a:	eef0 0a67 	vmov.f32	s1, s15
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f80c 	bl	8004fbc <_ZN13PathFollowing7setGainEddd>
}
 8004fa4:	bf00      	nop
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	08019bd4 	.word	0x08019bd4
 8004fb0:	08019bdc 	.word	0x08019bdc
 8004fb4:	08019be4 	.word	0x08019be4
 8004fb8:	08019bec 	.word	0x08019bec

08004fbc <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004fbc:	b490      	push	{r4, r7}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	61f8      	str	r0, [r7, #28]
 8004fc4:	ed87 0b04 	vstr	d0, [r7, #16]
 8004fc8:	ed87 1b02 	vstr	d1, [r7, #8]
 8004fcc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004fd0:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004fd2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004fd6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004fda:	4a07      	ldr	r2, [pc, #28]	; (8004ff8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004fdc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004fe0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004fe4:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004fe6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004fea:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004fee:	bf00      	nop
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc90      	pop	{r4, r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	20043ca8 	.word	0x20043ca8

08004ffc <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005004:	2088      	movs	r0, #136	; 0x88
 8005006:	f7fc fe84 	bl	8001d12 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800500a:	2080      	movs	r0, #128	; 0x80
 800500c:	f7fc fe81 	bl	8001d12 <INA260_init>
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005020:	2188      	movs	r1, #136	; 0x88
 8005022:	2002      	movs	r0, #2
 8005024:	f7fc fe12 	bl	8001c4c <INA260_read>
 8005028:	4603      	mov	r3, r0
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fa92 	bl	8000554 <__aeabi_i2d>
 8005030:	a30c      	add	r3, pc, #48	; (adr r3, 8005064 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f7fb faf7 	bl	8000628 <__aeabi_dmul>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	4618      	mov	r0, r3
 8005040:	4621      	mov	r1, r4
 8005042:	f7fb fde9 	bl	8000c18 <__aeabi_d2f>
 8005046:	4602      	mov	r2, r0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4a03      	ldr	r2, [pc, #12]	; (8005060 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005052:	6013      	str	r3, [r2, #0]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bd90      	pop	{r4, r7, pc}
 800505c:	f3af 8000 	nop.w
 8005060:	200002cc 	.word	0x200002cc
 8005064:	47ae147b 	.word	0x47ae147b
 8005068:	3f547ae1 	.word	0x3f547ae1

0800506c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	ee07 3a90 	vmov	s15, r3

}
 800507c:	eeb0 0a67 	vmov.f32	s0, s15
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005098:	2102      	movs	r1, #2
 800509a:	4822      	ldr	r0, [pc, #136]	; (8005124 <_ZN12RotarySwitch8getValueEv+0x98>)
 800509c:	f005 fde0 	bl	800ac60 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80050b0:	89fb      	ldrh	r3, [r7, #14]
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80050b8:	2108      	movs	r1, #8
 80050ba:	481a      	ldr	r0, [pc, #104]	; (8005124 <_ZN12RotarySwitch8getValueEv+0x98>)
 80050bc:	f005 fdd0 	bl	800ac60 <HAL_GPIO_ReadPin>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf0c      	ite	eq
 80050c6:	2301      	moveq	r3, #1
 80050c8:	2300      	movne	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80050d0:	89fb      	ldrh	r3, [r7, #14]
 80050d2:	f043 0302 	orr.w	r3, r3, #2
 80050d6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80050d8:	2110      	movs	r1, #16
 80050da:	4812      	ldr	r0, [pc, #72]	; (8005124 <_ZN12RotarySwitch8getValueEv+0x98>)
 80050dc:	f005 fdc0 	bl	800ac60 <HAL_GPIO_ReadPin>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	f043 0304 	orr.w	r3, r3, #4
 80050f6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	480a      	ldr	r0, [pc, #40]	; (8005124 <_ZN12RotarySwitch8getValueEv+0x98>)
 80050fc:	f005 fdb0 	bl	800ac60 <HAL_GPIO_ReadPin>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	f043 0308 	orr.w	r3, r3, #8
 8005116:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005118:	89fb      	ldrh	r3, [r7, #14]

}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40020c00 	.word	0x40020c00

08005128 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	805a      	strh	r2, [r3, #2]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	809a      	strh	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	719a      	strb	r2, [r3, #6]
{

}
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	799b      	ldrb	r3, [r3, #6]
 8005164:	f083 0301 	eor.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80c7 	beq.w	80052fe <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8005170:	4b65      	ldr	r3, [pc, #404]	; (8005308 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f083 0301 	eor.w	r3, r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d027      	beq.n	80051ce <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800517e:	2104      	movs	r1, #4
 8005180:	4862      	ldr	r0, [pc, #392]	; (800530c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005182:	f005 fd6d 	bl	800ac60 <HAL_GPIO_ReadPin>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d006      	beq.n	80051a4 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8005196:	4b5e      	ldr	r3, [pc, #376]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	4b5c      	ldr	r3, [pc, #368]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	e002      	b.n	80051aa <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 80051a4:	4b5a      	ldr	r3, [pc, #360]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80051aa:	4b59      	ldr	r3, [pc, #356]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d93f      	bls.n	8005232 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 80051c0:	4b51      	ldr	r3, [pc, #324]	; (8005308 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80051c6:	4b52      	ldr	r3, [pc, #328]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	e031      	b.n	8005232 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 80051ce:	4b4e      	ldr	r3, [pc, #312]	; (8005308 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02d      	beq.n	8005232 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80051d6:	2104      	movs	r1, #4
 80051d8:	484c      	ldr	r0, [pc, #304]	; (800530c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80051da:	f005 fd41 	bl	800ac60 <HAL_GPIO_ReadPin>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 80051ee:	4b48      	ldr	r3, [pc, #288]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	3301      	adds	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	4b46      	ldr	r3, [pc, #280]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80051f8:	801a      	strh	r2, [r3, #0]
 80051fa:	e002      	b.n	8005202 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80051fc:	4b44      	ldr	r3, [pc, #272]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80051fe:	2200      	movs	r2, #0
 8005200:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005202:	4b43      	ldr	r3, [pc, #268]	; (8005310 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	2b04      	cmp	r3, #4
 8005208:	d913      	bls.n	8005232 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	f083 0301 	eor.w	r3, r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8005218:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	889b      	ldrh	r3, [r3, #4]
 8005222:	3301      	adds	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	889a      	ldrh	r2, [r3, #4]
 800522e:	4b39      	ldr	r3, [pc, #228]	; (8005314 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8005230:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005232:	4b39      	ldr	r3, [pc, #228]	; (8005318 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	f083 0301 	eor.w	r3, r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d027      	beq.n	8005290 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005244:	4835      	ldr	r0, [pc, #212]	; (800531c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8005246:	f005 fd0b 	bl	800ac60 <HAL_GPIO_ReadPin>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d006      	beq.n	8005268 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 800525a:	4b31      	ldr	r3, [pc, #196]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	e002      	b.n	800526e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005268:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800526a:	2200      	movs	r2, #0
 800526c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800526e:	4b2c      	ldr	r3, [pc, #176]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	2b04      	cmp	r3, #4
 8005274:	d90c      	bls.n	8005290 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800528a:	4b25      	ldr	r3, [pc, #148]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800528c:	2200      	movs	r2, #0
 800528e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005290:	4b21      	ldr	r3, [pc, #132]	; (8005318 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d02e      	beq.n	80052f6 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800529c:	481f      	ldr	r0, [pc, #124]	; (800531c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800529e:	f005 fcdf 	bl	800ac60 <HAL_GPIO_ReadPin>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d006      	beq.n	80052c0 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	3301      	adds	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	4b19      	ldr	r3, [pc, #100]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	e002      	b.n	80052c6 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 80052c0:	4b17      	ldr	r3, [pc, #92]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80052c6:	4b16      	ldr	r3, [pc, #88]	; (8005320 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d913      	bls.n	80052f6 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	f083 0302 	eor.w	r3, r3, #2
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	885b      	ldrh	r3, [r3, #2]
 80052e6:	3301      	adds	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	885a      	ldrh	r2, [r3, #2]
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80052f4:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	881a      	ldrh	r2, [r3, #0]
 80052fa:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80052fc:	801a      	strh	r2, [r3, #0]
	}

}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200002d6 	.word	0x200002d6
 800530c:	40021000 	.word	0x40021000
 8005310:	200002da 	.word	0x200002da
 8005314:	200002d4 	.word	0x200002d4
 8005318:	200002d7 	.word	0x200002d7
 800531c:	40020c00 	.word	0x40020c00
 8005320:	200002d8 	.word	0x200002d8
 8005324:	200002d2 	.word	0x200002d2
 8005328:	200002d0 	.word	0x200002d0

0800532c <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	return status_;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	881b      	ldrh	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	889b      	ldrh	r3, [r3, #4]
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	809a      	strh	r2, [r3, #4]
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	719a      	strb	r2, [r3, #6]
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	719a      	strb	r2, [r3, #6]
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	799b      	ldrb	r3, [r3, #6]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80053d8:	3308      	adds	r3, #8
 80053da:	4611      	mov	r1, r2
 80053dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80053e0:	4618      	mov	r0, r3
 80053e2:	f010 f935 	bl	8015650 <memcpy>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	08019c10 	.word	0x08019c10

0800541c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800542e:	2b00      	cmp	r3, #0
 8005430:	d010      	beq.n	8005454 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	ed97 0a00 	vldr	s0, [r7]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff f862 	bl	8004504 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800544a:	eeb0 0a67 	vmov.f32	s0, s15
 800544e:	4610      	mov	r0, r2
 8005450:	f7ff f895 	bl	800457e <_ZN6Logger9storeLog2Ef>
	}

}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 800545c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800546a:	2b00      	cmp	r3, #0
 800546c:	d046      	beq.n	80054fc <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800547a:	461a      	mov	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3204      	adds	r2, #4
 8005480:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800548c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800549c:	3301      	adds	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 80054ae:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80054b6:	2bf9      	cmp	r3, #249	; 0xf9
 80054b8:	d903      	bls.n	80054c2 <_ZN20SystemIdentification10updateMsigEv+0x66>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	22fa      	movs	r2, #250	; 0xfa
 80054be:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685c      	ldr	r4, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fb f853 	bl	8000578 <__aeabi_f2d>
 80054d2:	4605      	mov	r5, r0
 80054d4:	460e      	mov	r6, r1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80054dc:	eef1 7a67 	vneg.f32	s15, s15
 80054e0:	ee17 3a90 	vmov	r3, s15
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fb f847 	bl	8000578 <__aeabi_f2d>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	ec43 2b11 	vmov	d1, r2, r3
 80054f2:	ec46 5b10 	vmov	d0, r5, r6
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff fab4 	bl	8004a64 <_ZN5Motor8setRatioEdd>

	}

}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005504:	200002dc 	.word	0x200002dc

08005508 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	611a      	str	r2, [r3, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	615a      	str	r2, [r3, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	619a      	str	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	61da      	str	r2, [r3, #28]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	621a      	str	r2, [r3, #32]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	625a      	str	r2, [r3, #36]	; 0x24
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
	...

080055a0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80055a0:	b590      	push	{r4, r7, lr}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	f107 020c 	add.w	r2, r7, #12
 80055b0:	f107 0110 	add.w	r1, r7, #16
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fb ffbb 	bl	8001530 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80055ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80055be:	edd7 7a03 	vldr	s15, [r7, #12]
 80055c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80055ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055ce:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80055d2:	6978      	ldr	r0, [r7, #20]
 80055d4:	f7fa ffd0 	bl	8000578 <__aeabi_f2d>
 80055d8:	a30b      	add	r3, pc, #44	; (adr r3, 8005608 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fb f823 	bl	8000628 <__aeabi_dmul>
 80055e2:	4603      	mov	r3, r0
 80055e4:	460c      	mov	r4, r1
 80055e6:	4618      	mov	r0, r3
 80055e8:	4621      	mov	r1, r4
 80055ea:	f7fb fb15 	bl	8000c18 <__aeabi_d2f>
 80055ee:	4602      	mov	r2, r0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	ee07 3a90 	vmov	s15, r3
}
 80055fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd90      	pop	{r4, r7, pc}
 8005606:	bf00      	nop
 8005608:	1ab1d998 	.word	0x1ab1d998
 800560c:	3f7830b5 	.word	0x3f7830b5

08005610 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8005610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005612:	ed2d 8b02 	vpush	{d8}
 8005616:	b08d      	sub	sp, #52	; 0x34
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	ed93 7a00 	vldr	s14, [r3]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	edd3 7a02 	vldr	s15, [r3, #8]
 8005628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	ed93 8a01 	vldr	s16, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	4618      	mov	r0, r3
 800563c:	f7fc fabc 	bl	8001bb8 <_ZN3IMU8getOmegaEv>
 8005640:	eef0 7a40 	vmov.f32	s15, s0
 8005644:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005648:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	if(i_reset_flag_ == true){
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <_ZN12VelocityCtrl3pidEv+0x5e>
		v_i = o_i = 0;
 8005656:	4b80      	ldr	r3, [pc, #512]	; (8005858 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	4b7e      	ldr	r3, [pc, #504]	; (8005858 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a7e      	ldr	r2, [pc, #504]	; (800585c <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005664:	6013      	str	r3, [r2, #0]
		i_reset_flag_ = false;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	edd3 7a04 	vldr	s15, [r3, #16]
 8005674:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 8005680:	4b76      	ldr	r3, [pc, #472]	; (800585c <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f7fa ff77 	bl	8000578 <__aeabi_f2d>
 800568a:	4604      	mov	r4, r0
 800568c:	460d      	mov	r5, r1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	ed93 7a06 	vldr	s14, [r3, #24]
 8005694:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569c:	ee17 0a90 	vmov	r0, s15
 80056a0:	f7fa ff6a 	bl	8000578 <__aeabi_f2d>
 80056a4:	a36a      	add	r3, pc, #424	; (adr r3, 8005850 <_ZN12VelocityCtrl3pidEv+0x240>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fa ffbd 	bl	8000628 <__aeabi_dmul>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4620      	mov	r0, r4
 80056b4:	4629      	mov	r1, r5
 80056b6:	f7fa fe01 	bl	80002bc <__adddf3>
 80056ba:	4603      	mov	r3, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	4618      	mov	r0, r3
 80056c0:	4621      	mov	r1, r4
 80056c2:	f7fb faa9 	bl	8000c18 <__aeabi_d2f>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b64      	ldr	r3, [pc, #400]	; (800585c <_ZN12VelocityCtrl3pidEv+0x24c>)
 80056ca:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80056d2:	4b63      	ldr	r3, [pc, #396]	; (8005860 <_ZN12VelocityCtrl3pidEv+0x250>)
 80056d4:	edd3 7a00 	vldr	s15, [r3]
 80056d8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80056dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e4:	ee17 0a90 	vmov	r0, s15
 80056e8:	f7fa ff46 	bl	8000578 <__aeabi_f2d>
 80056ec:	a358      	add	r3, pc, #352	; (adr r3, 8005850 <_ZN12VelocityCtrl3pidEv+0x240>)
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f7fb f8c3 	bl	800087c <__aeabi_ddiv>
 80056f6:	4603      	mov	r3, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	4618      	mov	r0, r3
 80056fc:	4621      	mov	r1, r4
 80056fe:	f7fb fa8b 	bl	8000c18 <__aeabi_d2f>
 8005702:	4603      	mov	r3, r0
 8005704:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	edd3 7a07 	vldr	s15, [r3, #28]
 800570c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005714:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 8005718:	4b4f      	ldr	r3, [pc, #316]	; (8005858 <_ZN12VelocityCtrl3pidEv+0x248>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f7fa ff2b 	bl	8000578 <__aeabi_f2d>
 8005722:	4604      	mov	r4, r0
 8005724:	460d      	mov	r5, r1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800572c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005734:	ee17 0a90 	vmov	r0, s15
 8005738:	f7fa ff1e 	bl	8000578 <__aeabi_f2d>
 800573c:	a344      	add	r3, pc, #272	; (adr r3, 8005850 <_ZN12VelocityCtrl3pidEv+0x240>)
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f7fa ff71 	bl	8000628 <__aeabi_dmul>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4620      	mov	r0, r4
 800574c:	4629      	mov	r1, r5
 800574e:	f7fa fdb5 	bl	80002bc <__adddf3>
 8005752:	4603      	mov	r3, r0
 8005754:	460c      	mov	r4, r1
 8005756:	4618      	mov	r0, r3
 8005758:	4621      	mov	r1, r4
 800575a:	f7fb fa5d 	bl	8000c18 <__aeabi_d2f>
 800575e:	4602      	mov	r2, r0
 8005760:	4b3d      	ldr	r3, [pc, #244]	; (8005858 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005762:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) / DELTA_T;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	ed93 7a08 	vldr	s14, [r3, #32]
 800576a:	4b3e      	ldr	r3, [pc, #248]	; (8005864 <_ZN12VelocityCtrl3pidEv+0x254>)
 800576c:	edd3 7a00 	vldr	s15, [r3]
 8005770:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005774:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577c:	ee17 0a90 	vmov	r0, s15
 8005780:	f7fa fefa 	bl	8000578 <__aeabi_f2d>
 8005784:	a332      	add	r3, pc, #200	; (adr r3, 8005850 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fb f877 	bl	800087c <__aeabi_ddiv>
 800578e:	4603      	mov	r3, r0
 8005790:	460c      	mov	r4, r1
 8005792:	4618      	mov	r0, r3
 8005794:	4621      	mov	r1, r4
 8005796:	f7fb fa3f 	bl	8000c18 <__aeabi_d2f>
 800579a:	4603      	mov	r3, r0
 800579c:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 800579e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80057a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80057a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057aa:	4b2c      	ldr	r3, [pc, #176]	; (800585c <_ZN12VelocityCtrl3pidEv+0x24c>)
 80057ac:	edd3 7a00 	vldr	s15, [r3]
 80057b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b4:	edc7 7a05 	vstr	s15, [r7, #20]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80057bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80057c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80057c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057c8:	4b23      	ldr	r3, [pc, #140]	; (8005858 <_ZN12VelocityCtrl3pidEv+0x248>)
 80057ca:	edd3 7a00 	vldr	s15, [r3]
 80057ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057d2:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80057d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80057da:	edd7 7a06 	vldr	s15, [r7, #24]
 80057de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057e2:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <_ZN12VelocityCtrl3pidEv+0x248>)
 80057e4:	edd3 7a00 	vldr	s15, [r3]
 80057e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ec:	eef1 7a67 	vneg.f32	s15, s15
 80057f0:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80057f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80057fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005804:	ee17 0a90 	vmov	r0, s15
 8005808:	f7fa feb6 	bl	8000578 <__aeabi_f2d>
 800580c:	4605      	mov	r5, r0
 800580e:	460e      	mov	r6, r1
 8005810:	ed97 7a05 	vldr	s14, [r7, #20]
 8005814:	edd7 7a02 	vldr	s15, [r7, #8]
 8005818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800581c:	ee17 0a90 	vmov	r0, s15
 8005820:	f7fa feaa 	bl	8000578 <__aeabi_f2d>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	ec43 2b11 	vmov	d1, r2, r3
 800582c:	ec46 5b10 	vmov	d0, r5, r6
 8005830:	4620      	mov	r0, r4
 8005832:	f7ff f917 	bl	8004a64 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <_ZN12VelocityCtrl3pidEv+0x250>)
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 800583c:	4a09      	ldr	r2, [pc, #36]	; (8005864 <_ZN12VelocityCtrl3pidEv+0x254>)
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	6013      	str	r3, [r2, #0]
}
 8005842:	bf00      	nop
 8005844:	3734      	adds	r7, #52	; 0x34
 8005846:	46bd      	mov	sp, r7
 8005848:	ecbd 8b02 	vpop	{d8}
 800584c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800584e:	bf00      	nop
 8005850:	d2f1a9fc 	.word	0xd2f1a9fc
 8005854:	3f50624d 	.word	0x3f50624d
 8005858:	200002ec 	.word	0x200002ec
 800585c:	200002e8 	.word	0x200002e8
 8005860:	200002e0 	.word	0x200002e0
 8005864:	200002e4 	.word	0x200002e4

08005868 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	ed87 0a02 	vstr	s0, [r7, #8]
 8005874:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	605a      	str	r2, [r3, #4]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	ed87 0a02 	vstr	s0, [r7, #8]
 800589c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80058c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80058c8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	615a      	str	r2, [r3, #20]
}
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80058f6:	edc7 0a01 	vstr	s1, [r7, #4]
 80058fa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fe3b 	bl	80055a0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fe6b 	bl	8005610 <_ZN12VelocityCtrl3pidEv>
		//pidTranslationOnly();
	}


}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005998 <_ZN12VelocityCtrl4stopEv+0x30>
 8005980:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005998 <_ZN12VelocityCtrl4stopEv+0x30>
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff f86d 	bl	8004a64 <_ZN5Motor8setRatioEdd>

}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	f3af 8000 	nop.w
	...

080059a0 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	ee07 3a90 	vmov	s15, r3
}
 80059b0:	eeb0 0a67 	vmov.f32	s0, s15
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d10e      	bne.n	80059f0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 80059d2:	f001 fe21 	bl	8007618 <cppFlip100ns>

		tim7_timer++;
 80059d6:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80059de:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1a      	ldr	r2, [pc, #104]	; (8005a50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d902      	bls.n	80059f0 <HAL_TIM_PeriodElapsedCallback+0x30>
 80059ea:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10e      	bne.n	8005a18 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80059fa:	f001 fdc3 	bl	8007584 <cppFlip1ms>

		tim6_timer++;
 80059fe:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005a06:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a10      	ldr	r2, [pc, #64]	; (8005a50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d902      	bls.n	8005a18 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005a12:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a0f      	ldr	r2, [pc, #60]	; (8005a5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10e      	bne.n	8005a40 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005a22:	f001 fe03 	bl	800762c <cppFlip10ms>

		tim13_timer++;
 8005a26:	4b0e      	ldr	r3, [pc, #56]	; (8005a60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005a2e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a06      	ldr	r2, [pc, #24]	; (8005a50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d902      	bls.n	8005a40 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
	}

}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40001400 	.word	0x40001400
 8005a4c:	2004395c 	.word	0x2004395c
 8005a50:	0001869f 	.word	0x0001869f
 8005a54:	40001000 	.word	0x40001000
 8005a58:	20043918 	.word	0x20043918
 8005a5c:	40001c00 	.word	0x40001c00
 8005a60:	20043960 	.word	0x20043960

08005a64 <init>:

void init()
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a6e:	4808      	ldr	r0, [pc, #32]	; (8005a90 <init+0x2c>)
 8005a70:	f005 f90e 	bl	800ac90 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005a74:	4807      	ldr	r0, [pc, #28]	; (8005a94 <init+0x30>)
 8005a76:	f008 ffd6 	bl	800ea26 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005a7a:	4807      	ldr	r0, [pc, #28]	; (8005a98 <init+0x34>)
 8005a7c:	f008 ffd3 	bl	800ea26 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005a80:	4806      	ldr	r0, [pc, #24]	; (8005a9c <init+0x38>)
 8005a82:	f008 ffd0 	bl	800ea26 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005a86:	f001 fce3 	bl	8007450 <cppInit>

	//path_following_initialize();

}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
 8005a94:	20043a44 	.word	0x20043a44
 8005a98:	20043be8 	.word	0x20043be8
 8005a9c:	20043964 	.word	0x20043964

08005aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005aa4:	f003 fdec 	bl	8009680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005aa8:	f000 f82a 	bl	8005b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005aac:	f000 fdbc 	bl	8006628 <MX_GPIO_Init>
  MX_DMA_Init();
 8005ab0:	f000 fd8a 	bl	80065c8 <MX_DMA_Init>
  MX_I2C2_Init();
 8005ab4:	f000 f9e8 	bl	8005e88 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005ab8:	f000 fa14 	bl	8005ee4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005abc:	f000 fa32 	bl	8005f24 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005ac0:	f000 fa66 	bl	8005f90 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005ac4:	f000 fb70 	bl	80061a8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005ac8:	f000 fc3c 	bl	8006344 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005acc:	f000 fd52 	bl	8006574 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005ad0:	f00a ff7c 	bl	80109cc <MX_FATFS_Init>
  MX_TIM6_Init();
 8005ad4:	f000 fbcc 	bl	8006270 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005ad8:	f000 f9a8 	bl	8005e2c <MX_I2C1_Init>
  MX_TIM3_Init();
 8005adc:	f000 fb00 	bl	80060e0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005ae0:	f000 fc88 	bl	80063f4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005ae4:	f000 fcd4 	bl	8006490 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005ae8:	f000 f898 	bl	8005c1c <MX_ADC2_Init>
  MX_TIM7_Init();
 8005aec:	f000 fbf6 	bl	80062dc <MX_TIM7_Init>
  MX_TIM13_Init();
 8005af0:	f000 fd1c 	bl	800652c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005af4:	f7ff ffb6 	bl	8005a64 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005af8:	f001 fdb2 	bl	8007660 <cppLoop>
 8005afc:	e7fc      	b.n	8005af8 <main+0x58>
	...

08005b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b0a4      	sub	sp, #144	; 0x90
 8005b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b0a:	2234      	movs	r2, #52	; 0x34
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f00f fda9 	bl	8015666 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b24:	f107 030c 	add.w	r3, r7, #12
 8005b28:	223c      	movs	r2, #60	; 0x3c
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f00f fd9a 	bl	8015666 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <SystemClock_Config+0x114>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	4a36      	ldr	r2, [pc, #216]	; (8005c14 <SystemClock_Config+0x114>)
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b40:	6413      	str	r3, [r2, #64]	; 0x40
 8005b42:	4b34      	ldr	r3, [pc, #208]	; (8005c14 <SystemClock_Config+0x114>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <SystemClock_Config+0x118>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a30      	ldr	r2, [pc, #192]	; (8005c18 <SystemClock_Config+0x118>)
 8005b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <SystemClock_Config+0x118>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b66:	607b      	str	r3, [r7, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b74:	2302      	movs	r3, #2
 8005b76:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b7c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005b7e:	2308      	movs	r3, #8
 8005b80:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005b82:	23b4      	movs	r3, #180	; 0xb4
 8005b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005b8e:	2308      	movs	r3, #8
 8005b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005b94:	2302      	movs	r3, #2
 8005b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f006 fc98 	bl	800c4d4 <HAL_RCC_OscConfig>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005baa:	f000 fe7f 	bl	80068ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005bae:	f006 f813 	bl	800bbd8 <HAL_PWREx_EnableOverDrive>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005bb8:	f000 fe78 	bl	80068ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005bbc:	230f      	movs	r3, #15
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005bcc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005bd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bd8:	2105      	movs	r1, #5
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f006 f84c 	bl	800bc78 <HAL_RCC_ClockConfig>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005be6:	f000 fe61 	bl	80068ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005bea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005bee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bf8:	f107 030c 	add.w	r3, r7, #12
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f006 fa2b 	bl	800c058 <HAL_RCCEx_PeriphCLKConfig>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005c08:	f000 fe50 	bl	80068ac <Error_Handler>
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	3790      	adds	r7, #144	; 0x90
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40023800 	.word	0x40023800
 8005c18:	40007000 	.word	0x40007000

08005c1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005c22:	463b      	mov	r3, r7
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005c2e:	4b7c      	ldr	r3, [pc, #496]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c30:	4a7c      	ldr	r2, [pc, #496]	; (8005e24 <MX_ADC2_Init+0x208>)
 8005c32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005c34:	4b7a      	ldr	r3, [pc, #488]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005c3c:	4b78      	ldr	r3, [pc, #480]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005c42:	4b77      	ldr	r3, [pc, #476]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005c48:	4b75      	ldr	r3, [pc, #468]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005c4e:	4b74      	ldr	r3, [pc, #464]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c56:	4b72      	ldr	r3, [pc, #456]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c5c:	4b70      	ldr	r3, [pc, #448]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c5e:	4a72      	ldr	r2, [pc, #456]	; (8005e28 <MX_ADC2_Init+0x20c>)
 8005c60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c62:	4b6f      	ldr	r3, [pc, #444]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005c68:	4b6d      	ldr	r3, [pc, #436]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c6a:	220e      	movs	r2, #14
 8005c6c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005c6e:	4b6c      	ldr	r3, [pc, #432]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c76:	4b6a      	ldr	r3, [pc, #424]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005c7c:	4868      	ldr	r0, [pc, #416]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c7e:	f003 fd93 	bl	80097a8 <HAL_ADC_Init>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005c88:	f000 fe10 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005c8c:	230a      	movs	r3, #10
 8005c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005c90:	2301      	movs	r3, #1
 8005c92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005c94:	2306      	movs	r3, #6
 8005c96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c98:	463b      	mov	r3, r7
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4860      	ldr	r0, [pc, #384]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005c9e:	f003 fed7 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005ca8:	f000 fe00 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005cac:	230b      	movs	r3, #11
 8005cae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4859      	ldr	r0, [pc, #356]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005cba:	f003 fec9 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005cc4:	f000 fdf2 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005cc8:	230c      	movs	r3, #12
 8005cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4852      	ldr	r0, [pc, #328]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005cd6:	f003 febb 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005ce0:	f000 fde4 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005ce4:	230d      	movs	r3, #13
 8005ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005ce8:	2304      	movs	r3, #4
 8005cea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005cec:	463b      	mov	r3, r7
 8005cee:	4619      	mov	r1, r3
 8005cf0:	484b      	ldr	r0, [pc, #300]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005cf2:	f003 fead 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005cfc:	f000 fdd6 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005d04:	2305      	movs	r3, #5
 8005d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d08:	463b      	mov	r3, r7
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4844      	ldr	r0, [pc, #272]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005d0e:	f003 fe9f 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005d18:	f000 fdc8 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005d20:	2306      	movs	r3, #6
 8005d22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d24:	463b      	mov	r3, r7
 8005d26:	4619      	mov	r1, r3
 8005d28:	483d      	ldr	r0, [pc, #244]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005d2a:	f003 fe91 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005d34:	f000 fdba 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005d3c:	2307      	movs	r3, #7
 8005d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d40:	463b      	mov	r3, r7
 8005d42:	4619      	mov	r1, r3
 8005d44:	4836      	ldr	r0, [pc, #216]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005d46:	f003 fe83 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005d50:	f000 fdac 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005d54:	2303      	movs	r3, #3
 8005d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005d58:	2308      	movs	r3, #8
 8005d5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	4619      	mov	r1, r3
 8005d60:	482f      	ldr	r0, [pc, #188]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005d62:	f003 fe75 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005d6c:	f000 fd9e 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005d70:	2304      	movs	r3, #4
 8005d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005d74:	2309      	movs	r3, #9
 8005d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d78:	463b      	mov	r3, r7
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4828      	ldr	r0, [pc, #160]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005d7e:	f003 fe67 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005d88:	f000 fd90 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005d8c:	2305      	movs	r3, #5
 8005d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005d90:	230a      	movs	r3, #10
 8005d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d94:	463b      	mov	r3, r7
 8005d96:	4619      	mov	r1, r3
 8005d98:	4821      	ldr	r0, [pc, #132]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005d9a:	f003 fe59 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005da4:	f000 fd82 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005da8:	2306      	movs	r3, #6
 8005daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005dac:	230b      	movs	r3, #11
 8005dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005db0:	463b      	mov	r3, r7
 8005db2:	4619      	mov	r1, r3
 8005db4:	481a      	ldr	r0, [pc, #104]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005db6:	f003 fe4b 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005dc0:	f000 fd74 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005dc4:	2307      	movs	r3, #7
 8005dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005dc8:	230c      	movs	r3, #12
 8005dca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005dcc:	463b      	mov	r3, r7
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4813      	ldr	r0, [pc, #76]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005dd2:	f003 fe3d 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005ddc:	f000 fd66 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005de0:	2308      	movs	r3, #8
 8005de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005de4:	230d      	movs	r3, #13
 8005de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005de8:	463b      	mov	r3, r7
 8005dea:	4619      	mov	r1, r3
 8005dec:	480c      	ldr	r0, [pc, #48]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005dee:	f003 fe2f 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005df8:	f000 fd58 	bl	80068ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005dfc:	2309      	movs	r3, #9
 8005dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005e00:	230e      	movs	r3, #14
 8005e02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e04:	463b      	mov	r3, r7
 8005e06:	4619      	mov	r1, r3
 8005e08:	4805      	ldr	r0, [pc, #20]	; (8005e20 <MX_ADC2_Init+0x204>)
 8005e0a:	f003 fe21 	bl	8009a50 <HAL_ADC_ConfigChannel>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005e14:	f000 fd4a 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	200437e8 	.word	0x200437e8
 8005e24:	40012100 	.word	0x40012100
 8005e28:	0f000001 	.word	0x0f000001

08005e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005e30:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e32:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <MX_I2C1_Init+0x54>)
 8005e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e38:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <MX_I2C1_Init+0x58>)
 8005e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005e42:	4b0e      	ldr	r3, [pc, #56]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e5c:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005e62:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e64:	2280      	movs	r2, #128	; 0x80
 8005e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005e68:	4804      	ldr	r0, [pc, #16]	; (8005e7c <MX_I2C1_Init+0x50>)
 8005e6a:	f004 ff2b 	bl	800acc4 <HAL_I2C_Init>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005e74:	f000 fd1a 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005e78:	bf00      	nop
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20043830 	.word	0x20043830
 8005e80:	40005400 	.word	0x40005400
 8005e84:	000186a0 	.word	0x000186a0

08005e88 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005e8e:	4a13      	ldr	r2, [pc, #76]	; (8005edc <MX_I2C2_Init+0x54>)
 8005e90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005e94:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <MX_I2C2_Init+0x58>)
 8005e96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005eaa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005eb8:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005ec4:	4804      	ldr	r0, [pc, #16]	; (8005ed8 <MX_I2C2_Init+0x50>)
 8005ec6:	f004 fefd 	bl	800acc4 <HAL_I2C_Init>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005ed0:	f000 fcec 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005ed4:	bf00      	nop
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200438c4 	.word	0x200438c4
 8005edc:	40005800 	.word	0x40005800
 8005ee0:	000186a0 	.word	0x000186a0

08005ee4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <MX_SDIO_SD_Init+0x38>)
 8005eea:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <MX_SDIO_SD_Init+0x3c>)
 8005eec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005eee:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <MX_SDIO_SD_Init+0x38>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <MX_SDIO_SD_Init+0x38>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005efa:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <MX_SDIO_SD_Init+0x38>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005f00:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <MX_SDIO_SD_Init+0x38>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <MX_SDIO_SD_Init+0x38>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <MX_SDIO_SD_Init+0x38>)
 8005f0e:	2202      	movs	r2, #2
 8005f10:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005f12:	bf00      	nop
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20043ac4 	.word	0x20043ac4
 8005f20:	40012c00 	.word	0x40012c00

08005f24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005f28:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f2a:	4a18      	ldr	r2, [pc, #96]	; (8005f8c <MX_SPI2_Init+0x68>)
 8005f2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005f2e:	4b16      	ldr	r3, [pc, #88]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f44:	2202      	movs	r2, #2
 8005f46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f58:	2228      	movs	r2, #40	; 0x28
 8005f5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f62:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f70:	220a      	movs	r2, #10
 8005f72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005f74:	4804      	ldr	r0, [pc, #16]	; (8005f88 <MX_SPI2_Init+0x64>)
 8005f76:	f007 ffd7 	bl	800df28 <HAL_SPI_Init>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005f80:	f000 fc94 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005f84:	bf00      	nop
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20043710 	.word	0x20043710
 8005f8c:	40003800 	.word	0x40003800

08005f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b09a      	sub	sp, #104	; 0x68
 8005f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005f96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f00f fb61 	bl	8015666 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fa4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005fae:	f107 0320 	add.w	r3, r7, #32
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	609a      	str	r2, [r3, #8]
 8005fba:	60da      	str	r2, [r3, #12]
 8005fbc:	611a      	str	r2, [r3, #16]
 8005fbe:	615a      	str	r2, [r3, #20]
 8005fc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f00f fb4c 	bl	8015666 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005fce:	4b42      	ldr	r3, [pc, #264]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005fd0:	4a42      	ldr	r2, [pc, #264]	; (80060dc <MX_TIM1_Init+0x14c>)
 8005fd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005fd4:	4b40      	ldr	r3, [pc, #256]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fda:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005fe0:	4b3d      	ldr	r3, [pc, #244]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fe6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fe8:	4b3b      	ldr	r3, [pc, #236]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005fee:	4b3a      	ldr	r3, [pc, #232]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ff4:	4b38      	ldr	r3, [pc, #224]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ffa:	4837      	ldr	r0, [pc, #220]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005ffc:	f008 fd37 	bl	800ea6e <HAL_TIM_PWM_Init>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006006:	f000 fc51 	bl	80068ac <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800600a:	2303      	movs	r3, #3
 800600c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800600e:	2300      	movs	r3, #0
 8006010:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006012:	2301      	movs	r3, #1
 8006014:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006016:	2300      	movs	r3, #0
 8006018:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800601e:	2300      	movs	r3, #0
 8006020:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006022:	2301      	movs	r3, #1
 8006024:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006026:	2300      	movs	r3, #0
 8006028:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800602e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006032:	4619      	mov	r1, r3
 8006034:	4828      	ldr	r0, [pc, #160]	; (80060d8 <MX_TIM1_Init+0x148>)
 8006036:	f008 fd83 	bl	800eb40 <HAL_TIM_Encoder_Init>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006040:	f000 fc34 	bl	80068ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006044:	2300      	movs	r3, #0
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006048:	2300      	movs	r3, #0
 800604a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800604c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006050:	4619      	mov	r1, r3
 8006052:	4821      	ldr	r0, [pc, #132]	; (80060d8 <MX_TIM1_Init+0x148>)
 8006054:	f009 faaa 	bl	800f5ac <HAL_TIMEx_MasterConfigSynchronization>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800605e:	f000 fc25 	bl	80068ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006062:	2360      	movs	r3, #96	; 0x60
 8006064:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800606a:	2300      	movs	r3, #0
 800606c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800606e:	2300      	movs	r3, #0
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006072:	2300      	movs	r3, #0
 8006074:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800607a:	2300      	movs	r3, #0
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800607e:	f107 0320 	add.w	r3, r7, #32
 8006082:	2208      	movs	r2, #8
 8006084:	4619      	mov	r1, r3
 8006086:	4814      	ldr	r0, [pc, #80]	; (80060d8 <MX_TIM1_Init+0x148>)
 8006088:	f008 ff2c 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006092:	f000 fc0b 	bl	80068ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006096:	2300      	movs	r3, #0
 8006098:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800609a:	2300      	movs	r3, #0
 800609c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80060aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80060b4:	463b      	mov	r3, r7
 80060b6:	4619      	mov	r1, r3
 80060b8:	4807      	ldr	r0, [pc, #28]	; (80060d8 <MX_TIM1_Init+0x148>)
 80060ba:	f009 faf3 	bl	800f6a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80060c4:	f000 fbf2 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80060c8:	4803      	ldr	r0, [pc, #12]	; (80060d8 <MX_TIM1_Init+0x148>)
 80060ca:	f000 ffdf 	bl	800708c <HAL_TIM_MspPostInit>

}
 80060ce:	bf00      	nop
 80060d0:	3768      	adds	r7, #104	; 0x68
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20043a84 	.word	0x20043a84
 80060dc:	40010000 	.word	0x40010000

080060e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	; 0x28
 80060e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060e6:	f107 0320 	add.w	r3, r7, #32
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060f0:	1d3b      	adds	r3, r7, #4
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	605a      	str	r2, [r3, #4]
 80060f8:	609a      	str	r2, [r3, #8]
 80060fa:	60da      	str	r2, [r3, #12]
 80060fc:	611a      	str	r2, [r3, #16]
 80060fe:	615a      	str	r2, [r3, #20]
 8006100:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006102:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <MX_TIM3_Init+0xc0>)
 8006104:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <MX_TIM3_Init+0xc4>)
 8006106:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006108:	4b25      	ldr	r3, [pc, #148]	; (80061a0 <MX_TIM3_Init+0xc0>)
 800610a:	2201      	movs	r2, #1
 800610c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <MX_TIM3_Init+0xc0>)
 8006110:	2200      	movs	r2, #0
 8006112:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006114:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <MX_TIM3_Init+0xc0>)
 8006116:	f241 1293 	movw	r2, #4499	; 0x1193
 800611a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800611c:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <MX_TIM3_Init+0xc0>)
 800611e:	2200      	movs	r2, #0
 8006120:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006122:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <MX_TIM3_Init+0xc0>)
 8006124:	2200      	movs	r2, #0
 8006126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006128:	481d      	ldr	r0, [pc, #116]	; (80061a0 <MX_TIM3_Init+0xc0>)
 800612a:	f008 fca0 	bl	800ea6e <HAL_TIM_PWM_Init>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006134:	f000 fbba 	bl	80068ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006138:	2300      	movs	r3, #0
 800613a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800613c:	2300      	movs	r3, #0
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006140:	f107 0320 	add.w	r3, r7, #32
 8006144:	4619      	mov	r1, r3
 8006146:	4816      	ldr	r0, [pc, #88]	; (80061a0 <MX_TIM3_Init+0xc0>)
 8006148:	f009 fa30 	bl	800f5ac <HAL_TIMEx_MasterConfigSynchronization>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006152:	f000 fbab 	bl	80068ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006156:	2360      	movs	r3, #96	; 0x60
 8006158:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	2200      	movs	r2, #0
 800616a:	4619      	mov	r1, r3
 800616c:	480c      	ldr	r0, [pc, #48]	; (80061a0 <MX_TIM3_Init+0xc0>)
 800616e:	f008 feb9 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006178:	f000 fb98 	bl	80068ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800617c:	1d3b      	adds	r3, r7, #4
 800617e:	2204      	movs	r2, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4807      	ldr	r0, [pc, #28]	; (80061a0 <MX_TIM3_Init+0xc0>)
 8006184:	f008 feae 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800618e:	f000 fb8d 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006192:	4803      	ldr	r0, [pc, #12]	; (80061a0 <MX_TIM3_Init+0xc0>)
 8006194:	f000 ff7a 	bl	800708c <HAL_TIM_MspPostInit>

}
 8006198:	bf00      	nop
 800619a:	3728      	adds	r7, #40	; 0x28
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	2004391c 	.word	0x2004391c
 80061a4:	40000400 	.word	0x40000400

080061a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061ae:	f107 0320 	add.w	r3, r7, #32
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	605a      	str	r2, [r3, #4]
 80061c0:	609a      	str	r2, [r3, #8]
 80061c2:	60da      	str	r2, [r3, #12]
 80061c4:	611a      	str	r2, [r3, #16]
 80061c6:	615a      	str	r2, [r3, #20]
 80061c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80061ca:	4b27      	ldr	r3, [pc, #156]	; (8006268 <MX_TIM4_Init+0xc0>)
 80061cc:	4a27      	ldr	r2, [pc, #156]	; (800626c <MX_TIM4_Init+0xc4>)
 80061ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80061d0:	4b25      	ldr	r3, [pc, #148]	; (8006268 <MX_TIM4_Init+0xc0>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061d6:	4b24      	ldr	r3, [pc, #144]	; (8006268 <MX_TIM4_Init+0xc0>)
 80061d8:	2200      	movs	r2, #0
 80061da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80061dc:	4b22      	ldr	r3, [pc, #136]	; (8006268 <MX_TIM4_Init+0xc0>)
 80061de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80061e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061e4:	4b20      	ldr	r3, [pc, #128]	; (8006268 <MX_TIM4_Init+0xc0>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061ea:	4b1f      	ldr	r3, [pc, #124]	; (8006268 <MX_TIM4_Init+0xc0>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80061f0:	481d      	ldr	r0, [pc, #116]	; (8006268 <MX_TIM4_Init+0xc0>)
 80061f2:	f008 fc3c 	bl	800ea6e <HAL_TIM_PWM_Init>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80061fc:	f000 fb56 	bl	80068ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006200:	2300      	movs	r3, #0
 8006202:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006204:	2300      	movs	r3, #0
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006208:	f107 0320 	add.w	r3, r7, #32
 800620c:	4619      	mov	r1, r3
 800620e:	4816      	ldr	r0, [pc, #88]	; (8006268 <MX_TIM4_Init+0xc0>)
 8006210:	f009 f9cc 	bl	800f5ac <HAL_TIMEx_MasterConfigSynchronization>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800621a:	f000 fb47 	bl	80068ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800621e:	2360      	movs	r3, #96	; 0x60
 8006220:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800622e:	1d3b      	adds	r3, r7, #4
 8006230:	2208      	movs	r2, #8
 8006232:	4619      	mov	r1, r3
 8006234:	480c      	ldr	r0, [pc, #48]	; (8006268 <MX_TIM4_Init+0xc0>)
 8006236:	f008 fe55 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006240:	f000 fb34 	bl	80068ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006244:	1d3b      	adds	r3, r7, #4
 8006246:	220c      	movs	r2, #12
 8006248:	4619      	mov	r1, r3
 800624a:	4807      	ldr	r0, [pc, #28]	; (8006268 <MX_TIM4_Init+0xc0>)
 800624c:	f008 fe4a 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006256:	f000 fb29 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800625a:	4803      	ldr	r0, [pc, #12]	; (8006268 <MX_TIM4_Init+0xc0>)
 800625c:	f000 ff16 	bl	800708c <HAL_TIM_MspPostInit>

}
 8006260:	bf00      	nop
 8006262:	3728      	adds	r7, #40	; 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	200437a8 	.word	0x200437a8
 800626c:	40000800 	.word	0x40000800

08006270 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006276:	463b      	mov	r3, r7
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800627e:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <MX_TIM6_Init+0x64>)
 8006280:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <MX_TIM6_Init+0x68>)
 8006282:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006284:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <MX_TIM6_Init+0x64>)
 8006286:	2259      	movs	r2, #89	; 0x59
 8006288:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800628a:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <MX_TIM6_Init+0x64>)
 800628c:	2200      	movs	r2, #0
 800628e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <MX_TIM6_Init+0x64>)
 8006292:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006296:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006298:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <MX_TIM6_Init+0x64>)
 800629a:	2280      	movs	r2, #128	; 0x80
 800629c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800629e:	480d      	ldr	r0, [pc, #52]	; (80062d4 <MX_TIM6_Init+0x64>)
 80062a0:	f008 fb96 	bl	800e9d0 <HAL_TIM_Base_Init>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80062aa:	f000 faff 	bl	80068ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062ae:	2300      	movs	r3, #0
 80062b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80062b6:	463b      	mov	r3, r7
 80062b8:	4619      	mov	r1, r3
 80062ba:	4806      	ldr	r0, [pc, #24]	; (80062d4 <MX_TIM6_Init+0x64>)
 80062bc:	f009 f976 	bl	800f5ac <HAL_TIMEx_MasterConfigSynchronization>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80062c6:	f000 faf1 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20043a44 	.word	0x20043a44
 80062d8:	40001000 	.word	0x40001000

080062dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062e2:	463b      	mov	r3, r7
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <MX_TIM7_Init+0x60>)
 80062ec:	4a14      	ldr	r2, [pc, #80]	; (8006340 <MX_TIM7_Init+0x64>)
 80062ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80062f0:	4b12      	ldr	r3, [pc, #72]	; (800633c <MX_TIM7_Init+0x60>)
 80062f2:	22b3      	movs	r2, #179	; 0xb3
 80062f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062f6:	4b11      	ldr	r3, [pc, #68]	; (800633c <MX_TIM7_Init+0x60>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <MX_TIM7_Init+0x60>)
 80062fe:	2231      	movs	r2, #49	; 0x31
 8006300:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006302:	4b0e      	ldr	r3, [pc, #56]	; (800633c <MX_TIM7_Init+0x60>)
 8006304:	2280      	movs	r2, #128	; 0x80
 8006306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006308:	480c      	ldr	r0, [pc, #48]	; (800633c <MX_TIM7_Init+0x60>)
 800630a:	f008 fb61 	bl	800e9d0 <HAL_TIM_Base_Init>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006314:	f000 faca 	bl	80068ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006318:	2300      	movs	r3, #0
 800631a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800631c:	2300      	movs	r3, #0
 800631e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006320:	463b      	mov	r3, r7
 8006322:	4619      	mov	r1, r3
 8006324:	4805      	ldr	r0, [pc, #20]	; (800633c <MX_TIM7_Init+0x60>)
 8006326:	f009 f941 	bl	800f5ac <HAL_TIMEx_MasterConfigSynchronization>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006330:	f000 fabc 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20043be8 	.word	0x20043be8
 8006340:	40001400 	.word	0x40001400

08006344 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08c      	sub	sp, #48	; 0x30
 8006348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800634a:	f107 030c 	add.w	r3, r7, #12
 800634e:	2224      	movs	r2, #36	; 0x24
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f00f f987 	bl	8015666 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006360:	4b22      	ldr	r3, [pc, #136]	; (80063ec <MX_TIM8_Init+0xa8>)
 8006362:	4a23      	ldr	r2, [pc, #140]	; (80063f0 <MX_TIM8_Init+0xac>)
 8006364:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006366:	4b21      	ldr	r3, [pc, #132]	; (80063ec <MX_TIM8_Init+0xa8>)
 8006368:	2200      	movs	r2, #0
 800636a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800636c:	4b1f      	ldr	r3, [pc, #124]	; (80063ec <MX_TIM8_Init+0xa8>)
 800636e:	2210      	movs	r2, #16
 8006370:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <MX_TIM8_Init+0xa8>)
 8006374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006378:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800637a:	4b1c      	ldr	r3, [pc, #112]	; (80063ec <MX_TIM8_Init+0xa8>)
 800637c:	2200      	movs	r2, #0
 800637e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006380:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <MX_TIM8_Init+0xa8>)
 8006382:	2200      	movs	r2, #0
 8006384:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006386:	4b19      	ldr	r3, [pc, #100]	; (80063ec <MX_TIM8_Init+0xa8>)
 8006388:	2200      	movs	r2, #0
 800638a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800638c:	2303      	movs	r3, #3
 800638e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006394:	2301      	movs	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80063a0:	2300      	movs	r3, #0
 80063a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80063a4:	2301      	movs	r3, #1
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80063a8:	2300      	movs	r3, #0
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80063b0:	f107 030c 	add.w	r3, r7, #12
 80063b4:	4619      	mov	r1, r3
 80063b6:	480d      	ldr	r0, [pc, #52]	; (80063ec <MX_TIM8_Init+0xa8>)
 80063b8:	f008 fbc2 	bl	800eb40 <HAL_TIM_Encoder_Init>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80063c2:	f000 fa73 	bl	80068ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4806      	ldr	r0, [pc, #24]	; (80063ec <MX_TIM8_Init+0xa8>)
 80063d4:	f009 f8ea 	bl	800f5ac <HAL_TIMEx_MasterConfigSynchronization>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80063de:	f000 fa65 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80063e2:	bf00      	nop
 80063e4:	3730      	adds	r7, #48	; 0x30
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20043768 	.word	0x20043768
 80063f0:	40010400 	.word	0x40010400

080063f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	60da      	str	r2, [r3, #12]
 8006406:	611a      	str	r2, [r3, #16]
 8006408:	615a      	str	r2, [r3, #20]
 800640a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <MX_TIM10_Init+0x94>)
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <MX_TIM10_Init+0x98>)
 8006410:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006412:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <MX_TIM10_Init+0x94>)
 8006414:	2201      	movs	r2, #1
 8006416:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006418:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <MX_TIM10_Init+0x94>)
 800641a:	2200      	movs	r2, #0
 800641c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 800641e:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <MX_TIM10_Init+0x94>)
 8006420:	f242 3227 	movw	r2, #8999	; 0x2327
 8006424:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <MX_TIM10_Init+0x94>)
 8006428:	2200      	movs	r2, #0
 800642a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800642c:	4b16      	ldr	r3, [pc, #88]	; (8006488 <MX_TIM10_Init+0x94>)
 800642e:	2200      	movs	r2, #0
 8006430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006432:	4815      	ldr	r0, [pc, #84]	; (8006488 <MX_TIM10_Init+0x94>)
 8006434:	f008 facc 	bl	800e9d0 <HAL_TIM_Base_Init>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800643e:	f000 fa35 	bl	80068ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006442:	4811      	ldr	r0, [pc, #68]	; (8006488 <MX_TIM10_Init+0x94>)
 8006444:	f008 fb13 	bl	800ea6e <HAL_TIM_PWM_Init>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800644e:	f000 fa2d 	bl	80068ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006452:	2360      	movs	r3, #96	; 0x60
 8006454:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006456:	2300      	movs	r3, #0
 8006458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	2200      	movs	r2, #0
 8006466:	4619      	mov	r1, r3
 8006468:	4807      	ldr	r0, [pc, #28]	; (8006488 <MX_TIM10_Init+0x94>)
 800646a:	f008 fd3b 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006474:	f000 fa1a 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006478:	4803      	ldr	r0, [pc, #12]	; (8006488 <MX_TIM10_Init+0x94>)
 800647a:	f000 fe07 	bl	800708c <HAL_TIM_MspPostInit>

}
 800647e:	bf00      	nop
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20043884 	.word	0x20043884
 800648c:	40014400 	.word	0x40014400

08006490 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006496:	1d3b      	adds	r3, r7, #4
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	605a      	str	r2, [r3, #4]
 800649e:	609a      	str	r2, [r3, #8]
 80064a0:	60da      	str	r2, [r3, #12]
 80064a2:	611a      	str	r2, [r3, #16]
 80064a4:	615a      	str	r2, [r3, #20]
 80064a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80064a8:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <MX_TIM11_Init+0x94>)
 80064aa:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <MX_TIM11_Init+0x98>)
 80064ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <MX_TIM11_Init+0x94>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064b4:	4b1b      	ldr	r3, [pc, #108]	; (8006524 <MX_TIM11_Init+0x94>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <MX_TIM11_Init+0x94>)
 80064bc:	f242 3227 	movw	r2, #8999	; 0x2327
 80064c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064c2:	4b18      	ldr	r3, [pc, #96]	; (8006524 <MX_TIM11_Init+0x94>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064c8:	4b16      	ldr	r3, [pc, #88]	; (8006524 <MX_TIM11_Init+0x94>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80064ce:	4815      	ldr	r0, [pc, #84]	; (8006524 <MX_TIM11_Init+0x94>)
 80064d0:	f008 fa7e 	bl	800e9d0 <HAL_TIM_Base_Init>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80064da:	f000 f9e7 	bl	80068ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80064de:	4811      	ldr	r0, [pc, #68]	; (8006524 <MX_TIM11_Init+0x94>)
 80064e0:	f008 fac5 	bl	800ea6e <HAL_TIM_PWM_Init>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80064ea:	f000 f9df 	bl	80068ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064ee:	2360      	movs	r3, #96	; 0x60
 80064f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	2200      	movs	r2, #0
 8006502:	4619      	mov	r1, r3
 8006504:	4807      	ldr	r0, [pc, #28]	; (8006524 <MX_TIM11_Init+0x94>)
 8006506:	f008 fced 	bl	800eee4 <HAL_TIM_PWM_ConfigChannel>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006510:	f000 f9cc 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006514:	4803      	ldr	r0, [pc, #12]	; (8006524 <MX_TIM11_Init+0x94>)
 8006516:	f000 fdb9 	bl	800708c <HAL_TIM_MspPostInit>

}
 800651a:	bf00      	nop
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200439a4 	.word	0x200439a4
 8006528:	40014800 	.word	0x40014800

0800652c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <MX_TIM13_Init+0x40>)
 8006532:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <MX_TIM13_Init+0x44>)
 8006534:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006536:	4b0d      	ldr	r3, [pc, #52]	; (800656c <MX_TIM13_Init+0x40>)
 8006538:	2259      	movs	r2, #89	; 0x59
 800653a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800653c:	4b0b      	ldr	r3, [pc, #44]	; (800656c <MX_TIM13_Init+0x40>)
 800653e:	2200      	movs	r2, #0
 8006540:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <MX_TIM13_Init+0x40>)
 8006544:	f242 720f 	movw	r2, #9999	; 0x270f
 8006548:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <MX_TIM13_Init+0x40>)
 800654c:	2200      	movs	r2, #0
 800654e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006550:	4b06      	ldr	r3, [pc, #24]	; (800656c <MX_TIM13_Init+0x40>)
 8006552:	2280      	movs	r2, #128	; 0x80
 8006554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006556:	4805      	ldr	r0, [pc, #20]	; (800656c <MX_TIM13_Init+0x40>)
 8006558:	f008 fa3a 	bl	800e9d0 <HAL_TIM_Base_Init>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006562:	f000 f9a3 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006566:	bf00      	nop
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20043964 	.word	0x20043964
 8006570:	40001c00 	.word	0x40001c00

08006574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 800657a:	4a12      	ldr	r2, [pc, #72]	; (80065c4 <MX_USART2_UART_Init+0x50>)
 800657c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 8006580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006586:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 8006588:	2200      	movs	r2, #0
 800658a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800658c:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 800658e:	2200      	movs	r2, #0
 8006590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006592:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 8006594:	2200      	movs	r2, #0
 8006596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006598:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 800659a:	220c      	movs	r2, #12
 800659c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800659e:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80065a4:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80065aa:	4805      	ldr	r0, [pc, #20]	; (80065c0 <MX_USART2_UART_Init+0x4c>)
 80065ac:	f009 f8e0 	bl	800f770 <HAL_UART_Init>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80065b6:	f000 f979 	bl	80068ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80065ba:	bf00      	nop
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20043b48 	.word	0x20043b48
 80065c4:	40004400 	.word	0x40004400

080065c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]
 80065d2:	4b14      	ldr	r3, [pc, #80]	; (8006624 <MX_DMA_Init+0x5c>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	4a13      	ldr	r2, [pc, #76]	; (8006624 <MX_DMA_Init+0x5c>)
 80065d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065dc:	6313      	str	r3, [r2, #48]	; 0x30
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <MX_DMA_Init+0x5c>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065e6:	607b      	str	r3, [r7, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80065ea:	2200      	movs	r2, #0
 80065ec:	2100      	movs	r1, #0
 80065ee:	203a      	movs	r0, #58	; 0x3a
 80065f0:	f003 fdb9 	bl	800a166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80065f4:	203a      	movs	r0, #58	; 0x3a
 80065f6:	f003 fdd2 	bl	800a19e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80065fa:	2200      	movs	r2, #0
 80065fc:	2100      	movs	r1, #0
 80065fe:	203b      	movs	r0, #59	; 0x3b
 8006600:	f003 fdb1 	bl	800a166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006604:	203b      	movs	r0, #59	; 0x3b
 8006606:	f003 fdca 	bl	800a19e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800660a:	2200      	movs	r2, #0
 800660c:	2100      	movs	r1, #0
 800660e:	2045      	movs	r0, #69	; 0x45
 8006610:	f003 fda9 	bl	800a166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006614:	2045      	movs	r0, #69	; 0x45
 8006616:	f003 fdc2 	bl	800a19e <HAL_NVIC_EnableIRQ>

}
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40023800 	.word	0x40023800

08006628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08c      	sub	sp, #48	; 0x30
 800662c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800662e:	f107 031c 	add.w	r3, r7, #28
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	605a      	str	r2, [r3, #4]
 8006638:	609a      	str	r2, [r3, #8]
 800663a:	60da      	str	r2, [r3, #12]
 800663c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	4b94      	ldr	r3, [pc, #592]	; (8006894 <MX_GPIO_Init+0x26c>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a93      	ldr	r2, [pc, #588]	; (8006894 <MX_GPIO_Init+0x26c>)
 8006648:	f043 0310 	orr.w	r3, r3, #16
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	4b91      	ldr	r3, [pc, #580]	; (8006894 <MX_GPIO_Init+0x26c>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	4b8d      	ldr	r3, [pc, #564]	; (8006894 <MX_GPIO_Init+0x26c>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a8c      	ldr	r2, [pc, #560]	; (8006894 <MX_GPIO_Init+0x26c>)
 8006664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006668:	6313      	str	r3, [r2, #48]	; 0x30
 800666a:	4b8a      	ldr	r3, [pc, #552]	; (8006894 <MX_GPIO_Init+0x26c>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	4b86      	ldr	r3, [pc, #536]	; (8006894 <MX_GPIO_Init+0x26c>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	4a85      	ldr	r2, [pc, #532]	; (8006894 <MX_GPIO_Init+0x26c>)
 8006680:	f043 0304 	orr.w	r3, r3, #4
 8006684:	6313      	str	r3, [r2, #48]	; 0x30
 8006686:	4b83      	ldr	r3, [pc, #524]	; (8006894 <MX_GPIO_Init+0x26c>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	4b7f      	ldr	r3, [pc, #508]	; (8006894 <MX_GPIO_Init+0x26c>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a7e      	ldr	r2, [pc, #504]	; (8006894 <MX_GPIO_Init+0x26c>)
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	6313      	str	r3, [r2, #48]	; 0x30
 80066a2:	4b7c      	ldr	r3, [pc, #496]	; (8006894 <MX_GPIO_Init+0x26c>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	4b78      	ldr	r3, [pc, #480]	; (8006894 <MX_GPIO_Init+0x26c>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	4a77      	ldr	r2, [pc, #476]	; (8006894 <MX_GPIO_Init+0x26c>)
 80066b8:	f043 0302 	orr.w	r3, r3, #2
 80066bc:	6313      	str	r3, [r2, #48]	; 0x30
 80066be:	4b75      	ldr	r3, [pc, #468]	; (8006894 <MX_GPIO_Init+0x26c>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	60bb      	str	r3, [r7, #8]
 80066c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	4b71      	ldr	r3, [pc, #452]	; (8006894 <MX_GPIO_Init+0x26c>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	4a70      	ldr	r2, [pc, #448]	; (8006894 <MX_GPIO_Init+0x26c>)
 80066d4:	f043 0308 	orr.w	r3, r3, #8
 80066d8:	6313      	str	r3, [r2, #48]	; 0x30
 80066da:	4b6e      	ldr	r3, [pc, #440]	; (8006894 <MX_GPIO_Init+0x26c>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80066e6:	2200      	movs	r2, #0
 80066e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066ec:	486a      	ldr	r0, [pc, #424]	; (8006898 <MX_GPIO_Init+0x270>)
 80066ee:	f004 facf 	bl	800ac90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80066f2:	2200      	movs	r2, #0
 80066f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066f8:	4868      	ldr	r0, [pc, #416]	; (800689c <MX_GPIO_Init+0x274>)
 80066fa:	f004 fac9 	bl	800ac90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80066fe:	2200      	movs	r2, #0
 8006700:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006704:	4866      	ldr	r0, [pc, #408]	; (80068a0 <MX_GPIO_Init+0x278>)
 8006706:	f004 fac3 	bl	800ac90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800670a:	2200      	movs	r2, #0
 800670c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006710:	4864      	ldr	r0, [pc, #400]	; (80068a4 <MX_GPIO_Init+0x27c>)
 8006712:	f004 fabd 	bl	800ac90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006716:	2304      	movs	r3, #4
 8006718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800671a:	2300      	movs	r3, #0
 800671c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671e:	2300      	movs	r3, #0
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006722:	f107 031c 	add.w	r3, r7, #28
 8006726:	4619      	mov	r1, r3
 8006728:	485b      	ldr	r0, [pc, #364]	; (8006898 <MX_GPIO_Init+0x270>)
 800672a:	f004 f8ef 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800672e:	230f      	movs	r3, #15
 8006730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006732:	2303      	movs	r3, #3
 8006734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006736:	2300      	movs	r3, #0
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800673a:	f107 031c 	add.w	r3, r7, #28
 800673e:	4619      	mov	r1, r3
 8006740:	4859      	ldr	r0, [pc, #356]	; (80068a8 <MX_GPIO_Init+0x280>)
 8006742:	f004 f8e3 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006746:	23e1      	movs	r3, #225	; 0xe1
 8006748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800674a:	2303      	movs	r3, #3
 800674c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674e:	2300      	movs	r3, #0
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006752:	f107 031c 	add.w	r3, r7, #28
 8006756:	4619      	mov	r1, r3
 8006758:	4852      	ldr	r0, [pc, #328]	; (80068a4 <MX_GPIO_Init+0x27c>)
 800675a:	f004 f8d7 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800675e:	2303      	movs	r3, #3
 8006760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006762:	2303      	movs	r3, #3
 8006764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006766:	2300      	movs	r3, #0
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800676a:	f107 031c 	add.w	r3, r7, #28
 800676e:	4619      	mov	r1, r3
 8006770:	484a      	ldr	r0, [pc, #296]	; (800689c <MX_GPIO_Init+0x274>)
 8006772:	f004 f8cb 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006776:	2304      	movs	r3, #4
 8006778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800677a:	2300      	movs	r3, #0
 800677c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800677e:	2301      	movs	r3, #1
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006782:	f107 031c 	add.w	r3, r7, #28
 8006786:	4619      	mov	r1, r3
 8006788:	4844      	ldr	r0, [pc, #272]	; (800689c <MX_GPIO_Init+0x274>)
 800678a:	f004 f8bf 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800678e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006794:	2300      	movs	r3, #0
 8006796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006798:	2301      	movs	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800679c:	f107 031c 	add.w	r3, r7, #28
 80067a0:	4619      	mov	r1, r3
 80067a2:	483d      	ldr	r0, [pc, #244]	; (8006898 <MX_GPIO_Init+0x270>)
 80067a4:	f004 f8b2 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80067a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067ae:	2301      	movs	r3, #1
 80067b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b6:	2300      	movs	r3, #0
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067ba:	f107 031c 	add.w	r3, r7, #28
 80067be:	4619      	mov	r1, r3
 80067c0:	4835      	ldr	r0, [pc, #212]	; (8006898 <MX_GPIO_Init+0x270>)
 80067c2:	f004 f8a3 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80067c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067cc:	2301      	movs	r3, #1
 80067ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067d4:	2300      	movs	r3, #0
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067d8:	f107 031c 	add.w	r3, r7, #28
 80067dc:	4619      	mov	r1, r3
 80067de:	482f      	ldr	r0, [pc, #188]	; (800689c <MX_GPIO_Init+0x274>)
 80067e0:	f004 f894 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80067e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067ea:	2300      	movs	r3, #0
 80067ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067f2:	f107 031c 	add.w	r3, r7, #28
 80067f6:	4619      	mov	r1, r3
 80067f8:	4829      	ldr	r0, [pc, #164]	; (80068a0 <MX_GPIO_Init+0x278>)
 80067fa:	f004 f887 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80067fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006804:	2301      	movs	r3, #1
 8006806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006808:	2300      	movs	r3, #0
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800680c:	2300      	movs	r3, #0
 800680e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006810:	f107 031c 	add.w	r3, r7, #28
 8006814:	4619      	mov	r1, r3
 8006816:	4822      	ldr	r0, [pc, #136]	; (80068a0 <MX_GPIO_Init+0x278>)
 8006818:	f004 f878 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800681c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006822:	2301      	movs	r3, #1
 8006824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006826:	2301      	movs	r3, #1
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800682a:	2300      	movs	r3, #0
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800682e:	f107 031c 	add.w	r3, r7, #28
 8006832:	4619      	mov	r1, r3
 8006834:	481a      	ldr	r0, [pc, #104]	; (80068a0 <MX_GPIO_Init+0x278>)
 8006836:	f004 f869 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800683a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800683e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006840:	2301      	movs	r3, #1
 8006842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006844:	2300      	movs	r3, #0
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006848:	2300      	movs	r3, #0
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800684c:	f107 031c 	add.w	r3, r7, #28
 8006850:	4619      	mov	r1, r3
 8006852:	4814      	ldr	r0, [pc, #80]	; (80068a4 <MX_GPIO_Init+0x27c>)
 8006854:	f004 f85a 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800685c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800685e:	2300      	movs	r3, #0
 8006860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006866:	f107 031c 	add.w	r3, r7, #28
 800686a:	4619      	mov	r1, r3
 800686c:	480d      	ldr	r0, [pc, #52]	; (80068a4 <MX_GPIO_Init+0x27c>)
 800686e:	f004 f84d 	bl	800a90c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006872:	239b      	movs	r3, #155	; 0x9b
 8006874:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006876:	2300      	movs	r3, #0
 8006878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800687a:	2301      	movs	r3, #1
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800687e:	f107 031c 	add.w	r3, r7, #28
 8006882:	4619      	mov	r1, r3
 8006884:	4806      	ldr	r0, [pc, #24]	; (80068a0 <MX_GPIO_Init+0x278>)
 8006886:	f004 f841 	bl	800a90c <HAL_GPIO_Init>

}
 800688a:	bf00      	nop
 800688c:	3730      	adds	r7, #48	; 0x30
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40023800 	.word	0x40023800
 8006898:	40021000 	.word	0x40021000
 800689c:	40020400 	.word	0x40020400
 80068a0:	40020c00 	.word	0x40020c00
 80068a4:	40020000 	.word	0x40020000
 80068a8:	40020800 	.word	0x40020800

080068ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80068b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80068b2:	e7fe      	b.n	80068b2 <Error_Handler+0x6>

080068b4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068ca:	2300      	movs	r3, #0
 80068cc:	607b      	str	r3, [r7, #4]
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <HAL_MspInit+0x4c>)
 80068d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d2:	4a0f      	ldr	r2, [pc, #60]	; (8006910 <HAL_MspInit+0x4c>)
 80068d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068d8:	6453      	str	r3, [r2, #68]	; 0x44
 80068da:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <HAL_MspInit+0x4c>)
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e2:	607b      	str	r3, [r7, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068e6:	2300      	movs	r3, #0
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	4b09      	ldr	r3, [pc, #36]	; (8006910 <HAL_MspInit+0x4c>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	4a08      	ldr	r2, [pc, #32]	; (8006910 <HAL_MspInit+0x4c>)
 80068f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f4:	6413      	str	r3, [r2, #64]	; 0x40
 80068f6:	4b06      	ldr	r3, [pc, #24]	; (8006910 <HAL_MspInit+0x4c>)
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40023800 	.word	0x40023800

08006914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08c      	sub	sp, #48	; 0x30
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800691c:	f107 031c 	add.w	r3, r7, #28
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	609a      	str	r2, [r3, #8]
 8006928:	60da      	str	r2, [r3, #12]
 800692a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a4a      	ldr	r2, [pc, #296]	; (8006a5c <HAL_ADC_MspInit+0x148>)
 8006932:	4293      	cmp	r3, r2
 8006934:	f040 808e 	bne.w	8006a54 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]
 800693c:	4b48      	ldr	r3, [pc, #288]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	4a47      	ldr	r2, [pc, #284]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 8006942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006946:	6453      	str	r3, [r2, #68]	; 0x44
 8006948:	4b45      	ldr	r3, [pc, #276]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	4b41      	ldr	r3, [pc, #260]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	4a40      	ldr	r2, [pc, #256]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 800695e:	f043 0304 	orr.w	r3, r3, #4
 8006962:	6313      	str	r3, [r2, #48]	; 0x30
 8006964:	4b3e      	ldr	r3, [pc, #248]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	4b3a      	ldr	r3, [pc, #232]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 8006976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006978:	4a39      	ldr	r2, [pc, #228]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6313      	str	r3, [r2, #48]	; 0x30
 8006980:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	4b33      	ldr	r3, [pc, #204]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	4a32      	ldr	r2, [pc, #200]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 8006996:	f043 0302 	orr.w	r3, r3, #2
 800699a:	6313      	str	r3, [r2, #48]	; 0x30
 800699c:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <HAL_ADC_MspInit+0x14c>)
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80069a8:	230f      	movs	r3, #15
 80069aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069ac:	2303      	movs	r3, #3
 80069ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069b4:	f107 031c 	add.w	r3, r7, #28
 80069b8:	4619      	mov	r1, r3
 80069ba:	482a      	ldr	r0, [pc, #168]	; (8006a64 <HAL_ADC_MspInit+0x150>)
 80069bc:	f003 ffa6 	bl	800a90c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80069c0:	23ff      	movs	r3, #255	; 0xff
 80069c2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069c4:	2303      	movs	r3, #3
 80069c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069cc:	f107 031c 	add.w	r3, r7, #28
 80069d0:	4619      	mov	r1, r3
 80069d2:	4825      	ldr	r0, [pc, #148]	; (8006a68 <HAL_ADC_MspInit+0x154>)
 80069d4:	f003 ff9a 	bl	800a90c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80069d8:	2303      	movs	r3, #3
 80069da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069dc:	2303      	movs	r3, #3
 80069de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069e4:	f107 031c 	add.w	r3, r7, #28
 80069e8:	4619      	mov	r1, r3
 80069ea:	4820      	ldr	r0, [pc, #128]	; (8006a6c <HAL_ADC_MspInit+0x158>)
 80069ec:	f003 ff8e 	bl	800a90c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80069f0:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 80069f2:	4a20      	ldr	r2, [pc, #128]	; (8006a74 <HAL_ADC_MspInit+0x160>)
 80069f4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80069f6:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 80069f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069fe:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006a0a:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a10:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a18:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006a1a:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a20:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006a22:	4b13      	ldr	r3, [pc, #76]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a28:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a30:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006a38:	480d      	ldr	r0, [pc, #52]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a3a:	f003 fbcb 	bl	800a1d4 <HAL_DMA_Init>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006a44:	f7ff ff32 	bl	80068ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8006a4e:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <HAL_ADC_MspInit+0x15c>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006a54:	bf00      	nop
 8006a56:	3730      	adds	r7, #48	; 0x30
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40012100 	.word	0x40012100
 8006a60:	40023800 	.word	0x40023800
 8006a64:	40020800 	.word	0x40020800
 8006a68:	40020000 	.word	0x40020000
 8006a6c:	40020400 	.word	0x40020400
 8006a70:	20043b88 	.word	0x20043b88
 8006a74:	40026440 	.word	0x40026440

08006a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08c      	sub	sp, #48	; 0x30
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a80:	f107 031c 	add.w	r3, r7, #28
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	605a      	str	r2, [r3, #4]
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	60da      	str	r2, [r3, #12]
 8006a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a32      	ldr	r2, [pc, #200]	; (8006b60 <HAL_I2C_MspInit+0xe8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d12c      	bne.n	8006af4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	4b31      	ldr	r3, [pc, #196]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	4a30      	ldr	r2, [pc, #192]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aaa:	4b2e      	ldr	r3, [pc, #184]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ab6:	23c0      	movs	r3, #192	; 0xc0
 8006ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006aba:	2312      	movs	r3, #18
 8006abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006ac6:	2304      	movs	r3, #4
 8006ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aca:	f107 031c 	add.w	r3, r7, #28
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4825      	ldr	r0, [pc, #148]	; (8006b68 <HAL_I2C_MspInit+0xf0>)
 8006ad2:	f003 ff1b 	bl	800a90c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ae6:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006af2:	e031      	b.n	8006b58 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_I2C_MspInit+0xf4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d12c      	bne.n	8006b58 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006afe:	2300      	movs	r3, #0
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	4a17      	ldr	r2, [pc, #92]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b0e:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006b1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b20:	2312      	movs	r3, #18
 8006b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b24:	2301      	movs	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b30:	f107 031c 	add.w	r3, r7, #28
 8006b34:	4619      	mov	r1, r3
 8006b36:	480c      	ldr	r0, [pc, #48]	; (8006b68 <HAL_I2C_MspInit+0xf0>)
 8006b38:	f003 fee8 	bl	800a90c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	4a07      	ldr	r2, [pc, #28]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006b46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <HAL_I2C_MspInit+0xec>)
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
}
 8006b58:	bf00      	nop
 8006b5a:	3730      	adds	r7, #48	; 0x30
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40005400 	.word	0x40005400
 8006b64:	40023800 	.word	0x40023800
 8006b68:	40020400 	.word	0x40020400
 8006b6c:	40005800 	.word	0x40005800

08006b70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	; 0x28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b78:	f107 0314 	add.w	r3, r7, #20
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	605a      	str	r2, [r3, #4]
 8006b82:	609a      	str	r2, [r3, #8]
 8006b84:	60da      	str	r2, [r3, #12]
 8006b86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a69      	ldr	r2, [pc, #420]	; (8006d34 <HAL_SD_MspInit+0x1c4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	f040 80cb 	bne.w	8006d2a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	4b67      	ldr	r3, [pc, #412]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	4a66      	ldr	r2, [pc, #408]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006b9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ba4:	4b64      	ldr	r3, [pc, #400]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	4b60      	ldr	r3, [pc, #384]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	4a5f      	ldr	r2, [pc, #380]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006bba:	f043 0304 	orr.w	r3, r3, #4
 8006bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8006bc0:	4b5d      	ldr	r3, [pc, #372]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60bb      	str	r3, [r7, #8]
 8006bd0:	4b59      	ldr	r3, [pc, #356]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	4a58      	ldr	r2, [pc, #352]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006bd6:	f043 0308 	orr.w	r3, r3, #8
 8006bda:	6313      	str	r3, [r2, #48]	; 0x30
 8006bdc:	4b56      	ldr	r3, [pc, #344]	; (8006d38 <HAL_SD_MspInit+0x1c8>)
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006be8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006bec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bfe:	f107 0314 	add.w	r3, r7, #20
 8006c02:	4619      	mov	r1, r3
 8006c04:	484d      	ldr	r0, [pc, #308]	; (8006d3c <HAL_SD_MspInit+0x1cc>)
 8006c06:	f003 fe81 	bl	800a90c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c16:	2303      	movs	r3, #3
 8006c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c1e:	f107 0314 	add.w	r3, r7, #20
 8006c22:	4619      	mov	r1, r3
 8006c24:	4846      	ldr	r0, [pc, #280]	; (8006d40 <HAL_SD_MspInit+0x1d0>)
 8006c26:	f003 fe71 	bl	800a90c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006c2a:	4b46      	ldr	r3, [pc, #280]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c2c:	4a46      	ldr	r2, [pc, #280]	; (8006d48 <HAL_SD_MspInit+0x1d8>)
 8006c2e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006c30:	4b44      	ldr	r3, [pc, #272]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c36:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c38:	4b42      	ldr	r3, [pc, #264]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c3e:	4b41      	ldr	r3, [pc, #260]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c44:	4b3f      	ldr	r3, [pc, #252]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c4a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006c4c:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c52:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006c54:	4b3b      	ldr	r3, [pc, #236]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c5a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006c5c:	4b39      	ldr	r3, [pc, #228]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c5e:	2220      	movs	r2, #32
 8006c60:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006c62:	4b38      	ldr	r3, [pc, #224]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006c68:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006c6a:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006c70:	4b34      	ldr	r3, [pc, #208]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c72:	2203      	movs	r2, #3
 8006c74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006c76:	4b33      	ldr	r3, [pc, #204]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006c7e:	4b31      	ldr	r3, [pc, #196]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006c86:	482f      	ldr	r0, [pc, #188]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c88:	f003 faa4 	bl	800a1d4 <HAL_DMA_Init>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006c92:	f7ff fe0b 	bl	80068ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a2a      	ldr	r2, [pc, #168]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8006c9c:	4a29      	ldr	r2, [pc, #164]	; (8006d44 <HAL_SD_MspInit+0x1d4>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006ca2:	4b2a      	ldr	r3, [pc, #168]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006ca4:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <HAL_SD_MspInit+0x1e0>)
 8006ca6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006ca8:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cae:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cb0:	4b26      	ldr	r3, [pc, #152]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cb2:	2240      	movs	r2, #64	; 0x40
 8006cb4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cb6:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cbc:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cc2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006cc4:	4b21      	ldr	r3, [pc, #132]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cca:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006cd2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006ce0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006ce2:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ce8:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cea:	2203      	movs	r2, #3
 8006cec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cf0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006cf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006cf6:	4b15      	ldr	r3, [pc, #84]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006cf8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006cfe:	4813      	ldr	r0, [pc, #76]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006d00:	f003 fa68 	bl	800a1d4 <HAL_DMA_Init>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006d0a:	f7ff fdcf 	bl	80068ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a0e      	ldr	r2, [pc, #56]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006d12:	63da      	str	r2, [r3, #60]	; 0x3c
 8006d14:	4a0d      	ldr	r2, [pc, #52]	; (8006d4c <HAL_SD_MspInit+0x1dc>)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	2031      	movs	r0, #49	; 0x31
 8006d20:	f003 fa21 	bl	800a166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006d24:	2031      	movs	r0, #49	; 0x31
 8006d26:	f003 fa3a 	bl	800a19e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006d2a:	bf00      	nop
 8006d2c:	3728      	adds	r7, #40	; 0x28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	40020800 	.word	0x40020800
 8006d40:	40020c00 	.word	0x40020c00
 8006d44:	200436b0 	.word	0x200436b0
 8006d48:	40026458 	.word	0x40026458
 8006d4c:	200439e4 	.word	0x200439e4
 8006d50:	400264a0 	.word	0x400264a0

08006d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d5c:	f107 0314 	add.w	r3, r7, #20
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	609a      	str	r2, [r3, #8]
 8006d68:	60da      	str	r2, [r3, #12]
 8006d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <HAL_SPI_MspInit+0x84>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d12c      	bne.n	8006dd0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <HAL_SPI_MspInit+0x88>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	4a17      	ldr	r2, [pc, #92]	; (8006ddc <HAL_SPI_MspInit+0x88>)
 8006d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d84:	6413      	str	r3, [r2, #64]	; 0x40
 8006d86:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <HAL_SPI_MspInit+0x88>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <HAL_SPI_MspInit+0x88>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	4a10      	ldr	r2, [pc, #64]	; (8006ddc <HAL_SPI_MspInit+0x88>)
 8006d9c:	f043 0302 	orr.w	r3, r3, #2
 8006da0:	6313      	str	r3, [r2, #48]	; 0x30
 8006da2:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <HAL_SPI_MspInit+0x88>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006dae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db4:	2302      	movs	r3, #2
 8006db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006dc0:	2305      	movs	r3, #5
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dc4:	f107 0314 	add.w	r3, r7, #20
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4805      	ldr	r0, [pc, #20]	; (8006de0 <HAL_SPI_MspInit+0x8c>)
 8006dcc:	f003 fd9e 	bl	800a90c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006dd0:	bf00      	nop
 8006dd2:	3728      	adds	r7, #40	; 0x28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40003800 	.word	0x40003800
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	40020400 	.word	0x40020400

08006de4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08c      	sub	sp, #48	; 0x30
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dec:	f107 031c 	add.w	r3, r7, #28
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	609a      	str	r2, [r3, #8]
 8006df8:	60da      	str	r2, [r3, #12]
 8006dfa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2d      	ldr	r2, [pc, #180]	; (8006eb8 <HAL_TIM_PWM_MspInit+0xd4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d12d      	bne.n	8006e62 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e06:	2300      	movs	r3, #0
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	4b2c      	ldr	r3, [pc, #176]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	4a2b      	ldr	r2, [pc, #172]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	6453      	str	r3, [r2, #68]	; 0x44
 8006e16:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	4a24      	ldr	r2, [pc, #144]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e2c:	f043 0310 	orr.w	r3, r3, #16
 8006e30:	6313      	str	r3, [r2, #48]	; 0x30
 8006e32:	4b22      	ldr	r3, [pc, #136]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006e3e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e44:	2302      	movs	r3, #2
 8006e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e50:	2301      	movs	r3, #1
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e54:	f107 031c 	add.w	r3, r7, #28
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4819      	ldr	r0, [pc, #100]	; (8006ec0 <HAL_TIM_PWM_MspInit+0xdc>)
 8006e5c:	f003 fd56 	bl	800a90c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006e60:	e026      	b.n	8006eb0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_TIM_PWM_MspInit+0xe0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d10e      	bne.n	8006e8a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	4a11      	ldr	r2, [pc, #68]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e76:	f043 0302 	orr.w	r3, r3, #2
 8006e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	693b      	ldr	r3, [r7, #16]
}
 8006e88:	e012      	b.n	8006eb0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ec8 <HAL_TIM_PWM_MspInit+0xe4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d10d      	bne.n	8006eb0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	4a07      	ldr	r2, [pc, #28]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006e9e:	f043 0304 	orr.w	r3, r3, #4
 8006ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <HAL_TIM_PWM_MspInit+0xd8>)
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	68fb      	ldr	r3, [r7, #12]
}
 8006eb0:	bf00      	nop
 8006eb2:	3730      	adds	r7, #48	; 0x30
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40010000 	.word	0x40010000
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40000400 	.word	0x40000400
 8006ec8:	40000800 	.word	0x40000800

08006ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a3e      	ldr	r2, [pc, #248]	; (8006fd4 <HAL_TIM_Base_MspInit+0x108>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d116      	bne.n	8006f0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	4b3d      	ldr	r3, [pc, #244]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	4a3c      	ldr	r2, [pc, #240]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006ee8:	f043 0310 	orr.w	r3, r3, #16
 8006eec:	6413      	str	r3, [r2, #64]	; 0x40
 8006eee:	4b3a      	ldr	r3, [pc, #232]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	f003 0310 	and.w	r3, r3, #16
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006efa:	2200      	movs	r2, #0
 8006efc:	2101      	movs	r1, #1
 8006efe:	2036      	movs	r0, #54	; 0x36
 8006f00:	f003 f931 	bl	800a166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006f04:	2036      	movs	r0, #54	; 0x36
 8006f06:	f003 f94a 	bl	800a19e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006f0a:	e05e      	b.n	8006fca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a32      	ldr	r2, [pc, #200]	; (8006fdc <HAL_TIM_Base_MspInit+0x110>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d116      	bne.n	8006f44 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	4a2e      	ldr	r2, [pc, #184]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f20:	f043 0320 	orr.w	r3, r3, #32
 8006f24:	6413      	str	r3, [r2, #64]	; 0x40
 8006f26:	4b2c      	ldr	r3, [pc, #176]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006f32:	2200      	movs	r2, #0
 8006f34:	2100      	movs	r1, #0
 8006f36:	2037      	movs	r0, #55	; 0x37
 8006f38:	f003 f915 	bl	800a166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006f3c:	2037      	movs	r0, #55	; 0x37
 8006f3e:	f003 f92e 	bl	800a19e <HAL_NVIC_EnableIRQ>
}
 8006f42:	e042      	b.n	8006fca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a25      	ldr	r2, [pc, #148]	; (8006fe0 <HAL_TIM_Base_MspInit+0x114>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d10e      	bne.n	8006f6c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	4a20      	ldr	r2, [pc, #128]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	697b      	ldr	r3, [r7, #20]
}
 8006f6a:	e02e      	b.n	8006fca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1c      	ldr	r2, [pc, #112]	; (8006fe4 <HAL_TIM_Base_MspInit+0x118>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d10e      	bne.n	8006f94 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006f76:	2300      	movs	r3, #0
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	4b17      	ldr	r3, [pc, #92]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	4a16      	ldr	r2, [pc, #88]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f84:	6453      	str	r3, [r2, #68]	; 0x44
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	693b      	ldr	r3, [r7, #16]
}
 8006f92:	e01a      	b.n	8006fca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a13      	ldr	r2, [pc, #76]	; (8006fe8 <HAL_TIM_Base_MspInit+0x11c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d115      	bne.n	8006fca <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fac:	6413      	str	r3, [r2, #64]	; 0x40
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <HAL_TIM_Base_MspInit+0x10c>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	202c      	movs	r0, #44	; 0x2c
 8006fc0:	f003 f8d1 	bl	800a166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006fc4:	202c      	movs	r0, #44	; 0x2c
 8006fc6:	f003 f8ea 	bl	800a19e <HAL_NVIC_EnableIRQ>
}
 8006fca:	bf00      	nop
 8006fcc:	3720      	adds	r7, #32
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40001000 	.word	0x40001000
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40001400 	.word	0x40001400
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800
 8006fe8:	40001c00 	.word	0x40001c00

08006fec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ff4:	f107 0314 	add.w	r3, r7, #20
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	60da      	str	r2, [r3, #12]
 8007002:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <HAL_TIM_Encoder_MspInit+0x94>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d133      	bne.n	8007076 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	4b1c      	ldr	r3, [pc, #112]	; (8007084 <HAL_TIM_Encoder_MspInit+0x98>)
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	4a1b      	ldr	r2, [pc, #108]	; (8007084 <HAL_TIM_Encoder_MspInit+0x98>)
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	6453      	str	r3, [r2, #68]	; 0x44
 800701e:	4b19      	ldr	r3, [pc, #100]	; (8007084 <HAL_TIM_Encoder_MspInit+0x98>)
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	4b15      	ldr	r3, [pc, #84]	; (8007084 <HAL_TIM_Encoder_MspInit+0x98>)
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	4a14      	ldr	r2, [pc, #80]	; (8007084 <HAL_TIM_Encoder_MspInit+0x98>)
 8007034:	f043 0304 	orr.w	r3, r3, #4
 8007038:	6313      	str	r3, [r2, #48]	; 0x30
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <HAL_TIM_Encoder_MspInit+0x98>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007046:	23c0      	movs	r3, #192	; 0xc0
 8007048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704a:	2302      	movs	r3, #2
 800704c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007052:	2300      	movs	r3, #0
 8007054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007056:	2303      	movs	r3, #3
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800705a:	f107 0314 	add.w	r3, r7, #20
 800705e:	4619      	mov	r1, r3
 8007060:	4809      	ldr	r0, [pc, #36]	; (8007088 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007062:	f003 fc53 	bl	800a90c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007066:	2200      	movs	r2, #0
 8007068:	2100      	movs	r1, #0
 800706a:	202c      	movs	r0, #44	; 0x2c
 800706c:	f003 f87b 	bl	800a166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007070:	202c      	movs	r0, #44	; 0x2c
 8007072:	f003 f894 	bl	800a19e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007076:	bf00      	nop
 8007078:	3728      	adds	r7, #40	; 0x28
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40010400 	.word	0x40010400
 8007084:	40023800 	.word	0x40023800
 8007088:	40020800 	.word	0x40020800

0800708c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	; 0x30
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007094:	f107 031c 	add.w	r3, r7, #28
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a5c      	ldr	r2, [pc, #368]	; (800721c <HAL_TIM_MspPostInit+0x190>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d11f      	bne.n	80070ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	4b5b      	ldr	r3, [pc, #364]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	4a5a      	ldr	r2, [pc, #360]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 80070b8:	f043 0310 	orr.w	r3, r3, #16
 80070bc:	6313      	str	r3, [r2, #48]	; 0x30
 80070be:	4b58      	ldr	r3, [pc, #352]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80070ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d0:	2302      	movs	r3, #2
 80070d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d4:	2300      	movs	r3, #0
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d8:	2300      	movs	r3, #0
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80070dc:	2301      	movs	r3, #1
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80070e0:	f107 031c 	add.w	r3, r7, #28
 80070e4:	4619      	mov	r1, r3
 80070e6:	484f      	ldr	r0, [pc, #316]	; (8007224 <HAL_TIM_MspPostInit+0x198>)
 80070e8:	f003 fc10 	bl	800a90c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80070ec:	e091      	b.n	8007212 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4d      	ldr	r2, [pc, #308]	; (8007228 <HAL_TIM_MspPostInit+0x19c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d11e      	bne.n	8007136 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	4b48      	ldr	r3, [pc, #288]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	4a47      	ldr	r2, [pc, #284]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 8007102:	f043 0302 	orr.w	r3, r3, #2
 8007106:	6313      	str	r3, [r2, #48]	; 0x30
 8007108:	4b45      	ldr	r3, [pc, #276]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007114:	2330      	movs	r3, #48	; 0x30
 8007116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007118:	2302      	movs	r3, #2
 800711a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711c:	2300      	movs	r3, #0
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007120:	2300      	movs	r3, #0
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007124:	2302      	movs	r3, #2
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007128:	f107 031c 	add.w	r3, r7, #28
 800712c:	4619      	mov	r1, r3
 800712e:	483f      	ldr	r0, [pc, #252]	; (800722c <HAL_TIM_MspPostInit+0x1a0>)
 8007130:	f003 fbec 	bl	800a90c <HAL_GPIO_Init>
}
 8007134:	e06d      	b.n	8007212 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a3d      	ldr	r2, [pc, #244]	; (8007230 <HAL_TIM_MspPostInit+0x1a4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d11f      	bne.n	8007180 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007140:	2300      	movs	r3, #0
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	4b36      	ldr	r3, [pc, #216]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	4a35      	ldr	r2, [pc, #212]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 800714a:	f043 0308 	orr.w	r3, r3, #8
 800714e:	6313      	str	r3, [r2, #48]	; 0x30
 8007150:	4b33      	ldr	r3, [pc, #204]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800715c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007162:	2302      	movs	r3, #2
 8007164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007166:	2300      	movs	r3, #0
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800716a:	2300      	movs	r3, #0
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800716e:	2302      	movs	r3, #2
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007172:	f107 031c 	add.w	r3, r7, #28
 8007176:	4619      	mov	r1, r3
 8007178:	482e      	ldr	r0, [pc, #184]	; (8007234 <HAL_TIM_MspPostInit+0x1a8>)
 800717a:	f003 fbc7 	bl	800a90c <HAL_GPIO_Init>
}
 800717e:	e048      	b.n	8007212 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a2c      	ldr	r2, [pc, #176]	; (8007238 <HAL_TIM_MspPostInit+0x1ac>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d11f      	bne.n	80071ca <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	4b24      	ldr	r3, [pc, #144]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	4a23      	ldr	r2, [pc, #140]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 8007194:	f043 0302 	orr.w	r3, r3, #2
 8007198:	6313      	str	r3, [r2, #48]	; 0x30
 800719a:	4b21      	ldr	r3, [pc, #132]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80071a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ac:	2302      	movs	r3, #2
 80071ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b4:	2300      	movs	r3, #0
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80071b8:	2303      	movs	r3, #3
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071bc:	f107 031c 	add.w	r3, r7, #28
 80071c0:	4619      	mov	r1, r3
 80071c2:	481a      	ldr	r0, [pc, #104]	; (800722c <HAL_TIM_MspPostInit+0x1a0>)
 80071c4:	f003 fba2 	bl	800a90c <HAL_GPIO_Init>
}
 80071c8:	e023      	b.n	8007212 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1b      	ldr	r2, [pc, #108]	; (800723c <HAL_TIM_MspPostInit+0x1b0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d11e      	bne.n	8007212 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071d4:	2300      	movs	r3, #0
 80071d6:	60bb      	str	r3, [r7, #8]
 80071d8:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	4a10      	ldr	r2, [pc, #64]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 80071de:	f043 0302 	orr.w	r3, r3, #2
 80071e2:	6313      	str	r3, [r2, #48]	; 0x30
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <HAL_TIM_MspPostInit+0x194>)
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80071f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f6:	2302      	movs	r3, #2
 80071f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071fe:	2300      	movs	r3, #0
 8007200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007202:	2303      	movs	r3, #3
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007206:	f107 031c 	add.w	r3, r7, #28
 800720a:	4619      	mov	r1, r3
 800720c:	4807      	ldr	r0, [pc, #28]	; (800722c <HAL_TIM_MspPostInit+0x1a0>)
 800720e:	f003 fb7d 	bl	800a90c <HAL_GPIO_Init>
}
 8007212:	bf00      	nop
 8007214:	3730      	adds	r7, #48	; 0x30
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40010000 	.word	0x40010000
 8007220:	40023800 	.word	0x40023800
 8007224:	40021000 	.word	0x40021000
 8007228:	40000400 	.word	0x40000400
 800722c:	40020400 	.word	0x40020400
 8007230:	40000800 	.word	0x40000800
 8007234:	40020c00 	.word	0x40020c00
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800

08007240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	609a      	str	r2, [r3, #8]
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <HAL_UART_MspInit+0x84>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d12b      	bne.n	80072ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007262:	2300      	movs	r3, #0
 8007264:	613b      	str	r3, [r7, #16]
 8007266:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <HAL_UART_MspInit+0x88>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <HAL_UART_MspInit+0x88>)
 800726c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007270:	6413      	str	r3, [r2, #64]	; 0x40
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <HAL_UART_MspInit+0x88>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_UART_MspInit+0x88>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	4a10      	ldr	r2, [pc, #64]	; (80072c8 <HAL_UART_MspInit+0x88>)
 8007288:	f043 0308 	orr.w	r3, r3, #8
 800728c:	6313      	str	r3, [r2, #48]	; 0x30
 800728e:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <HAL_UART_MspInit+0x88>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800729a:	2360      	movs	r3, #96	; 0x60
 800729c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800729e:	2302      	movs	r3, #2
 80072a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072a6:	2303      	movs	r3, #3
 80072a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80072aa:	2307      	movs	r3, #7
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072ae:	f107 0314 	add.w	r3, r7, #20
 80072b2:	4619      	mov	r1, r3
 80072b4:	4805      	ldr	r0, [pc, #20]	; (80072cc <HAL_UART_MspInit+0x8c>)
 80072b6:	f003 fb29 	bl	800a90c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80072ba:	bf00      	nop
 80072bc:	3728      	adds	r7, #40	; 0x28
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40004400 	.word	0x40004400
 80072c8:	40023800 	.word	0x40023800
 80072cc:	40020c00 	.word	0x40020c00

080072d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072d4:	e7fe      	b.n	80072d4 <NMI_Handler+0x4>

080072d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072d6:	b480      	push	{r7}
 80072d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072da:	e7fe      	b.n	80072da <HardFault_Handler+0x4>

080072dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072e0:	e7fe      	b.n	80072e0 <MemManage_Handler+0x4>

080072e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072e2:	b480      	push	{r7}
 80072e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072e6:	e7fe      	b.n	80072e6 <BusFault_Handler+0x4>

080072e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072ec:	e7fe      	b.n	80072ec <UsageFault_Handler+0x4>

080072ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072ee:	b480      	push	{r7}
 80072f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072f2:	bf00      	nop
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007300:	bf00      	nop
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800730a:	b480      	push	{r7}
 800730c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800730e:	bf00      	nop
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800731c:	f002 fa02 	bl	8009724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007320:	bf00      	nop
 8007322:	bd80      	pop	{r7, pc}

08007324 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007328:	4803      	ldr	r0, [pc, #12]	; (8007338 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800732a:	f007 fcd2 	bl	800ecd2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800732e:	4803      	ldr	r0, [pc, #12]	; (800733c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007330:	f007 fccf 	bl	800ecd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007334:	bf00      	nop
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20043768 	.word	0x20043768
 800733c:	20043964 	.word	0x20043964

08007340 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007344:	4802      	ldr	r0, [pc, #8]	; (8007350 <SDIO_IRQHandler+0x10>)
 8007346:	f005 fd6b 	bl	800ce20 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800734a:	bf00      	nop
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20043ac4 	.word	0x20043ac4

08007354 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007358:	4802      	ldr	r0, [pc, #8]	; (8007364 <TIM6_DAC_IRQHandler+0x10>)
 800735a:	f007 fcba 	bl	800ecd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800735e:	bf00      	nop
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20043a44 	.word	0x20043a44

08007368 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800736c:	4802      	ldr	r0, [pc, #8]	; (8007378 <TIM7_IRQHandler+0x10>)
 800736e:	f007 fcb0 	bl	800ecd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007372:	bf00      	nop
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20043be8 	.word	0x20043be8

0800737c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007380:	4802      	ldr	r0, [pc, #8]	; (800738c <DMA2_Stream2_IRQHandler+0x10>)
 8007382:	f003 f84f 	bl	800a424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007386:	bf00      	nop
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20043b88 	.word	0x20043b88

08007390 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007394:	4802      	ldr	r0, [pc, #8]	; (80073a0 <DMA2_Stream3_IRQHandler+0x10>)
 8007396:	f003 f845 	bl	800a424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800739a:	bf00      	nop
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	200436b0 	.word	0x200436b0

080073a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80073a8:	4802      	ldr	r0, [pc, #8]	; (80073b4 <DMA2_Stream6_IRQHandler+0x10>)
 80073aa:	f003 f83b 	bl	800a424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80073ae:	bf00      	nop
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200439e4 	.word	0x200439e4

080073b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073c0:	4a14      	ldr	r2, [pc, #80]	; (8007414 <_sbrk+0x5c>)
 80073c2:	4b15      	ldr	r3, [pc, #84]	; (8007418 <_sbrk+0x60>)
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <_sbrk+0x64>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d102      	bne.n	80073da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80073d4:	4b11      	ldr	r3, [pc, #68]	; (800741c <_sbrk+0x64>)
 80073d6:	4a12      	ldr	r2, [pc, #72]	; (8007420 <_sbrk+0x68>)
 80073d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80073da:	4b10      	ldr	r3, [pc, #64]	; (800741c <_sbrk+0x64>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4413      	add	r3, r2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d207      	bcs.n	80073f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80073e8:	f00e f908 	bl	80155fc <__errno>
 80073ec:	4602      	mov	r2, r0
 80073ee:	230c      	movs	r3, #12
 80073f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	e009      	b.n	800740c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <_sbrk+0x64>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80073fe:	4b07      	ldr	r3, [pc, #28]	; (800741c <_sbrk+0x64>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	4a05      	ldr	r2, [pc, #20]	; (800741c <_sbrk+0x64>)
 8007408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20050000 	.word	0x20050000
 8007418:	00000800 	.word	0x00000800
 800741c:	200002f0 	.word	0x200002f0
 8007420:	20045d38 	.word	0x20045d38

08007424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <SystemInit+0x28>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742e:	4a07      	ldr	r2, [pc, #28]	; (800744c <SystemInit+0x28>)
 8007430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007438:	4b04      	ldr	r3, [pc, #16]	; (800744c <SystemInit+0x28>)
 800743a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800743e:	609a      	str	r2, [r3, #8]
#endif
}
 8007440:	bf00      	nop
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	e000ed00 	.word	0xe000ed00

08007450 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007450:	b598      	push	{r3, r4, r7, lr}
 8007452:	af00      	add	r7, sp, #0
	lcd_init();
 8007454:	f7f9 fde0 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007458:	4836      	ldr	r0, [pc, #216]	; (8007534 <cppInit+0xe4>)
 800745a:	f7fd fdcf 	bl	8004ffc <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800745e:	2064      	movs	r0, #100	; 0x64
 8007460:	f002 f980 	bl	8009764 <HAL_Delay>
	power_sensor.updateValues();
 8007464:	4833      	ldr	r0, [pc, #204]	; (8007534 <cppInit+0xe4>)
 8007466:	f7fd fdd7 	bl	8005018 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800746a:	f7f9 fe19 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800746e:	2100      	movs	r1, #0
 8007470:	2000      	movs	r0, #0
 8007472:	f7f9 fe25 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007476:	4830      	ldr	r0, [pc, #192]	; (8007538 <cppInit+0xe8>)
 8007478:	f7f9 fe4c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800747c:	2101      	movs	r1, #1
 800747e:	2000      	movs	r0, #0
 8007480:	f7f9 fe1e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007484:	482b      	ldr	r0, [pc, #172]	; (8007534 <cppInit+0xe4>)
 8007486:	f7fd fdf1 	bl	800506c <_ZN11PowerSensor17getButteryVoltageEv>
 800748a:	ee10 3a10 	vmov	r3, s0
 800748e:	4618      	mov	r0, r3
 8007490:	f7f9 f872 	bl	8000578 <__aeabi_f2d>
 8007494:	4603      	mov	r3, r0
 8007496:	460c      	mov	r4, r1
 8007498:	461a      	mov	r2, r3
 800749a:	4623      	mov	r3, r4
 800749c:	4827      	ldr	r0, [pc, #156]	; (800753c <cppInit+0xec>)
 800749e:	f7f9 fe39 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80074a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074a6:	f002 f95d 	bl	8009764 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80074aa:	4825      	ldr	r0, [pc, #148]	; (8007540 <cppInit+0xf0>)
 80074ac:	f7fc ffe2 	bl	8004474 <_ZN6Logger10sdCardInitEv>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <cppInit+0x76>
		led.fullColor('G');
 80074b6:	2147      	movs	r1, #71	; 0x47
 80074b8:	4822      	ldr	r0, [pc, #136]	; (8007544 <cppInit+0xf4>)
 80074ba:	f7fa fca9 	bl	8001e10 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80074be:	2064      	movs	r0, #100	; 0x64
 80074c0:	f002 f950 	bl	8009764 <HAL_Delay>
 80074c4:	e006      	b.n	80074d4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80074c6:	2152      	movs	r1, #82	; 0x52
 80074c8:	481e      	ldr	r0, [pc, #120]	; (8007544 <cppInit+0xf4>)
 80074ca:	f7fa fca1 	bl	8001e10 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80074ce:	2064      	movs	r0, #100	; 0x64
 80074d0:	f002 f948 	bl	8009764 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80074d4:	481c      	ldr	r0, [pc, #112]	; (8007548 <cppInit+0xf8>)
 80074d6:	f7fa fdf7 	bl	80020c8 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80074da:	481c      	ldr	r0, [pc, #112]	; (800754c <cppInit+0xfc>)
 80074dc:	f7fd fa60 	bl	80049a0 <_ZN5Motor4initEv>
	encoder.init();
 80074e0:	481b      	ldr	r0, [pc, #108]	; (8007550 <cppInit+0x100>)
 80074e2:	f7f9 fef7 	bl	80012d4 <_ZN7Encoder4initEv>
	imu.init();
 80074e6:	481b      	ldr	r0, [pc, #108]	; (8007554 <cppInit+0x104>)
 80074e8:	f7fa fae6 	bl	8001ab8 <_ZN3IMU4initEv>
	line_trace.init();
 80074ec:	481a      	ldr	r0, [pc, #104]	; (8007558 <cppInit+0x108>)
 80074ee:	f7fc f87b 	bl	80035e8 <_ZN9LineTrace4initEv>

	//line_sensor.calibration();
	//HAL_Delay(1000);

	led.fullColor('M');
 80074f2:	214d      	movs	r1, #77	; 0x4d
 80074f4:	4813      	ldr	r0, [pc, #76]	; (8007544 <cppInit+0xf4>)
 80074f6:	f7fa fc8b 	bl	8001e10 <_ZN3LED9fullColorEc>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80074fa:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800755c <cppInit+0x10c>
 80074fe:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007560 <cppInit+0x110>
 8007502:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007564 <cppInit+0x114>
 8007506:	4818      	ldr	r0, [pc, #96]	; (8007568 <cppInit+0x118>)
 8007508:	f7fe f9d6 	bl	80058b8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	//velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000);
 800750c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800756c <cppInit+0x11c>
 8007510:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007570 <cppInit+0x120>
 8007514:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007574 <cppInit+0x124>
 8007518:	4813      	ldr	r0, [pc, #76]	; (8007568 <cppInit+0x118>)
 800751a:	f7fe f9e6 	bl	80058ea <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 800751e:	4816      	ldr	r0, [pc, #88]	; (8007578 <cppInit+0x128>)
 8007520:	f7fd fc76 	bl	8004e10 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007524:	4815      	ldr	r0, [pc, #84]	; (800757c <cppInit+0x12c>)
 8007526:	f7fd fd0d 	bl	8004f44 <_ZN13PathFollowing4initEv>

	esc.init();
 800752a:	4815      	ldr	r0, [pc, #84]	; (8007580 <cppInit+0x130>)
 800752c:	f7f9 fe1e 	bl	800116c <_ZN3ESC4initEv>

}
 8007530:	bf00      	nop
 8007532:	bd98      	pop	{r3, r4, r7, pc}
 8007534:	20000604 	.word	0x20000604
 8007538:	08019e34 	.word	0x08019e34
 800753c:	08019e3c 	.word	0x08019e3c
 8007540:	20000624 	.word	0x20000624
 8007544:	20000600 	.word	0x20000600
 8007548:	200002f4 	.word	0x200002f4
 800754c:	200005fc 	.word	0x200005fc
 8007550:	2001bbac 	.word	0x2001bbac
 8007554:	20000610 	.word	0x20000610
 8007558:	2001bc48 	.word	0x2001bc48
 800755c:	3cceca68 	.word	0x3cceca68
 8007560:	4180f06f 	.word	0x4180f06f
 8007564:	3fea2d0e 	.word	0x3fea2d0e
 8007568:	2001bbcc 	.word	0x2001bbcc
 800756c:	00000000 	.word	0x00000000
 8007570:	3f5e3fbc 	.word	0x3f5e3fbc
 8007574:	3d75c28f 	.word	0x3d75c28f
 8007578:	2001bc08 	.word	0x2001bc08
 800757c:	20029ba8 	.word	0x20029ba8
 8007580:	200412d0 	.word	0x200412d0

08007584 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007588:	4819      	ldr	r0, [pc, #100]	; (80075f0 <cppFlip1ms+0x6c>)
 800758a:	f7fa fdfd 	bl	8002188 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800758e:	4819      	ldr	r0, [pc, #100]	; (80075f4 <cppFlip1ms+0x70>)
 8007590:	f7fa faba 	bl	8001b08 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007594:	4818      	ldr	r0, [pc, #96]	; (80075f8 <cppFlip1ms+0x74>)
 8007596:	f7f9 febf 	bl	8001318 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800759a:	4818      	ldr	r0, [pc, #96]	; (80075fc <cppFlip1ms+0x78>)
 800759c:	f7fc faba 	bl	8003b14 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80075a0:	4817      	ldr	r0, [pc, #92]	; (8007600 <cppFlip1ms+0x7c>)
 80075a2:	f7fe f9bb 	bl	800591c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80075a6:	4817      	ldr	r0, [pc, #92]	; (8007604 <cppFlip1ms+0x80>)
 80075a8:	f7fd fc16 	bl	8004dd8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80075ac:	4816      	ldr	r0, [pc, #88]	; (8007608 <cppFlip1ms+0x84>)
 80075ae:	f7fd fdd3 	bl	8005158 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80075b2:	4816      	ldr	r0, [pc, #88]	; (800760c <cppFlip1ms+0x88>)
 80075b4:	f7fd fa06 	bl	80049c4 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <cppFlip1ms+0x8c>)
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	3301      	adds	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	4b13      	ldr	r3, [pc, #76]	; (8007610 <cppFlip1ms+0x8c>)
 80075c2:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80075c4:	4b12      	ldr	r3, [pc, #72]	; (8007610 <cppFlip1ms+0x8c>)
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d90c      	bls.n	80075e6 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80075cc:	4809      	ldr	r0, [pc, #36]	; (80075f4 <cppFlip1ms+0x70>)
 80075ce:	f7fa faf3 	bl	8001bb8 <_ZN3IMU8getOmegaEv>
 80075d2:	eef0 7a40 	vmov.f32	s15, s0
 80075d6:	eeb0 0a67 	vmov.f32	s0, s15
 80075da:	480e      	ldr	r0, [pc, #56]	; (8007614 <cppFlip1ms+0x90>)
 80075dc:	f7fd ff1e 	bl	800541c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80075e0:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <cppFlip1ms+0x8c>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80075e6:	4804      	ldr	r0, [pc, #16]	; (80075f8 <cppFlip1ms+0x74>)
 80075e8:	f7f9 ff80 	bl	80014ec <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80075ec:	bf00      	nop
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	200002f4 	.word	0x200002f4
 80075f4:	20000610 	.word	0x20000610
 80075f8:	2001bbac 	.word	0x2001bbac
 80075fc:	2001bc48 	.word	0x2001bc48
 8007600:	2001bbcc 	.word	0x2001bbcc
 8007604:	2001bc08 	.word	0x2001bc08
 8007608:	200005ec 	.word	0x200005ec
 800760c:	200005fc 	.word	0x200005fc
 8007610:	200412d2 	.word	0x200412d2
 8007614:	20029998 	.word	0x20029998

08007618 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800761c:	4802      	ldr	r0, [pc, #8]	; (8007628 <cppFlip100ns+0x10>)
 800761e:	f7fa fd63 	bl	80020e8 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 8007622:	bf00      	nop
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	200002f4 	.word	0x200002f4

0800762c <cppFlip10ms>:

void cppFlip10ms(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007630:	4b08      	ldr	r3, [pc, #32]	; (8007654 <cppFlip10ms+0x28>)
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	4b06      	ldr	r3, [pc, #24]	; (8007654 <cppFlip10ms+0x28>)
 800763a:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <cppFlip10ms+0x28>)
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	2b06      	cmp	r3, #6
 8007642:	d905      	bls.n	8007650 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007644:	4804      	ldr	r0, [pc, #16]	; (8007658 <cppFlip10ms+0x2c>)
 8007646:	f7fd ff09 	bl	800545c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 800764a:	4b02      	ldr	r3, [pc, #8]	; (8007654 <cppFlip10ms+0x28>)
 800764c:	2200      	movs	r2, #0
 800764e:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007650:	bf00      	nop
 8007652:	bd80      	pop	{r7, pc}
 8007654:	200412d4 	.word	0x200412d4
 8007658:	20029998 	.word	0x20029998
 800765c:	00000000 	.word	0x00000000

08007660 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007662:	b083      	sub	sp, #12
 8007664:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;
	static int16_t selector_fast;

	static float adj_kp = line_trace.getKp();
 8007666:	4baf      	ldr	r3, [pc, #700]	; (8007924 <cppLoop+0x2c4>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f3bf 8f5b 	dmb	ish
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	bf0c      	ite	eq
 8007678:	2301      	moveq	r3, #1
 800767a:	2300      	movne	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d015      	beq.n	80076ae <cppLoop+0x4e>
 8007682:	48a8      	ldr	r0, [pc, #672]	; (8007924 <cppLoop+0x2c4>)
 8007684:	f00c fd53 	bl	801412e <__cxa_guard_acquire>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <cppLoop+0x4e>
 8007698:	48a3      	ldr	r0, [pc, #652]	; (8007928 <cppLoop+0x2c8>)
 800769a:	f7fc f8c5 	bl	8003828 <_ZN9LineTrace5getKpEv>
 800769e:	eef0 7a40 	vmov.f32	s15, s0
 80076a2:	4ba2      	ldr	r3, [pc, #648]	; (800792c <cppLoop+0x2cc>)
 80076a4:	edc3 7a00 	vstr	s15, [r3]
 80076a8:	489e      	ldr	r0, [pc, #632]	; (8007924 <cppLoop+0x2c4>)
 80076aa:	f00c fd4c 	bl	8014146 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 80076ae:	4ba0      	ldr	r3, [pc, #640]	; (8007930 <cppLoop+0x2d0>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f3bf 8f5b 	dmb	ish
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bf0c      	ite	eq
 80076c0:	2301      	moveq	r3, #1
 80076c2:	2300      	movne	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d015      	beq.n	80076f6 <cppLoop+0x96>
 80076ca:	4899      	ldr	r0, [pc, #612]	; (8007930 <cppLoop+0x2d0>)
 80076cc:	f00c fd2f 	bl	801412e <__cxa_guard_acquire>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bf14      	ite	ne
 80076d6:	2301      	movne	r3, #1
 80076d8:	2300      	moveq	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <cppLoop+0x96>
 80076e0:	4891      	ldr	r0, [pc, #580]	; (8007928 <cppLoop+0x2c8>)
 80076e2:	f7fc f8b0 	bl	8003846 <_ZN9LineTrace5getKiEv>
 80076e6:	eef0 7a40 	vmov.f32	s15, s0
 80076ea:	4b92      	ldr	r3, [pc, #584]	; (8007934 <cppLoop+0x2d4>)
 80076ec:	edc3 7a00 	vstr	s15, [r3]
 80076f0:	488f      	ldr	r0, [pc, #572]	; (8007930 <cppLoop+0x2d0>)
 80076f2:	f00c fd28 	bl	8014146 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80076f6:	4b90      	ldr	r3, [pc, #576]	; (8007938 <cppLoop+0x2d8>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f3bf 8f5b 	dmb	ish
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	bf0c      	ite	eq
 8007708:	2301      	moveq	r3, #1
 800770a:	2300      	movne	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d015      	beq.n	800773e <cppLoop+0xde>
 8007712:	4889      	ldr	r0, [pc, #548]	; (8007938 <cppLoop+0x2d8>)
 8007714:	f00c fd0b 	bl	801412e <__cxa_guard_acquire>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00a      	beq.n	800773e <cppLoop+0xde>
 8007728:	487f      	ldr	r0, [pc, #508]	; (8007928 <cppLoop+0x2c8>)
 800772a:	f7fc f89b 	bl	8003864 <_ZN9LineTrace5getKdEv>
 800772e:	eef0 7a40 	vmov.f32	s15, s0
 8007732:	4b82      	ldr	r3, [pc, #520]	; (800793c <cppLoop+0x2dc>)
 8007734:	edc3 7a00 	vstr	s15, [r3]
 8007738:	487f      	ldr	r0, [pc, #508]	; (8007938 <cppLoop+0x2d8>)
 800773a:	f00c fd04 	bl	8014146 <__cxa_guard_release>

	static float adj_kp_fast = line_trace.getKpFast();
 800773e:	4b80      	ldr	r3, [pc, #512]	; (8007940 <cppLoop+0x2e0>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	f3bf 8f5b 	dmb	ish
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d015      	beq.n	8007786 <cppLoop+0x126>
 800775a:	4879      	ldr	r0, [pc, #484]	; (8007940 <cppLoop+0x2e0>)
 800775c:	f00c fce7 	bl	801412e <__cxa_guard_acquire>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <cppLoop+0x126>
 8007770:	486d      	ldr	r0, [pc, #436]	; (8007928 <cppLoop+0x2c8>)
 8007772:	f7fc f886 	bl	8003882 <_ZN9LineTrace9getKpFastEv>
 8007776:	eef0 7a40 	vmov.f32	s15, s0
 800777a:	4b72      	ldr	r3, [pc, #456]	; (8007944 <cppLoop+0x2e4>)
 800777c:	edc3 7a00 	vstr	s15, [r3]
 8007780:	486f      	ldr	r0, [pc, #444]	; (8007940 <cppLoop+0x2e0>)
 8007782:	f00c fce0 	bl	8014146 <__cxa_guard_release>
	static float adj_ki_fast = line_trace.getKiFast();
 8007786:	4b70      	ldr	r3, [pc, #448]	; (8007948 <cppLoop+0x2e8>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	f3bf 8f5b 	dmb	ish
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d015      	beq.n	80077ce <cppLoop+0x16e>
 80077a2:	4869      	ldr	r0, [pc, #420]	; (8007948 <cppLoop+0x2e8>)
 80077a4:	f00c fcc3 	bl	801412e <__cxa_guard_acquire>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf14      	ite	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	2300      	moveq	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <cppLoop+0x16e>
 80077b8:	485b      	ldr	r0, [pc, #364]	; (8007928 <cppLoop+0x2c8>)
 80077ba:	f7fc f871 	bl	80038a0 <_ZN9LineTrace9getKiFastEv>
 80077be:	eef0 7a40 	vmov.f32	s15, s0
 80077c2:	4b62      	ldr	r3, [pc, #392]	; (800794c <cppLoop+0x2ec>)
 80077c4:	edc3 7a00 	vstr	s15, [r3]
 80077c8:	485f      	ldr	r0, [pc, #380]	; (8007948 <cppLoop+0x2e8>)
 80077ca:	f00c fcbc 	bl	8014146 <__cxa_guard_release>
	static float adj_kd_fast = line_trace.getKdFast();
 80077ce:	4b60      	ldr	r3, [pc, #384]	; (8007950 <cppLoop+0x2f0>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f3bf 8f5b 	dmb	ish
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d015      	beq.n	8007816 <cppLoop+0x1b6>
 80077ea:	4859      	ldr	r0, [pc, #356]	; (8007950 <cppLoop+0x2f0>)
 80077ec:	f00c fc9f 	bl	801412e <__cxa_guard_acquire>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bf14      	ite	ne
 80077f6:	2301      	movne	r3, #1
 80077f8:	2300      	moveq	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <cppLoop+0x1b6>
 8007800:	4849      	ldr	r0, [pc, #292]	; (8007928 <cppLoop+0x2c8>)
 8007802:	f7fc f85c 	bl	80038be <_ZN9LineTrace9getKdFastEv>
 8007806:	eef0 7a40 	vmov.f32	s15, s0
 800780a:	4b52      	ldr	r3, [pc, #328]	; (8007954 <cppLoop+0x2f4>)
 800780c:	edc3 7a00 	vstr	s15, [r3]
 8007810:	484f      	ldr	r0, [pc, #316]	; (8007950 <cppLoop+0x2f0>)
 8007812:	f00c fc98 	bl	8014146 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007816:	4b50      	ldr	r3, [pc, #320]	; (8007958 <cppLoop+0x2f8>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	f3bf 8f5b 	dmb	ish
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	bf0c      	ite	eq
 8007828:	2301      	moveq	r3, #1
 800782a:	2300      	movne	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d015      	beq.n	800785e <cppLoop+0x1fe>
 8007832:	4849      	ldr	r0, [pc, #292]	; (8007958 <cppLoop+0x2f8>)
 8007834:	f00c fc7b 	bl	801412e <__cxa_guard_acquire>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	bf14      	ite	ne
 800783e:	2301      	movne	r3, #1
 8007840:	2300      	moveq	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <cppLoop+0x1fe>
 8007848:	4837      	ldr	r0, [pc, #220]	; (8007928 <cppLoop+0x2c8>)
 800784a:	f7fc f897 	bl	800397c <_ZN9LineTrace17getTargetVelocityEv>
 800784e:	eef0 7a40 	vmov.f32	s15, s0
 8007852:	4b42      	ldr	r3, [pc, #264]	; (800795c <cppLoop+0x2fc>)
 8007854:	edc3 7a00 	vstr	s15, [r3]
 8007858:	483f      	ldr	r0, [pc, #252]	; (8007958 <cppLoop+0x2f8>)
 800785a:	f00c fc74 	bl	8014146 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 800785e:	4b40      	ldr	r3, [pc, #256]	; (8007960 <cppLoop+0x300>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f3bf 8f5b 	dmb	ish
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf0c      	ite	eq
 8007870:	2301      	moveq	r3, #1
 8007872:	2300      	movne	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d015      	beq.n	80078a6 <cppLoop+0x246>
 800787a:	4839      	ldr	r0, [pc, #228]	; (8007960 <cppLoop+0x300>)
 800787c:	f00c fc57 	bl	801412e <__cxa_guard_acquire>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <cppLoop+0x246>
 8007890:	4825      	ldr	r0, [pc, #148]	; (8007928 <cppLoop+0x2c8>)
 8007892:	f7fc f883 	bl	800399c <_ZN9LineTrace14getMaxVelocityEv>
 8007896:	eef0 7a40 	vmov.f32	s15, s0
 800789a:	4b32      	ldr	r3, [pc, #200]	; (8007964 <cppLoop+0x304>)
 800789c:	edc3 7a00 	vstr	s15, [r3]
 80078a0:	482f      	ldr	r0, [pc, #188]	; (8007960 <cppLoop+0x300>)
 80078a2:	f00c fc50 	bl	8014146 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80078a6:	4b30      	ldr	r3, [pc, #192]	; (8007968 <cppLoop+0x308>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f3bf 8f5b 	dmb	ish
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <cppLoop+0x28e>
 80078c2:	4829      	ldr	r0, [pc, #164]	; (8007968 <cppLoop+0x308>)
 80078c4:	f00c fc33 	bl	801412e <__cxa_guard_acquire>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bf14      	ite	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	2300      	moveq	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <cppLoop+0x28e>
 80078d8:	4813      	ldr	r0, [pc, #76]	; (8007928 <cppLoop+0x2c8>)
 80078da:	f7fc f86f 	bl	80039bc <_ZN9LineTrace15getMaxVelocity2Ev>
 80078de:	eef0 7a40 	vmov.f32	s15, s0
 80078e2:	4b22      	ldr	r3, [pc, #136]	; (800796c <cppLoop+0x30c>)
 80078e4:	edc3 7a00 	vstr	s15, [r3]
 80078e8:	481f      	ldr	r0, [pc, #124]	; (8007968 <cppLoop+0x308>)
 80078ea:	f00c fc2c 	bl	8014146 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80078ee:	4b20      	ldr	r3, [pc, #128]	; (8007970 <cppLoop+0x310>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f3bf 8f5b 	dmb	ish
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d03f      	beq.n	800798a <cppLoop+0x32a>
 800790a:	4819      	ldr	r0, [pc, #100]	; (8007970 <cppLoop+0x310>)
 800790c:	f00c fc0f 	bl	801412e <__cxa_guard_acquire>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d034      	beq.n	800798a <cppLoop+0x32a>
 8007920:	e028      	b.n	8007974 <cppLoop+0x314>
 8007922:	bf00      	nop
 8007924:	200412e8 	.word	0x200412e8
 8007928:	2001bc48 	.word	0x2001bc48
 800792c:	200412e4 	.word	0x200412e4
 8007930:	200412f0 	.word	0x200412f0
 8007934:	200412ec 	.word	0x200412ec
 8007938:	200412f8 	.word	0x200412f8
 800793c:	200412f4 	.word	0x200412f4
 8007940:	20041300 	.word	0x20041300
 8007944:	200412fc 	.word	0x200412fc
 8007948:	20041308 	.word	0x20041308
 800794c:	20041304 	.word	0x20041304
 8007950:	20041310 	.word	0x20041310
 8007954:	2004130c 	.word	0x2004130c
 8007958:	20041318 	.word	0x20041318
 800795c:	20041314 	.word	0x20041314
 8007960:	20041320 	.word	0x20041320
 8007964:	2004131c 	.word	0x2004131c
 8007968:	20041328 	.word	0x20041328
 800796c:	20041324 	.word	0x20041324
 8007970:	20041330 	.word	0x20041330
 8007974:	48af      	ldr	r0, [pc, #700]	; (8007c34 <cppLoop+0x5d4>)
 8007976:	f7fc f831 	bl	80039dc <_ZN9LineTrace14getMinVelocityEv>
 800797a:	eef0 7a40 	vmov.f32	s15, s0
 800797e:	4bae      	ldr	r3, [pc, #696]	; (8007c38 <cppLoop+0x5d8>)
 8007980:	edc3 7a00 	vstr	s15, [r3]
 8007984:	48ad      	ldr	r0, [pc, #692]	; (8007c3c <cppLoop+0x5dc>)
 8007986:	f00c fbde 	bl	8014146 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 800798a:	4bad      	ldr	r3, [pc, #692]	; (8007c40 <cppLoop+0x5e0>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f3bf 8f5b 	dmb	ish
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d015      	beq.n	80079d2 <cppLoop+0x372>
 80079a6:	48a6      	ldr	r0, [pc, #664]	; (8007c40 <cppLoop+0x5e0>)
 80079a8:	f00c fbc1 	bl	801412e <__cxa_guard_acquire>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bf14      	ite	ne
 80079b2:	2301      	movne	r3, #1
 80079b4:	2300      	moveq	r3, #0
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <cppLoop+0x372>
 80079bc:	489d      	ldr	r0, [pc, #628]	; (8007c34 <cppLoop+0x5d4>)
 80079be:	f7fc f81d 	bl	80039fc <_ZN9LineTrace15getMinVelocity2Ev>
 80079c2:	eef0 7a40 	vmov.f32	s15, s0
 80079c6:	4b9f      	ldr	r3, [pc, #636]	; (8007c44 <cppLoop+0x5e4>)
 80079c8:	edc3 7a00 	vstr	s15, [r3]
 80079cc:	489c      	ldr	r0, [pc, #624]	; (8007c40 <cppLoop+0x5e0>)
 80079ce:	f00c fbba 	bl	8014146 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 80079d2:	4b9d      	ldr	r3, [pc, #628]	; (8007c48 <cppLoop+0x5e8>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	f3bf 8f5b 	dmb	ish
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bf0c      	ite	eq
 80079e4:	2301      	moveq	r3, #1
 80079e6:	2300      	movne	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d015      	beq.n	8007a1a <cppLoop+0x3ba>
 80079ee:	4896      	ldr	r0, [pc, #600]	; (8007c48 <cppLoop+0x5e8>)
 80079f0:	f00c fb9d 	bl	801412e <__cxa_guard_acquire>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	bf14      	ite	ne
 80079fa:	2301      	movne	r3, #1
 80079fc:	2300      	moveq	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <cppLoop+0x3ba>
 8007a04:	488b      	ldr	r0, [pc, #556]	; (8007c34 <cppLoop+0x5d4>)
 8007a06:	f7fc f83d 	bl	8003a84 <_ZN9LineTrace9getMaxAccEv>
 8007a0a:	eef0 7a40 	vmov.f32	s15, s0
 8007a0e:	4b8f      	ldr	r3, [pc, #572]	; (8007c4c <cppLoop+0x5ec>)
 8007a10:	edc3 7a00 	vstr	s15, [r3]
 8007a14:	488c      	ldr	r0, [pc, #560]	; (8007c48 <cppLoop+0x5e8>)
 8007a16:	f00c fb96 	bl	8014146 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007a1a:	4b8d      	ldr	r3, [pc, #564]	; (8007c50 <cppLoop+0x5f0>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	f3bf 8f5b 	dmb	ish
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d015      	beq.n	8007a62 <cppLoop+0x402>
 8007a36:	4886      	ldr	r0, [pc, #536]	; (8007c50 <cppLoop+0x5f0>)
 8007a38:	f00c fb79 	bl	801412e <__cxa_guard_acquire>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bf14      	ite	ne
 8007a42:	2301      	movne	r3, #1
 8007a44:	2300      	moveq	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <cppLoop+0x402>
 8007a4c:	4879      	ldr	r0, [pc, #484]	; (8007c34 <cppLoop+0x5d4>)
 8007a4e:	f7fc f84f 	bl	8003af0 <_ZN9LineTrace9getMaxDecEv>
 8007a52:	eef0 7a40 	vmov.f32	s15, s0
 8007a56:	4b7f      	ldr	r3, [pc, #508]	; (8007c54 <cppLoop+0x5f4>)
 8007a58:	edc3 7a00 	vstr	s15, [r3]
 8007a5c:	487c      	ldr	r0, [pc, #496]	; (8007c50 <cppLoop+0x5f0>)
 8007a5e:	f00c fb72 	bl	8014146 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007a62:	4b7d      	ldr	r3, [pc, #500]	; (8007c58 <cppLoop+0x5f8>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f3bf 8f5b 	dmb	ish
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bf0c      	ite	eq
 8007a74:	2301      	moveq	r3, #1
 8007a76:	2300      	movne	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d015      	beq.n	8007aaa <cppLoop+0x44a>
 8007a7e:	4876      	ldr	r0, [pc, #472]	; (8007c58 <cppLoop+0x5f8>)
 8007a80:	f00c fb55 	bl	801412e <__cxa_guard_acquire>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bf14      	ite	ne
 8007a8a:	2301      	movne	r3, #1
 8007a8c:	2300      	moveq	r3, #0
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <cppLoop+0x44a>
 8007a94:	4867      	ldr	r0, [pc, #412]	; (8007c34 <cppLoop+0x5d4>)
 8007a96:	f7fc f819 	bl	8003acc <_ZN9LineTrace10getMaxAcc2Ev>
 8007a9a:	eef0 7a40 	vmov.f32	s15, s0
 8007a9e:	4b6f      	ldr	r3, [pc, #444]	; (8007c5c <cppLoop+0x5fc>)
 8007aa0:	edc3 7a00 	vstr	s15, [r3]
 8007aa4:	486c      	ldr	r0, [pc, #432]	; (8007c58 <cppLoop+0x5f8>)
 8007aa6:	f00c fb4e 	bl	8014146 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007aaa:	4b6d      	ldr	r3, [pc, #436]	; (8007c60 <cppLoop+0x600>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	f3bf 8f5b 	dmb	ish
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bf0c      	ite	eq
 8007abc:	2301      	moveq	r3, #1
 8007abe:	2300      	movne	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d015      	beq.n	8007af2 <cppLoop+0x492>
 8007ac6:	4866      	ldr	r0, [pc, #408]	; (8007c60 <cppLoop+0x600>)
 8007ac8:	f00c fb31 	bl	801412e <__cxa_guard_acquire>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bf14      	ite	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	2300      	moveq	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <cppLoop+0x492>
 8007adc:	4855      	ldr	r0, [pc, #340]	; (8007c34 <cppLoop+0x5d4>)
 8007ade:	f7fb ffe3 	bl	8003aa8 <_ZN9LineTrace10getMaxDec2Ev>
 8007ae2:	eef0 7a40 	vmov.f32	s15, s0
 8007ae6:	4b5f      	ldr	r3, [pc, #380]	; (8007c64 <cppLoop+0x604>)
 8007ae8:	edc3 7a00 	vstr	s15, [r3]
 8007aec:	485c      	ldr	r0, [pc, #368]	; (8007c60 <cppLoop+0x600>)
 8007aee:	f00c fb2a 	bl	8014146 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007af2:	485d      	ldr	r0, [pc, #372]	; (8007c68 <cppLoop+0x608>)
 8007af4:	f7fd faca 	bl	800508c <_ZN12RotarySwitch8getValueEv>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	f201 84e9 	bhi.w	80094d2 <cppLoop+0x1e72>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <cppLoop+0x4a8>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b49 	.word	0x08007b49
 8007b0c:	08007f35 	.word	0x08007f35
 8007b10:	08007fc9 	.word	0x08007fc9
 8007b14:	0800811b 	.word	0x0800811b
 8007b18:	08008221 	.word	0x08008221
 8007b1c:	080084a5 	.word	0x080084a5
 8007b20:	08008571 	.word	0x08008571
 8007b24:	080087f1 	.word	0x080087f1
 8007b28:	08008a85 	.word	0x08008a85
 8007b2c:	08008d05 	.word	0x08008d05
 8007b30:	0800908f 	.word	0x0800908f
 8007b34:	0800912f 	.word	0x0800912f
 8007b38:	080091b1 	.word	0x080091b1
 8007b3c:	0800924b 	.word	0x0800924b
 8007b40:	08009365 	.word	0x08009365
 8007b44:	0800941d 	.word	0x0800941d
	case 0:
		led.fullColor('W');
 8007b48:	2157      	movs	r1, #87	; 0x57
 8007b4a:	4848      	ldr	r0, [pc, #288]	; (8007c6c <cppLoop+0x60c>)
 8007b4c:	f7fa f960 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b50:	f7f9 faa6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b54:	2100      	movs	r1, #0
 8007b56:	2000      	movs	r0, #0
 8007b58:	f7f9 fab2 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007b5c:	4835      	ldr	r0, [pc, #212]	; (8007c34 <cppLoop+0x5d4>)
 8007b5e:	f7fb fe63 	bl	8003828 <_ZN9LineTrace5getKpEv>
 8007b62:	eeb0 7a40 	vmov.f32	s14, s0
 8007b66:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007c70 <cppLoop+0x610>
 8007b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6e:	ee17 0a90 	vmov	r0, s15
 8007b72:	f7f8 fd01 	bl	8000578 <__aeabi_f2d>
 8007b76:	4603      	mov	r3, r0
 8007b78:	460c      	mov	r4, r1
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	483d      	ldr	r0, [pc, #244]	; (8007c74 <cppLoop+0x614>)
 8007b80:	f7f9 fac8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b84:	2101      	movs	r1, #1
 8007b86:	2000      	movs	r0, #0
 8007b88:	f7f9 fa9a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007b8c:	4829      	ldr	r0, [pc, #164]	; (8007c34 <cppLoop+0x5d4>)
 8007b8e:	f7fb fe5a 	bl	8003846 <_ZN9LineTrace5getKiEv>
 8007b92:	eeb0 7a40 	vmov.f32	s14, s0
 8007b96:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007c78 <cppLoop+0x618>
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	ee17 0a90 	vmov	r0, s15
 8007ba2:	f7f8 fce9 	bl	8000578 <__aeabi_f2d>
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	460e      	mov	r6, r1
 8007baa:	4822      	ldr	r0, [pc, #136]	; (8007c34 <cppLoop+0x5d4>)
 8007bac:	f7fb fe5a 	bl	8003864 <_ZN9LineTrace5getKdEv>
 8007bb0:	eeb0 7a40 	vmov.f32	s14, s0
 8007bb4:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007c7c <cppLoop+0x61c>
 8007bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbc:	ee17 0a90 	vmov	r0, s15
 8007bc0:	f7f8 fcda 	bl	8000578 <__aeabi_f2d>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	e9cd 3400 	strd	r3, r4, [sp]
 8007bcc:	462a      	mov	r2, r5
 8007bce:	4633      	mov	r3, r6
 8007bd0:	482b      	ldr	r0, [pc, #172]	; (8007c80 <cppLoop+0x620>)
 8007bd2:	f7f9 fa9f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007bd6:	482b      	ldr	r0, [pc, #172]	; (8007c84 <cppLoop+0x624>)
 8007bd8:	f7fa f8b6 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	bf0c      	ite	eq
 8007be2:	2301      	moveq	r3, #1
 8007be4:	2300      	movne	r3, #0
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d04f      	beq.n	8007c8c <cppLoop+0x62c>
			led.LR(-1, 1);
 8007bec:	2201      	movs	r2, #1
 8007bee:	f04f 31ff 	mov.w	r1, #4294967295
 8007bf2:	481e      	ldr	r0, [pc, #120]	; (8007c6c <cppLoop+0x60c>)
 8007bf4:	f7fa f9c8 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007bf8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007bfc:	f001 fdb2 	bl	8009764 <HAL_Delay>

			selector++;
 8007c00:	4b21      	ldr	r3, [pc, #132]	; (8007c88 <cppLoop+0x628>)
 8007c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3301      	adds	r3, #1
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	b21a      	sxth	r2, r3
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <cppLoop+0x628>)
 8007c10:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007c12:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <cppLoop+0x628>)
 8007c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	dd02      	ble.n	8007c22 <cppLoop+0x5c2>
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <cppLoop+0x628>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007c22:	2200      	movs	r2, #0
 8007c24:	f04f 31ff 	mov.w	r1, #4294967295
 8007c28:	4810      	ldr	r0, [pc, #64]	; (8007c6c <cppLoop+0x60c>)
 8007c2a:	f7fa f9ad 	bl	8001f88 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007c2e:	f001 bc52 	b.w	80094d6 <cppLoop+0x1e76>
 8007c32:	bf00      	nop
 8007c34:	2001bc48 	.word	0x2001bc48
 8007c38:	2004132c 	.word	0x2004132c
 8007c3c:	20041330 	.word	0x20041330
 8007c40:	20041338 	.word	0x20041338
 8007c44:	20041334 	.word	0x20041334
 8007c48:	20041340 	.word	0x20041340
 8007c4c:	2004133c 	.word	0x2004133c
 8007c50:	20041348 	.word	0x20041348
 8007c54:	20041344 	.word	0x20041344
 8007c58:	20041350 	.word	0x20041350
 8007c5c:	2004134c 	.word	0x2004134c
 8007c60:	20041358 	.word	0x20041358
 8007c64:	20041354 	.word	0x20041354
 8007c68:	200005f8 	.word	0x200005f8
 8007c6c:	20000600 	.word	0x20000600
 8007c70:	447a0000 	.word	0x447a0000
 8007c74:	08019e40 	.word	0x08019e40
 8007c78:	42c80000 	.word	0x42c80000
 8007c7c:	461c4000 	.word	0x461c4000
 8007c80:	08019e4c 	.word	0x08019e4c
 8007c84:	200005f4 	.word	0x200005f4
 8007c88:	200412d6 	.word	0x200412d6
		else if(joy_stick.getValue() == JOY_R){
 8007c8c:	489e      	ldr	r0, [pc, #632]	; (8007f08 <cppLoop+0x8a8>)
 8007c8e:	f7fa f85b 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	bf0c      	ite	eq
 8007c98:	2301      	moveq	r3, #1
 8007c9a:	2300      	movne	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d059      	beq.n	8007d56 <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ca8:	4898      	ldr	r0, [pc, #608]	; (8007f0c <cppLoop+0x8ac>)
 8007caa:	f7fa f96d 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007cae:	2064      	movs	r0, #100	; 0x64
 8007cb0:	f001 fd58 	bl	8009764 <HAL_Delay>
			if(selector == 0){
 8007cb4:	4b96      	ldr	r3, [pc, #600]	; (8007f10 <cppLoop+0x8b0>)
 8007cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d113      	bne.n	8007ce6 <cppLoop+0x686>
				adj_kp = adj_kp + 0.00001;
 8007cbe:	4b95      	ldr	r3, [pc, #596]	; (8007f14 <cppLoop+0x8b4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7f8 fc58 	bl	8000578 <__aeabi_f2d>
 8007cc8:	a389      	add	r3, pc, #548	; (adr r3, 8007ef0 <cppLoop+0x890>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f7f8 faf5 	bl	80002bc <__adddf3>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f7f8 ff9d 	bl	8000c18 <__aeabi_d2f>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	4b8c      	ldr	r3, [pc, #560]	; (8007f14 <cppLoop+0x8b4>)
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e02b      	b.n	8007d3e <cppLoop+0x6de>
			else if(selector == 1){
 8007ce6:	4b8a      	ldr	r3, [pc, #552]	; (8007f10 <cppLoop+0x8b0>)
 8007ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d113      	bne.n	8007d18 <cppLoop+0x6b8>
				adj_ki = adj_ki + 0.0001;
 8007cf0:	4b89      	ldr	r3, [pc, #548]	; (8007f18 <cppLoop+0x8b8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7f8 fc3f 	bl	8000578 <__aeabi_f2d>
 8007cfa:	a37f      	add	r3, pc, #508	; (adr r3, 8007ef8 <cppLoop+0x898>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fadc 	bl	80002bc <__adddf3>
 8007d04:	4603      	mov	r3, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	4618      	mov	r0, r3
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	f7f8 ff84 	bl	8000c18 <__aeabi_d2f>
 8007d10:	4602      	mov	r2, r0
 8007d12:	4b81      	ldr	r3, [pc, #516]	; (8007f18 <cppLoop+0x8b8>)
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e012      	b.n	8007d3e <cppLoop+0x6de>
				adj_kd = adj_kd + 0.000001;
 8007d18:	4b80      	ldr	r3, [pc, #512]	; (8007f1c <cppLoop+0x8bc>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7f8 fc2b 	bl	8000578 <__aeabi_f2d>
 8007d22:	a377      	add	r3, pc, #476	; (adr r3, 8007f00 <cppLoop+0x8a0>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fac8 	bl	80002bc <__adddf3>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	4618      	mov	r0, r3
 8007d32:	4621      	mov	r1, r4
 8007d34:	f7f8 ff70 	bl	8000c18 <__aeabi_d2f>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	4b78      	ldr	r3, [pc, #480]	; (8007f1c <cppLoop+0x8bc>)
 8007d3c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007d3e:	2152      	movs	r1, #82	; 0x52
 8007d40:	4872      	ldr	r0, [pc, #456]	; (8007f0c <cppLoop+0x8ac>)
 8007d42:	f7fa f865 	bl	8001e10 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007d46:	2200      	movs	r2, #0
 8007d48:	f04f 31ff 	mov.w	r1, #4294967295
 8007d4c:	486f      	ldr	r0, [pc, #444]	; (8007f0c <cppLoop+0x8ac>)
 8007d4e:	f7fa f91b 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8007d52:	f001 bbc0 	b.w	80094d6 <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_L){
 8007d56:	486c      	ldr	r0, [pc, #432]	; (8007f08 <cppLoop+0x8a8>)
 8007d58:	f7f9 fff6 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	bf0c      	ite	eq
 8007d62:	2301      	moveq	r3, #1
 8007d64:	2300      	movne	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d059      	beq.n	8007e20 <cppLoop+0x7c0>
			led.LR(-1, 1);
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8007d72:	4866      	ldr	r0, [pc, #408]	; (8007f0c <cppLoop+0x8ac>)
 8007d74:	f7fa f908 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d78:	2064      	movs	r0, #100	; 0x64
 8007d7a:	f001 fcf3 	bl	8009764 <HAL_Delay>
			if(selector == 0){
 8007d7e:	4b64      	ldr	r3, [pc, #400]	; (8007f10 <cppLoop+0x8b0>)
 8007d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d113      	bne.n	8007db0 <cppLoop+0x750>
				adj_kp = adj_kp - 0.00001;
 8007d88:	4b62      	ldr	r3, [pc, #392]	; (8007f14 <cppLoop+0x8b4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7f8 fbf3 	bl	8000578 <__aeabi_f2d>
 8007d92:	a357      	add	r3, pc, #348	; (adr r3, 8007ef0 <cppLoop+0x890>)
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 fa8e 	bl	80002b8 <__aeabi_dsub>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	4618      	mov	r0, r3
 8007da2:	4621      	mov	r1, r4
 8007da4:	f7f8 ff38 	bl	8000c18 <__aeabi_d2f>
 8007da8:	4602      	mov	r2, r0
 8007daa:	4b5a      	ldr	r3, [pc, #360]	; (8007f14 <cppLoop+0x8b4>)
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e02b      	b.n	8007e08 <cppLoop+0x7a8>
			else if(selector == 1){
 8007db0:	4b57      	ldr	r3, [pc, #348]	; (8007f10 <cppLoop+0x8b0>)
 8007db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d113      	bne.n	8007de2 <cppLoop+0x782>
				adj_ki = adj_ki - 0.0001;
 8007dba:	4b57      	ldr	r3, [pc, #348]	; (8007f18 <cppLoop+0x8b8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7f8 fbda 	bl	8000578 <__aeabi_f2d>
 8007dc4:	a34c      	add	r3, pc, #304	; (adr r3, 8007ef8 <cppLoop+0x898>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fa75 	bl	80002b8 <__aeabi_dsub>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	f7f8 ff1f 	bl	8000c18 <__aeabi_d2f>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4b4e      	ldr	r3, [pc, #312]	; (8007f18 <cppLoop+0x8b8>)
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	e012      	b.n	8007e08 <cppLoop+0x7a8>
				adj_kd = adj_kd - 0.000001;
 8007de2:	4b4e      	ldr	r3, [pc, #312]	; (8007f1c <cppLoop+0x8bc>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7f8 fbc6 	bl	8000578 <__aeabi_f2d>
 8007dec:	a344      	add	r3, pc, #272	; (adr r3, 8007f00 <cppLoop+0x8a0>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 fa61 	bl	80002b8 <__aeabi_dsub>
 8007df6:	4603      	mov	r3, r0
 8007df8:	460c      	mov	r4, r1
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	f7f8 ff0b 	bl	8000c18 <__aeabi_d2f>
 8007e02:	4602      	mov	r2, r0
 8007e04:	4b45      	ldr	r3, [pc, #276]	; (8007f1c <cppLoop+0x8bc>)
 8007e06:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007e08:	2152      	movs	r1, #82	; 0x52
 8007e0a:	4840      	ldr	r0, [pc, #256]	; (8007f0c <cppLoop+0x8ac>)
 8007e0c:	f7fa f800 	bl	8001e10 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007e10:	2200      	movs	r2, #0
 8007e12:	f04f 31ff 	mov.w	r1, #4294967295
 8007e16:	483d      	ldr	r0, [pc, #244]	; (8007f0c <cppLoop+0x8ac>)
 8007e18:	f7fa f8b6 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8007e1c:	f001 bb5b 	b.w	80094d6 <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_D){
 8007e20:	4839      	ldr	r0, [pc, #228]	; (8007f08 <cppLoop+0x8a8>)
 8007e22:	f7f9 ff91 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d011      	beq.n	8007e5a <cppLoop+0x7fa>
			led.LR(-1, 1);
 8007e36:	2201      	movs	r2, #1
 8007e38:	f04f 31ff 	mov.w	r1, #4294967295
 8007e3c:	4833      	ldr	r0, [pc, #204]	; (8007f0c <cppLoop+0x8ac>)
 8007e3e:	f7fa f8a3 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e46:	f001 fc8d 	bl	8009764 <HAL_Delay>
			led.LR(-1, 0);
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e50:	482e      	ldr	r0, [pc, #184]	; (8007f0c <cppLoop+0x8ac>)
 8007e52:	f7fa f899 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8007e56:	f001 bb3e 	b.w	80094d6 <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_C){
 8007e5a:	482b      	ldr	r0, [pc, #172]	; (8007f08 <cppLoop+0x8a8>)
 8007e5c:	f7f9 ff74 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	bf0c      	ite	eq
 8007e66:	2301      	moveq	r3, #1
 8007e68:	2300      	movne	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f001 8332 	beq.w	80094d6 <cppLoop+0x1e76>
			led.LR(-1, 1);
 8007e72:	2201      	movs	r2, #1
 8007e74:	f04f 31ff 	mov.w	r1, #4294967295
 8007e78:	4824      	ldr	r0, [pc, #144]	; (8007f0c <cppLoop+0x8ac>)
 8007e7a:	f7fa f885 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e82:	f001 fc6f 	bl	8009764 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007e86:	2300      	movs	r3, #0
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <cppLoop+0x8b4>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	4924      	ldr	r1, [pc, #144]	; (8007f20 <cppLoop+0x8c0>)
 8007e90:	4824      	ldr	r0, [pc, #144]	; (8007f24 <cppLoop+0x8c4>)
 8007e92:	f7f9 fbd7 	bl	8001644 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007e96:	2300      	movs	r3, #0
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	4b1f      	ldr	r3, [pc, #124]	; (8007f18 <cppLoop+0x8b8>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4922      	ldr	r1, [pc, #136]	; (8007f28 <cppLoop+0x8c8>)
 8007ea0:	4820      	ldr	r0, [pc, #128]	; (8007f24 <cppLoop+0x8c4>)
 8007ea2:	f7f9 fbcf 	bl	8001644 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	4b1c      	ldr	r3, [pc, #112]	; (8007f1c <cppLoop+0x8bc>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	491f      	ldr	r1, [pc, #124]	; (8007f2c <cppLoop+0x8cc>)
 8007eb0:	481c      	ldr	r0, [pc, #112]	; (8007f24 <cppLoop+0x8c4>)
 8007eb2:	f7f9 fbc7 	bl	8001644 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007eb6:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <cppLoop+0x8b4>)
 8007eb8:	edd3 7a00 	vldr	s15, [r3]
 8007ebc:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <cppLoop+0x8b8>)
 8007ebe:	ed93 7a00 	vldr	s14, [r3]
 8007ec2:	4b16      	ldr	r3, [pc, #88]	; (8007f1c <cppLoop+0x8bc>)
 8007ec4:	edd3 6a00 	vldr	s13, [r3]
 8007ec8:	eeb0 1a66 	vmov.f32	s2, s13
 8007ecc:	eef0 0a47 	vmov.f32	s1, s14
 8007ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ed4:	4816      	ldr	r0, [pc, #88]	; (8007f30 <cppLoop+0x8d0>)
 8007ed6:	f7fb fc75 	bl	80037c4 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007eda:	2200      	movs	r2, #0
 8007edc:	f04f 31ff 	mov.w	r1, #4294967295
 8007ee0:	480a      	ldr	r0, [pc, #40]	; (8007f0c <cppLoop+0x8ac>)
 8007ee2:	f7fa f851 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8007ee6:	f001 baf6 	b.w	80094d6 <cppLoop+0x1e76>
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w
 8007ef0:	88e368f1 	.word	0x88e368f1
 8007ef4:	3ee4f8b5 	.word	0x3ee4f8b5
 8007ef8:	eb1c432d 	.word	0xeb1c432d
 8007efc:	3f1a36e2 	.word	0x3f1a36e2
 8007f00:	a0b5ed8d 	.word	0xa0b5ed8d
 8007f04:	3eb0c6f7 	.word	0x3eb0c6f7
 8007f08:	200005f4 	.word	0x200005f4
 8007f0c:	20000600 	.word	0x20000600
 8007f10:	200412d6 	.word	0x200412d6
 8007f14:	200412e4 	.word	0x200412e4
 8007f18:	200412ec 	.word	0x200412ec
 8007f1c:	200412f4 	.word	0x200412f4
 8007f20:	08019e5c 	.word	0x08019e5c
 8007f24:	08019e64 	.word	0x08019e64
 8007f28:	08019e6c 	.word	0x08019e6c
 8007f2c:	08019e74 	.word	0x08019e74
 8007f30:	2001bc48 	.word	0x2001bc48

	case 1:
		led.fullColor('C');
 8007f34:	2143      	movs	r1, #67	; 0x43
 8007f36:	48ae      	ldr	r0, [pc, #696]	; (80081f0 <cppLoop+0xb90>)
 8007f38:	f7f9 ff6a 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007f3c:	f7f9 f8b0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007f40:	2100      	movs	r1, #0
 8007f42:	2000      	movs	r0, #0
 8007f44:	f7f9 f8bc 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007f48:	48aa      	ldr	r0, [pc, #680]	; (80081f4 <cppLoop+0xb94>)
 8007f4a:	f7f9 f8e3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007f4e:	2101      	movs	r1, #1
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7f9 f8b5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007f56:	4ba8      	ldr	r3, [pc, #672]	; (80081f8 <cppLoop+0xb98>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7f8 fb0c 	bl	8000578 <__aeabi_f2d>
 8007f60:	4603      	mov	r3, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	461a      	mov	r2, r3
 8007f66:	4623      	mov	r3, r4
 8007f68:	48a4      	ldr	r0, [pc, #656]	; (80081fc <cppLoop+0xb9c>)
 8007f6a:	f7f9 f8d3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007f6e:	48a4      	ldr	r0, [pc, #656]	; (8008200 <cppLoop+0xba0>)
 8007f70:	f7f9 feea 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	bf0c      	ite	eq
 8007f7a:	2301      	moveq	r3, #1
 8007f7c:	2300      	movne	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f001 82aa 	beq.w	80094da <cppLoop+0x1e7a>
			HAL_Delay(500);
 8007f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f8a:	f001 fbeb 	bl	8009764 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007f8e:	4b9a      	ldr	r3, [pc, #616]	; (80081f8 <cppLoop+0xb98>)
 8007f90:	edd3 7a00 	vldr	s15, [r3]
 8007f94:	eeb0 0a67 	vmov.f32	s0, s15
 8007f98:	489a      	ldr	r0, [pc, #616]	; (8008204 <cppLoop+0xba4>)
 8007f9a:	f7fb fc9f 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4892      	ldr	r0, [pc, #584]	; (80081f0 <cppLoop+0xb90>)
 8007fa6:	f7f9 ffef 	bl	8001f88 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007faa:	2100      	movs	r1, #0
 8007fac:	4895      	ldr	r0, [pc, #596]	; (8008204 <cppLoop+0xba4>)
 8007fae:	f7fc f8d1 	bl	8004154 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007fb2:	4894      	ldr	r0, [pc, #592]	; (8008204 <cppLoop+0xba4>)
 8007fb4:	f7fb ffc0 	bl	8003f38 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	488c      	ldr	r0, [pc, #560]	; (80081f0 <cppLoop+0xb90>)
 8007fc0:	f7f9 ffe2 	bl	8001f88 <_ZN3LED2LREaa>
		}

		break;
 8007fc4:	f001 ba89 	b.w	80094da <cppLoop+0x1e7a>

	case 2:
		led.fullColor('B');
 8007fc8:	2142      	movs	r1, #66	; 0x42
 8007fca:	4889      	ldr	r0, [pc, #548]	; (80081f0 <cppLoop+0xb90>)
 8007fcc:	f7f9 ff20 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fd0:	f7f9 f866 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	f7f9 f872 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007fdc:	4885      	ldr	r0, [pc, #532]	; (80081f4 <cppLoop+0xb94>)
 8007fde:	f7f9 f899 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	f7f9 f86b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007fea:	4b83      	ldr	r3, [pc, #524]	; (80081f8 <cppLoop+0xb98>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7f8 fac2 	bl	8000578 <__aeabi_f2d>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4623      	mov	r3, r4
 8007ffc:	4882      	ldr	r0, [pc, #520]	; (8008208 <cppLoop+0xba8>)
 8007ffe:	f7f9 f889 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8008002:	487f      	ldr	r0, [pc, #508]	; (8008200 <cppLoop+0xba0>)
 8008004:	f7f9 fea0 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008008:	4603      	mov	r3, r0
 800800a:	2b10      	cmp	r3, #16
 800800c:	bf0c      	ite	eq
 800800e:	2301      	moveq	r3, #1
 8008010:	2300      	movne	r3, #0
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d023      	beq.n	8008060 <cppLoop+0xa00>
			led.LR(-1, 1);
 8008018:	2201      	movs	r2, #1
 800801a:	f04f 31ff 	mov.w	r1, #4294967295
 800801e:	4874      	ldr	r0, [pc, #464]	; (80081f0 <cppLoop+0xb90>)
 8008020:	f7f9 ffb2 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008024:	2064      	movs	r0, #100	; 0x64
 8008026:	f001 fb9d 	bl	8009764 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800802a:	4b73      	ldr	r3, [pc, #460]	; (80081f8 <cppLoop+0xb98>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f7f8 faa2 	bl	8000578 <__aeabi_f2d>
 8008034:	a36c      	add	r3, pc, #432	; (adr r3, 80081e8 <cppLoop+0xb88>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f7f8 f93f 	bl	80002bc <__adddf3>
 800803e:	4603      	mov	r3, r0
 8008040:	460c      	mov	r4, r1
 8008042:	4618      	mov	r0, r3
 8008044:	4621      	mov	r1, r4
 8008046:	f7f8 fde7 	bl	8000c18 <__aeabi_d2f>
 800804a:	4602      	mov	r2, r0
 800804c:	4b6a      	ldr	r3, [pc, #424]	; (80081f8 <cppLoop+0xb98>)
 800804e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008050:	2200      	movs	r2, #0
 8008052:	f04f 31ff 	mov.w	r1, #4294967295
 8008056:	4866      	ldr	r0, [pc, #408]	; (80081f0 <cppLoop+0xb90>)
 8008058:	f7f9 ff96 	bl	8001f88 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800805c:	f001 ba3f 	b.w	80094de <cppLoop+0x1e7e>
		else if(joy_stick.getValue() == JOY_L){
 8008060:	4867      	ldr	r0, [pc, #412]	; (8008200 <cppLoop+0xba0>)
 8008062:	f7f9 fe71 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008066:	4603      	mov	r3, r0
 8008068:	2b01      	cmp	r3, #1
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d023      	beq.n	80080be <cppLoop+0xa5e>
			led.LR(-1, 1);
 8008076:	2201      	movs	r2, #1
 8008078:	f04f 31ff 	mov.w	r1, #4294967295
 800807c:	485c      	ldr	r0, [pc, #368]	; (80081f0 <cppLoop+0xb90>)
 800807e:	f7f9 ff83 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008082:	2064      	movs	r0, #100	; 0x64
 8008084:	f001 fb6e 	bl	8009764 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008088:	4b5b      	ldr	r3, [pc, #364]	; (80081f8 <cppLoop+0xb98>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f7f8 fa73 	bl	8000578 <__aeabi_f2d>
 8008092:	a355      	add	r3, pc, #340	; (adr r3, 80081e8 <cppLoop+0xb88>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f90e 	bl	80002b8 <__aeabi_dsub>
 800809c:	4603      	mov	r3, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	4618      	mov	r0, r3
 80080a2:	4621      	mov	r1, r4
 80080a4:	f7f8 fdb8 	bl	8000c18 <__aeabi_d2f>
 80080a8:	4602      	mov	r2, r0
 80080aa:	4b53      	ldr	r3, [pc, #332]	; (80081f8 <cppLoop+0xb98>)
 80080ac:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80080ae:	2200      	movs	r2, #0
 80080b0:	f04f 31ff 	mov.w	r1, #4294967295
 80080b4:	484e      	ldr	r0, [pc, #312]	; (80081f0 <cppLoop+0xb90>)
 80080b6:	f7f9 ff67 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 80080ba:	f001 ba10 	b.w	80094de <cppLoop+0x1e7e>
		else if(joy_stick.getValue() == JOY_C){
 80080be:	4850      	ldr	r0, [pc, #320]	; (8008200 <cppLoop+0xba0>)
 80080c0:	f7f9 fe42 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	bf0c      	ite	eq
 80080ca:	2301      	moveq	r3, #1
 80080cc:	2300      	movne	r3, #0
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f001 8204 	beq.w	80094de <cppLoop+0x1e7e>
			led.LR(-1, 1);
 80080d6:	2201      	movs	r2, #1
 80080d8:	f04f 31ff 	mov.w	r1, #4294967295
 80080dc:	4844      	ldr	r0, [pc, #272]	; (80081f0 <cppLoop+0xb90>)
 80080de:	f7f9 ff53 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080e6:	f001 fb3d 	bl	8009764 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80080ea:	2300      	movs	r3, #0
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	4b42      	ldr	r3, [pc, #264]	; (80081f8 <cppLoop+0xb98>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	4946      	ldr	r1, [pc, #280]	; (800820c <cppLoop+0xbac>)
 80080f4:	4846      	ldr	r0, [pc, #280]	; (8008210 <cppLoop+0xbb0>)
 80080f6:	f7f9 faa5 	bl	8001644 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80080fa:	4b3f      	ldr	r3, [pc, #252]	; (80081f8 <cppLoop+0xb98>)
 80080fc:	edd3 7a00 	vldr	s15, [r3]
 8008100:	eeb0 0a67 	vmov.f32	s0, s15
 8008104:	483f      	ldr	r0, [pc, #252]	; (8008204 <cppLoop+0xba4>)
 8008106:	f7fb fbe9 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800810a:	2200      	movs	r2, #0
 800810c:	f04f 31ff 	mov.w	r1, #4294967295
 8008110:	4837      	ldr	r0, [pc, #220]	; (80081f0 <cppLoop+0xb90>)
 8008112:	f7f9 ff39 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008116:	f001 b9e2 	b.w	80094de <cppLoop+0x1e7e>

	case 3:
		led.fullColor('Y');
 800811a:	2159      	movs	r1, #89	; 0x59
 800811c:	4834      	ldr	r0, [pc, #208]	; (80081f0 <cppLoop+0xb90>)
 800811e:	f7f9 fe77 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008122:	f7f8 ffbd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008126:	2100      	movs	r1, #0
 8008128:	2000      	movs	r0, #0
 800812a:	f7f8 ffc9 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 800812e:	4b39      	ldr	r3, [pc, #228]	; (8008214 <cppLoop+0xbb4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f7f8 fa20 	bl	8000578 <__aeabi_f2d>
 8008138:	4603      	mov	r3, r0
 800813a:	460c      	mov	r4, r1
 800813c:	461a      	mov	r2, r3
 800813e:	4623      	mov	r3, r4
 8008140:	4835      	ldr	r0, [pc, #212]	; (8008218 <cppLoop+0xbb8>)
 8008142:	f7f8 ffe7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008146:	2101      	movs	r1, #1
 8008148:	2000      	movs	r0, #0
 800814a:	f7f8 ffb9 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800814e:	4b33      	ldr	r3, [pc, #204]	; (800821c <cppLoop+0xbbc>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7f8 fa10 	bl	8000578 <__aeabi_f2d>
 8008158:	4603      	mov	r3, r0
 800815a:	460c      	mov	r4, r1
 800815c:	461a      	mov	r2, r3
 800815e:	4623      	mov	r3, r4
 8008160:	4826      	ldr	r0, [pc, #152]	; (80081fc <cppLoop+0xb9c>)
 8008162:	f7f8 ffd7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008166:	4826      	ldr	r0, [pc, #152]	; (8008200 <cppLoop+0xba0>)
 8008168:	f7f9 fdee 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800816c:	4603      	mov	r3, r0
 800816e:	2b02      	cmp	r3, #2
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	f001 81b2 	beq.w	80094e2 <cppLoop+0x1e82>
			HAL_Delay(500);
 800817e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008182:	f001 faef 	bl	8009764 <HAL_Delay>

			led.LR(1, -1);
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	2101      	movs	r1, #1
 800818c:	4818      	ldr	r0, [pc, #96]	; (80081f0 <cppLoop+0xb90>)
 800818e:	f7f9 fefb 	bl	8001f88 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008192:	2101      	movs	r1, #1
 8008194:	481b      	ldr	r0, [pc, #108]	; (8008204 <cppLoop+0xba4>)
 8008196:	f7fb ffdd 	bl	8004154 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800819a:	4b20      	ldr	r3, [pc, #128]	; (800821c <cppLoop+0xbbc>)
 800819c:	edd3 7a00 	vldr	s15, [r3]
 80081a0:	eeb0 0a67 	vmov.f32	s0, s15
 80081a4:	4817      	ldr	r0, [pc, #92]	; (8008204 <cppLoop+0xba4>)
 80081a6:	f7fb fb99 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80081aa:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <cppLoop+0xbb4>)
 80081ac:	edd3 7a00 	vldr	s15, [r3]
 80081b0:	eeb0 0a67 	vmov.f32	s0, s15
 80081b4:	4813      	ldr	r0, [pc, #76]	; (8008204 <cppLoop+0xba4>)
 80081b6:	f7fb fba1 	bl	80038fc <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80081ba:	4b18      	ldr	r3, [pc, #96]	; (800821c <cppLoop+0xbbc>)
 80081bc:	edd3 7a00 	vldr	s15, [r3]
 80081c0:	eeb0 0a67 	vmov.f32	s0, s15
 80081c4:	480f      	ldr	r0, [pc, #60]	; (8008204 <cppLoop+0xba4>)
 80081c6:	f7fb fbb9 	bl	800393c <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80081ca:	480e      	ldr	r0, [pc, #56]	; (8008204 <cppLoop+0xba4>)
 80081cc:	f7fa fdf6 	bl	8002dbc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80081d0:	480c      	ldr	r0, [pc, #48]	; (8008204 <cppLoop+0xba4>)
 80081d2:	f7fb feb1 	bl	8003f38 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	2100      	movs	r1, #0
 80081dc:	4804      	ldr	r0, [pc, #16]	; (80081f0 <cppLoop+0xb90>)
 80081de:	f7f9 fed3 	bl	8001f88 <_ZN3LED2LREaa>
		}

		break;
 80081e2:	f001 b97e 	b.w	80094e2 <cppLoop+0x1e82>
 80081e6:	bf00      	nop
 80081e8:	9999999a 	.word	0x9999999a
 80081ec:	3fb99999 	.word	0x3fb99999
 80081f0:	20000600 	.word	0x20000600
 80081f4:	08019e7c 	.word	0x08019e7c
 80081f8:	20041314 	.word	0x20041314
 80081fc:	08019e88 	.word	0x08019e88
 8008200:	200005f4 	.word	0x200005f4
 8008204:	2001bc48 	.word	0x2001bc48
 8008208:	08019e94 	.word	0x08019e94
 800820c:	08019ea0 	.word	0x08019ea0
 8008210:	08019e64 	.word	0x08019e64
 8008214:	2004131c 	.word	0x2004131c
 8008218:	08019eac 	.word	0x08019eac
 800821c:	2004132c 	.word	0x2004132c

	case 4:
		led.fullColor('G');
 8008220:	2147      	movs	r1, #71	; 0x47
 8008222:	4895      	ldr	r0, [pc, #596]	; (8008478 <cppLoop+0xe18>)
 8008224:	f7f9 fdf4 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008228:	f7f8 ff3a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800822c:	2100      	movs	r1, #0
 800822e:	2000      	movs	r0, #0
 8008230:	f7f8 ff46 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008234:	4891      	ldr	r0, [pc, #580]	; (800847c <cppLoop+0xe1c>)
 8008236:	f7fb fbb1 	bl	800399c <_ZN9LineTrace14getMaxVelocityEv>
 800823a:	ee10 3a10 	vmov	r3, s0
 800823e:	4618      	mov	r0, r3
 8008240:	f7f8 f99a 	bl	8000578 <__aeabi_f2d>
 8008244:	4603      	mov	r3, r0
 8008246:	460c      	mov	r4, r1
 8008248:	461a      	mov	r2, r3
 800824a:	4623      	mov	r3, r4
 800824c:	488c      	ldr	r0, [pc, #560]	; (8008480 <cppLoop+0xe20>)
 800824e:	f7f8 ff61 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008252:	2101      	movs	r1, #1
 8008254:	2000      	movs	r0, #0
 8008256:	f7f8 ff33 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 800825a:	4888      	ldr	r0, [pc, #544]	; (800847c <cppLoop+0xe1c>)
 800825c:	f7fb fbbe 	bl	80039dc <_ZN9LineTrace14getMinVelocityEv>
 8008260:	ee10 3a10 	vmov	r3, s0
 8008264:	4618      	mov	r0, r3
 8008266:	f7f8 f987 	bl	8000578 <__aeabi_f2d>
 800826a:	4603      	mov	r3, r0
 800826c:	460c      	mov	r4, r1
 800826e:	461a      	mov	r2, r3
 8008270:	4623      	mov	r3, r4
 8008272:	4884      	ldr	r0, [pc, #528]	; (8008484 <cppLoop+0xe24>)
 8008274:	f7f8 ff4e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008278:	4883      	ldr	r0, [pc, #524]	; (8008488 <cppLoop+0xe28>)
 800827a:	f7f9 fd65 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800827e:	4603      	mov	r3, r0
 8008280:	2b08      	cmp	r3, #8
 8008282:	bf0c      	ite	eq
 8008284:	2301      	moveq	r3, #1
 8008286:	2300      	movne	r3, #0
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d022      	beq.n	80082d4 <cppLoop+0xc74>
			led.LR(-1, 1);
 800828e:	2201      	movs	r2, #1
 8008290:	f04f 31ff 	mov.w	r1, #4294967295
 8008294:	4878      	ldr	r0, [pc, #480]	; (8008478 <cppLoop+0xe18>)
 8008296:	f7f9 fe77 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800829a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800829e:	f001 fa61 	bl	8009764 <HAL_Delay>

			selector_vel++;
 80082a2:	4b7a      	ldr	r3, [pc, #488]	; (800848c <cppLoop+0xe2c>)
 80082a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3301      	adds	r3, #1
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	b21a      	sxth	r2, r3
 80082b0:	4b76      	ldr	r3, [pc, #472]	; (800848c <cppLoop+0xe2c>)
 80082b2:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80082b4:	4b75      	ldr	r3, [pc, #468]	; (800848c <cppLoop+0xe2c>)
 80082b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	dd02      	ble.n	80082c4 <cppLoop+0xc64>
 80082be:	4b73      	ldr	r3, [pc, #460]	; (800848c <cppLoop+0xe2c>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80082c4:	2200      	movs	r2, #0
 80082c6:	f04f 31ff 	mov.w	r1, #4294967295
 80082ca:	486b      	ldr	r0, [pc, #428]	; (8008478 <cppLoop+0xe18>)
 80082cc:	f7f9 fe5c 	bl	8001f88 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80082d0:	f001 b909 	b.w	80094e6 <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_R){
 80082d4:	486c      	ldr	r0, [pc, #432]	; (8008488 <cppLoop+0xe28>)
 80082d6:	f7f9 fd37 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b10      	cmp	r3, #16
 80082de:	bf0c      	ite	eq
 80082e0:	2301      	moveq	r3, #1
 80082e2:	2300      	movne	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d03c      	beq.n	8008364 <cppLoop+0xd04>
			led.LR(-1, 1);
 80082ea:	2201      	movs	r2, #1
 80082ec:	f04f 31ff 	mov.w	r1, #4294967295
 80082f0:	4861      	ldr	r0, [pc, #388]	; (8008478 <cppLoop+0xe18>)
 80082f2:	f7f9 fe49 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082f6:	2064      	movs	r0, #100	; 0x64
 80082f8:	f001 fa34 	bl	8009764 <HAL_Delay>
			if(selector_vel == 0)
 80082fc:	4b63      	ldr	r3, [pc, #396]	; (800848c <cppLoop+0xe2c>)
 80082fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d113      	bne.n	800832e <cppLoop+0xcce>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008306:	4b62      	ldr	r3, [pc, #392]	; (8008490 <cppLoop+0xe30>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f7f8 f934 	bl	8000578 <__aeabi_f2d>
 8008310:	a357      	add	r3, pc, #348	; (adr r3, 8008470 <cppLoop+0xe10>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f7 ffd1 	bl	80002bc <__adddf3>
 800831a:	4603      	mov	r3, r0
 800831c:	460c      	mov	r4, r1
 800831e:	4618      	mov	r0, r3
 8008320:	4621      	mov	r1, r4
 8008322:	f7f8 fc79 	bl	8000c18 <__aeabi_d2f>
 8008326:	4602      	mov	r2, r0
 8008328:	4b59      	ldr	r3, [pc, #356]	; (8008490 <cppLoop+0xe30>)
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	e012      	b.n	8008354 <cppLoop+0xcf4>
				adj_min_velocity = adj_min_velocity + 0.1;
 800832e:	4b59      	ldr	r3, [pc, #356]	; (8008494 <cppLoop+0xe34>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7f8 f920 	bl	8000578 <__aeabi_f2d>
 8008338:	a34d      	add	r3, pc, #308	; (adr r3, 8008470 <cppLoop+0xe10>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f7 ffbd 	bl	80002bc <__adddf3>
 8008342:	4603      	mov	r3, r0
 8008344:	460c      	mov	r4, r1
 8008346:	4618      	mov	r0, r3
 8008348:	4621      	mov	r1, r4
 800834a:	f7f8 fc65 	bl	8000c18 <__aeabi_d2f>
 800834e:	4602      	mov	r2, r0
 8008350:	4b50      	ldr	r3, [pc, #320]	; (8008494 <cppLoop+0xe34>)
 8008352:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008354:	2200      	movs	r2, #0
 8008356:	f04f 31ff 	mov.w	r1, #4294967295
 800835a:	4847      	ldr	r0, [pc, #284]	; (8008478 <cppLoop+0xe18>)
 800835c:	f7f9 fe14 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008360:	f001 b8c1 	b.w	80094e6 <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_L){
 8008364:	4848      	ldr	r0, [pc, #288]	; (8008488 <cppLoop+0xe28>)
 8008366:	f7f9 fcef 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800836a:	4603      	mov	r3, r0
 800836c:	2b01      	cmp	r3, #1
 800836e:	bf0c      	ite	eq
 8008370:	2301      	moveq	r3, #1
 8008372:	2300      	movne	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d03c      	beq.n	80083f4 <cppLoop+0xd94>
			led.LR(-1, 1);
 800837a:	2201      	movs	r2, #1
 800837c:	f04f 31ff 	mov.w	r1, #4294967295
 8008380:	483d      	ldr	r0, [pc, #244]	; (8008478 <cppLoop+0xe18>)
 8008382:	f7f9 fe01 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008386:	2064      	movs	r0, #100	; 0x64
 8008388:	f001 f9ec 	bl	8009764 <HAL_Delay>
			if(selector_vel == 0)
 800838c:	4b3f      	ldr	r3, [pc, #252]	; (800848c <cppLoop+0xe2c>)
 800838e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d113      	bne.n	80083be <cppLoop+0xd5e>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008396:	4b3e      	ldr	r3, [pc, #248]	; (8008490 <cppLoop+0xe30>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f7f8 f8ec 	bl	8000578 <__aeabi_f2d>
 80083a0:	a333      	add	r3, pc, #204	; (adr r3, 8008470 <cppLoop+0xe10>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f7f7 ff87 	bl	80002b8 <__aeabi_dsub>
 80083aa:	4603      	mov	r3, r0
 80083ac:	460c      	mov	r4, r1
 80083ae:	4618      	mov	r0, r3
 80083b0:	4621      	mov	r1, r4
 80083b2:	f7f8 fc31 	bl	8000c18 <__aeabi_d2f>
 80083b6:	4602      	mov	r2, r0
 80083b8:	4b35      	ldr	r3, [pc, #212]	; (8008490 <cppLoop+0xe30>)
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	e012      	b.n	80083e4 <cppLoop+0xd84>
				adj_min_velocity = adj_min_velocity - 0.1;
 80083be:	4b35      	ldr	r3, [pc, #212]	; (8008494 <cppLoop+0xe34>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7f8 f8d8 	bl	8000578 <__aeabi_f2d>
 80083c8:	a329      	add	r3, pc, #164	; (adr r3, 8008470 <cppLoop+0xe10>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f7 ff73 	bl	80002b8 <__aeabi_dsub>
 80083d2:	4603      	mov	r3, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	4618      	mov	r0, r3
 80083d8:	4621      	mov	r1, r4
 80083da:	f7f8 fc1d 	bl	8000c18 <__aeabi_d2f>
 80083de:	4602      	mov	r2, r0
 80083e0:	4b2c      	ldr	r3, [pc, #176]	; (8008494 <cppLoop+0xe34>)
 80083e2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80083e4:	2200      	movs	r2, #0
 80083e6:	f04f 31ff 	mov.w	r1, #4294967295
 80083ea:	4823      	ldr	r0, [pc, #140]	; (8008478 <cppLoop+0xe18>)
 80083ec:	f7f9 fdcc 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 80083f0:	f001 b879 	b.w	80094e6 <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_C){
 80083f4:	4824      	ldr	r0, [pc, #144]	; (8008488 <cppLoop+0xe28>)
 80083f6:	f7f9 fca7 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	bf0c      	ite	eq
 8008400:	2301      	moveq	r3, #1
 8008402:	2300      	movne	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	f001 806d 	beq.w	80094e6 <cppLoop+0x1e86>
			led.LR(-1, 1);
 800840c:	2201      	movs	r2, #1
 800840e:	f04f 31ff 	mov.w	r1, #4294967295
 8008412:	4819      	ldr	r0, [pc, #100]	; (8008478 <cppLoop+0xe18>)
 8008414:	f7f9 fdb8 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008418:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800841c:	f001 f9a2 	bl	8009764 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008420:	2300      	movs	r3, #0
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	4b1a      	ldr	r3, [pc, #104]	; (8008490 <cppLoop+0xe30>)
 8008426:	2201      	movs	r2, #1
 8008428:	491b      	ldr	r1, [pc, #108]	; (8008498 <cppLoop+0xe38>)
 800842a:	481c      	ldr	r0, [pc, #112]	; (800849c <cppLoop+0xe3c>)
 800842c:	f7f9 f90a 	bl	8001644 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008430:	2300      	movs	r3, #0
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4b17      	ldr	r3, [pc, #92]	; (8008494 <cppLoop+0xe34>)
 8008436:	2201      	movs	r2, #1
 8008438:	4919      	ldr	r1, [pc, #100]	; (80084a0 <cppLoop+0xe40>)
 800843a:	4818      	ldr	r0, [pc, #96]	; (800849c <cppLoop+0xe3c>)
 800843c:	f7f9 f902 	bl	8001644 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008440:	4b13      	ldr	r3, [pc, #76]	; (8008490 <cppLoop+0xe30>)
 8008442:	edd3 7a00 	vldr	s15, [r3]
 8008446:	eeb0 0a67 	vmov.f32	s0, s15
 800844a:	480c      	ldr	r0, [pc, #48]	; (800847c <cppLoop+0xe1c>)
 800844c:	f7fb fa56 	bl	80038fc <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008450:	4b10      	ldr	r3, [pc, #64]	; (8008494 <cppLoop+0xe34>)
 8008452:	edd3 7a00 	vldr	s15, [r3]
 8008456:	eeb0 0a67 	vmov.f32	s0, s15
 800845a:	4808      	ldr	r0, [pc, #32]	; (800847c <cppLoop+0xe1c>)
 800845c:	f7fb fa6e 	bl	800393c <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008460:	2200      	movs	r2, #0
 8008462:	f04f 31ff 	mov.w	r1, #4294967295
 8008466:	4804      	ldr	r0, [pc, #16]	; (8008478 <cppLoop+0xe18>)
 8008468:	f7f9 fd8e 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 800846c:	f001 b83b 	b.w	80094e6 <cppLoop+0x1e86>
 8008470:	9999999a 	.word	0x9999999a
 8008474:	3fb99999 	.word	0x3fb99999
 8008478:	20000600 	.word	0x20000600
 800847c:	2001bc48 	.word	0x2001bc48
 8008480:	08019eac 	.word	0x08019eac
 8008484:	08019e94 	.word	0x08019e94
 8008488:	200005f4 	.word	0x200005f4
 800848c:	200412dc 	.word	0x200412dc
 8008490:	2004131c 	.word	0x2004131c
 8008494:	2004132c 	.word	0x2004132c
 8008498:	08019eb8 	.word	0x08019eb8
 800849c:	08019e64 	.word	0x08019e64
 80084a0:	08019ec4 	.word	0x08019ec4

	case 5:
		led.fullColor('M');
 80084a4:	214d      	movs	r1, #77	; 0x4d
 80084a6:	48aa      	ldr	r0, [pc, #680]	; (8008750 <cppLoop+0x10f0>)
 80084a8:	f7f9 fcb2 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084ac:	f7f8 fdf8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084b0:	2100      	movs	r1, #0
 80084b2:	2000      	movs	r0, #0
 80084b4:	f7f8 fe04 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80084b8:	4ba6      	ldr	r3, [pc, #664]	; (8008754 <cppLoop+0x10f4>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f7f8 f85b 	bl	8000578 <__aeabi_f2d>
 80084c2:	4603      	mov	r3, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	461a      	mov	r2, r3
 80084c8:	4623      	mov	r3, r4
 80084ca:	48a3      	ldr	r0, [pc, #652]	; (8008758 <cppLoop+0x10f8>)
 80084cc:	f7f8 fe22 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084d0:	2101      	movs	r1, #1
 80084d2:	2000      	movs	r0, #0
 80084d4:	f7f8 fdf4 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80084d8:	4ba0      	ldr	r3, [pc, #640]	; (800875c <cppLoop+0x10fc>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 f84b 	bl	8000578 <__aeabi_f2d>
 80084e2:	4603      	mov	r3, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	461a      	mov	r2, r3
 80084e8:	4623      	mov	r3, r4
 80084ea:	489d      	ldr	r0, [pc, #628]	; (8008760 <cppLoop+0x1100>)
 80084ec:	f7f8 fe12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80084f0:	489c      	ldr	r0, [pc, #624]	; (8008764 <cppLoop+0x1104>)
 80084f2:	f7f9 fc29 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	bf0c      	ite	eq
 80084fc:	2301      	moveq	r3, #1
 80084fe:	2300      	movne	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 87f1 	beq.w	80094ea <cppLoop+0x1e8a>
			HAL_Delay(500);
 8008508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800850c:	f001 f92a 	bl	8009764 <HAL_Delay>

			led.LR(1, -1);
 8008510:	f04f 32ff 	mov.w	r2, #4294967295
 8008514:	2101      	movs	r1, #1
 8008516:	488e      	ldr	r0, [pc, #568]	; (8008750 <cppLoop+0x10f0>)
 8008518:	f7f9 fd36 	bl	8001f88 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800851c:	2102      	movs	r1, #2
 800851e:	4892      	ldr	r0, [pc, #584]	; (8008768 <cppLoop+0x1108>)
 8008520:	f7fb fe18 	bl	8004154 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008524:	4b8d      	ldr	r3, [pc, #564]	; (800875c <cppLoop+0x10fc>)
 8008526:	edd3 7a00 	vldr	s15, [r3]
 800852a:	eeb0 0a67 	vmov.f32	s0, s15
 800852e:	488e      	ldr	r0, [pc, #568]	; (8008768 <cppLoop+0x1108>)
 8008530:	f7fb f9d4 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008534:	4b87      	ldr	r3, [pc, #540]	; (8008754 <cppLoop+0x10f4>)
 8008536:	edd3 7a00 	vldr	s15, [r3]
 800853a:	eeb0 0a67 	vmov.f32	s0, s15
 800853e:	488a      	ldr	r0, [pc, #552]	; (8008768 <cppLoop+0x1108>)
 8008540:	f7fb f9ec 	bl	800391c <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008544:	4b85      	ldr	r3, [pc, #532]	; (800875c <cppLoop+0x10fc>)
 8008546:	edd3 7a00 	vldr	s15, [r3]
 800854a:	eeb0 0a67 	vmov.f32	s0, s15
 800854e:	4886      	ldr	r0, [pc, #536]	; (8008768 <cppLoop+0x1108>)
 8008550:	f7fb fa04 	bl	800395c <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008554:	4884      	ldr	r0, [pc, #528]	; (8008768 <cppLoop+0x1108>)
 8008556:	f7fa fc31 	bl	8002dbc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800855a:	4883      	ldr	r0, [pc, #524]	; (8008768 <cppLoop+0x1108>)
 800855c:	f7fb fcec 	bl	8003f38 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008560:	f04f 32ff 	mov.w	r2, #4294967295
 8008564:	2100      	movs	r1, #0
 8008566:	487a      	ldr	r0, [pc, #488]	; (8008750 <cppLoop+0x10f0>)
 8008568:	f7f9 fd0e 	bl	8001f88 <_ZN3LED2LREaa>
		}

		break;
 800856c:	f000 bfbd 	b.w	80094ea <cppLoop+0x1e8a>

	case 6:
		led.fullColor('R');
 8008570:	2152      	movs	r1, #82	; 0x52
 8008572:	4877      	ldr	r0, [pc, #476]	; (8008750 <cppLoop+0x10f0>)
 8008574:	f7f9 fc4c 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008578:	f7f8 fd92 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800857c:	2100      	movs	r1, #0
 800857e:	2000      	movs	r0, #0
 8008580:	f7f8 fd9e 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008584:	4878      	ldr	r0, [pc, #480]	; (8008768 <cppLoop+0x1108>)
 8008586:	f7fb fa19 	bl	80039bc <_ZN9LineTrace15getMaxVelocity2Ev>
 800858a:	ee10 3a10 	vmov	r3, s0
 800858e:	4618      	mov	r0, r3
 8008590:	f7f7 fff2 	bl	8000578 <__aeabi_f2d>
 8008594:	4603      	mov	r3, r0
 8008596:	460c      	mov	r4, r1
 8008598:	461a      	mov	r2, r3
 800859a:	4623      	mov	r3, r4
 800859c:	486e      	ldr	r0, [pc, #440]	; (8008758 <cppLoop+0x10f8>)
 800859e:	f7f8 fdb9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085a2:	2101      	movs	r1, #1
 80085a4:	2000      	movs	r0, #0
 80085a6:	f7f8 fd8b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80085aa:	486f      	ldr	r0, [pc, #444]	; (8008768 <cppLoop+0x1108>)
 80085ac:	f7fb fa26 	bl	80039fc <_ZN9LineTrace15getMinVelocity2Ev>
 80085b0:	ee10 3a10 	vmov	r3, s0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f7 ffdf 	bl	8000578 <__aeabi_f2d>
 80085ba:	4603      	mov	r3, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	461a      	mov	r2, r3
 80085c0:	4623      	mov	r3, r4
 80085c2:	486a      	ldr	r0, [pc, #424]	; (800876c <cppLoop+0x110c>)
 80085c4:	f7f8 fda6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80085c8:	4866      	ldr	r0, [pc, #408]	; (8008764 <cppLoop+0x1104>)
 80085ca:	f7f9 fbbd 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	bf0c      	ite	eq
 80085d4:	2301      	moveq	r3, #1
 80085d6:	2300      	movne	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d022      	beq.n	8008624 <cppLoop+0xfc4>
			led.LR(-1, 1);
 80085de:	2201      	movs	r2, #1
 80085e0:	f04f 31ff 	mov.w	r1, #4294967295
 80085e4:	485a      	ldr	r0, [pc, #360]	; (8008750 <cppLoop+0x10f0>)
 80085e6:	f7f9 fccf 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085ee:	f001 f8b9 	bl	8009764 <HAL_Delay>

			selector_vel2++;
 80085f2:	4b5f      	ldr	r3, [pc, #380]	; (8008770 <cppLoop+0x1110>)
 80085f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	3301      	adds	r3, #1
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	b21a      	sxth	r2, r3
 8008600:	4b5b      	ldr	r3, [pc, #364]	; (8008770 <cppLoop+0x1110>)
 8008602:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008604:	4b5a      	ldr	r3, [pc, #360]	; (8008770 <cppLoop+0x1110>)
 8008606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800860a:	2b01      	cmp	r3, #1
 800860c:	dd02      	ble.n	8008614 <cppLoop+0xfb4>
 800860e:	4b58      	ldr	r3, [pc, #352]	; (8008770 <cppLoop+0x1110>)
 8008610:	2200      	movs	r2, #0
 8008612:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008614:	2200      	movs	r2, #0
 8008616:	f04f 31ff 	mov.w	r1, #4294967295
 800861a:	484d      	ldr	r0, [pc, #308]	; (8008750 <cppLoop+0x10f0>)
 800861c:	f7f9 fcb4 	bl	8001f88 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008620:	f000 bf65 	b.w	80094ee <cppLoop+0x1e8e>
		else if(joy_stick.getValue() == JOY_R){
 8008624:	484f      	ldr	r0, [pc, #316]	; (8008764 <cppLoop+0x1104>)
 8008626:	f7f9 fb8f 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800862a:	4603      	mov	r3, r0
 800862c:	2b10      	cmp	r3, #16
 800862e:	bf0c      	ite	eq
 8008630:	2301      	moveq	r3, #1
 8008632:	2300      	movne	r3, #0
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d03c      	beq.n	80086b4 <cppLoop+0x1054>
			led.LR(-1, 1);
 800863a:	2201      	movs	r2, #1
 800863c:	f04f 31ff 	mov.w	r1, #4294967295
 8008640:	4843      	ldr	r0, [pc, #268]	; (8008750 <cppLoop+0x10f0>)
 8008642:	f7f9 fca1 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008646:	2064      	movs	r0, #100	; 0x64
 8008648:	f001 f88c 	bl	8009764 <HAL_Delay>
			if(selector_vel2 == 0)
 800864c:	4b48      	ldr	r3, [pc, #288]	; (8008770 <cppLoop+0x1110>)
 800864e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d113      	bne.n	800867e <cppLoop+0x101e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008656:	4b3f      	ldr	r3, [pc, #252]	; (8008754 <cppLoop+0x10f4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f7f7 ff8c 	bl	8000578 <__aeabi_f2d>
 8008660:	a339      	add	r3, pc, #228	; (adr r3, 8008748 <cppLoop+0x10e8>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f7f7 fe29 	bl	80002bc <__adddf3>
 800866a:	4603      	mov	r3, r0
 800866c:	460c      	mov	r4, r1
 800866e:	4618      	mov	r0, r3
 8008670:	4621      	mov	r1, r4
 8008672:	f7f8 fad1 	bl	8000c18 <__aeabi_d2f>
 8008676:	4602      	mov	r2, r0
 8008678:	4b36      	ldr	r3, [pc, #216]	; (8008754 <cppLoop+0x10f4>)
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e012      	b.n	80086a4 <cppLoop+0x1044>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 800867e:	4b37      	ldr	r3, [pc, #220]	; (800875c <cppLoop+0x10fc>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f7f7 ff78 	bl	8000578 <__aeabi_f2d>
 8008688:	a32f      	add	r3, pc, #188	; (adr r3, 8008748 <cppLoop+0x10e8>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	f7f7 fe15 	bl	80002bc <__adddf3>
 8008692:	4603      	mov	r3, r0
 8008694:	460c      	mov	r4, r1
 8008696:	4618      	mov	r0, r3
 8008698:	4621      	mov	r1, r4
 800869a:	f7f8 fabd 	bl	8000c18 <__aeabi_d2f>
 800869e:	4602      	mov	r2, r0
 80086a0:	4b2e      	ldr	r3, [pc, #184]	; (800875c <cppLoop+0x10fc>)
 80086a2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80086a4:	2200      	movs	r2, #0
 80086a6:	f04f 31ff 	mov.w	r1, #4294967295
 80086aa:	4829      	ldr	r0, [pc, #164]	; (8008750 <cppLoop+0x10f0>)
 80086ac:	f7f9 fc6c 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 80086b0:	f000 bf1d 	b.w	80094ee <cppLoop+0x1e8e>
		else if(joy_stick.getValue() == JOY_L){
 80086b4:	482b      	ldr	r0, [pc, #172]	; (8008764 <cppLoop+0x1104>)
 80086b6:	f7f9 fb47 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b01      	cmp	r3, #1
 80086be:	bf0c      	ite	eq
 80086c0:	2301      	moveq	r3, #1
 80086c2:	2300      	movne	r3, #0
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d054      	beq.n	8008774 <cppLoop+0x1114>
			led.LR(-1, 1);
 80086ca:	2201      	movs	r2, #1
 80086cc:	f04f 31ff 	mov.w	r1, #4294967295
 80086d0:	481f      	ldr	r0, [pc, #124]	; (8008750 <cppLoop+0x10f0>)
 80086d2:	f7f9 fc59 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086d6:	2064      	movs	r0, #100	; 0x64
 80086d8:	f001 f844 	bl	8009764 <HAL_Delay>
			if(selector_vel2 == 0)
 80086dc:	4b24      	ldr	r3, [pc, #144]	; (8008770 <cppLoop+0x1110>)
 80086de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d113      	bne.n	800870e <cppLoop+0x10ae>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80086e6:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <cppLoop+0x10f4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7f7 ff44 	bl	8000578 <__aeabi_f2d>
 80086f0:	a315      	add	r3, pc, #84	; (adr r3, 8008748 <cppLoop+0x10e8>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 fddf 	bl	80002b8 <__aeabi_dsub>
 80086fa:	4603      	mov	r3, r0
 80086fc:	460c      	mov	r4, r1
 80086fe:	4618      	mov	r0, r3
 8008700:	4621      	mov	r1, r4
 8008702:	f7f8 fa89 	bl	8000c18 <__aeabi_d2f>
 8008706:	4602      	mov	r2, r0
 8008708:	4b12      	ldr	r3, [pc, #72]	; (8008754 <cppLoop+0x10f4>)
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	e012      	b.n	8008734 <cppLoop+0x10d4>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 800870e:	4b13      	ldr	r3, [pc, #76]	; (800875c <cppLoop+0x10fc>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	f7f7 ff30 	bl	8000578 <__aeabi_f2d>
 8008718:	a30b      	add	r3, pc, #44	; (adr r3, 8008748 <cppLoop+0x10e8>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 fdcb 	bl	80002b8 <__aeabi_dsub>
 8008722:	4603      	mov	r3, r0
 8008724:	460c      	mov	r4, r1
 8008726:	4618      	mov	r0, r3
 8008728:	4621      	mov	r1, r4
 800872a:	f7f8 fa75 	bl	8000c18 <__aeabi_d2f>
 800872e:	4602      	mov	r2, r0
 8008730:	4b0a      	ldr	r3, [pc, #40]	; (800875c <cppLoop+0x10fc>)
 8008732:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008734:	2200      	movs	r2, #0
 8008736:	f04f 31ff 	mov.w	r1, #4294967295
 800873a:	4805      	ldr	r0, [pc, #20]	; (8008750 <cppLoop+0x10f0>)
 800873c:	f7f9 fc24 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008740:	f000 bed5 	b.w	80094ee <cppLoop+0x1e8e>
 8008744:	f3af 8000 	nop.w
 8008748:	9999999a 	.word	0x9999999a
 800874c:	3fb99999 	.word	0x3fb99999
 8008750:	20000600 	.word	0x20000600
 8008754:	20041324 	.word	0x20041324
 8008758:	08019ed0 	.word	0x08019ed0
 800875c:	20041334 	.word	0x20041334
 8008760:	08019e88 	.word	0x08019e88
 8008764:	200005f4 	.word	0x200005f4
 8008768:	2001bc48 	.word	0x2001bc48
 800876c:	08019e94 	.word	0x08019e94
 8008770:	200412de 	.word	0x200412de
		else if(joy_stick.getValue() == JOY_C){
 8008774:	48b4      	ldr	r0, [pc, #720]	; (8008a48 <cppLoop+0x13e8>)
 8008776:	f7f9 fae7 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800877a:	4603      	mov	r3, r0
 800877c:	2b02      	cmp	r3, #2
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 86b1 	beq.w	80094ee <cppLoop+0x1e8e>
			led.LR(-1, 1);
 800878c:	2201      	movs	r2, #1
 800878e:	f04f 31ff 	mov.w	r1, #4294967295
 8008792:	48ae      	ldr	r0, [pc, #696]	; (8008a4c <cppLoop+0x13ec>)
 8008794:	f7f9 fbf8 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008798:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800879c:	f000 ffe2 	bl	8009764 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80087a0:	2300      	movs	r3, #0
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	4baa      	ldr	r3, [pc, #680]	; (8008a50 <cppLoop+0x13f0>)
 80087a6:	2201      	movs	r2, #1
 80087a8:	49aa      	ldr	r1, [pc, #680]	; (8008a54 <cppLoop+0x13f4>)
 80087aa:	48ab      	ldr	r0, [pc, #684]	; (8008a58 <cppLoop+0x13f8>)
 80087ac:	f7f8 ff4a 	bl	8001644 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80087b0:	2300      	movs	r3, #0
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	4ba9      	ldr	r3, [pc, #676]	; (8008a5c <cppLoop+0x13fc>)
 80087b6:	2201      	movs	r2, #1
 80087b8:	49a9      	ldr	r1, [pc, #676]	; (8008a60 <cppLoop+0x1400>)
 80087ba:	48a7      	ldr	r0, [pc, #668]	; (8008a58 <cppLoop+0x13f8>)
 80087bc:	f7f8 ff42 	bl	8001644 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80087c0:	4ba3      	ldr	r3, [pc, #652]	; (8008a50 <cppLoop+0x13f0>)
 80087c2:	edd3 7a00 	vldr	s15, [r3]
 80087c6:	eeb0 0a67 	vmov.f32	s0, s15
 80087ca:	48a6      	ldr	r0, [pc, #664]	; (8008a64 <cppLoop+0x1404>)
 80087cc:	f7fb f8a6 	bl	800391c <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80087d0:	4ba2      	ldr	r3, [pc, #648]	; (8008a5c <cppLoop+0x13fc>)
 80087d2:	edd3 7a00 	vldr	s15, [r3]
 80087d6:	eeb0 0a67 	vmov.f32	s0, s15
 80087da:	48a2      	ldr	r0, [pc, #648]	; (8008a64 <cppLoop+0x1404>)
 80087dc:	f7fb f8be 	bl	800395c <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 80087e0:	2200      	movs	r2, #0
 80087e2:	f04f 31ff 	mov.w	r1, #4294967295
 80087e6:	4899      	ldr	r0, [pc, #612]	; (8008a4c <cppLoop+0x13ec>)
 80087e8:	f7f9 fbce 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 80087ec:	f000 be7f 	b.w	80094ee <cppLoop+0x1e8e>

	case 7:
		led.fullColor('W');
 80087f0:	2157      	movs	r1, #87	; 0x57
 80087f2:	4896      	ldr	r0, [pc, #600]	; (8008a4c <cppLoop+0x13ec>)
 80087f4:	f7f9 fb0c 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 80087f8:	f7f8 fc52 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087fc:	2100      	movs	r1, #0
 80087fe:	2000      	movs	r0, #0
 8008800:	f7f8 fc5e 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008804:	4897      	ldr	r0, [pc, #604]	; (8008a64 <cppLoop+0x1404>)
 8008806:	f7fb f93d 	bl	8003a84 <_ZN9LineTrace9getMaxAccEv>
 800880a:	ee10 3a10 	vmov	r3, s0
 800880e:	4618      	mov	r0, r3
 8008810:	f7f7 feb2 	bl	8000578 <__aeabi_f2d>
 8008814:	4603      	mov	r3, r0
 8008816:	460c      	mov	r4, r1
 8008818:	461a      	mov	r2, r3
 800881a:	4623      	mov	r3, r4
 800881c:	4892      	ldr	r0, [pc, #584]	; (8008a68 <cppLoop+0x1408>)
 800881e:	f7f8 fc79 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008822:	2101      	movs	r1, #1
 8008824:	2000      	movs	r0, #0
 8008826:	f7f8 fc4b 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 800882a:	488e      	ldr	r0, [pc, #568]	; (8008a64 <cppLoop+0x1404>)
 800882c:	f7fb f960 	bl	8003af0 <_ZN9LineTrace9getMaxDecEv>
 8008830:	ee10 3a10 	vmov	r3, s0
 8008834:	4618      	mov	r0, r3
 8008836:	f7f7 fe9f 	bl	8000578 <__aeabi_f2d>
 800883a:	4603      	mov	r3, r0
 800883c:	460c      	mov	r4, r1
 800883e:	461a      	mov	r2, r3
 8008840:	4623      	mov	r3, r4
 8008842:	488a      	ldr	r0, [pc, #552]	; (8008a6c <cppLoop+0x140c>)
 8008844:	f7f8 fc66 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008848:	487f      	ldr	r0, [pc, #508]	; (8008a48 <cppLoop+0x13e8>)
 800884a:	f7f9 fa7d 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800884e:	4603      	mov	r3, r0
 8008850:	2b08      	cmp	r3, #8
 8008852:	bf0c      	ite	eq
 8008854:	2301      	moveq	r3, #1
 8008856:	2300      	movne	r3, #0
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d022      	beq.n	80088a4 <cppLoop+0x1244>
			led.LR(-1, 1);
 800885e:	2201      	movs	r2, #1
 8008860:	f04f 31ff 	mov.w	r1, #4294967295
 8008864:	4879      	ldr	r0, [pc, #484]	; (8008a4c <cppLoop+0x13ec>)
 8008866:	f7f9 fb8f 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800886a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800886e:	f000 ff79 	bl	8009764 <HAL_Delay>

			selector_acc++;
 8008872:	4b7f      	ldr	r3, [pc, #508]	; (8008a70 <cppLoop+0x1410>)
 8008874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008878:	b29b      	uxth	r3, r3
 800887a:	3301      	adds	r3, #1
 800887c:	b29b      	uxth	r3, r3
 800887e:	b21a      	sxth	r2, r3
 8008880:	4b7b      	ldr	r3, [pc, #492]	; (8008a70 <cppLoop+0x1410>)
 8008882:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008884:	4b7a      	ldr	r3, [pc, #488]	; (8008a70 <cppLoop+0x1410>)
 8008886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800888a:	2b01      	cmp	r3, #1
 800888c:	dd02      	ble.n	8008894 <cppLoop+0x1234>
 800888e:	4b78      	ldr	r3, [pc, #480]	; (8008a70 <cppLoop+0x1410>)
 8008890:	2200      	movs	r2, #0
 8008892:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008894:	2200      	movs	r2, #0
 8008896:	f04f 31ff 	mov.w	r1, #4294967295
 800889a:	486c      	ldr	r0, [pc, #432]	; (8008a4c <cppLoop+0x13ec>)
 800889c:	f7f9 fb74 	bl	8001f88 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80088a0:	f000 be27 	b.w	80094f2 <cppLoop+0x1e92>
		else if(joy_stick.getValue() == JOY_R){
 80088a4:	4868      	ldr	r0, [pc, #416]	; (8008a48 <cppLoop+0x13e8>)
 80088a6:	f7f9 fa4f 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b10      	cmp	r3, #16
 80088ae:	bf0c      	ite	eq
 80088b0:	2301      	moveq	r3, #1
 80088b2:	2300      	movne	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d03c      	beq.n	8008934 <cppLoop+0x12d4>
			led.LR(-1, 1);
 80088ba:	2201      	movs	r2, #1
 80088bc:	f04f 31ff 	mov.w	r1, #4294967295
 80088c0:	4862      	ldr	r0, [pc, #392]	; (8008a4c <cppLoop+0x13ec>)
 80088c2:	f7f9 fb61 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80088c6:	2064      	movs	r0, #100	; 0x64
 80088c8:	f000 ff4c 	bl	8009764 <HAL_Delay>
			if(selector_acc == 0){
 80088cc:	4b68      	ldr	r3, [pc, #416]	; (8008a70 <cppLoop+0x1410>)
 80088ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d113      	bne.n	80088fe <cppLoop+0x129e>
				adj_acc = adj_acc + 0.1;
 80088d6:	4b67      	ldr	r3, [pc, #412]	; (8008a74 <cppLoop+0x1414>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7f7 fe4c 	bl	8000578 <__aeabi_f2d>
 80088e0:	a357      	add	r3, pc, #348	; (adr r3, 8008a40 <cppLoop+0x13e0>)
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	f7f7 fce9 	bl	80002bc <__adddf3>
 80088ea:	4603      	mov	r3, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	4618      	mov	r0, r3
 80088f0:	4621      	mov	r1, r4
 80088f2:	f7f8 f991 	bl	8000c18 <__aeabi_d2f>
 80088f6:	4602      	mov	r2, r0
 80088f8:	4b5e      	ldr	r3, [pc, #376]	; (8008a74 <cppLoop+0x1414>)
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	e012      	b.n	8008924 <cppLoop+0x12c4>
				adj_dec = adj_dec + 0.1;
 80088fe:	4b5e      	ldr	r3, [pc, #376]	; (8008a78 <cppLoop+0x1418>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f7f7 fe38 	bl	8000578 <__aeabi_f2d>
 8008908:	a34d      	add	r3, pc, #308	; (adr r3, 8008a40 <cppLoop+0x13e0>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f7f7 fcd5 	bl	80002bc <__adddf3>
 8008912:	4603      	mov	r3, r0
 8008914:	460c      	mov	r4, r1
 8008916:	4618      	mov	r0, r3
 8008918:	4621      	mov	r1, r4
 800891a:	f7f8 f97d 	bl	8000c18 <__aeabi_d2f>
 800891e:	4602      	mov	r2, r0
 8008920:	4b55      	ldr	r3, [pc, #340]	; (8008a78 <cppLoop+0x1418>)
 8008922:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008924:	2200      	movs	r2, #0
 8008926:	f04f 31ff 	mov.w	r1, #4294967295
 800892a:	4848      	ldr	r0, [pc, #288]	; (8008a4c <cppLoop+0x13ec>)
 800892c:	f7f9 fb2c 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008930:	f000 bddf 	b.w	80094f2 <cppLoop+0x1e92>
		else if(joy_stick.getValue() == JOY_L){
 8008934:	4844      	ldr	r0, [pc, #272]	; (8008a48 <cppLoop+0x13e8>)
 8008936:	f7f9 fa07 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800893a:	4603      	mov	r3, r0
 800893c:	2b01      	cmp	r3, #1
 800893e:	bf0c      	ite	eq
 8008940:	2301      	moveq	r3, #1
 8008942:	2300      	movne	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d03c      	beq.n	80089c4 <cppLoop+0x1364>
			led.LR(-1, 1);
 800894a:	2201      	movs	r2, #1
 800894c:	f04f 31ff 	mov.w	r1, #4294967295
 8008950:	483e      	ldr	r0, [pc, #248]	; (8008a4c <cppLoop+0x13ec>)
 8008952:	f7f9 fb19 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008956:	2064      	movs	r0, #100	; 0x64
 8008958:	f000 ff04 	bl	8009764 <HAL_Delay>
			if(selector_acc == 0){
 800895c:	4b44      	ldr	r3, [pc, #272]	; (8008a70 <cppLoop+0x1410>)
 800895e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d113      	bne.n	800898e <cppLoop+0x132e>
				adj_acc = adj_acc - 0.1;
 8008966:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <cppLoop+0x1414>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f7f7 fe04 	bl	8000578 <__aeabi_f2d>
 8008970:	a333      	add	r3, pc, #204	; (adr r3, 8008a40 <cppLoop+0x13e0>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f7 fc9f 	bl	80002b8 <__aeabi_dsub>
 800897a:	4603      	mov	r3, r0
 800897c:	460c      	mov	r4, r1
 800897e:	4618      	mov	r0, r3
 8008980:	4621      	mov	r1, r4
 8008982:	f7f8 f949 	bl	8000c18 <__aeabi_d2f>
 8008986:	4602      	mov	r2, r0
 8008988:	4b3a      	ldr	r3, [pc, #232]	; (8008a74 <cppLoop+0x1414>)
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	e012      	b.n	80089b4 <cppLoop+0x1354>
				adj_dec = adj_dec - 0.1;
 800898e:	4b3a      	ldr	r3, [pc, #232]	; (8008a78 <cppLoop+0x1418>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f7f7 fdf0 	bl	8000578 <__aeabi_f2d>
 8008998:	a329      	add	r3, pc, #164	; (adr r3, 8008a40 <cppLoop+0x13e0>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fc8b 	bl	80002b8 <__aeabi_dsub>
 80089a2:	4603      	mov	r3, r0
 80089a4:	460c      	mov	r4, r1
 80089a6:	4618      	mov	r0, r3
 80089a8:	4621      	mov	r1, r4
 80089aa:	f7f8 f935 	bl	8000c18 <__aeabi_d2f>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b31      	ldr	r3, [pc, #196]	; (8008a78 <cppLoop+0x1418>)
 80089b2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80089b4:	2200      	movs	r2, #0
 80089b6:	f04f 31ff 	mov.w	r1, #4294967295
 80089ba:	4824      	ldr	r0, [pc, #144]	; (8008a4c <cppLoop+0x13ec>)
 80089bc:	f7f9 fae4 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 80089c0:	f000 bd97 	b.w	80094f2 <cppLoop+0x1e92>
		else if(joy_stick.getValue() == JOY_C){
 80089c4:	4820      	ldr	r0, [pc, #128]	; (8008a48 <cppLoop+0x13e8>)
 80089c6:	f7f9 f9bf 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	bf0c      	ite	eq
 80089d0:	2301      	moveq	r3, #1
 80089d2:	2300      	movne	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 858b 	beq.w	80094f2 <cppLoop+0x1e92>
			led.LR(-1, 1);
 80089dc:	2201      	movs	r2, #1
 80089de:	f04f 31ff 	mov.w	r1, #4294967295
 80089e2:	481a      	ldr	r0, [pc, #104]	; (8008a4c <cppLoop+0x13ec>)
 80089e4:	f7f9 fad0 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089ec:	f000 feba 	bl	8009764 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 80089f0:	2300      	movs	r3, #0
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4b1f      	ldr	r3, [pc, #124]	; (8008a74 <cppLoop+0x1414>)
 80089f6:	2201      	movs	r2, #1
 80089f8:	4920      	ldr	r1, [pc, #128]	; (8008a7c <cppLoop+0x141c>)
 80089fa:	4817      	ldr	r0, [pc, #92]	; (8008a58 <cppLoop+0x13f8>)
 80089fc:	f7f8 fe22 	bl	8001644 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008a00:	2300      	movs	r3, #0
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <cppLoop+0x1418>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	491d      	ldr	r1, [pc, #116]	; (8008a80 <cppLoop+0x1420>)
 8008a0a:	4813      	ldr	r0, [pc, #76]	; (8008a58 <cppLoop+0x13f8>)
 8008a0c:	f7f8 fe1a 	bl	8001644 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008a10:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <cppLoop+0x1414>)
 8008a12:	edd3 7a00 	vldr	s15, [r3]
 8008a16:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <cppLoop+0x1418>)
 8008a18:	ed93 7a00 	vldr	s14, [r3]
 8008a1c:	eef0 0a47 	vmov.f32	s1, s14
 8008a20:	eeb0 0a67 	vmov.f32	s0, s15
 8008a24:	480f      	ldr	r0, [pc, #60]	; (8008a64 <cppLoop+0x1404>)
 8008a26:	f7fa fff9 	bl	8003a1c <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a30:	4806      	ldr	r0, [pc, #24]	; (8008a4c <cppLoop+0x13ec>)
 8008a32:	f7f9 faa9 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008a36:	f000 bd5c 	b.w	80094f2 <cppLoop+0x1e92>
 8008a3a:	bf00      	nop
 8008a3c:	f3af 8000 	nop.w
 8008a40:	9999999a 	.word	0x9999999a
 8008a44:	3fb99999 	.word	0x3fb99999
 8008a48:	200005f4 	.word	0x200005f4
 8008a4c:	20000600 	.word	0x20000600
 8008a50:	20041324 	.word	0x20041324
 8008a54:	08019edc 	.word	0x08019edc
 8008a58:	08019e64 	.word	0x08019e64
 8008a5c:	20041334 	.word	0x20041334
 8008a60:	08019ee8 	.word	0x08019ee8
 8008a64:	2001bc48 	.word	0x2001bc48
 8008a68:	08019ef4 	.word	0x08019ef4
 8008a6c:	08019f00 	.word	0x08019f00
 8008a70:	200412d8 	.word	0x200412d8
 8008a74:	2004133c 	.word	0x2004133c
 8008a78:	20041344 	.word	0x20041344
 8008a7c:	08019f0c 	.word	0x08019f0c
 8008a80:	08019f14 	.word	0x08019f14

	case 8:
		led.fullColor('W');
 8008a84:	2157      	movs	r1, #87	; 0x57
 8008a86:	4894      	ldr	r0, [pc, #592]	; (8008cd8 <cppLoop+0x1678>)
 8008a88:	f7f9 f9c2 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a8c:	f7f8 fb08 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a90:	2100      	movs	r1, #0
 8008a92:	2000      	movs	r0, #0
 8008a94:	f7f8 fb14 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008a98:	4890      	ldr	r0, [pc, #576]	; (8008cdc <cppLoop+0x167c>)
 8008a9a:	f7fb f817 	bl	8003acc <_ZN9LineTrace10getMaxAcc2Ev>
 8008a9e:	ee10 3a10 	vmov	r3, s0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fd68 	bl	8000578 <__aeabi_f2d>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	461a      	mov	r2, r3
 8008aae:	4623      	mov	r3, r4
 8008ab0:	488b      	ldr	r0, [pc, #556]	; (8008ce0 <cppLoop+0x1680>)
 8008ab2:	f7f8 fb2f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	2000      	movs	r0, #0
 8008aba:	f7f8 fb01 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008abe:	4887      	ldr	r0, [pc, #540]	; (8008cdc <cppLoop+0x167c>)
 8008ac0:	f7fa fff2 	bl	8003aa8 <_ZN9LineTrace10getMaxDec2Ev>
 8008ac4:	ee10 3a10 	vmov	r3, s0
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7f7 fd55 	bl	8000578 <__aeabi_f2d>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	4883      	ldr	r0, [pc, #524]	; (8008ce4 <cppLoop+0x1684>)
 8008ad8:	f7f8 fb1c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008adc:	4882      	ldr	r0, [pc, #520]	; (8008ce8 <cppLoop+0x1688>)
 8008ade:	f7f9 f933 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d022      	beq.n	8008b38 <cppLoop+0x14d8>
			led.LR(-1, 1);
 8008af2:	2201      	movs	r2, #1
 8008af4:	f04f 31ff 	mov.w	r1, #4294967295
 8008af8:	4877      	ldr	r0, [pc, #476]	; (8008cd8 <cppLoop+0x1678>)
 8008afa:	f7f9 fa45 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008afe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b02:	f000 fe2f 	bl	8009764 <HAL_Delay>

			selector_acc2++;
 8008b06:	4b79      	ldr	r3, [pc, #484]	; (8008cec <cppLoop+0x168c>)
 8008b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3301      	adds	r3, #1
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	b21a      	sxth	r2, r3
 8008b14:	4b75      	ldr	r3, [pc, #468]	; (8008cec <cppLoop+0x168c>)
 8008b16:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008b18:	4b74      	ldr	r3, [pc, #464]	; (8008cec <cppLoop+0x168c>)
 8008b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	dd02      	ble.n	8008b28 <cppLoop+0x14c8>
 8008b22:	4b72      	ldr	r3, [pc, #456]	; (8008cec <cppLoop+0x168c>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b2e:	486a      	ldr	r0, [pc, #424]	; (8008cd8 <cppLoop+0x1678>)
 8008b30:	f7f9 fa2a 	bl	8001f88 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008b34:	f000 bcdf 	b.w	80094f6 <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_R){
 8008b38:	486b      	ldr	r0, [pc, #428]	; (8008ce8 <cppLoop+0x1688>)
 8008b3a:	f7f9 f905 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	bf0c      	ite	eq
 8008b44:	2301      	moveq	r3, #1
 8008b46:	2300      	movne	r3, #0
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d03c      	beq.n	8008bc8 <cppLoop+0x1568>
			led.LR(-1, 1);
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f04f 31ff 	mov.w	r1, #4294967295
 8008b54:	4860      	ldr	r0, [pc, #384]	; (8008cd8 <cppLoop+0x1678>)
 8008b56:	f7f9 fa17 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b5a:	2064      	movs	r0, #100	; 0x64
 8008b5c:	f000 fe02 	bl	8009764 <HAL_Delay>
			if(selector_acc2 == 0){
 8008b60:	4b62      	ldr	r3, [pc, #392]	; (8008cec <cppLoop+0x168c>)
 8008b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d113      	bne.n	8008b92 <cppLoop+0x1532>
				adj_acc2 = adj_acc2 + 0.1;
 8008b6a:	4b61      	ldr	r3, [pc, #388]	; (8008cf0 <cppLoop+0x1690>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7f7 fd02 	bl	8000578 <__aeabi_f2d>
 8008b74:	a356      	add	r3, pc, #344	; (adr r3, 8008cd0 <cppLoop+0x1670>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 fb9f 	bl	80002bc <__adddf3>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	4618      	mov	r0, r3
 8008b84:	4621      	mov	r1, r4
 8008b86:	f7f8 f847 	bl	8000c18 <__aeabi_d2f>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4b58      	ldr	r3, [pc, #352]	; (8008cf0 <cppLoop+0x1690>)
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	e012      	b.n	8008bb8 <cppLoop+0x1558>
				adj_dec2 = adj_dec2 + 0.1;
 8008b92:	4b58      	ldr	r3, [pc, #352]	; (8008cf4 <cppLoop+0x1694>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7f7 fcee 	bl	8000578 <__aeabi_f2d>
 8008b9c:	a34c      	add	r3, pc, #304	; (adr r3, 8008cd0 <cppLoop+0x1670>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	f7f7 fb8b 	bl	80002bc <__adddf3>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	460c      	mov	r4, r1
 8008baa:	4618      	mov	r0, r3
 8008bac:	4621      	mov	r1, r4
 8008bae:	f7f8 f833 	bl	8000c18 <__aeabi_d2f>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b4f      	ldr	r3, [pc, #316]	; (8008cf4 <cppLoop+0x1694>)
 8008bb6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f04f 31ff 	mov.w	r1, #4294967295
 8008bbe:	4846      	ldr	r0, [pc, #280]	; (8008cd8 <cppLoop+0x1678>)
 8008bc0:	f7f9 f9e2 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008bc4:	f000 bc97 	b.w	80094f6 <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_L){
 8008bc8:	4847      	ldr	r0, [pc, #284]	; (8008ce8 <cppLoop+0x1688>)
 8008bca:	f7f9 f8bd 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	bf0c      	ite	eq
 8008bd4:	2301      	moveq	r3, #1
 8008bd6:	2300      	movne	r3, #0
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d03c      	beq.n	8008c58 <cppLoop+0x15f8>
			led.LR(-1, 1);
 8008bde:	2201      	movs	r2, #1
 8008be0:	f04f 31ff 	mov.w	r1, #4294967295
 8008be4:	483c      	ldr	r0, [pc, #240]	; (8008cd8 <cppLoop+0x1678>)
 8008be6:	f7f9 f9cf 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008bea:	2064      	movs	r0, #100	; 0x64
 8008bec:	f000 fdba 	bl	8009764 <HAL_Delay>
			if(selector_acc2 == 0){
 8008bf0:	4b3e      	ldr	r3, [pc, #248]	; (8008cec <cppLoop+0x168c>)
 8008bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d113      	bne.n	8008c22 <cppLoop+0x15c2>
				adj_acc2 = adj_acc2 - 0.1;
 8008bfa:	4b3d      	ldr	r3, [pc, #244]	; (8008cf0 <cppLoop+0x1690>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f7 fcba 	bl	8000578 <__aeabi_f2d>
 8008c04:	a332      	add	r3, pc, #200	; (adr r3, 8008cd0 <cppLoop+0x1670>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f7f7 fb55 	bl	80002b8 <__aeabi_dsub>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	4618      	mov	r0, r3
 8008c14:	4621      	mov	r1, r4
 8008c16:	f7f7 ffff 	bl	8000c18 <__aeabi_d2f>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	4b34      	ldr	r3, [pc, #208]	; (8008cf0 <cppLoop+0x1690>)
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e012      	b.n	8008c48 <cppLoop+0x15e8>
				adj_dec2 = adj_dec2 - 0.1;
 8008c22:	4b34      	ldr	r3, [pc, #208]	; (8008cf4 <cppLoop+0x1694>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7f7 fca6 	bl	8000578 <__aeabi_f2d>
 8008c2c:	a328      	add	r3, pc, #160	; (adr r3, 8008cd0 <cppLoop+0x1670>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	f7f7 fb41 	bl	80002b8 <__aeabi_dsub>
 8008c36:	4603      	mov	r3, r0
 8008c38:	460c      	mov	r4, r1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	f7f7 ffeb 	bl	8000c18 <__aeabi_d2f>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4b2b      	ldr	r3, [pc, #172]	; (8008cf4 <cppLoop+0x1694>)
 8008c46:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c4e:	4822      	ldr	r0, [pc, #136]	; (8008cd8 <cppLoop+0x1678>)
 8008c50:	f7f9 f99a 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008c54:	f000 bc4f 	b.w	80094f6 <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_C){
 8008c58:	4823      	ldr	r0, [pc, #140]	; (8008ce8 <cppLoop+0x1688>)
 8008c5a:	f7f9 f875 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	bf0c      	ite	eq
 8008c64:	2301      	moveq	r3, #1
 8008c66:	2300      	movne	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 8443 	beq.w	80094f6 <cppLoop+0x1e96>
			led.LR(-1, 1);
 8008c70:	2201      	movs	r2, #1
 8008c72:	f04f 31ff 	mov.w	r1, #4294967295
 8008c76:	4818      	ldr	r0, [pc, #96]	; (8008cd8 <cppLoop+0x1678>)
 8008c78:	f7f9 f986 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c80:	f000 fd70 	bl	8009764 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008c84:	2300      	movs	r3, #0
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <cppLoop+0x1690>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	491a      	ldr	r1, [pc, #104]	; (8008cf8 <cppLoop+0x1698>)
 8008c8e:	481b      	ldr	r0, [pc, #108]	; (8008cfc <cppLoop+0x169c>)
 8008c90:	f7f8 fcd8 	bl	8001644 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008c94:	2300      	movs	r3, #0
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	4b16      	ldr	r3, [pc, #88]	; (8008cf4 <cppLoop+0x1694>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4918      	ldr	r1, [pc, #96]	; (8008d00 <cppLoop+0x16a0>)
 8008c9e:	4817      	ldr	r0, [pc, #92]	; (8008cfc <cppLoop+0x169c>)
 8008ca0:	f7f8 fcd0 	bl	8001644 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008ca4:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <cppLoop+0x1690>)
 8008ca6:	edd3 7a00 	vldr	s15, [r3]
 8008caa:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <cppLoop+0x1694>)
 8008cac:	ed93 7a00 	vldr	s14, [r3]
 8008cb0:	eef0 0a47 	vmov.f32	s1, s14
 8008cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8008cb8:	4808      	ldr	r0, [pc, #32]	; (8008cdc <cppLoop+0x167c>)
 8008cba:	f7fa fec9 	bl	8003a50 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8008cc4:	4804      	ldr	r0, [pc, #16]	; (8008cd8 <cppLoop+0x1678>)
 8008cc6:	f7f9 f95f 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008cca:	f000 bc14 	b.w	80094f6 <cppLoop+0x1e96>
 8008cce:	bf00      	nop
 8008cd0:	9999999a 	.word	0x9999999a
 8008cd4:	3fb99999 	.word	0x3fb99999
 8008cd8:	20000600 	.word	0x20000600
 8008cdc:	2001bc48 	.word	0x2001bc48
 8008ce0:	08019f1c 	.word	0x08019f1c
 8008ce4:	08019f28 	.word	0x08019f28
 8008ce8:	200005f4 	.word	0x200005f4
 8008cec:	200412da 	.word	0x200412da
 8008cf0:	2004134c 	.word	0x2004134c
 8008cf4:	20041354 	.word	0x20041354
 8008cf8:	08019f34 	.word	0x08019f34
 8008cfc:	08019e64 	.word	0x08019e64
 8008d00:	08019f40 	.word	0x08019f40

	case 9:
		led.fullColor('W');
 8008d04:	2157      	movs	r1, #87	; 0x57
 8008d06:	48b2      	ldr	r0, [pc, #712]	; (8008fd0 <cppLoop+0x1970>)
 8008d08:	f7f9 f882 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d0c:	f7f8 f9c8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d10:	2100      	movs	r1, #0
 8008d12:	2000      	movs	r0, #0
 8008d14:	f7f8 f9d4 	bl	80010c0 <lcd_locate>
		lcd_printf("F%4.2lf   ", line_trace.getKpFast()*1000);
 8008d18:	48ae      	ldr	r0, [pc, #696]	; (8008fd4 <cppLoop+0x1974>)
 8008d1a:	f7fa fdb2 	bl	8003882 <_ZN9LineTrace9getKpFastEv>
 8008d1e:	eeb0 7a40 	vmov.f32	s14, s0
 8008d22:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008fd8 <cppLoop+0x1978>
 8008d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2a:	ee17 0a90 	vmov	r0, s15
 8008d2e:	f7f7 fc23 	bl	8000578 <__aeabi_f2d>
 8008d32:	4603      	mov	r3, r0
 8008d34:	460c      	mov	r4, r1
 8008d36:	461a      	mov	r2, r3
 8008d38:	4623      	mov	r3, r4
 8008d3a:	48a8      	ldr	r0, [pc, #672]	; (8008fdc <cppLoop+0x197c>)
 8008d3c:	f7f8 f9ea 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d40:	2101      	movs	r1, #1
 8008d42:	2000      	movs	r0, #0
 8008d44:	f7f8 f9bc 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiFast()*100, line_trace.getKdFast()*10000);
 8008d48:	48a2      	ldr	r0, [pc, #648]	; (8008fd4 <cppLoop+0x1974>)
 8008d4a:	f7fa fda9 	bl	80038a0 <_ZN9LineTrace9getKiFastEv>
 8008d4e:	eeb0 7a40 	vmov.f32	s14, s0
 8008d52:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8008fe0 <cppLoop+0x1980>
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	ee17 0a90 	vmov	r0, s15
 8008d5e:	f7f7 fc0b 	bl	8000578 <__aeabi_f2d>
 8008d62:	4605      	mov	r5, r0
 8008d64:	460e      	mov	r6, r1
 8008d66:	489b      	ldr	r0, [pc, #620]	; (8008fd4 <cppLoop+0x1974>)
 8008d68:	f7fa fda9 	bl	80038be <_ZN9LineTrace9getKdFastEv>
 8008d6c:	eeb0 7a40 	vmov.f32	s14, s0
 8008d70:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8008fe4 <cppLoop+0x1984>
 8008d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d78:	ee17 0a90 	vmov	r0, s15
 8008d7c:	f7f7 fbfc 	bl	8000578 <__aeabi_f2d>
 8008d80:	4603      	mov	r3, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	e9cd 3400 	strd	r3, r4, [sp]
 8008d88:	462a      	mov	r2, r5
 8008d8a:	4633      	mov	r3, r6
 8008d8c:	4896      	ldr	r0, [pc, #600]	; (8008fe8 <cppLoop+0x1988>)
 8008d8e:	f7f8 f9c1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008d92:	4896      	ldr	r0, [pc, #600]	; (8008fec <cppLoop+0x198c>)
 8008d94:	f7f8 ffd8 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b08      	cmp	r3, #8
 8008d9c:	bf0c      	ite	eq
 8008d9e:	2301      	moveq	r3, #1
 8008da0:	2300      	movne	r3, #0
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d021      	beq.n	8008dec <cppLoop+0x178c>
			led.LR(-1, 1);
 8008da8:	2201      	movs	r2, #1
 8008daa:	f04f 31ff 	mov.w	r1, #4294967295
 8008dae:	4888      	ldr	r0, [pc, #544]	; (8008fd0 <cppLoop+0x1970>)
 8008db0:	f7f9 f8ea 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008db4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008db8:	f000 fcd4 	bl	8009764 <HAL_Delay>

			selector_fast++;
 8008dbc:	4b8c      	ldr	r3, [pc, #560]	; (8008ff0 <cppLoop+0x1990>)
 8008dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	b21a      	sxth	r2, r3
 8008dca:	4b89      	ldr	r3, [pc, #548]	; (8008ff0 <cppLoop+0x1990>)
 8008dcc:	801a      	strh	r2, [r3, #0]
			if(selector_fast >= 3) selector_fast = 0;
 8008dce:	4b88      	ldr	r3, [pc, #544]	; (8008ff0 <cppLoop+0x1990>)
 8008dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	dd02      	ble.n	8008dde <cppLoop+0x177e>
 8008dd8:	4b85      	ldr	r3, [pc, #532]	; (8008ff0 <cppLoop+0x1990>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008dde:	2200      	movs	r2, #0
 8008de0:	f04f 31ff 	mov.w	r1, #4294967295
 8008de4:	487a      	ldr	r0, [pc, #488]	; (8008fd0 <cppLoop+0x1970>)
 8008de6:	f7f9 f8cf 	bl	8001f88 <_ZN3LED2LREaa>
			user_fclose();

			led.LR(-1, 0);
		}
		*/
		break;
 8008dea:	e386      	b.n	80094fa <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_R){
 8008dec:	487f      	ldr	r0, [pc, #508]	; (8008fec <cppLoop+0x198c>)
 8008dee:	f7f8 ffab 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b10      	cmp	r3, #16
 8008df6:	bf0c      	ite	eq
 8008df8:	2301      	moveq	r3, #1
 8008dfa:	2300      	movne	r3, #0
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d058      	beq.n	8008eb4 <cppLoop+0x1854>
			led.LR(-1, 1);
 8008e02:	2201      	movs	r2, #1
 8008e04:	f04f 31ff 	mov.w	r1, #4294967295
 8008e08:	4871      	ldr	r0, [pc, #452]	; (8008fd0 <cppLoop+0x1970>)
 8008e0a:	f7f9 f8bd 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e0e:	2064      	movs	r0, #100	; 0x64
 8008e10:	f000 fca8 	bl	8009764 <HAL_Delay>
			if(selector_fast == 0){
 8008e14:	4b76      	ldr	r3, [pc, #472]	; (8008ff0 <cppLoop+0x1990>)
 8008e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d113      	bne.n	8008e46 <cppLoop+0x17e6>
				adj_kp_fast = adj_kp_fast + 0.00001;
 8008e1e:	4b75      	ldr	r3, [pc, #468]	; (8008ff4 <cppLoop+0x1994>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f7 fba8 	bl	8000578 <__aeabi_f2d>
 8008e28:	a363      	add	r3, pc, #396	; (adr r3, 8008fb8 <cppLoop+0x1958>)
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	f7f7 fa45 	bl	80002bc <__adddf3>
 8008e32:	4603      	mov	r3, r0
 8008e34:	460c      	mov	r4, r1
 8008e36:	4618      	mov	r0, r3
 8008e38:	4621      	mov	r1, r4
 8008e3a:	f7f7 feed 	bl	8000c18 <__aeabi_d2f>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	4b6c      	ldr	r3, [pc, #432]	; (8008ff4 <cppLoop+0x1994>)
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e02b      	b.n	8008e9e <cppLoop+0x183e>
			else if(selector_fast == 1){
 8008e46:	4b6a      	ldr	r3, [pc, #424]	; (8008ff0 <cppLoop+0x1990>)
 8008e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d113      	bne.n	8008e78 <cppLoop+0x1818>
				adj_ki_fast = adj_ki_fast + 0.0001;
 8008e50:	4b69      	ldr	r3, [pc, #420]	; (8008ff8 <cppLoop+0x1998>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7f7 fb8f 	bl	8000578 <__aeabi_f2d>
 8008e5a:	a359      	add	r3, pc, #356	; (adr r3, 8008fc0 <cppLoop+0x1960>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fa2c 	bl	80002bc <__adddf3>
 8008e64:	4603      	mov	r3, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	4618      	mov	r0, r3
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	f7f7 fed4 	bl	8000c18 <__aeabi_d2f>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4b61      	ldr	r3, [pc, #388]	; (8008ff8 <cppLoop+0x1998>)
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	e012      	b.n	8008e9e <cppLoop+0x183e>
				adj_kd_fast = adj_kd_fast + 0.000001;
 8008e78:	4b60      	ldr	r3, [pc, #384]	; (8008ffc <cppLoop+0x199c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f7 fb7b 	bl	8000578 <__aeabi_f2d>
 8008e82:	a351      	add	r3, pc, #324	; (adr r3, 8008fc8 <cppLoop+0x1968>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f7f7 fa18 	bl	80002bc <__adddf3>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	4618      	mov	r0, r3
 8008e92:	4621      	mov	r1, r4
 8008e94:	f7f7 fec0 	bl	8000c18 <__aeabi_d2f>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	4b58      	ldr	r3, [pc, #352]	; (8008ffc <cppLoop+0x199c>)
 8008e9c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008e9e:	2152      	movs	r1, #82	; 0x52
 8008ea0:	484b      	ldr	r0, [pc, #300]	; (8008fd0 <cppLoop+0x1970>)
 8008ea2:	f7f8 ffb5 	bl	8001e10 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8008eac:	4848      	ldr	r0, [pc, #288]	; (8008fd0 <cppLoop+0x1970>)
 8008eae:	f7f9 f86b 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008eb2:	e322      	b.n	80094fa <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_L){
 8008eb4:	484d      	ldr	r0, [pc, #308]	; (8008fec <cppLoop+0x198c>)
 8008eb6:	f7f8 ff47 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	bf0c      	ite	eq
 8008ec0:	2301      	moveq	r3, #1
 8008ec2:	2300      	movne	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d058      	beq.n	8008f7c <cppLoop+0x191c>
			led.LR(-1, 1);
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8008ed0:	483f      	ldr	r0, [pc, #252]	; (8008fd0 <cppLoop+0x1970>)
 8008ed2:	f7f9 f859 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ed6:	2064      	movs	r0, #100	; 0x64
 8008ed8:	f000 fc44 	bl	8009764 <HAL_Delay>
			if(selector_fast == 0){
 8008edc:	4b44      	ldr	r3, [pc, #272]	; (8008ff0 <cppLoop+0x1990>)
 8008ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d113      	bne.n	8008f0e <cppLoop+0x18ae>
				adj_kp_fast = adj_kp_fast - 0.00001;
 8008ee6:	4b43      	ldr	r3, [pc, #268]	; (8008ff4 <cppLoop+0x1994>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7f7 fb44 	bl	8000578 <__aeabi_f2d>
 8008ef0:	a331      	add	r3, pc, #196	; (adr r3, 8008fb8 <cppLoop+0x1958>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f7f7 f9df 	bl	80002b8 <__aeabi_dsub>
 8008efa:	4603      	mov	r3, r0
 8008efc:	460c      	mov	r4, r1
 8008efe:	4618      	mov	r0, r3
 8008f00:	4621      	mov	r1, r4
 8008f02:	f7f7 fe89 	bl	8000c18 <__aeabi_d2f>
 8008f06:	4602      	mov	r2, r0
 8008f08:	4b3a      	ldr	r3, [pc, #232]	; (8008ff4 <cppLoop+0x1994>)
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	e02b      	b.n	8008f66 <cppLoop+0x1906>
			else if(selector_fast == 1){
 8008f0e:	4b38      	ldr	r3, [pc, #224]	; (8008ff0 <cppLoop+0x1990>)
 8008f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d113      	bne.n	8008f40 <cppLoop+0x18e0>
				adj_ki_fast = adj_ki_fast - 0.0001;
 8008f18:	4b37      	ldr	r3, [pc, #220]	; (8008ff8 <cppLoop+0x1998>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7f7 fb2b 	bl	8000578 <__aeabi_f2d>
 8008f22:	a327      	add	r3, pc, #156	; (adr r3, 8008fc0 <cppLoop+0x1960>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 f9c6 	bl	80002b8 <__aeabi_dsub>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	4618      	mov	r0, r3
 8008f32:	4621      	mov	r1, r4
 8008f34:	f7f7 fe70 	bl	8000c18 <__aeabi_d2f>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	4b2f      	ldr	r3, [pc, #188]	; (8008ff8 <cppLoop+0x1998>)
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	e012      	b.n	8008f66 <cppLoop+0x1906>
				adj_kd_fast = adj_kd_fast - 0.000001;
 8008f40:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <cppLoop+0x199c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f7 fb17 	bl	8000578 <__aeabi_f2d>
 8008f4a:	a31f      	add	r3, pc, #124	; (adr r3, 8008fc8 <cppLoop+0x1968>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	f7f7 f9b2 	bl	80002b8 <__aeabi_dsub>
 8008f54:	4603      	mov	r3, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	4618      	mov	r0, r3
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	f7f7 fe5c 	bl	8000c18 <__aeabi_d2f>
 8008f60:	4602      	mov	r2, r0
 8008f62:	4b26      	ldr	r3, [pc, #152]	; (8008ffc <cppLoop+0x199c>)
 8008f64:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008f66:	2152      	movs	r1, #82	; 0x52
 8008f68:	4819      	ldr	r0, [pc, #100]	; (8008fd0 <cppLoop+0x1970>)
 8008f6a:	f7f8 ff51 	bl	8001e10 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f04f 31ff 	mov.w	r1, #4294967295
 8008f74:	4816      	ldr	r0, [pc, #88]	; (8008fd0 <cppLoop+0x1970>)
 8008f76:	f7f9 f807 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008f7a:	e2be      	b.n	80094fa <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_D){
 8008f7c:	481b      	ldr	r0, [pc, #108]	; (8008fec <cppLoop+0x198c>)
 8008f7e:	f7f8 fee3 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	bf0c      	ite	eq
 8008f88:	2301      	moveq	r3, #1
 8008f8a:	2300      	movne	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d036      	beq.n	8009000 <cppLoop+0x19a0>
			led.LR(-1, 1);
 8008f92:	2201      	movs	r2, #1
 8008f94:	f04f 31ff 	mov.w	r1, #4294967295
 8008f98:	480d      	ldr	r0, [pc, #52]	; (8008fd0 <cppLoop+0x1970>)
 8008f9a:	f7f8 fff5 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fa2:	f000 fbdf 	bl	8009764 <HAL_Delay>
			led.LR(-1, 0);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8008fac:	4808      	ldr	r0, [pc, #32]	; (8008fd0 <cppLoop+0x1970>)
 8008fae:	f7f8 ffeb 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 8008fb2:	e2a2      	b.n	80094fa <cppLoop+0x1e9a>
 8008fb4:	f3af 8000 	nop.w
 8008fb8:	88e368f1 	.word	0x88e368f1
 8008fbc:	3ee4f8b5 	.word	0x3ee4f8b5
 8008fc0:	eb1c432d 	.word	0xeb1c432d
 8008fc4:	3f1a36e2 	.word	0x3f1a36e2
 8008fc8:	a0b5ed8d 	.word	0xa0b5ed8d
 8008fcc:	3eb0c6f7 	.word	0x3eb0c6f7
 8008fd0:	20000600 	.word	0x20000600
 8008fd4:	2001bc48 	.word	0x2001bc48
 8008fd8:	447a0000 	.word	0x447a0000
 8008fdc:	08019f4c 	.word	0x08019f4c
 8008fe0:	42c80000 	.word	0x42c80000
 8008fe4:	461c4000 	.word	0x461c4000
 8008fe8:	08019e4c 	.word	0x08019e4c
 8008fec:	200005f4 	.word	0x200005f4
 8008ff0:	200412e0 	.word	0x200412e0
 8008ff4:	200412fc 	.word	0x200412fc
 8008ff8:	20041304 	.word	0x20041304
 8008ffc:	2004130c 	.word	0x2004130c
		else if(joy_stick.getValue() == JOY_C){
 8009000:	48ba      	ldr	r0, [pc, #744]	; (80092ec <cppLoop+0x1c8c>)
 8009002:	f7f8 fea1 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8009006:	4603      	mov	r3, r0
 8009008:	2b02      	cmp	r3, #2
 800900a:	bf0c      	ite	eq
 800900c:	2301      	moveq	r3, #1
 800900e:	2300      	movne	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 8271 	beq.w	80094fa <cppLoop+0x1e9a>
			led.LR(-1, 1);
 8009018:	2201      	movs	r2, #1
 800901a:	f04f 31ff 	mov.w	r1, #4294967295
 800901e:	48b4      	ldr	r0, [pc, #720]	; (80092f0 <cppLoop+0x1c90>)
 8009020:	f7f8 ffb2 	bl	8001f88 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009024:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009028:	f000 fb9c 	bl	8009764 <HAL_Delay>
			sd_write_array_float("PARAMS", "KPFAST.TXT", 1, &adj_kp_fast, OVER_WRITE);
 800902c:	2300      	movs	r3, #0
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	4bb0      	ldr	r3, [pc, #704]	; (80092f4 <cppLoop+0x1c94>)
 8009032:	2201      	movs	r2, #1
 8009034:	49b0      	ldr	r1, [pc, #704]	; (80092f8 <cppLoop+0x1c98>)
 8009036:	48b1      	ldr	r0, [pc, #708]	; (80092fc <cppLoop+0x1c9c>)
 8009038:	f7f8 fb04 	bl	8001644 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KIFAST.TXT", 1, &adj_ki_fast, OVER_WRITE);
 800903c:	2300      	movs	r3, #0
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4baf      	ldr	r3, [pc, #700]	; (8009300 <cppLoop+0x1ca0>)
 8009042:	2201      	movs	r2, #1
 8009044:	49af      	ldr	r1, [pc, #700]	; (8009304 <cppLoop+0x1ca4>)
 8009046:	48ad      	ldr	r0, [pc, #692]	; (80092fc <cppLoop+0x1c9c>)
 8009048:	f7f8 fafc 	bl	8001644 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KDFAST.TXT", 1, &adj_kd_fast, OVER_WRITE);
 800904c:	2300      	movs	r3, #0
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	4bad      	ldr	r3, [pc, #692]	; (8009308 <cppLoop+0x1ca8>)
 8009052:	2201      	movs	r2, #1
 8009054:	49ad      	ldr	r1, [pc, #692]	; (800930c <cppLoop+0x1cac>)
 8009056:	48a9      	ldr	r0, [pc, #676]	; (80092fc <cppLoop+0x1c9c>)
 8009058:	f7f8 faf4 	bl	8001644 <sd_write_array_float>
			line_trace.setGainFast(adj_kp_fast, adj_ki_fast, adj_kd_fast);
 800905c:	4ba5      	ldr	r3, [pc, #660]	; (80092f4 <cppLoop+0x1c94>)
 800905e:	edd3 7a00 	vldr	s15, [r3]
 8009062:	4ba7      	ldr	r3, [pc, #668]	; (8009300 <cppLoop+0x1ca0>)
 8009064:	ed93 7a00 	vldr	s14, [r3]
 8009068:	4ba7      	ldr	r3, [pc, #668]	; (8009308 <cppLoop+0x1ca8>)
 800906a:	edd3 6a00 	vldr	s13, [r3]
 800906e:	eeb0 1a66 	vmov.f32	s2, s13
 8009072:	eef0 0a47 	vmov.f32	s1, s14
 8009076:	eeb0 0a67 	vmov.f32	s0, s15
 800907a:	48a5      	ldr	r0, [pc, #660]	; (8009310 <cppLoop+0x1cb0>)
 800907c:	f7fa fbbb 	bl	80037f6 <_ZN9LineTrace11setGainFastEfff>
			led.LR(-1, 0);
 8009080:	2200      	movs	r2, #0
 8009082:	f04f 31ff 	mov.w	r1, #4294967295
 8009086:	489a      	ldr	r0, [pc, #616]	; (80092f0 <cppLoop+0x1c90>)
 8009088:	f7f8 ff7e 	bl	8001f88 <_ZN3LED2LREaa>
		break;
 800908c:	e235      	b.n	80094fa <cppLoop+0x1e9a>

	case 10:
		led.fullColor('~');
 800908e:	217e      	movs	r1, #126	; 0x7e
 8009090:	4897      	ldr	r0, [pc, #604]	; (80092f0 <cppLoop+0x1c90>)
 8009092:	f7f8 febd 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009096:	f7f8 f803 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800909a:	2100      	movs	r1, #0
 800909c:	2000      	movs	r0, #0
 800909e:	f7f8 f80f 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80090a2:	489c      	ldr	r0, [pc, #624]	; (8009314 <cppLoop+0x1cb4>)
 80090a4:	f7f8 f836 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80090a8:	2101      	movs	r1, #1
 80090aa:	2000      	movs	r0, #0
 80090ac:	f7f8 f808 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80090b0:	4899      	ldr	r0, [pc, #612]	; (8009318 <cppLoop+0x1cb8>)
 80090b2:	f7f8 f82f 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80090b6:	488d      	ldr	r0, [pc, #564]	; (80092ec <cppLoop+0x1c8c>)
 80090b8:	f7f8 fe46 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b02      	cmp	r3, #2
 80090c0:	bf0c      	ite	eq
 80090c2:	2301      	moveq	r3, #1
 80090c4:	2300      	movne	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8218 	beq.w	80094fe <cppLoop+0x1e9e>
			HAL_Delay(500);
 80090ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090d2:	f000 fb47 	bl	8009764 <HAL_Delay>
			led.LR(-1, 1);
 80090d6:	2201      	movs	r2, #1
 80090d8:	f04f 31ff 	mov.w	r1, #4294967295
 80090dc:	4884      	ldr	r0, [pc, #528]	; (80092f0 <cppLoop+0x1c90>)
 80090de:	f7f8 ff53 	bl	8001f88 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80090e2:	2102      	movs	r1, #2
 80090e4:	488a      	ldr	r0, [pc, #552]	; (8009310 <cppLoop+0x1cb0>)
 80090e6:	f7fb f835 	bl	8004154 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80090ea:	4b8c      	ldr	r3, [pc, #560]	; (800931c <cppLoop+0x1cbc>)
 80090ec:	edd3 7a00 	vldr	s15, [r3]
 80090f0:	eeb0 0a67 	vmov.f32	s0, s15
 80090f4:	4886      	ldr	r0, [pc, #536]	; (8009310 <cppLoop+0x1cb0>)
 80090f6:	f7fa fbf1 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80090fa:	4b88      	ldr	r3, [pc, #544]	; (800931c <cppLoop+0x1cbc>)
 80090fc:	edd3 7a00 	vldr	s15, [r3]
 8009100:	eeb0 0a67 	vmov.f32	s0, s15
 8009104:	4882      	ldr	r0, [pc, #520]	; (8009310 <cppLoop+0x1cb0>)
 8009106:	f7fa fbf9 	bl	80038fc <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800910a:	4b84      	ldr	r3, [pc, #528]	; (800931c <cppLoop+0x1cbc>)
 800910c:	edd3 7a00 	vldr	s15, [r3]
 8009110:	eeb0 0a67 	vmov.f32	s0, s15
 8009114:	487e      	ldr	r0, [pc, #504]	; (8009310 <cppLoop+0x1cb0>)
 8009116:	f7fa fc11 	bl	800393c <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800911a:	487d      	ldr	r0, [pc, #500]	; (8009310 <cppLoop+0x1cb0>)
 800911c:	f7f9 ff1c 	bl	8002f58 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009120:	2200      	movs	r2, #0
 8009122:	f04f 31ff 	mov.w	r1, #4294967295
 8009126:	4872      	ldr	r0, [pc, #456]	; (80092f0 <cppLoop+0x1c90>)
 8009128:	f7f8 ff2e 	bl	8001f88 <_ZN3LED2LREaa>
		}

		break;
 800912c:	e1e7      	b.n	80094fe <cppLoop+0x1e9e>

	case 11:
		led.fullColor('~');
 800912e:	217e      	movs	r1, #126	; 0x7e
 8009130:	486f      	ldr	r0, [pc, #444]	; (80092f0 <cppLoop+0x1c90>)
 8009132:	f7f8 fe6d 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009136:	f7f7 ffb3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800913a:	2100      	movs	r1, #0
 800913c:	2000      	movs	r0, #0
 800913e:	f7f7 ffbf 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8009142:	4877      	ldr	r0, [pc, #476]	; (8009320 <cppLoop+0x1cc0>)
 8009144:	f7f7 ffe6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009148:	2101      	movs	r1, #1
 800914a:	2000      	movs	r0, #0
 800914c:	f7f7 ffb8 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009150:	4874      	ldr	r0, [pc, #464]	; (8009324 <cppLoop+0x1cc4>)
 8009152:	f7f7 ffdf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009156:	4865      	ldr	r0, [pc, #404]	; (80092ec <cppLoop+0x1c8c>)
 8009158:	f7f8 fdf6 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800915c:	4603      	mov	r3, r0
 800915e:	2b02      	cmp	r3, #2
 8009160:	bf0c      	ite	eq
 8009162:	2301      	moveq	r3, #1
 8009164:	2300      	movne	r3, #0
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 81ca 	beq.w	8009502 <cppLoop+0x1ea2>
			HAL_Delay(1000);
 800916e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009172:	f000 faf7 	bl	8009764 <HAL_Delay>
			led.LR(-1, 1);
 8009176:	2201      	movs	r2, #1
 8009178:	f04f 31ff 	mov.w	r1, #4294967295
 800917c:	485c      	ldr	r0, [pc, #368]	; (80092f0 <cppLoop+0x1c90>)
 800917e:	f7f8 ff03 	bl	8001f88 <_ZN3LED2LREaa>

			esc.on(0, 500, 0, 0);
 8009182:	2300      	movs	r3, #0
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800918c:	2100      	movs	r1, #0
 800918e:	4866      	ldr	r0, [pc, #408]	; (8009328 <cppLoop+0x1cc8>)
 8009190:	f7f8 f81e 	bl	80011d0 <_ZN3ESC2onEtttt>
			HAL_Delay(2000);
 8009194:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009198:	f000 fae4 	bl	8009764 <HAL_Delay>
			esc.off();
 800919c:	4862      	ldr	r0, [pc, #392]	; (8009328 <cppLoop+0x1cc8>)
 800919e:	f7f8 f849 	bl	8001234 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 80091a2:	2200      	movs	r2, #0
 80091a4:	f04f 31ff 	mov.w	r1, #4294967295
 80091a8:	4851      	ldr	r0, [pc, #324]	; (80092f0 <cppLoop+0x1c90>)
 80091aa:	f7f8 feed 	bl	8001f88 <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 80091ae:	e1a8      	b.n	8009502 <cppLoop+0x1ea2>

	case 12:
		led.fullColor('~');
 80091b0:	217e      	movs	r1, #126	; 0x7e
 80091b2:	484f      	ldr	r0, [pc, #316]	; (80092f0 <cppLoop+0x1c90>)
 80091b4:	f7f8 fe2c 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091b8:	f7f7 ff72 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091bc:	2100      	movs	r1, #0
 80091be:	2000      	movs	r0, #0
 80091c0:	f7f7 ff7e 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80091c4:	4859      	ldr	r0, [pc, #356]	; (800932c <cppLoop+0x1ccc>)
 80091c6:	f7f7 ffa5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091ca:	2101      	movs	r1, #1
 80091cc:	2000      	movs	r0, #0
 80091ce:	f7f7 ff77 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80091d2:	4857      	ldr	r0, [pc, #348]	; (8009330 <cppLoop+0x1cd0>)
 80091d4:	f7f7 ff9e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80091d8:	4844      	ldr	r0, [pc, #272]	; (80092ec <cppLoop+0x1c8c>)
 80091da:	f7f8 fdb5 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	bf0c      	ite	eq
 80091e4:	2301      	moveq	r3, #1
 80091e6:	2300      	movne	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 818b 	beq.w	8009506 <cppLoop+0x1ea6>
			HAL_Delay(1500);
 80091f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80091f4:	f000 fab6 	bl	8009764 <HAL_Delay>
			led.LR(-1, 1);
 80091f8:	2201      	movs	r2, #1
 80091fa:	f04f 31ff 	mov.w	r1, #4294967295
 80091fe:	483c      	ldr	r0, [pc, #240]	; (80092f0 <cppLoop+0x1c90>)
 8009200:	f7f8 fec2 	bl	8001f88 <_ZN3LED2LREaa>

			logger.start();
 8009204:	484b      	ldr	r0, [pc, #300]	; (8009334 <cppLoop+0x1cd4>)
 8009206:	f7fb fb97 	bl	8004938 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800920a:	484b      	ldr	r0, [pc, #300]	; (8009338 <cppLoop+0x1cd8>)
 800920c:	f7fc fb99 	bl	8005942 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 8009210:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800933c <cppLoop+0x1cdc>
 8009214:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8009340 <cppLoop+0x1ce0>
 8009218:	4847      	ldr	r0, [pc, #284]	; (8009338 <cppLoop+0x1cd8>)
 800921a:	f7fc fb25 	bl	8005868 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800921e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009222:	f000 fa9f 	bl	8009764 <HAL_Delay>

			logger.stop();
 8009226:	4843      	ldr	r0, [pc, #268]	; (8009334 <cppLoop+0x1cd4>)
 8009228:	f7fb fb97 	bl	800495a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800922c:	4842      	ldr	r0, [pc, #264]	; (8009338 <cppLoop+0x1cd8>)
 800922e:	f7fc fb9b 	bl	8005968 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009232:	4a44      	ldr	r2, [pc, #272]	; (8009344 <cppLoop+0x1ce4>)
 8009234:	4944      	ldr	r1, [pc, #272]	; (8009348 <cppLoop+0x1ce8>)
 8009236:	483f      	ldr	r0, [pc, #252]	; (8009334 <cppLoop+0x1cd4>)
 8009238:	f7fb fa8b 	bl	8004752 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800923c:	2200      	movs	r2, #0
 800923e:	f04f 31ff 	mov.w	r1, #4294967295
 8009242:	482b      	ldr	r0, [pc, #172]	; (80092f0 <cppLoop+0x1c90>)
 8009244:	f7f8 fea0 	bl	8001f88 <_ZN3LED2LREaa>
		}
		break;
 8009248:	e15d      	b.n	8009506 <cppLoop+0x1ea6>

	case 13:

		led.fullColor('~');
 800924a:	217e      	movs	r1, #126	; 0x7e
 800924c:	4828      	ldr	r0, [pc, #160]	; (80092f0 <cppLoop+0x1c90>)
 800924e:	f7f8 fddf 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009252:	f7f7 ff25 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009256:	2100      	movs	r1, #0
 8009258:	2000      	movs	r0, #0
 800925a:	f7f7 ff31 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 800925e:	483b      	ldr	r0, [pc, #236]	; (800934c <cppLoop+0x1cec>)
 8009260:	f7f7 ff58 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009264:	2101      	movs	r1, #1
 8009266:	2000      	movs	r0, #0
 8009268:	f7f7 ff2a 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800926c:	4838      	ldr	r0, [pc, #224]	; (8009350 <cppLoop+0x1cf0>)
 800926e:	f7f7 ff51 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009272:	481e      	ldr	r0, [pc, #120]	; (80092ec <cppLoop+0x1c8c>)
 8009274:	f7f8 fd68 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 8009278:	4603      	mov	r3, r0
 800927a:	2b02      	cmp	r3, #2
 800927c:	bf0c      	ite	eq
 800927e:	2301      	moveq	r3, #1
 8009280:	2300      	movne	r3, #0
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8140 	beq.w	800950a <cppLoop+0x1eaa>
			HAL_Delay(500);
 800928a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800928e:	f000 fa69 	bl	8009764 <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 8009292:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009354 <cppLoop+0x1cf4>
 8009296:	481e      	ldr	r0, [pc, #120]	; (8009310 <cppLoop+0x1cb0>)
 8009298:	f7fa fb20 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
 80092a0:	2101      	movs	r1, #1
 80092a2:	4813      	ldr	r0, [pc, #76]	; (80092f0 <cppLoop+0x1c90>)
 80092a4:	f7f8 fe70 	bl	8001f88 <_ZN3LED2LREaa>

			logger.resetIdx();
 80092a8:	4822      	ldr	r0, [pc, #136]	; (8009334 <cppLoop+0x1cd4>)
 80092aa:	f7fb fb2d 	bl	8004908 <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 80092ae:	2100      	movs	r1, #0
 80092b0:	4817      	ldr	r0, [pc, #92]	; (8009310 <cppLoop+0x1cb0>)
 80092b2:	f7fa ff4f 	bl	8004154 <_ZN9LineTrace7setModeEs>
			logger.start();
 80092b6:	481f      	ldr	r0, [pc, #124]	; (8009334 <cppLoop+0x1cd4>)
 80092b8:	f7fb fb3e 	bl	8004938 <_ZN6Logger5startEv>
			line_trace.running();
 80092bc:	4814      	ldr	r0, [pc, #80]	; (8009310 <cppLoop+0x1cb0>)
 80092be:	f7fa fe3b 	bl	8003f38 <_ZN9LineTrace7runningEv>
			logger.stop();
 80092c2:	481c      	ldr	r0, [pc, #112]	; (8009334 <cppLoop+0x1cd4>)
 80092c4:	f7fb fb49 	bl	800495a <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 80092c8:	4a23      	ldr	r2, [pc, #140]	; (8009358 <cppLoop+0x1cf8>)
 80092ca:	4924      	ldr	r1, [pc, #144]	; (800935c <cppLoop+0x1cfc>)
 80092cc:	4819      	ldr	r0, [pc, #100]	; (8009334 <cppLoop+0x1cd4>)
 80092ce:	f7fb fa40 	bl	8004752 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 80092d2:	4a23      	ldr	r2, [pc, #140]	; (8009360 <cppLoop+0x1d00>)
 80092d4:	4921      	ldr	r1, [pc, #132]	; (800935c <cppLoop+0x1cfc>)
 80092d6:	4817      	ldr	r0, [pc, #92]	; (8009334 <cppLoop+0x1cd4>)
 80092d8:	f7fb fa4f 	bl	800477a <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	2100      	movs	r1, #0
 80092e2:	4803      	ldr	r0, [pc, #12]	; (80092f0 <cppLoop+0x1c90>)
 80092e4:	f7f8 fe50 	bl	8001f88 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80092e8:	e10f      	b.n	800950a <cppLoop+0x1eaa>
 80092ea:	bf00      	nop
 80092ec:	200005f4 	.word	0x200005f4
 80092f0:	20000600 	.word	0x20000600
 80092f4:	200412fc 	.word	0x200412fc
 80092f8:	08019f58 	.word	0x08019f58
 80092fc:	08019e64 	.word	0x08019e64
 8009300:	20041304 	.word	0x20041304
 8009304:	08019f64 	.word	0x08019f64
 8009308:	2004130c 	.word	0x2004130c
 800930c:	08019f70 	.word	0x08019f70
 8009310:	2001bc48 	.word	0x2001bc48
 8009314:	08019f7c 	.word	0x08019f7c
 8009318:	08019f88 	.word	0x08019f88
 800931c:	20041324 	.word	0x20041324
 8009320:	08019f94 	.word	0x08019f94
 8009324:	08019f98 	.word	0x08019f98
 8009328:	200412d0 	.word	0x200412d0
 800932c:	08019fa0 	.word	0x08019fa0
 8009330:	08019fa4 	.word	0x08019fa4
 8009334:	20000624 	.word	0x20000624
 8009338:	2001bbcc 	.word	0x2001bbcc
 800933c:	4048f5c3 	.word	0x4048f5c3
 8009340:	00000000 	.word	0x00000000
 8009344:	08019fb0 	.word	0x08019fb0
 8009348:	08019fbc 	.word	0x08019fbc
 800934c:	08019fc8 	.word	0x08019fc8
 8009350:	08019fd0 	.word	0x08019fd0
 8009354:	3e99999a 	.word	0x3e99999a
 8009358:	08019fd8 	.word	0x08019fd8
 800935c:	08019fe4 	.word	0x08019fe4
 8009360:	08019ff0 	.word	0x08019ff0

	case 14:
		led.fullColor('W');
 8009364:	2157      	movs	r1, #87	; 0x57
 8009366:	486f      	ldr	r0, [pc, #444]	; (8009524 <cppLoop+0x1ec4>)
 8009368:	f7f8 fd52 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 800936c:	f7f7 fe98 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009370:	2100      	movs	r1, #0
 8009372:	2000      	movs	r0, #0
 8009374:	f7f7 fea4 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009378:	486b      	ldr	r0, [pc, #428]	; (8009528 <cppLoop+0x1ec8>)
 800937a:	f7f7 fecb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800937e:	2101      	movs	r1, #1
 8009380:	2000      	movs	r0, #0
 8009382:	f7f7 fe9d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009386:	4b69      	ldr	r3, [pc, #420]	; (800952c <cppLoop+0x1ecc>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f7f7 f8f4 	bl	8000578 <__aeabi_f2d>
 8009390:	4603      	mov	r3, r0
 8009392:	460c      	mov	r4, r1
 8009394:	461a      	mov	r2, r3
 8009396:	4623      	mov	r3, r4
 8009398:	4865      	ldr	r0, [pc, #404]	; (8009530 <cppLoop+0x1ed0>)
 800939a:	f7f7 febb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800939e:	4865      	ldr	r0, [pc, #404]	; (8009534 <cppLoop+0x1ed4>)
 80093a0:	f7f8 fcd2 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	bf0c      	ite	eq
 80093aa:	2301      	moveq	r3, #1
 80093ac:	2300      	movne	r3, #0
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80ac 	beq.w	800950e <cppLoop+0x1eae>
			HAL_Delay(500);
 80093b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80093ba:	f000 f9d3 	bl	8009764 <HAL_Delay>

			led.LR(1, -1);
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	2101      	movs	r1, #1
 80093c4:	4857      	ldr	r0, [pc, #348]	; (8009524 <cppLoop+0x1ec4>)
 80093c6:	f7f8 fddf 	bl	8001f88 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80093ca:	2102      	movs	r1, #2
 80093cc:	485a      	ldr	r0, [pc, #360]	; (8009538 <cppLoop+0x1ed8>)
 80093ce:	f7fa fec1 	bl	8004154 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80093d2:	4b5a      	ldr	r3, [pc, #360]	; (800953c <cppLoop+0x1edc>)
 80093d4:	edd3 7a00 	vldr	s15, [r3]
 80093d8:	eeb0 0a67 	vmov.f32	s0, s15
 80093dc:	4856      	ldr	r0, [pc, #344]	; (8009538 <cppLoop+0x1ed8>)
 80093de:	f7fa fa7d 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80093e2:	4b52      	ldr	r3, [pc, #328]	; (800952c <cppLoop+0x1ecc>)
 80093e4:	edd3 7a00 	vldr	s15, [r3]
 80093e8:	eeb0 0a67 	vmov.f32	s0, s15
 80093ec:	4852      	ldr	r0, [pc, #328]	; (8009538 <cppLoop+0x1ed8>)
 80093ee:	f7fa fa85 	bl	80038fc <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80093f2:	4b4e      	ldr	r3, [pc, #312]	; (800952c <cppLoop+0x1ecc>)
 80093f4:	edd3 7a00 	vldr	s15, [r3]
 80093f8:	eeb0 0a67 	vmov.f32	s0, s15
 80093fc:	484e      	ldr	r0, [pc, #312]	; (8009538 <cppLoop+0x1ed8>)
 80093fe:	f7fa fa9d 	bl	800393c <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009402:	484d      	ldr	r0, [pc, #308]	; (8009538 <cppLoop+0x1ed8>)
 8009404:	f7f9 fda8 	bl	8002f58 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009408:	484b      	ldr	r0, [pc, #300]	; (8009538 <cppLoop+0x1ed8>)
 800940a:	f7fa fd95 	bl	8003f38 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800940e:	f04f 32ff 	mov.w	r2, #4294967295
 8009412:	2100      	movs	r1, #0
 8009414:	4843      	ldr	r0, [pc, #268]	; (8009524 <cppLoop+0x1ec4>)
 8009416:	f7f8 fdb7 	bl	8001f88 <_ZN3LED2LREaa>
		}

		break;
 800941a:	e078      	b.n	800950e <cppLoop+0x1eae>

	case 15:
		led.fullColor('W');
 800941c:	2157      	movs	r1, #87	; 0x57
 800941e:	4841      	ldr	r0, [pc, #260]	; (8009524 <cppLoop+0x1ec4>)
 8009420:	f7f8 fcf6 	bl	8001e10 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009424:	f7f7 fe3c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009428:	2100      	movs	r1, #0
 800942a:	2000      	movs	r0, #0
 800942c:	f7f7 fe48 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009430:	4843      	ldr	r0, [pc, #268]	; (8009540 <cppLoop+0x1ee0>)
 8009432:	f7f7 fe6f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009436:	2101      	movs	r1, #1
 8009438:	2000      	movs	r0, #0
 800943a:	f7f7 fe41 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800943e:	4b41      	ldr	r3, [pc, #260]	; (8009544 <cppLoop+0x1ee4>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4618      	mov	r0, r3
 8009444:	f7f7 f898 	bl	8000578 <__aeabi_f2d>
 8009448:	4603      	mov	r3, r0
 800944a:	460c      	mov	r4, r1
 800944c:	461a      	mov	r2, r3
 800944e:	4623      	mov	r3, r4
 8009450:	4837      	ldr	r0, [pc, #220]	; (8009530 <cppLoop+0x1ed0>)
 8009452:	f7f7 fe5f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009456:	4837      	ldr	r0, [pc, #220]	; (8009534 <cppLoop+0x1ed4>)
 8009458:	f7f8 fc76 	bl	8001d48 <_ZN8JoyStick8getValueEv>
 800945c:	4603      	mov	r3, r0
 800945e:	2b02      	cmp	r3, #2
 8009460:	bf0c      	ite	eq
 8009462:	2301      	moveq	r3, #1
 8009464:	2300      	movne	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d052      	beq.n	8009512 <cppLoop+0x1eb2>
			HAL_Delay(500);
 800946c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009470:	f000 f978 	bl	8009764 <HAL_Delay>

			led.LR(1, -1);
 8009474:	f04f 32ff 	mov.w	r2, #4294967295
 8009478:	2101      	movs	r1, #1
 800947a:	482a      	ldr	r0, [pc, #168]	; (8009524 <cppLoop+0x1ec4>)
 800947c:	f7f8 fd84 	bl	8001f88 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009480:	2101      	movs	r1, #1
 8009482:	482d      	ldr	r0, [pc, #180]	; (8009538 <cppLoop+0x1ed8>)
 8009484:	f7fa fe66 	bl	8004154 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009488:	4b2f      	ldr	r3, [pc, #188]	; (8009548 <cppLoop+0x1ee8>)
 800948a:	edd3 7a00 	vldr	s15, [r3]
 800948e:	eeb0 0a67 	vmov.f32	s0, s15
 8009492:	4829      	ldr	r0, [pc, #164]	; (8009538 <cppLoop+0x1ed8>)
 8009494:	f7fa fa22 	bl	80038dc <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009498:	4b2a      	ldr	r3, [pc, #168]	; (8009544 <cppLoop+0x1ee4>)
 800949a:	edd3 7a00 	vldr	s15, [r3]
 800949e:	eeb0 0a67 	vmov.f32	s0, s15
 80094a2:	4825      	ldr	r0, [pc, #148]	; (8009538 <cppLoop+0x1ed8>)
 80094a4:	f7fa fa2a 	bl	80038fc <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80094a8:	4b27      	ldr	r3, [pc, #156]	; (8009548 <cppLoop+0x1ee8>)
 80094aa:	edd3 7a00 	vldr	s15, [r3]
 80094ae:	eeb0 0a67 	vmov.f32	s0, s15
 80094b2:	4821      	ldr	r0, [pc, #132]	; (8009538 <cppLoop+0x1ed8>)
 80094b4:	f7fa fa42 	bl	800393c <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80094b8:	481f      	ldr	r0, [pc, #124]	; (8009538 <cppLoop+0x1ed8>)
 80094ba:	f7f9 fd4d 	bl	8002f58 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80094be:	481e      	ldr	r0, [pc, #120]	; (8009538 <cppLoop+0x1ed8>)
 80094c0:	f7fa fd3a 	bl	8003f38 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295
 80094c8:	2100      	movs	r1, #0
 80094ca:	4816      	ldr	r0, [pc, #88]	; (8009524 <cppLoop+0x1ec4>)
 80094cc:	f7f8 fd5c 	bl	8001f88 <_ZN3LED2LREaa>
		}
		break;
 80094d0:	e01f      	b.n	8009512 <cppLoop+0x1eb2>

	default:
		break;
 80094d2:	bf00      	nop
 80094d4:	e01e      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094d6:	bf00      	nop
 80094d8:	e01c      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094da:	bf00      	nop
 80094dc:	e01a      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094de:	bf00      	nop
 80094e0:	e018      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094e2:	bf00      	nop
 80094e4:	e016      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094e6:	bf00      	nop
 80094e8:	e014      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094ea:	bf00      	nop
 80094ec:	e012      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094ee:	bf00      	nop
 80094f0:	e010      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094f2:	bf00      	nop
 80094f4:	e00e      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094f6:	bf00      	nop
 80094f8:	e00c      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094fa:	bf00      	nop
 80094fc:	e00a      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 80094fe:	bf00      	nop
 8009500:	e008      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 8009502:	bf00      	nop
 8009504:	e006      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 8009506:	bf00      	nop
 8009508:	e004      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 800950a:	bf00      	nop
 800950c:	e002      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 800950e:	bf00      	nop
 8009510:	e000      	b.n	8009514 <cppLoop+0x1eb4>
		break;
 8009512:	bf00      	nop

	}

	HAL_Delay(30);
 8009514:	201e      	movs	r0, #30
 8009516:	f000 f925 	bl	8009764 <HAL_Delay>

}
 800951a:	bf00      	nop
 800951c:	3704      	adds	r7, #4
 800951e:	46bd      	mov	sp, r7
 8009520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009522:	bf00      	nop
 8009524:	20000600 	.word	0x20000600
 8009528:	08019ffc 	.word	0x08019ffc
 800952c:	20041324 	.word	0x20041324
 8009530:	08019e88 	.word	0x08019e88
 8009534:	200005f4 	.word	0x200005f4
 8009538:	2001bc48 	.word	0x2001bc48
 800953c:	20041334 	.word	0x20041334
 8009540:	0801a008 	.word	0x0801a008
 8009544:	2004131c 	.word	0x2004131c
 8009548:	2004132c 	.word	0x2004132c

0800954c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af06      	add	r7, sp, #24
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d140      	bne.n	80095de <_Z41__static_initialization_and_destruction_0ii+0x92>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009562:	4293      	cmp	r3, r2
 8009564:	d13b      	bne.n	80095de <_Z41__static_initialization_and_destruction_0ii+0x92>
LineSensor line_sensor;
 8009566:	4820      	ldr	r0, [pc, #128]	; (80095e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009568:	f7f8 fd46 	bl	8001ff8 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800956c:	481f      	ldr	r0, [pc, #124]	; (80095ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800956e:	f7fb fddb 	bl	8005128 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009572:	481f      	ldr	r0, [pc, #124]	; (80095f0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009574:	f7f8 fbdc 	bl	8001d30 <_ZN8JoyStickC1Ev>
Motor motor;
 8009578:	481e      	ldr	r0, [pc, #120]	; (80095f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800957a:	f7fb f9ff 	bl	800497c <_ZN5MotorC1Ev>
IMU imu;
 800957e:	481e      	ldr	r0, [pc, #120]	; (80095f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009580:	f7f8 fa78 	bl	8001a74 <_ZN3IMUC1Ev>
Logger logger;
 8009584:	481d      	ldr	r0, [pc, #116]	; (80095fc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009586:	f7fa ff4d 	bl	8004424 <_ZN6LoggerC1Ev>
Encoder encoder;
 800958a:	481d      	ldr	r0, [pc, #116]	; (8009600 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800958c:	f7f7 fe76 	bl	800127c <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009590:	4b19      	ldr	r3, [pc, #100]	; (80095f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009592:	4a1b      	ldr	r2, [pc, #108]	; (8009600 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009594:	4917      	ldr	r1, [pc, #92]	; (80095f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009596:	481b      	ldr	r0, [pc, #108]	; (8009604 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009598:	f7fb ffb6 	bl	8005508 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800959c:	4b19      	ldr	r3, [pc, #100]	; (8009604 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800959e:	4a16      	ldr	r2, [pc, #88]	; (80095f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80095a0:	4917      	ldr	r1, [pc, #92]	; (8009600 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80095a2:	4819      	ldr	r0, [pc, #100]	; (8009608 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80095a4:	f7fb fad0 	bl	8004b48 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 80095a8:	4b13      	ldr	r3, [pc, #76]	; (80095f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	4b13      	ldr	r3, [pc, #76]	; (80095fc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	4b15      	ldr	r3, [pc, #84]	; (8009608 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80095b2:	9302      	str	r3, [sp, #8]
 80095b4:	4b12      	ldr	r3, [pc, #72]	; (8009600 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	4b0c      	ldr	r3, [pc, #48]	; (80095ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80095be:	4a0a      	ldr	r2, [pc, #40]	; (80095e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80095c0:	490c      	ldr	r1, [pc, #48]	; (80095f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80095c2:	4812      	ldr	r0, [pc, #72]	; (800960c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80095c4:	f7f8 ff28 	bl	8002418 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 80095c8:	4a0a      	ldr	r2, [pc, #40]	; (80095f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80095ca:	490c      	ldr	r1, [pc, #48]	; (80095fc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80095cc:	4810      	ldr	r0, [pc, #64]	; (8009610 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80095ce:	f7fb fefb 	bl	80053c8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80095d2:	4810      	ldr	r0, [pc, #64]	; (8009614 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80095d4:	f7fb fc3a 	bl	8004e4c <_ZN13PathFollowingC1Ev>
ESC esc;
 80095d8:	480f      	ldr	r0, [pc, #60]	; (8009618 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80095da:	f7f7 fdbb 	bl	8001154 <_ZN3ESCC1Ev>
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	200002f4 	.word	0x200002f4
 80095ec:	200005ec 	.word	0x200005ec
 80095f0:	200005f4 	.word	0x200005f4
 80095f4:	200005fc 	.word	0x200005fc
 80095f8:	20000610 	.word	0x20000610
 80095fc:	20000624 	.word	0x20000624
 8009600:	2001bbac 	.word	0x2001bbac
 8009604:	2001bbcc 	.word	0x2001bbcc
 8009608:	2001bc08 	.word	0x2001bc08
 800960c:	2001bc48 	.word	0x2001bc48
 8009610:	20029998 	.word	0x20029998
 8009614:	20029ba8 	.word	0x20029ba8
 8009618:	200412d0 	.word	0x200412d0

0800961c <_GLOBAL__sub_I_line_sensor>:
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0
 8009620:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009624:	2001      	movs	r0, #1
 8009626:	f7ff ff91 	bl	800954c <_Z41__static_initialization_and_destruction_0ii>
 800962a:	bd80      	pop	{r7, pc}

0800962c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800962c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009632:	e003      	b.n	800963c <LoopCopyDataInit>

08009634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800963a:	3104      	adds	r1, #4

0800963c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800963c:	480b      	ldr	r0, [pc, #44]	; (800966c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009644:	d3f6      	bcc.n	8009634 <CopyDataInit>
  ldr  r2, =_sbss
 8009646:	4a0b      	ldr	r2, [pc, #44]	; (8009674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009648:	e002      	b.n	8009650 <LoopFillZerobss>

0800964a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800964a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800964c:	f842 3b04 	str.w	r3, [r2], #4

08009650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009650:	4b09      	ldr	r3, [pc, #36]	; (8009678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009654:	d3f9      	bcc.n	800964a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009656:	f7fd fee5 	bl	8007424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800965a:	f00b ffd5 	bl	8015608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800965e:	f7fc fa1f 	bl	8005aa0 <main>
  bx  lr    
 8009662:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009664:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009668:	0801a608 	.word	0x0801a608
  ldr  r0, =_sdata
 800966c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009670:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009674:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009678:	20045d38 	.word	0x20045d38

0800967c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800967c:	e7fe      	b.n	800967c <ADC_IRQHandler>
	...

08009680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009684:	4b0e      	ldr	r3, [pc, #56]	; (80096c0 <HAL_Init+0x40>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a0d      	ldr	r2, [pc, #52]	; (80096c0 <HAL_Init+0x40>)
 800968a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800968e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009690:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <HAL_Init+0x40>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <HAL_Init+0x40>)
 8009696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800969a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800969c:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <HAL_Init+0x40>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a07      	ldr	r2, [pc, #28]	; (80096c0 <HAL_Init+0x40>)
 80096a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80096a8:	2003      	movs	r0, #3
 80096aa:	f000 fd51 	bl	800a150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80096ae:	2000      	movs	r0, #0
 80096b0:	f000 f808 	bl	80096c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80096b4:	f7fd f906 	bl	80068c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	40023c00 	.word	0x40023c00

080096c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80096cc:	4b12      	ldr	r3, [pc, #72]	; (8009718 <HAL_InitTick+0x54>)
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	4b12      	ldr	r3, [pc, #72]	; (800971c <HAL_InitTick+0x58>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	4619      	mov	r1, r3
 80096d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096da:	fbb3 f3f1 	udiv	r3, r3, r1
 80096de:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fd69 	bl	800a1ba <HAL_SYSTICK_Config>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e00e      	b.n	8009710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b0f      	cmp	r3, #15
 80096f6:	d80a      	bhi.n	800970e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096f8:	2200      	movs	r2, #0
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	f000 fd31 	bl	800a166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009704:	4a06      	ldr	r2, [pc, #24]	; (8009720 <HAL_InitTick+0x5c>)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	e000      	b.n	8009710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20000000 	.word	0x20000000
 800971c:	20000008 	.word	0x20000008
 8009720:	20000004 	.word	0x20000004

08009724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009728:	4b06      	ldr	r3, [pc, #24]	; (8009744 <HAL_IncTick+0x20>)
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	4b06      	ldr	r3, [pc, #24]	; (8009748 <HAL_IncTick+0x24>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4413      	add	r3, r2
 8009734:	4a04      	ldr	r2, [pc, #16]	; (8009748 <HAL_IncTick+0x24>)
 8009736:	6013      	str	r3, [r2, #0]
}
 8009738:	bf00      	nop
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20000008 	.word	0x20000008
 8009748:	20043cc0 	.word	0x20043cc0

0800974c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  return uwTick;
 8009750:	4b03      	ldr	r3, [pc, #12]	; (8009760 <HAL_GetTick+0x14>)
 8009752:	681b      	ldr	r3, [r3, #0]
}
 8009754:	4618      	mov	r0, r3
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	20043cc0 	.word	0x20043cc0

08009764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800976c:	f7ff ffee 	bl	800974c <HAL_GetTick>
 8009770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977c:	d005      	beq.n	800978a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800977e:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <HAL_Delay+0x40>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800978a:	bf00      	nop
 800978c:	f7ff ffde 	bl	800974c <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	429a      	cmp	r2, r3
 800979a:	d8f7      	bhi.n	800978c <HAL_Delay+0x28>
  {
  }
}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000008 	.word	0x20000008

080097a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e033      	b.n	8009826 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d109      	bne.n	80097da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7fd f8a4 	bl	8006914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097de:	f003 0310 	and.w	r3, r3, #16
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d118      	bne.n	8009818 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80097ee:	f023 0302 	bic.w	r3, r3, #2
 80097f2:	f043 0202 	orr.w	r2, r3, #2
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa5a 	bl	8009cb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980a:	f023 0303 	bic.w	r3, r3, #3
 800980e:	f043 0201 	orr.w	r2, r3, #1
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	641a      	str	r2, [r3, #64]	; 0x40
 8009816:	e001      	b.n	800981c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009824:	7bfb      	ldrb	r3, [r7, #15]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009846:	2b01      	cmp	r3, #1
 8009848:	d101      	bne.n	800984e <HAL_ADC_Start_DMA+0x1e>
 800984a:	2302      	movs	r3, #2
 800984c:	e0cc      	b.n	80099e8 <HAL_ADC_Start_DMA+0x1b8>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b01      	cmp	r3, #1
 8009862:	d018      	beq.n	8009896 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689a      	ldr	r2, [r3, #8]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009874:	4b5e      	ldr	r3, [pc, #376]	; (80099f0 <HAL_ADC_Start_DMA+0x1c0>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a5e      	ldr	r2, [pc, #376]	; (80099f4 <HAL_ADC_Start_DMA+0x1c4>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	0c9a      	lsrs	r2, r3, #18
 8009880:	4613      	mov	r3, r2
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	4413      	add	r3, r2
 8009886:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009888:	e002      	b.n	8009890 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	3b01      	subs	r3, #1
 800988e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1f9      	bne.n	800988a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	f040 80a0 	bne.w	80099e6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80098ae:	f023 0301 	bic.w	r3, r3, #1
 80098b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80098d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e4:	d106      	bne.n	80098f4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ea:	f023 0206 	bic.w	r2, r3, #6
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	645a      	str	r2, [r3, #68]	; 0x44
 80098f2:	e002      	b.n	80098fa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009902:	4b3d      	ldr	r3, [pc, #244]	; (80099f8 <HAL_ADC_Start_DMA+0x1c8>)
 8009904:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990a:	4a3c      	ldr	r2, [pc, #240]	; (80099fc <HAL_ADC_Start_DMA+0x1cc>)
 800990c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	4a3b      	ldr	r2, [pc, #236]	; (8009a00 <HAL_ADC_Start_DMA+0x1d0>)
 8009914:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991a:	4a3a      	ldr	r2, [pc, #232]	; (8009a04 <HAL_ADC_Start_DMA+0x1d4>)
 800991c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009926:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009936:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009946:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	334c      	adds	r3, #76	; 0x4c
 8009952:	4619      	mov	r1, r3
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f000 fcea 	bl	800a330 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f003 031f 	and.w	r3, r3, #31
 8009964:	2b00      	cmp	r3, #0
 8009966:	d12a      	bne.n	80099be <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a26      	ldr	r2, [pc, #152]	; (8009a08 <HAL_ADC_Start_DMA+0x1d8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d015      	beq.n	800999e <HAL_ADC_Start_DMA+0x16e>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a25      	ldr	r2, [pc, #148]	; (8009a0c <HAL_ADC_Start_DMA+0x1dc>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d105      	bne.n	8009988 <HAL_ADC_Start_DMA+0x158>
 800997c:	4b1e      	ldr	r3, [pc, #120]	; (80099f8 <HAL_ADC_Start_DMA+0x1c8>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f003 031f 	and.w	r3, r3, #31
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a20      	ldr	r2, [pc, #128]	; (8009a10 <HAL_ADC_Start_DMA+0x1e0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d129      	bne.n	80099e6 <HAL_ADC_Start_DMA+0x1b6>
 8009992:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <HAL_ADC_Start_DMA+0x1c8>)
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f003 031f 	and.w	r3, r3, #31
 800999a:	2b0f      	cmp	r3, #15
 800999c:	d823      	bhi.n	80099e6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11c      	bne.n	80099e6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689a      	ldr	r2, [r3, #8]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80099ba:	609a      	str	r2, [r3, #8]
 80099bc:	e013      	b.n	80099e6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a11      	ldr	r2, [pc, #68]	; (8009a08 <HAL_ADC_Start_DMA+0x1d8>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d10e      	bne.n	80099e6 <HAL_ADC_Start_DMA+0x1b6>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d107      	bne.n	80099e6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689a      	ldr	r2, [r3, #8]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80099e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20000000 	.word	0x20000000
 80099f4:	431bde83 	.word	0x431bde83
 80099f8:	40012300 	.word	0x40012300
 80099fc:	08009ead 	.word	0x08009ead
 8009a00:	08009f67 	.word	0x08009f67
 8009a04:	08009f83 	.word	0x08009f83
 8009a08:	40012000 	.word	0x40012000
 8009a0c:	40012100 	.word	0x40012100
 8009a10:	40012200 	.word	0x40012200

08009a14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_ADC_ConfigChannel+0x1c>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e113      	b.n	8009c94 <HAL_ADC_ConfigChannel+0x244>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b09      	cmp	r3, #9
 8009a7a:	d925      	bls.n	8009ac8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68d9      	ldr	r1, [r3, #12]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	4413      	add	r3, r2
 8009a90:	3b1e      	subs	r3, #30
 8009a92:	2207      	movs	r2, #7
 8009a94:	fa02 f303 	lsl.w	r3, r2, r3
 8009a98:	43da      	mvns	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	400a      	ands	r2, r1
 8009aa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68d9      	ldr	r1, [r3, #12]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	4403      	add	r3, r0
 8009aba:	3b1e      	subs	r3, #30
 8009abc:	409a      	lsls	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	60da      	str	r2, [r3, #12]
 8009ac6:	e022      	b.n	8009b0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6919      	ldr	r1, [r3, #16]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	2207      	movs	r2, #7
 8009ade:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae2:	43da      	mvns	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	400a      	ands	r2, r1
 8009aea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6919      	ldr	r1, [r3, #16]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4618      	mov	r0, r3
 8009afe:	4603      	mov	r3, r0
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	4403      	add	r3, r0
 8009b04:	409a      	lsls	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2b06      	cmp	r3, #6
 8009b14:	d824      	bhi.n	8009b60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	3b05      	subs	r3, #5
 8009b28:	221f      	movs	r2, #31
 8009b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2e:	43da      	mvns	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	400a      	ands	r2, r1
 8009b36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	4618      	mov	r0, r3
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	3b05      	subs	r3, #5
 8009b52:	fa00 f203 	lsl.w	r2, r0, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8009b5e:	e04c      	b.n	8009bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2b0c      	cmp	r3, #12
 8009b66:	d824      	bhi.n	8009bb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	3b23      	subs	r3, #35	; 0x23
 8009b7a:	221f      	movs	r2, #31
 8009b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b80:	43da      	mvns	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	400a      	ands	r2, r1
 8009b88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4618      	mov	r0, r3
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	3b23      	subs	r3, #35	; 0x23
 8009ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
 8009bb0:	e023      	b.n	8009bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	3b41      	subs	r3, #65	; 0x41
 8009bc4:	221f      	movs	r2, #31
 8009bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bca:	43da      	mvns	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	400a      	ands	r2, r1
 8009bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	4618      	mov	r0, r3
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	3b41      	subs	r3, #65	; 0x41
 8009bee:	fa00 f203 	lsl.w	r2, r0, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009bfa:	4b29      	ldr	r3, [pc, #164]	; (8009ca0 <HAL_ADC_ConfigChannel+0x250>)
 8009bfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a28      	ldr	r2, [pc, #160]	; (8009ca4 <HAL_ADC_ConfigChannel+0x254>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d10f      	bne.n	8009c28 <HAL_ADC_ConfigChannel+0x1d8>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b12      	cmp	r3, #18
 8009c0e:	d10b      	bne.n	8009c28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ca4 <HAL_ADC_ConfigChannel+0x254>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d12b      	bne.n	8009c8a <HAL_ADC_ConfigChannel+0x23a>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a1c      	ldr	r2, [pc, #112]	; (8009ca8 <HAL_ADC_ConfigChannel+0x258>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d003      	beq.n	8009c44 <HAL_ADC_ConfigChannel+0x1f4>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b11      	cmp	r3, #17
 8009c42:	d122      	bne.n	8009c8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a11      	ldr	r2, [pc, #68]	; (8009ca8 <HAL_ADC_ConfigChannel+0x258>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d111      	bne.n	8009c8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009c66:	4b11      	ldr	r3, [pc, #68]	; (8009cac <HAL_ADC_ConfigChannel+0x25c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a11      	ldr	r2, [pc, #68]	; (8009cb0 <HAL_ADC_ConfigChannel+0x260>)
 8009c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c70:	0c9a      	lsrs	r2, r3, #18
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009c7c:	e002      	b.n	8009c84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	3b01      	subs	r3, #1
 8009c82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1f9      	bne.n	8009c7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	40012300 	.word	0x40012300
 8009ca4:	40012000 	.word	0x40012000
 8009ca8:	10000012 	.word	0x10000012
 8009cac:	20000000 	.word	0x20000000
 8009cb0:	431bde83 	.word	0x431bde83

08009cb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009cbc:	4b79      	ldr	r3, [pc, #484]	; (8009ea4 <ADC_Init+0x1f0>)
 8009cbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6859      	ldr	r1, [r3, #4]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	021a      	lsls	r2, r3, #8
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009d0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6859      	ldr	r1, [r3, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	430a      	orrs	r2, r1
 8009d1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689a      	ldr	r2, [r3, #8]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6899      	ldr	r1, [r3, #8]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	4a58      	ldr	r2, [pc, #352]	; (8009ea8 <ADC_Init+0x1f4>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d022      	beq.n	8009d92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689a      	ldr	r2, [r3, #8]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6899      	ldr	r1, [r3, #8]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6899      	ldr	r1, [r3, #8]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	609a      	str	r2, [r3, #8]
 8009d90:	e00f      	b.n	8009db2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009da0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009db0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689a      	ldr	r2, [r3, #8]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0202 	bic.w	r2, r2, #2
 8009dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6899      	ldr	r1, [r3, #8]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7e1b      	ldrb	r3, [r3, #24]
 8009dcc:	005a      	lsls	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01b      	beq.n	8009e18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009dfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6859      	ldr	r1, [r3, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	035a      	lsls	r2, r3, #13
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]
 8009e16:	e007      	b.n	8009e28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	051a      	lsls	r2, r3, #20
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6899      	ldr	r1, [r3, #8]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e6a:	025a      	lsls	r2, r3, #9
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6899      	ldr	r1, [r3, #8]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	029a      	lsls	r2, r3, #10
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	430a      	orrs	r2, r1
 8009e96:	609a      	str	r2, [r3, #8]
}
 8009e98:	bf00      	nop
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	40012300 	.word	0x40012300
 8009ea8:	0f000001 	.word	0x0f000001

08009eac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d13c      	bne.n	8009f40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d12b      	bne.n	8009f38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d127      	bne.n	8009f38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d006      	beq.n	8009f04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d119      	bne.n	8009f38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f022 0220 	bic.w	r2, r2, #32
 8009f12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d105      	bne.n	8009f38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	f043 0201 	orr.w	r2, r3, #1
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff fd6b 	bl	8009a14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009f3e:	e00e      	b.n	8009f5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f44:	f003 0310 	and.w	r3, r3, #16
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fd75 	bl	8009a3c <HAL_ADC_ErrorCallback>
}
 8009f52:	e004      	b.n	8009f5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	4798      	blx	r3
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f7ff fd57 	bl	8009a28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2240      	movs	r2, #64	; 0x40
 8009f94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f9a:	f043 0204 	orr.w	r2, r3, #4
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f7ff fd4a 	bl	8009a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009fa8:	bf00      	nop
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f003 0307 	and.w	r3, r3, #7
 8009fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009fc0:	4b0c      	ldr	r3, [pc, #48]	; (8009ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009fcc:	4013      	ands	r3, r2
 8009fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009fe2:	4a04      	ldr	r2, [pc, #16]	; (8009ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	60d3      	str	r3, [r2, #12]
}
 8009fe8:	bf00      	nop
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	e000ed00 	.word	0xe000ed00

08009ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009ffc:	4b04      	ldr	r3, [pc, #16]	; (800a010 <__NVIC_GetPriorityGrouping+0x18>)
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	0a1b      	lsrs	r3, r3, #8
 800a002:	f003 0307 	and.w	r3, r3, #7
}
 800a006:	4618      	mov	r0, r3
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	e000ed00 	.word	0xe000ed00

0800a014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a01e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a022:	2b00      	cmp	r3, #0
 800a024:	db0b      	blt.n	800a03e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	f003 021f 	and.w	r2, r3, #31
 800a02c:	4907      	ldr	r1, [pc, #28]	; (800a04c <__NVIC_EnableIRQ+0x38>)
 800a02e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a032:	095b      	lsrs	r3, r3, #5
 800a034:	2001      	movs	r0, #1
 800a036:	fa00 f202 	lsl.w	r2, r0, r2
 800a03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a03e:	bf00      	nop
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	e000e100 	.word	0xe000e100

0800a050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	6039      	str	r1, [r7, #0]
 800a05a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a05c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a060:	2b00      	cmp	r3, #0
 800a062:	db0a      	blt.n	800a07a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	b2da      	uxtb	r2, r3
 800a068:	490c      	ldr	r1, [pc, #48]	; (800a09c <__NVIC_SetPriority+0x4c>)
 800a06a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a06e:	0112      	lsls	r2, r2, #4
 800a070:	b2d2      	uxtb	r2, r2
 800a072:	440b      	add	r3, r1
 800a074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a078:	e00a      	b.n	800a090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	4908      	ldr	r1, [pc, #32]	; (800a0a0 <__NVIC_SetPriority+0x50>)
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	f003 030f 	and.w	r3, r3, #15
 800a086:	3b04      	subs	r3, #4
 800a088:	0112      	lsls	r2, r2, #4
 800a08a:	b2d2      	uxtb	r2, r2
 800a08c:	440b      	add	r3, r1
 800a08e:	761a      	strb	r2, [r3, #24]
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	e000e100 	.word	0xe000e100
 800a0a0:	e000ed00 	.word	0xe000ed00

0800a0a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b089      	sub	sp, #36	; 0x24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f003 0307 	and.w	r3, r3, #7
 800a0b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	f1c3 0307 	rsb	r3, r3, #7
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	bf28      	it	cs
 800a0c2:	2304      	movcs	r3, #4
 800a0c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	2b06      	cmp	r3, #6
 800a0cc:	d902      	bls.n	800a0d4 <NVIC_EncodePriority+0x30>
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	3b03      	subs	r3, #3
 800a0d2:	e000      	b.n	800a0d6 <NVIC_EncodePriority+0x32>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e2:	43da      	mvns	r2, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	401a      	ands	r2, r3
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0ec:	f04f 31ff 	mov.w	r1, #4294967295
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f6:	43d9      	mvns	r1, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0fc:	4313      	orrs	r3, r2
         );
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3724      	adds	r7, #36	; 0x24
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3b01      	subs	r3, #1
 800a118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a11c:	d301      	bcc.n	800a122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a11e:	2301      	movs	r3, #1
 800a120:	e00f      	b.n	800a142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a122:	4a0a      	ldr	r2, [pc, #40]	; (800a14c <SysTick_Config+0x40>)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3b01      	subs	r3, #1
 800a128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a12a:	210f      	movs	r1, #15
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295
 800a130:	f7ff ff8e 	bl	800a050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <SysTick_Config+0x40>)
 800a136:	2200      	movs	r2, #0
 800a138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a13a:	4b04      	ldr	r3, [pc, #16]	; (800a14c <SysTick_Config+0x40>)
 800a13c:	2207      	movs	r2, #7
 800a13e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	e000e010 	.word	0xe000e010

0800a150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff ff29 	bl	8009fb0 <__NVIC_SetPriorityGrouping>
}
 800a15e:	bf00      	nop
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a166:	b580      	push	{r7, lr}
 800a168:	b086      	sub	sp, #24
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	4603      	mov	r3, r0
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	607a      	str	r2, [r7, #4]
 800a172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a174:	2300      	movs	r3, #0
 800a176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a178:	f7ff ff3e 	bl	8009ff8 <__NVIC_GetPriorityGrouping>
 800a17c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	68b9      	ldr	r1, [r7, #8]
 800a182:	6978      	ldr	r0, [r7, #20]
 800a184:	f7ff ff8e 	bl	800a0a4 <NVIC_EncodePriority>
 800a188:	4602      	mov	r2, r0
 800a18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a18e:	4611      	mov	r1, r2
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff ff5d 	bl	800a050 <__NVIC_SetPriority>
}
 800a196:	bf00      	nop
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a1a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7ff ff31 	bl	800a014 <__NVIC_EnableIRQ>
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff ffa2 	bl	800a10c <SysTick_Config>
 800a1c8:	4603      	mov	r3, r0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a1e0:	f7ff fab4 	bl	800974c <HAL_GetTick>
 800a1e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e099      	b.n	800a324 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0201 	bic.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a210:	e00f      	b.n	800a232 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a212:	f7ff fa9b 	bl	800974c <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	2b05      	cmp	r3, #5
 800a21e:	d908      	bls.n	800a232 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2220      	movs	r2, #32
 800a224:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2203      	movs	r2, #3
 800a22a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e078      	b.n	800a324 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e8      	bne.n	800a212 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	4b38      	ldr	r3, [pc, #224]	; (800a32c <HAL_DMA_Init+0x158>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a25e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a26a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	4313      	orrs	r3, r2
 800a282:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	2b04      	cmp	r3, #4
 800a28a:	d107      	bne.n	800a29c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a294:	4313      	orrs	r3, r2
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	f023 0307 	bic.w	r3, r3, #7
 800a2b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	d117      	bne.n	800a2f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00e      	beq.n	800a2f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fa9d 	bl	800a818 <DMA_CheckFifoParam>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d008      	beq.n	800a2f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2240      	movs	r2, #64	; 0x40
 800a2e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e016      	b.n	800a324 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa54 	bl	800a7ac <DMA_CalcBaseAndBitshift>
 800a304:	4603      	mov	r3, r0
 800a306:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a30c:	223f      	movs	r2, #63	; 0x3f
 800a30e:	409a      	lsls	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	f010803f 	.word	0xf010803f

0800a330 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a346:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d101      	bne.n	800a356 <HAL_DMA_Start_IT+0x26>
 800a352:	2302      	movs	r3, #2
 800a354:	e040      	b.n	800a3d8 <HAL_DMA_Start_IT+0xa8>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b01      	cmp	r3, #1
 800a368:	d12f      	bne.n	800a3ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2202      	movs	r2, #2
 800a36e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	68b9      	ldr	r1, [r7, #8]
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 f9e6 	bl	800a750 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a388:	223f      	movs	r2, #63	; 0x3f
 800a38a:	409a      	lsls	r2, r3
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f042 0216 	orr.w	r2, r2, #22
 800a39e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d007      	beq.n	800a3b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f042 0208 	orr.w	r2, r2, #8
 800a3b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0201 	orr.w	r2, r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	e005      	b.n	800a3d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d004      	beq.n	800a3fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2280      	movs	r2, #128	; 0x80
 800a3f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e00c      	b.n	800a418 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2205      	movs	r2, #5
 800a402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0201 	bic.w	r2, r2, #1
 800a414:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a42c:	2300      	movs	r3, #0
 800a42e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a430:	4b92      	ldr	r3, [pc, #584]	; (800a67c <HAL_DMA_IRQHandler+0x258>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a92      	ldr	r2, [pc, #584]	; (800a680 <HAL_DMA_IRQHandler+0x25c>)
 800a436:	fba2 2303 	umull	r2, r3, r2, r3
 800a43a:	0a9b      	lsrs	r3, r3, #10
 800a43c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a44e:	2208      	movs	r2, #8
 800a450:	409a      	lsls	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4013      	ands	r3, r2
 800a456:	2b00      	cmp	r3, #0
 800a458:	d01a      	beq.n	800a490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	2b00      	cmp	r3, #0
 800a466:	d013      	beq.n	800a490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f022 0204 	bic.w	r2, r2, #4
 800a476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a47c:	2208      	movs	r2, #8
 800a47e:	409a      	lsls	r2, r3
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a488:	f043 0201 	orr.w	r2, r3, #1
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a494:	2201      	movs	r2, #1
 800a496:	409a      	lsls	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	4013      	ands	r3, r2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d012      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00b      	beq.n	800a4c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	409a      	lsls	r2, r3
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4be:	f043 0202 	orr.w	r2, r3, #2
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	409a      	lsls	r2, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d012      	beq.n	800a4fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00b      	beq.n	800a4fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	409a      	lsls	r2, r3
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f4:	f043 0204 	orr.w	r2, r3, #4
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a500:	2210      	movs	r2, #16
 800a502:	409a      	lsls	r2, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4013      	ands	r3, r2
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d043      	beq.n	800a594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0308 	and.w	r3, r3, #8
 800a516:	2b00      	cmp	r3, #0
 800a518:	d03c      	beq.n	800a594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a51e:	2210      	movs	r2, #16
 800a520:	409a      	lsls	r2, r3
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d018      	beq.n	800a566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d108      	bne.n	800a554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a546:	2b00      	cmp	r3, #0
 800a548:	d024      	beq.n	800a594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	4798      	blx	r3
 800a552:	e01f      	b.n	800a594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d01b      	beq.n	800a594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	4798      	blx	r3
 800a564:	e016      	b.n	800a594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a570:	2b00      	cmp	r3, #0
 800a572:	d107      	bne.n	800a584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 0208 	bic.w	r2, r2, #8
 800a582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a598:	2220      	movs	r2, #32
 800a59a:	409a      	lsls	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 808e 	beq.w	800a6c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 0310 	and.w	r3, r3, #16
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 8086 	beq.w	800a6c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	409a      	lsls	r2, r3
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b05      	cmp	r3, #5
 800a5cc:	d136      	bne.n	800a63c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0216 	bic.w	r2, r2, #22
 800a5dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	695a      	ldr	r2, [r3, #20]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d103      	bne.n	800a5fe <HAL_DMA_IRQHandler+0x1da>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d007      	beq.n	800a60e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 0208 	bic.w	r2, r2, #8
 800a60c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a612:	223f      	movs	r2, #63	; 0x3f
 800a614:	409a      	lsls	r2, r3
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d07d      	beq.n	800a72e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
        }
        return;
 800a63a:	e078      	b.n	800a72e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d01c      	beq.n	800a684 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d108      	bne.n	800a66a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d030      	beq.n	800a6c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	4798      	blx	r3
 800a668:	e02b      	b.n	800a6c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d027      	beq.n	800a6c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	4798      	blx	r3
 800a67a:	e022      	b.n	800a6c2 <HAL_DMA_IRQHandler+0x29e>
 800a67c:	20000000 	.word	0x20000000
 800a680:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10f      	bne.n	800a6b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f022 0210 	bic.w	r2, r2, #16
 800a6a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d032      	beq.n	800a730 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d022      	beq.n	800a71c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2205      	movs	r2, #5
 800a6da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	60bb      	str	r3, [r7, #8]
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d307      	bcc.n	800a70a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1f2      	bne.n	800a6ee <HAL_DMA_IRQHandler+0x2ca>
 800a708:	e000      	b.n	800a70c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a70a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d005      	beq.n	800a730 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
 800a72c:	e000      	b.n	800a730 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a72e:	bf00      	nop
    }
  }
}
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop

0800a738 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a76c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	2b40      	cmp	r3, #64	; 0x40
 800a77c:	d108      	bne.n	800a790 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a78e:	e007      	b.n	800a7a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	60da      	str	r2, [r3, #12]
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	3b10      	subs	r3, #16
 800a7bc:	4a14      	ldr	r2, [pc, #80]	; (800a810 <DMA_CalcBaseAndBitshift+0x64>)
 800a7be:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c2:	091b      	lsrs	r3, r3, #4
 800a7c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a7c6:	4a13      	ldr	r2, [pc, #76]	; (800a814 <DMA_CalcBaseAndBitshift+0x68>)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d909      	bls.n	800a7ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a7e2:	f023 0303 	bic.w	r3, r3, #3
 800a7e6:	1d1a      	adds	r2, r3, #4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	659a      	str	r2, [r3, #88]	; 0x58
 800a7ec:	e007      	b.n	800a7fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a7f6:	f023 0303 	bic.w	r3, r3, #3
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	aaaaaaab 	.word	0xaaaaaaab
 800a814:	0801a048 	.word	0x0801a048

0800a818 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a828:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d11f      	bne.n	800a872 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b03      	cmp	r3, #3
 800a836:	d855      	bhi.n	800a8e4 <DMA_CheckFifoParam+0xcc>
 800a838:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <DMA_CheckFifoParam+0x28>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a851 	.word	0x0800a851
 800a844:	0800a863 	.word	0x0800a863
 800a848:	0800a851 	.word	0x0800a851
 800a84c:	0800a8e5 	.word	0x0800a8e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d045      	beq.n	800a8e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a860:	e042      	b.n	800a8e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a86a:	d13f      	bne.n	800a8ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a870:	e03c      	b.n	800a8ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a87a:	d121      	bne.n	800a8c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d836      	bhi.n	800a8f0 <DMA_CheckFifoParam+0xd8>
 800a882:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <DMA_CheckFifoParam+0x70>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a89f 	.word	0x0800a89f
 800a890:	0800a899 	.word	0x0800a899
 800a894:	0800a8b1 	.word	0x0800a8b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	73fb      	strb	r3, [r7, #15]
      break;
 800a89c:	e02f      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d024      	beq.n	800a8f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8ae:	e021      	b.n	800a8f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a8b8:	d11e      	bne.n	800a8f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a8be:	e01b      	b.n	800a8f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d902      	bls.n	800a8cc <DMA_CheckFifoParam+0xb4>
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d003      	beq.n	800a8d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a8ca:	e018      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d0:	e015      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00e      	beq.n	800a8fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e2:	e00b      	b.n	800a8fc <DMA_CheckFifoParam+0xe4>
      break;
 800a8e4:	bf00      	nop
 800a8e6:	e00a      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
      break;
 800a8e8:	bf00      	nop
 800a8ea:	e008      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
      break;
 800a8ec:	bf00      	nop
 800a8ee:	e006      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
      break;
 800a8f0:	bf00      	nop
 800a8f2:	e004      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
      break;
 800a8f4:	bf00      	nop
 800a8f6:	e002      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
      break;   
 800a8f8:	bf00      	nop
 800a8fa:	e000      	b.n	800a8fe <DMA_CheckFifoParam+0xe6>
      break;
 800a8fc:	bf00      	nop
    }
  } 
  
  return status; 
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b089      	sub	sp, #36	; 0x24
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a91e:	2300      	movs	r3, #0
 800a920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a922:	2300      	movs	r3, #0
 800a924:	61fb      	str	r3, [r7, #28]
 800a926:	e177      	b.n	800ac18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a928:	2201      	movs	r2, #1
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	fa02 f303 	lsl.w	r3, r2, r3
 800a930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	4013      	ands	r3, r2
 800a93a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	429a      	cmp	r2, r3
 800a942:	f040 8166 	bne.w	800ac12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d00b      	beq.n	800a966 <HAL_GPIO_Init+0x5a>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2b02      	cmp	r3, #2
 800a954:	d007      	beq.n	800a966 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a95a:	2b11      	cmp	r3, #17
 800a95c:	d003      	beq.n	800a966 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	2b12      	cmp	r3, #18
 800a964:	d130      	bne.n	800a9c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	2203      	movs	r2, #3
 800a972:	fa02 f303 	lsl.w	r3, r2, r3
 800a976:	43db      	mvns	r3, r3
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	4013      	ands	r3, r2
 800a97c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a99c:	2201      	movs	r2, #1
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a4:	43db      	mvns	r3, r3
 800a9a6:	69ba      	ldr	r2, [r7, #24]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	091b      	lsrs	r3, r3, #4
 800a9b2:	f003 0201 	and.w	r2, r3, #1
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	2203      	movs	r2, #3
 800a9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d8:	43db      	mvns	r3, r3
 800a9da:	69ba      	ldr	r2, [r7, #24]
 800a9dc:	4013      	ands	r3, r2
 800a9de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	69ba      	ldr	r2, [r7, #24]
 800a9f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d003      	beq.n	800aa08 <HAL_GPIO_Init+0xfc>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	2b12      	cmp	r3, #18
 800aa06:	d123      	bne.n	800aa50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	08da      	lsrs	r2, r3, #3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3208      	adds	r2, #8
 800aa10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	220f      	movs	r2, #15
 800aa20:	fa02 f303 	lsl.w	r3, r2, r3
 800aa24:	43db      	mvns	r3, r3
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	691a      	ldr	r2, [r3, #16]
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	f003 0307 	and.w	r3, r3, #7
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	08da      	lsrs	r2, r3, #3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3208      	adds	r2, #8
 800aa4a:	69b9      	ldr	r1, [r7, #24]
 800aa4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	2203      	movs	r2, #3
 800aa5c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa60:	43db      	mvns	r3, r3
 800aa62:	69ba      	ldr	r2, [r7, #24]
 800aa64:	4013      	ands	r3, r2
 800aa66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f003 0203 	and.w	r2, r3, #3
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	005b      	lsls	r3, r3, #1
 800aa74:	fa02 f303 	lsl.w	r3, r2, r3
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69ba      	ldr	r2, [r7, #24]
 800aa82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 80c0 	beq.w	800ac12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa92:	2300      	movs	r3, #0
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	4b65      	ldr	r3, [pc, #404]	; (800ac2c <HAL_GPIO_Init+0x320>)
 800aa98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9a:	4a64      	ldr	r2, [pc, #400]	; (800ac2c <HAL_GPIO_Init+0x320>)
 800aa9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aaa0:	6453      	str	r3, [r2, #68]	; 0x44
 800aaa2:	4b62      	ldr	r3, [pc, #392]	; (800ac2c <HAL_GPIO_Init+0x320>)
 800aaa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aaae:	4a60      	ldr	r2, [pc, #384]	; (800ac30 <HAL_GPIO_Init+0x324>)
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	089b      	lsrs	r3, r3, #2
 800aab4:	3302      	adds	r3, #2
 800aab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	220f      	movs	r2, #15
 800aac6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaca:	43db      	mvns	r3, r3
 800aacc:	69ba      	ldr	r2, [r7, #24]
 800aace:	4013      	ands	r3, r2
 800aad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a57      	ldr	r2, [pc, #348]	; (800ac34 <HAL_GPIO_Init+0x328>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d037      	beq.n	800ab4a <HAL_GPIO_Init+0x23e>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a56      	ldr	r2, [pc, #344]	; (800ac38 <HAL_GPIO_Init+0x32c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d031      	beq.n	800ab46 <HAL_GPIO_Init+0x23a>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a55      	ldr	r2, [pc, #340]	; (800ac3c <HAL_GPIO_Init+0x330>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d02b      	beq.n	800ab42 <HAL_GPIO_Init+0x236>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a54      	ldr	r2, [pc, #336]	; (800ac40 <HAL_GPIO_Init+0x334>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d025      	beq.n	800ab3e <HAL_GPIO_Init+0x232>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a53      	ldr	r2, [pc, #332]	; (800ac44 <HAL_GPIO_Init+0x338>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d01f      	beq.n	800ab3a <HAL_GPIO_Init+0x22e>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a52      	ldr	r2, [pc, #328]	; (800ac48 <HAL_GPIO_Init+0x33c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d019      	beq.n	800ab36 <HAL_GPIO_Init+0x22a>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a51      	ldr	r2, [pc, #324]	; (800ac4c <HAL_GPIO_Init+0x340>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d013      	beq.n	800ab32 <HAL_GPIO_Init+0x226>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a50      	ldr	r2, [pc, #320]	; (800ac50 <HAL_GPIO_Init+0x344>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d00d      	beq.n	800ab2e <HAL_GPIO_Init+0x222>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a4f      	ldr	r2, [pc, #316]	; (800ac54 <HAL_GPIO_Init+0x348>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d007      	beq.n	800ab2a <HAL_GPIO_Init+0x21e>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a4e      	ldr	r2, [pc, #312]	; (800ac58 <HAL_GPIO_Init+0x34c>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d101      	bne.n	800ab26 <HAL_GPIO_Init+0x21a>
 800ab22:	2309      	movs	r3, #9
 800ab24:	e012      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab26:	230a      	movs	r3, #10
 800ab28:	e010      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab2a:	2308      	movs	r3, #8
 800ab2c:	e00e      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab2e:	2307      	movs	r3, #7
 800ab30:	e00c      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab32:	2306      	movs	r3, #6
 800ab34:	e00a      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab36:	2305      	movs	r3, #5
 800ab38:	e008      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab3a:	2304      	movs	r3, #4
 800ab3c:	e006      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab3e:	2303      	movs	r3, #3
 800ab40:	e004      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab42:	2302      	movs	r3, #2
 800ab44:	e002      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab46:	2301      	movs	r3, #1
 800ab48:	e000      	b.n	800ab4c <HAL_GPIO_Init+0x240>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	f002 0203 	and.w	r2, r2, #3
 800ab52:	0092      	lsls	r2, r2, #2
 800ab54:	4093      	lsls	r3, r2
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab5c:	4934      	ldr	r1, [pc, #208]	; (800ac30 <HAL_GPIO_Init+0x324>)
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	089b      	lsrs	r3, r3, #2
 800ab62:	3302      	adds	r3, #2
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab6a:	4b3c      	ldr	r3, [pc, #240]	; (800ac5c <HAL_GPIO_Init+0x350>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	43db      	mvns	r3, r3
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	4013      	ands	r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ab8e:	4a33      	ldr	r2, [pc, #204]	; (800ac5c <HAL_GPIO_Init+0x350>)
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ab94:	4b31      	ldr	r3, [pc, #196]	; (800ac5c <HAL_GPIO_Init+0x350>)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	4013      	ands	r3, r2
 800aba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800abb8:	4a28      	ldr	r2, [pc, #160]	; (800ac5c <HAL_GPIO_Init+0x350>)
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800abbe:	4b27      	ldr	r3, [pc, #156]	; (800ac5c <HAL_GPIO_Init+0x350>)
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	43db      	mvns	r3, r3
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	4013      	ands	r3, r2
 800abcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d003      	beq.n	800abe2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800abda:	69ba      	ldr	r2, [r7, #24]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	4313      	orrs	r3, r2
 800abe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800abe2:	4a1e      	ldr	r2, [pc, #120]	; (800ac5c <HAL_GPIO_Init+0x350>)
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800abe8:	4b1c      	ldr	r3, [pc, #112]	; (800ac5c <HAL_GPIO_Init+0x350>)
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	43db      	mvns	r3, r3
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	4013      	ands	r3, r2
 800abf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d003      	beq.n	800ac0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ac0c:	4a13      	ldr	r2, [pc, #76]	; (800ac5c <HAL_GPIO_Init+0x350>)
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	3301      	adds	r3, #1
 800ac16:	61fb      	str	r3, [r7, #28]
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	2b0f      	cmp	r3, #15
 800ac1c:	f67f ae84 	bls.w	800a928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ac20:	bf00      	nop
 800ac22:	3724      	adds	r7, #36	; 0x24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	40023800 	.word	0x40023800
 800ac30:	40013800 	.word	0x40013800
 800ac34:	40020000 	.word	0x40020000
 800ac38:	40020400 	.word	0x40020400
 800ac3c:	40020800 	.word	0x40020800
 800ac40:	40020c00 	.word	0x40020c00
 800ac44:	40021000 	.word	0x40021000
 800ac48:	40021400 	.word	0x40021400
 800ac4c:	40021800 	.word	0x40021800
 800ac50:	40021c00 	.word	0x40021c00
 800ac54:	40022000 	.word	0x40022000
 800ac58:	40022400 	.word	0x40022400
 800ac5c:	40013c00 	.word	0x40013c00

0800ac60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691a      	ldr	r2, [r3, #16]
 800ac70:	887b      	ldrh	r3, [r7, #2]
 800ac72:	4013      	ands	r3, r2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	73fb      	strb	r3, [r7, #15]
 800ac7c:	e001      	b.n	800ac82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	807b      	strh	r3, [r7, #2]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aca0:	787b      	ldrb	r3, [r7, #1]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aca6:	887a      	ldrh	r2, [r7, #2]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800acac:	e003      	b.n	800acb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800acae:	887b      	ldrh	r3, [r7, #2]
 800acb0:	041a      	lsls	r2, r3, #16
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	619a      	str	r2, [r3, #24]
}
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
	...

0800acc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e11f      	b.n	800af16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7fb fec4 	bl	8006a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2224      	movs	r2, #36	; 0x24
 800acf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f022 0201 	bic.w	r2, r2, #1
 800ad06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ad28:	f001 f96e 	bl	800c008 <HAL_RCC_GetPCLK1Freq>
 800ad2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	4a7b      	ldr	r2, [pc, #492]	; (800af20 <HAL_I2C_Init+0x25c>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d807      	bhi.n	800ad48 <HAL_I2C_Init+0x84>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4a7a      	ldr	r2, [pc, #488]	; (800af24 <HAL_I2C_Init+0x260>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	bf94      	ite	ls
 800ad40:	2301      	movls	r3, #1
 800ad42:	2300      	movhi	r3, #0
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	e006      	b.n	800ad56 <HAL_I2C_Init+0x92>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4a77      	ldr	r2, [pc, #476]	; (800af28 <HAL_I2C_Init+0x264>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	bf94      	ite	ls
 800ad50:	2301      	movls	r3, #1
 800ad52:	2300      	movhi	r3, #0
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e0db      	b.n	800af16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	4a72      	ldr	r2, [pc, #456]	; (800af2c <HAL_I2C_Init+0x268>)
 800ad62:	fba2 2303 	umull	r2, r3, r2, r3
 800ad66:	0c9b      	lsrs	r3, r3, #18
 800ad68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	4a64      	ldr	r2, [pc, #400]	; (800af20 <HAL_I2C_Init+0x25c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d802      	bhi.n	800ad98 <HAL_I2C_Init+0xd4>
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	3301      	adds	r3, #1
 800ad96:	e009      	b.n	800adac <HAL_I2C_Init+0xe8>
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ad9e:	fb02 f303 	mul.w	r3, r2, r3
 800ada2:	4a63      	ldr	r2, [pc, #396]	; (800af30 <HAL_I2C_Init+0x26c>)
 800ada4:	fba2 2303 	umull	r2, r3, r2, r3
 800ada8:	099b      	lsrs	r3, r3, #6
 800adaa:	3301      	adds	r3, #1
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	430b      	orrs	r3, r1
 800adb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800adbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	4956      	ldr	r1, [pc, #344]	; (800af20 <HAL_I2C_Init+0x25c>)
 800adc8:	428b      	cmp	r3, r1
 800adca:	d80d      	bhi.n	800ade8 <HAL_I2C_Init+0x124>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	1e59      	subs	r1, r3, #1
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	fbb1 f3f3 	udiv	r3, r1, r3
 800adda:	3301      	adds	r3, #1
 800addc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ade0:	2b04      	cmp	r3, #4
 800ade2:	bf38      	it	cc
 800ade4:	2304      	movcc	r3, #4
 800ade6:	e04f      	b.n	800ae88 <HAL_I2C_Init+0x1c4>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d111      	bne.n	800ae14 <HAL_I2C_Init+0x150>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	1e58      	subs	r0, r3, #1
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6859      	ldr	r1, [r3, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	440b      	add	r3, r1
 800adfe:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae02:	3301      	adds	r3, #1
 800ae04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf0c      	ite	eq
 800ae0c:	2301      	moveq	r3, #1
 800ae0e:	2300      	movne	r3, #0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	e012      	b.n	800ae3a <HAL_I2C_Init+0x176>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	1e58      	subs	r0, r3, #1
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6859      	ldr	r1, [r3, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	0099      	lsls	r1, r3, #2
 800ae24:	440b      	add	r3, r1
 800ae26:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bf0c      	ite	eq
 800ae34:	2301      	moveq	r3, #1
 800ae36:	2300      	movne	r3, #0
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <HAL_I2C_Init+0x17e>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e022      	b.n	800ae88 <HAL_I2C_Init+0x1c4>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10e      	bne.n	800ae68 <HAL_I2C_Init+0x1a4>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	1e58      	subs	r0, r3, #1
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6859      	ldr	r1, [r3, #4]
 800ae52:	460b      	mov	r3, r1
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	440b      	add	r3, r1
 800ae58:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae66:	e00f      	b.n	800ae88 <HAL_I2C_Init+0x1c4>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	1e58      	subs	r0, r3, #1
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6859      	ldr	r1, [r3, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	0099      	lsls	r1, r3, #2
 800ae78:	440b      	add	r3, r1
 800ae7a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae7e:	3301      	adds	r3, #1
 800ae80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae88:	6879      	ldr	r1, [r7, #4]
 800ae8a:	6809      	ldr	r1, [r1, #0]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69da      	ldr	r2, [r3, #28]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	431a      	orrs	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800aeb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	6911      	ldr	r1, [r2, #16]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	68d2      	ldr	r2, [r2, #12]
 800aec2:	4311      	orrs	r1, r2
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	6812      	ldr	r2, [r2, #0]
 800aec8:	430b      	orrs	r3, r1
 800aeca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695a      	ldr	r2, [r3, #20]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f042 0201 	orr.w	r2, r2, #1
 800aef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2220      	movs	r2, #32
 800af02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	000186a0 	.word	0x000186a0
 800af24:	001e847f 	.word	0x001e847f
 800af28:	003d08ff 	.word	0x003d08ff
 800af2c:	431bde83 	.word	0x431bde83
 800af30:	10624dd3 	.word	0x10624dd3

0800af34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af02      	add	r7, sp, #8
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	607a      	str	r2, [r7, #4]
 800af3e:	461a      	mov	r2, r3
 800af40:	460b      	mov	r3, r1
 800af42:	817b      	strh	r3, [r7, #10]
 800af44:	4613      	mov	r3, r2
 800af46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800af48:	f7fe fc00 	bl	800974c <HAL_GetTick>
 800af4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b20      	cmp	r3, #32
 800af58:	f040 80e0 	bne.w	800b11c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	2319      	movs	r3, #25
 800af62:	2201      	movs	r2, #1
 800af64:	4970      	ldr	r1, [pc, #448]	; (800b128 <HAL_I2C_Master_Transmit+0x1f4>)
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 fc58 	bl	800b81c <I2C_WaitOnFlagUntilTimeout>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800af72:	2302      	movs	r3, #2
 800af74:	e0d3      	b.n	800b11e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d101      	bne.n	800af84 <HAL_I2C_Master_Transmit+0x50>
 800af80:	2302      	movs	r3, #2
 800af82:	e0cc      	b.n	800b11e <HAL_I2C_Master_Transmit+0x1ea>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	2b01      	cmp	r3, #1
 800af98:	d007      	beq.n	800afaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f042 0201 	orr.w	r2, r2, #1
 800afa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2221      	movs	r2, #33	; 0x21
 800afbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2210      	movs	r2, #16
 800afc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	893a      	ldrh	r2, [r7, #8]
 800afda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	4a50      	ldr	r2, [pc, #320]	; (800b12c <HAL_I2C_Master_Transmit+0x1f8>)
 800afea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800afec:	8979      	ldrh	r1, [r7, #10]
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	6a3a      	ldr	r2, [r7, #32]
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f000 fac2 	bl	800b57c <I2C_MasterRequestWrite>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e08d      	b.n	800b11e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b002:	2300      	movs	r3, #0
 800b004:	613b      	str	r3, [r7, #16]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	613b      	str	r3, [r7, #16]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	613b      	str	r3, [r7, #16]
 800b016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b018:	e066      	b.n	800b0e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	6a39      	ldr	r1, [r7, #32]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 fcd2 	bl	800b9c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00d      	beq.n	800b046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d107      	bne.n	800b042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e06b      	b.n	800b11e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b060:	b29b      	uxth	r3, r3
 800b062:	3b01      	subs	r3, #1
 800b064:	b29a      	uxth	r2, r3
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b06e:	3b01      	subs	r3, #1
 800b070:	b29a      	uxth	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	695b      	ldr	r3, [r3, #20]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b04      	cmp	r3, #4
 800b082:	d11b      	bne.n	800b0bc <HAL_I2C_Master_Transmit+0x188>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d017      	beq.n	800b0bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b090:	781a      	ldrb	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0bc:	697a      	ldr	r2, [r7, #20]
 800b0be:	6a39      	ldr	r1, [r7, #32]
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 fcc2 	bl	800ba4a <I2C_WaitOnBTFFlagUntilTimeout>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00d      	beq.n	800b0e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	d107      	bne.n	800b0e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e01a      	b.n	800b11e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d194      	bne.n	800b01a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2220      	movs	r2, #32
 800b104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	e000      	b.n	800b11e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b11c:	2302      	movs	r3, #2
  }
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	00100002 	.word	0x00100002
 800b12c:	ffff0000 	.word	0xffff0000

0800b130 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08c      	sub	sp, #48	; 0x30
 800b134:	af02      	add	r7, sp, #8
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	461a      	mov	r2, r3
 800b13c:	460b      	mov	r3, r1
 800b13e:	817b      	strh	r3, [r7, #10]
 800b140:	4613      	mov	r3, r2
 800b142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b144:	f7fe fb02 	bl	800974c <HAL_GetTick>
 800b148:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b20      	cmp	r3, #32
 800b154:	f040 820b 	bne.w	800b56e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	2319      	movs	r3, #25
 800b15e:	2201      	movs	r2, #1
 800b160:	497c      	ldr	r1, [pc, #496]	; (800b354 <HAL_I2C_Master_Receive+0x224>)
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 fb5a 	bl	800b81c <I2C_WaitOnFlagUntilTimeout>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b16e:	2302      	movs	r3, #2
 800b170:	e1fe      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d101      	bne.n	800b180 <HAL_I2C_Master_Receive+0x50>
 800b17c:	2302      	movs	r3, #2
 800b17e:	e1f7      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b01      	cmp	r3, #1
 800b194:	d007      	beq.n	800b1a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f042 0201 	orr.w	r2, r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2222      	movs	r2, #34	; 0x22
 800b1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2210      	movs	r2, #16
 800b1c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	893a      	ldrh	r2, [r7, #8]
 800b1d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	4a5c      	ldr	r2, [pc, #368]	; (800b358 <HAL_I2C_Master_Receive+0x228>)
 800b1e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b1e8:	8979      	ldrh	r1, [r7, #10]
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 fa46 	bl	800b680 <I2C_MasterRequestRead>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e1b8      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b202:	2b00      	cmp	r3, #0
 800b204:	d113      	bne.n	800b22e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b206:	2300      	movs	r3, #0
 800b208:	623b      	str	r3, [r7, #32]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	695b      	ldr	r3, [r3, #20]
 800b210:	623b      	str	r3, [r7, #32]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	623b      	str	r3, [r7, #32]
 800b21a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	e18c      	b.n	800b548 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b232:	2b01      	cmp	r3, #1
 800b234:	d11b      	bne.n	800b26e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b246:	2300      	movs	r3, #0
 800b248:	61fb      	str	r3, [r7, #28]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	61fb      	str	r3, [r7, #28]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	61fb      	str	r3, [r7, #28]
 800b25a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e16c      	b.n	800b548 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b272:	2b02      	cmp	r3, #2
 800b274:	d11b      	bne.n	800b2ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b284:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b296:	2300      	movs	r3, #0
 800b298:	61bb      	str	r3, [r7, #24]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	61bb      	str	r3, [r7, #24]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	61bb      	str	r3, [r7, #24]
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	e14c      	b.n	800b548 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2be:	2300      	movs	r3, #0
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	617b      	str	r3, [r7, #20]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b2d4:	e138      	b.n	800b548 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2da:	2b03      	cmp	r3, #3
 800b2dc:	f200 80f1 	bhi.w	800b4c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d123      	bne.n	800b330 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 fbed 	bl	800bacc <I2C_WaitOnRXNEFlagUntilTimeout>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e139      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	691a      	ldr	r2, [r3, #16]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	b2d2      	uxtb	r2, r2
 800b308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b318:	3b01      	subs	r3, #1
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b324:	b29b      	uxth	r3, r3
 800b326:	3b01      	subs	r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b32e:	e10b      	b.n	800b548 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b334:	2b02      	cmp	r3, #2
 800b336:	d14e      	bne.n	800b3d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	2200      	movs	r2, #0
 800b340:	4906      	ldr	r1, [pc, #24]	; (800b35c <HAL_I2C_Master_Receive+0x22c>)
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 fa6a 	bl	800b81c <I2C_WaitOnFlagUntilTimeout>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d008      	beq.n	800b360 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e10e      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
 800b352:	bf00      	nop
 800b354:	00100002 	.word	0x00100002
 800b358:	ffff0000 	.word	0xffff0000
 800b35c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b36e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	691a      	ldr	r2, [r3, #16]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37a:	b2d2      	uxtb	r2, r2
 800b37c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b38c:	3b01      	subs	r3, #1
 800b38e:	b29a      	uxth	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b398:	b29b      	uxth	r3, r3
 800b39a:	3b01      	subs	r3, #1
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	691a      	ldr	r2, [r3, #16]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	b2d2      	uxtb	r2, r2
 800b3ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3d4:	e0b8      	b.n	800b548 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	2200      	movs	r2, #0
 800b3de:	4966      	ldr	r1, [pc, #408]	; (800b578 <HAL_I2C_Master_Receive+0x448>)
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 fa1b 	bl	800b81c <I2C_WaitOnFlagUntilTimeout>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e0bf      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	691a      	ldr	r2, [r3, #16]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b41c:	3b01      	subs	r3, #1
 800b41e:	b29a      	uxth	r2, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b428:	b29b      	uxth	r3, r3
 800b42a:	3b01      	subs	r3, #1
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	2200      	movs	r2, #0
 800b43a:	494f      	ldr	r1, [pc, #316]	; (800b578 <HAL_I2C_Master_Receive+0x448>)
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f000 f9ed 	bl	800b81c <I2C_WaitOnFlagUntilTimeout>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e091      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b45a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	691a      	ldr	r2, [r3, #16]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	1c5a      	adds	r2, r3, #1
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b484:	b29b      	uxth	r3, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	b29a      	uxth	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	691a      	ldr	r2, [r3, #16]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	b2d2      	uxtb	r2, r2
 800b49a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	1c5a      	adds	r2, r3, #1
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4c0:	e042      	b.n	800b548 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 fb00 	bl	800bacc <I2C_WaitOnRXNEFlagUntilTimeout>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e04c      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	691a      	ldr	r2, [r3, #16]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	b2d2      	uxtb	r2, r2
 800b4e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	3b01      	subs	r3, #1
 800b502:	b29a      	uxth	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b04      	cmp	r3, #4
 800b514:	d118      	bne.n	800b548 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b520:	b2d2      	uxtb	r2, r2
 800b522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	1c5a      	adds	r2, r3, #1
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b532:	3b01      	subs	r3, #1
 800b534:	b29a      	uxth	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b53e:	b29b      	uxth	r3, r3
 800b540:	3b01      	subs	r3, #1
 800b542:	b29a      	uxth	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f47f aec2 	bne.w	800b2d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2220      	movs	r2, #32
 800b556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	e000      	b.n	800b570 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b56e:	2302      	movs	r3, #2
  }
}
 800b570:	4618      	mov	r0, r3
 800b572:	3728      	adds	r7, #40	; 0x28
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	00010004 	.word	0x00010004

0800b57c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b088      	sub	sp, #32
 800b580:	af02      	add	r7, sp, #8
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	607a      	str	r2, [r7, #4]
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	460b      	mov	r3, r1
 800b58a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b08      	cmp	r3, #8
 800b596:	d006      	beq.n	800b5a6 <I2C_MasterRequestWrite+0x2a>
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d003      	beq.n	800b5a6 <I2C_MasterRequestWrite+0x2a>
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b5a4:	d108      	bne.n	800b5b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	e00b      	b.n	800b5d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5bc:	2b12      	cmp	r3, #18
 800b5be:	d107      	bne.n	800b5d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 f91d 	bl	800b81c <I2C_WaitOnFlagUntilTimeout>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00d      	beq.n	800b604 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5f6:	d103      	bne.n	800b600 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e035      	b.n	800b670 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b60c:	d108      	bne.n	800b620 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b60e:	897b      	ldrh	r3, [r7, #10]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	461a      	mov	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b61c:	611a      	str	r2, [r3, #16]
 800b61e:	e01b      	b.n	800b658 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b620:	897b      	ldrh	r3, [r7, #10]
 800b622:	11db      	asrs	r3, r3, #7
 800b624:	b2db      	uxtb	r3, r3
 800b626:	f003 0306 	and.w	r3, r3, #6
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	f063 030f 	orn	r3, r3, #15
 800b630:	b2da      	uxtb	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	490e      	ldr	r1, [pc, #56]	; (800b678 <I2C_MasterRequestWrite+0xfc>)
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 f943 	bl	800b8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e010      	b.n	800b670 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b64e:	897b      	ldrh	r3, [r7, #10]
 800b650:	b2da      	uxtb	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	4907      	ldr	r1, [pc, #28]	; (800b67c <I2C_MasterRequestWrite+0x100>)
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 f933 	bl	800b8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e000      	b.n	800b670 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3718      	adds	r7, #24
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	00010008 	.word	0x00010008
 800b67c:	00010002 	.word	0x00010002

0800b680 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af02      	add	r7, sp, #8
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	607a      	str	r2, [r7, #4]
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	460b      	mov	r3, r1
 800b68e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b694:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	2b08      	cmp	r3, #8
 800b6aa:	d006      	beq.n	800b6ba <I2C_MasterRequestRead+0x3a>
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d003      	beq.n	800b6ba <I2C_MasterRequestRead+0x3a>
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b6b8:	d108      	bne.n	800b6cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	e00b      	b.n	800b6e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d0:	2b11      	cmp	r3, #17
 800b6d2:	d107      	bne.n	800b6e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 f893 	bl	800b81c <I2C_WaitOnFlagUntilTimeout>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00d      	beq.n	800b718 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70a:	d103      	bne.n	800b714 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b714:	2303      	movs	r3, #3
 800b716:	e079      	b.n	800b80c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b720:	d108      	bne.n	800b734 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b722:	897b      	ldrh	r3, [r7, #10]
 800b724:	b2db      	uxtb	r3, r3
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	611a      	str	r2, [r3, #16]
 800b732:	e05f      	b.n	800b7f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b734:	897b      	ldrh	r3, [r7, #10]
 800b736:	11db      	asrs	r3, r3, #7
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	f003 0306 	and.w	r3, r3, #6
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	f063 030f 	orn	r3, r3, #15
 800b744:	b2da      	uxtb	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	4930      	ldr	r1, [pc, #192]	; (800b814 <I2C_MasterRequestRead+0x194>)
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f000 f8b9 	bl	800b8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e054      	b.n	800b80c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b762:	897b      	ldrh	r3, [r7, #10]
 800b764:	b2da      	uxtb	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	4929      	ldr	r1, [pc, #164]	; (800b818 <I2C_MasterRequestRead+0x198>)
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f000 f8a9 	bl	800b8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e044      	b.n	800b80c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b782:	2300      	movs	r3, #0
 800b784:	613b      	str	r3, [r7, #16]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	695b      	ldr	r3, [r3, #20]
 800b78c:	613b      	str	r3, [r7, #16]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	613b      	str	r3, [r7, #16]
 800b796:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 f831 	bl	800b81c <I2C_WaitOnFlagUntilTimeout>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00d      	beq.n	800b7dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ce:	d103      	bne.n	800b7d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e017      	b.n	800b80c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b7dc:	897b      	ldrh	r3, [r7, #10]
 800b7de:	11db      	asrs	r3, r3, #7
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	f003 0306 	and.w	r3, r3, #6
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	f063 030e 	orn	r3, r3, #14
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	4907      	ldr	r1, [pc, #28]	; (800b818 <I2C_MasterRequestRead+0x198>)
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 f865 	bl	800b8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e000      	b.n	800b80c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	00010008 	.word	0x00010008
 800b818:	00010002 	.word	0x00010002

0800b81c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	603b      	str	r3, [r7, #0]
 800b828:	4613      	mov	r3, r2
 800b82a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b82c:	e025      	b.n	800b87a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b834:	d021      	beq.n	800b87a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b836:	f7fd ff89 	bl	800974c <HAL_GetTick>
 800b83a:	4602      	mov	r2, r0
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d302      	bcc.n	800b84c <I2C_WaitOnFlagUntilTimeout+0x30>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d116      	bne.n	800b87a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2220      	movs	r2, #32
 800b856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b866:	f043 0220 	orr.w	r2, r3, #32
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e023      	b.n	800b8c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	0c1b      	lsrs	r3, r3, #16
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b01      	cmp	r3, #1
 800b882:	d10d      	bne.n	800b8a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	43da      	mvns	r2, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	4013      	ands	r3, r2
 800b890:	b29b      	uxth	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	bf0c      	ite	eq
 800b896:	2301      	moveq	r3, #1
 800b898:	2300      	movne	r3, #0
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	461a      	mov	r2, r3
 800b89e:	e00c      	b.n	800b8ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	43da      	mvns	r2, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	bf0c      	ite	eq
 800b8b2:	2301      	moveq	r3, #1
 800b8b4:	2300      	movne	r3, #0
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d0b6      	beq.n	800b82e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	60f8      	str	r0, [r7, #12]
 800b8d2:	60b9      	str	r1, [r7, #8]
 800b8d4:	607a      	str	r2, [r7, #4]
 800b8d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b8d8:	e051      	b.n	800b97e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8e8:	d123      	bne.n	800b932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b902:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2220      	movs	r2, #32
 800b90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	f043 0204 	orr.w	r2, r3, #4
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e046      	b.n	800b9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b938:	d021      	beq.n	800b97e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b93a:	f7fd ff07 	bl	800974c <HAL_GetTick>
 800b93e:	4602      	mov	r2, r0
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	429a      	cmp	r2, r3
 800b948:	d302      	bcc.n	800b950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d116      	bne.n	800b97e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2220      	movs	r2, #32
 800b95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96a:	f043 0220 	orr.w	r2, r3, #32
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e020      	b.n	800b9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	0c1b      	lsrs	r3, r3, #16
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b01      	cmp	r3, #1
 800b986:	d10c      	bne.n	800b9a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	695b      	ldr	r3, [r3, #20]
 800b98e:	43da      	mvns	r2, r3
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	4013      	ands	r3, r2
 800b994:	b29b      	uxth	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	bf14      	ite	ne
 800b99a:	2301      	movne	r3, #1
 800b99c:	2300      	moveq	r3, #0
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	e00b      	b.n	800b9ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	43da      	mvns	r2, r3
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	bf14      	ite	ne
 800b9b4:	2301      	movne	r3, #1
 800b9b6:	2300      	moveq	r3, #0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d18d      	bne.n	800b8da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9d4:	e02d      	b.n	800ba32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f000 f8ce 	bl	800bb78 <I2C_IsAcknowledgeFailed>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d001      	beq.n	800b9e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e02d      	b.n	800ba42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ec:	d021      	beq.n	800ba32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ee:	f7fd fead 	bl	800974c <HAL_GetTick>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d302      	bcc.n	800ba04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d116      	bne.n	800ba32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2220      	movs	r2, #32
 800ba0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	f043 0220 	orr.w	r2, r3, #32
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e007      	b.n	800ba42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba3c:	2b80      	cmp	r3, #128	; 0x80
 800ba3e:	d1ca      	bne.n	800b9d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	60f8      	str	r0, [r7, #12]
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba56:	e02d      	b.n	800bab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f000 f88d 	bl	800bb78 <I2C_IsAcknowledgeFailed>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e02d      	b.n	800bac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6e:	d021      	beq.n	800bab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba70:	f7fd fe6c 	bl	800974c <HAL_GetTick>
 800ba74:	4602      	mov	r2, r0
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d302      	bcc.n	800ba86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d116      	bne.n	800bab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa0:	f043 0220 	orr.w	r2, r3, #32
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e007      	b.n	800bac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	f003 0304 	and.w	r3, r3, #4
 800babe:	2b04      	cmp	r3, #4
 800bac0:	d1ca      	bne.n	800ba58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bad8:	e042      	b.n	800bb60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	f003 0310 	and.w	r3, r3, #16
 800bae4:	2b10      	cmp	r3, #16
 800bae6:	d119      	bne.n	800bb1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f06f 0210 	mvn.w	r2, #16
 800baf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2220      	movs	r2, #32
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e029      	b.n	800bb70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb1c:	f7fd fe16 	bl	800974c <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d302      	bcc.n	800bb32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d116      	bne.n	800bb60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2220      	movs	r2, #32
 800bb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4c:	f043 0220 	orr.w	r2, r3, #32
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e007      	b.n	800bb70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6a:	2b40      	cmp	r3, #64	; 0x40
 800bb6c:	d1b5      	bne.n	800bada <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb8e:	d11b      	bne.n	800bbc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2220      	movs	r2, #32
 800bba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb4:	f043 0204 	orr.w	r2, r3, #4
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e000      	b.n	800bbca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	370c      	adds	r7, #12
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
	...

0800bbd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	603b      	str	r3, [r7, #0]
 800bbe6:	4b20      	ldr	r3, [pc, #128]	; (800bc68 <HAL_PWREx_EnableOverDrive+0x90>)
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	4a1f      	ldr	r2, [pc, #124]	; (800bc68 <HAL_PWREx_EnableOverDrive+0x90>)
 800bbec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbf0:	6413      	str	r3, [r2, #64]	; 0x40
 800bbf2:	4b1d      	ldr	r3, [pc, #116]	; (800bc68 <HAL_PWREx_EnableOverDrive+0x90>)
 800bbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bbfe:	4b1b      	ldr	r3, [pc, #108]	; (800bc6c <HAL_PWREx_EnableOverDrive+0x94>)
 800bc00:	2201      	movs	r2, #1
 800bc02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc04:	f7fd fda2 	bl	800974c <HAL_GetTick>
 800bc08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bc0a:	e009      	b.n	800bc20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bc0c:	f7fd fd9e 	bl	800974c <HAL_GetTick>
 800bc10:	4602      	mov	r2, r0
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc1a:	d901      	bls.n	800bc20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e01f      	b.n	800bc60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bc20:	4b13      	ldr	r3, [pc, #76]	; (800bc70 <HAL_PWREx_EnableOverDrive+0x98>)
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc2c:	d1ee      	bne.n	800bc0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bc2e:	4b11      	ldr	r3, [pc, #68]	; (800bc74 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc34:	f7fd fd8a 	bl	800974c <HAL_GetTick>
 800bc38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bc3a:	e009      	b.n	800bc50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bc3c:	f7fd fd86 	bl	800974c <HAL_GetTick>
 800bc40:	4602      	mov	r2, r0
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc4a:	d901      	bls.n	800bc50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	e007      	b.n	800bc60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bc50:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <HAL_PWREx_EnableOverDrive+0x98>)
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc5c:	d1ee      	bne.n	800bc3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	40023800 	.word	0x40023800
 800bc6c:	420e0040 	.word	0x420e0040
 800bc70:	40007000 	.word	0x40007000
 800bc74:	420e0044 	.word	0x420e0044

0800bc78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e0cc      	b.n	800be26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bc8c:	4b68      	ldr	r3, [pc, #416]	; (800be30 <HAL_RCC_ClockConfig+0x1b8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 030f 	and.w	r3, r3, #15
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d90c      	bls.n	800bcb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc9a:	4b65      	ldr	r3, [pc, #404]	; (800be30 <HAL_RCC_ClockConfig+0x1b8>)
 800bc9c:	683a      	ldr	r2, [r7, #0]
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bca2:	4b63      	ldr	r3, [pc, #396]	; (800be30 <HAL_RCC_ClockConfig+0x1b8>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 030f 	and.w	r3, r3, #15
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d001      	beq.n	800bcb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e0b8      	b.n	800be26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0302 	and.w	r3, r3, #2
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d020      	beq.n	800bd02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d005      	beq.n	800bcd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bccc:	4b59      	ldr	r3, [pc, #356]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	4a58      	ldr	r2, [pc, #352]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bcd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bcd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d005      	beq.n	800bcf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bce4:	4b53      	ldr	r3, [pc, #332]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	4a52      	ldr	r2, [pc, #328]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bcea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bcee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bcf0:	4b50      	ldr	r3, [pc, #320]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	494d      	ldr	r1, [pc, #308]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f003 0301 	and.w	r3, r3, #1
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d044      	beq.n	800bd98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d107      	bne.n	800bd26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd16:	4b47      	ldr	r3, [pc, #284]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d119      	bne.n	800bd56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e07f      	b.n	800be26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d003      	beq.n	800bd36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd32:	2b03      	cmp	r3, #3
 800bd34:	d107      	bne.n	800bd46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd36:	4b3f      	ldr	r3, [pc, #252]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d109      	bne.n	800bd56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e06f      	b.n	800be26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd46:	4b3b      	ldr	r3, [pc, #236]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 0302 	and.w	r3, r3, #2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e067      	b.n	800be26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bd56:	4b37      	ldr	r3, [pc, #220]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	f023 0203 	bic.w	r2, r3, #3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	4934      	ldr	r1, [pc, #208]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bd64:	4313      	orrs	r3, r2
 800bd66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bd68:	f7fd fcf0 	bl	800974c <HAL_GetTick>
 800bd6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd6e:	e00a      	b.n	800bd86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd70:	f7fd fcec 	bl	800974c <HAL_GetTick>
 800bd74:	4602      	mov	r2, r0
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d901      	bls.n	800bd86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bd82:	2303      	movs	r3, #3
 800bd84:	e04f      	b.n	800be26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd86:	4b2b      	ldr	r3, [pc, #172]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f003 020c 	and.w	r2, r3, #12
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d1eb      	bne.n	800bd70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bd98:	4b25      	ldr	r3, [pc, #148]	; (800be30 <HAL_RCC_ClockConfig+0x1b8>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d20c      	bcs.n	800bdc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bda6:	4b22      	ldr	r3, [pc, #136]	; (800be30 <HAL_RCC_ClockConfig+0x1b8>)
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdae:	4b20      	ldr	r3, [pc, #128]	; (800be30 <HAL_RCC_ClockConfig+0x1b8>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 030f 	and.w	r3, r3, #15
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d001      	beq.n	800bdc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e032      	b.n	800be26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 0304 	and.w	r3, r3, #4
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d008      	beq.n	800bdde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bdcc:	4b19      	ldr	r3, [pc, #100]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	4916      	ldr	r1, [pc, #88]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bdda:	4313      	orrs	r3, r2
 800bddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f003 0308 	and.w	r3, r3, #8
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d009      	beq.n	800bdfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bdea:	4b12      	ldr	r3, [pc, #72]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	00db      	lsls	r3, r3, #3
 800bdf8:	490e      	ldr	r1, [pc, #56]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bdfe:	f000 f821 	bl	800be44 <HAL_RCC_GetSysClockFreq>
 800be02:	4601      	mov	r1, r0
 800be04:	4b0b      	ldr	r3, [pc, #44]	; (800be34 <HAL_RCC_ClockConfig+0x1bc>)
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	091b      	lsrs	r3, r3, #4
 800be0a:	f003 030f 	and.w	r3, r3, #15
 800be0e:	4a0a      	ldr	r2, [pc, #40]	; (800be38 <HAL_RCC_ClockConfig+0x1c0>)
 800be10:	5cd3      	ldrb	r3, [r2, r3]
 800be12:	fa21 f303 	lsr.w	r3, r1, r3
 800be16:	4a09      	ldr	r2, [pc, #36]	; (800be3c <HAL_RCC_ClockConfig+0x1c4>)
 800be18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800be1a:	4b09      	ldr	r3, [pc, #36]	; (800be40 <HAL_RCC_ClockConfig+0x1c8>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd fc50 	bl	80096c4 <HAL_InitTick>

  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	40023c00 	.word	0x40023c00
 800be34:	40023800 	.word	0x40023800
 800be38:	0801a030 	.word	0x0801a030
 800be3c:	20000000 	.word	0x20000000
 800be40:	20000004 	.word	0x20000004

0800be44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	607b      	str	r3, [r7, #4]
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]
 800be52:	2300      	movs	r3, #0
 800be54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800be56:	2300      	movs	r3, #0
 800be58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be5a:	4b63      	ldr	r3, [pc, #396]	; (800bfe8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f003 030c 	and.w	r3, r3, #12
 800be62:	2b04      	cmp	r3, #4
 800be64:	d007      	beq.n	800be76 <HAL_RCC_GetSysClockFreq+0x32>
 800be66:	2b08      	cmp	r3, #8
 800be68:	d008      	beq.n	800be7c <HAL_RCC_GetSysClockFreq+0x38>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f040 80b4 	bne.w	800bfd8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800be70:	4b5e      	ldr	r3, [pc, #376]	; (800bfec <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be72:	60bb      	str	r3, [r7, #8]
       break;
 800be74:	e0b3      	b.n	800bfde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800be76:	4b5d      	ldr	r3, [pc, #372]	; (800bfec <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be78:	60bb      	str	r3, [r7, #8]
      break;
 800be7a:	e0b0      	b.n	800bfde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800be7c:	4b5a      	ldr	r3, [pc, #360]	; (800bfe8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800be86:	4b58      	ldr	r3, [pc, #352]	; (800bfe8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d04a      	beq.n	800bf28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be92:	4b55      	ldr	r3, [pc, #340]	; (800bfe8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	099b      	lsrs	r3, r3, #6
 800be98:	f04f 0400 	mov.w	r4, #0
 800be9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	ea03 0501 	and.w	r5, r3, r1
 800bea8:	ea04 0602 	and.w	r6, r4, r2
 800beac:	4629      	mov	r1, r5
 800beae:	4632      	mov	r2, r6
 800beb0:	f04f 0300 	mov.w	r3, #0
 800beb4:	f04f 0400 	mov.w	r4, #0
 800beb8:	0154      	lsls	r4, r2, #5
 800beba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bebe:	014b      	lsls	r3, r1, #5
 800bec0:	4619      	mov	r1, r3
 800bec2:	4622      	mov	r2, r4
 800bec4:	1b49      	subs	r1, r1, r5
 800bec6:	eb62 0206 	sbc.w	r2, r2, r6
 800beca:	f04f 0300 	mov.w	r3, #0
 800bece:	f04f 0400 	mov.w	r4, #0
 800bed2:	0194      	lsls	r4, r2, #6
 800bed4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bed8:	018b      	lsls	r3, r1, #6
 800beda:	1a5b      	subs	r3, r3, r1
 800bedc:	eb64 0402 	sbc.w	r4, r4, r2
 800bee0:	f04f 0100 	mov.w	r1, #0
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	00e2      	lsls	r2, r4, #3
 800beea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800beee:	00d9      	lsls	r1, r3, #3
 800bef0:	460b      	mov	r3, r1
 800bef2:	4614      	mov	r4, r2
 800bef4:	195b      	adds	r3, r3, r5
 800bef6:	eb44 0406 	adc.w	r4, r4, r6
 800befa:	f04f 0100 	mov.w	r1, #0
 800befe:	f04f 0200 	mov.w	r2, #0
 800bf02:	02a2      	lsls	r2, r4, #10
 800bf04:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bf08:	0299      	lsls	r1, r3, #10
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4614      	mov	r4, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	4621      	mov	r1, r4
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f04f 0400 	mov.w	r4, #0
 800bf18:	461a      	mov	r2, r3
 800bf1a:	4623      	mov	r3, r4
 800bf1c:	f7f4 fecc 	bl	8000cb8 <__aeabi_uldivmod>
 800bf20:	4603      	mov	r3, r0
 800bf22:	460c      	mov	r4, r1
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	e049      	b.n	800bfbc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf28:	4b2f      	ldr	r3, [pc, #188]	; (800bfe8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	099b      	lsrs	r3, r3, #6
 800bf2e:	f04f 0400 	mov.w	r4, #0
 800bf32:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bf36:	f04f 0200 	mov.w	r2, #0
 800bf3a:	ea03 0501 	and.w	r5, r3, r1
 800bf3e:	ea04 0602 	and.w	r6, r4, r2
 800bf42:	4629      	mov	r1, r5
 800bf44:	4632      	mov	r2, r6
 800bf46:	f04f 0300 	mov.w	r3, #0
 800bf4a:	f04f 0400 	mov.w	r4, #0
 800bf4e:	0154      	lsls	r4, r2, #5
 800bf50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf54:	014b      	lsls	r3, r1, #5
 800bf56:	4619      	mov	r1, r3
 800bf58:	4622      	mov	r2, r4
 800bf5a:	1b49      	subs	r1, r1, r5
 800bf5c:	eb62 0206 	sbc.w	r2, r2, r6
 800bf60:	f04f 0300 	mov.w	r3, #0
 800bf64:	f04f 0400 	mov.w	r4, #0
 800bf68:	0194      	lsls	r4, r2, #6
 800bf6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bf6e:	018b      	lsls	r3, r1, #6
 800bf70:	1a5b      	subs	r3, r3, r1
 800bf72:	eb64 0402 	sbc.w	r4, r4, r2
 800bf76:	f04f 0100 	mov.w	r1, #0
 800bf7a:	f04f 0200 	mov.w	r2, #0
 800bf7e:	00e2      	lsls	r2, r4, #3
 800bf80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bf84:	00d9      	lsls	r1, r3, #3
 800bf86:	460b      	mov	r3, r1
 800bf88:	4614      	mov	r4, r2
 800bf8a:	195b      	adds	r3, r3, r5
 800bf8c:	eb44 0406 	adc.w	r4, r4, r6
 800bf90:	f04f 0100 	mov.w	r1, #0
 800bf94:	f04f 0200 	mov.w	r2, #0
 800bf98:	02a2      	lsls	r2, r4, #10
 800bf9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bf9e:	0299      	lsls	r1, r3, #10
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4614      	mov	r4, r2
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f04f 0400 	mov.w	r4, #0
 800bfae:	461a      	mov	r2, r3
 800bfb0:	4623      	mov	r3, r4
 800bfb2:	f7f4 fe81 	bl	8000cb8 <__aeabi_uldivmod>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	460c      	mov	r4, r1
 800bfba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bfbc:	4b0a      	ldr	r3, [pc, #40]	; (800bfe8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	0c1b      	lsrs	r3, r3, #16
 800bfc2:	f003 0303 	and.w	r3, r3, #3
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfd4:	60bb      	str	r3, [r7, #8]
      break;
 800bfd6:	e002      	b.n	800bfde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bfd8:	4b04      	ldr	r3, [pc, #16]	; (800bfec <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bfda:	60bb      	str	r3, [r7, #8]
      break;
 800bfdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bfde:	68bb      	ldr	r3, [r7, #8]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe8:	40023800 	.word	0x40023800
 800bfec:	00f42400 	.word	0x00f42400

0800bff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bff0:	b480      	push	{r7}
 800bff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bff4:	4b03      	ldr	r3, [pc, #12]	; (800c004 <HAL_RCC_GetHCLKFreq+0x14>)
 800bff6:	681b      	ldr	r3, [r3, #0]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	20000000 	.word	0x20000000

0800c008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c00c:	f7ff fff0 	bl	800bff0 <HAL_RCC_GetHCLKFreq>
 800c010:	4601      	mov	r1, r0
 800c012:	4b05      	ldr	r3, [pc, #20]	; (800c028 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	0a9b      	lsrs	r3, r3, #10
 800c018:	f003 0307 	and.w	r3, r3, #7
 800c01c:	4a03      	ldr	r2, [pc, #12]	; (800c02c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c01e:	5cd3      	ldrb	r3, [r2, r3]
 800c020:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c024:	4618      	mov	r0, r3
 800c026:	bd80      	pop	{r7, pc}
 800c028:	40023800 	.word	0x40023800
 800c02c:	0801a040 	.word	0x0801a040

0800c030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c034:	f7ff ffdc 	bl	800bff0 <HAL_RCC_GetHCLKFreq>
 800c038:	4601      	mov	r1, r0
 800c03a:	4b05      	ldr	r3, [pc, #20]	; (800c050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	0b5b      	lsrs	r3, r3, #13
 800c040:	f003 0307 	and.w	r3, r3, #7
 800c044:	4a03      	ldr	r2, [pc, #12]	; (800c054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c046:	5cd3      	ldrb	r3, [r2, r3]
 800c048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	40023800 	.word	0x40023800
 800c054:	0801a040 	.word	0x0801a040

0800c058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c060:	2300      	movs	r3, #0
 800c062:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c064:	2300      	movs	r3, #0
 800c066:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c068:	2300      	movs	r3, #0
 800c06a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00a      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c080:	4b66      	ldr	r3, [pc, #408]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c086:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08e:	4963      	ldr	r1, [pc, #396]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c090:	4313      	orrs	r3, r2
 800c092:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00a      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c0a2:	4b5e      	ldr	r3, [pc, #376]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b0:	495a      	ldr	r1, [pc, #360]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10b      	bne.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d105      	bne.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d075      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c0dc:	4b50      	ldr	r3, [pc, #320]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c0e2:	f7fd fb33 	bl	800974c <HAL_GetTick>
 800c0e6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c0e8:	e008      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c0ea:	f7fd fb2f 	bl	800974c <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d901      	bls.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e1dc      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c0fc:	4b47      	ldr	r3, [pc, #284]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1f0      	bne.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	2b00      	cmp	r3, #0
 800c112:	d009      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	019a      	lsls	r2, r3, #6
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	071b      	lsls	r3, r3, #28
 800c120:	493e      	ldr	r1, [pc, #248]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c122:	4313      	orrs	r3, r2
 800c124:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0302 	and.w	r3, r3, #2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d01f      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c134:	4b39      	ldr	r3, [pc, #228]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c13a:	0f1b      	lsrs	r3, r3, #28
 800c13c:	f003 0307 	and.w	r3, r3, #7
 800c140:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	019a      	lsls	r2, r3, #6
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	061b      	lsls	r3, r3, #24
 800c14e:	431a      	orrs	r2, r3
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	071b      	lsls	r3, r3, #28
 800c154:	4931      	ldr	r1, [pc, #196]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c156:	4313      	orrs	r3, r2
 800c158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c15c:	4b2f      	ldr	r3, [pc, #188]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c162:	f023 021f 	bic.w	r2, r3, #31
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	492b      	ldr	r1, [pc, #172]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c16e:	4313      	orrs	r3, r2
 800c170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00d      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	019a      	lsls	r2, r3, #6
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	061b      	lsls	r3, r3, #24
 800c18c:	431a      	orrs	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	071b      	lsls	r3, r3, #28
 800c194:	4921      	ldr	r1, [pc, #132]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c196:	4313      	orrs	r3, r2
 800c198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c19c:	4b20      	ldr	r3, [pc, #128]	; (800c220 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c19e:	2201      	movs	r2, #1
 800c1a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c1a2:	f7fd fad3 	bl	800974c <HAL_GetTick>
 800c1a6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c1a8:	e008      	b.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c1aa:	f7fd facf 	bl	800974c <HAL_GetTick>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d901      	bls.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e17c      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c1bc:	4b17      	ldr	r3, [pc, #92]	; (800c21c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0f0      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 0304 	and.w	r3, r3, #4
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d112      	bne.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10c      	bne.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f000 80ce 	beq.w	800c38a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c1f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1f6:	f040 80c8 	bne.w	800c38a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c1fa:	4b0a      	ldr	r3, [pc, #40]	; (800c224 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c200:	f7fd faa4 	bl	800974c <HAL_GetTick>
 800c204:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c206:	e00f      	b.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c208:	f7fd faa0 	bl	800974c <HAL_GetTick>
 800c20c:	4602      	mov	r2, r0
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	2b02      	cmp	r3, #2
 800c214:	d908      	bls.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c216:	2303      	movs	r3, #3
 800c218:	e14d      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c21a:	bf00      	nop
 800c21c:	40023800 	.word	0x40023800
 800c220:	42470068 	.word	0x42470068
 800c224:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c228:	4ba5      	ldr	r3, [pc, #660]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c234:	d0e8      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f003 0304 	and.w	r3, r3, #4
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d02e      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c242:	4b9f      	ldr	r3, [pc, #636]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c248:	0c1b      	lsrs	r3, r3, #16
 800c24a:	f003 0303 	and.w	r3, r3, #3
 800c24e:	3301      	adds	r3, #1
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c254:	4b9a      	ldr	r3, [pc, #616]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c25a:	0f1b      	lsrs	r3, r3, #28
 800c25c:	f003 0307 	and.w	r3, r3, #7
 800c260:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	019a      	lsls	r2, r3, #6
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	085b      	lsrs	r3, r3, #1
 800c26c:	3b01      	subs	r3, #1
 800c26e:	041b      	lsls	r3, r3, #16
 800c270:	431a      	orrs	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	061b      	lsls	r3, r3, #24
 800c278:	431a      	orrs	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	071b      	lsls	r3, r3, #28
 800c27e:	4990      	ldr	r1, [pc, #576]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c280:	4313      	orrs	r3, r2
 800c282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c286:	4b8e      	ldr	r3, [pc, #568]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c28c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c294:	3b01      	subs	r3, #1
 800c296:	021b      	lsls	r3, r3, #8
 800c298:	4989      	ldr	r1, [pc, #548]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c29a:	4313      	orrs	r3, r2
 800c29c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0308 	and.w	r3, r3, #8
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d02c      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c2ac:	4b84      	ldr	r3, [pc, #528]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2b2:	0c1b      	lsrs	r3, r3, #16
 800c2b4:	f003 0303 	and.w	r3, r3, #3
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c2be:	4b80      	ldr	r3, [pc, #512]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2c4:	0e1b      	lsrs	r3, r3, #24
 800c2c6:	f003 030f 	and.w	r3, r3, #15
 800c2ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	019a      	lsls	r2, r3, #6
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	085b      	lsrs	r3, r3, #1
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	041b      	lsls	r3, r3, #16
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	061b      	lsls	r3, r3, #24
 800c2e0:	431a      	orrs	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	69db      	ldr	r3, [r3, #28]
 800c2e6:	071b      	lsls	r3, r3, #28
 800c2e8:	4975      	ldr	r1, [pc, #468]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c2f0:	4b73      	ldr	r3, [pc, #460]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fe:	4970      	ldr	r1, [pc, #448]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c300:	4313      	orrs	r3, r2
 800c302:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d024      	beq.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c31a:	d11f      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c31c:	4b68      	ldr	r3, [pc, #416]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c322:	0e1b      	lsrs	r3, r3, #24
 800c324:	f003 030f 	and.w	r3, r3, #15
 800c328:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c32a:	4b65      	ldr	r3, [pc, #404]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c330:	0f1b      	lsrs	r3, r3, #28
 800c332:	f003 0307 	and.w	r3, r3, #7
 800c336:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	019a      	lsls	r2, r3, #6
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	085b      	lsrs	r3, r3, #1
 800c344:	3b01      	subs	r3, #1
 800c346:	041b      	lsls	r3, r3, #16
 800c348:	431a      	orrs	r2, r3
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	061b      	lsls	r3, r3, #24
 800c34e:	431a      	orrs	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	071b      	lsls	r3, r3, #28
 800c354:	495a      	ldr	r1, [pc, #360]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c356:	4313      	orrs	r3, r2
 800c358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c35c:	4b59      	ldr	r3, [pc, #356]	; (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c35e:	2201      	movs	r2, #1
 800c360:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c362:	f7fd f9f3 	bl	800974c <HAL_GetTick>
 800c366:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c368:	e008      	b.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c36a:	f7fd f9ef 	bl	800974c <HAL_GetTick>
 800c36e:	4602      	mov	r2, r0
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	2b02      	cmp	r3, #2
 800c376:	d901      	bls.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c378:	2303      	movs	r3, #3
 800c37a:	e09c      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c37c:	4b50      	ldr	r3, [pc, #320]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c388:	d1ef      	bne.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 0320 	and.w	r3, r3, #32
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 8083 	beq.w	800c49e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c398:	2300      	movs	r3, #0
 800c39a:	60bb      	str	r3, [r7, #8]
 800c39c:	4b48      	ldr	r3, [pc, #288]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a0:	4a47      	ldr	r2, [pc, #284]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3a6:	6413      	str	r3, [r2, #64]	; 0x40
 800c3a8:	4b45      	ldr	r3, [pc, #276]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3b0:	60bb      	str	r3, [r7, #8]
 800c3b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c3b4:	4b44      	ldr	r3, [pc, #272]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a43      	ldr	r2, [pc, #268]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c3ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3be:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c3c0:	f7fd f9c4 	bl	800974c <HAL_GetTick>
 800c3c4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c3c6:	e008      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c3c8:	f7fd f9c0 	bl	800974c <HAL_GetTick>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d901      	bls.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	e06d      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c3da:	4b3b      	ldr	r3, [pc, #236]	; (800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0f0      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c3e6:	4b36      	ldr	r3, [pc, #216]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3ee:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d02f      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	429a      	cmp	r2, r3
 800c402:	d028      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c404:	4b2e      	ldr	r3, [pc, #184]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c40c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c40e:	4b2f      	ldr	r3, [pc, #188]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c410:	2201      	movs	r2, #1
 800c412:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c414:	4b2d      	ldr	r3, [pc, #180]	; (800c4cc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c41a:	4a29      	ldr	r2, [pc, #164]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c420:	4b27      	ldr	r3, [pc, #156]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c424:	f003 0301 	and.w	r3, r3, #1
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d114      	bne.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c42c:	f7fd f98e 	bl	800974c <HAL_GetTick>
 800c430:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c432:	e00a      	b.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c434:	f7fd f98a 	bl	800974c <HAL_GetTick>
 800c438:	4602      	mov	r2, r0
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c442:	4293      	cmp	r3, r2
 800c444:	d901      	bls.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c446:	2303      	movs	r3, #3
 800c448:	e035      	b.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c44a:	4b1d      	ldr	r3, [pc, #116]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c44e:	f003 0302 	and.w	r3, r3, #2
 800c452:	2b00      	cmp	r3, #0
 800c454:	d0ee      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c45e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c462:	d10d      	bne.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c464:	4b16      	ldr	r3, [pc, #88]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c470:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c478:	4911      	ldr	r1, [pc, #68]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c47a:	4313      	orrs	r3, r2
 800c47c:	608b      	str	r3, [r1, #8]
 800c47e:	e005      	b.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c480:	4b0f      	ldr	r3, [pc, #60]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	4a0e      	ldr	r2, [pc, #56]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c486:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c48a:	6093      	str	r3, [r2, #8]
 800c48c:	4b0c      	ldr	r3, [pc, #48]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c48e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c498:	4909      	ldr	r1, [pc, #36]	; (800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f003 0310 	and.w	r3, r3, #16
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d004      	beq.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c4b0:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c4b2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	40023800 	.word	0x40023800
 800c4c4:	42470070 	.word	0x42470070
 800c4c8:	40007000 	.word	0x40007000
 800c4cc:	42470e40 	.word	0x42470e40
 800c4d0:	424711e0 	.word	0x424711e0

0800c4d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 0301 	and.w	r3, r3, #1
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d075      	beq.n	800c5d8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c4ec:	4ba2      	ldr	r3, [pc, #648]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	f003 030c 	and.w	r3, r3, #12
 800c4f4:	2b04      	cmp	r3, #4
 800c4f6:	d00c      	beq.n	800c512 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c4f8:	4b9f      	ldr	r3, [pc, #636]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c500:	2b08      	cmp	r3, #8
 800c502:	d112      	bne.n	800c52a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c504:	4b9c      	ldr	r3, [pc, #624]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c50c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c510:	d10b      	bne.n	800c52a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c512:	4b99      	ldr	r3, [pc, #612]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d05b      	beq.n	800c5d6 <HAL_RCC_OscConfig+0x102>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d157      	bne.n	800c5d6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e20b      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c532:	d106      	bne.n	800c542 <HAL_RCC_OscConfig+0x6e>
 800c534:	4b90      	ldr	r3, [pc, #576]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a8f      	ldr	r2, [pc, #572]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c53a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	e01d      	b.n	800c57e <HAL_RCC_OscConfig+0xaa>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c54a:	d10c      	bne.n	800c566 <HAL_RCC_OscConfig+0x92>
 800c54c:	4b8a      	ldr	r3, [pc, #552]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a89      	ldr	r2, [pc, #548]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c556:	6013      	str	r3, [r2, #0]
 800c558:	4b87      	ldr	r3, [pc, #540]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a86      	ldr	r2, [pc, #536]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c55e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c562:	6013      	str	r3, [r2, #0]
 800c564:	e00b      	b.n	800c57e <HAL_RCC_OscConfig+0xaa>
 800c566:	4b84      	ldr	r3, [pc, #528]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a83      	ldr	r2, [pc, #524]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c56c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	4b81      	ldr	r3, [pc, #516]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a80      	ldr	r2, [pc, #512]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c57c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d013      	beq.n	800c5ae <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c586:	f7fd f8e1 	bl	800974c <HAL_GetTick>
 800c58a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c58c:	e008      	b.n	800c5a0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c58e:	f7fd f8dd 	bl	800974c <HAL_GetTick>
 800c592:	4602      	mov	r2, r0
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	2b64      	cmp	r3, #100	; 0x64
 800c59a:	d901      	bls.n	800c5a0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c59c:	2303      	movs	r3, #3
 800c59e:	e1d0      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5a0:	4b75      	ldr	r3, [pc, #468]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0f0      	beq.n	800c58e <HAL_RCC_OscConfig+0xba>
 800c5ac:	e014      	b.n	800c5d8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5ae:	f7fd f8cd 	bl	800974c <HAL_GetTick>
 800c5b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5b4:	e008      	b.n	800c5c8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c5b6:	f7fd f8c9 	bl	800974c <HAL_GetTick>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	2b64      	cmp	r3, #100	; 0x64
 800c5c2:	d901      	bls.n	800c5c8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e1bc      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5c8:	4b6b      	ldr	r3, [pc, #428]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1f0      	bne.n	800c5b6 <HAL_RCC_OscConfig+0xe2>
 800c5d4:	e000      	b.n	800c5d8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 0302 	and.w	r3, r3, #2
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d063      	beq.n	800c6ac <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c5e4:	4b64      	ldr	r3, [pc, #400]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	f003 030c 	and.w	r3, r3, #12
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00b      	beq.n	800c608 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c5f0:	4b61      	ldr	r3, [pc, #388]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c5f8:	2b08      	cmp	r3, #8
 800c5fa:	d11c      	bne.n	800c636 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c5fc:	4b5e      	ldr	r3, [pc, #376]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d116      	bne.n	800c636 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c608:	4b5b      	ldr	r3, [pc, #364]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d005      	beq.n	800c620 <HAL_RCC_OscConfig+0x14c>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d001      	beq.n	800c620 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e190      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c620:	4b55      	ldr	r3, [pc, #340]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	00db      	lsls	r3, r3, #3
 800c62e:	4952      	ldr	r1, [pc, #328]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c630:	4313      	orrs	r3, r2
 800c632:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c634:	e03a      	b.n	800c6ac <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d020      	beq.n	800c680 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c63e:	4b4f      	ldr	r3, [pc, #316]	; (800c77c <HAL_RCC_OscConfig+0x2a8>)
 800c640:	2201      	movs	r2, #1
 800c642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c644:	f7fd f882 	bl	800974c <HAL_GetTick>
 800c648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c64a:	e008      	b.n	800c65e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c64c:	f7fd f87e 	bl	800974c <HAL_GetTick>
 800c650:	4602      	mov	r2, r0
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	2b02      	cmp	r3, #2
 800c658:	d901      	bls.n	800c65e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c65a:	2303      	movs	r3, #3
 800c65c:	e171      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c65e:	4b46      	ldr	r3, [pc, #280]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 0302 	and.w	r3, r3, #2
 800c666:	2b00      	cmp	r3, #0
 800c668:	d0f0      	beq.n	800c64c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c66a:	4b43      	ldr	r3, [pc, #268]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	00db      	lsls	r3, r3, #3
 800c678:	493f      	ldr	r1, [pc, #252]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c67a:	4313      	orrs	r3, r2
 800c67c:	600b      	str	r3, [r1, #0]
 800c67e:	e015      	b.n	800c6ac <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c680:	4b3e      	ldr	r3, [pc, #248]	; (800c77c <HAL_RCC_OscConfig+0x2a8>)
 800c682:	2200      	movs	r2, #0
 800c684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c686:	f7fd f861 	bl	800974c <HAL_GetTick>
 800c68a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c68c:	e008      	b.n	800c6a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c68e:	f7fd f85d 	bl	800974c <HAL_GetTick>
 800c692:	4602      	mov	r2, r0
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d901      	bls.n	800c6a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c69c:	2303      	movs	r3, #3
 800c69e:	e150      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6a0:	4b35      	ldr	r3, [pc, #212]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0302 	and.w	r3, r3, #2
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1f0      	bne.n	800c68e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 0308 	and.w	r3, r3, #8
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d030      	beq.n	800c71a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	695b      	ldr	r3, [r3, #20]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d016      	beq.n	800c6ee <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c6c0:	4b2f      	ldr	r3, [pc, #188]	; (800c780 <HAL_RCC_OscConfig+0x2ac>)
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6c6:	f7fd f841 	bl	800974c <HAL_GetTick>
 800c6ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6cc:	e008      	b.n	800c6e0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6ce:	f7fd f83d 	bl	800974c <HAL_GetTick>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d901      	bls.n	800c6e0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	e130      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6e0:	4b25      	ldr	r3, [pc, #148]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c6e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6e4:	f003 0302 	and.w	r3, r3, #2
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d0f0      	beq.n	800c6ce <HAL_RCC_OscConfig+0x1fa>
 800c6ec:	e015      	b.n	800c71a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c6ee:	4b24      	ldr	r3, [pc, #144]	; (800c780 <HAL_RCC_OscConfig+0x2ac>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6f4:	f7fd f82a 	bl	800974c <HAL_GetTick>
 800c6f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6fa:	e008      	b.n	800c70e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6fc:	f7fd f826 	bl	800974c <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b02      	cmp	r3, #2
 800c708:	d901      	bls.n	800c70e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e119      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c70e:	4b1a      	ldr	r3, [pc, #104]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1f0      	bne.n	800c6fc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f003 0304 	and.w	r3, r3, #4
 800c722:	2b00      	cmp	r3, #0
 800c724:	f000 809f 	beq.w	800c866 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c728:	2300      	movs	r3, #0
 800c72a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c72c:	4b12      	ldr	r3, [pc, #72]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10f      	bne.n	800c758 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c738:	2300      	movs	r3, #0
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	4b0e      	ldr	r3, [pc, #56]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c740:	4a0d      	ldr	r2, [pc, #52]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c746:	6413      	str	r3, [r2, #64]	; 0x40
 800c748:	4b0b      	ldr	r3, [pc, #44]	; (800c778 <HAL_RCC_OscConfig+0x2a4>)
 800c74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c754:	2301      	movs	r3, #1
 800c756:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c758:	4b0a      	ldr	r3, [pc, #40]	; (800c784 <HAL_RCC_OscConfig+0x2b0>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c760:	2b00      	cmp	r3, #0
 800c762:	d120      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c764:	4b07      	ldr	r3, [pc, #28]	; (800c784 <HAL_RCC_OscConfig+0x2b0>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a06      	ldr	r2, [pc, #24]	; (800c784 <HAL_RCC_OscConfig+0x2b0>)
 800c76a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c76e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c770:	f7fc ffec 	bl	800974c <HAL_GetTick>
 800c774:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c776:	e010      	b.n	800c79a <HAL_RCC_OscConfig+0x2c6>
 800c778:	40023800 	.word	0x40023800
 800c77c:	42470000 	.word	0x42470000
 800c780:	42470e80 	.word	0x42470e80
 800c784:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c788:	f7fc ffe0 	bl	800974c <HAL_GetTick>
 800c78c:	4602      	mov	r2, r0
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	2b02      	cmp	r3, #2
 800c794:	d901      	bls.n	800c79a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e0d3      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c79a:	4b6c      	ldr	r3, [pc, #432]	; (800c94c <HAL_RCC_OscConfig+0x478>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d0f0      	beq.n	800c788 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d106      	bne.n	800c7bc <HAL_RCC_OscConfig+0x2e8>
 800c7ae:	4b68      	ldr	r3, [pc, #416]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7b2:	4a67      	ldr	r2, [pc, #412]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7b4:	f043 0301 	orr.w	r3, r3, #1
 800c7b8:	6713      	str	r3, [r2, #112]	; 0x70
 800c7ba:	e01c      	b.n	800c7f6 <HAL_RCC_OscConfig+0x322>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	2b05      	cmp	r3, #5
 800c7c2:	d10c      	bne.n	800c7de <HAL_RCC_OscConfig+0x30a>
 800c7c4:	4b62      	ldr	r3, [pc, #392]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c8:	4a61      	ldr	r2, [pc, #388]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7ca:	f043 0304 	orr.w	r3, r3, #4
 800c7ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c7d0:	4b5f      	ldr	r3, [pc, #380]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d4:	4a5e      	ldr	r2, [pc, #376]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7d6:	f043 0301 	orr.w	r3, r3, #1
 800c7da:	6713      	str	r3, [r2, #112]	; 0x70
 800c7dc:	e00b      	b.n	800c7f6 <HAL_RCC_OscConfig+0x322>
 800c7de:	4b5c      	ldr	r3, [pc, #368]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e2:	4a5b      	ldr	r2, [pc, #364]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7e4:	f023 0301 	bic.w	r3, r3, #1
 800c7e8:	6713      	str	r3, [r2, #112]	; 0x70
 800c7ea:	4b59      	ldr	r3, [pc, #356]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ee:	4a58      	ldr	r2, [pc, #352]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c7f0:	f023 0304 	bic.w	r3, r3, #4
 800c7f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d015      	beq.n	800c82a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7fe:	f7fc ffa5 	bl	800974c <HAL_GetTick>
 800c802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c804:	e00a      	b.n	800c81c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c806:	f7fc ffa1 	bl	800974c <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	f241 3288 	movw	r2, #5000	; 0x1388
 800c814:	4293      	cmp	r3, r2
 800c816:	d901      	bls.n	800c81c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e092      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c81c:	4b4c      	ldr	r3, [pc, #304]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c820:	f003 0302 	and.w	r3, r3, #2
 800c824:	2b00      	cmp	r3, #0
 800c826:	d0ee      	beq.n	800c806 <HAL_RCC_OscConfig+0x332>
 800c828:	e014      	b.n	800c854 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c82a:	f7fc ff8f 	bl	800974c <HAL_GetTick>
 800c82e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c830:	e00a      	b.n	800c848 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c832:	f7fc ff8b 	bl	800974c <HAL_GetTick>
 800c836:	4602      	mov	r2, r0
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c840:	4293      	cmp	r3, r2
 800c842:	d901      	bls.n	800c848 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c844:	2303      	movs	r3, #3
 800c846:	e07c      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c848:	4b41      	ldr	r3, [pc, #260]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1ee      	bne.n	800c832 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c854:	7dfb      	ldrb	r3, [r7, #23]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d105      	bne.n	800c866 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c85a:	4b3d      	ldr	r3, [pc, #244]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85e:	4a3c      	ldr	r2, [pc, #240]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d068      	beq.n	800c940 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c86e:	4b38      	ldr	r3, [pc, #224]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	f003 030c 	and.w	r3, r3, #12
 800c876:	2b08      	cmp	r3, #8
 800c878:	d060      	beq.n	800c93c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d145      	bne.n	800c90e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c882:	4b34      	ldr	r3, [pc, #208]	; (800c954 <HAL_RCC_OscConfig+0x480>)
 800c884:	2200      	movs	r2, #0
 800c886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c888:	f7fc ff60 	bl	800974c <HAL_GetTick>
 800c88c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c88e:	e008      	b.n	800c8a2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c890:	f7fc ff5c 	bl	800974c <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d901      	bls.n	800c8a2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e04f      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8a2:	4b2b      	ldr	r3, [pc, #172]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1f0      	bne.n	800c890 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	69da      	ldr	r2, [r3, #28]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a1b      	ldr	r3, [r3, #32]
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8bc:	019b      	lsls	r3, r3, #6
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c4:	085b      	lsrs	r3, r3, #1
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	041b      	lsls	r3, r3, #16
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	061b      	lsls	r3, r3, #24
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d8:	071b      	lsls	r3, r3, #28
 800c8da:	491d      	ldr	r1, [pc, #116]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8e0:	4b1c      	ldr	r3, [pc, #112]	; (800c954 <HAL_RCC_OscConfig+0x480>)
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8e6:	f7fc ff31 	bl	800974c <HAL_GetTick>
 800c8ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c8ec:	e008      	b.n	800c900 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c8ee:	f7fc ff2d 	bl	800974c <HAL_GetTick>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d901      	bls.n	800c900 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e020      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c900:	4b13      	ldr	r3, [pc, #76]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d0f0      	beq.n	800c8ee <HAL_RCC_OscConfig+0x41a>
 800c90c:	e018      	b.n	800c940 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c90e:	4b11      	ldr	r3, [pc, #68]	; (800c954 <HAL_RCC_OscConfig+0x480>)
 800c910:	2200      	movs	r2, #0
 800c912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c914:	f7fc ff1a 	bl	800974c <HAL_GetTick>
 800c918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c91a:	e008      	b.n	800c92e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c91c:	f7fc ff16 	bl	800974c <HAL_GetTick>
 800c920:	4602      	mov	r2, r0
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	2b02      	cmp	r3, #2
 800c928:	d901      	bls.n	800c92e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e009      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c92e:	4b08      	ldr	r3, [pc, #32]	; (800c950 <HAL_RCC_OscConfig+0x47c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1f0      	bne.n	800c91c <HAL_RCC_OscConfig+0x448>
 800c93a:	e001      	b.n	800c940 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e000      	b.n	800c942 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	40007000 	.word	0x40007000
 800c950:	40023800 	.word	0x40023800
 800c954:	42470060 	.word	0x42470060

0800c958 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d101      	bne.n	800c96a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e022      	b.n	800c9b0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d105      	bne.n	800c982 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7fa f8f7 	bl	8006b70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2203      	movs	r2, #3
 800c986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f814 	bl	800c9b8 <HAL_SD_InitCard>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c996:	2301      	movs	r3, #1
 800c998:	e00a      	b.n	800c9b0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c9b8:	b5b0      	push	{r4, r5, r7, lr}
 800c9ba:	b08e      	sub	sp, #56	; 0x38
 800c9bc:	af04      	add	r7, sp, #16
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c9d4:	2376      	movs	r3, #118	; 0x76
 800c9d6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681d      	ldr	r5, [r3, #0]
 800c9dc:	466c      	mov	r4, sp
 800c9de:	f107 0314 	add.w	r3, r7, #20
 800c9e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c9ea:	f107 0308 	add.w	r3, r7, #8
 800c9ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	f003 fa87 	bl	800ff04 <SDIO_Init>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e031      	b.n	800ca6c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ca08:	4b1a      	ldr	r3, [pc, #104]	; (800ca74 <HAL_SD_InitCard+0xbc>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f003 fabf 	bl	800ff96 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ca18:	4b16      	ldr	r3, [pc, #88]	; (800ca74 <HAL_SD_InitCard+0xbc>)
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 ffc6 	bl	800d9b0 <SD_PowerON>
 800ca24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00b      	beq.n	800ca44 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e013      	b.n	800ca6c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fee5 	bl	800d814 <SD_InitCard>
 800ca4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00b      	beq.n	800ca6a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	431a      	orrs	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e000      	b.n	800ca6c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3728      	adds	r7, #40	; 0x28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bdb0      	pop	{r4, r5, r7, pc}
 800ca74:	422580a0 	.word	0x422580a0

0800ca78 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b08c      	sub	sp, #48	; 0x30
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
 800ca84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d107      	bne.n	800caa0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	e0c7      	b.n	800cc30 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	f040 80c0 	bne.w	800cc2e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	441a      	add	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d907      	bls.n	800cad2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e0ae      	b.n	800cc30 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2203      	movs	r2, #3
 800cad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2200      	movs	r2, #0
 800cae0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800caf0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf6:	4a50      	ldr	r2, [pc, #320]	; (800cc38 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800caf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cafe:	4a4f      	ldr	r2, [pc, #316]	; (800cc3c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cb00:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb06:	2200      	movs	r2, #0
 800cb08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3380      	adds	r3, #128	; 0x80
 800cb14:	4619      	mov	r1, r3
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	025b      	lsls	r3, r3, #9
 800cb1c:	089b      	lsrs	r3, r3, #2
 800cb1e:	f7fd fc07 	bl	800a330 <HAL_DMA_Start_IT>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d017      	beq.n	800cb58 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cb36:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a40      	ldr	r2, [pc, #256]	; (800cc40 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cb3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e06b      	b.n	800cc30 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cb58:	4b3a      	ldr	r3, [pc, #232]	; (800cc44 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d002      	beq.n	800cb6c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	025b      	lsls	r3, r3, #9
 800cb6a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb74:	4618      	mov	r0, r3
 800cb76:	f003 faa1 	bl	80100bc <SDMMC_CmdBlockLength>
 800cb7a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00f      	beq.n	800cba2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a2e      	ldr	r2, [pc, #184]	; (800cc40 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cb88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	431a      	orrs	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e046      	b.n	800cc30 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cba2:	f04f 33ff 	mov.w	r3, #4294967295
 800cba6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	025b      	lsls	r3, r3, #9
 800cbac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cbae:	2390      	movs	r3, #144	; 0x90
 800cbb0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f107 0210 	add.w	r2, r7, #16
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f003 fa4b 	bl	8010064 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d90a      	bls.n	800cbea <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2282      	movs	r2, #130	; 0x82
 800cbd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f003 faaf 	bl	8010144 <SDMMC_CmdReadMultiBlock>
 800cbe6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cbe8:	e009      	b.n	800cbfe <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2281      	movs	r2, #129	; 0x81
 800cbee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f003 fa82 	bl	8010100 <SDMMC_CmdReadSingleBlock>
 800cbfc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d012      	beq.n	800cc2a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a0d      	ldr	r2, [pc, #52]	; (800cc40 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cc0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc12:	431a      	orrs	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e002      	b.n	800cc30 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e000      	b.n	800cc30 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800cc2e:	2302      	movs	r3, #2
  }
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3730      	adds	r7, #48	; 0x30
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	0800d623 	.word	0x0800d623
 800cc3c:	0800d695 	.word	0x0800d695
 800cc40:	004005ff 	.word	0x004005ff
 800cc44:	4225858c 	.word	0x4225858c

0800cc48 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b08c      	sub	sp, #48	; 0x30
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
 800cc54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d107      	bne.n	800cc70 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e0ca      	b.n	800ce06 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	f040 80c3 	bne.w	800ce04 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	441a      	add	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d907      	bls.n	800cca2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e0b1      	b.n	800ce06 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2203      	movs	r2, #3
 800cca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f042 021a 	orr.w	r2, r2, #26
 800ccc0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc6:	4a52      	ldr	r2, [pc, #328]	; (800ce10 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ccc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccce:	4a51      	ldr	r2, [pc, #324]	; (800ce14 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800ccd0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d002      	beq.n	800cce8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	025b      	lsls	r3, r3, #9
 800cce6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f003 f9e3 	bl	80100bc <SDMMC_CmdBlockLength>
 800ccf6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00f      	beq.n	800cd1e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a45      	ldr	r2, [pc, #276]	; (800ce18 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cd04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0c:	431a      	orrs	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e073      	b.n	800ce06 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d90a      	bls.n	800cd3a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	22a0      	movs	r2, #160	; 0xa0
 800cd28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd30:	4618      	mov	r0, r3
 800cd32:	f003 fa4b 	bl	80101cc <SDMMC_CmdWriteMultiBlock>
 800cd36:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cd38:	e009      	b.n	800cd4e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2290      	movs	r2, #144	; 0x90
 800cd3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd46:	4618      	mov	r0, r3
 800cd48:	f003 fa1e 	bl	8010188 <SDMMC_CmdWriteSingleBlock>
 800cd4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d012      	beq.n	800cd7a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4a2f      	ldr	r2, [pc, #188]	; (800ce18 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cd5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd62:	431a      	orrs	r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e045      	b.n	800ce06 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cd7a:	4b28      	ldr	r3, [pc, #160]	; (800ce1c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cd84:	68b9      	ldr	r1, [r7, #8]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3380      	adds	r3, #128	; 0x80
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	025b      	lsls	r3, r3, #9
 800cd92:	089b      	lsrs	r3, r3, #2
 800cd94:	f7fd facc 	bl	800a330 <HAL_DMA_Start_IT>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d01a      	beq.n	800cdd4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f022 021a 	bic.w	r2, r2, #26
 800cdac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a19      	ldr	r2, [pc, #100]	; (800ce18 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cdb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e018      	b.n	800ce06 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	025b      	lsls	r3, r3, #9
 800cdde:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cde0:	2390      	movs	r3, #144	; 0x90
 800cde2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cde4:	2300      	movs	r3, #0
 800cde6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cdec:	2301      	movs	r3, #1
 800cdee:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f107 0210 	add.w	r2, r7, #16
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f003 f932 	bl	8010064 <SDIO_ConfigData>

      return HAL_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	e000      	b.n	800ce06 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ce04:	2302      	movs	r3, #2
  }
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3730      	adds	r7, #48	; 0x30
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	0800d5f9 	.word	0x0800d5f9
 800ce14:	0800d695 	.word	0x0800d695
 800ce18:	004005ff 	.word	0x004005ff
 800ce1c:	4225858c 	.word	0x4225858c

0800ce20 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d008      	beq.n	800ce4e <HAL_SD_IRQHandler+0x2e>
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f003 0308 	and.w	r3, r3, #8
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 ffc8 	bl	800dddc <SD_Read_IT>
 800ce4c:	e155      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f000 808f 	beq.w	800cf7c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce66:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	6812      	ldr	r2, [r2, #0]
 800ce72:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ce76:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ce7a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f022 0201 	bic.w	r2, r2, #1
 800ce8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f003 0308 	and.w	r3, r3, #8
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d039      	beq.n	800cf0a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f003 0302 	and.w	r3, r3, #2
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d104      	bne.n	800ceaa <HAL_SD_IRQHandler+0x8a>
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f003 0320 	and.w	r3, r3, #32
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d011      	beq.n	800cece <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f003 f9ae 	bl	8010210 <SDMMC_CmdStopTransfer>
 800ceb4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d008      	beq.n	800cece <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	431a      	orrs	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 f91f 	bl	800d10c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f240 523a 	movw	r2, #1338	; 0x53a
 800ced6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f003 0301 	and.w	r3, r3, #1
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d104      	bne.n	800cefa <HAL_SD_IRQHandler+0xda>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f003 0302 	and.w	r3, r3, #2
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d003      	beq.n	800cf02 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f003 fe04 	bl	8010b08 <HAL_SD_RxCpltCallback>
 800cf00:	e0fb      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f003 fdf6 	bl	8010af4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cf08:	e0f7      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 80f2 	beq.w	800d0fa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f003 0320 	and.w	r3, r3, #32
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d011      	beq.n	800cf44 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f003 f973 	bl	8010210 <SDMMC_CmdStopTransfer>
 800cf2a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d008      	beq.n	800cf44 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	431a      	orrs	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f8e4 	bl	800d10c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f003 0301 	and.w	r3, r3, #1
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f040 80d5 	bne.w	800d0fa <HAL_SD_IRQHandler+0x2da>
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f003 0302 	and.w	r3, r3, #2
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f040 80cf 	bne.w	800d0fa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f022 0208 	bic.w	r2, r2, #8
 800cf6a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f003 fdbd 	bl	8010af4 <HAL_SD_TxCpltCallback>
}
 800cf7a:	e0be      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d008      	beq.n	800cf9c <HAL_SD_IRQHandler+0x17c>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f003 0308 	and.w	r3, r3, #8
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d003      	beq.n	800cf9c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 ff72 	bl	800de7e <SD_Write_IT>
 800cf9a:	e0ae      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f000 80a7 	beq.w	800d0fa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb2:	f003 0302 	and.w	r3, r3, #2
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d005      	beq.n	800cfc6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfbe:	f043 0202 	orr.w	r2, r3, #2
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfcc:	f003 0308 	and.w	r3, r3, #8
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d005      	beq.n	800cfe0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd8:	f043 0208 	orr.w	r2, r3, #8
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfe6:	f003 0320 	and.w	r3, r3, #32
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d005      	beq.n	800cffa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff2:	f043 0220 	orr.w	r2, r3, #32
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d000:	f003 0310 	and.w	r3, r3, #16
 800d004:	2b00      	cmp	r3, #0
 800d006:	d005      	beq.n	800d014 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00c:	f043 0210 	orr.w	r2, r3, #16
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f240 523a 	movw	r2, #1338	; 0x53a
 800d01c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d02c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4618      	mov	r0, r3
 800d034:	f003 f8ec 	bl	8010210 <SDMMC_CmdStopTransfer>
 800d038:	4602      	mov	r2, r0
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03e:	431a      	orrs	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f003 0308 	and.w	r3, r3, #8
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00a      	beq.n	800d064 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 f855 	bl	800d10c <HAL_SD_ErrorCallback>
}
 800d062:	e04a      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d045      	beq.n	800d0fa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f003 0310 	and.w	r3, r3, #16
 800d074:	2b00      	cmp	r3, #0
 800d076:	d104      	bne.n	800d082 <HAL_SD_IRQHandler+0x262>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f003 0320 	and.w	r3, r3, #32
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d011      	beq.n	800d0a6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d086:	4a1f      	ldr	r2, [pc, #124]	; (800d104 <HAL_SD_IRQHandler+0x2e4>)
 800d088:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fd f9a6 	bl	800a3e0 <HAL_DMA_Abort_IT>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d02f      	beq.n	800d0fa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 fb4a 	bl	800d738 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d0a4:	e029      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f003 0301 	and.w	r3, r3, #1
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d104      	bne.n	800d0ba <HAL_SD_IRQHandler+0x29a>
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f003 0302 	and.w	r3, r3, #2
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d011      	beq.n	800d0de <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0be:	4a12      	ldr	r2, [pc, #72]	; (800d108 <HAL_SD_IRQHandler+0x2e8>)
 800d0c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fd f98a 	bl	800a3e0 <HAL_DMA_Abort_IT>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d013      	beq.n	800d0fa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 fb65 	bl	800d7a6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d0dc:	e00d      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f003 fcf4 	bl	8010ae0 <HAL_SD_AbortCallback>
}
 800d0f8:	e7ff      	b.n	800d0fa <HAL_SD_IRQHandler+0x2da>
 800d0fa:	bf00      	nop
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	0800d739 	.word	0x0800d739
 800d108:	0800d7a7 	.word	0x0800d7a7

0800d10c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d12e:	0f9b      	lsrs	r3, r3, #30
 800d130:	b2da      	uxtb	r2, r3
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d13a:	0e9b      	lsrs	r3, r3, #26
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	f003 030f 	and.w	r3, r3, #15
 800d142:	b2da      	uxtb	r2, r3
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d14c:	0e1b      	lsrs	r3, r3, #24
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	f003 0303 	and.w	r3, r3, #3
 800d154:	b2da      	uxtb	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d15e:	0c1b      	lsrs	r3, r3, #16
 800d160:	b2da      	uxtb	r2, r3
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d16a:	0a1b      	lsrs	r3, r3, #8
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d176:	b2da      	uxtb	r2, r3
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d180:	0d1b      	lsrs	r3, r3, #20
 800d182:	b29a      	uxth	r2, r3
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d18c:	0c1b      	lsrs	r3, r3, #16
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	f003 030f 	and.w	r3, r3, #15
 800d194:	b2da      	uxtb	r2, r3
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d19e:	0bdb      	lsrs	r3, r3, #15
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1b0:	0b9b      	lsrs	r3, r3, #14
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f003 0301 	and.w	r3, r3, #1
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1c2:	0b5b      	lsrs	r3, r3, #13
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1d4:	0b1b      	lsrs	r3, r3, #12
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	f003 0301 	and.w	r3, r3, #1
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d163      	bne.n	800d2b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1f4:	009a      	lsls	r2, r3, #2
 800d1f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d200:	0f92      	lsrs	r2, r2, #30
 800d202:	431a      	orrs	r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d20c:	0edb      	lsrs	r3, r3, #27
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	f003 0307 	and.w	r3, r3, #7
 800d214:	b2da      	uxtb	r2, r3
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d21e:	0e1b      	lsrs	r3, r3, #24
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f003 0307 	and.w	r3, r3, #7
 800d226:	b2da      	uxtb	r2, r3
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d230:	0d5b      	lsrs	r3, r3, #21
 800d232:	b2db      	uxtb	r3, r3
 800d234:	f003 0307 	and.w	r3, r3, #7
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d242:	0c9b      	lsrs	r3, r3, #18
 800d244:	b2db      	uxtb	r3, r3
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d254:	0bdb      	lsrs	r3, r3, #15
 800d256:	b2db      	uxtb	r3, r3
 800d258:	f003 0307 	and.w	r3, r3, #7
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	7e1b      	ldrb	r3, [r3, #24]
 800d270:	b2db      	uxtb	r3, r3
 800d272:	f003 0307 	and.w	r3, r3, #7
 800d276:	3302      	adds	r3, #2
 800d278:	2201      	movs	r2, #1
 800d27a:	fa02 f303 	lsl.w	r3, r2, r3
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d282:	fb02 f203 	mul.w	r2, r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	7a1b      	ldrb	r3, [r3, #8]
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	f003 030f 	and.w	r3, r3, #15
 800d294:	2201      	movs	r2, #1
 800d296:	409a      	lsls	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d2a4:	0a52      	lsrs	r2, r2, #9
 800d2a6:	fb02 f203 	mul.w	r2, r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2b4:	661a      	str	r2, [r3, #96]	; 0x60
 800d2b6:	e031      	b.n	800d31c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d11d      	bne.n	800d2fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2c4:	041b      	lsls	r3, r3, #16
 800d2c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ce:	0c1b      	lsrs	r3, r3, #16
 800d2d0:	431a      	orrs	r2, r3
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	029a      	lsls	r2, r3, #10
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	661a      	str	r2, [r3, #96]	; 0x60
 800d2fa:	e00f      	b.n	800d31c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a58      	ldr	r2, [pc, #352]	; (800d464 <HAL_SD_GetCardCSD+0x344>)
 800d302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e09d      	b.n	800d458 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d320:	0b9b      	lsrs	r3, r3, #14
 800d322:	b2db      	uxtb	r3, r3
 800d324:	f003 0301 	and.w	r3, r3, #1
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d332:	09db      	lsrs	r3, r3, #7
 800d334:	b2db      	uxtb	r3, r3
 800d336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d344:	b2db      	uxtb	r3, r3
 800d346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d354:	0fdb      	lsrs	r3, r3, #31
 800d356:	b2da      	uxtb	r2, r3
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d360:	0f5b      	lsrs	r3, r3, #29
 800d362:	b2db      	uxtb	r3, r3
 800d364:	f003 0303 	and.w	r3, r3, #3
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d372:	0e9b      	lsrs	r3, r3, #26
 800d374:	b2db      	uxtb	r3, r3
 800d376:	f003 0307 	and.w	r3, r3, #7
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d384:	0d9b      	lsrs	r3, r3, #22
 800d386:	b2db      	uxtb	r3, r3
 800d388:	f003 030f 	and.w	r3, r3, #15
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d396:	0d5b      	lsrs	r3, r3, #21
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	f003 0301 	and.w	r3, r3, #1
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b2:	0c1b      	lsrs	r3, r3, #16
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	f003 0301 	and.w	r3, r3, #1
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c6:	0bdb      	lsrs	r3, r3, #15
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f003 0301 	and.w	r3, r3, #1
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3da:	0b9b      	lsrs	r3, r3, #14
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ee:	0b5b      	lsrs	r3, r3, #13
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d402:	0b1b      	lsrs	r3, r3, #12
 800d404:	b2db      	uxtb	r3, r3
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d416:	0a9b      	lsrs	r3, r3, #10
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	f003 0303 	and.w	r3, r3, #3
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d42a:	0a1b      	lsrs	r3, r3, #8
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	f003 0303 	and.w	r3, r3, #3
 800d432:	b2da      	uxtb	r2, r3
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43e:	085b      	lsrs	r3, r3, #1
 800d440:	b2db      	uxtb	r3, r3
 800d442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d446:	b2da      	uxtb	r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	004005ff 	.word	0x004005ff

0800d468 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d4c0:	b5b0      	push	{r4, r5, r7, lr}
 800d4c2:	b08e      	sub	sp, #56	; 0x38
 800d4c4:	af04      	add	r7, sp, #16
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2203      	movs	r2, #3
 800d4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d02e      	beq.n	800d538 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4e0:	d106      	bne.n	800d4f0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	639a      	str	r2, [r3, #56]	; 0x38
 800d4ee:	e029      	b.n	800d544 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4f6:	d10a      	bne.n	800d50e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fb0f 	bl	800db1c <SD_WideBus_Enable>
 800d4fe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	431a      	orrs	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38
 800d50c:	e01a      	b.n	800d544 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10a      	bne.n	800d52a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fb4c 	bl	800dbb2 <SD_WideBus_Disable>
 800d51a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	431a      	orrs	r2, r3
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	639a      	str	r2, [r3, #56]	; 0x38
 800d528:	e00c      	b.n	800d544 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d52e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	639a      	str	r2, [r3, #56]	; 0x38
 800d536:	e005      	b.n	800d544 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d009      	beq.n	800d560 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a18      	ldr	r2, [pc, #96]	; (800d5b4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d552:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d55c:	2301      	movs	r3, #1
 800d55e:	e024      	b.n	800d5aa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681d      	ldr	r5, [r3, #0]
 800d586:	466c      	mov	r4, sp
 800d588:	f107 0318 	add.w	r3, r7, #24
 800d58c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d594:	f107 030c 	add.w	r3, r7, #12
 800d598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d59a:	4628      	mov	r0, r5
 800d59c:	f002 fcb2 	bl	800ff04 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3728      	adds	r7, #40	; 0x28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	004005ff 	.word	0x004005ff

0800d5b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d5c4:	f107 030c 	add.w	r3, r7, #12
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fa7e 	bl	800dacc <SD_SendStatus>
 800d5d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d005      	beq.n	800d5e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	431a      	orrs	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	0a5b      	lsrs	r3, r3, #9
 800d5e8:	f003 030f 	and.w	r3, r3, #15
 800d5ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d5ee:	693b      	ldr	r3, [r7, #16]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d604:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d614:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d616:	bf00      	nop
 800d618:	3714      	adds	r7, #20
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b084      	sub	sp, #16
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d634:	2b82      	cmp	r3, #130	; 0x82
 800d636:	d111      	bne.n	800d65c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f002 fde7 	bl	8010210 <SDMMC_CmdStopTransfer>
 800d642:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d008      	beq.n	800d65c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	431a      	orrs	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f7ff fd58 	bl	800d10c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f022 0208 	bic.w	r2, r2, #8
 800d66a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f240 523a 	movw	r2, #1338	; 0x53a
 800d674:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f003 fa3f 	bl	8010b08 <HAL_SD_RxCpltCallback>
#endif
}
 800d68a:	bf00      	nop
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7fd f848 	bl	800a738 <HAL_DMA_GetError>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d03e      	beq.n	800d72c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6b4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6bc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d002      	beq.n	800d6ca <SD_DMAError+0x36>
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d12d      	bne.n	800d726 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a19      	ldr	r2, [pc, #100]	; (800d734 <SD_DMAError+0xa0>)
 800d6d0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d6e0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d6ee:	6978      	ldr	r0, [r7, #20]
 800d6f0:	f7ff ff62 	bl	800d5b8 <HAL_SD_GetCardState>
 800d6f4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2b06      	cmp	r3, #6
 800d6fa:	d002      	beq.n	800d702 <SD_DMAError+0x6e>
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2b05      	cmp	r3, #5
 800d700:	d10a      	bne.n	800d718 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4618      	mov	r0, r3
 800d708:	f002 fd82 	bl	8010210 <SDMMC_CmdStopTransfer>
 800d70c:	4602      	mov	r2, r0
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d712:	431a      	orrs	r2, r3
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	2200      	movs	r2, #0
 800d724:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d726:	6978      	ldr	r0, [r7, #20]
 800d728:	f7ff fcf0 	bl	800d10c <HAL_SD_ErrorCallback>
#endif
  }
}
 800d72c:	bf00      	nop
 800d72e:	3718      	adds	r7, #24
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	004005ff 	.word	0x004005ff

0800d738 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d744:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d74e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7ff ff31 	bl	800d5b8 <HAL_SD_GetCardState>
 800d756:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	2b06      	cmp	r3, #6
 800d76a:	d002      	beq.n	800d772 <SD_DMATxAbort+0x3a>
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2b05      	cmp	r3, #5
 800d770:	d10a      	bne.n	800d788 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4618      	mov	r0, r3
 800d778:	f002 fd4a 	bl	8010210 <SDMMC_CmdStopTransfer>
 800d77c:	4602      	mov	r2, r0
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	431a      	orrs	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d103      	bne.n	800d798 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f003 f9a5 	bl	8010ae0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d796:	e002      	b.n	800d79e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f7ff fcb7 	bl	800d10c <HAL_SD_ErrorCallback>
}
 800d79e:	bf00      	nop
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7bc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f7ff fefa 	bl	800d5b8 <HAL_SD_GetCardState>
 800d7c4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b06      	cmp	r3, #6
 800d7d8:	d002      	beq.n	800d7e0 <SD_DMARxAbort+0x3a>
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b05      	cmp	r3, #5
 800d7de:	d10a      	bne.n	800d7f6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f002 fd13 	bl	8010210 <SDMMC_CmdStopTransfer>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f0:	431a      	orrs	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d103      	bne.n	800d806 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f003 f96e 	bl	8010ae0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d804:	e002      	b.n	800d80c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f7ff fc80 	bl	800d10c <HAL_SD_ErrorCallback>
}
 800d80c:	bf00      	nop
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d814:	b5b0      	push	{r4, r5, r7, lr}
 800d816:	b094      	sub	sp, #80	; 0x50
 800d818:	af04      	add	r7, sp, #16
 800d81a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d81c:	2301      	movs	r3, #1
 800d81e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f002 fbc5 	bl	800ffb4 <SDIO_GetPowerState>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d102      	bne.n	800d836 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d830:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d834:	e0b7      	b.n	800d9a6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	d02f      	beq.n	800d89e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4618      	mov	r0, r3
 800d844:	f002 fdee 	bl	8010424 <SDMMC_CmdSendCID>
 800d848:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d001      	beq.n	800d854 <SD_InitCard+0x40>
    {
      return errorstate;
 800d850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d852:	e0a8      	b.n	800d9a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2100      	movs	r1, #0
 800d85a:	4618      	mov	r0, r3
 800d85c:	f002 fbef 	bl	801003e <SDIO_GetResponse>
 800d860:	4602      	mov	r2, r0
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2104      	movs	r1, #4
 800d86c:	4618      	mov	r0, r3
 800d86e:	f002 fbe6 	bl	801003e <SDIO_GetResponse>
 800d872:	4602      	mov	r2, r0
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2108      	movs	r1, #8
 800d87e:	4618      	mov	r0, r3
 800d880:	f002 fbdd 	bl	801003e <SDIO_GetResponse>
 800d884:	4602      	mov	r2, r0
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	210c      	movs	r1, #12
 800d890:	4618      	mov	r0, r3
 800d892:	f002 fbd4 	bl	801003e <SDIO_GetResponse>
 800d896:	4602      	mov	r2, r0
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	d00d      	beq.n	800d8c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f107 020e 	add.w	r2, r7, #14
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f002 fdf4 	bl	801049e <SDMMC_CmdSetRelAdd>
 800d8b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d001      	beq.n	800d8c2 <SD_InitCard+0xae>
    {
      return errorstate;
 800d8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c0:	e071      	b.n	800d9a6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c6:	2b03      	cmp	r3, #3
 800d8c8:	d036      	beq.n	800d938 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d8ca:	89fb      	ldrh	r3, [r7, #14]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8da:	041b      	lsls	r3, r3, #16
 800d8dc:	4619      	mov	r1, r3
 800d8de:	4610      	mov	r0, r2
 800d8e0:	f002 fdbe 	bl	8010460 <SDMMC_CmdSendCSD>
 800d8e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d001      	beq.n	800d8f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ee:	e05a      	b.n	800d9a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f002 fba1 	bl	801003e <SDIO_GetResponse>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2104      	movs	r1, #4
 800d908:	4618      	mov	r0, r3
 800d90a:	f002 fb98 	bl	801003e <SDIO_GetResponse>
 800d90e:	4602      	mov	r2, r0
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2108      	movs	r1, #8
 800d91a:	4618      	mov	r0, r3
 800d91c:	f002 fb8f 	bl	801003e <SDIO_GetResponse>
 800d920:	4602      	mov	r2, r0
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	210c      	movs	r1, #12
 800d92c:	4618      	mov	r0, r3
 800d92e:	f002 fb86 	bl	801003e <SDIO_GetResponse>
 800d932:	4602      	mov	r2, r0
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2104      	movs	r1, #4
 800d93e:	4618      	mov	r0, r3
 800d940:	f002 fb7d 	bl	801003e <SDIO_GetResponse>
 800d944:	4603      	mov	r3, r0
 800d946:	0d1a      	lsrs	r2, r3, #20
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d94c:	f107 0310 	add.w	r3, r7, #16
 800d950:	4619      	mov	r1, r3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f7ff fbe4 	bl	800d120 <HAL_SD_GetCardCSD>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d002      	beq.n	800d964 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d95e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d962:	e020      	b.n	800d9a6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6819      	ldr	r1, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d96c:	041b      	lsls	r3, r3, #16
 800d96e:	f04f 0400 	mov.w	r4, #0
 800d972:	461a      	mov	r2, r3
 800d974:	4623      	mov	r3, r4
 800d976:	4608      	mov	r0, r1
 800d978:	f002 fc6c 	bl	8010254 <SDMMC_CmdSelDesel>
 800d97c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d980:	2b00      	cmp	r3, #0
 800d982:	d001      	beq.n	800d988 <SD_InitCard+0x174>
  {
    return errorstate;
 800d984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d986:	e00e      	b.n	800d9a6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681d      	ldr	r5, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	466c      	mov	r4, sp
 800d990:	f103 0210 	add.w	r2, r3, #16
 800d994:	ca07      	ldmia	r2, {r0, r1, r2}
 800d996:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d99a:	3304      	adds	r3, #4
 800d99c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f002 fab0 	bl	800ff04 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3740      	adds	r7, #64	; 0x40
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d9b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f002 fc66 	bl	801029a <SDMMC_CmdGoIdleState>
 800d9ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d001      	beq.n	800d9da <SD_PowerON+0x2a>
  {
    return errorstate;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	e072      	b.n	800dac0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f002 fc79 	bl	80102d6 <SDMMC_CmdOperCond>
 800d9e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00d      	beq.n	800da08 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f002 fc4f 	bl	801029a <SDMMC_CmdGoIdleState>
 800d9fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d004      	beq.n	800da0e <SD_PowerON+0x5e>
    {
      return errorstate;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	e05b      	b.n	800dac0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da12:	2b01      	cmp	r3, #1
 800da14:	d137      	bne.n	800da86 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2100      	movs	r1, #0
 800da1c:	4618      	mov	r0, r3
 800da1e:	f002 fc79 	bl	8010314 <SDMMC_CmdAppCommand>
 800da22:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d02d      	beq.n	800da86 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da2e:	e047      	b.n	800dac0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2100      	movs	r1, #0
 800da36:	4618      	mov	r0, r3
 800da38:	f002 fc6c 	bl	8010314 <SDMMC_CmdAppCommand>
 800da3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d001      	beq.n	800da48 <SD_PowerON+0x98>
    {
      return errorstate;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	e03b      	b.n	800dac0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	491e      	ldr	r1, [pc, #120]	; (800dac8 <SD_PowerON+0x118>)
 800da4e:	4618      	mov	r0, r3
 800da50:	f002 fc82 	bl	8010358 <SDMMC_CmdAppOperCommand>
 800da54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da60:	e02e      	b.n	800dac0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2100      	movs	r1, #0
 800da68:	4618      	mov	r0, r3
 800da6a:	f002 fae8 	bl	801003e <SDIO_GetResponse>
 800da6e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	0fdb      	lsrs	r3, r3, #31
 800da74:	2b01      	cmp	r3, #1
 800da76:	d101      	bne.n	800da7c <SD_PowerON+0xcc>
 800da78:	2301      	movs	r3, #1
 800da7a:	e000      	b.n	800da7e <SD_PowerON+0xce>
 800da7c:	2300      	movs	r3, #0
 800da7e:	613b      	str	r3, [r7, #16]

    count++;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	3301      	adds	r3, #1
 800da84:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d802      	bhi.n	800da96 <SD_PowerON+0xe6>
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d0cc      	beq.n	800da30 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d902      	bls.n	800daa6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800daa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800daa4:	e00c      	b.n	800dac0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800daac:	2b00      	cmp	r3, #0
 800daae:	d003      	beq.n	800dab8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	645a      	str	r2, [r3, #68]	; 0x44
 800dab6:	e002      	b.n	800dabe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3718      	adds	r7, #24
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	c1100000 	.word	0xc1100000

0800dacc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dadc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dae0:	e018      	b.n	800db14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daea:	041b      	lsls	r3, r3, #16
 800daec:	4619      	mov	r1, r3
 800daee:	4610      	mov	r0, r2
 800daf0:	f002 fcf6 	bl	80104e0 <SDMMC_CmdSendStatus>
 800daf4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	e009      	b.n	800db14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2100      	movs	r1, #0
 800db06:	4618      	mov	r0, r3
 800db08:	f002 fa99 	bl	801003e <SDIO_GetResponse>
 800db0c:	4602      	mov	r2, r0
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db24:	2300      	movs	r3, #0
 800db26:	60fb      	str	r3, [r7, #12]
 800db28:	2300      	movs	r3, #0
 800db2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2100      	movs	r1, #0
 800db32:	4618      	mov	r0, r3
 800db34:	f002 fa83 	bl	801003e <SDIO_GetResponse>
 800db38:	4603      	mov	r3, r0
 800db3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db42:	d102      	bne.n	800db4a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db48:	e02f      	b.n	800dbaa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db4a:	f107 030c 	add.w	r3, r7, #12
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 f879 	bl	800dc48 <SD_FindSCR>
 800db56:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	e023      	b.n	800dbaa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d01c      	beq.n	800dba6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db74:	041b      	lsls	r3, r3, #16
 800db76:	4619      	mov	r1, r3
 800db78:	4610      	mov	r0, r2
 800db7a:	f002 fbcb 	bl	8010314 <SDMMC_CmdAppCommand>
 800db7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	e00f      	b.n	800dbaa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2102      	movs	r1, #2
 800db90:	4618      	mov	r0, r3
 800db92:	f002 fc04 	bl	801039e <SDMMC_CmdBusWidth>
 800db96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d001      	beq.n	800dba2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	e003      	b.n	800dbaa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dba2:	2300      	movs	r3, #0
 800dba4:	e001      	b.n	800dbaa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dba6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b086      	sub	sp, #24
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60fb      	str	r3, [r7, #12]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f002 fa38 	bl	801003e <SDIO_GetResponse>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbd8:	d102      	bne.n	800dbe0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dbda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbde:	e02f      	b.n	800dc40 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbe0:	f107 030c 	add.w	r3, r7, #12
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 f82e 	bl	800dc48 <SD_FindSCR>
 800dbec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	e023      	b.n	800dc40 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d01c      	beq.n	800dc3c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc0a:	041b      	lsls	r3, r3, #16
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	4610      	mov	r0, r2
 800dc10:	f002 fb80 	bl	8010314 <SDMMC_CmdAppCommand>
 800dc14:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d001      	beq.n	800dc20 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	e00f      	b.n	800dc40 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2100      	movs	r1, #0
 800dc26:	4618      	mov	r0, r3
 800dc28:	f002 fbb9 	bl	801039e <SDMMC_CmdBusWidth>
 800dc2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d001      	beq.n	800dc38 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	e003      	b.n	800dc40 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	e001      	b.n	800dc40 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3718      	adds	r7, #24
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc48:	b590      	push	{r4, r7, lr}
 800dc4a:	b08f      	sub	sp, #60	; 0x3c
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc52:	f7fb fd7b 	bl	800974c <HAL_GetTick>
 800dc56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	60bb      	str	r3, [r7, #8]
 800dc60:	2300      	movs	r3, #0
 800dc62:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2108      	movs	r1, #8
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f002 fa24 	bl	80100bc <SDMMC_CmdBlockLength>
 800dc74:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7e:	e0a9      	b.n	800ddd4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc88:	041b      	lsls	r3, r3, #16
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	4610      	mov	r0, r2
 800dc8e:	f002 fb41 	bl	8010314 <SDMMC_CmdAppCommand>
 800dc92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9c:	e09a      	b.n	800ddd4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc9e:	f04f 33ff 	mov.w	r3, #4294967295
 800dca2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dca4:	2308      	movs	r3, #8
 800dca6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dca8:	2330      	movs	r3, #48	; 0x30
 800dcaa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dcac:	2302      	movs	r3, #2
 800dcae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f107 0210 	add.w	r2, r7, #16
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f002 f9ce 	bl	8010064 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f002 fb88 	bl	80103e2 <SDMMC_CmdSendSCR>
 800dcd2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d022      	beq.n	800dd20 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800dcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcdc:	e07a      	b.n	800ddd4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00e      	beq.n	800dd0a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6819      	ldr	r1, [r3, #0]
 800dcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	f107 0208 	add.w	r2, r7, #8
 800dcf8:	18d4      	adds	r4, r2, r3
 800dcfa:	4608      	mov	r0, r1
 800dcfc:	f002 f92d 	bl	800ff5a <SDIO_ReadFIFO>
 800dd00:	4603      	mov	r3, r0
 800dd02:	6023      	str	r3, [r4, #0]
      index++;
 800dd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd06:	3301      	adds	r3, #1
 800dd08:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dd0a:	f7fb fd1f 	bl	800974c <HAL_GetTick>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd18:	d102      	bne.n	800dd20 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd1e:	e059      	b.n	800ddd4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd26:	f240 432a 	movw	r3, #1066	; 0x42a
 800dd2a:	4013      	ands	r3, r2
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d0d6      	beq.n	800dcde <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd36:	f003 0308 	and.w	r3, r3, #8
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d005      	beq.n	800dd4a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2208      	movs	r2, #8
 800dd44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd46:	2308      	movs	r3, #8
 800dd48:	e044      	b.n	800ddd4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd50:	f003 0302 	and.w	r3, r3, #2
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d005      	beq.n	800dd64 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2202      	movs	r2, #2
 800dd5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd60:	2302      	movs	r3, #2
 800dd62:	e037      	b.n	800ddd4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6a:	f003 0320 	and.w	r3, r3, #32
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d005      	beq.n	800dd7e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2220      	movs	r2, #32
 800dd78:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd7a:	2320      	movs	r3, #32
 800dd7c:	e02a      	b.n	800ddd4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd86:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	061a      	lsls	r2, r3, #24
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	021b      	lsls	r3, r3, #8
 800dd90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	0a1b      	lsrs	r3, r3, #8
 800dd9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	0e1b      	lsrs	r3, r3, #24
 800dda4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda8:	601a      	str	r2, [r3, #0]
    scr++;
 800ddaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddac:	3304      	adds	r3, #4
 800ddae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	061a      	lsls	r2, r3, #24
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	021b      	lsls	r3, r3, #8
 800ddb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddbc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	0a1b      	lsrs	r3, r3, #8
 800ddc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	0e1b      	lsrs	r3, r3, #24
 800ddcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	373c      	adds	r7, #60	; 0x3c
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd90      	pop	{r4, r7, pc}

0800dddc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d03f      	beq.n	800de76 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
 800ddfa:	e033      	b.n	800de64 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4618      	mov	r0, r3
 800de02:	f002 f8aa 	bl	800ff5a <SDIO_ReadFIFO>
 800de06:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	3301      	adds	r3, #1
 800de14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	3b01      	subs	r3, #1
 800de1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	0a1b      	lsrs	r3, r3, #8
 800de20:	b2da      	uxtb	r2, r3
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	3301      	adds	r3, #1
 800de2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	3b01      	subs	r3, #1
 800de30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	0c1b      	lsrs	r3, r3, #16
 800de36:	b2da      	uxtb	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	3301      	adds	r3, #1
 800de40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	3b01      	subs	r3, #1
 800de46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	0e1b      	lsrs	r3, r3, #24
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	3301      	adds	r3, #1
 800de56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	3b01      	subs	r3, #1
 800de5c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	3301      	adds	r3, #1
 800de62:	617b      	str	r3, [r7, #20]
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	2b07      	cmp	r3, #7
 800de68:	d9c8      	bls.n	800ddfc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	693a      	ldr	r2, [r7, #16]
 800de74:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800de76:	bf00      	nop
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b086      	sub	sp, #24
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a1b      	ldr	r3, [r3, #32]
 800de8a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d043      	beq.n	800df20 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800de98:	2300      	movs	r3, #0
 800de9a:	617b      	str	r3, [r7, #20]
 800de9c:	e037      	b.n	800df0e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3301      	adds	r3, #1
 800dea8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	3b01      	subs	r3, #1
 800deae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	021a      	lsls	r2, r3, #8
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	4313      	orrs	r3, r2
 800deba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3301      	adds	r3, #1
 800dec0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	041a      	lsls	r2, r3, #16
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	3301      	adds	r3, #1
 800ded8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	3b01      	subs	r3, #1
 800dede:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	061a      	lsls	r2, r3, #24
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	4313      	orrs	r3, r2
 800deea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3301      	adds	r3, #1
 800def0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	3b01      	subs	r3, #1
 800def6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f107 0208 	add.w	r2, r7, #8
 800df00:	4611      	mov	r1, r2
 800df02:	4618      	mov	r0, r3
 800df04:	f002 f836 	bl	800ff74 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	3301      	adds	r3, #1
 800df0c:	617b      	str	r3, [r7, #20]
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	2b07      	cmp	r3, #7
 800df12:	d9c4      	bls.n	800de9e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	693a      	ldr	r2, [r7, #16]
 800df1e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800df20:	bf00      	nop
 800df22:	3718      	adds	r7, #24
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	e056      	b.n	800dfe8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df46:	b2db      	uxtb	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d106      	bne.n	800df5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7f8 fefd 	bl	8006d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2202      	movs	r2, #2
 800df5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685a      	ldr	r2, [r3, #4]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	431a      	orrs	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	431a      	orrs	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	431a      	orrs	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	695b      	ldr	r3, [r3, #20]
 800df8c:	431a      	orrs	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df96:	431a      	orrs	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	431a      	orrs	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a1b      	ldr	r3, [r3, #32]
 800dfa2:	ea42 0103 	orr.w	r1, r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	430a      	orrs	r2, r1
 800dfb0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	699b      	ldr	r3, [r3, #24]
 800dfb6:	0c1b      	lsrs	r3, r3, #16
 800dfb8:	f003 0104 	and.w	r1, r3, #4
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	430a      	orrs	r2, r1
 800dfc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	69da      	ldr	r2, [r3, #28]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b088      	sub	sp, #32
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	603b      	str	r3, [r7, #0]
 800dffc:	4613      	mov	r3, r2
 800dffe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e000:	2300      	movs	r3, #0
 800e002:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d101      	bne.n	800e012 <HAL_SPI_Transmit+0x22>
 800e00e:	2302      	movs	r3, #2
 800e010:	e11e      	b.n	800e250 <HAL_SPI_Transmit+0x260>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2201      	movs	r2, #1
 800e016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e01a:	f7fb fb97 	bl	800974c <HAL_GetTick>
 800e01e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e020:	88fb      	ldrh	r3, [r7, #6]
 800e022:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d002      	beq.n	800e036 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e030:	2302      	movs	r3, #2
 800e032:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e034:	e103      	b.n	800e23e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <HAL_SPI_Transmit+0x52>
 800e03c:	88fb      	ldrh	r3, [r7, #6]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d102      	bne.n	800e048 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e042:	2301      	movs	r3, #1
 800e044:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e046:	e0fa      	b.n	800e23e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2203      	movs	r2, #3
 800e04c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2200      	movs	r2, #0
 800e054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	88fa      	ldrh	r2, [r7, #6]
 800e060:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	88fa      	ldrh	r2, [r7, #6]
 800e066:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2200      	movs	r2, #0
 800e078:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2200      	movs	r2, #0
 800e084:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e08e:	d107      	bne.n	800e0a0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e09e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0aa:	2b40      	cmp	r3, #64	; 0x40
 800e0ac:	d007      	beq.n	800e0be <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0c6:	d14b      	bne.n	800e160 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <HAL_SPI_Transmit+0xe6>
 800e0d0:	8afb      	ldrh	r3, [r7, #22]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d13e      	bne.n	800e154 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0da:	881a      	ldrh	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e6:	1c9a      	adds	r2, r3, #2
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e0fa:	e02b      	b.n	800e154 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	f003 0302 	and.w	r3, r3, #2
 800e106:	2b02      	cmp	r3, #2
 800e108:	d112      	bne.n	800e130 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e10e:	881a      	ldrh	r2, [r3, #0]
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e11a:	1c9a      	adds	r2, r3, #2
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e124:	b29b      	uxth	r3, r3
 800e126:	3b01      	subs	r3, #1
 800e128:	b29a      	uxth	r2, r3
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e12e:	e011      	b.n	800e154 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e130:	f7fb fb0c 	bl	800974c <HAL_GetTick>
 800e134:	4602      	mov	r2, r0
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	1ad3      	subs	r3, r2, r3
 800e13a:	683a      	ldr	r2, [r7, #0]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d803      	bhi.n	800e148 <HAL_SPI_Transmit+0x158>
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e146:	d102      	bne.n	800e14e <HAL_SPI_Transmit+0x15e>
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d102      	bne.n	800e154 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e14e:	2303      	movs	r3, #3
 800e150:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e152:	e074      	b.n	800e23e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e158:	b29b      	uxth	r3, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1ce      	bne.n	800e0fc <HAL_SPI_Transmit+0x10c>
 800e15e:	e04c      	b.n	800e1fa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <HAL_SPI_Transmit+0x17e>
 800e168:	8afb      	ldrh	r3, [r7, #22]
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d140      	bne.n	800e1f0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	330c      	adds	r3, #12
 800e178:	7812      	ldrb	r2, [r2, #0]
 800e17a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e180:	1c5a      	adds	r2, r3, #1
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	3b01      	subs	r3, #1
 800e18e:	b29a      	uxth	r2, r3
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e194:	e02c      	b.n	800e1f0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	f003 0302 	and.w	r3, r3, #2
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d113      	bne.n	800e1cc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	330c      	adds	r3, #12
 800e1ae:	7812      	ldrb	r2, [r2, #0]
 800e1b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b6:	1c5a      	adds	r2, r3, #1
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e1ca:	e011      	b.n	800e1f0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1cc:	f7fb fabe 	bl	800974c <HAL_GetTick>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d803      	bhi.n	800e1e4 <HAL_SPI_Transmit+0x1f4>
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e2:	d102      	bne.n	800e1ea <HAL_SPI_Transmit+0x1fa>
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d102      	bne.n	800e1f0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e1ee:	e026      	b.n	800e23e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1cd      	bne.n	800e196 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e1fa:	69ba      	ldr	r2, [r7, #24]
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f000 fba4 	bl	800e94c <SPI_EndRxTxTransaction>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d002      	beq.n	800e210 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2220      	movs	r2, #32
 800e20e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10a      	bne.n	800e22e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e218:	2300      	movs	r3, #0
 800e21a:	613b      	str	r3, [r7, #16]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	613b      	str	r3, [r7, #16]
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	613b      	str	r3, [r7, #16]
 800e22c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e232:	2b00      	cmp	r3, #0
 800e234:	d002      	beq.n	800e23c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e236:	2301      	movs	r3, #1
 800e238:	77fb      	strb	r3, [r7, #31]
 800e23a:	e000      	b.n	800e23e <HAL_SPI_Transmit+0x24e>
  }

error:
 800e23c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2200      	movs	r2, #0
 800e24a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e24e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3720      	adds	r7, #32
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b088      	sub	sp, #32
 800e25c:	af02      	add	r7, sp, #8
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	603b      	str	r3, [r7, #0]
 800e264:	4613      	mov	r3, r2
 800e266:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e274:	d112      	bne.n	800e29c <HAL_SPI_Receive+0x44>
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10e      	bne.n	800e29c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2204      	movs	r2, #4
 800e282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e286:	88fa      	ldrh	r2, [r7, #6]
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	9300      	str	r3, [sp, #0]
 800e28c:	4613      	mov	r3, r2
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	68b9      	ldr	r1, [r7, #8]
 800e292:	68f8      	ldr	r0, [r7, #12]
 800e294:	f000 f8e9 	bl	800e46a <HAL_SPI_TransmitReceive>
 800e298:	4603      	mov	r3, r0
 800e29a:	e0e2      	b.n	800e462 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d101      	bne.n	800e2aa <HAL_SPI_Receive+0x52>
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	e0db      	b.n	800e462 <HAL_SPI_Receive+0x20a>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2b2:	f7fb fa4b 	bl	800974c <HAL_GetTick>
 800e2b6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d002      	beq.n	800e2ca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e2c8:	e0c2      	b.n	800e450 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <HAL_SPI_Receive+0x7e>
 800e2d0:	88fb      	ldrh	r3, [r7, #6]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d102      	bne.n	800e2dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e2da:	e0b9      	b.n	800e450 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2204      	movs	r2, #4
 800e2e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	88fa      	ldrh	r2, [r7, #6]
 800e2f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	88fa      	ldrh	r2, [r7, #6]
 800e2fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2200      	movs	r2, #0
 800e300:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2200      	movs	r2, #0
 800e306:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e322:	d107      	bne.n	800e334 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e332:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e33e:	2b40      	cmp	r3, #64	; 0x40
 800e340:	d007      	beq.n	800e352 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e350:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d162      	bne.n	800e420 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e35a:	e02e      	b.n	800e3ba <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	f003 0301 	and.w	r3, r3, #1
 800e366:	2b01      	cmp	r3, #1
 800e368:	d115      	bne.n	800e396 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f103 020c 	add.w	r2, r3, #12
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e376:	7812      	ldrb	r2, [r2, #0]
 800e378:	b2d2      	uxtb	r2, r2
 800e37a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	3b01      	subs	r3, #1
 800e38e:	b29a      	uxth	r2, r3
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e394:	e011      	b.n	800e3ba <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e396:	f7fb f9d9 	bl	800974c <HAL_GetTick>
 800e39a:	4602      	mov	r2, r0
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	683a      	ldr	r2, [r7, #0]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d803      	bhi.n	800e3ae <HAL_SPI_Receive+0x156>
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ac:	d102      	bne.n	800e3b4 <HAL_SPI_Receive+0x15c>
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d102      	bne.n	800e3ba <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e3b4:	2303      	movs	r3, #3
 800e3b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e3b8:	e04a      	b.n	800e450 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1cb      	bne.n	800e35c <HAL_SPI_Receive+0x104>
 800e3c4:	e031      	b.n	800e42a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	f003 0301 	and.w	r3, r3, #1
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d113      	bne.n	800e3fc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68da      	ldr	r2, [r3, #12]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3de:	b292      	uxth	r2, r2
 800e3e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e6:	1c9a      	adds	r2, r3, #2
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3fa:	e011      	b.n	800e420 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3fc:	f7fb f9a6 	bl	800974c <HAL_GetTick>
 800e400:	4602      	mov	r2, r0
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d803      	bhi.n	800e414 <HAL_SPI_Receive+0x1bc>
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e412:	d102      	bne.n	800e41a <HAL_SPI_Receive+0x1c2>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e41a:	2303      	movs	r3, #3
 800e41c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e41e:	e017      	b.n	800e450 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e424:	b29b      	uxth	r3, r3
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1cd      	bne.n	800e3c6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e42a:	693a      	ldr	r2, [r7, #16]
 800e42c:	6839      	ldr	r1, [r7, #0]
 800e42e:	68f8      	ldr	r0, [r7, #12]
 800e430:	f000 fa27 	bl	800e882 <SPI_EndRxTransaction>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2220      	movs	r2, #32
 800e43e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e444:	2b00      	cmp	r3, #0
 800e446:	d002      	beq.n	800e44e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	75fb      	strb	r3, [r7, #23]
 800e44c:	e000      	b.n	800e450 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e44e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2201      	movs	r2, #1
 800e454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e460:	7dfb      	ldrb	r3, [r7, #23]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3718      	adds	r7, #24
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b08c      	sub	sp, #48	; 0x30
 800e46e:	af00      	add	r7, sp, #0
 800e470:	60f8      	str	r0, [r7, #12]
 800e472:	60b9      	str	r1, [r7, #8]
 800e474:	607a      	str	r2, [r7, #4]
 800e476:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e478:	2301      	movs	r3, #1
 800e47a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e47c:	2300      	movs	r3, #0
 800e47e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d101      	bne.n	800e490 <HAL_SPI_TransmitReceive+0x26>
 800e48c:	2302      	movs	r3, #2
 800e48e:	e18a      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x33c>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2201      	movs	r2, #1
 800e494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e498:	f7fb f958 	bl	800974c <HAL_GetTick>
 800e49c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e4ae:	887b      	ldrh	r3, [r7, #2]
 800e4b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d00f      	beq.n	800e4da <HAL_SPI_TransmitReceive+0x70>
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4c0:	d107      	bne.n	800e4d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d103      	bne.n	800e4d2 <HAL_SPI_TransmitReceive+0x68>
 800e4ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4ce:	2b04      	cmp	r3, #4
 800e4d0:	d003      	beq.n	800e4da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e4d2:	2302      	movs	r3, #2
 800e4d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e4d8:	e15b      	b.n	800e792 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d005      	beq.n	800e4ec <HAL_SPI_TransmitReceive+0x82>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d002      	beq.n	800e4ec <HAL_SPI_TransmitReceive+0x82>
 800e4e6:	887b      	ldrh	r3, [r7, #2]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d103      	bne.n	800e4f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e4f2:	e14e      	b.n	800e792 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	2b04      	cmp	r3, #4
 800e4fe:	d003      	beq.n	800e508 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2205      	movs	r2, #5
 800e504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	887a      	ldrh	r2, [r7, #2]
 800e518:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	887a      	ldrh	r2, [r7, #2]
 800e51e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	887a      	ldrh	r2, [r7, #2]
 800e52a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	887a      	ldrh	r2, [r7, #2]
 800e530:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e548:	2b40      	cmp	r3, #64	; 0x40
 800e54a:	d007      	beq.n	800e55c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e55a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e564:	d178      	bne.n	800e658 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <HAL_SPI_TransmitReceive+0x10a>
 800e56e:	8b7b      	ldrh	r3, [r7, #26]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d166      	bne.n	800e642 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e578:	881a      	ldrh	r2, [r3, #0]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e584:	1c9a      	adds	r2, r3, #2
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e58e:	b29b      	uxth	r3, r3
 800e590:	3b01      	subs	r3, #1
 800e592:	b29a      	uxth	r2, r3
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e598:	e053      	b.n	800e642 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	f003 0302 	and.w	r3, r3, #2
 800e5a4:	2b02      	cmp	r3, #2
 800e5a6:	d11b      	bne.n	800e5e0 <HAL_SPI_TransmitReceive+0x176>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d016      	beq.n	800e5e0 <HAL_SPI_TransmitReceive+0x176>
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d113      	bne.n	800e5e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5bc:	881a      	ldrh	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5c8:	1c9a      	adds	r2, r3, #2
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f003 0301 	and.w	r3, r3, #1
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	d119      	bne.n	800e622 <HAL_SPI_TransmitReceive+0x1b8>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d014      	beq.n	800e622 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	68da      	ldr	r2, [r3, #12]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e602:	b292      	uxth	r2, r2
 800e604:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60a:	1c9a      	adds	r2, r3, #2
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e614:	b29b      	uxth	r3, r3
 800e616:	3b01      	subs	r3, #1
 800e618:	b29a      	uxth	r2, r3
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e61e:	2301      	movs	r3, #1
 800e620:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e622:	f7fb f893 	bl	800974c <HAL_GetTick>
 800e626:	4602      	mov	r2, r0
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e62e:	429a      	cmp	r2, r3
 800e630:	d807      	bhi.n	800e642 <HAL_SPI_TransmitReceive+0x1d8>
 800e632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e638:	d003      	beq.n	800e642 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e63a:	2303      	movs	r3, #3
 800e63c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e640:	e0a7      	b.n	800e792 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e646:	b29b      	uxth	r3, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1a6      	bne.n	800e59a <HAL_SPI_TransmitReceive+0x130>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e650:	b29b      	uxth	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1a1      	bne.n	800e59a <HAL_SPI_TransmitReceive+0x130>
 800e656:	e07c      	b.n	800e752 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d002      	beq.n	800e666 <HAL_SPI_TransmitReceive+0x1fc>
 800e660:	8b7b      	ldrh	r3, [r7, #26]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d16b      	bne.n	800e73e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	330c      	adds	r3, #12
 800e670:	7812      	ldrb	r2, [r2, #0]
 800e672:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e682:	b29b      	uxth	r3, r3
 800e684:	3b01      	subs	r3, #1
 800e686:	b29a      	uxth	r2, r3
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e68c:	e057      	b.n	800e73e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	f003 0302 	and.w	r3, r3, #2
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d11c      	bne.n	800e6d6 <HAL_SPI_TransmitReceive+0x26c>
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d017      	beq.n	800e6d6 <HAL_SPI_TransmitReceive+0x26c>
 800e6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d114      	bne.n	800e6d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	330c      	adds	r3, #12
 800e6b6:	7812      	ldrb	r2, [r2, #0]
 800e6b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6be:	1c5a      	adds	r2, r3, #1
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	f003 0301 	and.w	r3, r3, #1
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d119      	bne.n	800e718 <HAL_SPI_TransmitReceive+0x2ae>
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d014      	beq.n	800e718 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68da      	ldr	r2, [r3, #12]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f8:	b2d2      	uxtb	r2, r2
 800e6fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e700:	1c5a      	adds	r2, r3, #1
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	3b01      	subs	r3, #1
 800e70e:	b29a      	uxth	r2, r3
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e714:	2301      	movs	r3, #1
 800e716:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e718:	f7fb f818 	bl	800974c <HAL_GetTick>
 800e71c:	4602      	mov	r2, r0
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e724:	429a      	cmp	r2, r3
 800e726:	d803      	bhi.n	800e730 <HAL_SPI_TransmitReceive+0x2c6>
 800e728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e72e:	d102      	bne.n	800e736 <HAL_SPI_TransmitReceive+0x2cc>
 800e730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e732:	2b00      	cmp	r3, #0
 800e734:	d103      	bne.n	800e73e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e736:	2303      	movs	r3, #3
 800e738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e73c:	e029      	b.n	800e792 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e742:	b29b      	uxth	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d1a2      	bne.n	800e68e <HAL_SPI_TransmitReceive+0x224>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d19d      	bne.n	800e68e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e754:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f000 f8f8 	bl	800e94c <SPI_EndRxTxTransaction>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d006      	beq.n	800e770 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2220      	movs	r2, #32
 800e76c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e76e:	e010      	b.n	800e792 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10b      	bne.n	800e790 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e778:	2300      	movs	r3, #0
 800e77a:	617b      	str	r3, [r7, #20]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	617b      	str	r3, [r7, #20]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	617b      	str	r3, [r7, #20]
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	e000      	b.n	800e792 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e790:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2201      	movs	r2, #1
 800e796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e7a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3730      	adds	r7, #48	; 0x30
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b084      	sub	sp, #16
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	60f8      	str	r0, [r7, #12]
 800e7b6:	60b9      	str	r1, [r7, #8]
 800e7b8:	603b      	str	r3, [r7, #0]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7be:	e04c      	b.n	800e85a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c6:	d048      	beq.n	800e85a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e7c8:	f7fa ffc0 	bl	800974c <HAL_GetTick>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d902      	bls.n	800e7de <SPI_WaitFlagStateUntilTimeout+0x30>
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d13d      	bne.n	800e85a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e7ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7f6:	d111      	bne.n	800e81c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e800:	d004      	beq.n	800e80c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e80a:	d107      	bne.n	800e81c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e81a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e824:	d10f      	bne.n	800e846 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e834:	601a      	str	r2, [r3, #0]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2200      	movs	r2, #0
 800e852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e856:	2303      	movs	r3, #3
 800e858:	e00f      	b.n	800e87a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	689a      	ldr	r2, [r3, #8]
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	4013      	ands	r3, r2
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	429a      	cmp	r2, r3
 800e868:	bf0c      	ite	eq
 800e86a:	2301      	moveq	r3, #1
 800e86c:	2300      	movne	r3, #0
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	461a      	mov	r2, r3
 800e872:	79fb      	ldrb	r3, [r7, #7]
 800e874:	429a      	cmp	r2, r3
 800e876:	d1a3      	bne.n	800e7c0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b086      	sub	sp, #24
 800e886:	af02      	add	r7, sp, #8
 800e888:	60f8      	str	r0, [r7, #12]
 800e88a:	60b9      	str	r1, [r7, #8]
 800e88c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e896:	d111      	bne.n	800e8bc <SPI_EndRxTransaction+0x3a>
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8a0:	d004      	beq.n	800e8ac <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	689b      	ldr	r3, [r3, #8]
 800e8a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8aa:	d107      	bne.n	800e8bc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8ba:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8c4:	d12a      	bne.n	800e91c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8ce:	d012      	beq.n	800e8f6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2180      	movs	r1, #128	; 0x80
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f7ff ff67 	bl	800e7ae <SPI_WaitFlagStateUntilTimeout>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d02d      	beq.n	800e942 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ea:	f043 0220 	orr.w	r2, r3, #32
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	e026      	b.n	800e944 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	9300      	str	r3, [sp, #0]
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	2101      	movs	r1, #1
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff ff54 	bl	800e7ae <SPI_WaitFlagStateUntilTimeout>
 800e906:	4603      	mov	r3, r0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d01a      	beq.n	800e942 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e910:	f043 0220 	orr.w	r2, r3, #32
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e918:	2303      	movs	r3, #3
 800e91a:	e013      	b.n	800e944 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	2200      	movs	r2, #0
 800e924:	2101      	movs	r1, #1
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f7ff ff41 	bl	800e7ae <SPI_WaitFlagStateUntilTimeout>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d007      	beq.n	800e942 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e936:	f043 0220 	orr.w	r2, r3, #32
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e93e:	2303      	movs	r3, #3
 800e940:	e000      	b.n	800e944 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b088      	sub	sp, #32
 800e950:	af02      	add	r7, sp, #8
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e958:	4b1b      	ldr	r3, [pc, #108]	; (800e9c8 <SPI_EndRxTxTransaction+0x7c>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a1b      	ldr	r2, [pc, #108]	; (800e9cc <SPI_EndRxTxTransaction+0x80>)
 800e95e:	fba2 2303 	umull	r2, r3, r2, r3
 800e962:	0d5b      	lsrs	r3, r3, #21
 800e964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e968:	fb02 f303 	mul.w	r3, r2, r3
 800e96c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e976:	d112      	bne.n	800e99e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	2200      	movs	r2, #0
 800e980:	2180      	movs	r1, #128	; 0x80
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f7ff ff13 	bl	800e7ae <SPI_WaitFlagStateUntilTimeout>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d016      	beq.n	800e9bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e992:	f043 0220 	orr.w	r2, r3, #32
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e99a:	2303      	movs	r3, #3
 800e99c:	e00f      	b.n	800e9be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00a      	beq.n	800e9ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9b4:	2b80      	cmp	r3, #128	; 0x80
 800e9b6:	d0f2      	beq.n	800e99e <SPI_EndRxTxTransaction+0x52>
 800e9b8:	e000      	b.n	800e9bc <SPI_EndRxTxTransaction+0x70>
        break;
 800e9ba:	bf00      	nop
  }

  return HAL_OK;
 800e9bc:	2300      	movs	r3, #0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3718      	adds	r7, #24
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20000000 	.word	0x20000000
 800e9cc:	165e9f81 	.word	0x165e9f81

0800e9d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d101      	bne.n	800e9e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e01d      	b.n	800ea1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d106      	bne.n	800e9fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7f8 fa68 	bl	8006ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2202      	movs	r2, #2
 800ea00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	4610      	mov	r0, r2
 800ea10:	f000 fb56 	bl	800f0c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2201      	movs	r2, #1
 800ea18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea26:	b480      	push	{r7}
 800ea28:	b085      	sub	sp, #20
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	68da      	ldr	r2, [r3, #12]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f042 0201 	orr.w	r2, r2, #1
 800ea3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	f003 0307 	and.w	r3, r3, #7
 800ea48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2b06      	cmp	r3, #6
 800ea4e:	d007      	beq.n	800ea60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f042 0201 	orr.w	r2, r2, #1
 800ea5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3714      	adds	r7, #20
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b082      	sub	sp, #8
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d101      	bne.n	800ea80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e01d      	b.n	800eabc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d106      	bne.n	800ea9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7f8 f9a5 	bl	8006de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4610      	mov	r0, r2
 800eaae:	f000 fb07 	bl	800f0c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2201      	movs	r2, #1
 800ead4:	6839      	ldr	r1, [r7, #0]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 fd42 	bl	800f560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a15      	ldr	r2, [pc, #84]	; (800eb38 <HAL_TIM_PWM_Start+0x74>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d004      	beq.n	800eaf0 <HAL_TIM_PWM_Start+0x2c>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a14      	ldr	r2, [pc, #80]	; (800eb3c <HAL_TIM_PWM_Start+0x78>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d101      	bne.n	800eaf4 <HAL_TIM_PWM_Start+0x30>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e000      	b.n	800eaf6 <HAL_TIM_PWM_Start+0x32>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d007      	beq.n	800eb0a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eb08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	f003 0307 	and.w	r3, r3, #7
 800eb14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2b06      	cmp	r3, #6
 800eb1a:	d007      	beq.n	800eb2c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f042 0201 	orr.w	r2, r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	40010000 	.word	0x40010000
 800eb3c:	40010400 	.word	0x40010400

0800eb40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d101      	bne.n	800eb54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800eb50:	2301      	movs	r3, #1
 800eb52:	e083      	b.n	800ec5c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d106      	bne.n	800eb6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7f8 fa3f 	bl	8006fec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2202      	movs	r2, #2
 800eb72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	6812      	ldr	r2, [r2, #0]
 800eb80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb84:	f023 0307 	bic.w	r3, r3, #7
 800eb88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	3304      	adds	r3, #4
 800eb92:	4619      	mov	r1, r3
 800eb94:	4610      	mov	r0, r2
 800eb96:	f000 fa93 	bl	800f0c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	699b      	ldr	r3, [r3, #24]
 800eba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	6a1b      	ldr	r3, [r3, #32]
 800ebb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebc2:	f023 0303 	bic.w	r3, r3, #3
 800ebc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	689a      	ldr	r2, [r3, #8]
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	021b      	lsls	r3, r3, #8
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ebe0:	f023 030c 	bic.w	r3, r3, #12
 800ebe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ebec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ebf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	68da      	ldr	r2, [r3, #12]
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	69db      	ldr	r3, [r3, #28]
 800ebfa:	021b      	lsls	r3, r3, #8
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	693a      	ldr	r2, [r7, #16]
 800ec00:	4313      	orrs	r3, r2
 800ec02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	011a      	lsls	r2, r3, #4
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	031b      	lsls	r3, r3, #12
 800ec10:	4313      	orrs	r3, r2
 800ec12:	693a      	ldr	r2, [r7, #16]
 800ec14:	4313      	orrs	r3, r2
 800ec16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ec1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ec26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	685a      	ldr	r2, [r3, #4]
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	011b      	lsls	r3, r3, #4
 800ec32:	4313      	orrs	r3, r2
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	4313      	orrs	r3, r2
 800ec38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	697a      	ldr	r2, [r7, #20]
 800ec40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	693a      	ldr	r2, [r7, #16]
 800ec48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3718      	adds	r7, #24
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d002      	beq.n	800ec7a <HAL_TIM_Encoder_Start+0x16>
 800ec74:	2b04      	cmp	r3, #4
 800ec76:	d008      	beq.n	800ec8a <HAL_TIM_Encoder_Start+0x26>
 800ec78:	e00f      	b.n	800ec9a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	2100      	movs	r1, #0
 800ec82:	4618      	mov	r0, r3
 800ec84:	f000 fc6c 	bl	800f560 <TIM_CCxChannelCmd>
      break;
 800ec88:	e016      	b.n	800ecb8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	2104      	movs	r1, #4
 800ec92:	4618      	mov	r0, r3
 800ec94:	f000 fc64 	bl	800f560 <TIM_CCxChannelCmd>
      break;
 800ec98:	e00e      	b.n	800ecb8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	2100      	movs	r1, #0
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 fc5c 	bl	800f560 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2201      	movs	r2, #1
 800ecae:	2104      	movs	r1, #4
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f000 fc55 	bl	800f560 <TIM_CCxChannelCmd>
      break;
 800ecb6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f042 0201 	orr.w	r2, r2, #1
 800ecc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b082      	sub	sp, #8
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	f003 0302 	and.w	r3, r3, #2
 800ece4:	2b02      	cmp	r3, #2
 800ece6:	d122      	bne.n	800ed2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	f003 0302 	and.w	r3, r3, #2
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	d11b      	bne.n	800ed2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f06f 0202 	mvn.w	r2, #2
 800ecfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	699b      	ldr	r3, [r3, #24]
 800ed0c:	f003 0303 	and.w	r3, r3, #3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d003      	beq.n	800ed1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f9b5 	bl	800f084 <HAL_TIM_IC_CaptureCallback>
 800ed1a:	e005      	b.n	800ed28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 f9a7 	bl	800f070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 f9b8 	bl	800f098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	f003 0304 	and.w	r3, r3, #4
 800ed38:	2b04      	cmp	r3, #4
 800ed3a:	d122      	bne.n	800ed82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	f003 0304 	and.w	r3, r3, #4
 800ed46:	2b04      	cmp	r3, #4
 800ed48:	d11b      	bne.n	800ed82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f06f 0204 	mvn.w	r2, #4
 800ed52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2202      	movs	r2, #2
 800ed58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	699b      	ldr	r3, [r3, #24]
 800ed60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d003      	beq.n	800ed70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 f98b 	bl	800f084 <HAL_TIM_IC_CaptureCallback>
 800ed6e:	e005      	b.n	800ed7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 f97d 	bl	800f070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f98e 	bl	800f098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	691b      	ldr	r3, [r3, #16]
 800ed88:	f003 0308 	and.w	r3, r3, #8
 800ed8c:	2b08      	cmp	r3, #8
 800ed8e:	d122      	bne.n	800edd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	f003 0308 	and.w	r3, r3, #8
 800ed9a:	2b08      	cmp	r3, #8
 800ed9c:	d11b      	bne.n	800edd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f06f 0208 	mvn.w	r2, #8
 800eda6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2204      	movs	r2, #4
 800edac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	69db      	ldr	r3, [r3, #28]
 800edb4:	f003 0303 	and.w	r3, r3, #3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d003      	beq.n	800edc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f961 	bl	800f084 <HAL_TIM_IC_CaptureCallback>
 800edc2:	e005      	b.n	800edd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 f953 	bl	800f070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f964 	bl	800f098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	f003 0310 	and.w	r3, r3, #16
 800ede0:	2b10      	cmp	r3, #16
 800ede2:	d122      	bne.n	800ee2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	f003 0310 	and.w	r3, r3, #16
 800edee:	2b10      	cmp	r3, #16
 800edf0:	d11b      	bne.n	800ee2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f06f 0210 	mvn.w	r2, #16
 800edfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2208      	movs	r2, #8
 800ee00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	69db      	ldr	r3, [r3, #28]
 800ee08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d003      	beq.n	800ee18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 f937 	bl	800f084 <HAL_TIM_IC_CaptureCallback>
 800ee16:	e005      	b.n	800ee24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f000 f929 	bl	800f070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f000 f93a 	bl	800f098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	691b      	ldr	r3, [r3, #16]
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d10e      	bne.n	800ee56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	f003 0301 	and.w	r3, r3, #1
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d107      	bne.n	800ee56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f06f 0201 	mvn.w	r2, #1
 800ee4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7f6 fdb5 	bl	80059c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	691b      	ldr	r3, [r3, #16]
 800ee5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee60:	2b80      	cmp	r3, #128	; 0x80
 800ee62:	d10e      	bne.n	800ee82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee6e:	2b80      	cmp	r3, #128	; 0x80
 800ee70:	d107      	bne.n	800ee82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ee7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 fc6d 	bl	800f75c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee8c:	2b40      	cmp	r3, #64	; 0x40
 800ee8e:	d10e      	bne.n	800eeae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee9a:	2b40      	cmp	r3, #64	; 0x40
 800ee9c:	d107      	bne.n	800eeae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f000 f8ff 	bl	800f0ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	f003 0320 	and.w	r3, r3, #32
 800eeb8:	2b20      	cmp	r3, #32
 800eeba:	d10e      	bne.n	800eeda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	f003 0320 	and.w	r3, r3, #32
 800eec6:	2b20      	cmp	r3, #32
 800eec8:	d107      	bne.n	800eeda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f06f 0220 	mvn.w	r2, #32
 800eed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 fc37 	bl	800f748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eeda:	bf00      	nop
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
	...

0800eee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d101      	bne.n	800eefe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800eefa:	2302      	movs	r3, #2
 800eefc:	e0b4      	b.n	800f068 <HAL_TIM_PWM_ConfigChannel+0x184>
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2201      	movs	r2, #1
 800ef02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2202      	movs	r2, #2
 800ef0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2b0c      	cmp	r3, #12
 800ef12:	f200 809f 	bhi.w	800f054 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ef16:	a201      	add	r2, pc, #4	; (adr r2, 800ef1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ef18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1c:	0800ef51 	.word	0x0800ef51
 800ef20:	0800f055 	.word	0x0800f055
 800ef24:	0800f055 	.word	0x0800f055
 800ef28:	0800f055 	.word	0x0800f055
 800ef2c:	0800ef91 	.word	0x0800ef91
 800ef30:	0800f055 	.word	0x0800f055
 800ef34:	0800f055 	.word	0x0800f055
 800ef38:	0800f055 	.word	0x0800f055
 800ef3c:	0800efd3 	.word	0x0800efd3
 800ef40:	0800f055 	.word	0x0800f055
 800ef44:	0800f055 	.word	0x0800f055
 800ef48:	0800f055 	.word	0x0800f055
 800ef4c:	0800f013 	.word	0x0800f013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	68b9      	ldr	r1, [r7, #8]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 f952 	bl	800f200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	699a      	ldr	r2, [r3, #24]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f042 0208 	orr.w	r2, r2, #8
 800ef6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	699a      	ldr	r2, [r3, #24]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f022 0204 	bic.w	r2, r2, #4
 800ef7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6999      	ldr	r1, [r3, #24]
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	691a      	ldr	r2, [r3, #16]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	430a      	orrs	r2, r1
 800ef8c:	619a      	str	r2, [r3, #24]
      break;
 800ef8e:	e062      	b.n	800f056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68b9      	ldr	r1, [r7, #8]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f000 f9a2 	bl	800f2e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	699a      	ldr	r2, [r3, #24]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	699a      	ldr	r2, [r3, #24]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6999      	ldr	r1, [r3, #24]
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	021a      	lsls	r2, r3, #8
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	430a      	orrs	r2, r1
 800efce:	619a      	str	r2, [r3, #24]
      break;
 800efd0:	e041      	b.n	800f056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68b9      	ldr	r1, [r7, #8]
 800efd8:	4618      	mov	r0, r3
 800efda:	f000 f9f7 	bl	800f3cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	69da      	ldr	r2, [r3, #28]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f042 0208 	orr.w	r2, r2, #8
 800efec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	69da      	ldr	r2, [r3, #28]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f022 0204 	bic.w	r2, r2, #4
 800effc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	69d9      	ldr	r1, [r3, #28]
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	691a      	ldr	r2, [r3, #16]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	430a      	orrs	r2, r1
 800f00e:	61da      	str	r2, [r3, #28]
      break;
 800f010:	e021      	b.n	800f056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68b9      	ldr	r1, [r7, #8]
 800f018:	4618      	mov	r0, r3
 800f01a:	f000 fa4b 	bl	800f4b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	69da      	ldr	r2, [r3, #28]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f02c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	69da      	ldr	r2, [r3, #28]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f03c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	69d9      	ldr	r1, [r3, #28]
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	691b      	ldr	r3, [r3, #16]
 800f048:	021a      	lsls	r2, r3, #8
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	430a      	orrs	r2, r1
 800f050:	61da      	str	r2, [r3, #28]
      break;
 800f052:	e000      	b.n	800f056 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f054:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2201      	movs	r2, #1
 800f05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2200      	movs	r2, #0
 800f062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f078:	bf00      	nop
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f08c:	bf00      	nop
 800f08e:	370c      	adds	r7, #12
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f0a0:	bf00      	nop
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f0b4:	bf00      	nop
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a40      	ldr	r2, [pc, #256]	; (800f1d4 <TIM_Base_SetConfig+0x114>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d013      	beq.n	800f100 <TIM_Base_SetConfig+0x40>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0de:	d00f      	beq.n	800f100 <TIM_Base_SetConfig+0x40>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a3d      	ldr	r2, [pc, #244]	; (800f1d8 <TIM_Base_SetConfig+0x118>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d00b      	beq.n	800f100 <TIM_Base_SetConfig+0x40>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4a3c      	ldr	r2, [pc, #240]	; (800f1dc <TIM_Base_SetConfig+0x11c>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d007      	beq.n	800f100 <TIM_Base_SetConfig+0x40>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	4a3b      	ldr	r2, [pc, #236]	; (800f1e0 <TIM_Base_SetConfig+0x120>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d003      	beq.n	800f100 <TIM_Base_SetConfig+0x40>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	4a3a      	ldr	r2, [pc, #232]	; (800f1e4 <TIM_Base_SetConfig+0x124>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d108      	bne.n	800f112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	4313      	orrs	r3, r2
 800f110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4a2f      	ldr	r2, [pc, #188]	; (800f1d4 <TIM_Base_SetConfig+0x114>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d02b      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f120:	d027      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4a2c      	ldr	r2, [pc, #176]	; (800f1d8 <TIM_Base_SetConfig+0x118>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d023      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4a2b      	ldr	r2, [pc, #172]	; (800f1dc <TIM_Base_SetConfig+0x11c>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d01f      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4a2a      	ldr	r2, [pc, #168]	; (800f1e0 <TIM_Base_SetConfig+0x120>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d01b      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a29      	ldr	r2, [pc, #164]	; (800f1e4 <TIM_Base_SetConfig+0x124>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d017      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a28      	ldr	r2, [pc, #160]	; (800f1e8 <TIM_Base_SetConfig+0x128>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d013      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4a27      	ldr	r2, [pc, #156]	; (800f1ec <TIM_Base_SetConfig+0x12c>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d00f      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4a26      	ldr	r2, [pc, #152]	; (800f1f0 <TIM_Base_SetConfig+0x130>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d00b      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4a25      	ldr	r2, [pc, #148]	; (800f1f4 <TIM_Base_SetConfig+0x134>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d007      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4a24      	ldr	r2, [pc, #144]	; (800f1f8 <TIM_Base_SetConfig+0x138>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d003      	beq.n	800f172 <TIM_Base_SetConfig+0xb2>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	4a23      	ldr	r2, [pc, #140]	; (800f1fc <TIM_Base_SetConfig+0x13c>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	d108      	bne.n	800f184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	4313      	orrs	r3, r2
 800f182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	695b      	ldr	r3, [r3, #20]
 800f18e:	4313      	orrs	r3, r2
 800f190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	689a      	ldr	r2, [r3, #8]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a0a      	ldr	r2, [pc, #40]	; (800f1d4 <TIM_Base_SetConfig+0x114>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d003      	beq.n	800f1b8 <TIM_Base_SetConfig+0xf8>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a0c      	ldr	r2, [pc, #48]	; (800f1e4 <TIM_Base_SetConfig+0x124>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d103      	bne.n	800f1c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	691a      	ldr	r2, [r3, #16]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	615a      	str	r2, [r3, #20]
}
 800f1c6:	bf00      	nop
 800f1c8:	3714      	adds	r7, #20
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	40010000 	.word	0x40010000
 800f1d8:	40000400 	.word	0x40000400
 800f1dc:	40000800 	.word	0x40000800
 800f1e0:	40000c00 	.word	0x40000c00
 800f1e4:	40010400 	.word	0x40010400
 800f1e8:	40014000 	.word	0x40014000
 800f1ec:	40014400 	.word	0x40014400
 800f1f0:	40014800 	.word	0x40014800
 800f1f4:	40001800 	.word	0x40001800
 800f1f8:	40001c00 	.word	0x40001c00
 800f1fc:	40002000 	.word	0x40002000

0800f200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f200:	b480      	push	{r7}
 800f202:	b087      	sub	sp, #28
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	f023 0201 	bic.w	r2, r3, #1
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	699b      	ldr	r3, [r3, #24]
 800f226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f023 0303 	bic.w	r3, r3, #3
 800f236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	4313      	orrs	r3, r2
 800f240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	f023 0302 	bic.w	r3, r3, #2
 800f248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	689b      	ldr	r3, [r3, #8]
 800f24e:	697a      	ldr	r2, [r7, #20]
 800f250:	4313      	orrs	r3, r2
 800f252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4a20      	ldr	r2, [pc, #128]	; (800f2d8 <TIM_OC1_SetConfig+0xd8>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d003      	beq.n	800f264 <TIM_OC1_SetConfig+0x64>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a1f      	ldr	r2, [pc, #124]	; (800f2dc <TIM_OC1_SetConfig+0xdc>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d10c      	bne.n	800f27e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	f023 0308 	bic.w	r3, r3, #8
 800f26a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	697a      	ldr	r2, [r7, #20]
 800f272:	4313      	orrs	r3, r2
 800f274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	f023 0304 	bic.w	r3, r3, #4
 800f27c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4a15      	ldr	r2, [pc, #84]	; (800f2d8 <TIM_OC1_SetConfig+0xd8>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d003      	beq.n	800f28e <TIM_OC1_SetConfig+0x8e>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	4a14      	ldr	r2, [pc, #80]	; (800f2dc <TIM_OC1_SetConfig+0xdc>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d111      	bne.n	800f2b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f29c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	695b      	ldr	r3, [r3, #20]
 800f2a2:	693a      	ldr	r2, [r7, #16]
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	699b      	ldr	r3, [r3, #24]
 800f2ac:	693a      	ldr	r2, [r7, #16]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	693a      	ldr	r2, [r7, #16]
 800f2b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	68fa      	ldr	r2, [r7, #12]
 800f2bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	685a      	ldr	r2, [r3, #4]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	697a      	ldr	r2, [r7, #20]
 800f2ca:	621a      	str	r2, [r3, #32]
}
 800f2cc:	bf00      	nop
 800f2ce:	371c      	adds	r7, #28
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr
 800f2d8:	40010000 	.word	0x40010000
 800f2dc:	40010400 	.word	0x40010400

0800f2e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b087      	sub	sp, #28
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6a1b      	ldr	r3, [r3, #32]
 800f2ee:	f023 0210 	bic.w	r2, r3, #16
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6a1b      	ldr	r3, [r3, #32]
 800f2fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	699b      	ldr	r3, [r3, #24]
 800f306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f30e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	021b      	lsls	r3, r3, #8
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	4313      	orrs	r3, r2
 800f322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	f023 0320 	bic.w	r3, r3, #32
 800f32a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	011b      	lsls	r3, r3, #4
 800f332:	697a      	ldr	r2, [r7, #20]
 800f334:	4313      	orrs	r3, r2
 800f336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4a22      	ldr	r2, [pc, #136]	; (800f3c4 <TIM_OC2_SetConfig+0xe4>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d003      	beq.n	800f348 <TIM_OC2_SetConfig+0x68>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a21      	ldr	r2, [pc, #132]	; (800f3c8 <TIM_OC2_SetConfig+0xe8>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d10d      	bne.n	800f364 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f34e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	011b      	lsls	r3, r3, #4
 800f356:	697a      	ldr	r2, [r7, #20]
 800f358:	4313      	orrs	r3, r2
 800f35a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4a17      	ldr	r2, [pc, #92]	; (800f3c4 <TIM_OC2_SetConfig+0xe4>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d003      	beq.n	800f374 <TIM_OC2_SetConfig+0x94>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4a16      	ldr	r2, [pc, #88]	; (800f3c8 <TIM_OC2_SetConfig+0xe8>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d113      	bne.n	800f39c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f37a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	695b      	ldr	r3, [r3, #20]
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	4313      	orrs	r3, r2
 800f38e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	693a      	ldr	r2, [r7, #16]
 800f398:	4313      	orrs	r3, r2
 800f39a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	693a      	ldr	r2, [r7, #16]
 800f3a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	621a      	str	r2, [r3, #32]
}
 800f3b6:	bf00      	nop
 800f3b8:	371c      	adds	r7, #28
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr
 800f3c2:	bf00      	nop
 800f3c4:	40010000 	.word	0x40010000
 800f3c8:	40010400 	.word	0x40010400

0800f3cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b087      	sub	sp, #28
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a1b      	ldr	r3, [r3, #32]
 800f3da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a1b      	ldr	r3, [r3, #32]
 800f3e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	69db      	ldr	r3, [r3, #28]
 800f3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f023 0303 	bic.w	r3, r3, #3
 800f402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	4313      	orrs	r3, r2
 800f40c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	021b      	lsls	r3, r3, #8
 800f41c:	697a      	ldr	r2, [r7, #20]
 800f41e:	4313      	orrs	r3, r2
 800f420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4a21      	ldr	r2, [pc, #132]	; (800f4ac <TIM_OC3_SetConfig+0xe0>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d003      	beq.n	800f432 <TIM_OC3_SetConfig+0x66>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	4a20      	ldr	r2, [pc, #128]	; (800f4b0 <TIM_OC3_SetConfig+0xe4>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d10d      	bne.n	800f44e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	021b      	lsls	r3, r3, #8
 800f440:	697a      	ldr	r2, [r7, #20]
 800f442:	4313      	orrs	r3, r2
 800f444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f44c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a16      	ldr	r2, [pc, #88]	; (800f4ac <TIM_OC3_SetConfig+0xe0>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d003      	beq.n	800f45e <TIM_OC3_SetConfig+0x92>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a15      	ldr	r2, [pc, #84]	; (800f4b0 <TIM_OC3_SetConfig+0xe4>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d113      	bne.n	800f486 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f46c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	695b      	ldr	r3, [r3, #20]
 800f472:	011b      	lsls	r3, r3, #4
 800f474:	693a      	ldr	r2, [r7, #16]
 800f476:	4313      	orrs	r3, r2
 800f478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	699b      	ldr	r3, [r3, #24]
 800f47e:	011b      	lsls	r3, r3, #4
 800f480:	693a      	ldr	r2, [r7, #16]
 800f482:	4313      	orrs	r3, r2
 800f484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	693a      	ldr	r2, [r7, #16]
 800f48a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	68fa      	ldr	r2, [r7, #12]
 800f490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	685a      	ldr	r2, [r3, #4]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	621a      	str	r2, [r3, #32]
}
 800f4a0:	bf00      	nop
 800f4a2:	371c      	adds	r7, #28
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	40010000 	.word	0x40010000
 800f4b0:	40010400 	.word	0x40010400

0800f4b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b087      	sub	sp, #28
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a1b      	ldr	r3, [r3, #32]
 800f4ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	69db      	ldr	r3, [r3, #28]
 800f4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	021b      	lsls	r3, r3, #8
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	4313      	orrs	r3, r2
 800f4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	031b      	lsls	r3, r3, #12
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	4313      	orrs	r3, r2
 800f50a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4a12      	ldr	r2, [pc, #72]	; (800f558 <TIM_OC4_SetConfig+0xa4>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d003      	beq.n	800f51c <TIM_OC4_SetConfig+0x68>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4a11      	ldr	r2, [pc, #68]	; (800f55c <TIM_OC4_SetConfig+0xa8>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d109      	bne.n	800f530 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	695b      	ldr	r3, [r3, #20]
 800f528:	019b      	lsls	r3, r3, #6
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	4313      	orrs	r3, r2
 800f52e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	697a      	ldr	r2, [r7, #20]
 800f534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	685a      	ldr	r2, [r3, #4]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	693a      	ldr	r2, [r7, #16]
 800f548:	621a      	str	r2, [r3, #32]
}
 800f54a:	bf00      	nop
 800f54c:	371c      	adds	r7, #28
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop
 800f558:	40010000 	.word	0x40010000
 800f55c:	40010400 	.word	0x40010400

0800f560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f560:	b480      	push	{r7}
 800f562:	b087      	sub	sp, #28
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	f003 031f 	and.w	r3, r3, #31
 800f572:	2201      	movs	r2, #1
 800f574:	fa02 f303 	lsl.w	r3, r2, r3
 800f578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6a1a      	ldr	r2, [r3, #32]
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	43db      	mvns	r3, r3
 800f582:	401a      	ands	r2, r3
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6a1a      	ldr	r2, [r3, #32]
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	f003 031f 	and.w	r3, r3, #31
 800f592:	6879      	ldr	r1, [r7, #4]
 800f594:	fa01 f303 	lsl.w	r3, r1, r3
 800f598:	431a      	orrs	r2, r3
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	621a      	str	r2, [r3, #32]
}
 800f59e:	bf00      	nop
 800f5a0:	371c      	adds	r7, #28
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr
	...

0800f5ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d101      	bne.n	800f5c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	e05a      	b.n	800f67a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	4313      	orrs	r3, r2
 800f5f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	68fa      	ldr	r2, [r7, #12]
 800f5fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4a21      	ldr	r2, [pc, #132]	; (800f688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d022      	beq.n	800f64e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f610:	d01d      	beq.n	800f64e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	4a1d      	ldr	r2, [pc, #116]	; (800f68c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d018      	beq.n	800f64e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a1b      	ldr	r2, [pc, #108]	; (800f690 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d013      	beq.n	800f64e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a1a      	ldr	r2, [pc, #104]	; (800f694 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d00e      	beq.n	800f64e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4a18      	ldr	r2, [pc, #96]	; (800f698 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d009      	beq.n	800f64e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4a17      	ldr	r2, [pc, #92]	; (800f69c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d004      	beq.n	800f64e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a15      	ldr	r2, [pc, #84]	; (800f6a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d10c      	bne.n	800f668 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	4313      	orrs	r3, r2
 800f65e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68ba      	ldr	r2, [r7, #8]
 800f666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f678:	2300      	movs	r3, #0
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3714      	adds	r7, #20
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	40010000 	.word	0x40010000
 800f68c:	40000400 	.word	0x40000400
 800f690:	40000800 	.word	0x40000800
 800f694:	40000c00 	.word	0x40000c00
 800f698:	40010400 	.word	0x40010400
 800f69c:	40014000 	.word	0x40014000
 800f6a0:	40001800 	.word	0x40001800

0800f6a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d101      	bne.n	800f6c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f6bc:	2302      	movs	r3, #2
 800f6be:	e03d      	b.n	800f73c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	691b      	ldr	r3, [r3, #16]
 800f70a:	4313      	orrs	r3, r2
 800f70c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	695b      	ldr	r3, [r3, #20]
 800f718:	4313      	orrs	r3, r2
 800f71a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	69db      	ldr	r3, [r3, #28]
 800f726:	4313      	orrs	r3, r2
 800f728:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	68fa      	ldr	r2, [r7, #12]
 800f730:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f750:	bf00      	nop
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f764:	bf00      	nop
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d101      	bne.n	800f782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f77e:	2301      	movs	r3, #1
 800f780:	e03f      	b.n	800f802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d106      	bne.n	800f79c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7f7 fd52 	bl	8007240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2224      	movs	r2, #36	; 0x24
 800f7a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	68da      	ldr	r2, [r3, #12]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f829 	bl	800f80c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	691a      	ldr	r2, [r3, #16]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f7c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	695a      	ldr	r2, [r3, #20]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f7d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68da      	ldr	r2, [r3, #12]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2220      	movs	r2, #32
 800f7f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2220      	movs	r2, #32
 800f7fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f810:	b085      	sub	sp, #20
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	691b      	ldr	r3, [r3, #16]
 800f81c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	68da      	ldr	r2, [r3, #12]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	430a      	orrs	r2, r1
 800f82a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	689a      	ldr	r2, [r3, #8]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	691b      	ldr	r3, [r3, #16]
 800f834:	431a      	orrs	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	695b      	ldr	r3, [r3, #20]
 800f83a:	431a      	orrs	r2, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	69db      	ldr	r3, [r3, #28]
 800f840:	4313      	orrs	r3, r2
 800f842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f84e:	f023 030c 	bic.w	r3, r3, #12
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	6812      	ldr	r2, [r2, #0]
 800f856:	68f9      	ldr	r1, [r7, #12]
 800f858:	430b      	orrs	r3, r1
 800f85a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	695b      	ldr	r3, [r3, #20]
 800f862:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	699a      	ldr	r2, [r3, #24]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	430a      	orrs	r2, r1
 800f870:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	69db      	ldr	r3, [r3, #28]
 800f876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f87a:	f040 818b 	bne.w	800fb94 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4ac1      	ldr	r2, [pc, #772]	; (800fb88 <UART_SetConfig+0x37c>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d005      	beq.n	800f894 <UART_SetConfig+0x88>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4abf      	ldr	r2, [pc, #764]	; (800fb8c <UART_SetConfig+0x380>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	f040 80bd 	bne.w	800fa0e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f894:	f7fc fbcc 	bl	800c030 <HAL_RCC_GetPCLK2Freq>
 800f898:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	461d      	mov	r5, r3
 800f89e:	f04f 0600 	mov.w	r6, #0
 800f8a2:	46a8      	mov	r8, r5
 800f8a4:	46b1      	mov	r9, r6
 800f8a6:	eb18 0308 	adds.w	r3, r8, r8
 800f8aa:	eb49 0409 	adc.w	r4, r9, r9
 800f8ae:	4698      	mov	r8, r3
 800f8b0:	46a1      	mov	r9, r4
 800f8b2:	eb18 0805 	adds.w	r8, r8, r5
 800f8b6:	eb49 0906 	adc.w	r9, r9, r6
 800f8ba:	f04f 0100 	mov.w	r1, #0
 800f8be:	f04f 0200 	mov.w	r2, #0
 800f8c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f8c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f8ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f8ce:	4688      	mov	r8, r1
 800f8d0:	4691      	mov	r9, r2
 800f8d2:	eb18 0005 	adds.w	r0, r8, r5
 800f8d6:	eb49 0106 	adc.w	r1, r9, r6
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	461d      	mov	r5, r3
 800f8e0:	f04f 0600 	mov.w	r6, #0
 800f8e4:	196b      	adds	r3, r5, r5
 800f8e6:	eb46 0406 	adc.w	r4, r6, r6
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	4623      	mov	r3, r4
 800f8ee:	f7f1 f9e3 	bl	8000cb8 <__aeabi_uldivmod>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	460c      	mov	r4, r1
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	4ba5      	ldr	r3, [pc, #660]	; (800fb90 <UART_SetConfig+0x384>)
 800f8fa:	fba3 2302 	umull	r2, r3, r3, r2
 800f8fe:	095b      	lsrs	r3, r3, #5
 800f900:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	461d      	mov	r5, r3
 800f908:	f04f 0600 	mov.w	r6, #0
 800f90c:	46a9      	mov	r9, r5
 800f90e:	46b2      	mov	sl, r6
 800f910:	eb19 0309 	adds.w	r3, r9, r9
 800f914:	eb4a 040a 	adc.w	r4, sl, sl
 800f918:	4699      	mov	r9, r3
 800f91a:	46a2      	mov	sl, r4
 800f91c:	eb19 0905 	adds.w	r9, r9, r5
 800f920:	eb4a 0a06 	adc.w	sl, sl, r6
 800f924:	f04f 0100 	mov.w	r1, #0
 800f928:	f04f 0200 	mov.w	r2, #0
 800f92c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f938:	4689      	mov	r9, r1
 800f93a:	4692      	mov	sl, r2
 800f93c:	eb19 0005 	adds.w	r0, r9, r5
 800f940:	eb4a 0106 	adc.w	r1, sl, r6
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	461d      	mov	r5, r3
 800f94a:	f04f 0600 	mov.w	r6, #0
 800f94e:	196b      	adds	r3, r5, r5
 800f950:	eb46 0406 	adc.w	r4, r6, r6
 800f954:	461a      	mov	r2, r3
 800f956:	4623      	mov	r3, r4
 800f958:	f7f1 f9ae 	bl	8000cb8 <__aeabi_uldivmod>
 800f95c:	4603      	mov	r3, r0
 800f95e:	460c      	mov	r4, r1
 800f960:	461a      	mov	r2, r3
 800f962:	4b8b      	ldr	r3, [pc, #556]	; (800fb90 <UART_SetConfig+0x384>)
 800f964:	fba3 1302 	umull	r1, r3, r3, r2
 800f968:	095b      	lsrs	r3, r3, #5
 800f96a:	2164      	movs	r1, #100	; 0x64
 800f96c:	fb01 f303 	mul.w	r3, r1, r3
 800f970:	1ad3      	subs	r3, r2, r3
 800f972:	00db      	lsls	r3, r3, #3
 800f974:	3332      	adds	r3, #50	; 0x32
 800f976:	4a86      	ldr	r2, [pc, #536]	; (800fb90 <UART_SetConfig+0x384>)
 800f978:	fba2 2303 	umull	r2, r3, r2, r3
 800f97c:	095b      	lsrs	r3, r3, #5
 800f97e:	005b      	lsls	r3, r3, #1
 800f980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f984:	4498      	add	r8, r3
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	461d      	mov	r5, r3
 800f98a:	f04f 0600 	mov.w	r6, #0
 800f98e:	46a9      	mov	r9, r5
 800f990:	46b2      	mov	sl, r6
 800f992:	eb19 0309 	adds.w	r3, r9, r9
 800f996:	eb4a 040a 	adc.w	r4, sl, sl
 800f99a:	4699      	mov	r9, r3
 800f99c:	46a2      	mov	sl, r4
 800f99e:	eb19 0905 	adds.w	r9, r9, r5
 800f9a2:	eb4a 0a06 	adc.w	sl, sl, r6
 800f9a6:	f04f 0100 	mov.w	r1, #0
 800f9aa:	f04f 0200 	mov.w	r2, #0
 800f9ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f9b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9ba:	4689      	mov	r9, r1
 800f9bc:	4692      	mov	sl, r2
 800f9be:	eb19 0005 	adds.w	r0, r9, r5
 800f9c2:	eb4a 0106 	adc.w	r1, sl, r6
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	461d      	mov	r5, r3
 800f9cc:	f04f 0600 	mov.w	r6, #0
 800f9d0:	196b      	adds	r3, r5, r5
 800f9d2:	eb46 0406 	adc.w	r4, r6, r6
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	4623      	mov	r3, r4
 800f9da:	f7f1 f96d 	bl	8000cb8 <__aeabi_uldivmod>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	460c      	mov	r4, r1
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	4b6a      	ldr	r3, [pc, #424]	; (800fb90 <UART_SetConfig+0x384>)
 800f9e6:	fba3 1302 	umull	r1, r3, r3, r2
 800f9ea:	095b      	lsrs	r3, r3, #5
 800f9ec:	2164      	movs	r1, #100	; 0x64
 800f9ee:	fb01 f303 	mul.w	r3, r1, r3
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	00db      	lsls	r3, r3, #3
 800f9f6:	3332      	adds	r3, #50	; 0x32
 800f9f8:	4a65      	ldr	r2, [pc, #404]	; (800fb90 <UART_SetConfig+0x384>)
 800f9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f9fe:	095b      	lsrs	r3, r3, #5
 800fa00:	f003 0207 	and.w	r2, r3, #7
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4442      	add	r2, r8
 800fa0a:	609a      	str	r2, [r3, #8]
 800fa0c:	e26f      	b.n	800feee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fa0e:	f7fc fafb 	bl	800c008 <HAL_RCC_GetPCLK1Freq>
 800fa12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	461d      	mov	r5, r3
 800fa18:	f04f 0600 	mov.w	r6, #0
 800fa1c:	46a8      	mov	r8, r5
 800fa1e:	46b1      	mov	r9, r6
 800fa20:	eb18 0308 	adds.w	r3, r8, r8
 800fa24:	eb49 0409 	adc.w	r4, r9, r9
 800fa28:	4698      	mov	r8, r3
 800fa2a:	46a1      	mov	r9, r4
 800fa2c:	eb18 0805 	adds.w	r8, r8, r5
 800fa30:	eb49 0906 	adc.w	r9, r9, r6
 800fa34:	f04f 0100 	mov.w	r1, #0
 800fa38:	f04f 0200 	mov.w	r2, #0
 800fa3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fa40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fa44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fa48:	4688      	mov	r8, r1
 800fa4a:	4691      	mov	r9, r2
 800fa4c:	eb18 0005 	adds.w	r0, r8, r5
 800fa50:	eb49 0106 	adc.w	r1, r9, r6
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	461d      	mov	r5, r3
 800fa5a:	f04f 0600 	mov.w	r6, #0
 800fa5e:	196b      	adds	r3, r5, r5
 800fa60:	eb46 0406 	adc.w	r4, r6, r6
 800fa64:	461a      	mov	r2, r3
 800fa66:	4623      	mov	r3, r4
 800fa68:	f7f1 f926 	bl	8000cb8 <__aeabi_uldivmod>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	460c      	mov	r4, r1
 800fa70:	461a      	mov	r2, r3
 800fa72:	4b47      	ldr	r3, [pc, #284]	; (800fb90 <UART_SetConfig+0x384>)
 800fa74:	fba3 2302 	umull	r2, r3, r3, r2
 800fa78:	095b      	lsrs	r3, r3, #5
 800fa7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	461d      	mov	r5, r3
 800fa82:	f04f 0600 	mov.w	r6, #0
 800fa86:	46a9      	mov	r9, r5
 800fa88:	46b2      	mov	sl, r6
 800fa8a:	eb19 0309 	adds.w	r3, r9, r9
 800fa8e:	eb4a 040a 	adc.w	r4, sl, sl
 800fa92:	4699      	mov	r9, r3
 800fa94:	46a2      	mov	sl, r4
 800fa96:	eb19 0905 	adds.w	r9, r9, r5
 800fa9a:	eb4a 0a06 	adc.w	sl, sl, r6
 800fa9e:	f04f 0100 	mov.w	r1, #0
 800faa2:	f04f 0200 	mov.w	r2, #0
 800faa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800faaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800faae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fab2:	4689      	mov	r9, r1
 800fab4:	4692      	mov	sl, r2
 800fab6:	eb19 0005 	adds.w	r0, r9, r5
 800faba:	eb4a 0106 	adc.w	r1, sl, r6
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	461d      	mov	r5, r3
 800fac4:	f04f 0600 	mov.w	r6, #0
 800fac8:	196b      	adds	r3, r5, r5
 800faca:	eb46 0406 	adc.w	r4, r6, r6
 800face:	461a      	mov	r2, r3
 800fad0:	4623      	mov	r3, r4
 800fad2:	f7f1 f8f1 	bl	8000cb8 <__aeabi_uldivmod>
 800fad6:	4603      	mov	r3, r0
 800fad8:	460c      	mov	r4, r1
 800fada:	461a      	mov	r2, r3
 800fadc:	4b2c      	ldr	r3, [pc, #176]	; (800fb90 <UART_SetConfig+0x384>)
 800fade:	fba3 1302 	umull	r1, r3, r3, r2
 800fae2:	095b      	lsrs	r3, r3, #5
 800fae4:	2164      	movs	r1, #100	; 0x64
 800fae6:	fb01 f303 	mul.w	r3, r1, r3
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	00db      	lsls	r3, r3, #3
 800faee:	3332      	adds	r3, #50	; 0x32
 800faf0:	4a27      	ldr	r2, [pc, #156]	; (800fb90 <UART_SetConfig+0x384>)
 800faf2:	fba2 2303 	umull	r2, r3, r2, r3
 800faf6:	095b      	lsrs	r3, r3, #5
 800faf8:	005b      	lsls	r3, r3, #1
 800fafa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fafe:	4498      	add	r8, r3
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	461d      	mov	r5, r3
 800fb04:	f04f 0600 	mov.w	r6, #0
 800fb08:	46a9      	mov	r9, r5
 800fb0a:	46b2      	mov	sl, r6
 800fb0c:	eb19 0309 	adds.w	r3, r9, r9
 800fb10:	eb4a 040a 	adc.w	r4, sl, sl
 800fb14:	4699      	mov	r9, r3
 800fb16:	46a2      	mov	sl, r4
 800fb18:	eb19 0905 	adds.w	r9, r9, r5
 800fb1c:	eb4a 0a06 	adc.w	sl, sl, r6
 800fb20:	f04f 0100 	mov.w	r1, #0
 800fb24:	f04f 0200 	mov.w	r2, #0
 800fb28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb34:	4689      	mov	r9, r1
 800fb36:	4692      	mov	sl, r2
 800fb38:	eb19 0005 	adds.w	r0, r9, r5
 800fb3c:	eb4a 0106 	adc.w	r1, sl, r6
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	461d      	mov	r5, r3
 800fb46:	f04f 0600 	mov.w	r6, #0
 800fb4a:	196b      	adds	r3, r5, r5
 800fb4c:	eb46 0406 	adc.w	r4, r6, r6
 800fb50:	461a      	mov	r2, r3
 800fb52:	4623      	mov	r3, r4
 800fb54:	f7f1 f8b0 	bl	8000cb8 <__aeabi_uldivmod>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	4b0c      	ldr	r3, [pc, #48]	; (800fb90 <UART_SetConfig+0x384>)
 800fb60:	fba3 1302 	umull	r1, r3, r3, r2
 800fb64:	095b      	lsrs	r3, r3, #5
 800fb66:	2164      	movs	r1, #100	; 0x64
 800fb68:	fb01 f303 	mul.w	r3, r1, r3
 800fb6c:	1ad3      	subs	r3, r2, r3
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	3332      	adds	r3, #50	; 0x32
 800fb72:	4a07      	ldr	r2, [pc, #28]	; (800fb90 <UART_SetConfig+0x384>)
 800fb74:	fba2 2303 	umull	r2, r3, r2, r3
 800fb78:	095b      	lsrs	r3, r3, #5
 800fb7a:	f003 0207 	and.w	r2, r3, #7
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	4442      	add	r2, r8
 800fb84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fb86:	e1b2      	b.n	800feee <UART_SetConfig+0x6e2>
 800fb88:	40011000 	.word	0x40011000
 800fb8c:	40011400 	.word	0x40011400
 800fb90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4ad7      	ldr	r2, [pc, #860]	; (800fef8 <UART_SetConfig+0x6ec>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d005      	beq.n	800fbaa <UART_SetConfig+0x39e>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4ad6      	ldr	r2, [pc, #856]	; (800fefc <UART_SetConfig+0x6f0>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	f040 80d1 	bne.w	800fd4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fbaa:	f7fc fa41 	bl	800c030 <HAL_RCC_GetPCLK2Freq>
 800fbae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	469a      	mov	sl, r3
 800fbb4:	f04f 0b00 	mov.w	fp, #0
 800fbb8:	46d0      	mov	r8, sl
 800fbba:	46d9      	mov	r9, fp
 800fbbc:	eb18 0308 	adds.w	r3, r8, r8
 800fbc0:	eb49 0409 	adc.w	r4, r9, r9
 800fbc4:	4698      	mov	r8, r3
 800fbc6:	46a1      	mov	r9, r4
 800fbc8:	eb18 080a 	adds.w	r8, r8, sl
 800fbcc:	eb49 090b 	adc.w	r9, r9, fp
 800fbd0:	f04f 0100 	mov.w	r1, #0
 800fbd4:	f04f 0200 	mov.w	r2, #0
 800fbd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fbdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fbe0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fbe4:	4688      	mov	r8, r1
 800fbe6:	4691      	mov	r9, r2
 800fbe8:	eb1a 0508 	adds.w	r5, sl, r8
 800fbec:	eb4b 0609 	adc.w	r6, fp, r9
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	f04f 0200 	mov.w	r2, #0
 800fbfa:	f04f 0300 	mov.w	r3, #0
 800fbfe:	f04f 0400 	mov.w	r4, #0
 800fc02:	0094      	lsls	r4, r2, #2
 800fc04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc08:	008b      	lsls	r3, r1, #2
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	4623      	mov	r3, r4
 800fc0e:	4628      	mov	r0, r5
 800fc10:	4631      	mov	r1, r6
 800fc12:	f7f1 f851 	bl	8000cb8 <__aeabi_uldivmod>
 800fc16:	4603      	mov	r3, r0
 800fc18:	460c      	mov	r4, r1
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	4bb8      	ldr	r3, [pc, #736]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fc1e:	fba3 2302 	umull	r2, r3, r3, r2
 800fc22:	095b      	lsrs	r3, r3, #5
 800fc24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	469b      	mov	fp, r3
 800fc2c:	f04f 0c00 	mov.w	ip, #0
 800fc30:	46d9      	mov	r9, fp
 800fc32:	46e2      	mov	sl, ip
 800fc34:	eb19 0309 	adds.w	r3, r9, r9
 800fc38:	eb4a 040a 	adc.w	r4, sl, sl
 800fc3c:	4699      	mov	r9, r3
 800fc3e:	46a2      	mov	sl, r4
 800fc40:	eb19 090b 	adds.w	r9, r9, fp
 800fc44:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fc48:	f04f 0100 	mov.w	r1, #0
 800fc4c:	f04f 0200 	mov.w	r2, #0
 800fc50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc5c:	4689      	mov	r9, r1
 800fc5e:	4692      	mov	sl, r2
 800fc60:	eb1b 0509 	adds.w	r5, fp, r9
 800fc64:	eb4c 060a 	adc.w	r6, ip, sl
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	f04f 0200 	mov.w	r2, #0
 800fc72:	f04f 0300 	mov.w	r3, #0
 800fc76:	f04f 0400 	mov.w	r4, #0
 800fc7a:	0094      	lsls	r4, r2, #2
 800fc7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc80:	008b      	lsls	r3, r1, #2
 800fc82:	461a      	mov	r2, r3
 800fc84:	4623      	mov	r3, r4
 800fc86:	4628      	mov	r0, r5
 800fc88:	4631      	mov	r1, r6
 800fc8a:	f7f1 f815 	bl	8000cb8 <__aeabi_uldivmod>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	460c      	mov	r4, r1
 800fc92:	461a      	mov	r2, r3
 800fc94:	4b9a      	ldr	r3, [pc, #616]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fc96:	fba3 1302 	umull	r1, r3, r3, r2
 800fc9a:	095b      	lsrs	r3, r3, #5
 800fc9c:	2164      	movs	r1, #100	; 0x64
 800fc9e:	fb01 f303 	mul.w	r3, r1, r3
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	011b      	lsls	r3, r3, #4
 800fca6:	3332      	adds	r3, #50	; 0x32
 800fca8:	4a95      	ldr	r2, [pc, #596]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fcaa:	fba2 2303 	umull	r2, r3, r2, r3
 800fcae:	095b      	lsrs	r3, r3, #5
 800fcb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcb4:	4498      	add	r8, r3
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	469b      	mov	fp, r3
 800fcba:	f04f 0c00 	mov.w	ip, #0
 800fcbe:	46d9      	mov	r9, fp
 800fcc0:	46e2      	mov	sl, ip
 800fcc2:	eb19 0309 	adds.w	r3, r9, r9
 800fcc6:	eb4a 040a 	adc.w	r4, sl, sl
 800fcca:	4699      	mov	r9, r3
 800fccc:	46a2      	mov	sl, r4
 800fcce:	eb19 090b 	adds.w	r9, r9, fp
 800fcd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fcd6:	f04f 0100 	mov.w	r1, #0
 800fcda:	f04f 0200 	mov.w	r2, #0
 800fcde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fcea:	4689      	mov	r9, r1
 800fcec:	4692      	mov	sl, r2
 800fcee:	eb1b 0509 	adds.w	r5, fp, r9
 800fcf2:	eb4c 060a 	adc.w	r6, ip, sl
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	f04f 0200 	mov.w	r2, #0
 800fd00:	f04f 0300 	mov.w	r3, #0
 800fd04:	f04f 0400 	mov.w	r4, #0
 800fd08:	0094      	lsls	r4, r2, #2
 800fd0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd0e:	008b      	lsls	r3, r1, #2
 800fd10:	461a      	mov	r2, r3
 800fd12:	4623      	mov	r3, r4
 800fd14:	4628      	mov	r0, r5
 800fd16:	4631      	mov	r1, r6
 800fd18:	f7f0 ffce 	bl	8000cb8 <__aeabi_uldivmod>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	460c      	mov	r4, r1
 800fd20:	461a      	mov	r2, r3
 800fd22:	4b77      	ldr	r3, [pc, #476]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fd24:	fba3 1302 	umull	r1, r3, r3, r2
 800fd28:	095b      	lsrs	r3, r3, #5
 800fd2a:	2164      	movs	r1, #100	; 0x64
 800fd2c:	fb01 f303 	mul.w	r3, r1, r3
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	011b      	lsls	r3, r3, #4
 800fd34:	3332      	adds	r3, #50	; 0x32
 800fd36:	4a72      	ldr	r2, [pc, #456]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fd38:	fba2 2303 	umull	r2, r3, r2, r3
 800fd3c:	095b      	lsrs	r3, r3, #5
 800fd3e:	f003 020f 	and.w	r2, r3, #15
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4442      	add	r2, r8
 800fd48:	609a      	str	r2, [r3, #8]
 800fd4a:	e0d0      	b.n	800feee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fd4c:	f7fc f95c 	bl	800c008 <HAL_RCC_GetPCLK1Freq>
 800fd50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	469a      	mov	sl, r3
 800fd56:	f04f 0b00 	mov.w	fp, #0
 800fd5a:	46d0      	mov	r8, sl
 800fd5c:	46d9      	mov	r9, fp
 800fd5e:	eb18 0308 	adds.w	r3, r8, r8
 800fd62:	eb49 0409 	adc.w	r4, r9, r9
 800fd66:	4698      	mov	r8, r3
 800fd68:	46a1      	mov	r9, r4
 800fd6a:	eb18 080a 	adds.w	r8, r8, sl
 800fd6e:	eb49 090b 	adc.w	r9, r9, fp
 800fd72:	f04f 0100 	mov.w	r1, #0
 800fd76:	f04f 0200 	mov.w	r2, #0
 800fd7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fd7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fd82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fd86:	4688      	mov	r8, r1
 800fd88:	4691      	mov	r9, r2
 800fd8a:	eb1a 0508 	adds.w	r5, sl, r8
 800fd8e:	eb4b 0609 	adc.w	r6, fp, r9
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	4619      	mov	r1, r3
 800fd98:	f04f 0200 	mov.w	r2, #0
 800fd9c:	f04f 0300 	mov.w	r3, #0
 800fda0:	f04f 0400 	mov.w	r4, #0
 800fda4:	0094      	lsls	r4, r2, #2
 800fda6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fdaa:	008b      	lsls	r3, r1, #2
 800fdac:	461a      	mov	r2, r3
 800fdae:	4623      	mov	r3, r4
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	f7f0 ff80 	bl	8000cb8 <__aeabi_uldivmod>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	460c      	mov	r4, r1
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	4b50      	ldr	r3, [pc, #320]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fdc0:	fba3 2302 	umull	r2, r3, r3, r2
 800fdc4:	095b      	lsrs	r3, r3, #5
 800fdc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	469b      	mov	fp, r3
 800fdce:	f04f 0c00 	mov.w	ip, #0
 800fdd2:	46d9      	mov	r9, fp
 800fdd4:	46e2      	mov	sl, ip
 800fdd6:	eb19 0309 	adds.w	r3, r9, r9
 800fdda:	eb4a 040a 	adc.w	r4, sl, sl
 800fdde:	4699      	mov	r9, r3
 800fde0:	46a2      	mov	sl, r4
 800fde2:	eb19 090b 	adds.w	r9, r9, fp
 800fde6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fdea:	f04f 0100 	mov.w	r1, #0
 800fdee:	f04f 0200 	mov.w	r2, #0
 800fdf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fdf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fdfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdfe:	4689      	mov	r9, r1
 800fe00:	4692      	mov	sl, r2
 800fe02:	eb1b 0509 	adds.w	r5, fp, r9
 800fe06:	eb4c 060a 	adc.w	r6, ip, sl
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	4619      	mov	r1, r3
 800fe10:	f04f 0200 	mov.w	r2, #0
 800fe14:	f04f 0300 	mov.w	r3, #0
 800fe18:	f04f 0400 	mov.w	r4, #0
 800fe1c:	0094      	lsls	r4, r2, #2
 800fe1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fe22:	008b      	lsls	r3, r1, #2
 800fe24:	461a      	mov	r2, r3
 800fe26:	4623      	mov	r3, r4
 800fe28:	4628      	mov	r0, r5
 800fe2a:	4631      	mov	r1, r6
 800fe2c:	f7f0 ff44 	bl	8000cb8 <__aeabi_uldivmod>
 800fe30:	4603      	mov	r3, r0
 800fe32:	460c      	mov	r4, r1
 800fe34:	461a      	mov	r2, r3
 800fe36:	4b32      	ldr	r3, [pc, #200]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fe38:	fba3 1302 	umull	r1, r3, r3, r2
 800fe3c:	095b      	lsrs	r3, r3, #5
 800fe3e:	2164      	movs	r1, #100	; 0x64
 800fe40:	fb01 f303 	mul.w	r3, r1, r3
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	011b      	lsls	r3, r3, #4
 800fe48:	3332      	adds	r3, #50	; 0x32
 800fe4a:	4a2d      	ldr	r2, [pc, #180]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fe4c:	fba2 2303 	umull	r2, r3, r2, r3
 800fe50:	095b      	lsrs	r3, r3, #5
 800fe52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe56:	4498      	add	r8, r3
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	469b      	mov	fp, r3
 800fe5c:	f04f 0c00 	mov.w	ip, #0
 800fe60:	46d9      	mov	r9, fp
 800fe62:	46e2      	mov	sl, ip
 800fe64:	eb19 0309 	adds.w	r3, r9, r9
 800fe68:	eb4a 040a 	adc.w	r4, sl, sl
 800fe6c:	4699      	mov	r9, r3
 800fe6e:	46a2      	mov	sl, r4
 800fe70:	eb19 090b 	adds.w	r9, r9, fp
 800fe74:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fe78:	f04f 0100 	mov.w	r1, #0
 800fe7c:	f04f 0200 	mov.w	r2, #0
 800fe80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe8c:	4689      	mov	r9, r1
 800fe8e:	4692      	mov	sl, r2
 800fe90:	eb1b 0509 	adds.w	r5, fp, r9
 800fe94:	eb4c 060a 	adc.w	r6, ip, sl
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	f04f 0200 	mov.w	r2, #0
 800fea2:	f04f 0300 	mov.w	r3, #0
 800fea6:	f04f 0400 	mov.w	r4, #0
 800feaa:	0094      	lsls	r4, r2, #2
 800feac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800feb0:	008b      	lsls	r3, r1, #2
 800feb2:	461a      	mov	r2, r3
 800feb4:	4623      	mov	r3, r4
 800feb6:	4628      	mov	r0, r5
 800feb8:	4631      	mov	r1, r6
 800feba:	f7f0 fefd 	bl	8000cb8 <__aeabi_uldivmod>
 800febe:	4603      	mov	r3, r0
 800fec0:	460c      	mov	r4, r1
 800fec2:	461a      	mov	r2, r3
 800fec4:	4b0e      	ldr	r3, [pc, #56]	; (800ff00 <UART_SetConfig+0x6f4>)
 800fec6:	fba3 1302 	umull	r1, r3, r3, r2
 800feca:	095b      	lsrs	r3, r3, #5
 800fecc:	2164      	movs	r1, #100	; 0x64
 800fece:	fb01 f303 	mul.w	r3, r1, r3
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	011b      	lsls	r3, r3, #4
 800fed6:	3332      	adds	r3, #50	; 0x32
 800fed8:	4a09      	ldr	r2, [pc, #36]	; (800ff00 <UART_SetConfig+0x6f4>)
 800feda:	fba2 2303 	umull	r2, r3, r2, r3
 800fede:	095b      	lsrs	r3, r3, #5
 800fee0:	f003 020f 	and.w	r2, r3, #15
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4442      	add	r2, r8
 800feea:	609a      	str	r2, [r3, #8]
}
 800feec:	e7ff      	b.n	800feee <UART_SetConfig+0x6e2>
 800feee:	bf00      	nop
 800fef0:	3714      	adds	r7, #20
 800fef2:	46bd      	mov	sp, r7
 800fef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef8:	40011000 	.word	0x40011000
 800fefc:	40011400 	.word	0x40011400
 800ff00:	51eb851f 	.word	0x51eb851f

0800ff04 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ff04:	b084      	sub	sp, #16
 800ff06:	b480      	push	{r7}
 800ff08:	b085      	sub	sp, #20
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
 800ff0e:	f107 001c 	add.w	r0, r7, #28
 800ff12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ff16:	2300      	movs	r3, #0
 800ff18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ff1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ff1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ff1e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ff20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ff22:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ff26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ff28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ff2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ff2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ff2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	4313      	orrs	r3, r2
 800ff34:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ff3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	431a      	orrs	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3714      	adds	r7, #20
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	b004      	add	sp, #16
 800ff58:	4770      	bx	lr

0800ff5a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b083      	sub	sp, #12
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b082      	sub	sp, #8
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2203      	movs	r2, #3
 800ffa2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ffa4:	2002      	movs	r0, #2
 800ffa6:	f7f9 fbdd 	bl	8009764 <HAL_Delay>
  
  return HAL_OK;
 800ffaa:	2300      	movs	r3, #0
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f003 0303 	and.w	r3, r3, #3
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b085      	sub	sp, #20
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ffee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fff4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fffa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fffc:	68fa      	ldr	r2, [r7, #12]
 800fffe:	4313      	orrs	r3, r2
 8010000:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801000a:	f023 030f 	bic.w	r3, r3, #15
 801000e:	68fa      	ldr	r2, [r7, #12]
 8010010:	431a      	orrs	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3714      	adds	r7, #20
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	691b      	ldr	r3, [r3, #16]
 8010030:	b2db      	uxtb	r3, r3
}
 8010032:	4618      	mov	r0, r3
 8010034:	370c      	adds	r7, #12
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801003e:	b480      	push	{r7}
 8010040:	b085      	sub	sp, #20
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	3314      	adds	r3, #20
 801004c:	461a      	mov	r2, r3
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	4413      	add	r3, r2
 8010052:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
}  
 8010058:	4618      	mov	r0, r3
 801005a:	3714      	adds	r7, #20
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801006e:	2300      	movs	r3, #0
 8010070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	685a      	ldr	r2, [r3, #4]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801008a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010090:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010096:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	4313      	orrs	r3, r2
 801009c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	431a      	orrs	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80100ae:	2300      	movs	r3, #0

}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3714      	adds	r7, #20
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b088      	sub	sp, #32
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80100ca:	2310      	movs	r3, #16
 80100cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80100ce:	2340      	movs	r3, #64	; 0x40
 80100d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100d2:	2300      	movs	r3, #0
 80100d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100dc:	f107 0308 	add.w	r3, r7, #8
 80100e0:	4619      	mov	r1, r3
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7ff ff74 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80100e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80100ec:	2110      	movs	r1, #16
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 fa40 	bl	8010574 <SDMMC_GetCmdResp1>
 80100f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100f6:	69fb      	ldr	r3, [r7, #28]
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3720      	adds	r7, #32
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b088      	sub	sp, #32
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801010e:	2311      	movs	r3, #17
 8010110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010112:	2340      	movs	r3, #64	; 0x40
 8010114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010116:	2300      	movs	r3, #0
 8010118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801011a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801011e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010120:	f107 0308 	add.w	r3, r7, #8
 8010124:	4619      	mov	r1, r3
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f7ff ff52 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801012c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010130:	2111      	movs	r1, #17
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f000 fa1e 	bl	8010574 <SDMMC_GetCmdResp1>
 8010138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801013a:	69fb      	ldr	r3, [r7, #28]
}
 801013c:	4618      	mov	r0, r3
 801013e:	3720      	adds	r7, #32
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b088      	sub	sp, #32
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010152:	2312      	movs	r3, #18
 8010154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010156:	2340      	movs	r3, #64	; 0x40
 8010158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801015a:	2300      	movs	r3, #0
 801015c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801015e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010162:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010164:	f107 0308 	add.w	r3, r7, #8
 8010168:	4619      	mov	r1, r3
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f7ff ff30 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010170:	f241 3288 	movw	r2, #5000	; 0x1388
 8010174:	2112      	movs	r1, #18
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f9fc 	bl	8010574 <SDMMC_GetCmdResp1>
 801017c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801017e:	69fb      	ldr	r3, [r7, #28]
}
 8010180:	4618      	mov	r0, r3
 8010182:	3720      	adds	r7, #32
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b088      	sub	sp, #32
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010196:	2318      	movs	r3, #24
 8010198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801019a:	2340      	movs	r3, #64	; 0x40
 801019c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801019e:	2300      	movs	r3, #0
 80101a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101a8:	f107 0308 	add.w	r3, r7, #8
 80101ac:	4619      	mov	r1, r3
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7ff ff0e 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80101b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80101b8:	2118      	movs	r1, #24
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 f9da 	bl	8010574 <SDMMC_GetCmdResp1>
 80101c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101c2:	69fb      	ldr	r3, [r7, #28]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3720      	adds	r7, #32
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b088      	sub	sp, #32
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80101da:	2319      	movs	r3, #25
 80101dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101de:	2340      	movs	r3, #64	; 0x40
 80101e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101e2:	2300      	movs	r3, #0
 80101e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101ec:	f107 0308 	add.w	r3, r7, #8
 80101f0:	4619      	mov	r1, r3
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7ff feec 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80101f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80101fc:	2119      	movs	r1, #25
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 f9b8 	bl	8010574 <SDMMC_GetCmdResp1>
 8010204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010206:	69fb      	ldr	r3, [r7, #28]
}
 8010208:	4618      	mov	r0, r3
 801020a:	3720      	adds	r7, #32
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b088      	sub	sp, #32
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010218:	2300      	movs	r3, #0
 801021a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801021c:	230c      	movs	r3, #12
 801021e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010220:	2340      	movs	r3, #64	; 0x40
 8010222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010224:	2300      	movs	r3, #0
 8010226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801022c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801022e:	f107 0308 	add.w	r3, r7, #8
 8010232:	4619      	mov	r1, r3
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7ff fecb 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801023a:	4a05      	ldr	r2, [pc, #20]	; (8010250 <SDMMC_CmdStopTransfer+0x40>)
 801023c:	210c      	movs	r1, #12
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 f998 	bl	8010574 <SDMMC_GetCmdResp1>
 8010244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010246:	69fb      	ldr	r3, [r7, #28]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3720      	adds	r7, #32
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	05f5e100 	.word	0x05f5e100

08010254 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b08a      	sub	sp, #40	; 0x28
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010264:	2307      	movs	r3, #7
 8010266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010268:	2340      	movs	r3, #64	; 0x40
 801026a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801026c:	2300      	movs	r3, #0
 801026e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010274:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010276:	f107 0310 	add.w	r3, r7, #16
 801027a:	4619      	mov	r1, r3
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f7ff fea7 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010282:	f241 3288 	movw	r2, #5000	; 0x1388
 8010286:	2107      	movs	r1, #7
 8010288:	68f8      	ldr	r0, [r7, #12]
 801028a:	f000 f973 	bl	8010574 <SDMMC_GetCmdResp1>
 801028e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010292:	4618      	mov	r0, r3
 8010294:	3728      	adds	r7, #40	; 0x28
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b088      	sub	sp, #32
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80102a2:	2300      	movs	r3, #0
 80102a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80102a6:	2300      	movs	r3, #0
 80102a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80102aa:	2300      	movs	r3, #0
 80102ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102ae:	2300      	movs	r3, #0
 80102b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102b8:	f107 0308 	add.w	r3, r7, #8
 80102bc:	4619      	mov	r1, r3
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f7ff fe86 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 f92d 	bl	8010524 <SDMMC_GetCmdError>
 80102ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102cc:	69fb      	ldr	r3, [r7, #28]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3720      	adds	r7, #32
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b088      	sub	sp, #32
 80102da:	af00      	add	r7, sp, #0
 80102dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80102de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80102e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80102e4:	2308      	movs	r3, #8
 80102e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102e8:	2340      	movs	r3, #64	; 0x40
 80102ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102ec:	2300      	movs	r3, #0
 80102ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102f6:	f107 0308 	add.w	r3, r7, #8
 80102fa:	4619      	mov	r1, r3
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f7ff fe67 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 fb16 	bl	8010934 <SDMMC_GetCmdResp7>
 8010308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801030a:	69fb      	ldr	r3, [r7, #28]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3720      	adds	r7, #32
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010322:	2337      	movs	r3, #55	; 0x37
 8010324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010326:	2340      	movs	r3, #64	; 0x40
 8010328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801032a:	2300      	movs	r3, #0
 801032c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010332:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010334:	f107 0308 	add.w	r3, r7, #8
 8010338:	4619      	mov	r1, r3
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff fe48 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010340:	f241 3288 	movw	r2, #5000	; 0x1388
 8010344:	2137      	movs	r1, #55	; 0x37
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 f914 	bl	8010574 <SDMMC_GetCmdResp1>
 801034c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801034e:	69fb      	ldr	r3, [r7, #28]
}
 8010350:	4618      	mov	r0, r3
 8010352:	3720      	adds	r7, #32
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b088      	sub	sp, #32
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801036c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801036e:	2329      	movs	r3, #41	; 0x29
 8010370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010372:	2340      	movs	r3, #64	; 0x40
 8010374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010376:	2300      	movs	r3, #0
 8010378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801037e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010380:	f107 0308 	add.w	r3, r7, #8
 8010384:	4619      	mov	r1, r3
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7ff fe22 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 fa23 	bl	80107d8 <SDMMC_GetCmdResp3>
 8010392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010394:	69fb      	ldr	r3, [r7, #28]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3720      	adds	r7, #32
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b088      	sub	sp, #32
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80103ac:	2306      	movs	r3, #6
 80103ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103b0:	2340      	movs	r3, #64	; 0x40
 80103b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103b4:	2300      	movs	r3, #0
 80103b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103be:	f107 0308 	add.w	r3, r7, #8
 80103c2:	4619      	mov	r1, r3
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7ff fe03 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80103ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ce:	2106      	movs	r1, #6
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 f8cf 	bl	8010574 <SDMMC_GetCmdResp1>
 80103d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103d8:	69fb      	ldr	r3, [r7, #28]
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3720      	adds	r7, #32
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}

080103e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80103e2:	b580      	push	{r7, lr}
 80103e4:	b088      	sub	sp, #32
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80103ea:	2300      	movs	r3, #0
 80103ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80103ee:	2333      	movs	r3, #51	; 0x33
 80103f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103f2:	2340      	movs	r3, #64	; 0x40
 80103f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103f6:	2300      	movs	r3, #0
 80103f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010400:	f107 0308 	add.w	r3, r7, #8
 8010404:	4619      	mov	r1, r3
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f7ff fde2 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 801040c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010410:	2133      	movs	r1, #51	; 0x33
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f000 f8ae 	bl	8010574 <SDMMC_GetCmdResp1>
 8010418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801041a:	69fb      	ldr	r3, [r7, #28]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3720      	adds	r7, #32
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b088      	sub	sp, #32
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801042c:	2300      	movs	r3, #0
 801042e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010430:	2302      	movs	r3, #2
 8010432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010434:	23c0      	movs	r3, #192	; 0xc0
 8010436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010438:	2300      	movs	r3, #0
 801043a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801043c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010440:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010442:	f107 0308 	add.w	r3, r7, #8
 8010446:	4619      	mov	r1, r3
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f7ff fdc1 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 f97c 	bl	801074c <SDMMC_GetCmdResp2>
 8010454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010456:	69fb      	ldr	r3, [r7, #28]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3720      	adds	r7, #32
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b088      	sub	sp, #32
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801046e:	2309      	movs	r3, #9
 8010470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010472:	23c0      	movs	r3, #192	; 0xc0
 8010474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010476:	2300      	movs	r3, #0
 8010478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801047a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801047e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010480:	f107 0308 	add.w	r3, r7, #8
 8010484:	4619      	mov	r1, r3
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f7ff fda2 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 f95d 	bl	801074c <SDMMC_GetCmdResp2>
 8010492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010494:	69fb      	ldr	r3, [r7, #28]
}
 8010496:	4618      	mov	r0, r3
 8010498:	3720      	adds	r7, #32
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	b088      	sub	sp, #32
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80104a8:	2300      	movs	r3, #0
 80104aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80104ac:	2303      	movs	r3, #3
 80104ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104b0:	2340      	movs	r3, #64	; 0x40
 80104b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104b4:	2300      	movs	r3, #0
 80104b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104be:	f107 0308 	add.w	r3, r7, #8
 80104c2:	4619      	mov	r1, r3
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7ff fd83 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80104ca:	683a      	ldr	r2, [r7, #0]
 80104cc:	2103      	movs	r1, #3
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 f9bc 	bl	801084c <SDMMC_GetCmdResp6>
 80104d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104d6:	69fb      	ldr	r3, [r7, #28]
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3720      	adds	r7, #32
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b088      	sub	sp, #32
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80104ee:	230d      	movs	r3, #13
 80104f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104f2:	2340      	movs	r3, #64	; 0x40
 80104f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104f6:	2300      	movs	r3, #0
 80104f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010500:	f107 0308 	add.w	r3, r7, #8
 8010504:	4619      	mov	r1, r3
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f7ff fd62 	bl	800ffd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801050c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010510:	210d      	movs	r1, #13
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f82e 	bl	8010574 <SDMMC_GetCmdResp1>
 8010518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801051a:	69fb      	ldr	r3, [r7, #28]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3720      	adds	r7, #32
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010524:	b490      	push	{r4, r7}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801052c:	4b0f      	ldr	r3, [pc, #60]	; (801056c <SDMMC_GetCmdError+0x48>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a0f      	ldr	r2, [pc, #60]	; (8010570 <SDMMC_GetCmdError+0x4c>)
 8010532:	fba2 2303 	umull	r2, r3, r2, r3
 8010536:	0a5b      	lsrs	r3, r3, #9
 8010538:	f241 3288 	movw	r2, #5000	; 0x1388
 801053c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010540:	4623      	mov	r3, r4
 8010542:	1e5c      	subs	r4, r3, #1
 8010544:	2b00      	cmp	r3, #0
 8010546:	d102      	bne.n	801054e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010548:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801054c:	e009      	b.n	8010562 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010556:	2b00      	cmp	r3, #0
 8010558:	d0f2      	beq.n	8010540 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	22c5      	movs	r2, #197	; 0xc5
 801055e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bc90      	pop	{r4, r7}
 801056a:	4770      	bx	lr
 801056c:	20000000 	.word	0x20000000
 8010570:	10624dd3 	.word	0x10624dd3

08010574 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010574:	b590      	push	{r4, r7, lr}
 8010576:	b087      	sub	sp, #28
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	460b      	mov	r3, r1
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010582:	4b6f      	ldr	r3, [pc, #444]	; (8010740 <SDMMC_GetCmdResp1+0x1cc>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	4a6f      	ldr	r2, [pc, #444]	; (8010744 <SDMMC_GetCmdResp1+0x1d0>)
 8010588:	fba2 2303 	umull	r2, r3, r2, r3
 801058c:	0a5b      	lsrs	r3, r3, #9
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010594:	4623      	mov	r3, r4
 8010596:	1e5c      	subs	r4, r3, #1
 8010598:	2b00      	cmp	r3, #0
 801059a:	d102      	bne.n	80105a2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801059c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105a0:	e0c9      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105a6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d0f0      	beq.n	8010594 <SDMMC_GetCmdResp1+0x20>
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1eb      	bne.n	8010594 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105c0:	f003 0304 	and.w	r3, r3, #4
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d004      	beq.n	80105d2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2204      	movs	r2, #4
 80105cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105ce:	2304      	movs	r3, #4
 80105d0:	e0b1      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105d6:	f003 0301 	and.w	r3, r3, #1
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d004      	beq.n	80105e8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2201      	movs	r2, #1
 80105e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105e4:	2301      	movs	r3, #1
 80105e6:	e0a6      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	22c5      	movs	r2, #197	; 0xc5
 80105ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f7ff fd18 	bl	8010024 <SDIO_GetCommandResponse>
 80105f4:	4603      	mov	r3, r0
 80105f6:	461a      	mov	r2, r3
 80105f8:	7afb      	ldrb	r3, [r7, #11]
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d001      	beq.n	8010602 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105fe:	2301      	movs	r3, #1
 8010600:	e099      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010602:	2100      	movs	r1, #0
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f7ff fd1a 	bl	801003e <SDIO_GetResponse>
 801060a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801060c:	693a      	ldr	r2, [r7, #16]
 801060e:	4b4e      	ldr	r3, [pc, #312]	; (8010748 <SDMMC_GetCmdResp1+0x1d4>)
 8010610:	4013      	ands	r3, r2
 8010612:	2b00      	cmp	r3, #0
 8010614:	d101      	bne.n	801061a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010616:	2300      	movs	r3, #0
 8010618:	e08d      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	2b00      	cmp	r3, #0
 801061e:	da02      	bge.n	8010626 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010624:	e087      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801062c:	2b00      	cmp	r3, #0
 801062e:	d001      	beq.n	8010634 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010630:	2340      	movs	r3, #64	; 0x40
 8010632:	e080      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801063a:	2b00      	cmp	r3, #0
 801063c:	d001      	beq.n	8010642 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801063e:	2380      	movs	r3, #128	; 0x80
 8010640:	e079      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010648:	2b00      	cmp	r3, #0
 801064a:	d002      	beq.n	8010652 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801064c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010650:	e071      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010658:	2b00      	cmp	r3, #0
 801065a:	d002      	beq.n	8010662 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801065c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010660:	e069      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801066c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010670:	e061      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010678:	2b00      	cmp	r3, #0
 801067a:	d002      	beq.n	8010682 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801067c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010680:	e059      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010688:	2b00      	cmp	r3, #0
 801068a:	d002      	beq.n	8010692 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010690:	e051      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010698:	2b00      	cmp	r3, #0
 801069a:	d002      	beq.n	80106a2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801069c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80106a0:	e049      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80106ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80106b0:	e041      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d002      	beq.n	80106c2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80106bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106c0:	e039      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80106cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80106d0:	e031      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d002      	beq.n	80106e2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80106dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80106e0:	e029      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d002      	beq.n	80106f2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80106ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80106f0:	e021      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80106fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010700:	e019      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801070c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010710:	e011      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010718:	2b00      	cmp	r3, #0
 801071a:	d002      	beq.n	8010722 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801071c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010720:	e009      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	f003 0308 	and.w	r3, r3, #8
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801072c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010730:	e001      	b.n	8010736 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010736:	4618      	mov	r0, r3
 8010738:	371c      	adds	r7, #28
 801073a:	46bd      	mov	sp, r7
 801073c:	bd90      	pop	{r4, r7, pc}
 801073e:	bf00      	nop
 8010740:	20000000 	.word	0x20000000
 8010744:	10624dd3 	.word	0x10624dd3
 8010748:	fdffe008 	.word	0xfdffe008

0801074c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 801074c:	b490      	push	{r4, r7}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010754:	4b1e      	ldr	r3, [pc, #120]	; (80107d0 <SDMMC_GetCmdResp2+0x84>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4a1e      	ldr	r2, [pc, #120]	; (80107d4 <SDMMC_GetCmdResp2+0x88>)
 801075a:	fba2 2303 	umull	r2, r3, r2, r3
 801075e:	0a5b      	lsrs	r3, r3, #9
 8010760:	f241 3288 	movw	r2, #5000	; 0x1388
 8010764:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010768:	4623      	mov	r3, r4
 801076a:	1e5c      	subs	r4, r3, #1
 801076c:	2b00      	cmp	r3, #0
 801076e:	d102      	bne.n	8010776 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010774:	e026      	b.n	80107c4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801077a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010782:	2b00      	cmp	r3, #0
 8010784:	d0f0      	beq.n	8010768 <SDMMC_GetCmdResp2+0x1c>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801078c:	2b00      	cmp	r3, #0
 801078e:	d1eb      	bne.n	8010768 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010794:	f003 0304 	and.w	r3, r3, #4
 8010798:	2b00      	cmp	r3, #0
 801079a:	d004      	beq.n	80107a6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2204      	movs	r2, #4
 80107a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107a2:	2304      	movs	r3, #4
 80107a4:	e00e      	b.n	80107c4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107aa:	f003 0301 	and.w	r3, r3, #1
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d004      	beq.n	80107bc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2201      	movs	r2, #1
 80107b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107b8:	2301      	movs	r3, #1
 80107ba:	e003      	b.n	80107c4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	22c5      	movs	r2, #197	; 0xc5
 80107c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80107c2:	2300      	movs	r3, #0
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bc90      	pop	{r4, r7}
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop
 80107d0:	20000000 	.word	0x20000000
 80107d4:	10624dd3 	.word	0x10624dd3

080107d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80107d8:	b490      	push	{r4, r7}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107e0:	4b18      	ldr	r3, [pc, #96]	; (8010844 <SDMMC_GetCmdResp3+0x6c>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4a18      	ldr	r2, [pc, #96]	; (8010848 <SDMMC_GetCmdResp3+0x70>)
 80107e6:	fba2 2303 	umull	r2, r3, r2, r3
 80107ea:	0a5b      	lsrs	r3, r3, #9
 80107ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80107f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107f4:	4623      	mov	r3, r4
 80107f6:	1e5c      	subs	r4, r3, #1
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d102      	bne.n	8010802 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010800:	e01b      	b.n	801083a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010806:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801080e:	2b00      	cmp	r3, #0
 8010810:	d0f0      	beq.n	80107f4 <SDMMC_GetCmdResp3+0x1c>
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1eb      	bne.n	80107f4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010820:	f003 0304 	and.w	r3, r3, #4
 8010824:	2b00      	cmp	r3, #0
 8010826:	d004      	beq.n	8010832 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2204      	movs	r2, #4
 801082c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801082e:	2304      	movs	r3, #4
 8010830:	e003      	b.n	801083a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	22c5      	movs	r2, #197	; 0xc5
 8010836:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bc90      	pop	{r4, r7}
 8010842:	4770      	bx	lr
 8010844:	20000000 	.word	0x20000000
 8010848:	10624dd3 	.word	0x10624dd3

0801084c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b087      	sub	sp, #28
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	460b      	mov	r3, r1
 8010856:	607a      	str	r2, [r7, #4]
 8010858:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801085a:	4b34      	ldr	r3, [pc, #208]	; (801092c <SDMMC_GetCmdResp6+0xe0>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4a34      	ldr	r2, [pc, #208]	; (8010930 <SDMMC_GetCmdResp6+0xe4>)
 8010860:	fba2 2303 	umull	r2, r3, r2, r3
 8010864:	0a5b      	lsrs	r3, r3, #9
 8010866:	f241 3288 	movw	r2, #5000	; 0x1388
 801086a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801086e:	4623      	mov	r3, r4
 8010870:	1e5c      	subs	r4, r3, #1
 8010872:	2b00      	cmp	r3, #0
 8010874:	d102      	bne.n	801087c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801087a:	e052      	b.n	8010922 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010880:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010888:	2b00      	cmp	r3, #0
 801088a:	d0f0      	beq.n	801086e <SDMMC_GetCmdResp6+0x22>
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010892:	2b00      	cmp	r3, #0
 8010894:	d1eb      	bne.n	801086e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801089a:	f003 0304 	and.w	r3, r3, #4
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d004      	beq.n	80108ac <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2204      	movs	r2, #4
 80108a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108a8:	2304      	movs	r3, #4
 80108aa:	e03a      	b.n	8010922 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108b0:	f003 0301 	and.w	r3, r3, #1
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d004      	beq.n	80108c2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2201      	movs	r2, #1
 80108bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108be:	2301      	movs	r3, #1
 80108c0:	e02f      	b.n	8010922 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80108c2:	68f8      	ldr	r0, [r7, #12]
 80108c4:	f7ff fbae 	bl	8010024 <SDIO_GetCommandResponse>
 80108c8:	4603      	mov	r3, r0
 80108ca:	461a      	mov	r2, r3
 80108cc:	7afb      	ldrb	r3, [r7, #11]
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d001      	beq.n	80108d6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108d2:	2301      	movs	r3, #1
 80108d4:	e025      	b.n	8010922 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	22c5      	movs	r2, #197	; 0xc5
 80108da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80108dc:	2100      	movs	r1, #0
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	f7ff fbad 	bl	801003e <SDIO_GetResponse>
 80108e4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d106      	bne.n	80108fe <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	0c1b      	lsrs	r3, r3, #16
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80108fa:	2300      	movs	r3, #0
 80108fc:	e011      	b.n	8010922 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010904:	2b00      	cmp	r3, #0
 8010906:	d002      	beq.n	801090e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801090c:	e009      	b.n	8010922 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801091c:	e001      	b.n	8010922 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801091e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010922:	4618      	mov	r0, r3
 8010924:	371c      	adds	r7, #28
 8010926:	46bd      	mov	sp, r7
 8010928:	bd90      	pop	{r4, r7, pc}
 801092a:	bf00      	nop
 801092c:	20000000 	.word	0x20000000
 8010930:	10624dd3 	.word	0x10624dd3

08010934 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010934:	b490      	push	{r4, r7}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801093c:	4b21      	ldr	r3, [pc, #132]	; (80109c4 <SDMMC_GetCmdResp7+0x90>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a21      	ldr	r2, [pc, #132]	; (80109c8 <SDMMC_GetCmdResp7+0x94>)
 8010942:	fba2 2303 	umull	r2, r3, r2, r3
 8010946:	0a5b      	lsrs	r3, r3, #9
 8010948:	f241 3288 	movw	r2, #5000	; 0x1388
 801094c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010950:	4623      	mov	r3, r4
 8010952:	1e5c      	subs	r4, r3, #1
 8010954:	2b00      	cmp	r3, #0
 8010956:	d102      	bne.n	801095e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010958:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801095c:	e02c      	b.n	80109b8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010962:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801096a:	2b00      	cmp	r3, #0
 801096c:	d0f0      	beq.n	8010950 <SDMMC_GetCmdResp7+0x1c>
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1eb      	bne.n	8010950 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801097c:	f003 0304 	and.w	r3, r3, #4
 8010980:	2b00      	cmp	r3, #0
 8010982:	d004      	beq.n	801098e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2204      	movs	r2, #4
 8010988:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801098a:	2304      	movs	r3, #4
 801098c:	e014      	b.n	80109b8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010992:	f003 0301 	and.w	r3, r3, #1
 8010996:	2b00      	cmp	r3, #0
 8010998:	d004      	beq.n	80109a4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2201      	movs	r2, #1
 801099e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109a0:	2301      	movs	r3, #1
 80109a2:	e009      	b.n	80109b8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2240      	movs	r2, #64	; 0x40
 80109b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80109b6:	2300      	movs	r3, #0
  
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bc90      	pop	{r4, r7}
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	20000000 	.word	0x20000000
 80109c8:	10624dd3 	.word	0x10624dd3

080109cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80109d0:	4904      	ldr	r1, [pc, #16]	; (80109e4 <MX_FATFS_Init+0x18>)
 80109d2:	4805      	ldr	r0, [pc, #20]	; (80109e8 <MX_FATFS_Init+0x1c>)
 80109d4:	f003 fb9c 	bl	8014110 <FATFS_LinkDriver>
 80109d8:	4603      	mov	r3, r0
 80109da:	461a      	mov	r2, r3
 80109dc:	4b03      	ldr	r3, [pc, #12]	; (80109ec <MX_FATFS_Init+0x20>)
 80109de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80109e0:	bf00      	nop
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	20043cc8 	.word	0x20043cc8
 80109e8:	0801a050 	.word	0x0801a050
 80109ec:	20043cc4 	.word	0x20043cc4

080109f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80109f6:	2300      	movs	r3, #0
 80109f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80109fa:	f000 f896 	bl	8010b2a <BSP_SD_IsDetected>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d001      	beq.n	8010a08 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010a04:	2301      	movs	r3, #1
 8010a06:	e012      	b.n	8010a2e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010a08:	480b      	ldr	r0, [pc, #44]	; (8010a38 <BSP_SD_Init+0x48>)
 8010a0a:	f7fb ffa5 	bl	800c958 <HAL_SD_Init>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010a12:	79fb      	ldrb	r3, [r7, #7]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d109      	bne.n	8010a2c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010a1c:	4806      	ldr	r0, [pc, #24]	; (8010a38 <BSP_SD_Init+0x48>)
 8010a1e:	f7fc fd4f 	bl	800d4c0 <HAL_SD_ConfigWideBusOperation>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d001      	beq.n	8010a2c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010a28:	2301      	movs	r3, #1
 8010a2a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	20043ac4 	.word	0x20043ac4

08010a3c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	68ba      	ldr	r2, [r7, #8]
 8010a50:	68f9      	ldr	r1, [r7, #12]
 8010a52:	4806      	ldr	r0, [pc, #24]	; (8010a6c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010a54:	f7fc f810 	bl	800ca78 <HAL_SD_ReadBlocks_DMA>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d001      	beq.n	8010a62 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3718      	adds	r7, #24
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	20043ac4 	.word	0x20043ac4

08010a70 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	68ba      	ldr	r2, [r7, #8]
 8010a84:	68f9      	ldr	r1, [r7, #12]
 8010a86:	4806      	ldr	r0, [pc, #24]	; (8010aa0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010a88:	f7fc f8de 	bl	800cc48 <HAL_SD_WriteBlocks_DMA>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d001      	beq.n	8010a96 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a92:	2301      	movs	r3, #1
 8010a94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3718      	adds	r7, #24
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	20043ac4 	.word	0x20043ac4

08010aa4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010aa8:	4805      	ldr	r0, [pc, #20]	; (8010ac0 <BSP_SD_GetCardState+0x1c>)
 8010aaa:	f7fc fd85 	bl	800d5b8 <HAL_SD_GetCardState>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b04      	cmp	r3, #4
 8010ab2:	bf14      	ite	ne
 8010ab4:	2301      	movne	r3, #1
 8010ab6:	2300      	moveq	r3, #0
 8010ab8:	b2db      	uxtb	r3, r3
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	20043ac4 	.word	0x20043ac4

08010ac4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010acc:	6879      	ldr	r1, [r7, #4]
 8010ace:	4803      	ldr	r0, [pc, #12]	; (8010adc <BSP_SD_GetCardInfo+0x18>)
 8010ad0:	f7fc fcca 	bl	800d468 <HAL_SD_GetCardInfo>
}
 8010ad4:	bf00      	nop
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	20043ac4 	.word	0x20043ac4

08010ae0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010ae8:	f000 f818 	bl	8010b1c <BSP_SD_AbortCallback>
}
 8010aec:	bf00      	nop
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010afc:	f000 f9a8 	bl	8010e50 <BSP_SD_WriteCpltCallback>
}
 8010b00:	bf00      	nop
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010b10:	f000 f9aa 	bl	8010e68 <BSP_SD_ReadCpltCallback>
}
 8010b14:	bf00      	nop
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	af00      	add	r7, sp, #0

}
 8010b20:	bf00      	nop
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr

08010b2a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b082      	sub	sp, #8
 8010b2e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010b30:	2301      	movs	r3, #1
 8010b32:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010b34:	f000 f80c 	bl	8010b50 <BSP_PlatformIsDetected>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d101      	bne.n	8010b42 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010b42:	79fb      	ldrb	r3, [r7, #7]
 8010b44:	b2db      	uxtb	r3, r3
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3708      	adds	r7, #8
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
	...

08010b50 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010b56:	2301      	movs	r3, #1
 8010b58:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010b5e:	4806      	ldr	r0, [pc, #24]	; (8010b78 <BSP_PlatformIsDetected+0x28>)
 8010b60:	f7fa f87e 	bl	800ac60 <HAL_GPIO_ReadPin>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	40020000 	.word	0x40020000

08010b7c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010b84:	f7f8 fde2 	bl	800974c <HAL_GetTick>
 8010b88:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010b8a:	e006      	b.n	8010b9a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010b8c:	f7ff ff8a 	bl	8010aa4 <BSP_SD_GetCardState>
 8010b90:	4603      	mov	r3, r0
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d101      	bne.n	8010b9a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010b96:	2300      	movs	r3, #0
 8010b98:	e009      	b.n	8010bae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010b9a:	f7f8 fdd7 	bl	800974c <HAL_GetTick>
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	1ad3      	subs	r3, r2, r3
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d8f0      	bhi.n	8010b8c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3710      	adds	r7, #16
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
	...

08010bb8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010bc2:	4b0b      	ldr	r3, [pc, #44]	; (8010bf0 <SD_CheckStatus+0x38>)
 8010bc4:	2201      	movs	r2, #1
 8010bc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010bc8:	f7ff ff6c 	bl	8010aa4 <BSP_SD_GetCardState>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d107      	bne.n	8010be2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010bd2:	4b07      	ldr	r3, [pc, #28]	; (8010bf0 <SD_CheckStatus+0x38>)
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	f023 0301 	bic.w	r3, r3, #1
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	4b04      	ldr	r3, [pc, #16]	; (8010bf0 <SD_CheckStatus+0x38>)
 8010be0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010be2:	4b03      	ldr	r3, [pc, #12]	; (8010bf0 <SD_CheckStatus+0x38>)
 8010be4:	781b      	ldrb	r3, [r3, #0]
 8010be6:	b2db      	uxtb	r3, r3
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	20000009 	.word	0x20000009

08010bf4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010bfe:	f7ff fef7 	bl	80109f0 <BSP_SD_Init>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d107      	bne.n	8010c18 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010c08:	79fb      	ldrb	r3, [r7, #7]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ff ffd4 	bl	8010bb8 <SD_CheckStatus>
 8010c10:	4603      	mov	r3, r0
 8010c12:	461a      	mov	r2, r3
 8010c14:	4b04      	ldr	r3, [pc, #16]	; (8010c28 <SD_initialize+0x34>)
 8010c16:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010c18:	4b03      	ldr	r3, [pc, #12]	; (8010c28 <SD_initialize+0x34>)
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	b2db      	uxtb	r3, r3
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	20000009 	.word	0x20000009

08010c2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	4603      	mov	r3, r0
 8010c34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010c36:	79fb      	ldrb	r3, [r7, #7]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7ff ffbd 	bl	8010bb8 <SD_CheckStatus>
 8010c3e:	4603      	mov	r3, r0
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}

08010c48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b086      	sub	sp, #24
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60b9      	str	r1, [r7, #8]
 8010c50:	607a      	str	r2, [r7, #4]
 8010c52:	603b      	str	r3, [r7, #0]
 8010c54:	4603      	mov	r3, r0
 8010c56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010c58:	2301      	movs	r3, #1
 8010c5a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010c5c:	f247 5030 	movw	r0, #30000	; 0x7530
 8010c60:	f7ff ff8c 	bl	8010b7c <SD_CheckStatusWithTimeout>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	da01      	bge.n	8010c6e <SD_read+0x26>
  {
    return res;
 8010c6a:	7dfb      	ldrb	r3, [r7, #23]
 8010c6c:	e03b      	b.n	8010ce6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010c6e:	683a      	ldr	r2, [r7, #0]
 8010c70:	6879      	ldr	r1, [r7, #4]
 8010c72:	68b8      	ldr	r0, [r7, #8]
 8010c74:	f7ff fee2 	bl	8010a3c <BSP_SD_ReadBlocks_DMA>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d132      	bne.n	8010ce4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010c7e:	4b1c      	ldr	r3, [pc, #112]	; (8010cf0 <SD_read+0xa8>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010c84:	f7f8 fd62 	bl	800974c <HAL_GetTick>
 8010c88:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010c8a:	bf00      	nop
 8010c8c:	4b18      	ldr	r3, [pc, #96]	; (8010cf0 <SD_read+0xa8>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d108      	bne.n	8010ca6 <SD_read+0x5e>
 8010c94:	f7f8 fd5a 	bl	800974c <HAL_GetTick>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d9f2      	bls.n	8010c8c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010ca6:	4b12      	ldr	r3, [pc, #72]	; (8010cf0 <SD_read+0xa8>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d102      	bne.n	8010cb4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	75fb      	strb	r3, [r7, #23]
 8010cb2:	e017      	b.n	8010ce4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010cb4:	4b0e      	ldr	r3, [pc, #56]	; (8010cf0 <SD_read+0xa8>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010cba:	f7f8 fd47 	bl	800974c <HAL_GetTick>
 8010cbe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010cc0:	e007      	b.n	8010cd2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010cc2:	f7ff feef 	bl	8010aa4 <BSP_SD_GetCardState>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d102      	bne.n	8010cd2 <SD_read+0x8a>
          {
            res = RES_OK;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010cd0:	e008      	b.n	8010ce4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010cd2:	f7f8 fd3b 	bl	800974c <HAL_GetTick>
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d9ee      	bls.n	8010cc2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3718      	adds	r7, #24
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	20041360 	.word	0x20041360

08010cf4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60b9      	str	r1, [r7, #8]
 8010cfc:	607a      	str	r2, [r7, #4]
 8010cfe:	603b      	str	r3, [r7, #0]
 8010d00:	4603      	mov	r3, r0
 8010d02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d04:	2301      	movs	r3, #1
 8010d06:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010d08:	4b24      	ldr	r3, [pc, #144]	; (8010d9c <SD_write+0xa8>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d0e:	f247 5030 	movw	r0, #30000	; 0x7530
 8010d12:	f7ff ff33 	bl	8010b7c <SD_CheckStatusWithTimeout>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	da01      	bge.n	8010d20 <SD_write+0x2c>
  {
    return res;
 8010d1c:	7dfb      	ldrb	r3, [r7, #23]
 8010d1e:	e038      	b.n	8010d92 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010d20:	683a      	ldr	r2, [r7, #0]
 8010d22:	6879      	ldr	r1, [r7, #4]
 8010d24:	68b8      	ldr	r0, [r7, #8]
 8010d26:	f7ff fea3 	bl	8010a70 <BSP_SD_WriteBlocks_DMA>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d12f      	bne.n	8010d90 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010d30:	f7f8 fd0c 	bl	800974c <HAL_GetTick>
 8010d34:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d36:	bf00      	nop
 8010d38:	4b18      	ldr	r3, [pc, #96]	; (8010d9c <SD_write+0xa8>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d108      	bne.n	8010d52 <SD_write+0x5e>
 8010d40:	f7f8 fd04 	bl	800974c <HAL_GetTick>
 8010d44:	4602      	mov	r2, r0
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	1ad3      	subs	r3, r2, r3
 8010d4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d9f2      	bls.n	8010d38 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010d52:	4b12      	ldr	r3, [pc, #72]	; (8010d9c <SD_write+0xa8>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d102      	bne.n	8010d60 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	75fb      	strb	r3, [r7, #23]
 8010d5e:	e017      	b.n	8010d90 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010d60:	4b0e      	ldr	r3, [pc, #56]	; (8010d9c <SD_write+0xa8>)
 8010d62:	2200      	movs	r2, #0
 8010d64:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010d66:	f7f8 fcf1 	bl	800974c <HAL_GetTick>
 8010d6a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d6c:	e007      	b.n	8010d7e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d6e:	f7ff fe99 	bl	8010aa4 <BSP_SD_GetCardState>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d102      	bne.n	8010d7e <SD_write+0x8a>
          {
            res = RES_OK;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8010d7c:	e008      	b.n	8010d90 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d7e:	f7f8 fce5 	bl	800974c <HAL_GetTick>
 8010d82:	4602      	mov	r2, r0
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	f247 522f 	movw	r2, #29999	; 0x752f
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d9ee      	bls.n	8010d6e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	2004135c 	.word	0x2004135c

08010da0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b08c      	sub	sp, #48	; 0x30
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	4603      	mov	r3, r0
 8010da8:	603a      	str	r2, [r7, #0]
 8010daa:	71fb      	strb	r3, [r7, #7]
 8010dac:	460b      	mov	r3, r1
 8010dae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010db0:	2301      	movs	r3, #1
 8010db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010db6:	4b25      	ldr	r3, [pc, #148]	; (8010e4c <SD_ioctl+0xac>)
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	f003 0301 	and.w	r3, r3, #1
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <SD_ioctl+0x28>
 8010dc4:	2303      	movs	r3, #3
 8010dc6:	e03c      	b.n	8010e42 <SD_ioctl+0xa2>

  switch (cmd)
 8010dc8:	79bb      	ldrb	r3, [r7, #6]
 8010dca:	2b03      	cmp	r3, #3
 8010dcc:	d834      	bhi.n	8010e38 <SD_ioctl+0x98>
 8010dce:	a201      	add	r2, pc, #4	; (adr r2, 8010dd4 <SD_ioctl+0x34>)
 8010dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dd4:	08010de5 	.word	0x08010de5
 8010dd8:	08010ded 	.word	0x08010ded
 8010ddc:	08010e05 	.word	0x08010e05
 8010de0:	08010e1f 	.word	0x08010e1f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010de4:	2300      	movs	r3, #0
 8010de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010dea:	e028      	b.n	8010e3e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010dec:	f107 030c 	add.w	r3, r7, #12
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7ff fe67 	bl	8010ac4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e02:	e01c      	b.n	8010e3e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e04:	f107 030c 	add.w	r3, r7, #12
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7ff fe5b 	bl	8010ac4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010e16:	2300      	movs	r3, #0
 8010e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e1c:	e00f      	b.n	8010e3e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e1e:	f107 030c 	add.w	r3, r7, #12
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7ff fe4e 	bl	8010ac4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2a:	0a5a      	lsrs	r2, r3, #9
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e36:	e002      	b.n	8010e3e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010e38:	2304      	movs	r3, #4
 8010e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3730      	adds	r7, #48	; 0x30
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	20000009 	.word	0x20000009

08010e50 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010e50:	b480      	push	{r7}
 8010e52:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010e54:	4b03      	ldr	r3, [pc, #12]	; (8010e64 <BSP_SD_WriteCpltCallback+0x14>)
 8010e56:	2201      	movs	r2, #1
 8010e58:	601a      	str	r2, [r3, #0]
}
 8010e5a:	bf00      	nop
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr
 8010e64:	2004135c 	.word	0x2004135c

08010e68 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010e6c:	4b03      	ldr	r3, [pc, #12]	; (8010e7c <BSP_SD_ReadCpltCallback+0x14>)
 8010e6e:	2201      	movs	r2, #1
 8010e70:	601a      	str	r2, [r3, #0]
}
 8010e72:	bf00      	nop
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr
 8010e7c:	20041360 	.word	0x20041360

08010e80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	4603      	mov	r3, r0
 8010e88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010e8a:	79fb      	ldrb	r3, [r7, #7]
 8010e8c:	4a08      	ldr	r2, [pc, #32]	; (8010eb0 <disk_status+0x30>)
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	4413      	add	r3, r2
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	79fa      	ldrb	r2, [r7, #7]
 8010e98:	4905      	ldr	r1, [pc, #20]	; (8010eb0 <disk_status+0x30>)
 8010e9a:	440a      	add	r2, r1
 8010e9c:	7a12      	ldrb	r2, [r2, #8]
 8010e9e:	4610      	mov	r0, r2
 8010ea0:	4798      	blx	r3
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3710      	adds	r7, #16
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	2004138c 	.word	0x2004138c

08010eb4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	4603      	mov	r3, r0
 8010ebc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	4a0d      	ldr	r2, [pc, #52]	; (8010efc <disk_initialize+0x48>)
 8010ec6:	5cd3      	ldrb	r3, [r2, r3]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d111      	bne.n	8010ef0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010ecc:	79fb      	ldrb	r3, [r7, #7]
 8010ece:	4a0b      	ldr	r2, [pc, #44]	; (8010efc <disk_initialize+0x48>)
 8010ed0:	2101      	movs	r1, #1
 8010ed2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010ed4:	79fb      	ldrb	r3, [r7, #7]
 8010ed6:	4a09      	ldr	r2, [pc, #36]	; (8010efc <disk_initialize+0x48>)
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	4413      	add	r3, r2
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	79fa      	ldrb	r2, [r7, #7]
 8010ee2:	4906      	ldr	r1, [pc, #24]	; (8010efc <disk_initialize+0x48>)
 8010ee4:	440a      	add	r2, r1
 8010ee6:	7a12      	ldrb	r2, [r2, #8]
 8010ee8:	4610      	mov	r0, r2
 8010eea:	4798      	blx	r3
 8010eec:	4603      	mov	r3, r0
 8010eee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	2004138c 	.word	0x2004138c

08010f00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010f00:	b590      	push	{r4, r7, lr}
 8010f02:	b087      	sub	sp, #28
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60b9      	str	r1, [r7, #8]
 8010f08:	607a      	str	r2, [r7, #4]
 8010f0a:	603b      	str	r3, [r7, #0]
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010f10:	7bfb      	ldrb	r3, [r7, #15]
 8010f12:	4a0a      	ldr	r2, [pc, #40]	; (8010f3c <disk_read+0x3c>)
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	4413      	add	r3, r2
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	689c      	ldr	r4, [r3, #8]
 8010f1c:	7bfb      	ldrb	r3, [r7, #15]
 8010f1e:	4a07      	ldr	r2, [pc, #28]	; (8010f3c <disk_read+0x3c>)
 8010f20:	4413      	add	r3, r2
 8010f22:	7a18      	ldrb	r0, [r3, #8]
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	68b9      	ldr	r1, [r7, #8]
 8010f2a:	47a0      	blx	r4
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	371c      	adds	r7, #28
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd90      	pop	{r4, r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	2004138c 	.word	0x2004138c

08010f40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010f40:	b590      	push	{r4, r7, lr}
 8010f42:	b087      	sub	sp, #28
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60b9      	str	r1, [r7, #8]
 8010f48:	607a      	str	r2, [r7, #4]
 8010f4a:	603b      	str	r3, [r7, #0]
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010f50:	7bfb      	ldrb	r3, [r7, #15]
 8010f52:	4a0a      	ldr	r2, [pc, #40]	; (8010f7c <disk_write+0x3c>)
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	4413      	add	r3, r2
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	68dc      	ldr	r4, [r3, #12]
 8010f5c:	7bfb      	ldrb	r3, [r7, #15]
 8010f5e:	4a07      	ldr	r2, [pc, #28]	; (8010f7c <disk_write+0x3c>)
 8010f60:	4413      	add	r3, r2
 8010f62:	7a18      	ldrb	r0, [r3, #8]
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	687a      	ldr	r2, [r7, #4]
 8010f68:	68b9      	ldr	r1, [r7, #8]
 8010f6a:	47a0      	blx	r4
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	371c      	adds	r7, #28
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd90      	pop	{r4, r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	2004138c 	.word	0x2004138c

08010f80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	4603      	mov	r3, r0
 8010f88:	603a      	str	r2, [r7, #0]
 8010f8a:	71fb      	strb	r3, [r7, #7]
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010f90:	79fb      	ldrb	r3, [r7, #7]
 8010f92:	4a09      	ldr	r2, [pc, #36]	; (8010fb8 <disk_ioctl+0x38>)
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	691b      	ldr	r3, [r3, #16]
 8010f9c:	79fa      	ldrb	r2, [r7, #7]
 8010f9e:	4906      	ldr	r1, [pc, #24]	; (8010fb8 <disk_ioctl+0x38>)
 8010fa0:	440a      	add	r2, r1
 8010fa2:	7a10      	ldrb	r0, [r2, #8]
 8010fa4:	79b9      	ldrb	r1, [r7, #6]
 8010fa6:	683a      	ldr	r2, [r7, #0]
 8010fa8:	4798      	blx	r3
 8010faa:	4603      	mov	r3, r0
 8010fac:	73fb      	strb	r3, [r7, #15]
  return res;
 8010fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	2004138c 	.word	0x2004138c

08010fbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b085      	sub	sp, #20
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010fcc:	89fb      	ldrh	r3, [r7, #14]
 8010fce:	021b      	lsls	r3, r3, #8
 8010fd0:	b21a      	sxth	r2, r3
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	b21b      	sxth	r3, r3
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	b21b      	sxth	r3, r3
 8010fdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010fde:	89fb      	ldrh	r3, [r7, #14]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3714      	adds	r7, #20
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010fec:	b480      	push	{r7}
 8010fee:	b085      	sub	sp, #20
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	3303      	adds	r3, #3
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	021b      	lsls	r3, r3, #8
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	3202      	adds	r2, #2
 8011004:	7812      	ldrb	r2, [r2, #0]
 8011006:	4313      	orrs	r3, r2
 8011008:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	021b      	lsls	r3, r3, #8
 801100e:	687a      	ldr	r2, [r7, #4]
 8011010:	3201      	adds	r2, #1
 8011012:	7812      	ldrb	r2, [r2, #0]
 8011014:	4313      	orrs	r3, r2
 8011016:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	021b      	lsls	r3, r3, #8
 801101c:	687a      	ldr	r2, [r7, #4]
 801101e:	7812      	ldrb	r2, [r2, #0]
 8011020:	4313      	orrs	r3, r2
 8011022:	60fb      	str	r3, [r7, #12]
	return rv;
 8011024:	68fb      	ldr	r3, [r7, #12]
}
 8011026:	4618      	mov	r0, r3
 8011028:	3714      	adds	r7, #20
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr

08011032 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011032:	b480      	push	{r7}
 8011034:	b083      	sub	sp, #12
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	460b      	mov	r3, r1
 801103c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	887a      	ldrh	r2, [r7, #2]
 8011046:	b2d2      	uxtb	r2, r2
 8011048:	701a      	strb	r2, [r3, #0]
 801104a:	887b      	ldrh	r3, [r7, #2]
 801104c:	0a1b      	lsrs	r3, r3, #8
 801104e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	1c5a      	adds	r2, r3, #1
 8011054:	607a      	str	r2, [r7, #4]
 8011056:	887a      	ldrh	r2, [r7, #2]
 8011058:	b2d2      	uxtb	r2, r2
 801105a:	701a      	strb	r2, [r3, #0]
}
 801105c:	bf00      	nop
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011068:	b480      	push	{r7}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	1c5a      	adds	r2, r3, #1
 8011076:	607a      	str	r2, [r7, #4]
 8011078:	683a      	ldr	r2, [r7, #0]
 801107a:	b2d2      	uxtb	r2, r2
 801107c:	701a      	strb	r2, [r3, #0]
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	0a1b      	lsrs	r3, r3, #8
 8011082:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	1c5a      	adds	r2, r3, #1
 8011088:	607a      	str	r2, [r7, #4]
 801108a:	683a      	ldr	r2, [r7, #0]
 801108c:	b2d2      	uxtb	r2, r2
 801108e:	701a      	strb	r2, [r3, #0]
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	0a1b      	lsrs	r3, r3, #8
 8011094:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	1c5a      	adds	r2, r3, #1
 801109a:	607a      	str	r2, [r7, #4]
 801109c:	683a      	ldr	r2, [r7, #0]
 801109e:	b2d2      	uxtb	r2, r2
 80110a0:	701a      	strb	r2, [r3, #0]
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	0a1b      	lsrs	r3, r3, #8
 80110a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	607a      	str	r2, [r7, #4]
 80110ae:	683a      	ldr	r2, [r7, #0]
 80110b0:	b2d2      	uxtb	r2, r2
 80110b2:	701a      	strb	r2, [r3, #0]
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80110c0:	b480      	push	{r7}
 80110c2:	b087      	sub	sp, #28
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00d      	beq.n	80110f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80110da:	693a      	ldr	r2, [r7, #16]
 80110dc:	1c53      	adds	r3, r2, #1
 80110de:	613b      	str	r3, [r7, #16]
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	1c59      	adds	r1, r3, #1
 80110e4:	6179      	str	r1, [r7, #20]
 80110e6:	7812      	ldrb	r2, [r2, #0]
 80110e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	3b01      	subs	r3, #1
 80110ee:	607b      	str	r3, [r7, #4]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d1f1      	bne.n	80110da <mem_cpy+0x1a>
	}
}
 80110f6:	bf00      	nop
 80110f8:	371c      	adds	r7, #28
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr

08011102 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011102:	b480      	push	{r7}
 8011104:	b087      	sub	sp, #28
 8011106:	af00      	add	r7, sp, #0
 8011108:	60f8      	str	r0, [r7, #12]
 801110a:	60b9      	str	r1, [r7, #8]
 801110c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	1c5a      	adds	r2, r3, #1
 8011116:	617a      	str	r2, [r7, #20]
 8011118:	68ba      	ldr	r2, [r7, #8]
 801111a:	b2d2      	uxtb	r2, r2
 801111c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	3b01      	subs	r3, #1
 8011122:	607b      	str	r3, [r7, #4]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1f3      	bne.n	8011112 <mem_set+0x10>
}
 801112a:	bf00      	nop
 801112c:	371c      	adds	r7, #28
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr

08011136 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011136:	b480      	push	{r7}
 8011138:	b089      	sub	sp, #36	; 0x24
 801113a:	af00      	add	r7, sp, #0
 801113c:	60f8      	str	r0, [r7, #12]
 801113e:	60b9      	str	r1, [r7, #8]
 8011140:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	61fb      	str	r3, [r7, #28]
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801114a:	2300      	movs	r3, #0
 801114c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801114e:	69fb      	ldr	r3, [r7, #28]
 8011150:	1c5a      	adds	r2, r3, #1
 8011152:	61fa      	str	r2, [r7, #28]
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	4619      	mov	r1, r3
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	1c5a      	adds	r2, r3, #1
 801115c:	61ba      	str	r2, [r7, #24]
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	1acb      	subs	r3, r1, r3
 8011162:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	3b01      	subs	r3, #1
 8011168:	607b      	str	r3, [r7, #4]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d002      	beq.n	8011176 <mem_cmp+0x40>
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d0eb      	beq.n	801114e <mem_cmp+0x18>

	return r;
 8011176:	697b      	ldr	r3, [r7, #20]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3724      	adds	r7, #36	; 0x24
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801118e:	e002      	b.n	8011196 <chk_chr+0x12>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	3301      	adds	r3, #1
 8011194:	607b      	str	r3, [r7, #4]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d005      	beq.n	80111aa <chk_chr+0x26>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	461a      	mov	r2, r3
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d1f2      	bne.n	8011190 <chk_chr+0xc>
	return *str;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	781b      	ldrb	r3, [r3, #0]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	370c      	adds	r7, #12
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
	...

080111bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80111c6:	2300      	movs	r3, #0
 80111c8:	60bb      	str	r3, [r7, #8]
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	60fb      	str	r3, [r7, #12]
 80111ce:	e029      	b.n	8011224 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80111d0:	4a27      	ldr	r2, [pc, #156]	; (8011270 <chk_lock+0xb4>)
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	011b      	lsls	r3, r3, #4
 80111d6:	4413      	add	r3, r2
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d01d      	beq.n	801121a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80111de:	4a24      	ldr	r2, [pc, #144]	; (8011270 <chk_lock+0xb4>)
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	011b      	lsls	r3, r3, #4
 80111e4:	4413      	add	r3, r2
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d116      	bne.n	801121e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80111f0:	4a1f      	ldr	r2, [pc, #124]	; (8011270 <chk_lock+0xb4>)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	011b      	lsls	r3, r3, #4
 80111f6:	4413      	add	r3, r2
 80111f8:	3304      	adds	r3, #4
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011200:	429a      	cmp	r2, r3
 8011202:	d10c      	bne.n	801121e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011204:	4a1a      	ldr	r2, [pc, #104]	; (8011270 <chk_lock+0xb4>)
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	011b      	lsls	r3, r3, #4
 801120a:	4413      	add	r3, r2
 801120c:	3308      	adds	r3, #8
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011214:	429a      	cmp	r2, r3
 8011216:	d102      	bne.n	801121e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011218:	e007      	b.n	801122a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801121a:	2301      	movs	r3, #1
 801121c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3301      	adds	r3, #1
 8011222:	60fb      	str	r3, [r7, #12]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2b01      	cmp	r3, #1
 8011228:	d9d2      	bls.n	80111d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2b02      	cmp	r3, #2
 801122e:	d109      	bne.n	8011244 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d102      	bne.n	801123c <chk_lock+0x80>
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	2b02      	cmp	r3, #2
 801123a:	d101      	bne.n	8011240 <chk_lock+0x84>
 801123c:	2300      	movs	r3, #0
 801123e:	e010      	b.n	8011262 <chk_lock+0xa6>
 8011240:	2312      	movs	r3, #18
 8011242:	e00e      	b.n	8011262 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d108      	bne.n	801125c <chk_lock+0xa0>
 801124a:	4a09      	ldr	r2, [pc, #36]	; (8011270 <chk_lock+0xb4>)
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	011b      	lsls	r3, r3, #4
 8011250:	4413      	add	r3, r2
 8011252:	330c      	adds	r3, #12
 8011254:	881b      	ldrh	r3, [r3, #0]
 8011256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801125a:	d101      	bne.n	8011260 <chk_lock+0xa4>
 801125c:	2310      	movs	r3, #16
 801125e:	e000      	b.n	8011262 <chk_lock+0xa6>
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	3714      	adds	r7, #20
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	2004136c 	.word	0x2004136c

08011274 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801127a:	2300      	movs	r3, #0
 801127c:	607b      	str	r3, [r7, #4]
 801127e:	e002      	b.n	8011286 <enq_lock+0x12>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	3301      	adds	r3, #1
 8011284:	607b      	str	r3, [r7, #4]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d806      	bhi.n	801129a <enq_lock+0x26>
 801128c:	4a09      	ldr	r2, [pc, #36]	; (80112b4 <enq_lock+0x40>)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	011b      	lsls	r3, r3, #4
 8011292:	4413      	add	r3, r2
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d1f2      	bne.n	8011280 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2b02      	cmp	r3, #2
 801129e:	bf14      	ite	ne
 80112a0:	2301      	movne	r3, #1
 80112a2:	2300      	moveq	r3, #0
 80112a4:	b2db      	uxtb	r3, r3
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr
 80112b2:	bf00      	nop
 80112b4:	2004136c 	.word	0x2004136c

080112b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112c2:	2300      	movs	r3, #0
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	e01f      	b.n	8011308 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80112c8:	4a41      	ldr	r2, [pc, #260]	; (80113d0 <inc_lock+0x118>)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	011b      	lsls	r3, r3, #4
 80112ce:	4413      	add	r3, r2
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d113      	bne.n	8011302 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80112da:	4a3d      	ldr	r2, [pc, #244]	; (80113d0 <inc_lock+0x118>)
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	011b      	lsls	r3, r3, #4
 80112e0:	4413      	add	r3, r2
 80112e2:	3304      	adds	r3, #4
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d109      	bne.n	8011302 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80112ee:	4a38      	ldr	r2, [pc, #224]	; (80113d0 <inc_lock+0x118>)
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	011b      	lsls	r3, r3, #4
 80112f4:	4413      	add	r3, r2
 80112f6:	3308      	adds	r3, #8
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80112fe:	429a      	cmp	r2, r3
 8011300:	d006      	beq.n	8011310 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	3301      	adds	r3, #1
 8011306:	60fb      	str	r3, [r7, #12]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2b01      	cmp	r3, #1
 801130c:	d9dc      	bls.n	80112c8 <inc_lock+0x10>
 801130e:	e000      	b.n	8011312 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011310:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b02      	cmp	r3, #2
 8011316:	d132      	bne.n	801137e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011318:	2300      	movs	r3, #0
 801131a:	60fb      	str	r3, [r7, #12]
 801131c:	e002      	b.n	8011324 <inc_lock+0x6c>
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	3301      	adds	r3, #1
 8011322:	60fb      	str	r3, [r7, #12]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2b01      	cmp	r3, #1
 8011328:	d806      	bhi.n	8011338 <inc_lock+0x80>
 801132a:	4a29      	ldr	r2, [pc, #164]	; (80113d0 <inc_lock+0x118>)
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	011b      	lsls	r3, r3, #4
 8011330:	4413      	add	r3, r2
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d1f2      	bne.n	801131e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2b02      	cmp	r3, #2
 801133c:	d101      	bne.n	8011342 <inc_lock+0x8a>
 801133e:	2300      	movs	r3, #0
 8011340:	e040      	b.n	80113c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681a      	ldr	r2, [r3, #0]
 8011346:	4922      	ldr	r1, [pc, #136]	; (80113d0 <inc_lock+0x118>)
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	011b      	lsls	r3, r3, #4
 801134c:	440b      	add	r3, r1
 801134e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	689a      	ldr	r2, [r3, #8]
 8011354:	491e      	ldr	r1, [pc, #120]	; (80113d0 <inc_lock+0x118>)
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	011b      	lsls	r3, r3, #4
 801135a:	440b      	add	r3, r1
 801135c:	3304      	adds	r3, #4
 801135e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	695a      	ldr	r2, [r3, #20]
 8011364:	491a      	ldr	r1, [pc, #104]	; (80113d0 <inc_lock+0x118>)
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	011b      	lsls	r3, r3, #4
 801136a:	440b      	add	r3, r1
 801136c:	3308      	adds	r3, #8
 801136e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011370:	4a17      	ldr	r2, [pc, #92]	; (80113d0 <inc_lock+0x118>)
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	011b      	lsls	r3, r3, #4
 8011376:	4413      	add	r3, r2
 8011378:	330c      	adds	r3, #12
 801137a:	2200      	movs	r2, #0
 801137c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d009      	beq.n	8011398 <inc_lock+0xe0>
 8011384:	4a12      	ldr	r2, [pc, #72]	; (80113d0 <inc_lock+0x118>)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	011b      	lsls	r3, r3, #4
 801138a:	4413      	add	r3, r2
 801138c:	330c      	adds	r3, #12
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d001      	beq.n	8011398 <inc_lock+0xe0>
 8011394:	2300      	movs	r3, #0
 8011396:	e015      	b.n	80113c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d108      	bne.n	80113b0 <inc_lock+0xf8>
 801139e:	4a0c      	ldr	r2, [pc, #48]	; (80113d0 <inc_lock+0x118>)
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	011b      	lsls	r3, r3, #4
 80113a4:	4413      	add	r3, r2
 80113a6:	330c      	adds	r3, #12
 80113a8:	881b      	ldrh	r3, [r3, #0]
 80113aa:	3301      	adds	r3, #1
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	e001      	b.n	80113b4 <inc_lock+0xfc>
 80113b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80113b4:	4906      	ldr	r1, [pc, #24]	; (80113d0 <inc_lock+0x118>)
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	011b      	lsls	r3, r3, #4
 80113ba:	440b      	add	r3, r1
 80113bc:	330c      	adds	r3, #12
 80113be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	3301      	adds	r3, #1
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3714      	adds	r7, #20
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr
 80113d0:	2004136c 	.word	0x2004136c

080113d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b085      	sub	sp, #20
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	3b01      	subs	r3, #1
 80113e0:	607b      	str	r3, [r7, #4]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d825      	bhi.n	8011434 <dec_lock+0x60>
		n = Files[i].ctr;
 80113e8:	4a17      	ldr	r2, [pc, #92]	; (8011448 <dec_lock+0x74>)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	011b      	lsls	r3, r3, #4
 80113ee:	4413      	add	r3, r2
 80113f0:	330c      	adds	r3, #12
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80113f6:	89fb      	ldrh	r3, [r7, #14]
 80113f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113fc:	d101      	bne.n	8011402 <dec_lock+0x2e>
 80113fe:	2300      	movs	r3, #0
 8011400:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011402:	89fb      	ldrh	r3, [r7, #14]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d002      	beq.n	801140e <dec_lock+0x3a>
 8011408:	89fb      	ldrh	r3, [r7, #14]
 801140a:	3b01      	subs	r3, #1
 801140c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801140e:	4a0e      	ldr	r2, [pc, #56]	; (8011448 <dec_lock+0x74>)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	011b      	lsls	r3, r3, #4
 8011414:	4413      	add	r3, r2
 8011416:	330c      	adds	r3, #12
 8011418:	89fa      	ldrh	r2, [r7, #14]
 801141a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801141c:	89fb      	ldrh	r3, [r7, #14]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d105      	bne.n	801142e <dec_lock+0x5a>
 8011422:	4a09      	ldr	r2, [pc, #36]	; (8011448 <dec_lock+0x74>)
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	011b      	lsls	r3, r3, #4
 8011428:	4413      	add	r3, r2
 801142a:	2200      	movs	r2, #0
 801142c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801142e:	2300      	movs	r3, #0
 8011430:	737b      	strb	r3, [r7, #13]
 8011432:	e001      	b.n	8011438 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011434:	2302      	movs	r3, #2
 8011436:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011438:	7b7b      	ldrb	r3, [r7, #13]
}
 801143a:	4618      	mov	r0, r3
 801143c:	3714      	adds	r7, #20
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	2004136c 	.word	0x2004136c

0801144c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801144c:	b480      	push	{r7}
 801144e:	b085      	sub	sp, #20
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011454:	2300      	movs	r3, #0
 8011456:	60fb      	str	r3, [r7, #12]
 8011458:	e010      	b.n	801147c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801145a:	4a0d      	ldr	r2, [pc, #52]	; (8011490 <clear_lock+0x44>)
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	011b      	lsls	r3, r3, #4
 8011460:	4413      	add	r3, r2
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	429a      	cmp	r2, r3
 8011468:	d105      	bne.n	8011476 <clear_lock+0x2a>
 801146a:	4a09      	ldr	r2, [pc, #36]	; (8011490 <clear_lock+0x44>)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	011b      	lsls	r3, r3, #4
 8011470:	4413      	add	r3, r2
 8011472:	2200      	movs	r2, #0
 8011474:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	3301      	adds	r3, #1
 801147a:	60fb      	str	r3, [r7, #12]
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	2b01      	cmp	r3, #1
 8011480:	d9eb      	bls.n	801145a <clear_lock+0xe>
	}
}
 8011482:	bf00      	nop
 8011484:	3714      	adds	r7, #20
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr
 801148e:	bf00      	nop
 8011490:	2004136c 	.word	0x2004136c

08011494 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b086      	sub	sp, #24
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801149c:	2300      	movs	r3, #0
 801149e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	78db      	ldrb	r3, [r3, #3]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d034      	beq.n	8011512 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	7858      	ldrb	r0, [r3, #1]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80114b8:	2301      	movs	r3, #1
 80114ba:	697a      	ldr	r2, [r7, #20]
 80114bc:	f7ff fd40 	bl	8010f40 <disk_write>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d002      	beq.n	80114cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80114c6:	2301      	movs	r3, #1
 80114c8:	73fb      	strb	r3, [r7, #15]
 80114ca:	e022      	b.n	8011512 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d6:	697a      	ldr	r2, [r7, #20]
 80114d8:	1ad2      	subs	r2, r2, r3
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6a1b      	ldr	r3, [r3, #32]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d217      	bcs.n	8011512 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	789b      	ldrb	r3, [r3, #2]
 80114e6:	613b      	str	r3, [r7, #16]
 80114e8:	e010      	b.n	801150c <sync_window+0x78>
					wsect += fs->fsize;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6a1b      	ldr	r3, [r3, #32]
 80114ee:	697a      	ldr	r2, [r7, #20]
 80114f0:	4413      	add	r3, r2
 80114f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	7858      	ldrb	r0, [r3, #1]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80114fe:	2301      	movs	r3, #1
 8011500:	697a      	ldr	r2, [r7, #20]
 8011502:	f7ff fd1d 	bl	8010f40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	3b01      	subs	r3, #1
 801150a:	613b      	str	r3, [r7, #16]
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	2b01      	cmp	r3, #1
 8011510:	d8eb      	bhi.n	80114ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011512:	7bfb      	ldrb	r3, [r7, #15]
}
 8011514:	4618      	mov	r0, r3
 8011516:	3718      	adds	r7, #24
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011526:	2300      	movs	r3, #0
 8011528:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801152e:	683a      	ldr	r2, [r7, #0]
 8011530:	429a      	cmp	r2, r3
 8011532:	d01b      	beq.n	801156c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f7ff ffad 	bl	8011494 <sync_window>
 801153a:	4603      	mov	r3, r0
 801153c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801153e:	7bfb      	ldrb	r3, [r7, #15]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d113      	bne.n	801156c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	7858      	ldrb	r0, [r3, #1]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801154e:	2301      	movs	r3, #1
 8011550:	683a      	ldr	r2, [r7, #0]
 8011552:	f7ff fcd5 	bl	8010f00 <disk_read>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d004      	beq.n	8011566 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801155c:	f04f 33ff 	mov.w	r3, #4294967295
 8011560:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011562:	2301      	movs	r3, #1
 8011564:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	683a      	ldr	r2, [r7, #0]
 801156a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801156c:	7bfb      	ldrb	r3, [r7, #15]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3710      	adds	r7, #16
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
	...

08011578 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b084      	sub	sp, #16
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f7ff ff87 	bl	8011494 <sync_window>
 8011586:	4603      	mov	r3, r0
 8011588:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801158a:	7bfb      	ldrb	r3, [r7, #15]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d159      	bne.n	8011644 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	2b03      	cmp	r3, #3
 8011596:	d149      	bne.n	801162c <sync_fs+0xb4>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	791b      	ldrb	r3, [r3, #4]
 801159c:	2b01      	cmp	r3, #1
 801159e:	d145      	bne.n	801162c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	899b      	ldrh	r3, [r3, #12]
 80115aa:	461a      	mov	r2, r3
 80115ac:	2100      	movs	r1, #0
 80115ae:	f7ff fda8 	bl	8011102 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	3338      	adds	r3, #56	; 0x38
 80115b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80115ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80115be:	4618      	mov	r0, r3
 80115c0:	f7ff fd37 	bl	8011032 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	3338      	adds	r3, #56	; 0x38
 80115c8:	4921      	ldr	r1, [pc, #132]	; (8011650 <sync_fs+0xd8>)
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff fd4c 	bl	8011068 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	3338      	adds	r3, #56	; 0x38
 80115d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80115d8:	491e      	ldr	r1, [pc, #120]	; (8011654 <sync_fs+0xdc>)
 80115da:	4618      	mov	r0, r3
 80115dc:	f7ff fd44 	bl	8011068 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	3338      	adds	r3, #56	; 0x38
 80115e4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	695b      	ldr	r3, [r3, #20]
 80115ec:	4619      	mov	r1, r3
 80115ee:	4610      	mov	r0, r2
 80115f0:	f7ff fd3a 	bl	8011068 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	3338      	adds	r3, #56	; 0x38
 80115f8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	691b      	ldr	r3, [r3, #16]
 8011600:	4619      	mov	r1, r3
 8011602:	4610      	mov	r0, r2
 8011604:	f7ff fd30 	bl	8011068 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801160c:	1c5a      	adds	r2, r3, #1
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	7858      	ldrb	r0, [r3, #1]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011620:	2301      	movs	r3, #1
 8011622:	f7ff fc8d 	bl	8010f40 <disk_write>
			fs->fsi_flag = 0;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2200      	movs	r2, #0
 801162a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	785b      	ldrb	r3, [r3, #1]
 8011630:	2200      	movs	r2, #0
 8011632:	2100      	movs	r1, #0
 8011634:	4618      	mov	r0, r3
 8011636:	f7ff fca3 	bl	8010f80 <disk_ioctl>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d001      	beq.n	8011644 <sync_fs+0xcc>
 8011640:	2301      	movs	r3, #1
 8011642:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011644:	7bfb      	ldrb	r3, [r7, #15]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	41615252 	.word	0x41615252
 8011654:	61417272 	.word	0x61417272

08011658 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	3b02      	subs	r3, #2
 8011666:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	69db      	ldr	r3, [r3, #28]
 801166c:	3b02      	subs	r3, #2
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	429a      	cmp	r2, r3
 8011672:	d301      	bcc.n	8011678 <clust2sect+0x20>
 8011674:	2300      	movs	r3, #0
 8011676:	e008      	b.n	801168a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	895b      	ldrh	r3, [r3, #10]
 801167c:	461a      	mov	r2, r3
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	fb03 f202 	mul.w	r2, r3, r2
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011688:	4413      	add	r3, r2
}
 801168a:	4618      	mov	r0, r3
 801168c:	370c      	adds	r7, #12
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr

08011696 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011696:	b580      	push	{r7, lr}
 8011698:	b086      	sub	sp, #24
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
 801169e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d904      	bls.n	80116b6 <get_fat+0x20>
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	69db      	ldr	r3, [r3, #28]
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d302      	bcc.n	80116bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80116b6:	2301      	movs	r3, #1
 80116b8:	617b      	str	r3, [r7, #20]
 80116ba:	e0b7      	b.n	801182c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80116bc:	f04f 33ff 	mov.w	r3, #4294967295
 80116c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	d05a      	beq.n	8011780 <get_fat+0xea>
 80116ca:	2b03      	cmp	r3, #3
 80116cc:	d07d      	beq.n	80117ca <get_fat+0x134>
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	f040 80a2 	bne.w	8011818 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	60fb      	str	r3, [r7, #12]
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	085b      	lsrs	r3, r3, #1
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	4413      	add	r3, r2
 80116e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	899b      	ldrh	r3, [r3, #12]
 80116ea:	4619      	mov	r1, r3
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80116f2:	4413      	add	r3, r2
 80116f4:	4619      	mov	r1, r3
 80116f6:	6938      	ldr	r0, [r7, #16]
 80116f8:	f7ff ff10 	bl	801151c <move_window>
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f040 808d 	bne.w	801181e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	1c5a      	adds	r2, r3, #1
 8011708:	60fa      	str	r2, [r7, #12]
 801170a:	693a      	ldr	r2, [r7, #16]
 801170c:	8992      	ldrh	r2, [r2, #12]
 801170e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011712:	fb02 f201 	mul.w	r2, r2, r1
 8011716:	1a9b      	subs	r3, r3, r2
 8011718:	693a      	ldr	r2, [r7, #16]
 801171a:	4413      	add	r3, r2
 801171c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011720:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	899b      	ldrh	r3, [r3, #12]
 801172a:	4619      	mov	r1, r3
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011732:	4413      	add	r3, r2
 8011734:	4619      	mov	r1, r3
 8011736:	6938      	ldr	r0, [r7, #16]
 8011738:	f7ff fef0 	bl	801151c <move_window>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d16f      	bne.n	8011822 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	899b      	ldrh	r3, [r3, #12]
 8011746:	461a      	mov	r2, r3
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	fbb3 f1f2 	udiv	r1, r3, r2
 801174e:	fb02 f201 	mul.w	r2, r2, r1
 8011752:	1a9b      	subs	r3, r3, r2
 8011754:	693a      	ldr	r2, [r7, #16]
 8011756:	4413      	add	r3, r2
 8011758:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801175c:	021b      	lsls	r3, r3, #8
 801175e:	461a      	mov	r2, r3
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	4313      	orrs	r3, r2
 8011764:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	f003 0301 	and.w	r3, r3, #1
 801176c:	2b00      	cmp	r3, #0
 801176e:	d002      	beq.n	8011776 <get_fat+0xe0>
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	091b      	lsrs	r3, r3, #4
 8011774:	e002      	b.n	801177c <get_fat+0xe6>
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801177c:	617b      	str	r3, [r7, #20]
			break;
 801177e:	e055      	b.n	801182c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	899b      	ldrh	r3, [r3, #12]
 8011788:	085b      	lsrs	r3, r3, #1
 801178a:	b29b      	uxth	r3, r3
 801178c:	4619      	mov	r1, r3
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	fbb3 f3f1 	udiv	r3, r3, r1
 8011794:	4413      	add	r3, r2
 8011796:	4619      	mov	r1, r3
 8011798:	6938      	ldr	r0, [r7, #16]
 801179a:	f7ff febf 	bl	801151c <move_window>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d140      	bne.n	8011826 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	005b      	lsls	r3, r3, #1
 80117ae:	693a      	ldr	r2, [r7, #16]
 80117b0:	8992      	ldrh	r2, [r2, #12]
 80117b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80117b6:	fb02 f200 	mul.w	r2, r2, r0
 80117ba:	1a9b      	subs	r3, r3, r2
 80117bc:	440b      	add	r3, r1
 80117be:	4618      	mov	r0, r3
 80117c0:	f7ff fbfc 	bl	8010fbc <ld_word>
 80117c4:	4603      	mov	r3, r0
 80117c6:	617b      	str	r3, [r7, #20]
			break;
 80117c8:	e030      	b.n	801182c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	899b      	ldrh	r3, [r3, #12]
 80117d2:	089b      	lsrs	r3, r3, #2
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	4619      	mov	r1, r3
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	fbb3 f3f1 	udiv	r3, r3, r1
 80117de:	4413      	add	r3, r2
 80117e0:	4619      	mov	r1, r3
 80117e2:	6938      	ldr	r0, [r7, #16]
 80117e4:	f7ff fe9a 	bl	801151c <move_window>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d11d      	bne.n	801182a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	009b      	lsls	r3, r3, #2
 80117f8:	693a      	ldr	r2, [r7, #16]
 80117fa:	8992      	ldrh	r2, [r2, #12]
 80117fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8011800:	fb02 f200 	mul.w	r2, r2, r0
 8011804:	1a9b      	subs	r3, r3, r2
 8011806:	440b      	add	r3, r1
 8011808:	4618      	mov	r0, r3
 801180a:	f7ff fbef 	bl	8010fec <ld_dword>
 801180e:	4603      	mov	r3, r0
 8011810:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011814:	617b      	str	r3, [r7, #20]
			break;
 8011816:	e009      	b.n	801182c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011818:	2301      	movs	r3, #1
 801181a:	617b      	str	r3, [r7, #20]
 801181c:	e006      	b.n	801182c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801181e:	bf00      	nop
 8011820:	e004      	b.n	801182c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011822:	bf00      	nop
 8011824:	e002      	b.n	801182c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011826:	bf00      	nop
 8011828:	e000      	b.n	801182c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801182a:	bf00      	nop
		}
	}

	return val;
 801182c:	697b      	ldr	r3, [r7, #20]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3718      	adds	r7, #24
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011836:	b590      	push	{r4, r7, lr}
 8011838:	b089      	sub	sp, #36	; 0x24
 801183a:	af00      	add	r7, sp, #0
 801183c:	60f8      	str	r0, [r7, #12]
 801183e:	60b9      	str	r1, [r7, #8]
 8011840:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011842:	2302      	movs	r3, #2
 8011844:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	2b01      	cmp	r3, #1
 801184a:	f240 8106 	bls.w	8011a5a <put_fat+0x224>
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	69db      	ldr	r3, [r3, #28]
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	429a      	cmp	r2, r3
 8011856:	f080 8100 	bcs.w	8011a5a <put_fat+0x224>
		switch (fs->fs_type) {
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	2b02      	cmp	r3, #2
 8011860:	f000 8088 	beq.w	8011974 <put_fat+0x13e>
 8011864:	2b03      	cmp	r3, #3
 8011866:	f000 80b0 	beq.w	80119ca <put_fat+0x194>
 801186a:	2b01      	cmp	r3, #1
 801186c:	f040 80f5 	bne.w	8011a5a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	61bb      	str	r3, [r7, #24]
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	085b      	lsrs	r3, r3, #1
 8011878:	69ba      	ldr	r2, [r7, #24]
 801187a:	4413      	add	r3, r2
 801187c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	899b      	ldrh	r3, [r3, #12]
 8011886:	4619      	mov	r1, r3
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	fbb3 f3f1 	udiv	r3, r3, r1
 801188e:	4413      	add	r3, r2
 8011890:	4619      	mov	r1, r3
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	f7ff fe42 	bl	801151c <move_window>
 8011898:	4603      	mov	r3, r0
 801189a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801189c:	7ffb      	ldrb	r3, [r7, #31]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	f040 80d4 	bne.w	8011a4c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	61ba      	str	r2, [r7, #24]
 80118b0:	68fa      	ldr	r2, [r7, #12]
 80118b2:	8992      	ldrh	r2, [r2, #12]
 80118b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80118b8:	fb02 f200 	mul.w	r2, r2, r0
 80118bc:	1a9b      	subs	r3, r3, r2
 80118be:	440b      	add	r3, r1
 80118c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	f003 0301 	and.w	r3, r3, #1
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00d      	beq.n	80118e8 <put_fat+0xb2>
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	b25b      	sxtb	r3, r3
 80118d2:	f003 030f 	and.w	r3, r3, #15
 80118d6:	b25a      	sxtb	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	b2db      	uxtb	r3, r3
 80118dc:	011b      	lsls	r3, r3, #4
 80118de:	b25b      	sxtb	r3, r3
 80118e0:	4313      	orrs	r3, r2
 80118e2:	b25b      	sxtb	r3, r3
 80118e4:	b2db      	uxtb	r3, r3
 80118e6:	e001      	b.n	80118ec <put_fat+0xb6>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	b2db      	uxtb	r3, r3
 80118ec:	697a      	ldr	r2, [r7, #20]
 80118ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2201      	movs	r2, #1
 80118f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	899b      	ldrh	r3, [r3, #12]
 80118fe:	4619      	mov	r1, r3
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	fbb3 f3f1 	udiv	r3, r3, r1
 8011906:	4413      	add	r3, r2
 8011908:	4619      	mov	r1, r3
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	f7ff fe06 	bl	801151c <move_window>
 8011910:	4603      	mov	r3, r0
 8011912:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011914:	7ffb      	ldrb	r3, [r7, #31]
 8011916:	2b00      	cmp	r3, #0
 8011918:	f040 809a 	bne.w	8011a50 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	899b      	ldrh	r3, [r3, #12]
 8011926:	461a      	mov	r2, r3
 8011928:	69bb      	ldr	r3, [r7, #24]
 801192a:	fbb3 f0f2 	udiv	r0, r3, r2
 801192e:	fb02 f200 	mul.w	r2, r2, r0
 8011932:	1a9b      	subs	r3, r3, r2
 8011934:	440b      	add	r3, r1
 8011936:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	f003 0301 	and.w	r3, r3, #1
 801193e:	2b00      	cmp	r3, #0
 8011940:	d003      	beq.n	801194a <put_fat+0x114>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	091b      	lsrs	r3, r3, #4
 8011946:	b2db      	uxtb	r3, r3
 8011948:	e00e      	b.n	8011968 <put_fat+0x132>
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	b25b      	sxtb	r3, r3
 8011950:	f023 030f 	bic.w	r3, r3, #15
 8011954:	b25a      	sxtb	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	0a1b      	lsrs	r3, r3, #8
 801195a:	b25b      	sxtb	r3, r3
 801195c:	f003 030f 	and.w	r3, r3, #15
 8011960:	b25b      	sxtb	r3, r3
 8011962:	4313      	orrs	r3, r2
 8011964:	b25b      	sxtb	r3, r3
 8011966:	b2db      	uxtb	r3, r3
 8011968:	697a      	ldr	r2, [r7, #20]
 801196a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2201      	movs	r2, #1
 8011970:	70da      	strb	r2, [r3, #3]
			break;
 8011972:	e072      	b.n	8011a5a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	899b      	ldrh	r3, [r3, #12]
 801197c:	085b      	lsrs	r3, r3, #1
 801197e:	b29b      	uxth	r3, r3
 8011980:	4619      	mov	r1, r3
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	fbb3 f3f1 	udiv	r3, r3, r1
 8011988:	4413      	add	r3, r2
 801198a:	4619      	mov	r1, r3
 801198c:	68f8      	ldr	r0, [r7, #12]
 801198e:	f7ff fdc5 	bl	801151c <move_window>
 8011992:	4603      	mov	r3, r0
 8011994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011996:	7ffb      	ldrb	r3, [r7, #31]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d15b      	bne.n	8011a54 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	005b      	lsls	r3, r3, #1
 80119a6:	68fa      	ldr	r2, [r7, #12]
 80119a8:	8992      	ldrh	r2, [r2, #12]
 80119aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80119ae:	fb02 f200 	mul.w	r2, r2, r0
 80119b2:	1a9b      	subs	r3, r3, r2
 80119b4:	440b      	add	r3, r1
 80119b6:	687a      	ldr	r2, [r7, #4]
 80119b8:	b292      	uxth	r2, r2
 80119ba:	4611      	mov	r1, r2
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff fb38 	bl	8011032 <st_word>
			fs->wflag = 1;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2201      	movs	r2, #1
 80119c6:	70da      	strb	r2, [r3, #3]
			break;
 80119c8:	e047      	b.n	8011a5a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	899b      	ldrh	r3, [r3, #12]
 80119d2:	089b      	lsrs	r3, r3, #2
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	4619      	mov	r1, r3
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	fbb3 f3f1 	udiv	r3, r3, r1
 80119de:	4413      	add	r3, r2
 80119e0:	4619      	mov	r1, r3
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	f7ff fd9a 	bl	801151c <move_window>
 80119e8:	4603      	mov	r3, r0
 80119ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80119ec:	7ffb      	ldrb	r3, [r7, #31]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d132      	bne.n	8011a58 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	68fa      	ldr	r2, [r7, #12]
 8011a04:	8992      	ldrh	r2, [r2, #12]
 8011a06:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a0a:	fb02 f200 	mul.w	r2, r2, r0
 8011a0e:	1a9b      	subs	r3, r3, r2
 8011a10:	440b      	add	r3, r1
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7ff faea 	bl	8010fec <ld_dword>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011a1e:	4323      	orrs	r3, r4
 8011a20:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	68fa      	ldr	r2, [r7, #12]
 8011a2e:	8992      	ldrh	r2, [r2, #12]
 8011a30:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a34:	fb02 f200 	mul.w	r2, r2, r0
 8011a38:	1a9b      	subs	r3, r3, r2
 8011a3a:	440b      	add	r3, r1
 8011a3c:	6879      	ldr	r1, [r7, #4]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7ff fb12 	bl	8011068 <st_dword>
			fs->wflag = 1;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2201      	movs	r2, #1
 8011a48:	70da      	strb	r2, [r3, #3]
			break;
 8011a4a:	e006      	b.n	8011a5a <put_fat+0x224>
			if (res != FR_OK) break;
 8011a4c:	bf00      	nop
 8011a4e:	e004      	b.n	8011a5a <put_fat+0x224>
			if (res != FR_OK) break;
 8011a50:	bf00      	nop
 8011a52:	e002      	b.n	8011a5a <put_fat+0x224>
			if (res != FR_OK) break;
 8011a54:	bf00      	nop
 8011a56:	e000      	b.n	8011a5a <put_fat+0x224>
			if (res != FR_OK) break;
 8011a58:	bf00      	nop
		}
	}
	return res;
 8011a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3724      	adds	r7, #36	; 0x24
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd90      	pop	{r4, r7, pc}

08011a64 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b088      	sub	sp, #32
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011a70:	2300      	movs	r3, #0
 8011a72:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	2b01      	cmp	r3, #1
 8011a7e:	d904      	bls.n	8011a8a <remove_chain+0x26>
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	69db      	ldr	r3, [r3, #28]
 8011a84:	68ba      	ldr	r2, [r7, #8]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d301      	bcc.n	8011a8e <remove_chain+0x2a>
 8011a8a:	2302      	movs	r3, #2
 8011a8c:	e04b      	b.n	8011b26 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00c      	beq.n	8011aae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011a94:	f04f 32ff 	mov.w	r2, #4294967295
 8011a98:	6879      	ldr	r1, [r7, #4]
 8011a9a:	69b8      	ldr	r0, [r7, #24]
 8011a9c:	f7ff fecb 	bl	8011836 <put_fat>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011aa4:	7ffb      	ldrb	r3, [r7, #31]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d001      	beq.n	8011aae <remove_chain+0x4a>
 8011aaa:	7ffb      	ldrb	r3, [r7, #31]
 8011aac:	e03b      	b.n	8011b26 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011aae:	68b9      	ldr	r1, [r7, #8]
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f7ff fdf0 	bl	8011696 <get_fat>
 8011ab6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d031      	beq.n	8011b22 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d101      	bne.n	8011ac8 <remove_chain+0x64>
 8011ac4:	2302      	movs	r3, #2
 8011ac6:	e02e      	b.n	8011b26 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ace:	d101      	bne.n	8011ad4 <remove_chain+0x70>
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	e028      	b.n	8011b26 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	68b9      	ldr	r1, [r7, #8]
 8011ad8:	69b8      	ldr	r0, [r7, #24]
 8011ada:	f7ff feac 	bl	8011836 <put_fat>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011ae2:	7ffb      	ldrb	r3, [r7, #31]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d001      	beq.n	8011aec <remove_chain+0x88>
 8011ae8:	7ffb      	ldrb	r3, [r7, #31]
 8011aea:	e01c      	b.n	8011b26 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	695a      	ldr	r2, [r3, #20]
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	69db      	ldr	r3, [r3, #28]
 8011af4:	3b02      	subs	r3, #2
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d20b      	bcs.n	8011b12 <remove_chain+0xae>
			fs->free_clst++;
 8011afa:	69bb      	ldr	r3, [r7, #24]
 8011afc:	695b      	ldr	r3, [r3, #20]
 8011afe:	1c5a      	adds	r2, r3, #1
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011b04:	69bb      	ldr	r3, [r7, #24]
 8011b06:	791b      	ldrb	r3, [r3, #4]
 8011b08:	f043 0301 	orr.w	r3, r3, #1
 8011b0c:	b2da      	uxtb	r2, r3
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	69db      	ldr	r3, [r3, #28]
 8011b1a:	68ba      	ldr	r2, [r7, #8]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d3c6      	bcc.n	8011aae <remove_chain+0x4a>
 8011b20:	e000      	b.n	8011b24 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011b22:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011b24:	2300      	movs	r3, #0
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3720      	adds	r7, #32
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}

08011b2e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011b2e:	b580      	push	{r7, lr}
 8011b30:	b088      	sub	sp, #32
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	6078      	str	r0, [r7, #4]
 8011b36:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d10d      	bne.n	8011b60 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	691b      	ldr	r3, [r3, #16]
 8011b48:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d004      	beq.n	8011b5a <create_chain+0x2c>
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	69db      	ldr	r3, [r3, #28]
 8011b54:	69ba      	ldr	r2, [r7, #24]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d31b      	bcc.n	8011b92 <create_chain+0x64>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	61bb      	str	r3, [r7, #24]
 8011b5e:	e018      	b.n	8011b92 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011b60:	6839      	ldr	r1, [r7, #0]
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f7ff fd97 	bl	8011696 <get_fat>
 8011b68:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d801      	bhi.n	8011b74 <create_chain+0x46>
 8011b70:	2301      	movs	r3, #1
 8011b72:	e070      	b.n	8011c56 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b7a:	d101      	bne.n	8011b80 <create_chain+0x52>
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	e06a      	b.n	8011c56 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	69db      	ldr	r3, [r3, #28]
 8011b84:	68fa      	ldr	r2, [r7, #12]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d201      	bcs.n	8011b8e <create_chain+0x60>
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	e063      	b.n	8011c56 <create_chain+0x128>
		scl = clst;
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011b96:	69fb      	ldr	r3, [r7, #28]
 8011b98:	3301      	adds	r3, #1
 8011b9a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	69db      	ldr	r3, [r3, #28]
 8011ba0:	69fa      	ldr	r2, [r7, #28]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d307      	bcc.n	8011bb6 <create_chain+0x88>
				ncl = 2;
 8011ba6:	2302      	movs	r3, #2
 8011ba8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011baa:	69fa      	ldr	r2, [r7, #28]
 8011bac:	69bb      	ldr	r3, [r7, #24]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d901      	bls.n	8011bb6 <create_chain+0x88>
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	e04f      	b.n	8011c56 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011bb6:	69f9      	ldr	r1, [r7, #28]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7ff fd6c 	bl	8011696 <get_fat>
 8011bbe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00e      	beq.n	8011be4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d003      	beq.n	8011bd4 <create_chain+0xa6>
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bd2:	d101      	bne.n	8011bd8 <create_chain+0xaa>
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	e03e      	b.n	8011c56 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011bd8:	69fa      	ldr	r2, [r7, #28]
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d1da      	bne.n	8011b96 <create_chain+0x68>
 8011be0:	2300      	movs	r3, #0
 8011be2:	e038      	b.n	8011c56 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011be4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011be6:	f04f 32ff 	mov.w	r2, #4294967295
 8011bea:	69f9      	ldr	r1, [r7, #28]
 8011bec:	6938      	ldr	r0, [r7, #16]
 8011bee:	f7ff fe22 	bl	8011836 <put_fat>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011bf6:	7dfb      	ldrb	r3, [r7, #23]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d109      	bne.n	8011c10 <create_chain+0xe2>
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d006      	beq.n	8011c10 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011c02:	69fa      	ldr	r2, [r7, #28]
 8011c04:	6839      	ldr	r1, [r7, #0]
 8011c06:	6938      	ldr	r0, [r7, #16]
 8011c08:	f7ff fe15 	bl	8011836 <put_fat>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011c10:	7dfb      	ldrb	r3, [r7, #23]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d116      	bne.n	8011c44 <create_chain+0x116>
		fs->last_clst = ncl;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	69fa      	ldr	r2, [r7, #28]
 8011c1a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	695a      	ldr	r2, [r3, #20]
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	69db      	ldr	r3, [r3, #28]
 8011c24:	3b02      	subs	r3, #2
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d804      	bhi.n	8011c34 <create_chain+0x106>
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	695b      	ldr	r3, [r3, #20]
 8011c2e:	1e5a      	subs	r2, r3, #1
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	791b      	ldrb	r3, [r3, #4]
 8011c38:	f043 0301 	orr.w	r3, r3, #1
 8011c3c:	b2da      	uxtb	r2, r3
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	711a      	strb	r2, [r3, #4]
 8011c42:	e007      	b.n	8011c54 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011c44:	7dfb      	ldrb	r3, [r7, #23]
 8011c46:	2b01      	cmp	r3, #1
 8011c48:	d102      	bne.n	8011c50 <create_chain+0x122>
 8011c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c4e:	e000      	b.n	8011c52 <create_chain+0x124>
 8011c50:	2301      	movs	r3, #1
 8011c52:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011c54:	69fb      	ldr	r3, [r7, #28]
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3720      	adds	r7, #32
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011c5e:	b480      	push	{r7}
 8011c60:	b087      	sub	sp, #28
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c72:	3304      	adds	r3, #4
 8011c74:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	899b      	ldrh	r3, [r3, #12]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c82:	68fa      	ldr	r2, [r7, #12]
 8011c84:	8952      	ldrh	r2, [r2, #10]
 8011c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	1d1a      	adds	r2, r3, #4
 8011c90:	613a      	str	r2, [r7, #16]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d101      	bne.n	8011ca0 <clmt_clust+0x42>
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	e010      	b.n	8011cc2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011ca0:	697a      	ldr	r2, [r7, #20]
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d307      	bcc.n	8011cb8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011ca8:	697a      	ldr	r2, [r7, #20]
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	617b      	str	r3, [r7, #20]
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011cb6:	e7e9      	b.n	8011c8c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011cb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	4413      	add	r3, r2
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	371c      	adds	r7, #28
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr

08011cce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011cce:	b580      	push	{r7, lr}
 8011cd0:	b086      	sub	sp, #24
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
 8011cd6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ce4:	d204      	bcs.n	8011cf0 <dir_sdi+0x22>
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	f003 031f 	and.w	r3, r3, #31
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d001      	beq.n	8011cf4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011cf0:	2302      	movs	r3, #2
 8011cf2:	e071      	b.n	8011dd8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	683a      	ldr	r2, [r7, #0]
 8011cf8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d106      	bne.n	8011d14 <dir_sdi+0x46>
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	2b02      	cmp	r3, #2
 8011d0c:	d902      	bls.n	8011d14 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d12:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d10c      	bne.n	8011d34 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	095b      	lsrs	r3, r3, #5
 8011d1e:	693a      	ldr	r2, [r7, #16]
 8011d20:	8912      	ldrh	r2, [r2, #8]
 8011d22:	4293      	cmp	r3, r2
 8011d24:	d301      	bcc.n	8011d2a <dir_sdi+0x5c>
 8011d26:	2302      	movs	r3, #2
 8011d28:	e056      	b.n	8011dd8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	61da      	str	r2, [r3, #28]
 8011d32:	e02d      	b.n	8011d90 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	895b      	ldrh	r3, [r3, #10]
 8011d38:	461a      	mov	r2, r3
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	899b      	ldrh	r3, [r3, #12]
 8011d3e:	fb03 f302 	mul.w	r3, r3, r2
 8011d42:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d44:	e019      	b.n	8011d7a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6979      	ldr	r1, [r7, #20]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7ff fca3 	bl	8011696 <get_fat>
 8011d50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d58:	d101      	bne.n	8011d5e <dir_sdi+0x90>
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e03c      	b.n	8011dd8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d904      	bls.n	8011d6e <dir_sdi+0xa0>
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	69db      	ldr	r3, [r3, #28]
 8011d68:	697a      	ldr	r2, [r7, #20]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d301      	bcc.n	8011d72 <dir_sdi+0xa4>
 8011d6e:	2302      	movs	r3, #2
 8011d70:	e032      	b.n	8011dd8 <dir_sdi+0x10a>
			ofs -= csz;
 8011d72:	683a      	ldr	r2, [r7, #0]
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	1ad3      	subs	r3, r2, r3
 8011d78:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d2e1      	bcs.n	8011d46 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011d82:	6979      	ldr	r1, [r7, #20]
 8011d84:	6938      	ldr	r0, [r7, #16]
 8011d86:	f7ff fc67 	bl	8011658 <clust2sect>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	697a      	ldr	r2, [r7, #20]
 8011d94:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	69db      	ldr	r3, [r3, #28]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d101      	bne.n	8011da2 <dir_sdi+0xd4>
 8011d9e:	2302      	movs	r3, #2
 8011da0:	e01a      	b.n	8011dd8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	69da      	ldr	r2, [r3, #28]
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	899b      	ldrh	r3, [r3, #12]
 8011daa:	4619      	mov	r1, r3
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8011db2:	441a      	add	r2, r3
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	899b      	ldrh	r3, [r3, #12]
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dca:	fb02 f200 	mul.w	r2, r2, r0
 8011dce:	1a9b      	subs	r3, r3, r2
 8011dd0:	18ca      	adds	r2, r1, r3
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3718      	adds	r7, #24
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b086      	sub	sp, #24
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	695b      	ldr	r3, [r3, #20]
 8011df4:	3320      	adds	r3, #32
 8011df6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	69db      	ldr	r3, [r3, #28]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d003      	beq.n	8011e08 <dir_next+0x28>
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011e06:	d301      	bcc.n	8011e0c <dir_next+0x2c>
 8011e08:	2304      	movs	r3, #4
 8011e0a:	e0bb      	b.n	8011f84 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	899b      	ldrh	r3, [r3, #12]
 8011e10:	461a      	mov	r2, r3
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e18:	fb02 f201 	mul.w	r2, r2, r1
 8011e1c:	1a9b      	subs	r3, r3, r2
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	f040 809d 	bne.w	8011f5e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	69db      	ldr	r3, [r3, #28]
 8011e28:	1c5a      	adds	r2, r3, #1
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	699b      	ldr	r3, [r3, #24]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d10b      	bne.n	8011e4e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	095b      	lsrs	r3, r3, #5
 8011e3a:	68fa      	ldr	r2, [r7, #12]
 8011e3c:	8912      	ldrh	r2, [r2, #8]
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	f0c0 808d 	bcc.w	8011f5e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2200      	movs	r2, #0
 8011e48:	61da      	str	r2, [r3, #28]
 8011e4a:	2304      	movs	r3, #4
 8011e4c:	e09a      	b.n	8011f84 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	899b      	ldrh	r3, [r3, #12]
 8011e52:	461a      	mov	r2, r3
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e5a:	68fa      	ldr	r2, [r7, #12]
 8011e5c:	8952      	ldrh	r2, [r2, #10]
 8011e5e:	3a01      	subs	r2, #1
 8011e60:	4013      	ands	r3, r2
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d17b      	bne.n	8011f5e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	699b      	ldr	r3, [r3, #24]
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	4610      	mov	r0, r2
 8011e70:	f7ff fc11 	bl	8011696 <get_fat>
 8011e74:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d801      	bhi.n	8011e80 <dir_next+0xa0>
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	e081      	b.n	8011f84 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e86:	d101      	bne.n	8011e8c <dir_next+0xac>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	e07b      	b.n	8011f84 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	69db      	ldr	r3, [r3, #28]
 8011e90:	697a      	ldr	r2, [r7, #20]
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d359      	bcc.n	8011f4a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d104      	bne.n	8011ea6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	61da      	str	r2, [r3, #28]
 8011ea2:	2304      	movs	r3, #4
 8011ea4:	e06e      	b.n	8011f84 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	699b      	ldr	r3, [r3, #24]
 8011eac:	4619      	mov	r1, r3
 8011eae:	4610      	mov	r0, r2
 8011eb0:	f7ff fe3d 	bl	8011b2e <create_chain>
 8011eb4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d101      	bne.n	8011ec0 <dir_next+0xe0>
 8011ebc:	2307      	movs	r3, #7
 8011ebe:	e061      	b.n	8011f84 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d101      	bne.n	8011eca <dir_next+0xea>
 8011ec6:	2302      	movs	r3, #2
 8011ec8:	e05c      	b.n	8011f84 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ed0:	d101      	bne.n	8011ed6 <dir_next+0xf6>
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	e056      	b.n	8011f84 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7ff fadc 	bl	8011494 <sync_window>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d001      	beq.n	8011ee6 <dir_next+0x106>
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e04e      	b.n	8011f84 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	899b      	ldrh	r3, [r3, #12]
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	f7ff f905 	bl	8011102 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011ef8:	2300      	movs	r3, #0
 8011efa:	613b      	str	r3, [r7, #16]
 8011efc:	6979      	ldr	r1, [r7, #20]
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	f7ff fbaa 	bl	8011658 <clust2sect>
 8011f04:	4602      	mov	r2, r0
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	635a      	str	r2, [r3, #52]	; 0x34
 8011f0a:	e012      	b.n	8011f32 <dir_next+0x152>
						fs->wflag = 1;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	2201      	movs	r2, #1
 8011f10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f7ff fabe 	bl	8011494 <sync_window>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d001      	beq.n	8011f22 <dir_next+0x142>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e030      	b.n	8011f84 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	3301      	adds	r3, #1
 8011f26:	613b      	str	r3, [r7, #16]
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f2c:	1c5a      	adds	r2, r3, #1
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	635a      	str	r2, [r3, #52]	; 0x34
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	895b      	ldrh	r3, [r3, #10]
 8011f36:	461a      	mov	r2, r3
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d3e6      	bcc.n	8011f0c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	1ad2      	subs	r2, r2, r3
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	697a      	ldr	r2, [r7, #20]
 8011f4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011f50:	6979      	ldr	r1, [r7, #20]
 8011f52:	68f8      	ldr	r0, [r7, #12]
 8011f54:	f7ff fb80 	bl	8011658 <clust2sect>
 8011f58:	4602      	mov	r2, r0
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	899b      	ldrh	r3, [r3, #12]
 8011f6e:	461a      	mov	r2, r3
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f76:	fb02 f200 	mul.w	r2, r2, r0
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	18ca      	adds	r2, r1, r3
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011f82:	2300      	movs	r3, #0
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3718      	adds	r7, #24
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011f9c:	2100      	movs	r1, #0
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f7ff fe95 	bl	8011cce <dir_sdi>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011fa8:	7dfb      	ldrb	r3, [r7, #23]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d12b      	bne.n	8012006 <dir_alloc+0x7a>
		n = 0;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	69db      	ldr	r3, [r3, #28]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f7ff faaf 	bl	801151c <move_window>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011fc2:	7dfb      	ldrb	r3, [r7, #23]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d11d      	bne.n	8012004 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a1b      	ldr	r3, [r3, #32]
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	2be5      	cmp	r3, #229	; 0xe5
 8011fd0:	d004      	beq.n	8011fdc <dir_alloc+0x50>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6a1b      	ldr	r3, [r3, #32]
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d107      	bne.n	8011fec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	3301      	adds	r3, #1
 8011fe0:	613b      	str	r3, [r7, #16]
 8011fe2:	693a      	ldr	r2, [r7, #16]
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d102      	bne.n	8011ff0 <dir_alloc+0x64>
 8011fea:	e00c      	b.n	8012006 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011fec:	2300      	movs	r3, #0
 8011fee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011ff0:	2101      	movs	r1, #1
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f7ff fef4 	bl	8011de0 <dir_next>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011ffc:	7dfb      	ldrb	r3, [r7, #23]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d0d7      	beq.n	8011fb2 <dir_alloc+0x26>
 8012002:	e000      	b.n	8012006 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012004:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012006:	7dfb      	ldrb	r3, [r7, #23]
 8012008:	2b04      	cmp	r3, #4
 801200a:	d101      	bne.n	8012010 <dir_alloc+0x84>
 801200c:	2307      	movs	r3, #7
 801200e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012010:	7dfb      	ldrb	r3, [r7, #23]
}
 8012012:	4618      	mov	r0, r3
 8012014:	3718      	adds	r7, #24
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}

0801201a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801201a:	b580      	push	{r7, lr}
 801201c:	b084      	sub	sp, #16
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
 8012022:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	331a      	adds	r3, #26
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe ffc7 	bl	8010fbc <ld_word>
 801202e:	4603      	mov	r3, r0
 8012030:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b03      	cmp	r3, #3
 8012038:	d109      	bne.n	801204e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	3314      	adds	r3, #20
 801203e:	4618      	mov	r0, r3
 8012040:	f7fe ffbc 	bl	8010fbc <ld_word>
 8012044:	4603      	mov	r3, r0
 8012046:	041b      	lsls	r3, r3, #16
 8012048:	68fa      	ldr	r2, [r7, #12]
 801204a:	4313      	orrs	r3, r2
 801204c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801204e:	68fb      	ldr	r3, [r7, #12]
}
 8012050:	4618      	mov	r0, r3
 8012052:	3710      	adds	r7, #16
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	331a      	adds	r3, #26
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	b292      	uxth	r2, r2
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f7fe ffdf 	bl	8011032 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	2b03      	cmp	r3, #3
 801207a:	d109      	bne.n	8012090 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	f103 0214 	add.w	r2, r3, #20
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	0c1b      	lsrs	r3, r3, #16
 8012086:	b29b      	uxth	r3, r3
 8012088:	4619      	mov	r1, r3
 801208a:	4610      	mov	r0, r2
 801208c:	f7fe ffd1 	bl	8011032 <st_word>
	}
}
 8012090:	bf00      	nop
 8012092:	3710      	adds	r7, #16
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b086      	sub	sp, #24
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80120a2:	2304      	movs	r3, #4
 80120a4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80120ac:	e03c      	b.n	8012128 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	69db      	ldr	r3, [r3, #28]
 80120b2:	4619      	mov	r1, r3
 80120b4:	6938      	ldr	r0, [r7, #16]
 80120b6:	f7ff fa31 	bl	801151c <move_window>
 80120ba:	4603      	mov	r3, r0
 80120bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80120be:	7dfb      	ldrb	r3, [r7, #23]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d136      	bne.n	8012132 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6a1b      	ldr	r3, [r3, #32]
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80120cc:	7bfb      	ldrb	r3, [r7, #15]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d102      	bne.n	80120d8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80120d2:	2304      	movs	r3, #4
 80120d4:	75fb      	strb	r3, [r7, #23]
 80120d6:	e031      	b.n	801213c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6a1b      	ldr	r3, [r3, #32]
 80120dc:	330b      	adds	r3, #11
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120e4:	73bb      	strb	r3, [r7, #14]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	7bba      	ldrb	r2, [r7, #14]
 80120ea:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80120ec:	7bfb      	ldrb	r3, [r7, #15]
 80120ee:	2be5      	cmp	r3, #229	; 0xe5
 80120f0:	d011      	beq.n	8012116 <dir_read+0x7e>
 80120f2:	7bfb      	ldrb	r3, [r7, #15]
 80120f4:	2b2e      	cmp	r3, #46	; 0x2e
 80120f6:	d00e      	beq.n	8012116 <dir_read+0x7e>
 80120f8:	7bbb      	ldrb	r3, [r7, #14]
 80120fa:	2b0f      	cmp	r3, #15
 80120fc:	d00b      	beq.n	8012116 <dir_read+0x7e>
 80120fe:	7bbb      	ldrb	r3, [r7, #14]
 8012100:	f023 0320 	bic.w	r3, r3, #32
 8012104:	2b08      	cmp	r3, #8
 8012106:	bf0c      	ite	eq
 8012108:	2301      	moveq	r3, #1
 801210a:	2300      	movne	r3, #0
 801210c:	b2db      	uxtb	r3, r3
 801210e:	461a      	mov	r2, r3
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	4293      	cmp	r3, r2
 8012114:	d00f      	beq.n	8012136 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012116:	2100      	movs	r1, #0
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7ff fe61 	bl	8011de0 <dir_next>
 801211e:	4603      	mov	r3, r0
 8012120:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d108      	bne.n	801213a <dir_read+0xa2>
	while (dp->sect) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	69db      	ldr	r3, [r3, #28]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1be      	bne.n	80120ae <dir_read+0x16>
 8012130:	e004      	b.n	801213c <dir_read+0xa4>
		if (res != FR_OK) break;
 8012132:	bf00      	nop
 8012134:	e002      	b.n	801213c <dir_read+0xa4>
				break;
 8012136:	bf00      	nop
 8012138:	e000      	b.n	801213c <dir_read+0xa4>
		if (res != FR_OK) break;
 801213a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801213c:	7dfb      	ldrb	r3, [r7, #23]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d002      	beq.n	8012148 <dir_read+0xb0>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2200      	movs	r2, #0
 8012146:	61da      	str	r2, [r3, #28]
	return res;
 8012148:	7dfb      	ldrb	r3, [r7, #23]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3718      	adds	r7, #24
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b086      	sub	sp, #24
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012160:	2100      	movs	r1, #0
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7ff fdb3 	bl	8011cce <dir_sdi>
 8012168:	4603      	mov	r3, r0
 801216a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801216c:	7dfb      	ldrb	r3, [r7, #23]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d001      	beq.n	8012176 <dir_find+0x24>
 8012172:	7dfb      	ldrb	r3, [r7, #23]
 8012174:	e03e      	b.n	80121f4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	69db      	ldr	r3, [r3, #28]
 801217a:	4619      	mov	r1, r3
 801217c:	6938      	ldr	r0, [r7, #16]
 801217e:	f7ff f9cd 	bl	801151c <move_window>
 8012182:	4603      	mov	r3, r0
 8012184:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012186:	7dfb      	ldrb	r3, [r7, #23]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d12f      	bne.n	80121ec <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6a1b      	ldr	r3, [r3, #32]
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012194:	7bfb      	ldrb	r3, [r7, #15]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d102      	bne.n	80121a0 <dir_find+0x4e>
 801219a:	2304      	movs	r3, #4
 801219c:	75fb      	strb	r3, [r7, #23]
 801219e:	e028      	b.n	80121f2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6a1b      	ldr	r3, [r3, #32]
 80121a4:	330b      	adds	r3, #11
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121ac:	b2da      	uxtb	r2, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6a1b      	ldr	r3, [r3, #32]
 80121b6:	330b      	adds	r3, #11
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	f003 0308 	and.w	r3, r3, #8
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d10a      	bne.n	80121d8 <dir_find+0x86>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6a18      	ldr	r0, [r3, #32]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	3324      	adds	r3, #36	; 0x24
 80121ca:	220b      	movs	r2, #11
 80121cc:	4619      	mov	r1, r3
 80121ce:	f7fe ffb2 	bl	8011136 <mem_cmp>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00b      	beq.n	80121f0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80121d8:	2100      	movs	r1, #0
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7ff fe00 	bl	8011de0 <dir_next>
 80121e0:	4603      	mov	r3, r0
 80121e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80121e4:	7dfb      	ldrb	r3, [r7, #23]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d0c5      	beq.n	8012176 <dir_find+0x24>
 80121ea:	e002      	b.n	80121f2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80121ec:	bf00      	nop
 80121ee:	e000      	b.n	80121f2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80121f0:	bf00      	nop

	return res;
 80121f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3718      	adds	r7, #24
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801220a:	2101      	movs	r1, #1
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff febd 	bl	8011f8c <dir_alloc>
 8012212:	4603      	mov	r3, r0
 8012214:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012216:	7bfb      	ldrb	r3, [r7, #15]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d11c      	bne.n	8012256 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	69db      	ldr	r3, [r3, #28]
 8012220:	4619      	mov	r1, r3
 8012222:	68b8      	ldr	r0, [r7, #8]
 8012224:	f7ff f97a 	bl	801151c <move_window>
 8012228:	4603      	mov	r3, r0
 801222a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801222c:	7bfb      	ldrb	r3, [r7, #15]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d111      	bne.n	8012256 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6a1b      	ldr	r3, [r3, #32]
 8012236:	2220      	movs	r2, #32
 8012238:	2100      	movs	r1, #0
 801223a:	4618      	mov	r0, r3
 801223c:	f7fe ff61 	bl	8011102 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6a18      	ldr	r0, [r3, #32]
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	3324      	adds	r3, #36	; 0x24
 8012248:	220b      	movs	r2, #11
 801224a:	4619      	mov	r1, r3
 801224c:	f7fe ff38 	bl	80110c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	2201      	movs	r2, #1
 8012254:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012256:	7bfb      	ldrb	r3, [r7, #15]
}
 8012258:	4618      	mov	r0, r3
 801225a:	3710      	adds	r7, #16
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	69db      	ldr	r3, [r3, #28]
 8012272:	4619      	mov	r1, r3
 8012274:	68f8      	ldr	r0, [r7, #12]
 8012276:	f7ff f951 	bl	801151c <move_window>
 801227a:	4603      	mov	r3, r0
 801227c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801227e:	7afb      	ldrb	r3, [r7, #11]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d106      	bne.n	8012292 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a1b      	ldr	r3, [r3, #32]
 8012288:	22e5      	movs	r2, #229	; 0xe5
 801228a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2201      	movs	r2, #1
 8012290:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012292:	7afb      	ldrb	r3, [r7, #11]
}
 8012294:	4618      	mov	r0, r3
 8012296:	3710      	adds	r7, #16
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b088      	sub	sp, #32
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	60fb      	str	r3, [r7, #12]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	3324      	adds	r3, #36	; 0x24
 80122b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80122b2:	220b      	movs	r2, #11
 80122b4:	2120      	movs	r1, #32
 80122b6:	68b8      	ldr	r0, [r7, #8]
 80122b8:	f7fe ff23 	bl	8011102 <mem_set>
	si = i = 0; ni = 8;
 80122bc:	2300      	movs	r3, #0
 80122be:	613b      	str	r3, [r7, #16]
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	617b      	str	r3, [r7, #20]
 80122c4:	2308      	movs	r3, #8
 80122c6:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80122c8:	68fa      	ldr	r2, [r7, #12]
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	4413      	add	r3, r2
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	2b2e      	cmp	r3, #46	; 0x2e
 80122d2:	d12f      	bne.n	8012334 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	1c5a      	adds	r2, r3, #1
 80122d8:	617a      	str	r2, [r7, #20]
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	4413      	add	r3, r2
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80122e2:	7ffb      	ldrb	r3, [r7, #31]
 80122e4:	2b2e      	cmp	r3, #46	; 0x2e
 80122e6:	d10a      	bne.n	80122fe <create_name+0x62>
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	2b02      	cmp	r3, #2
 80122ec:	d807      	bhi.n	80122fe <create_name+0x62>
			sfn[i++] = c;
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	1c5a      	adds	r2, r3, #1
 80122f2:	613a      	str	r2, [r7, #16]
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	4413      	add	r3, r2
 80122f8:	7ffa      	ldrb	r2, [r7, #31]
 80122fa:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80122fc:	e7ea      	b.n	80122d4 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80122fe:	7ffb      	ldrb	r3, [r7, #31]
 8012300:	2b2f      	cmp	r3, #47	; 0x2f
 8012302:	d007      	beq.n	8012314 <create_name+0x78>
 8012304:	7ffb      	ldrb	r3, [r7, #31]
 8012306:	2b5c      	cmp	r3, #92	; 0x5c
 8012308:	d004      	beq.n	8012314 <create_name+0x78>
 801230a:	7ffb      	ldrb	r3, [r7, #31]
 801230c:	2b20      	cmp	r3, #32
 801230e:	d901      	bls.n	8012314 <create_name+0x78>
 8012310:	2306      	movs	r3, #6
 8012312:	e084      	b.n	801241e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012314:	68fa      	ldr	r2, [r7, #12]
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	441a      	add	r2, r3
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801231e:	7ffb      	ldrb	r3, [r7, #31]
 8012320:	2b20      	cmp	r3, #32
 8012322:	d801      	bhi.n	8012328 <create_name+0x8c>
 8012324:	2224      	movs	r2, #36	; 0x24
 8012326:	e000      	b.n	801232a <create_name+0x8e>
 8012328:	2220      	movs	r2, #32
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	330b      	adds	r3, #11
 801232e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	e074      	b.n	801241e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	1c5a      	adds	r2, r3, #1
 8012338:	617a      	str	r2, [r7, #20]
 801233a:	68fa      	ldr	r2, [r7, #12]
 801233c:	4413      	add	r3, r2
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012342:	7ffb      	ldrb	r3, [r7, #31]
 8012344:	2b20      	cmp	r3, #32
 8012346:	d94e      	bls.n	80123e6 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012348:	7ffb      	ldrb	r3, [r7, #31]
 801234a:	2b2f      	cmp	r3, #47	; 0x2f
 801234c:	d006      	beq.n	801235c <create_name+0xc0>
 801234e:	7ffb      	ldrb	r3, [r7, #31]
 8012350:	2b5c      	cmp	r3, #92	; 0x5c
 8012352:	d110      	bne.n	8012376 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012354:	e002      	b.n	801235c <create_name+0xc0>
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	3301      	adds	r3, #1
 801235a:	617b      	str	r3, [r7, #20]
 801235c:	68fa      	ldr	r2, [r7, #12]
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	4413      	add	r3, r2
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	2b2f      	cmp	r3, #47	; 0x2f
 8012366:	d0f6      	beq.n	8012356 <create_name+0xba>
 8012368:	68fa      	ldr	r2, [r7, #12]
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	4413      	add	r3, r2
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	2b5c      	cmp	r3, #92	; 0x5c
 8012372:	d0f0      	beq.n	8012356 <create_name+0xba>
			break;
 8012374:	e038      	b.n	80123e8 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012376:	7ffb      	ldrb	r3, [r7, #31]
 8012378:	2b2e      	cmp	r3, #46	; 0x2e
 801237a:	d003      	beq.n	8012384 <create_name+0xe8>
 801237c:	693a      	ldr	r2, [r7, #16]
 801237e:	69bb      	ldr	r3, [r7, #24]
 8012380:	429a      	cmp	r2, r3
 8012382:	d30c      	bcc.n	801239e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012384:	69bb      	ldr	r3, [r7, #24]
 8012386:	2b0b      	cmp	r3, #11
 8012388:	d002      	beq.n	8012390 <create_name+0xf4>
 801238a:	7ffb      	ldrb	r3, [r7, #31]
 801238c:	2b2e      	cmp	r3, #46	; 0x2e
 801238e:	d001      	beq.n	8012394 <create_name+0xf8>
 8012390:	2306      	movs	r3, #6
 8012392:	e044      	b.n	801241e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012394:	2308      	movs	r3, #8
 8012396:	613b      	str	r3, [r7, #16]
 8012398:	230b      	movs	r3, #11
 801239a:	61bb      	str	r3, [r7, #24]
			continue;
 801239c:	e022      	b.n	80123e4 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801239e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	da04      	bge.n	80123b0 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80123a6:	7ffb      	ldrb	r3, [r7, #31]
 80123a8:	3b80      	subs	r3, #128	; 0x80
 80123aa:	4a1f      	ldr	r2, [pc, #124]	; (8012428 <create_name+0x18c>)
 80123ac:	5cd3      	ldrb	r3, [r2, r3]
 80123ae:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80123b0:	7ffb      	ldrb	r3, [r7, #31]
 80123b2:	4619      	mov	r1, r3
 80123b4:	481d      	ldr	r0, [pc, #116]	; (801242c <create_name+0x190>)
 80123b6:	f7fe fee5 	bl	8011184 <chk_chr>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d001      	beq.n	80123c4 <create_name+0x128>
 80123c0:	2306      	movs	r3, #6
 80123c2:	e02c      	b.n	801241e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80123c4:	7ffb      	ldrb	r3, [r7, #31]
 80123c6:	2b60      	cmp	r3, #96	; 0x60
 80123c8:	d905      	bls.n	80123d6 <create_name+0x13a>
 80123ca:	7ffb      	ldrb	r3, [r7, #31]
 80123cc:	2b7a      	cmp	r3, #122	; 0x7a
 80123ce:	d802      	bhi.n	80123d6 <create_name+0x13a>
 80123d0:	7ffb      	ldrb	r3, [r7, #31]
 80123d2:	3b20      	subs	r3, #32
 80123d4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80123d6:	693b      	ldr	r3, [r7, #16]
 80123d8:	1c5a      	adds	r2, r3, #1
 80123da:	613a      	str	r2, [r7, #16]
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	4413      	add	r3, r2
 80123e0:	7ffa      	ldrb	r2, [r7, #31]
 80123e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80123e4:	e7a6      	b.n	8012334 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80123e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	441a      	add	r2, r3
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d101      	bne.n	80123fc <create_name+0x160>
 80123f8:	2306      	movs	r3, #6
 80123fa:	e010      	b.n	801241e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	2be5      	cmp	r3, #229	; 0xe5
 8012402:	d102      	bne.n	801240a <create_name+0x16e>
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	2205      	movs	r2, #5
 8012408:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801240a:	7ffb      	ldrb	r3, [r7, #31]
 801240c:	2b20      	cmp	r3, #32
 801240e:	d801      	bhi.n	8012414 <create_name+0x178>
 8012410:	2204      	movs	r2, #4
 8012412:	e000      	b.n	8012416 <create_name+0x17a>
 8012414:	2200      	movs	r2, #0
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	330b      	adds	r3, #11
 801241a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801241c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801241e:	4618      	mov	r0, r3
 8012420:	3720      	adds	r7, #32
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	0801a064 	.word	0x0801a064
 801242c:	0801a014 	.word	0x0801a014

08012430 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b086      	sub	sp, #24
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	2b2f      	cmp	r3, #47	; 0x2f
 801244a:	d00b      	beq.n	8012464 <follow_path+0x34>
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	2b5c      	cmp	r3, #92	; 0x5c
 8012452:	d007      	beq.n	8012464 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	699a      	ldr	r2, [r3, #24]
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	609a      	str	r2, [r3, #8]
 801245c:	e00d      	b.n	801247a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	3301      	adds	r3, #1
 8012462:	603b      	str	r3, [r7, #0]
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	2b2f      	cmp	r3, #47	; 0x2f
 801246a:	d0f8      	beq.n	801245e <follow_path+0x2e>
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	2b5c      	cmp	r3, #92	; 0x5c
 8012472:	d0f4      	beq.n	801245e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	2200      	movs	r2, #0
 8012478:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	2b1f      	cmp	r3, #31
 8012480:	d80a      	bhi.n	8012498 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2280      	movs	r2, #128	; 0x80
 8012486:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801248a:	2100      	movs	r1, #0
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff fc1e 	bl	8011cce <dir_sdi>
 8012492:	4603      	mov	r3, r0
 8012494:	75fb      	strb	r3, [r7, #23]
 8012496:	e05b      	b.n	8012550 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012498:	463b      	mov	r3, r7
 801249a:	4619      	mov	r1, r3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7ff fefd 	bl	801229c <create_name>
 80124a2:	4603      	mov	r3, r0
 80124a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80124a6:	7dfb      	ldrb	r3, [r7, #23]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d14c      	bne.n	8012546 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7ff fe50 	bl	8012152 <dir_find>
 80124b2:	4603      	mov	r3, r0
 80124b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80124bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80124be:	7dfb      	ldrb	r3, [r7, #23]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d01b      	beq.n	80124fc <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80124c4:	7dfb      	ldrb	r3, [r7, #23]
 80124c6:	2b04      	cmp	r3, #4
 80124c8:	d13f      	bne.n	801254a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80124ca:	7afb      	ldrb	r3, [r7, #11]
 80124cc:	f003 0320 	and.w	r3, r3, #32
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00b      	beq.n	80124ec <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80124d4:	7afb      	ldrb	r3, [r7, #11]
 80124d6:	f003 0304 	and.w	r3, r3, #4
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d031      	beq.n	8012542 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2280      	movs	r2, #128	; 0x80
 80124e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80124e6:	2300      	movs	r3, #0
 80124e8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80124ea:	e02e      	b.n	801254a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80124ec:	7afb      	ldrb	r3, [r7, #11]
 80124ee:	f003 0304 	and.w	r3, r3, #4
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d129      	bne.n	801254a <follow_path+0x11a>
 80124f6:	2305      	movs	r3, #5
 80124f8:	75fb      	strb	r3, [r7, #23]
				break;
 80124fa:	e026      	b.n	801254a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124fc:	7afb      	ldrb	r3, [r7, #11]
 80124fe:	f003 0304 	and.w	r3, r3, #4
 8012502:	2b00      	cmp	r3, #0
 8012504:	d123      	bne.n	801254e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	799b      	ldrb	r3, [r3, #6]
 801250a:	f003 0310 	and.w	r3, r3, #16
 801250e:	2b00      	cmp	r3, #0
 8012510:	d102      	bne.n	8012518 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012512:	2305      	movs	r3, #5
 8012514:	75fb      	strb	r3, [r7, #23]
 8012516:	e01b      	b.n	8012550 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	695b      	ldr	r3, [r3, #20]
 8012522:	68fa      	ldr	r2, [r7, #12]
 8012524:	8992      	ldrh	r2, [r2, #12]
 8012526:	fbb3 f0f2 	udiv	r0, r3, r2
 801252a:	fb02 f200 	mul.w	r2, r2, r0
 801252e:	1a9b      	subs	r3, r3, r2
 8012530:	440b      	add	r3, r1
 8012532:	4619      	mov	r1, r3
 8012534:	68f8      	ldr	r0, [r7, #12]
 8012536:	f7ff fd70 	bl	801201a <ld_clust>
 801253a:	4602      	mov	r2, r0
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	609a      	str	r2, [r3, #8]
 8012540:	e7aa      	b.n	8012498 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012542:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012544:	e7a8      	b.n	8012498 <follow_path+0x68>
			if (res != FR_OK) break;
 8012546:	bf00      	nop
 8012548:	e002      	b.n	8012550 <follow_path+0x120>
				break;
 801254a:	bf00      	nop
 801254c:	e000      	b.n	8012550 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801254e:	bf00      	nop
			}
		}
	}

	return res;
 8012550:	7dfb      	ldrb	r3, [r7, #23]
}
 8012552:	4618      	mov	r0, r3
 8012554:	3718      	adds	r7, #24
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801255a:	b480      	push	{r7}
 801255c:	b087      	sub	sp, #28
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012562:	f04f 33ff 	mov.w	r3, #4294967295
 8012566:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d031      	beq.n	80125d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	617b      	str	r3, [r7, #20]
 8012576:	e002      	b.n	801257e <get_ldnumber+0x24>
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	3301      	adds	r3, #1
 801257c:	617b      	str	r3, [r7, #20]
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	2b20      	cmp	r3, #32
 8012584:	d903      	bls.n	801258e <get_ldnumber+0x34>
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	2b3a      	cmp	r3, #58	; 0x3a
 801258c:	d1f4      	bne.n	8012578 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	2b3a      	cmp	r3, #58	; 0x3a
 8012594:	d11c      	bne.n	80125d0 <get_ldnumber+0x76>
			tp = *path;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	1c5a      	adds	r2, r3, #1
 80125a0:	60fa      	str	r2, [r7, #12]
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	3b30      	subs	r3, #48	; 0x30
 80125a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	2b09      	cmp	r3, #9
 80125ac:	d80e      	bhi.n	80125cc <get_ldnumber+0x72>
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d10a      	bne.n	80125cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d107      	bne.n	80125cc <get_ldnumber+0x72>
					vol = (int)i;
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	3301      	adds	r3, #1
 80125c4:	617b      	str	r3, [r7, #20]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	697a      	ldr	r2, [r7, #20]
 80125ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	e002      	b.n	80125d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80125d0:	2300      	movs	r3, #0
 80125d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80125d4:	693b      	ldr	r3, [r7, #16]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	371c      	adds	r7, #28
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr
	...

080125e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2200      	movs	r2, #0
 80125f2:	70da      	strb	r2, [r3, #3]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f04f 32ff 	mov.w	r2, #4294967295
 80125fa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80125fc:	6839      	ldr	r1, [r7, #0]
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f7fe ff8c 	bl	801151c <move_window>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	d001      	beq.n	801260e <check_fs+0x2a>
 801260a:	2304      	movs	r3, #4
 801260c:	e038      	b.n	8012680 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	3338      	adds	r3, #56	; 0x38
 8012612:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012616:	4618      	mov	r0, r3
 8012618:	f7fe fcd0 	bl	8010fbc <ld_word>
 801261c:	4603      	mov	r3, r0
 801261e:	461a      	mov	r2, r3
 8012620:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012624:	429a      	cmp	r2, r3
 8012626:	d001      	beq.n	801262c <check_fs+0x48>
 8012628:	2303      	movs	r3, #3
 801262a:	e029      	b.n	8012680 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012632:	2be9      	cmp	r3, #233	; 0xe9
 8012634:	d009      	beq.n	801264a <check_fs+0x66>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801263c:	2beb      	cmp	r3, #235	; 0xeb
 801263e:	d11e      	bne.n	801267e <check_fs+0x9a>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012646:	2b90      	cmp	r3, #144	; 0x90
 8012648:	d119      	bne.n	801267e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	3338      	adds	r3, #56	; 0x38
 801264e:	3336      	adds	r3, #54	; 0x36
 8012650:	4618      	mov	r0, r3
 8012652:	f7fe fccb 	bl	8010fec <ld_dword>
 8012656:	4603      	mov	r3, r0
 8012658:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801265c:	4a0a      	ldr	r2, [pc, #40]	; (8012688 <check_fs+0xa4>)
 801265e:	4293      	cmp	r3, r2
 8012660:	d101      	bne.n	8012666 <check_fs+0x82>
 8012662:	2300      	movs	r3, #0
 8012664:	e00c      	b.n	8012680 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	3338      	adds	r3, #56	; 0x38
 801266a:	3352      	adds	r3, #82	; 0x52
 801266c:	4618      	mov	r0, r3
 801266e:	f7fe fcbd 	bl	8010fec <ld_dword>
 8012672:	4602      	mov	r2, r0
 8012674:	4b05      	ldr	r3, [pc, #20]	; (801268c <check_fs+0xa8>)
 8012676:	429a      	cmp	r2, r3
 8012678:	d101      	bne.n	801267e <check_fs+0x9a>
 801267a:	2300      	movs	r3, #0
 801267c:	e000      	b.n	8012680 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801267e:	2302      	movs	r3, #2
}
 8012680:	4618      	mov	r0, r3
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	00544146 	.word	0x00544146
 801268c:	33544146 	.word	0x33544146

08012690 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b096      	sub	sp, #88	; 0x58
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	4613      	mov	r3, r2
 801269c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	2200      	movs	r2, #0
 80126a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80126a4:	68f8      	ldr	r0, [r7, #12]
 80126a6:	f7ff ff58 	bl	801255a <get_ldnumber>
 80126aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80126ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	da01      	bge.n	80126b6 <find_volume+0x26>
 80126b2:	230b      	movs	r3, #11
 80126b4:	e268      	b.n	8012b88 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80126b6:	4ab0      	ldr	r2, [pc, #704]	; (8012978 <find_volume+0x2e8>)
 80126b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80126c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d101      	bne.n	80126ca <find_volume+0x3a>
 80126c6:	230c      	movs	r3, #12
 80126c8:	e25e      	b.n	8012b88 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80126d0:	79fb      	ldrb	r3, [r7, #7]
 80126d2:	f023 0301 	bic.w	r3, r3, #1
 80126d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80126d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d01a      	beq.n	8012716 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80126e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e2:	785b      	ldrb	r3, [r3, #1]
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7fe fbcb 	bl	8010e80 <disk_status>
 80126ea:	4603      	mov	r3, r0
 80126ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80126f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126f4:	f003 0301 	and.w	r3, r3, #1
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d10c      	bne.n	8012716 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80126fc:	79fb      	ldrb	r3, [r7, #7]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d007      	beq.n	8012712 <find_volume+0x82>
 8012702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012706:	f003 0304 	and.w	r3, r3, #4
 801270a:	2b00      	cmp	r3, #0
 801270c:	d001      	beq.n	8012712 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801270e:	230a      	movs	r3, #10
 8012710:	e23a      	b.n	8012b88 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012712:	2300      	movs	r3, #0
 8012714:	e238      	b.n	8012b88 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012718:	2200      	movs	r2, #0
 801271a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801271e:	b2da      	uxtb	r2, r3
 8012720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012722:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012726:	785b      	ldrb	r3, [r3, #1]
 8012728:	4618      	mov	r0, r3
 801272a:	f7fe fbc3 	bl	8010eb4 <disk_initialize>
 801272e:	4603      	mov	r3, r0
 8012730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012738:	f003 0301 	and.w	r3, r3, #1
 801273c:	2b00      	cmp	r3, #0
 801273e:	d001      	beq.n	8012744 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012740:	2303      	movs	r3, #3
 8012742:	e221      	b.n	8012b88 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012744:	79fb      	ldrb	r3, [r7, #7]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d007      	beq.n	801275a <find_volume+0xca>
 801274a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801274e:	f003 0304 	and.w	r3, r3, #4
 8012752:	2b00      	cmp	r3, #0
 8012754:	d001      	beq.n	801275a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012756:	230a      	movs	r3, #10
 8012758:	e216      	b.n	8012b88 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801275c:	7858      	ldrb	r0, [r3, #1]
 801275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012760:	330c      	adds	r3, #12
 8012762:	461a      	mov	r2, r3
 8012764:	2102      	movs	r1, #2
 8012766:	f7fe fc0b 	bl	8010f80 <disk_ioctl>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d001      	beq.n	8012774 <find_volume+0xe4>
 8012770:	2301      	movs	r3, #1
 8012772:	e209      	b.n	8012b88 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012776:	899b      	ldrh	r3, [r3, #12]
 8012778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801277c:	d80d      	bhi.n	801279a <find_volume+0x10a>
 801277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012780:	899b      	ldrh	r3, [r3, #12]
 8012782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012786:	d308      	bcc.n	801279a <find_volume+0x10a>
 8012788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278a:	899b      	ldrh	r3, [r3, #12]
 801278c:	461a      	mov	r2, r3
 801278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012790:	899b      	ldrh	r3, [r3, #12]
 8012792:	3b01      	subs	r3, #1
 8012794:	4013      	ands	r3, r2
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <find_volume+0x10e>
 801279a:	2301      	movs	r3, #1
 801279c:	e1f4      	b.n	8012b88 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801279e:	2300      	movs	r3, #0
 80127a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80127a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127a6:	f7ff ff1d 	bl	80125e4 <check_fs>
 80127aa:	4603      	mov	r3, r0
 80127ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80127b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127b4:	2b02      	cmp	r3, #2
 80127b6:	d14b      	bne.n	8012850 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127b8:	2300      	movs	r3, #0
 80127ba:	643b      	str	r3, [r7, #64]	; 0x40
 80127bc:	e01f      	b.n	80127fe <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80127be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80127c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127c6:	011b      	lsls	r3, r3, #4
 80127c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80127cc:	4413      	add	r3, r2
 80127ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80127d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d2:	3304      	adds	r3, #4
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d006      	beq.n	80127e8 <find_volume+0x158>
 80127da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127dc:	3308      	adds	r3, #8
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fe fc04 	bl	8010fec <ld_dword>
 80127e4:	4602      	mov	r2, r0
 80127e6:	e000      	b.n	80127ea <find_volume+0x15a>
 80127e8:	2200      	movs	r2, #0
 80127ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127ec:	009b      	lsls	r3, r3, #2
 80127ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80127f2:	440b      	add	r3, r1
 80127f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127fa:	3301      	adds	r3, #1
 80127fc:	643b      	str	r3, [r7, #64]	; 0x40
 80127fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012800:	2b03      	cmp	r3, #3
 8012802:	d9dc      	bls.n	80127be <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012804:	2300      	movs	r3, #0
 8012806:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801280a:	2b00      	cmp	r3, #0
 801280c:	d002      	beq.n	8012814 <find_volume+0x184>
 801280e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012810:	3b01      	subs	r3, #1
 8012812:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012816:	009b      	lsls	r3, r3, #2
 8012818:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801281c:	4413      	add	r3, r2
 801281e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012822:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012826:	2b00      	cmp	r3, #0
 8012828:	d005      	beq.n	8012836 <find_volume+0x1a6>
 801282a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801282c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801282e:	f7ff fed9 	bl	80125e4 <check_fs>
 8012832:	4603      	mov	r3, r0
 8012834:	e000      	b.n	8012838 <find_volume+0x1a8>
 8012836:	2303      	movs	r3, #3
 8012838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801283c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012840:	2b01      	cmp	r3, #1
 8012842:	d905      	bls.n	8012850 <find_volume+0x1c0>
 8012844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012846:	3301      	adds	r3, #1
 8012848:	643b      	str	r3, [r7, #64]	; 0x40
 801284a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801284c:	2b03      	cmp	r3, #3
 801284e:	d9e1      	bls.n	8012814 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012854:	2b04      	cmp	r3, #4
 8012856:	d101      	bne.n	801285c <find_volume+0x1cc>
 8012858:	2301      	movs	r3, #1
 801285a:	e195      	b.n	8012b88 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801285c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012860:	2b01      	cmp	r3, #1
 8012862:	d901      	bls.n	8012868 <find_volume+0x1d8>
 8012864:	230d      	movs	r3, #13
 8012866:	e18f      	b.n	8012b88 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286a:	3338      	adds	r3, #56	; 0x38
 801286c:	330b      	adds	r3, #11
 801286e:	4618      	mov	r0, r3
 8012870:	f7fe fba4 	bl	8010fbc <ld_word>
 8012874:	4603      	mov	r3, r0
 8012876:	461a      	mov	r2, r3
 8012878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287a:	899b      	ldrh	r3, [r3, #12]
 801287c:	429a      	cmp	r2, r3
 801287e:	d001      	beq.n	8012884 <find_volume+0x1f4>
 8012880:	230d      	movs	r3, #13
 8012882:	e181      	b.n	8012b88 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	3338      	adds	r3, #56	; 0x38
 8012888:	3316      	adds	r3, #22
 801288a:	4618      	mov	r0, r3
 801288c:	f7fe fb96 	bl	8010fbc <ld_word>
 8012890:	4603      	mov	r3, r0
 8012892:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012896:	2b00      	cmp	r3, #0
 8012898:	d106      	bne.n	80128a8 <find_volume+0x218>
 801289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289c:	3338      	adds	r3, #56	; 0x38
 801289e:	3324      	adds	r3, #36	; 0x24
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7fe fba3 	bl	8010fec <ld_dword>
 80128a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80128a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80128ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80128ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80128b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80128b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ba:	789b      	ldrb	r3, [r3, #2]
 80128bc:	2b01      	cmp	r3, #1
 80128be:	d005      	beq.n	80128cc <find_volume+0x23c>
 80128c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c2:	789b      	ldrb	r3, [r3, #2]
 80128c4:	2b02      	cmp	r3, #2
 80128c6:	d001      	beq.n	80128cc <find_volume+0x23c>
 80128c8:	230d      	movs	r3, #13
 80128ca:	e15d      	b.n	8012b88 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80128cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ce:	789b      	ldrb	r3, [r3, #2]
 80128d0:	461a      	mov	r2, r3
 80128d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128d4:	fb02 f303 	mul.w	r3, r2, r3
 80128d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80128da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128e0:	b29a      	uxth	r2, r3
 80128e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80128e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e8:	895b      	ldrh	r3, [r3, #10]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d008      	beq.n	8012900 <find_volume+0x270>
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	895b      	ldrh	r3, [r3, #10]
 80128f2:	461a      	mov	r2, r3
 80128f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f6:	895b      	ldrh	r3, [r3, #10]
 80128f8:	3b01      	subs	r3, #1
 80128fa:	4013      	ands	r3, r2
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d001      	beq.n	8012904 <find_volume+0x274>
 8012900:	230d      	movs	r3, #13
 8012902:	e141      	b.n	8012b88 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012906:	3338      	adds	r3, #56	; 0x38
 8012908:	3311      	adds	r3, #17
 801290a:	4618      	mov	r0, r3
 801290c:	f7fe fb56 	bl	8010fbc <ld_word>
 8012910:	4603      	mov	r3, r0
 8012912:	461a      	mov	r2, r3
 8012914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012916:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291a:	891b      	ldrh	r3, [r3, #8]
 801291c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801291e:	8992      	ldrh	r2, [r2, #12]
 8012920:	0952      	lsrs	r2, r2, #5
 8012922:	b292      	uxth	r2, r2
 8012924:	fbb3 f1f2 	udiv	r1, r3, r2
 8012928:	fb02 f201 	mul.w	r2, r2, r1
 801292c:	1a9b      	subs	r3, r3, r2
 801292e:	b29b      	uxth	r3, r3
 8012930:	2b00      	cmp	r3, #0
 8012932:	d001      	beq.n	8012938 <find_volume+0x2a8>
 8012934:	230d      	movs	r3, #13
 8012936:	e127      	b.n	8012b88 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293a:	3338      	adds	r3, #56	; 0x38
 801293c:	3313      	adds	r3, #19
 801293e:	4618      	mov	r0, r3
 8012940:	f7fe fb3c 	bl	8010fbc <ld_word>
 8012944:	4603      	mov	r3, r0
 8012946:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801294a:	2b00      	cmp	r3, #0
 801294c:	d106      	bne.n	801295c <find_volume+0x2cc>
 801294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012950:	3338      	adds	r3, #56	; 0x38
 8012952:	3320      	adds	r3, #32
 8012954:	4618      	mov	r0, r3
 8012956:	f7fe fb49 	bl	8010fec <ld_dword>
 801295a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295e:	3338      	adds	r3, #56	; 0x38
 8012960:	330e      	adds	r3, #14
 8012962:	4618      	mov	r0, r3
 8012964:	f7fe fb2a 	bl	8010fbc <ld_word>
 8012968:	4603      	mov	r3, r0
 801296a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801296c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801296e:	2b00      	cmp	r3, #0
 8012970:	d104      	bne.n	801297c <find_volume+0x2ec>
 8012972:	230d      	movs	r3, #13
 8012974:	e108      	b.n	8012b88 <find_volume+0x4f8>
 8012976:	bf00      	nop
 8012978:	20041364 	.word	0x20041364

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801297c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801297e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012980:	4413      	add	r3, r2
 8012982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012984:	8911      	ldrh	r1, [r2, #8]
 8012986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012988:	8992      	ldrh	r2, [r2, #12]
 801298a:	0952      	lsrs	r2, r2, #5
 801298c:	b292      	uxth	r2, r2
 801298e:	fbb1 f2f2 	udiv	r2, r1, r2
 8012992:	b292      	uxth	r2, r2
 8012994:	4413      	add	r3, r2
 8012996:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299c:	429a      	cmp	r2, r3
 801299e:	d201      	bcs.n	80129a4 <find_volume+0x314>
 80129a0:	230d      	movs	r3, #13
 80129a2:	e0f1      	b.n	8012b88 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80129a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a8:	1ad3      	subs	r3, r2, r3
 80129aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129ac:	8952      	ldrh	r2, [r2, #10]
 80129ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80129b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80129b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d101      	bne.n	80129be <find_volume+0x32e>
 80129ba:	230d      	movs	r3, #13
 80129bc:	e0e4      	b.n	8012b88 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80129be:	2303      	movs	r3, #3
 80129c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80129c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80129ca:	4293      	cmp	r3, r2
 80129cc:	d802      	bhi.n	80129d4 <find_volume+0x344>
 80129ce:	2302      	movs	r3, #2
 80129d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80129d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80129da:	4293      	cmp	r3, r2
 80129dc:	d802      	bhi.n	80129e4 <find_volume+0x354>
 80129de:	2301      	movs	r3, #1
 80129e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	1c9a      	adds	r2, r3, #2
 80129e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ea:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80129ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129f0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80129f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80129f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129f6:	441a      	add	r2, r3
 80129f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fa:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80129fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a00:	441a      	add	r2, r3
 8012a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a04:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012a06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a0a:	2b03      	cmp	r3, #3
 8012a0c:	d11e      	bne.n	8012a4c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a10:	3338      	adds	r3, #56	; 0x38
 8012a12:	332a      	adds	r3, #42	; 0x2a
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fe fad1 	bl	8010fbc <ld_word>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d001      	beq.n	8012a24 <find_volume+0x394>
 8012a20:	230d      	movs	r3, #13
 8012a22:	e0b1      	b.n	8012b88 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a26:	891b      	ldrh	r3, [r3, #8]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d001      	beq.n	8012a30 <find_volume+0x3a0>
 8012a2c:	230d      	movs	r3, #13
 8012a2e:	e0ab      	b.n	8012b88 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a32:	3338      	adds	r3, #56	; 0x38
 8012a34:	332c      	adds	r3, #44	; 0x2c
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fe fad8 	bl	8010fec <ld_dword>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a40:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a44:	69db      	ldr	r3, [r3, #28]
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	647b      	str	r3, [r7, #68]	; 0x44
 8012a4a:	e01f      	b.n	8012a8c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4e:	891b      	ldrh	r3, [r3, #8]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d101      	bne.n	8012a58 <find_volume+0x3c8>
 8012a54:	230d      	movs	r3, #13
 8012a56:	e097      	b.n	8012b88 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a5e:	441a      	add	r2, r3
 8012a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a62:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012a64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a68:	2b02      	cmp	r3, #2
 8012a6a:	d103      	bne.n	8012a74 <find_volume+0x3e4>
 8012a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a6e:	69db      	ldr	r3, [r3, #28]
 8012a70:	005b      	lsls	r3, r3, #1
 8012a72:	e00a      	b.n	8012a8a <find_volume+0x3fa>
 8012a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a76:	69da      	ldr	r2, [r3, #28]
 8012a78:	4613      	mov	r3, r2
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	4413      	add	r3, r2
 8012a7e:	085a      	lsrs	r2, r3, #1
 8012a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a82:	69db      	ldr	r3, [r3, #28]
 8012a84:	f003 0301 	and.w	r3, r3, #1
 8012a88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012a8a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8e:	6a1a      	ldr	r2, [r3, #32]
 8012a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a92:	899b      	ldrh	r3, [r3, #12]
 8012a94:	4619      	mov	r1, r3
 8012a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a98:	440b      	add	r3, r1
 8012a9a:	3b01      	subs	r3, #1
 8012a9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a9e:	8989      	ldrh	r1, [r1, #12]
 8012aa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d201      	bcs.n	8012aac <find_volume+0x41c>
 8012aa8:	230d      	movs	r3, #13
 8012aaa:	e06d      	b.n	8012b88 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aae:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab2:	615a      	str	r2, [r3, #20]
 8012ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab6:	695a      	ldr	r2, [r3, #20]
 8012ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abe:	2280      	movs	r2, #128	; 0x80
 8012ac0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ac6:	2b03      	cmp	r3, #3
 8012ac8:	d149      	bne.n	8012b5e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012acc:	3338      	adds	r3, #56	; 0x38
 8012ace:	3330      	adds	r3, #48	; 0x30
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7fe fa73 	bl	8010fbc <ld_word>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d140      	bne.n	8012b5e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ade:	3301      	adds	r3, #1
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ae4:	f7fe fd1a 	bl	801151c <move_window>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d137      	bne.n	8012b5e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af0:	2200      	movs	r2, #0
 8012af2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af6:	3338      	adds	r3, #56	; 0x38
 8012af8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7fe fa5d 	bl	8010fbc <ld_word>
 8012b02:	4603      	mov	r3, r0
 8012b04:	461a      	mov	r2, r3
 8012b06:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d127      	bne.n	8012b5e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b10:	3338      	adds	r3, #56	; 0x38
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7fe fa6a 	bl	8010fec <ld_dword>
 8012b18:	4602      	mov	r2, r0
 8012b1a:	4b1d      	ldr	r3, [pc, #116]	; (8012b90 <find_volume+0x500>)
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d11e      	bne.n	8012b5e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b22:	3338      	adds	r3, #56	; 0x38
 8012b24:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fe fa5f 	bl	8010fec <ld_dword>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	4b18      	ldr	r3, [pc, #96]	; (8012b94 <find_volume+0x504>)
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d113      	bne.n	8012b5e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b38:	3338      	adds	r3, #56	; 0x38
 8012b3a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fe fa54 	bl	8010fec <ld_dword>
 8012b44:	4602      	mov	r2, r0
 8012b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b48:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4c:	3338      	adds	r3, #56	; 0x38
 8012b4e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe fa4a 	bl	8010fec <ld_dword>
 8012b58:	4602      	mov	r2, r0
 8012b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b60:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012b64:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012b66:	4b0c      	ldr	r3, [pc, #48]	; (8012b98 <find_volume+0x508>)
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	b29a      	uxth	r2, r3
 8012b6e:	4b0a      	ldr	r3, [pc, #40]	; (8012b98 <find_volume+0x508>)
 8012b70:	801a      	strh	r2, [r3, #0]
 8012b72:	4b09      	ldr	r3, [pc, #36]	; (8012b98 <find_volume+0x508>)
 8012b74:	881a      	ldrh	r2, [r3, #0]
 8012b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b78:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b82:	f7fe fc63 	bl	801144c <clear_lock>
#endif
	return FR_OK;
 8012b86:	2300      	movs	r3, #0
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3758      	adds	r7, #88	; 0x58
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	41615252 	.word	0x41615252
 8012b94:	61417272 	.word	0x61417272
 8012b98:	20041368 	.word	0x20041368

08012b9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b084      	sub	sp, #16
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012ba6:	2309      	movs	r3, #9
 8012ba8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d01c      	beq.n	8012bea <validate+0x4e>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d018      	beq.n	8012bea <validate+0x4e>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d013      	beq.n	8012bea <validate+0x4e>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	889a      	ldrh	r2, [r3, #4]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	88db      	ldrh	r3, [r3, #6]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d10c      	bne.n	8012bea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	785b      	ldrb	r3, [r3, #1]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fe f952 	bl	8010e80 <disk_status>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	f003 0301 	and.w	r3, r3, #1
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d101      	bne.n	8012bea <validate+0x4e>
			res = FR_OK;
 8012be6:	2300      	movs	r3, #0
 8012be8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012bea:	7bfb      	ldrb	r3, [r7, #15]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d102      	bne.n	8012bf6 <validate+0x5a>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	e000      	b.n	8012bf8 <validate+0x5c>
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	683a      	ldr	r2, [r7, #0]
 8012bfa:	6013      	str	r3, [r2, #0]
	return res;
 8012bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3710      	adds	r7, #16
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
	...

08012c08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b088      	sub	sp, #32
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	60b9      	str	r1, [r7, #8]
 8012c12:	4613      	mov	r3, r2
 8012c14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012c1a:	f107 0310 	add.w	r3, r7, #16
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7ff fc9b 	bl	801255a <get_ldnumber>
 8012c24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	da01      	bge.n	8012c30 <f_mount+0x28>
 8012c2c:	230b      	movs	r3, #11
 8012c2e:	e02b      	b.n	8012c88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012c30:	4a17      	ldr	r2, [pc, #92]	; (8012c90 <f_mount+0x88>)
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012c3a:	69bb      	ldr	r3, [r7, #24]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d005      	beq.n	8012c4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012c40:	69b8      	ldr	r0, [r7, #24]
 8012c42:	f7fe fc03 	bl	801144c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d002      	beq.n	8012c58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	2200      	movs	r2, #0
 8012c56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012c58:	68fa      	ldr	r2, [r7, #12]
 8012c5a:	490d      	ldr	r1, [pc, #52]	; (8012c90 <f_mount+0x88>)
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d002      	beq.n	8012c6e <f_mount+0x66>
 8012c68:	79fb      	ldrb	r3, [r7, #7]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d001      	beq.n	8012c72 <f_mount+0x6a>
 8012c6e:	2300      	movs	r3, #0
 8012c70:	e00a      	b.n	8012c88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012c72:	f107 010c 	add.w	r1, r7, #12
 8012c76:	f107 0308 	add.w	r3, r7, #8
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff fd07 	bl	8012690 <find_volume>
 8012c82:	4603      	mov	r3, r0
 8012c84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3720      	adds	r7, #32
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	20041364 	.word	0x20041364

08012c94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b098      	sub	sp, #96	; 0x60
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	4613      	mov	r3, r2
 8012ca0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d101      	bne.n	8012cac <f_open+0x18>
 8012ca8:	2309      	movs	r3, #9
 8012caa:	e1ba      	b.n	8013022 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012cac:	79fb      	ldrb	r3, [r7, #7]
 8012cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012cb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012cb4:	79fa      	ldrb	r2, [r7, #7]
 8012cb6:	f107 0110 	add.w	r1, r7, #16
 8012cba:	f107 0308 	add.w	r3, r7, #8
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7ff fce6 	bl	8012690 <find_volume>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f040 819e 	bne.w	8013010 <f_open+0x37c>
		dj.obj.fs = fs;
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012cd8:	68ba      	ldr	r2, [r7, #8]
 8012cda:	f107 0314 	add.w	r3, r7, #20
 8012cde:	4611      	mov	r1, r2
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7ff fba5 	bl	8012430 <follow_path>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d11a      	bne.n	8012d2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012cf4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012cf8:	b25b      	sxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	da03      	bge.n	8012d06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012cfe:	2306      	movs	r3, #6
 8012d00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d04:	e011      	b.n	8012d2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012d06:	79fb      	ldrb	r3, [r7, #7]
 8012d08:	f023 0301 	bic.w	r3, r3, #1
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	bf14      	ite	ne
 8012d10:	2301      	movne	r3, #1
 8012d12:	2300      	moveq	r3, #0
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	461a      	mov	r2, r3
 8012d18:	f107 0314 	add.w	r3, r7, #20
 8012d1c:	4611      	mov	r1, r2
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fe fa4c 	bl	80111bc <chk_lock>
 8012d24:	4603      	mov	r3, r0
 8012d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012d2a:	79fb      	ldrb	r3, [r7, #7]
 8012d2c:	f003 031c 	and.w	r3, r3, #28
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d07e      	beq.n	8012e32 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d017      	beq.n	8012d6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d40:	2b04      	cmp	r3, #4
 8012d42:	d10e      	bne.n	8012d62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012d44:	f7fe fa96 	bl	8011274 <enq_lock>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d006      	beq.n	8012d5c <f_open+0xc8>
 8012d4e:	f107 0314 	add.w	r3, r7, #20
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7ff fa52 	bl	80121fc <dir_register>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	e000      	b.n	8012d5e <f_open+0xca>
 8012d5c:	2312      	movs	r3, #18
 8012d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012d62:	79fb      	ldrb	r3, [r7, #7]
 8012d64:	f043 0308 	orr.w	r3, r3, #8
 8012d68:	71fb      	strb	r3, [r7, #7]
 8012d6a:	e010      	b.n	8012d8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012d6c:	7ebb      	ldrb	r3, [r7, #26]
 8012d6e:	f003 0311 	and.w	r3, r3, #17
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d003      	beq.n	8012d7e <f_open+0xea>
					res = FR_DENIED;
 8012d76:	2307      	movs	r3, #7
 8012d78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d7c:	e007      	b.n	8012d8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012d7e:	79fb      	ldrb	r3, [r7, #7]
 8012d80:	f003 0304 	and.w	r3, r3, #4
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d002      	beq.n	8012d8e <f_open+0xfa>
 8012d88:	2308      	movs	r3, #8
 8012d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d167      	bne.n	8012e66 <f_open+0x1d2>
 8012d96:	79fb      	ldrb	r3, [r7, #7]
 8012d98:	f003 0308 	and.w	r3, r3, #8
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d062      	beq.n	8012e66 <f_open+0x1d2>
				dw = GET_FATTIME();
 8012da0:	4ba2      	ldr	r3, [pc, #648]	; (801302c <f_open+0x398>)
 8012da2:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012da6:	330e      	adds	r3, #14
 8012da8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7fe f95c 	bl	8011068 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012db2:	3316      	adds	r3, #22
 8012db4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7fe f956 	bl	8011068 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dbe:	330b      	adds	r3, #11
 8012dc0:	2220      	movs	r2, #32
 8012dc2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dc8:	4611      	mov	r1, r2
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7ff f925 	bl	801201a <ld_clust>
 8012dd0:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7ff f93d 	bl	8012058 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012de0:	331c      	adds	r3, #28
 8012de2:	2100      	movs	r1, #0
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7fe f93f 	bl	8011068 <st_dword>
					fs->wflag = 1;
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	2201      	movs	r2, #1
 8012dee:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d037      	beq.n	8012e66 <f_open+0x1d2>
						dw = fs->winsect;
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dfa:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012dfc:	f107 0314 	add.w	r3, r7, #20
 8012e00:	2200      	movs	r2, #0
 8012e02:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7fe fe2d 	bl	8011a64 <remove_chain>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012e10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d126      	bne.n	8012e66 <f_open+0x1d2>
							res = move_window(fs, dw);
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7fe fb7d 	bl	801151c <move_window>
 8012e22:	4603      	mov	r3, r0
 8012e24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e2c:	3a01      	subs	r2, #1
 8012e2e:	611a      	str	r2, [r3, #16]
 8012e30:	e019      	b.n	8012e66 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d115      	bne.n	8012e66 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012e3a:	7ebb      	ldrb	r3, [r7, #26]
 8012e3c:	f003 0310 	and.w	r3, r3, #16
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d003      	beq.n	8012e4c <f_open+0x1b8>
					res = FR_NO_FILE;
 8012e44:	2304      	movs	r3, #4
 8012e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012e4a:	e00c      	b.n	8012e66 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012e4c:	79fb      	ldrb	r3, [r7, #7]
 8012e4e:	f003 0302 	and.w	r3, r3, #2
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d007      	beq.n	8012e66 <f_open+0x1d2>
 8012e56:	7ebb      	ldrb	r3, [r7, #26]
 8012e58:	f003 0301 	and.w	r3, r3, #1
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d002      	beq.n	8012e66 <f_open+0x1d2>
						res = FR_DENIED;
 8012e60:	2307      	movs	r3, #7
 8012e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d128      	bne.n	8012ec0 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012e6e:	79fb      	ldrb	r3, [r7, #7]
 8012e70:	f003 0308 	and.w	r3, r3, #8
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d003      	beq.n	8012e80 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012e78:	79fb      	ldrb	r3, [r7, #7]
 8012e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e7e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e8e:	79fb      	ldrb	r3, [r7, #7]
 8012e90:	f023 0301 	bic.w	r3, r3, #1
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	bf14      	ite	ne
 8012e98:	2301      	movne	r3, #1
 8012e9a:	2300      	moveq	r3, #0
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	f107 0314 	add.w	r3, r7, #20
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7fe fa06 	bl	80112b8 <inc_lock>
 8012eac:	4602      	mov	r2, r0
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	691b      	ldr	r3, [r3, #16]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d102      	bne.n	8012ec0 <f_open+0x22c>
 8012eba:	2302      	movs	r3, #2
 8012ebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f040 80a3 	bne.w	8013010 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ece:	4611      	mov	r1, r2
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7ff f8a2 	bl	801201a <ld_clust>
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ede:	331c      	adds	r3, #28
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7fe f883 	bl	8010fec <ld_dword>
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012ef2:	693a      	ldr	r2, [r7, #16]
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	88da      	ldrh	r2, [r3, #6]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	79fa      	ldrb	r2, [r7, #7]
 8012f04:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	2200      	movs	r2, #0
 8012f16:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	3330      	adds	r3, #48	; 0x30
 8012f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012f20:	2100      	movs	r1, #0
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7fe f8ed 	bl	8011102 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012f28:	79fb      	ldrb	r3, [r7, #7]
 8012f2a:	f003 0320 	and.w	r3, r3, #32
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d06e      	beq.n	8013010 <f_open+0x37c>
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	68db      	ldr	r3, [r3, #12]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d06a      	beq.n	8013010 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	68da      	ldr	r2, [r3, #12]
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	895b      	ldrh	r3, [r3, #10]
 8012f46:	461a      	mov	r2, r3
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	899b      	ldrh	r3, [r3, #12]
 8012f4c:	fb03 f302 	mul.w	r3, r3, r2
 8012f50:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	689b      	ldr	r3, [r3, #8]
 8012f56:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8012f5e:	e016      	b.n	8012f8e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fe fb96 	bl	8011696 <get_fat>
 8012f6a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f6e:	2b01      	cmp	r3, #1
 8012f70:	d802      	bhi.n	8012f78 <f_open+0x2e4>
 8012f72:	2302      	movs	r3, #2
 8012f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f7e:	d102      	bne.n	8012f86 <f_open+0x2f2>
 8012f80:	2301      	movs	r3, #1
 8012f82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	657b      	str	r3, [r7, #84]	; 0x54
 8012f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d103      	bne.n	8012f9e <f_open+0x30a>
 8012f96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d8e0      	bhi.n	8012f60 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012fa2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d131      	bne.n	8013010 <f_open+0x37c>
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	899b      	ldrh	r3, [r3, #12]
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012fb8:	fb02 f201 	mul.w	r2, r2, r1
 8012fbc:	1a9b      	subs	r3, r3, r2
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d026      	beq.n	8013010 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7fe fb46 	bl	8011658 <clust2sect>
 8012fcc:	6478      	str	r0, [r7, #68]	; 0x44
 8012fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d103      	bne.n	8012fdc <f_open+0x348>
						res = FR_INT_ERR;
 8012fd4:	2302      	movs	r3, #2
 8012fd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fda:	e019      	b.n	8013010 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	899b      	ldrh	r3, [r3, #12]
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fe4:	fbb3 f2f2 	udiv	r2, r3, r2
 8012fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fea:	441a      	add	r2, r3
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	7858      	ldrb	r0, [r3, #1]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	6a1a      	ldr	r2, [r3, #32]
 8012ffe:	2301      	movs	r3, #1
 8013000:	f7fd ff7e 	bl	8010f00 <disk_read>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d002      	beq.n	8013010 <f_open+0x37c>
 801300a:	2301      	movs	r3, #1
 801300c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013014:	2b00      	cmp	r3, #0
 8013016:	d002      	beq.n	801301e <f_open+0x38a>
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2200      	movs	r2, #0
 801301c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801301e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013022:	4618      	mov	r0, r3
 8013024:	3760      	adds	r7, #96	; 0x60
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}
 801302a:	bf00      	nop
 801302c:	274a0000 	.word	0x274a0000

08013030 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08e      	sub	sp, #56	; 0x38
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	2200      	movs	r2, #0
 8013046:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	f107 0214 	add.w	r2, r7, #20
 801304e:	4611      	mov	r1, r2
 8013050:	4618      	mov	r0, r3
 8013052:	f7ff fda3 	bl	8012b9c <validate>
 8013056:	4603      	mov	r3, r0
 8013058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801305c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013060:	2b00      	cmp	r3, #0
 8013062:	d107      	bne.n	8013074 <f_read+0x44>
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	7d5b      	ldrb	r3, [r3, #21]
 8013068:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801306c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013070:	2b00      	cmp	r3, #0
 8013072:	d002      	beq.n	801307a <f_read+0x4a>
 8013074:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013078:	e135      	b.n	80132e6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	7d1b      	ldrb	r3, [r3, #20]
 801307e:	f003 0301 	and.w	r3, r3, #1
 8013082:	2b00      	cmp	r3, #0
 8013084:	d101      	bne.n	801308a <f_read+0x5a>
 8013086:	2307      	movs	r3, #7
 8013088:	e12d      	b.n	80132e6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	68da      	ldr	r2, [r3, #12]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	699b      	ldr	r3, [r3, #24]
 8013092:	1ad3      	subs	r3, r2, r3
 8013094:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	6a3b      	ldr	r3, [r7, #32]
 801309a:	429a      	cmp	r2, r3
 801309c:	f240 811e 	bls.w	80132dc <f_read+0x2ac>
 80130a0:	6a3b      	ldr	r3, [r7, #32]
 80130a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80130a4:	e11a      	b.n	80132dc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	699b      	ldr	r3, [r3, #24]
 80130aa:	697a      	ldr	r2, [r7, #20]
 80130ac:	8992      	ldrh	r2, [r2, #12]
 80130ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80130b2:	fb02 f201 	mul.w	r2, r2, r1
 80130b6:	1a9b      	subs	r3, r3, r2
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f040 80d5 	bne.w	8013268 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	699b      	ldr	r3, [r3, #24]
 80130c2:	697a      	ldr	r2, [r7, #20]
 80130c4:	8992      	ldrh	r2, [r2, #12]
 80130c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80130ca:	697a      	ldr	r2, [r7, #20]
 80130cc:	8952      	ldrh	r2, [r2, #10]
 80130ce:	3a01      	subs	r2, #1
 80130d0:	4013      	ands	r3, r2
 80130d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d12f      	bne.n	801313a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	699b      	ldr	r3, [r3, #24]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d103      	bne.n	80130ea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	689b      	ldr	r3, [r3, #8]
 80130e6:	633b      	str	r3, [r7, #48]	; 0x30
 80130e8:	e013      	b.n	8013112 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d007      	beq.n	8013102 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	699b      	ldr	r3, [r3, #24]
 80130f6:	4619      	mov	r1, r3
 80130f8:	68f8      	ldr	r0, [r7, #12]
 80130fa:	f7fe fdb0 	bl	8011c5e <clmt_clust>
 80130fe:	6338      	str	r0, [r7, #48]	; 0x30
 8013100:	e007      	b.n	8013112 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013102:	68fa      	ldr	r2, [r7, #12]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	69db      	ldr	r3, [r3, #28]
 8013108:	4619      	mov	r1, r3
 801310a:	4610      	mov	r0, r2
 801310c:	f7fe fac3 	bl	8011696 <get_fat>
 8013110:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013114:	2b01      	cmp	r3, #1
 8013116:	d804      	bhi.n	8013122 <f_read+0xf2>
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2202      	movs	r2, #2
 801311c:	755a      	strb	r2, [r3, #21]
 801311e:	2302      	movs	r3, #2
 8013120:	e0e1      	b.n	80132e6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013128:	d104      	bne.n	8013134 <f_read+0x104>
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2201      	movs	r2, #1
 801312e:	755a      	strb	r2, [r3, #21]
 8013130:	2301      	movs	r3, #1
 8013132:	e0d8      	b.n	80132e6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013138:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801313a:	697a      	ldr	r2, [r7, #20]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	69db      	ldr	r3, [r3, #28]
 8013140:	4619      	mov	r1, r3
 8013142:	4610      	mov	r0, r2
 8013144:	f7fe fa88 	bl	8011658 <clust2sect>
 8013148:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801314a:	69bb      	ldr	r3, [r7, #24]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d104      	bne.n	801315a <f_read+0x12a>
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2202      	movs	r2, #2
 8013154:	755a      	strb	r2, [r3, #21]
 8013156:	2302      	movs	r3, #2
 8013158:	e0c5      	b.n	80132e6 <f_read+0x2b6>
			sect += csect;
 801315a:	69ba      	ldr	r2, [r7, #24]
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	4413      	add	r3, r2
 8013160:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	899b      	ldrh	r3, [r3, #12]
 8013166:	461a      	mov	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	fbb3 f3f2 	udiv	r3, r3, r2
 801316e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013172:	2b00      	cmp	r3, #0
 8013174:	d041      	beq.n	80131fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013176:	69fa      	ldr	r2, [r7, #28]
 8013178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317a:	4413      	add	r3, r2
 801317c:	697a      	ldr	r2, [r7, #20]
 801317e:	8952      	ldrh	r2, [r2, #10]
 8013180:	4293      	cmp	r3, r2
 8013182:	d905      	bls.n	8013190 <f_read+0x160>
					cc = fs->csize - csect;
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	895b      	ldrh	r3, [r3, #10]
 8013188:	461a      	mov	r2, r3
 801318a:	69fb      	ldr	r3, [r7, #28]
 801318c:	1ad3      	subs	r3, r2, r3
 801318e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	7858      	ldrb	r0, [r3, #1]
 8013194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013196:	69ba      	ldr	r2, [r7, #24]
 8013198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801319a:	f7fd feb1 	bl	8010f00 <disk_read>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d004      	beq.n	80131ae <f_read+0x17e>
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2201      	movs	r2, #1
 80131a8:	755a      	strb	r2, [r3, #21]
 80131aa:	2301      	movs	r3, #1
 80131ac:	e09b      	b.n	80132e6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	7d1b      	ldrb	r3, [r3, #20]
 80131b2:	b25b      	sxtb	r3, r3
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	da18      	bge.n	80131ea <f_read+0x1ba>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	6a1a      	ldr	r2, [r3, #32]
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d911      	bls.n	80131ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	6a1a      	ldr	r2, [r3, #32]
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	1ad3      	subs	r3, r2, r3
 80131ce:	697a      	ldr	r2, [r7, #20]
 80131d0:	8992      	ldrh	r2, [r2, #12]
 80131d2:	fb02 f303 	mul.w	r3, r2, r3
 80131d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131d8:	18d0      	adds	r0, r2, r3
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	899b      	ldrh	r3, [r3, #12]
 80131e4:	461a      	mov	r2, r3
 80131e6:	f7fd ff6b 	bl	80110c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	899b      	ldrh	r3, [r3, #12]
 80131ee:	461a      	mov	r2, r3
 80131f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f2:	fb02 f303 	mul.w	r3, r2, r3
 80131f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80131f8:	e05c      	b.n	80132b4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6a1b      	ldr	r3, [r3, #32]
 80131fe:	69ba      	ldr	r2, [r7, #24]
 8013200:	429a      	cmp	r2, r3
 8013202:	d02e      	beq.n	8013262 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	7d1b      	ldrb	r3, [r3, #20]
 8013208:	b25b      	sxtb	r3, r3
 801320a:	2b00      	cmp	r3, #0
 801320c:	da18      	bge.n	8013240 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	7858      	ldrb	r0, [r3, #1]
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6a1a      	ldr	r2, [r3, #32]
 801321c:	2301      	movs	r3, #1
 801321e:	f7fd fe8f 	bl	8010f40 <disk_write>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d004      	beq.n	8013232 <f_read+0x202>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2201      	movs	r2, #1
 801322c:	755a      	strb	r2, [r3, #21]
 801322e:	2301      	movs	r3, #1
 8013230:	e059      	b.n	80132e6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	7d1b      	ldrb	r3, [r3, #20]
 8013236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801323a:	b2da      	uxtb	r2, r3
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	7858      	ldrb	r0, [r3, #1]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801324a:	2301      	movs	r3, #1
 801324c:	69ba      	ldr	r2, [r7, #24]
 801324e:	f7fd fe57 	bl	8010f00 <disk_read>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d004      	beq.n	8013262 <f_read+0x232>
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2201      	movs	r2, #1
 801325c:	755a      	strb	r2, [r3, #21]
 801325e:	2301      	movs	r3, #1
 8013260:	e041      	b.n	80132e6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	69ba      	ldr	r2, [r7, #24]
 8013266:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	899b      	ldrh	r3, [r3, #12]
 801326c:	4618      	mov	r0, r3
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	699b      	ldr	r3, [r3, #24]
 8013272:	697a      	ldr	r2, [r7, #20]
 8013274:	8992      	ldrh	r2, [r2, #12]
 8013276:	fbb3 f1f2 	udiv	r1, r3, r2
 801327a:	fb02 f201 	mul.w	r2, r2, r1
 801327e:	1a9b      	subs	r3, r3, r2
 8013280:	1ac3      	subs	r3, r0, r3
 8013282:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	429a      	cmp	r2, r3
 801328a:	d901      	bls.n	8013290 <f_read+0x260>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	699b      	ldr	r3, [r3, #24]
 801329a:	697a      	ldr	r2, [r7, #20]
 801329c:	8992      	ldrh	r2, [r2, #12]
 801329e:	fbb3 f0f2 	udiv	r0, r3, r2
 80132a2:	fb02 f200 	mul.w	r2, r2, r0
 80132a6:	1a9b      	subs	r3, r3, r2
 80132a8:	440b      	add	r3, r1
 80132aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132ac:	4619      	mov	r1, r3
 80132ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132b0:	f7fd ff06 	bl	80110c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80132b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b8:	4413      	add	r3, r2
 80132ba:	627b      	str	r3, [r7, #36]	; 0x24
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	699a      	ldr	r2, [r3, #24]
 80132c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c2:	441a      	add	r2, r3
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	619a      	str	r2, [r3, #24]
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ce:	441a      	add	r2, r3
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	601a      	str	r2, [r3, #0]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f47f aee1 	bne.w	80130a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80132e4:	2300      	movs	r3, #0
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3738      	adds	r7, #56	; 0x38
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}

080132ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b08c      	sub	sp, #48	; 0x30
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	60f8      	str	r0, [r7, #12]
 80132f6:	60b9      	str	r1, [r7, #8]
 80132f8:	607a      	str	r2, [r7, #4]
 80132fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	2200      	movs	r2, #0
 8013304:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f107 0210 	add.w	r2, r7, #16
 801330c:	4611      	mov	r1, r2
 801330e:	4618      	mov	r0, r3
 8013310:	f7ff fc44 	bl	8012b9c <validate>
 8013314:	4603      	mov	r3, r0
 8013316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801331a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801331e:	2b00      	cmp	r3, #0
 8013320:	d107      	bne.n	8013332 <f_write+0x44>
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	7d5b      	ldrb	r3, [r3, #21]
 8013326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801332a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801332e:	2b00      	cmp	r3, #0
 8013330:	d002      	beq.n	8013338 <f_write+0x4a>
 8013332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013336:	e16a      	b.n	801360e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	7d1b      	ldrb	r3, [r3, #20]
 801333c:	f003 0302 	and.w	r3, r3, #2
 8013340:	2b00      	cmp	r3, #0
 8013342:	d101      	bne.n	8013348 <f_write+0x5a>
 8013344:	2307      	movs	r3, #7
 8013346:	e162      	b.n	801360e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	699a      	ldr	r2, [r3, #24]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	441a      	add	r2, r3
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	699b      	ldr	r3, [r3, #24]
 8013354:	429a      	cmp	r2, r3
 8013356:	f080 814c 	bcs.w	80135f2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	699b      	ldr	r3, [r3, #24]
 801335e:	43db      	mvns	r3, r3
 8013360:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013362:	e146      	b.n	80135f2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	699b      	ldr	r3, [r3, #24]
 8013368:	693a      	ldr	r2, [r7, #16]
 801336a:	8992      	ldrh	r2, [r2, #12]
 801336c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013370:	fb02 f201 	mul.w	r2, r2, r1
 8013374:	1a9b      	subs	r3, r3, r2
 8013376:	2b00      	cmp	r3, #0
 8013378:	f040 80f1 	bne.w	801355e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	699b      	ldr	r3, [r3, #24]
 8013380:	693a      	ldr	r2, [r7, #16]
 8013382:	8992      	ldrh	r2, [r2, #12]
 8013384:	fbb3 f3f2 	udiv	r3, r3, r2
 8013388:	693a      	ldr	r2, [r7, #16]
 801338a:	8952      	ldrh	r2, [r2, #10]
 801338c:	3a01      	subs	r2, #1
 801338e:	4013      	ands	r3, r2
 8013390:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d143      	bne.n	8013420 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	699b      	ldr	r3, [r3, #24]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d10c      	bne.n	80133ba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80133a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d11a      	bne.n	80133e2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	2100      	movs	r1, #0
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7fe fbbc 	bl	8011b2e <create_chain>
 80133b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80133b8:	e013      	b.n	80133e2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d007      	beq.n	80133d2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	699b      	ldr	r3, [r3, #24]
 80133c6:	4619      	mov	r1, r3
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	f7fe fc48 	bl	8011c5e <clmt_clust>
 80133ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80133d0:	e007      	b.n	80133e2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80133d2:	68fa      	ldr	r2, [r7, #12]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	69db      	ldr	r3, [r3, #28]
 80133d8:	4619      	mov	r1, r3
 80133da:	4610      	mov	r0, r2
 80133dc:	f7fe fba7 	bl	8011b2e <create_chain>
 80133e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80133e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	f000 8109 	beq.w	80135fc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80133ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d104      	bne.n	80133fa <f_write+0x10c>
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2202      	movs	r2, #2
 80133f4:	755a      	strb	r2, [r3, #21]
 80133f6:	2302      	movs	r3, #2
 80133f8:	e109      	b.n	801360e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013400:	d104      	bne.n	801340c <f_write+0x11e>
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2201      	movs	r2, #1
 8013406:	755a      	strb	r2, [r3, #21]
 8013408:	2301      	movs	r3, #1
 801340a:	e100      	b.n	801360e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013410:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	689b      	ldr	r3, [r3, #8]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d102      	bne.n	8013420 <f_write+0x132>
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801341e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	7d1b      	ldrb	r3, [r3, #20]
 8013424:	b25b      	sxtb	r3, r3
 8013426:	2b00      	cmp	r3, #0
 8013428:	da18      	bge.n	801345c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	7858      	ldrb	r0, [r3, #1]
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6a1a      	ldr	r2, [r3, #32]
 8013438:	2301      	movs	r3, #1
 801343a:	f7fd fd81 	bl	8010f40 <disk_write>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d004      	beq.n	801344e <f_write+0x160>
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2201      	movs	r2, #1
 8013448:	755a      	strb	r2, [r3, #21]
 801344a:	2301      	movs	r3, #1
 801344c:	e0df      	b.n	801360e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	7d1b      	ldrb	r3, [r3, #20]
 8013452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013456:	b2da      	uxtb	r2, r3
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801345c:	693a      	ldr	r2, [r7, #16]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	69db      	ldr	r3, [r3, #28]
 8013462:	4619      	mov	r1, r3
 8013464:	4610      	mov	r0, r2
 8013466:	f7fe f8f7 	bl	8011658 <clust2sect>
 801346a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d104      	bne.n	801347c <f_write+0x18e>
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2202      	movs	r2, #2
 8013476:	755a      	strb	r2, [r3, #21]
 8013478:	2302      	movs	r3, #2
 801347a:	e0c8      	b.n	801360e <f_write+0x320>
			sect += csect;
 801347c:	697a      	ldr	r2, [r7, #20]
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	4413      	add	r3, r2
 8013482:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	899b      	ldrh	r3, [r3, #12]
 8013488:	461a      	mov	r2, r3
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013490:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013492:	6a3b      	ldr	r3, [r7, #32]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d043      	beq.n	8013520 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013498:	69ba      	ldr	r2, [r7, #24]
 801349a:	6a3b      	ldr	r3, [r7, #32]
 801349c:	4413      	add	r3, r2
 801349e:	693a      	ldr	r2, [r7, #16]
 80134a0:	8952      	ldrh	r2, [r2, #10]
 80134a2:	4293      	cmp	r3, r2
 80134a4:	d905      	bls.n	80134b2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	895b      	ldrh	r3, [r3, #10]
 80134aa:	461a      	mov	r2, r3
 80134ac:	69bb      	ldr	r3, [r7, #24]
 80134ae:	1ad3      	subs	r3, r2, r3
 80134b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	7858      	ldrb	r0, [r3, #1]
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	697a      	ldr	r2, [r7, #20]
 80134ba:	69f9      	ldr	r1, [r7, #28]
 80134bc:	f7fd fd40 	bl	8010f40 <disk_write>
 80134c0:	4603      	mov	r3, r0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d004      	beq.n	80134d0 <f_write+0x1e2>
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2201      	movs	r2, #1
 80134ca:	755a      	strb	r2, [r3, #21]
 80134cc:	2301      	movs	r3, #1
 80134ce:	e09e      	b.n	801360e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	6a1a      	ldr	r2, [r3, #32]
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	1ad3      	subs	r3, r2, r3
 80134d8:	6a3a      	ldr	r2, [r7, #32]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d918      	bls.n	8013510 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	6a1a      	ldr	r2, [r3, #32]
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	693a      	ldr	r2, [r7, #16]
 80134ee:	8992      	ldrh	r2, [r2, #12]
 80134f0:	fb02 f303 	mul.w	r3, r2, r3
 80134f4:	69fa      	ldr	r2, [r7, #28]
 80134f6:	18d1      	adds	r1, r2, r3
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	899b      	ldrh	r3, [r3, #12]
 80134fc:	461a      	mov	r2, r3
 80134fe:	f7fd fddf 	bl	80110c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	7d1b      	ldrb	r3, [r3, #20]
 8013506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801350a:	b2da      	uxtb	r2, r3
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	899b      	ldrh	r3, [r3, #12]
 8013514:	461a      	mov	r2, r3
 8013516:	6a3b      	ldr	r3, [r7, #32]
 8013518:	fb02 f303 	mul.w	r3, r2, r3
 801351c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801351e:	e04b      	b.n	80135b8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	6a1b      	ldr	r3, [r3, #32]
 8013524:	697a      	ldr	r2, [r7, #20]
 8013526:	429a      	cmp	r2, r3
 8013528:	d016      	beq.n	8013558 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	699a      	ldr	r2, [r3, #24]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013532:	429a      	cmp	r2, r3
 8013534:	d210      	bcs.n	8013558 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	7858      	ldrb	r0, [r3, #1]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013540:	2301      	movs	r3, #1
 8013542:	697a      	ldr	r2, [r7, #20]
 8013544:	f7fd fcdc 	bl	8010f00 <disk_read>
 8013548:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801354a:	2b00      	cmp	r3, #0
 801354c:	d004      	beq.n	8013558 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2201      	movs	r2, #1
 8013552:	755a      	strb	r2, [r3, #21]
 8013554:	2301      	movs	r3, #1
 8013556:	e05a      	b.n	801360e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	697a      	ldr	r2, [r7, #20]
 801355c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	899b      	ldrh	r3, [r3, #12]
 8013562:	4618      	mov	r0, r3
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	699b      	ldr	r3, [r3, #24]
 8013568:	693a      	ldr	r2, [r7, #16]
 801356a:	8992      	ldrh	r2, [r2, #12]
 801356c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013570:	fb02 f201 	mul.w	r2, r2, r1
 8013574:	1a9b      	subs	r3, r3, r2
 8013576:	1ac3      	subs	r3, r0, r3
 8013578:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801357a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	429a      	cmp	r2, r3
 8013580:	d901      	bls.n	8013586 <f_write+0x298>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	699b      	ldr	r3, [r3, #24]
 8013590:	693a      	ldr	r2, [r7, #16]
 8013592:	8992      	ldrh	r2, [r2, #12]
 8013594:	fbb3 f0f2 	udiv	r0, r3, r2
 8013598:	fb02 f200 	mul.w	r2, r2, r0
 801359c:	1a9b      	subs	r3, r3, r2
 801359e:	440b      	add	r3, r1
 80135a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135a2:	69f9      	ldr	r1, [r7, #28]
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7fd fd8b 	bl	80110c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	7d1b      	ldrb	r3, [r3, #20]
 80135ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80135b2:	b2da      	uxtb	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80135b8:	69fa      	ldr	r2, [r7, #28]
 80135ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135bc:	4413      	add	r3, r2
 80135be:	61fb      	str	r3, [r7, #28]
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	699a      	ldr	r2, [r3, #24]
 80135c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c6:	441a      	add	r2, r3
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	619a      	str	r2, [r3, #24]
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	68da      	ldr	r2, [r3, #12]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	699b      	ldr	r3, [r3, #24]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	bf38      	it	cc
 80135d8:	461a      	movcc	r2, r3
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	60da      	str	r2, [r3, #12]
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e4:	441a      	add	r2, r3
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	601a      	str	r2, [r3, #0]
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ee:	1ad3      	subs	r3, r2, r3
 80135f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	f47f aeb5 	bne.w	8013364 <f_write+0x76>
 80135fa:	e000      	b.n	80135fe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80135fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	7d1b      	ldrb	r3, [r3, #20]
 8013602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013606:	b2da      	uxtb	r2, r3
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801360c:	2300      	movs	r3, #0
}
 801360e:	4618      	mov	r0, r3
 8013610:	3730      	adds	r7, #48	; 0x30
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
	...

08013618 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b086      	sub	sp, #24
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f107 0208 	add.w	r2, r7, #8
 8013626:	4611      	mov	r1, r2
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff fab7 	bl	8012b9c <validate>
 801362e:	4603      	mov	r3, r0
 8013630:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013632:	7dfb      	ldrb	r3, [r7, #23]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d167      	bne.n	8013708 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	7d1b      	ldrb	r3, [r3, #20]
 801363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013640:	2b00      	cmp	r3, #0
 8013642:	d061      	beq.n	8013708 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	7d1b      	ldrb	r3, [r3, #20]
 8013648:	b25b      	sxtb	r3, r3
 801364a:	2b00      	cmp	r3, #0
 801364c:	da15      	bge.n	801367a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	7858      	ldrb	r0, [r3, #1]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6a1a      	ldr	r2, [r3, #32]
 801365c:	2301      	movs	r3, #1
 801365e:	f7fd fc6f 	bl	8010f40 <disk_write>
 8013662:	4603      	mov	r3, r0
 8013664:	2b00      	cmp	r3, #0
 8013666:	d001      	beq.n	801366c <f_sync+0x54>
 8013668:	2301      	movs	r3, #1
 801366a:	e04e      	b.n	801370a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	7d1b      	ldrb	r3, [r3, #20]
 8013670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013674:	b2da      	uxtb	r2, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801367a:	4b26      	ldr	r3, [pc, #152]	; (8013714 <f_sync+0xfc>)
 801367c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801367e:	68ba      	ldr	r2, [r7, #8]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013684:	4619      	mov	r1, r3
 8013686:	4610      	mov	r0, r2
 8013688:	f7fd ff48 	bl	801151c <move_window>
 801368c:	4603      	mov	r3, r0
 801368e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013690:	7dfb      	ldrb	r3, [r7, #23]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d138      	bne.n	8013708 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801369a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	330b      	adds	r3, #11
 80136a0:	781a      	ldrb	r2, [r3, #0]
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	330b      	adds	r3, #11
 80136a6:	f042 0220 	orr.w	r2, r2, #32
 80136aa:	b2d2      	uxtb	r2, r2
 80136ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	689b      	ldr	r3, [r3, #8]
 80136b6:	461a      	mov	r2, r3
 80136b8:	68f9      	ldr	r1, [r7, #12]
 80136ba:	f7fe fccd 	bl	8012058 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	f103 021c 	add.w	r2, r3, #28
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	4619      	mov	r1, r3
 80136ca:	4610      	mov	r0, r2
 80136cc:	f7fd fccc 	bl	8011068 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	3316      	adds	r3, #22
 80136d4:	6939      	ldr	r1, [r7, #16]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fd fcc6 	bl	8011068 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	3312      	adds	r3, #18
 80136e0:	2100      	movs	r1, #0
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fd fca5 	bl	8011032 <st_word>
					fs->wflag = 1;
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	2201      	movs	r2, #1
 80136ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fd ff41 	bl	8011578 <sync_fs>
 80136f6:	4603      	mov	r3, r0
 80136f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	7d1b      	ldrb	r3, [r3, #20]
 80136fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013702:	b2da      	uxtb	r2, r3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013708:	7dfb      	ldrb	r3, [r7, #23]
}
 801370a:	4618      	mov	r0, r3
 801370c:	3718      	adds	r7, #24
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	274a0000 	.word	0x274a0000

08013718 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ff ff79 	bl	8013618 <f_sync>
 8013726:	4603      	mov	r3, r0
 8013728:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801372a:	7bfb      	ldrb	r3, [r7, #15]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d118      	bne.n	8013762 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f107 0208 	add.w	r2, r7, #8
 8013736:	4611      	mov	r1, r2
 8013738:	4618      	mov	r0, r3
 801373a:	f7ff fa2f 	bl	8012b9c <validate>
 801373e:	4603      	mov	r3, r0
 8013740:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013742:	7bfb      	ldrb	r3, [r7, #15]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d10c      	bne.n	8013762 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	691b      	ldr	r3, [r3, #16]
 801374c:	4618      	mov	r0, r3
 801374e:	f7fd fe41 	bl	80113d4 <dec_lock>
 8013752:	4603      	mov	r3, r0
 8013754:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013756:	7bfb      	ldrb	r3, [r7, #15]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d102      	bne.n	8013762 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2200      	movs	r2, #0
 8013760:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013762:	7bfb      	ldrb	r3, [r7, #15]
}
 8013764:	4618      	mov	r0, r3
 8013766:	3710      	adds	r7, #16
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801376c:	b590      	push	{r4, r7, lr}
 801376e:	b091      	sub	sp, #68	; 0x44
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013774:	f107 0108 	add.w	r1, r7, #8
 8013778:	1d3b      	adds	r3, r7, #4
 801377a:	2200      	movs	r2, #0
 801377c:	4618      	mov	r0, r3
 801377e:	f7fe ff87 	bl	8012690 <find_volume>
 8013782:	4603      	mov	r3, r0
 8013784:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013788:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801378c:	2b00      	cmp	r3, #0
 801378e:	d131      	bne.n	80137f4 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	f107 030c 	add.w	r3, r7, #12
 801379a:	4611      	mov	r1, r2
 801379c:	4618      	mov	r0, r3
 801379e:	f7fe fe47 	bl	8012430 <follow_path>
 80137a2:	4603      	mov	r3, r0
 80137a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80137a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d11a      	bne.n	80137e6 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80137b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80137b4:	b25b      	sxtb	r3, r3
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	da03      	bge.n	80137c2 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	697a      	ldr	r2, [r7, #20]
 80137be:	619a      	str	r2, [r3, #24]
 80137c0:	e011      	b.n	80137e6 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80137c2:	7cbb      	ldrb	r3, [r7, #18]
 80137c4:	f003 0310 	and.w	r3, r3, #16
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d009      	beq.n	80137e0 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137d0:	68bc      	ldr	r4, [r7, #8]
 80137d2:	4611      	mov	r1, r2
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7fe fc20 	bl	801201a <ld_clust>
 80137da:	4603      	mov	r3, r0
 80137dc:	61a3      	str	r3, [r4, #24]
 80137de:	e002      	b.n	80137e6 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80137e0:	2305      	movs	r3, #5
 80137e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80137e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137ea:	2b04      	cmp	r3, #4
 80137ec:	d102      	bne.n	80137f4 <f_chdir+0x88>
 80137ee:	2305      	movs	r3, #5
 80137f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80137f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3744      	adds	r7, #68	; 0x44
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd90      	pop	{r4, r7, pc}

08013800 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b090      	sub	sp, #64	; 0x40
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f107 0208 	add.w	r2, r7, #8
 8013810:	4611      	mov	r1, r2
 8013812:	4618      	mov	r0, r3
 8013814:	f7ff f9c2 	bl	8012b9c <validate>
 8013818:	4603      	mov	r3, r0
 801381a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801381e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013822:	2b00      	cmp	r3, #0
 8013824:	d103      	bne.n	801382e <f_lseek+0x2e>
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	7d5b      	ldrb	r3, [r3, #21]
 801382a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801382e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013832:	2b00      	cmp	r3, #0
 8013834:	d002      	beq.n	801383c <f_lseek+0x3c>
 8013836:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801383a:	e201      	b.n	8013c40 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013840:	2b00      	cmp	r3, #0
 8013842:	f000 80d9 	beq.w	80139f8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	f1b3 3fff 	cmp.w	r3, #4294967295
 801384c:	d15a      	bne.n	8013904 <f_lseek+0x104>
			tbl = fp->cltbl;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013852:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013856:	1d1a      	adds	r2, r3, #4
 8013858:	627a      	str	r2, [r7, #36]	; 0x24
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	617b      	str	r3, [r7, #20]
 801385e:	2302      	movs	r3, #2
 8013860:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	689b      	ldr	r3, [r3, #8]
 8013866:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386a:	2b00      	cmp	r3, #0
 801386c:	d03a      	beq.n	80138e4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013870:	613b      	str	r3, [r7, #16]
 8013872:	2300      	movs	r3, #0
 8013874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013878:	3302      	adds	r3, #2
 801387a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387e:	60fb      	str	r3, [r7, #12]
 8013880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013882:	3301      	adds	r3, #1
 8013884:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801388a:	4618      	mov	r0, r3
 801388c:	f7fd ff03 	bl	8011696 <get_fat>
 8013890:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013894:	2b01      	cmp	r3, #1
 8013896:	d804      	bhi.n	80138a2 <f_lseek+0xa2>
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2202      	movs	r2, #2
 801389c:	755a      	strb	r2, [r3, #21]
 801389e:	2302      	movs	r3, #2
 80138a0:	e1ce      	b.n	8013c40 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a8:	d104      	bne.n	80138b4 <f_lseek+0xb4>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2201      	movs	r2, #1
 80138ae:	755a      	strb	r2, [r3, #21]
 80138b0:	2301      	movs	r3, #1
 80138b2:	e1c5      	b.n	8013c40 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	3301      	adds	r3, #1
 80138b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d0de      	beq.n	801387c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80138be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d809      	bhi.n	80138da <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80138c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c8:	1d1a      	adds	r2, r3, #4
 80138ca:	627a      	str	r2, [r7, #36]	; 0x24
 80138cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138ce:	601a      	str	r2, [r3, #0]
 80138d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d2:	1d1a      	adds	r2, r3, #4
 80138d4:	627a      	str	r2, [r7, #36]	; 0x24
 80138d6:	693a      	ldr	r2, [r7, #16]
 80138d8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	69db      	ldr	r3, [r3, #28]
 80138de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d3c4      	bcc.n	801386e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138ea:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80138ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d803      	bhi.n	80138fc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80138f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f6:	2200      	movs	r2, #0
 80138f8:	601a      	str	r2, [r3, #0]
 80138fa:	e19f      	b.n	8013c3c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80138fc:	2311      	movs	r3, #17
 80138fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013902:	e19b      	b.n	8013c3c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	683a      	ldr	r2, [r7, #0]
 801390a:	429a      	cmp	r2, r3
 801390c:	d902      	bls.n	8013914 <f_lseek+0x114>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	68db      	ldr	r3, [r3, #12]
 8013912:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	683a      	ldr	r2, [r7, #0]
 8013918:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	f000 818d 	beq.w	8013c3c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	3b01      	subs	r3, #1
 8013926:	4619      	mov	r1, r3
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7fe f998 	bl	8011c5e <clmt_clust>
 801392e:	4602      	mov	r2, r0
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013934:	68ba      	ldr	r2, [r7, #8]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	69db      	ldr	r3, [r3, #28]
 801393a:	4619      	mov	r1, r3
 801393c:	4610      	mov	r0, r2
 801393e:	f7fd fe8b 	bl	8011658 <clust2sect>
 8013942:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d104      	bne.n	8013954 <f_lseek+0x154>
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2202      	movs	r2, #2
 801394e:	755a      	strb	r2, [r3, #21]
 8013950:	2302      	movs	r3, #2
 8013952:	e175      	b.n	8013c40 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	3b01      	subs	r3, #1
 8013958:	68ba      	ldr	r2, [r7, #8]
 801395a:	8992      	ldrh	r2, [r2, #12]
 801395c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013960:	68ba      	ldr	r2, [r7, #8]
 8013962:	8952      	ldrh	r2, [r2, #10]
 8013964:	3a01      	subs	r2, #1
 8013966:	4013      	ands	r3, r2
 8013968:	69ba      	ldr	r2, [r7, #24]
 801396a:	4413      	add	r3, r2
 801396c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	699b      	ldr	r3, [r3, #24]
 8013972:	68ba      	ldr	r2, [r7, #8]
 8013974:	8992      	ldrh	r2, [r2, #12]
 8013976:	fbb3 f1f2 	udiv	r1, r3, r2
 801397a:	fb02 f201 	mul.w	r2, r2, r1
 801397e:	1a9b      	subs	r3, r3, r2
 8013980:	2b00      	cmp	r3, #0
 8013982:	f000 815b 	beq.w	8013c3c <f_lseek+0x43c>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6a1b      	ldr	r3, [r3, #32]
 801398a:	69ba      	ldr	r2, [r7, #24]
 801398c:	429a      	cmp	r2, r3
 801398e:	f000 8155 	beq.w	8013c3c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	7d1b      	ldrb	r3, [r3, #20]
 8013996:	b25b      	sxtb	r3, r3
 8013998:	2b00      	cmp	r3, #0
 801399a:	da18      	bge.n	80139ce <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	7858      	ldrb	r0, [r3, #1]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6a1a      	ldr	r2, [r3, #32]
 80139aa:	2301      	movs	r3, #1
 80139ac:	f7fd fac8 	bl	8010f40 <disk_write>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d004      	beq.n	80139c0 <f_lseek+0x1c0>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2201      	movs	r2, #1
 80139ba:	755a      	strb	r2, [r3, #21]
 80139bc:	2301      	movs	r3, #1
 80139be:	e13f      	b.n	8013c40 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	7d1b      	ldrb	r3, [r3, #20]
 80139c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139c8:	b2da      	uxtb	r2, r3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	7858      	ldrb	r0, [r3, #1]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139d8:	2301      	movs	r3, #1
 80139da:	69ba      	ldr	r2, [r7, #24]
 80139dc:	f7fd fa90 	bl	8010f00 <disk_read>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d004      	beq.n	80139f0 <f_lseek+0x1f0>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2201      	movs	r2, #1
 80139ea:	755a      	strb	r2, [r3, #21]
 80139ec:	2301      	movs	r3, #1
 80139ee:	e127      	b.n	8013c40 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	69ba      	ldr	r2, [r7, #24]
 80139f4:	621a      	str	r2, [r3, #32]
 80139f6:	e121      	b.n	8013c3c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	68db      	ldr	r3, [r3, #12]
 80139fc:	683a      	ldr	r2, [r7, #0]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d908      	bls.n	8013a14 <f_lseek+0x214>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	7d1b      	ldrb	r3, [r3, #20]
 8013a06:	f003 0302 	and.w	r3, r3, #2
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d102      	bne.n	8013a14 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	699b      	ldr	r3, [r3, #24]
 8013a18:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a22:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	f000 80b5 	beq.w	8013b96 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	895b      	ldrh	r3, [r3, #10]
 8013a30:	461a      	mov	r2, r3
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	899b      	ldrh	r3, [r3, #12]
 8013a36:	fb03 f302 	mul.w	r3, r3, r2
 8013a3a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013a3c:	6a3b      	ldr	r3, [r7, #32]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d01b      	beq.n	8013a7a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	1e5a      	subs	r2, r3, #1
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8013a4c:	6a3b      	ldr	r3, [r7, #32]
 8013a4e:	1e59      	subs	r1, r3, #1
 8013a50:	69fb      	ldr	r3, [r7, #28]
 8013a52:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d30f      	bcc.n	8013a7a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013a5a:	6a3b      	ldr	r3, [r7, #32]
 8013a5c:	1e5a      	subs	r2, r3, #1
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	425b      	negs	r3, r3
 8013a62:	401a      	ands	r2, r3
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	699b      	ldr	r3, [r3, #24]
 8013a6c:	683a      	ldr	r2, [r7, #0]
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	69db      	ldr	r3, [r3, #28]
 8013a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a78:	e022      	b.n	8013ac0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	689b      	ldr	r3, [r3, #8]
 8013a7e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d119      	bne.n	8013aba <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2100      	movs	r1, #0
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7fe f84f 	bl	8011b2e <create_chain>
 8013a90:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	d104      	bne.n	8013aa2 <f_lseek+0x2a2>
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2202      	movs	r2, #2
 8013a9c:	755a      	strb	r2, [r3, #21]
 8013a9e:	2302      	movs	r3, #2
 8013aa0:	e0ce      	b.n	8013c40 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aa8:	d104      	bne.n	8013ab4 <f_lseek+0x2b4>
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2201      	movs	r2, #1
 8013aae:	755a      	strb	r2, [r3, #21]
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e0c5      	b.n	8013c40 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ab8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013abe:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d067      	beq.n	8013b96 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013ac6:	e03a      	b.n	8013b3e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013ac8:	683a      	ldr	r2, [r7, #0]
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	1ad3      	subs	r3, r2, r3
 8013ace:	603b      	str	r3, [r7, #0]
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	699a      	ldr	r2, [r3, #24]
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	441a      	add	r2, r3
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	7d1b      	ldrb	r3, [r3, #20]
 8013ae0:	f003 0302 	and.w	r3, r3, #2
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00b      	beq.n	8013b00 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7fe f81e 	bl	8011b2e <create_chain>
 8013af2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d108      	bne.n	8013b0c <f_lseek+0x30c>
							ofs = 0; break;
 8013afa:	2300      	movs	r3, #0
 8013afc:	603b      	str	r3, [r7, #0]
 8013afe:	e022      	b.n	8013b46 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7fd fdc6 	bl	8011696 <get_fat>
 8013b0a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b12:	d104      	bne.n	8013b1e <f_lseek+0x31e>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2201      	movs	r2, #1
 8013b18:	755a      	strb	r2, [r3, #21]
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	e090      	b.n	8013c40 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	2b01      	cmp	r3, #1
 8013b22:	d904      	bls.n	8013b2e <f_lseek+0x32e>
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	69db      	ldr	r3, [r3, #28]
 8013b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d304      	bcc.n	8013b38 <f_lseek+0x338>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2202      	movs	r2, #2
 8013b32:	755a      	strb	r2, [r3, #21]
 8013b34:	2302      	movs	r3, #2
 8013b36:	e083      	b.n	8013c40 <f_lseek+0x440>
					fp->clust = clst;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b3c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013b3e:	683a      	ldr	r2, [r7, #0]
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d8c0      	bhi.n	8013ac8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	699a      	ldr	r2, [r3, #24]
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	441a      	add	r2, r3
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	899b      	ldrh	r3, [r3, #12]
 8013b56:	461a      	mov	r2, r3
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b5e:	fb02 f201 	mul.w	r2, r2, r1
 8013b62:	1a9b      	subs	r3, r3, r2
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d016      	beq.n	8013b96 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7fd fd73 	bl	8011658 <clust2sect>
 8013b72:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d104      	bne.n	8013b84 <f_lseek+0x384>
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2202      	movs	r2, #2
 8013b7e:	755a      	strb	r2, [r3, #21]
 8013b80:	2302      	movs	r3, #2
 8013b82:	e05d      	b.n	8013c40 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	899b      	ldrh	r3, [r3, #12]
 8013b88:	461a      	mov	r2, r3
 8013b8a:	683b      	ldr	r3, [r7, #0]
 8013b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b92:	4413      	add	r3, r2
 8013b94:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	699a      	ldr	r2, [r3, #24]
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	68db      	ldr	r3, [r3, #12]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d90a      	bls.n	8013bb8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	699a      	ldr	r2, [r3, #24]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	7d1b      	ldrb	r3, [r3, #20]
 8013bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bb2:	b2da      	uxtb	r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	699b      	ldr	r3, [r3, #24]
 8013bbc:	68ba      	ldr	r2, [r7, #8]
 8013bbe:	8992      	ldrh	r2, [r2, #12]
 8013bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bc4:	fb02 f201 	mul.w	r2, r2, r1
 8013bc8:	1a9b      	subs	r3, r3, r2
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d036      	beq.n	8013c3c <f_lseek+0x43c>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	6a1b      	ldr	r3, [r3, #32]
 8013bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d031      	beq.n	8013c3c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	7d1b      	ldrb	r3, [r3, #20]
 8013bdc:	b25b      	sxtb	r3, r3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	da18      	bge.n	8013c14 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	7858      	ldrb	r0, [r3, #1]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6a1a      	ldr	r2, [r3, #32]
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	f7fd f9a5 	bl	8010f40 <disk_write>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d004      	beq.n	8013c06 <f_lseek+0x406>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2201      	movs	r2, #1
 8013c00:	755a      	strb	r2, [r3, #21]
 8013c02:	2301      	movs	r3, #1
 8013c04:	e01c      	b.n	8013c40 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	7d1b      	ldrb	r3, [r3, #20]
 8013c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c0e:	b2da      	uxtb	r2, r3
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	7858      	ldrb	r0, [r3, #1]
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c1e:	2301      	movs	r3, #1
 8013c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c22:	f7fd f96d 	bl	8010f00 <disk_read>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d004      	beq.n	8013c36 <f_lseek+0x436>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2201      	movs	r2, #1
 8013c30:	755a      	strb	r2, [r3, #21]
 8013c32:	2301      	movs	r3, #1
 8013c34:	e004      	b.n	8013c40 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c3a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3740      	adds	r7, #64	; 0x40
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b09e      	sub	sp, #120	; 0x78
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013c50:	2300      	movs	r3, #0
 8013c52:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013c54:	f107 010c 	add.w	r1, r7, #12
 8013c58:	1d3b      	adds	r3, r7, #4
 8013c5a:	2202      	movs	r2, #2
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7fe fd17 	bl	8012690 <find_volume>
 8013c62:	4603      	mov	r3, r0
 8013c64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013c6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f040 80a4 	bne.w	8013dbe <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7fe fbd6 	bl	8012430 <follow_path>
 8013c84:	4603      	mov	r3, r0
 8013c86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013c8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d108      	bne.n	8013ca4 <f_unlink+0x5c>
 8013c92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013c96:	f003 0320 	and.w	r3, r3, #32
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d002      	beq.n	8013ca4 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013c9e:	2306      	movs	r3, #6
 8013ca0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013ca4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d108      	bne.n	8013cbe <f_unlink+0x76>
 8013cac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013cb0:	2102      	movs	r1, #2
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fd fa82 	bl	80111bc <chk_lock>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013cbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d17b      	bne.n	8013dbe <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013cc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013cca:	b25b      	sxtb	r3, r3
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	da03      	bge.n	8013cd8 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013cd0:	2306      	movs	r3, #6
 8013cd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013cd6:	e008      	b.n	8013cea <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013cd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013cdc:	f003 0301 	and.w	r3, r3, #1
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d002      	beq.n	8013cea <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013ce4:	2307      	movs	r3, #7
 8013ce6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013cea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d13d      	bne.n	8013d6e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013cf6:	4611      	mov	r1, r2
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7fe f98e 	bl	801201a <ld_clust>
 8013cfe:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013d00:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013d04:	f003 0310 	and.w	r3, r3, #16
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d030      	beq.n	8013d6e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	699b      	ldr	r3, [r3, #24]
 8013d10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d103      	bne.n	8013d1e <f_unlink+0xd6>
						res = FR_DENIED;
 8013d16:	2307      	movs	r3, #7
 8013d18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013d1c:	e027      	b.n	8013d6e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d24:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013d26:	f107 0310 	add.w	r3, r7, #16
 8013d2a:	2100      	movs	r1, #0
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7fd ffce 	bl	8011cce <dir_sdi>
 8013d32:	4603      	mov	r3, r0
 8013d34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013d38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d116      	bne.n	8013d6e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013d40:	f107 0310 	add.w	r3, r7, #16
 8013d44:	2100      	movs	r1, #0
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7fe f9a6 	bl	8012098 <dir_read>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013d52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d102      	bne.n	8013d60 <f_unlink+0x118>
 8013d5a:	2307      	movs	r3, #7
 8013d5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013d60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d64:	2b04      	cmp	r3, #4
 8013d66:	d102      	bne.n	8013d6e <f_unlink+0x126>
 8013d68:	2300      	movs	r3, #0
 8013d6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013d6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d123      	bne.n	8013dbe <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7fe fa70 	bl	8012260 <dir_remove>
 8013d80:	4603      	mov	r3, r0
 8013d82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013d86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d10c      	bne.n	8013da8 <f_unlink+0x160>
 8013d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d009      	beq.n	8013da8 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d98:	2200      	movs	r2, #0
 8013d9a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fd fe61 	bl	8011a64 <remove_chain>
 8013da2:	4603      	mov	r3, r0
 8013da4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013da8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d106      	bne.n	8013dbe <f_unlink+0x176>
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fd fbe0 	bl	8011578 <sync_fs>
 8013db8:	4603      	mov	r3, r0
 8013dba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013dbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3778      	adds	r7, #120	; 0x78
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
	...

08013dcc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b096      	sub	sp, #88	; 0x58
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013dd4:	f107 0108 	add.w	r1, r7, #8
 8013dd8:	1d3b      	adds	r3, r7, #4
 8013dda:	2202      	movs	r2, #2
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7fe fc57 	bl	8012690 <find_volume>
 8013de2:	4603      	mov	r3, r0
 8013de4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	f040 80fe 	bne.w	8013ff2 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013df6:	687a      	ldr	r2, [r7, #4]
 8013df8:	f107 030c 	add.w	r3, r7, #12
 8013dfc:	4611      	mov	r1, r2
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fe fb16 	bl	8012430 <follow_path>
 8013e04:	4603      	mov	r3, r0
 8013e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013e0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d102      	bne.n	8013e18 <f_mkdir+0x4c>
 8013e12:	2308      	movs	r3, #8
 8013e14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e1c:	2b04      	cmp	r3, #4
 8013e1e:	d108      	bne.n	8013e32 <f_mkdir+0x66>
 8013e20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013e24:	f003 0320 	and.w	r3, r3, #32
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d002      	beq.n	8013e32 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013e2c:	2306      	movs	r3, #6
 8013e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e36:	2b04      	cmp	r3, #4
 8013e38:	f040 80db 	bne.w	8013ff2 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013e3c:	f107 030c 	add.w	r3, r7, #12
 8013e40:	2100      	movs	r1, #0
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fd fe73 	bl	8011b2e <create_chain>
 8013e48:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	895b      	ldrh	r3, [r3, #10]
 8013e4e:	461a      	mov	r2, r3
 8013e50:	68bb      	ldr	r3, [r7, #8]
 8013e52:	899b      	ldrh	r3, [r3, #12]
 8013e54:	fb03 f302 	mul.w	r3, r3, r2
 8013e58:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d102      	bne.n	8013e6c <f_mkdir+0xa0>
 8013e66:	2307      	movs	r3, #7
 8013e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e6e:	2b01      	cmp	r3, #1
 8013e70:	d102      	bne.n	8013e78 <f_mkdir+0xac>
 8013e72:	2302      	movs	r3, #2
 8013e74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e7e:	d102      	bne.n	8013e86 <f_mkdir+0xba>
 8013e80:	2301      	movs	r3, #1
 8013e82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013e86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d106      	bne.n	8013e9c <f_mkdir+0xd0>
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7fd faff 	bl	8011494 <sync_window>
 8013e96:	4603      	mov	r3, r0
 8013e98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013e9c:	4b58      	ldr	r3, [pc, #352]	; (8014000 <f_mkdir+0x234>)
 8013e9e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013ea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d16c      	bne.n	8013f82 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fd fbd3 	bl	8011658 <clust2sect>
 8013eb2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	3338      	adds	r3, #56	; 0x38
 8013eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	899b      	ldrh	r3, [r3, #12]
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ec4:	f7fd f91d 	bl	8011102 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013ec8:	220b      	movs	r2, #11
 8013eca:	2120      	movs	r1, #32
 8013ecc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ece:	f7fd f918 	bl	8011102 <mem_set>
					dir[DIR_Name] = '.';
 8013ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ed4:	222e      	movs	r2, #46	; 0x2e
 8013ed6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eda:	330b      	adds	r3, #11
 8013edc:	2210      	movs	r2, #16
 8013ede:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ee2:	3316      	adds	r3, #22
 8013ee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fd f8be 	bl	8011068 <st_dword>
					st_clust(fs, dir, dcl);
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7fe f8b0 	bl	8012058 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013efa:	3320      	adds	r3, #32
 8013efc:	2220      	movs	r2, #32
 8013efe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7fd f8dd 	bl	80110c0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f08:	3321      	adds	r3, #33	; 0x21
 8013f0a:	222e      	movs	r2, #46	; 0x2e
 8013f0c:	701a      	strb	r2, [r3, #0]
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	2b03      	cmp	r3, #3
 8013f18:	d106      	bne.n	8013f28 <f_mkdir+0x15c>
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d101      	bne.n	8013f28 <f_mkdir+0x15c>
 8013f24:	2300      	movs	r3, #0
 8013f26:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013f28:	68b8      	ldr	r0, [r7, #8]
 8013f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f2c:	3320      	adds	r3, #32
 8013f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f30:	4619      	mov	r1, r3
 8013f32:	f7fe f891 	bl	8012058 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	895b      	ldrh	r3, [r3, #10]
 8013f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8013f3c:	e01c      	b.n	8013f78 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f40:	1c5a      	adds	r2, r3, #1
 8013f42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013f44:	68ba      	ldr	r2, [r7, #8]
 8013f46:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7fd fa9f 	bl	8011494 <sync_window>
 8013f56:	4603      	mov	r3, r0
 8013f58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d10d      	bne.n	8013f80 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	899b      	ldrh	r3, [r3, #12]
 8013f68:	461a      	mov	r2, r3
 8013f6a:	2100      	movs	r1, #0
 8013f6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f6e:	f7fd f8c8 	bl	8011102 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f74:	3b01      	subs	r3, #1
 8013f76:	653b      	str	r3, [r7, #80]	; 0x50
 8013f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d1df      	bne.n	8013f3e <f_mkdir+0x172>
 8013f7e:	e000      	b.n	8013f82 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013f80:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013f82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d107      	bne.n	8013f9a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013f8a:	f107 030c 	add.w	r3, r7, #12
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fe f934 	bl	80121fc <dir_register>
 8013f94:	4603      	mov	r3, r0
 8013f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013f9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d120      	bne.n	8013fe4 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fa8:	3316      	adds	r3, #22
 8013faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7fd f85b 	bl	8011068 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7fe f84d 	bl	8012058 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fc0:	330b      	adds	r3, #11
 8013fc2:	2210      	movs	r2, #16
 8013fc4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	2201      	movs	r2, #1
 8013fca:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d10e      	bne.n	8013ff2 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fd face 	bl	8011578 <sync_fs>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013fe2:	e006      	b.n	8013ff2 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013fe4:	f107 030c 	add.w	r3, r7, #12
 8013fe8:	2200      	movs	r2, #0
 8013fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7fd fd39 	bl	8011a64 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3758      	adds	r7, #88	; 0x58
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
 8013ffe:	bf00      	nop
 8014000:	274a0000 	.word	0x274a0000

08014004 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b088      	sub	sp, #32
 8014008:	af00      	add	r7, sp, #0
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014010:	2300      	movs	r3, #0
 8014012:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014018:	e017      	b.n	801404a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801401a:	f107 0310 	add.w	r3, r7, #16
 801401e:	f107 0114 	add.w	r1, r7, #20
 8014022:	2201      	movs	r2, #1
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f7ff f803 	bl	8013030 <f_read>
		if (rc != 1) break;
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	2b01      	cmp	r3, #1
 801402e:	d112      	bne.n	8014056 <f_gets+0x52>
		c = s[0];
 8014030:	7d3b      	ldrb	r3, [r7, #20]
 8014032:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	1c5a      	adds	r2, r3, #1
 8014038:	61ba      	str	r2, [r7, #24]
 801403a:	7dfa      	ldrb	r2, [r7, #23]
 801403c:	701a      	strb	r2, [r3, #0]
		n++;
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	3301      	adds	r3, #1
 8014042:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014044:	7dfb      	ldrb	r3, [r7, #23]
 8014046:	2b0a      	cmp	r3, #10
 8014048:	d007      	beq.n	801405a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	3b01      	subs	r3, #1
 801404e:	69fa      	ldr	r2, [r7, #28]
 8014050:	429a      	cmp	r2, r3
 8014052:	dbe2      	blt.n	801401a <f_gets+0x16>
 8014054:	e002      	b.n	801405c <f_gets+0x58>
		if (rc != 1) break;
 8014056:	bf00      	nop
 8014058:	e000      	b.n	801405c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801405a:	bf00      	nop
	}
	*p = 0;
 801405c:	69bb      	ldr	r3, [r7, #24]
 801405e:	2200      	movs	r2, #0
 8014060:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014062:	69fb      	ldr	r3, [r7, #28]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d001      	beq.n	801406c <f_gets+0x68>
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	e000      	b.n	801406e <f_gets+0x6a>
 801406c:	2300      	movs	r3, #0
}
 801406e:	4618      	mov	r0, r3
 8014070:	3720      	adds	r7, #32
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
	...

08014078 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014078:	b480      	push	{r7}
 801407a:	b087      	sub	sp, #28
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	4613      	mov	r3, r2
 8014084:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014086:	2301      	movs	r3, #1
 8014088:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801408a:	2300      	movs	r3, #0
 801408c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801408e:	4b1f      	ldr	r3, [pc, #124]	; (801410c <FATFS_LinkDriverEx+0x94>)
 8014090:	7a5b      	ldrb	r3, [r3, #9]
 8014092:	b2db      	uxtb	r3, r3
 8014094:	2b00      	cmp	r3, #0
 8014096:	d131      	bne.n	80140fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014098:	4b1c      	ldr	r3, [pc, #112]	; (801410c <FATFS_LinkDriverEx+0x94>)
 801409a:	7a5b      	ldrb	r3, [r3, #9]
 801409c:	b2db      	uxtb	r3, r3
 801409e:	461a      	mov	r2, r3
 80140a0:	4b1a      	ldr	r3, [pc, #104]	; (801410c <FATFS_LinkDriverEx+0x94>)
 80140a2:	2100      	movs	r1, #0
 80140a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80140a6:	4b19      	ldr	r3, [pc, #100]	; (801410c <FATFS_LinkDriverEx+0x94>)
 80140a8:	7a5b      	ldrb	r3, [r3, #9]
 80140aa:	b2db      	uxtb	r3, r3
 80140ac:	4a17      	ldr	r2, [pc, #92]	; (801410c <FATFS_LinkDriverEx+0x94>)
 80140ae:	009b      	lsls	r3, r3, #2
 80140b0:	4413      	add	r3, r2
 80140b2:	68fa      	ldr	r2, [r7, #12]
 80140b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80140b6:	4b15      	ldr	r3, [pc, #84]	; (801410c <FATFS_LinkDriverEx+0x94>)
 80140b8:	7a5b      	ldrb	r3, [r3, #9]
 80140ba:	b2db      	uxtb	r3, r3
 80140bc:	461a      	mov	r2, r3
 80140be:	4b13      	ldr	r3, [pc, #76]	; (801410c <FATFS_LinkDriverEx+0x94>)
 80140c0:	4413      	add	r3, r2
 80140c2:	79fa      	ldrb	r2, [r7, #7]
 80140c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80140c6:	4b11      	ldr	r3, [pc, #68]	; (801410c <FATFS_LinkDriverEx+0x94>)
 80140c8:	7a5b      	ldrb	r3, [r3, #9]
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	1c5a      	adds	r2, r3, #1
 80140ce:	b2d1      	uxtb	r1, r2
 80140d0:	4a0e      	ldr	r2, [pc, #56]	; (801410c <FATFS_LinkDriverEx+0x94>)
 80140d2:	7251      	strb	r1, [r2, #9]
 80140d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80140d6:	7dbb      	ldrb	r3, [r7, #22]
 80140d8:	3330      	adds	r3, #48	; 0x30
 80140da:	b2da      	uxtb	r2, r3
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	3301      	adds	r3, #1
 80140e4:	223a      	movs	r2, #58	; 0x3a
 80140e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	3302      	adds	r3, #2
 80140ec:	222f      	movs	r2, #47	; 0x2f
 80140ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	3303      	adds	r3, #3
 80140f4:	2200      	movs	r2, #0
 80140f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80140f8:	2300      	movs	r3, #0
 80140fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80140fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	371c      	adds	r7, #28
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop
 801410c:	2004138c 	.word	0x2004138c

08014110 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801411a:	2200      	movs	r2, #0
 801411c:	6839      	ldr	r1, [r7, #0]
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7ff ffaa 	bl	8014078 <FATFS_LinkDriverEx>
 8014124:	4603      	mov	r3, r0
}
 8014126:	4618      	mov	r0, r3
 8014128:	3708      	adds	r7, #8
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}

0801412e <__cxa_guard_acquire>:
 801412e:	6803      	ldr	r3, [r0, #0]
 8014130:	07db      	lsls	r3, r3, #31
 8014132:	d406      	bmi.n	8014142 <__cxa_guard_acquire+0x14>
 8014134:	7843      	ldrb	r3, [r0, #1]
 8014136:	b103      	cbz	r3, 801413a <__cxa_guard_acquire+0xc>
 8014138:	deff      	udf	#255	; 0xff
 801413a:	2301      	movs	r3, #1
 801413c:	7043      	strb	r3, [r0, #1]
 801413e:	4618      	mov	r0, r3
 8014140:	4770      	bx	lr
 8014142:	2000      	movs	r0, #0
 8014144:	4770      	bx	lr

08014146 <__cxa_guard_release>:
 8014146:	2301      	movs	r3, #1
 8014148:	6003      	str	r3, [r0, #0]
 801414a:	4770      	bx	lr
 801414c:	0000      	movs	r0, r0
	...

08014150 <cos>:
 8014150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014152:	ec51 0b10 	vmov	r0, r1, d0
 8014156:	4a1e      	ldr	r2, [pc, #120]	; (80141d0 <cos+0x80>)
 8014158:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801415c:	4293      	cmp	r3, r2
 801415e:	dc06      	bgt.n	801416e <cos+0x1e>
 8014160:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80141c8 <cos+0x78>
 8014164:	f000 faa4 	bl	80146b0 <__kernel_cos>
 8014168:	ec51 0b10 	vmov	r0, r1, d0
 801416c:	e007      	b.n	801417e <cos+0x2e>
 801416e:	4a19      	ldr	r2, [pc, #100]	; (80141d4 <cos+0x84>)
 8014170:	4293      	cmp	r3, r2
 8014172:	dd09      	ble.n	8014188 <cos+0x38>
 8014174:	ee10 2a10 	vmov	r2, s0
 8014178:	460b      	mov	r3, r1
 801417a:	f7ec f89d 	bl	80002b8 <__aeabi_dsub>
 801417e:	ec41 0b10 	vmov	d0, r0, r1
 8014182:	b005      	add	sp, #20
 8014184:	f85d fb04 	ldr.w	pc, [sp], #4
 8014188:	4668      	mov	r0, sp
 801418a:	f000 f89d 	bl	80142c8 <__ieee754_rem_pio2>
 801418e:	f000 0003 	and.w	r0, r0, #3
 8014192:	2801      	cmp	r0, #1
 8014194:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014198:	ed9d 0b00 	vldr	d0, [sp]
 801419c:	d007      	beq.n	80141ae <cos+0x5e>
 801419e:	2802      	cmp	r0, #2
 80141a0:	d00e      	beq.n	80141c0 <cos+0x70>
 80141a2:	2800      	cmp	r0, #0
 80141a4:	d0de      	beq.n	8014164 <cos+0x14>
 80141a6:	2001      	movs	r0, #1
 80141a8:	f000 fe8a 	bl	8014ec0 <__kernel_sin>
 80141ac:	e7dc      	b.n	8014168 <cos+0x18>
 80141ae:	f000 fe87 	bl	8014ec0 <__kernel_sin>
 80141b2:	ec53 2b10 	vmov	r2, r3, d0
 80141b6:	ee10 0a10 	vmov	r0, s0
 80141ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80141be:	e7de      	b.n	801417e <cos+0x2e>
 80141c0:	f000 fa76 	bl	80146b0 <__kernel_cos>
 80141c4:	e7f5      	b.n	80141b2 <cos+0x62>
 80141c6:	bf00      	nop
	...
 80141d0:	3fe921fb 	.word	0x3fe921fb
 80141d4:	7fefffff 	.word	0x7fefffff

080141d8 <sin>:
 80141d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141da:	ec51 0b10 	vmov	r0, r1, d0
 80141de:	4a20      	ldr	r2, [pc, #128]	; (8014260 <sin+0x88>)
 80141e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141e4:	4293      	cmp	r3, r2
 80141e6:	dc07      	bgt.n	80141f8 <sin+0x20>
 80141e8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014258 <sin+0x80>
 80141ec:	2000      	movs	r0, #0
 80141ee:	f000 fe67 	bl	8014ec0 <__kernel_sin>
 80141f2:	ec51 0b10 	vmov	r0, r1, d0
 80141f6:	e007      	b.n	8014208 <sin+0x30>
 80141f8:	4a1a      	ldr	r2, [pc, #104]	; (8014264 <sin+0x8c>)
 80141fa:	4293      	cmp	r3, r2
 80141fc:	dd09      	ble.n	8014212 <sin+0x3a>
 80141fe:	ee10 2a10 	vmov	r2, s0
 8014202:	460b      	mov	r3, r1
 8014204:	f7ec f858 	bl	80002b8 <__aeabi_dsub>
 8014208:	ec41 0b10 	vmov	d0, r0, r1
 801420c:	b005      	add	sp, #20
 801420e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014212:	4668      	mov	r0, sp
 8014214:	f000 f858 	bl	80142c8 <__ieee754_rem_pio2>
 8014218:	f000 0003 	and.w	r0, r0, #3
 801421c:	2801      	cmp	r0, #1
 801421e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014222:	ed9d 0b00 	vldr	d0, [sp]
 8014226:	d004      	beq.n	8014232 <sin+0x5a>
 8014228:	2802      	cmp	r0, #2
 801422a:	d005      	beq.n	8014238 <sin+0x60>
 801422c:	b970      	cbnz	r0, 801424c <sin+0x74>
 801422e:	2001      	movs	r0, #1
 8014230:	e7dd      	b.n	80141ee <sin+0x16>
 8014232:	f000 fa3d 	bl	80146b0 <__kernel_cos>
 8014236:	e7dc      	b.n	80141f2 <sin+0x1a>
 8014238:	2001      	movs	r0, #1
 801423a:	f000 fe41 	bl	8014ec0 <__kernel_sin>
 801423e:	ec53 2b10 	vmov	r2, r3, d0
 8014242:	ee10 0a10 	vmov	r0, s0
 8014246:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801424a:	e7dd      	b.n	8014208 <sin+0x30>
 801424c:	f000 fa30 	bl	80146b0 <__kernel_cos>
 8014250:	e7f5      	b.n	801423e <sin+0x66>
 8014252:	bf00      	nop
 8014254:	f3af 8000 	nop.w
	...
 8014260:	3fe921fb 	.word	0x3fe921fb
 8014264:	7fefffff 	.word	0x7fefffff

08014268 <tan>:
 8014268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801426a:	ec51 0b10 	vmov	r0, r1, d0
 801426e:	4a14      	ldr	r2, [pc, #80]	; (80142c0 <tan+0x58>)
 8014270:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014274:	4293      	cmp	r3, r2
 8014276:	dc05      	bgt.n	8014284 <tan+0x1c>
 8014278:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80142b8 <tan+0x50>
 801427c:	2001      	movs	r0, #1
 801427e:	f000 fedb 	bl	8015038 <__kernel_tan>
 8014282:	e009      	b.n	8014298 <tan+0x30>
 8014284:	4a0f      	ldr	r2, [pc, #60]	; (80142c4 <tan+0x5c>)
 8014286:	4293      	cmp	r3, r2
 8014288:	dd09      	ble.n	801429e <tan+0x36>
 801428a:	ee10 2a10 	vmov	r2, s0
 801428e:	460b      	mov	r3, r1
 8014290:	f7ec f812 	bl	80002b8 <__aeabi_dsub>
 8014294:	ec41 0b10 	vmov	d0, r0, r1
 8014298:	b005      	add	sp, #20
 801429a:	f85d fb04 	ldr.w	pc, [sp], #4
 801429e:	4668      	mov	r0, sp
 80142a0:	f000 f812 	bl	80142c8 <__ieee754_rem_pio2>
 80142a4:	0040      	lsls	r0, r0, #1
 80142a6:	f000 0002 	and.w	r0, r0, #2
 80142aa:	f1c0 0001 	rsb	r0, r0, #1
 80142ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80142b2:	ed9d 0b00 	vldr	d0, [sp]
 80142b6:	e7e2      	b.n	801427e <tan+0x16>
	...
 80142c0:	3fe921fb 	.word	0x3fe921fb
 80142c4:	7fefffff 	.word	0x7fefffff

080142c8 <__ieee754_rem_pio2>:
 80142c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142cc:	ec57 6b10 	vmov	r6, r7, d0
 80142d0:	4bc3      	ldr	r3, [pc, #780]	; (80145e0 <__ieee754_rem_pio2+0x318>)
 80142d2:	b08d      	sub	sp, #52	; 0x34
 80142d4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80142d8:	4598      	cmp	r8, r3
 80142da:	4604      	mov	r4, r0
 80142dc:	9704      	str	r7, [sp, #16]
 80142de:	dc07      	bgt.n	80142f0 <__ieee754_rem_pio2+0x28>
 80142e0:	2200      	movs	r2, #0
 80142e2:	2300      	movs	r3, #0
 80142e4:	ed84 0b00 	vstr	d0, [r4]
 80142e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80142ec:	2500      	movs	r5, #0
 80142ee:	e027      	b.n	8014340 <__ieee754_rem_pio2+0x78>
 80142f0:	4bbc      	ldr	r3, [pc, #752]	; (80145e4 <__ieee754_rem_pio2+0x31c>)
 80142f2:	4598      	cmp	r8, r3
 80142f4:	dc75      	bgt.n	80143e2 <__ieee754_rem_pio2+0x11a>
 80142f6:	9b04      	ldr	r3, [sp, #16]
 80142f8:	4dbb      	ldr	r5, [pc, #748]	; (80145e8 <__ieee754_rem_pio2+0x320>)
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	ee10 0a10 	vmov	r0, s0
 8014300:	a3a9      	add	r3, pc, #676	; (adr r3, 80145a8 <__ieee754_rem_pio2+0x2e0>)
 8014302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014306:	4639      	mov	r1, r7
 8014308:	dd36      	ble.n	8014378 <__ieee754_rem_pio2+0xb0>
 801430a:	f7eb ffd5 	bl	80002b8 <__aeabi_dsub>
 801430e:	45a8      	cmp	r8, r5
 8014310:	4606      	mov	r6, r0
 8014312:	460f      	mov	r7, r1
 8014314:	d018      	beq.n	8014348 <__ieee754_rem_pio2+0x80>
 8014316:	a3a6      	add	r3, pc, #664	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 8014318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431c:	f7eb ffcc 	bl	80002b8 <__aeabi_dsub>
 8014320:	4602      	mov	r2, r0
 8014322:	460b      	mov	r3, r1
 8014324:	e9c4 2300 	strd	r2, r3, [r4]
 8014328:	4630      	mov	r0, r6
 801432a:	4639      	mov	r1, r7
 801432c:	f7eb ffc4 	bl	80002b8 <__aeabi_dsub>
 8014330:	a39f      	add	r3, pc, #636	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 8014332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014336:	f7eb ffbf 	bl	80002b8 <__aeabi_dsub>
 801433a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801433e:	2501      	movs	r5, #1
 8014340:	4628      	mov	r0, r5
 8014342:	b00d      	add	sp, #52	; 0x34
 8014344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014348:	a39b      	add	r3, pc, #620	; (adr r3, 80145b8 <__ieee754_rem_pio2+0x2f0>)
 801434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434e:	f7eb ffb3 	bl	80002b8 <__aeabi_dsub>
 8014352:	a39b      	add	r3, pc, #620	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 8014354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014358:	4606      	mov	r6, r0
 801435a:	460f      	mov	r7, r1
 801435c:	f7eb ffac 	bl	80002b8 <__aeabi_dsub>
 8014360:	4602      	mov	r2, r0
 8014362:	460b      	mov	r3, r1
 8014364:	e9c4 2300 	strd	r2, r3, [r4]
 8014368:	4630      	mov	r0, r6
 801436a:	4639      	mov	r1, r7
 801436c:	f7eb ffa4 	bl	80002b8 <__aeabi_dsub>
 8014370:	a393      	add	r3, pc, #588	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 8014372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014376:	e7de      	b.n	8014336 <__ieee754_rem_pio2+0x6e>
 8014378:	f7eb ffa0 	bl	80002bc <__adddf3>
 801437c:	45a8      	cmp	r8, r5
 801437e:	4606      	mov	r6, r0
 8014380:	460f      	mov	r7, r1
 8014382:	d016      	beq.n	80143b2 <__ieee754_rem_pio2+0xea>
 8014384:	a38a      	add	r3, pc, #552	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 8014386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801438a:	f7eb ff97 	bl	80002bc <__adddf3>
 801438e:	4602      	mov	r2, r0
 8014390:	460b      	mov	r3, r1
 8014392:	e9c4 2300 	strd	r2, r3, [r4]
 8014396:	4630      	mov	r0, r6
 8014398:	4639      	mov	r1, r7
 801439a:	f7eb ff8d 	bl	80002b8 <__aeabi_dsub>
 801439e:	a384      	add	r3, pc, #528	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 80143a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a4:	f7eb ff8a 	bl	80002bc <__adddf3>
 80143a8:	f04f 35ff 	mov.w	r5, #4294967295
 80143ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80143b0:	e7c6      	b.n	8014340 <__ieee754_rem_pio2+0x78>
 80143b2:	a381      	add	r3, pc, #516	; (adr r3, 80145b8 <__ieee754_rem_pio2+0x2f0>)
 80143b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b8:	f7eb ff80 	bl	80002bc <__adddf3>
 80143bc:	a380      	add	r3, pc, #512	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 80143be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c2:	4606      	mov	r6, r0
 80143c4:	460f      	mov	r7, r1
 80143c6:	f7eb ff79 	bl	80002bc <__adddf3>
 80143ca:	4602      	mov	r2, r0
 80143cc:	460b      	mov	r3, r1
 80143ce:	e9c4 2300 	strd	r2, r3, [r4]
 80143d2:	4630      	mov	r0, r6
 80143d4:	4639      	mov	r1, r7
 80143d6:	f7eb ff6f 	bl	80002b8 <__aeabi_dsub>
 80143da:	a379      	add	r3, pc, #484	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 80143dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e0:	e7e0      	b.n	80143a4 <__ieee754_rem_pio2+0xdc>
 80143e2:	4b82      	ldr	r3, [pc, #520]	; (80145ec <__ieee754_rem_pio2+0x324>)
 80143e4:	4598      	cmp	r8, r3
 80143e6:	f300 80d0 	bgt.w	801458a <__ieee754_rem_pio2+0x2c2>
 80143ea:	f000 fff1 	bl	80153d0 <fabs>
 80143ee:	ec57 6b10 	vmov	r6, r7, d0
 80143f2:	ee10 0a10 	vmov	r0, s0
 80143f6:	a374      	add	r3, pc, #464	; (adr r3, 80145c8 <__ieee754_rem_pio2+0x300>)
 80143f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fc:	4639      	mov	r1, r7
 80143fe:	f7ec f913 	bl	8000628 <__aeabi_dmul>
 8014402:	2200      	movs	r2, #0
 8014404:	4b7a      	ldr	r3, [pc, #488]	; (80145f0 <__ieee754_rem_pio2+0x328>)
 8014406:	f7eb ff59 	bl	80002bc <__adddf3>
 801440a:	f7ec fbbd 	bl	8000b88 <__aeabi_d2iz>
 801440e:	4605      	mov	r5, r0
 8014410:	f7ec f8a0 	bl	8000554 <__aeabi_i2d>
 8014414:	a364      	add	r3, pc, #400	; (adr r3, 80145a8 <__ieee754_rem_pio2+0x2e0>)
 8014416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801441e:	f7ec f903 	bl	8000628 <__aeabi_dmul>
 8014422:	4602      	mov	r2, r0
 8014424:	460b      	mov	r3, r1
 8014426:	4630      	mov	r0, r6
 8014428:	4639      	mov	r1, r7
 801442a:	f7eb ff45 	bl	80002b8 <__aeabi_dsub>
 801442e:	a360      	add	r3, pc, #384	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 8014430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014434:	4682      	mov	sl, r0
 8014436:	468b      	mov	fp, r1
 8014438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801443c:	f7ec f8f4 	bl	8000628 <__aeabi_dmul>
 8014440:	2d1f      	cmp	r5, #31
 8014442:	4606      	mov	r6, r0
 8014444:	460f      	mov	r7, r1
 8014446:	dc0c      	bgt.n	8014462 <__ieee754_rem_pio2+0x19a>
 8014448:	1e6a      	subs	r2, r5, #1
 801444a:	4b6a      	ldr	r3, [pc, #424]	; (80145f4 <__ieee754_rem_pio2+0x32c>)
 801444c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014450:	4543      	cmp	r3, r8
 8014452:	d006      	beq.n	8014462 <__ieee754_rem_pio2+0x19a>
 8014454:	4632      	mov	r2, r6
 8014456:	463b      	mov	r3, r7
 8014458:	4650      	mov	r0, sl
 801445a:	4659      	mov	r1, fp
 801445c:	f7eb ff2c 	bl	80002b8 <__aeabi_dsub>
 8014460:	e00e      	b.n	8014480 <__ieee754_rem_pio2+0x1b8>
 8014462:	4632      	mov	r2, r6
 8014464:	463b      	mov	r3, r7
 8014466:	4650      	mov	r0, sl
 8014468:	4659      	mov	r1, fp
 801446a:	f7eb ff25 	bl	80002b8 <__aeabi_dsub>
 801446e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014472:	9305      	str	r3, [sp, #20]
 8014474:	9a05      	ldr	r2, [sp, #20]
 8014476:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801447a:	1ad3      	subs	r3, r2, r3
 801447c:	2b10      	cmp	r3, #16
 801447e:	dc02      	bgt.n	8014486 <__ieee754_rem_pio2+0x1be>
 8014480:	e9c4 0100 	strd	r0, r1, [r4]
 8014484:	e039      	b.n	80144fa <__ieee754_rem_pio2+0x232>
 8014486:	a34c      	add	r3, pc, #304	; (adr r3, 80145b8 <__ieee754_rem_pio2+0x2f0>)
 8014488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014490:	f7ec f8ca 	bl	8000628 <__aeabi_dmul>
 8014494:	4606      	mov	r6, r0
 8014496:	460f      	mov	r7, r1
 8014498:	4602      	mov	r2, r0
 801449a:	460b      	mov	r3, r1
 801449c:	4650      	mov	r0, sl
 801449e:	4659      	mov	r1, fp
 80144a0:	f7eb ff0a 	bl	80002b8 <__aeabi_dsub>
 80144a4:	4602      	mov	r2, r0
 80144a6:	460b      	mov	r3, r1
 80144a8:	4680      	mov	r8, r0
 80144aa:	4689      	mov	r9, r1
 80144ac:	4650      	mov	r0, sl
 80144ae:	4659      	mov	r1, fp
 80144b0:	f7eb ff02 	bl	80002b8 <__aeabi_dsub>
 80144b4:	4632      	mov	r2, r6
 80144b6:	463b      	mov	r3, r7
 80144b8:	f7eb fefe 	bl	80002b8 <__aeabi_dsub>
 80144bc:	a340      	add	r3, pc, #256	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 80144be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c2:	4606      	mov	r6, r0
 80144c4:	460f      	mov	r7, r1
 80144c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144ca:	f7ec f8ad 	bl	8000628 <__aeabi_dmul>
 80144ce:	4632      	mov	r2, r6
 80144d0:	463b      	mov	r3, r7
 80144d2:	f7eb fef1 	bl	80002b8 <__aeabi_dsub>
 80144d6:	4602      	mov	r2, r0
 80144d8:	460b      	mov	r3, r1
 80144da:	4606      	mov	r6, r0
 80144dc:	460f      	mov	r7, r1
 80144de:	4640      	mov	r0, r8
 80144e0:	4649      	mov	r1, r9
 80144e2:	f7eb fee9 	bl	80002b8 <__aeabi_dsub>
 80144e6:	9a05      	ldr	r2, [sp, #20]
 80144e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80144ec:	1ad3      	subs	r3, r2, r3
 80144ee:	2b31      	cmp	r3, #49	; 0x31
 80144f0:	dc20      	bgt.n	8014534 <__ieee754_rem_pio2+0x26c>
 80144f2:	e9c4 0100 	strd	r0, r1, [r4]
 80144f6:	46c2      	mov	sl, r8
 80144f8:	46cb      	mov	fp, r9
 80144fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80144fe:	4650      	mov	r0, sl
 8014500:	4642      	mov	r2, r8
 8014502:	464b      	mov	r3, r9
 8014504:	4659      	mov	r1, fp
 8014506:	f7eb fed7 	bl	80002b8 <__aeabi_dsub>
 801450a:	463b      	mov	r3, r7
 801450c:	4632      	mov	r2, r6
 801450e:	f7eb fed3 	bl	80002b8 <__aeabi_dsub>
 8014512:	9b04      	ldr	r3, [sp, #16]
 8014514:	2b00      	cmp	r3, #0
 8014516:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801451a:	f6bf af11 	bge.w	8014340 <__ieee754_rem_pio2+0x78>
 801451e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014522:	6063      	str	r3, [r4, #4]
 8014524:	f8c4 8000 	str.w	r8, [r4]
 8014528:	60a0      	str	r0, [r4, #8]
 801452a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801452e:	60e3      	str	r3, [r4, #12]
 8014530:	426d      	negs	r5, r5
 8014532:	e705      	b.n	8014340 <__ieee754_rem_pio2+0x78>
 8014534:	a326      	add	r3, pc, #152	; (adr r3, 80145d0 <__ieee754_rem_pio2+0x308>)
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801453e:	f7ec f873 	bl	8000628 <__aeabi_dmul>
 8014542:	4606      	mov	r6, r0
 8014544:	460f      	mov	r7, r1
 8014546:	4602      	mov	r2, r0
 8014548:	460b      	mov	r3, r1
 801454a:	4640      	mov	r0, r8
 801454c:	4649      	mov	r1, r9
 801454e:	f7eb feb3 	bl	80002b8 <__aeabi_dsub>
 8014552:	4602      	mov	r2, r0
 8014554:	460b      	mov	r3, r1
 8014556:	4682      	mov	sl, r0
 8014558:	468b      	mov	fp, r1
 801455a:	4640      	mov	r0, r8
 801455c:	4649      	mov	r1, r9
 801455e:	f7eb feab 	bl	80002b8 <__aeabi_dsub>
 8014562:	4632      	mov	r2, r6
 8014564:	463b      	mov	r3, r7
 8014566:	f7eb fea7 	bl	80002b8 <__aeabi_dsub>
 801456a:	a31b      	add	r3, pc, #108	; (adr r3, 80145d8 <__ieee754_rem_pio2+0x310>)
 801456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014570:	4606      	mov	r6, r0
 8014572:	460f      	mov	r7, r1
 8014574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014578:	f7ec f856 	bl	8000628 <__aeabi_dmul>
 801457c:	4632      	mov	r2, r6
 801457e:	463b      	mov	r3, r7
 8014580:	f7eb fe9a 	bl	80002b8 <__aeabi_dsub>
 8014584:	4606      	mov	r6, r0
 8014586:	460f      	mov	r7, r1
 8014588:	e764      	b.n	8014454 <__ieee754_rem_pio2+0x18c>
 801458a:	4b1b      	ldr	r3, [pc, #108]	; (80145f8 <__ieee754_rem_pio2+0x330>)
 801458c:	4598      	cmp	r8, r3
 801458e:	dd35      	ble.n	80145fc <__ieee754_rem_pio2+0x334>
 8014590:	ee10 2a10 	vmov	r2, s0
 8014594:	463b      	mov	r3, r7
 8014596:	4630      	mov	r0, r6
 8014598:	4639      	mov	r1, r7
 801459a:	f7eb fe8d 	bl	80002b8 <__aeabi_dsub>
 801459e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80145a2:	e9c4 0100 	strd	r0, r1, [r4]
 80145a6:	e6a1      	b.n	80142ec <__ieee754_rem_pio2+0x24>
 80145a8:	54400000 	.word	0x54400000
 80145ac:	3ff921fb 	.word	0x3ff921fb
 80145b0:	1a626331 	.word	0x1a626331
 80145b4:	3dd0b461 	.word	0x3dd0b461
 80145b8:	1a600000 	.word	0x1a600000
 80145bc:	3dd0b461 	.word	0x3dd0b461
 80145c0:	2e037073 	.word	0x2e037073
 80145c4:	3ba3198a 	.word	0x3ba3198a
 80145c8:	6dc9c883 	.word	0x6dc9c883
 80145cc:	3fe45f30 	.word	0x3fe45f30
 80145d0:	2e000000 	.word	0x2e000000
 80145d4:	3ba3198a 	.word	0x3ba3198a
 80145d8:	252049c1 	.word	0x252049c1
 80145dc:	397b839a 	.word	0x397b839a
 80145e0:	3fe921fb 	.word	0x3fe921fb
 80145e4:	4002d97b 	.word	0x4002d97b
 80145e8:	3ff921fb 	.word	0x3ff921fb
 80145ec:	413921fb 	.word	0x413921fb
 80145f0:	3fe00000 	.word	0x3fe00000
 80145f4:	0801a0e4 	.word	0x0801a0e4
 80145f8:	7fefffff 	.word	0x7fefffff
 80145fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014600:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014604:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014608:	4630      	mov	r0, r6
 801460a:	460f      	mov	r7, r1
 801460c:	f7ec fabc 	bl	8000b88 <__aeabi_d2iz>
 8014610:	f7eb ffa0 	bl	8000554 <__aeabi_i2d>
 8014614:	4602      	mov	r2, r0
 8014616:	460b      	mov	r3, r1
 8014618:	4630      	mov	r0, r6
 801461a:	4639      	mov	r1, r7
 801461c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014620:	f7eb fe4a 	bl	80002b8 <__aeabi_dsub>
 8014624:	2200      	movs	r2, #0
 8014626:	4b1f      	ldr	r3, [pc, #124]	; (80146a4 <__ieee754_rem_pio2+0x3dc>)
 8014628:	f7eb fffe 	bl	8000628 <__aeabi_dmul>
 801462c:	460f      	mov	r7, r1
 801462e:	4606      	mov	r6, r0
 8014630:	f7ec faaa 	bl	8000b88 <__aeabi_d2iz>
 8014634:	f7eb ff8e 	bl	8000554 <__aeabi_i2d>
 8014638:	4602      	mov	r2, r0
 801463a:	460b      	mov	r3, r1
 801463c:	4630      	mov	r0, r6
 801463e:	4639      	mov	r1, r7
 8014640:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014644:	f7eb fe38 	bl	80002b8 <__aeabi_dsub>
 8014648:	2200      	movs	r2, #0
 801464a:	4b16      	ldr	r3, [pc, #88]	; (80146a4 <__ieee754_rem_pio2+0x3dc>)
 801464c:	f7eb ffec 	bl	8000628 <__aeabi_dmul>
 8014650:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014654:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014658:	f04f 0803 	mov.w	r8, #3
 801465c:	2600      	movs	r6, #0
 801465e:	2700      	movs	r7, #0
 8014660:	4632      	mov	r2, r6
 8014662:	463b      	mov	r3, r7
 8014664:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014668:	f108 3aff 	add.w	sl, r8, #4294967295
 801466c:	f7ec fa44 	bl	8000af8 <__aeabi_dcmpeq>
 8014670:	b9b0      	cbnz	r0, 80146a0 <__ieee754_rem_pio2+0x3d8>
 8014672:	4b0d      	ldr	r3, [pc, #52]	; (80146a8 <__ieee754_rem_pio2+0x3e0>)
 8014674:	9301      	str	r3, [sp, #4]
 8014676:	2302      	movs	r3, #2
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	462a      	mov	r2, r5
 801467c:	4643      	mov	r3, r8
 801467e:	4621      	mov	r1, r4
 8014680:	a806      	add	r0, sp, #24
 8014682:	f000 f8dd 	bl	8014840 <__kernel_rem_pio2>
 8014686:	9b04      	ldr	r3, [sp, #16]
 8014688:	2b00      	cmp	r3, #0
 801468a:	4605      	mov	r5, r0
 801468c:	f6bf ae58 	bge.w	8014340 <__ieee754_rem_pio2+0x78>
 8014690:	6863      	ldr	r3, [r4, #4]
 8014692:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014696:	6063      	str	r3, [r4, #4]
 8014698:	68e3      	ldr	r3, [r4, #12]
 801469a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801469e:	e746      	b.n	801452e <__ieee754_rem_pio2+0x266>
 80146a0:	46d0      	mov	r8, sl
 80146a2:	e7dd      	b.n	8014660 <__ieee754_rem_pio2+0x398>
 80146a4:	41700000 	.word	0x41700000
 80146a8:	0801a164 	.word	0x0801a164
 80146ac:	00000000 	.word	0x00000000

080146b0 <__kernel_cos>:
 80146b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b4:	ec59 8b10 	vmov	r8, r9, d0
 80146b8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80146bc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80146c0:	ed2d 8b02 	vpush	{d8}
 80146c4:	eeb0 8a41 	vmov.f32	s16, s2
 80146c8:	eef0 8a61 	vmov.f32	s17, s3
 80146cc:	da07      	bge.n	80146de <__kernel_cos+0x2e>
 80146ce:	ee10 0a10 	vmov	r0, s0
 80146d2:	4649      	mov	r1, r9
 80146d4:	f7ec fa58 	bl	8000b88 <__aeabi_d2iz>
 80146d8:	2800      	cmp	r0, #0
 80146da:	f000 8089 	beq.w	80147f0 <__kernel_cos+0x140>
 80146de:	4642      	mov	r2, r8
 80146e0:	464b      	mov	r3, r9
 80146e2:	4640      	mov	r0, r8
 80146e4:	4649      	mov	r1, r9
 80146e6:	f7eb ff9f 	bl	8000628 <__aeabi_dmul>
 80146ea:	2200      	movs	r2, #0
 80146ec:	4b4e      	ldr	r3, [pc, #312]	; (8014828 <__kernel_cos+0x178>)
 80146ee:	4604      	mov	r4, r0
 80146f0:	460d      	mov	r5, r1
 80146f2:	f7eb ff99 	bl	8000628 <__aeabi_dmul>
 80146f6:	a340      	add	r3, pc, #256	; (adr r3, 80147f8 <__kernel_cos+0x148>)
 80146f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fc:	4682      	mov	sl, r0
 80146fe:	468b      	mov	fp, r1
 8014700:	4620      	mov	r0, r4
 8014702:	4629      	mov	r1, r5
 8014704:	f7eb ff90 	bl	8000628 <__aeabi_dmul>
 8014708:	a33d      	add	r3, pc, #244	; (adr r3, 8014800 <__kernel_cos+0x150>)
 801470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470e:	f7eb fdd5 	bl	80002bc <__adddf3>
 8014712:	4622      	mov	r2, r4
 8014714:	462b      	mov	r3, r5
 8014716:	f7eb ff87 	bl	8000628 <__aeabi_dmul>
 801471a:	a33b      	add	r3, pc, #236	; (adr r3, 8014808 <__kernel_cos+0x158>)
 801471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014720:	f7eb fdca 	bl	80002b8 <__aeabi_dsub>
 8014724:	4622      	mov	r2, r4
 8014726:	462b      	mov	r3, r5
 8014728:	f7eb ff7e 	bl	8000628 <__aeabi_dmul>
 801472c:	a338      	add	r3, pc, #224	; (adr r3, 8014810 <__kernel_cos+0x160>)
 801472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014732:	f7eb fdc3 	bl	80002bc <__adddf3>
 8014736:	4622      	mov	r2, r4
 8014738:	462b      	mov	r3, r5
 801473a:	f7eb ff75 	bl	8000628 <__aeabi_dmul>
 801473e:	a336      	add	r3, pc, #216	; (adr r3, 8014818 <__kernel_cos+0x168>)
 8014740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014744:	f7eb fdb8 	bl	80002b8 <__aeabi_dsub>
 8014748:	4622      	mov	r2, r4
 801474a:	462b      	mov	r3, r5
 801474c:	f7eb ff6c 	bl	8000628 <__aeabi_dmul>
 8014750:	a333      	add	r3, pc, #204	; (adr r3, 8014820 <__kernel_cos+0x170>)
 8014752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014756:	f7eb fdb1 	bl	80002bc <__adddf3>
 801475a:	4622      	mov	r2, r4
 801475c:	462b      	mov	r3, r5
 801475e:	f7eb ff63 	bl	8000628 <__aeabi_dmul>
 8014762:	4622      	mov	r2, r4
 8014764:	462b      	mov	r3, r5
 8014766:	f7eb ff5f 	bl	8000628 <__aeabi_dmul>
 801476a:	ec53 2b18 	vmov	r2, r3, d8
 801476e:	4604      	mov	r4, r0
 8014770:	460d      	mov	r5, r1
 8014772:	4640      	mov	r0, r8
 8014774:	4649      	mov	r1, r9
 8014776:	f7eb ff57 	bl	8000628 <__aeabi_dmul>
 801477a:	460b      	mov	r3, r1
 801477c:	4602      	mov	r2, r0
 801477e:	4629      	mov	r1, r5
 8014780:	4620      	mov	r0, r4
 8014782:	f7eb fd99 	bl	80002b8 <__aeabi_dsub>
 8014786:	4b29      	ldr	r3, [pc, #164]	; (801482c <__kernel_cos+0x17c>)
 8014788:	429e      	cmp	r6, r3
 801478a:	4680      	mov	r8, r0
 801478c:	4689      	mov	r9, r1
 801478e:	dc11      	bgt.n	80147b4 <__kernel_cos+0x104>
 8014790:	4602      	mov	r2, r0
 8014792:	460b      	mov	r3, r1
 8014794:	4650      	mov	r0, sl
 8014796:	4659      	mov	r1, fp
 8014798:	f7eb fd8e 	bl	80002b8 <__aeabi_dsub>
 801479c:	460b      	mov	r3, r1
 801479e:	4924      	ldr	r1, [pc, #144]	; (8014830 <__kernel_cos+0x180>)
 80147a0:	4602      	mov	r2, r0
 80147a2:	2000      	movs	r0, #0
 80147a4:	f7eb fd88 	bl	80002b8 <__aeabi_dsub>
 80147a8:	ecbd 8b02 	vpop	{d8}
 80147ac:	ec41 0b10 	vmov	d0, r0, r1
 80147b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b4:	4b1f      	ldr	r3, [pc, #124]	; (8014834 <__kernel_cos+0x184>)
 80147b6:	491e      	ldr	r1, [pc, #120]	; (8014830 <__kernel_cos+0x180>)
 80147b8:	429e      	cmp	r6, r3
 80147ba:	bfcc      	ite	gt
 80147bc:	4d1e      	ldrgt	r5, [pc, #120]	; (8014838 <__kernel_cos+0x188>)
 80147be:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80147c2:	2400      	movs	r4, #0
 80147c4:	4622      	mov	r2, r4
 80147c6:	462b      	mov	r3, r5
 80147c8:	2000      	movs	r0, #0
 80147ca:	f7eb fd75 	bl	80002b8 <__aeabi_dsub>
 80147ce:	4622      	mov	r2, r4
 80147d0:	4606      	mov	r6, r0
 80147d2:	460f      	mov	r7, r1
 80147d4:	462b      	mov	r3, r5
 80147d6:	4650      	mov	r0, sl
 80147d8:	4659      	mov	r1, fp
 80147da:	f7eb fd6d 	bl	80002b8 <__aeabi_dsub>
 80147de:	4642      	mov	r2, r8
 80147e0:	464b      	mov	r3, r9
 80147e2:	f7eb fd69 	bl	80002b8 <__aeabi_dsub>
 80147e6:	4602      	mov	r2, r0
 80147e8:	460b      	mov	r3, r1
 80147ea:	4630      	mov	r0, r6
 80147ec:	4639      	mov	r1, r7
 80147ee:	e7d9      	b.n	80147a4 <__kernel_cos+0xf4>
 80147f0:	2000      	movs	r0, #0
 80147f2:	490f      	ldr	r1, [pc, #60]	; (8014830 <__kernel_cos+0x180>)
 80147f4:	e7d8      	b.n	80147a8 <__kernel_cos+0xf8>
 80147f6:	bf00      	nop
 80147f8:	be8838d4 	.word	0xbe8838d4
 80147fc:	bda8fae9 	.word	0xbda8fae9
 8014800:	bdb4b1c4 	.word	0xbdb4b1c4
 8014804:	3e21ee9e 	.word	0x3e21ee9e
 8014808:	809c52ad 	.word	0x809c52ad
 801480c:	3e927e4f 	.word	0x3e927e4f
 8014810:	19cb1590 	.word	0x19cb1590
 8014814:	3efa01a0 	.word	0x3efa01a0
 8014818:	16c15177 	.word	0x16c15177
 801481c:	3f56c16c 	.word	0x3f56c16c
 8014820:	5555554c 	.word	0x5555554c
 8014824:	3fa55555 	.word	0x3fa55555
 8014828:	3fe00000 	.word	0x3fe00000
 801482c:	3fd33332 	.word	0x3fd33332
 8014830:	3ff00000 	.word	0x3ff00000
 8014834:	3fe90000 	.word	0x3fe90000
 8014838:	3fd20000 	.word	0x3fd20000
 801483c:	00000000 	.word	0x00000000

08014840 <__kernel_rem_pio2>:
 8014840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014844:	ed2d 8b02 	vpush	{d8}
 8014848:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801484c:	1ed4      	subs	r4, r2, #3
 801484e:	9308      	str	r3, [sp, #32]
 8014850:	9101      	str	r1, [sp, #4]
 8014852:	4bc5      	ldr	r3, [pc, #788]	; (8014b68 <__kernel_rem_pio2+0x328>)
 8014854:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014856:	9009      	str	r0, [sp, #36]	; 0x24
 8014858:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801485c:	9304      	str	r3, [sp, #16]
 801485e:	9b08      	ldr	r3, [sp, #32]
 8014860:	3b01      	subs	r3, #1
 8014862:	9307      	str	r3, [sp, #28]
 8014864:	2318      	movs	r3, #24
 8014866:	fb94 f4f3 	sdiv	r4, r4, r3
 801486a:	f06f 0317 	mvn.w	r3, #23
 801486e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014872:	fb04 3303 	mla	r3, r4, r3, r3
 8014876:	eb03 0a02 	add.w	sl, r3, r2
 801487a:	9b04      	ldr	r3, [sp, #16]
 801487c:	9a07      	ldr	r2, [sp, #28]
 801487e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014b58 <__kernel_rem_pio2+0x318>
 8014882:	eb03 0802 	add.w	r8, r3, r2
 8014886:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014888:	1aa7      	subs	r7, r4, r2
 801488a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801488e:	ae22      	add	r6, sp, #136	; 0x88
 8014890:	2500      	movs	r5, #0
 8014892:	4545      	cmp	r5, r8
 8014894:	dd13      	ble.n	80148be <__kernel_rem_pio2+0x7e>
 8014896:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014b58 <__kernel_rem_pio2+0x318>
 801489a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801489e:	2600      	movs	r6, #0
 80148a0:	9b04      	ldr	r3, [sp, #16]
 80148a2:	429e      	cmp	r6, r3
 80148a4:	dc32      	bgt.n	801490c <__kernel_rem_pio2+0xcc>
 80148a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148a8:	9302      	str	r3, [sp, #8]
 80148aa:	9b08      	ldr	r3, [sp, #32]
 80148ac:	199d      	adds	r5, r3, r6
 80148ae:	ab22      	add	r3, sp, #136	; 0x88
 80148b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80148b4:	9306      	str	r3, [sp, #24]
 80148b6:	ec59 8b18 	vmov	r8, r9, d8
 80148ba:	2700      	movs	r7, #0
 80148bc:	e01f      	b.n	80148fe <__kernel_rem_pio2+0xbe>
 80148be:	42ef      	cmn	r7, r5
 80148c0:	d407      	bmi.n	80148d2 <__kernel_rem_pio2+0x92>
 80148c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80148c6:	f7eb fe45 	bl	8000554 <__aeabi_i2d>
 80148ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80148ce:	3501      	adds	r5, #1
 80148d0:	e7df      	b.n	8014892 <__kernel_rem_pio2+0x52>
 80148d2:	ec51 0b18 	vmov	r0, r1, d8
 80148d6:	e7f8      	b.n	80148ca <__kernel_rem_pio2+0x8a>
 80148d8:	9906      	ldr	r1, [sp, #24]
 80148da:	9d02      	ldr	r5, [sp, #8]
 80148dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80148e0:	9106      	str	r1, [sp, #24]
 80148e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80148e6:	9502      	str	r5, [sp, #8]
 80148e8:	f7eb fe9e 	bl	8000628 <__aeabi_dmul>
 80148ec:	4602      	mov	r2, r0
 80148ee:	460b      	mov	r3, r1
 80148f0:	4640      	mov	r0, r8
 80148f2:	4649      	mov	r1, r9
 80148f4:	f7eb fce2 	bl	80002bc <__adddf3>
 80148f8:	3701      	adds	r7, #1
 80148fa:	4680      	mov	r8, r0
 80148fc:	4689      	mov	r9, r1
 80148fe:	9b07      	ldr	r3, [sp, #28]
 8014900:	429f      	cmp	r7, r3
 8014902:	dde9      	ble.n	80148d8 <__kernel_rem_pio2+0x98>
 8014904:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014908:	3601      	adds	r6, #1
 801490a:	e7c9      	b.n	80148a0 <__kernel_rem_pio2+0x60>
 801490c:	9b04      	ldr	r3, [sp, #16]
 801490e:	aa0e      	add	r2, sp, #56	; 0x38
 8014910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014914:	930c      	str	r3, [sp, #48]	; 0x30
 8014916:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014918:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801491c:	9c04      	ldr	r4, [sp, #16]
 801491e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014920:	ab9a      	add	r3, sp, #616	; 0x268
 8014922:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014926:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801492a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801492e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014932:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014936:	ab9a      	add	r3, sp, #616	; 0x268
 8014938:	445b      	add	r3, fp
 801493a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801493e:	2500      	movs	r5, #0
 8014940:	1b63      	subs	r3, r4, r5
 8014942:	2b00      	cmp	r3, #0
 8014944:	dc78      	bgt.n	8014a38 <__kernel_rem_pio2+0x1f8>
 8014946:	4650      	mov	r0, sl
 8014948:	ec49 8b10 	vmov	d0, r8, r9
 801494c:	f000 fdd0 	bl	80154f0 <scalbn>
 8014950:	ec57 6b10 	vmov	r6, r7, d0
 8014954:	2200      	movs	r2, #0
 8014956:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801495a:	ee10 0a10 	vmov	r0, s0
 801495e:	4639      	mov	r1, r7
 8014960:	f7eb fe62 	bl	8000628 <__aeabi_dmul>
 8014964:	ec41 0b10 	vmov	d0, r0, r1
 8014968:	f000 fd3e 	bl	80153e8 <floor>
 801496c:	2200      	movs	r2, #0
 801496e:	ec51 0b10 	vmov	r0, r1, d0
 8014972:	4b7e      	ldr	r3, [pc, #504]	; (8014b6c <__kernel_rem_pio2+0x32c>)
 8014974:	f7eb fe58 	bl	8000628 <__aeabi_dmul>
 8014978:	4602      	mov	r2, r0
 801497a:	460b      	mov	r3, r1
 801497c:	4630      	mov	r0, r6
 801497e:	4639      	mov	r1, r7
 8014980:	f7eb fc9a 	bl	80002b8 <__aeabi_dsub>
 8014984:	460f      	mov	r7, r1
 8014986:	4606      	mov	r6, r0
 8014988:	f7ec f8fe 	bl	8000b88 <__aeabi_d2iz>
 801498c:	9006      	str	r0, [sp, #24]
 801498e:	f7eb fde1 	bl	8000554 <__aeabi_i2d>
 8014992:	4602      	mov	r2, r0
 8014994:	460b      	mov	r3, r1
 8014996:	4630      	mov	r0, r6
 8014998:	4639      	mov	r1, r7
 801499a:	f7eb fc8d 	bl	80002b8 <__aeabi_dsub>
 801499e:	f1ba 0f00 	cmp.w	sl, #0
 80149a2:	4606      	mov	r6, r0
 80149a4:	460f      	mov	r7, r1
 80149a6:	dd6c      	ble.n	8014a82 <__kernel_rem_pio2+0x242>
 80149a8:	1e62      	subs	r2, r4, #1
 80149aa:	ab0e      	add	r3, sp, #56	; 0x38
 80149ac:	f1ca 0118 	rsb	r1, sl, #24
 80149b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80149b4:	9d06      	ldr	r5, [sp, #24]
 80149b6:	fa40 f301 	asr.w	r3, r0, r1
 80149ba:	441d      	add	r5, r3
 80149bc:	408b      	lsls	r3, r1
 80149be:	1ac0      	subs	r0, r0, r3
 80149c0:	ab0e      	add	r3, sp, #56	; 0x38
 80149c2:	9506      	str	r5, [sp, #24]
 80149c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80149c8:	f1ca 0317 	rsb	r3, sl, #23
 80149cc:	fa40 f303 	asr.w	r3, r0, r3
 80149d0:	9302      	str	r3, [sp, #8]
 80149d2:	9b02      	ldr	r3, [sp, #8]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	dd62      	ble.n	8014a9e <__kernel_rem_pio2+0x25e>
 80149d8:	9b06      	ldr	r3, [sp, #24]
 80149da:	2200      	movs	r2, #0
 80149dc:	3301      	adds	r3, #1
 80149de:	9306      	str	r3, [sp, #24]
 80149e0:	4615      	mov	r5, r2
 80149e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80149e6:	4294      	cmp	r4, r2
 80149e8:	f300 8095 	bgt.w	8014b16 <__kernel_rem_pio2+0x2d6>
 80149ec:	f1ba 0f00 	cmp.w	sl, #0
 80149f0:	dd07      	ble.n	8014a02 <__kernel_rem_pio2+0x1c2>
 80149f2:	f1ba 0f01 	cmp.w	sl, #1
 80149f6:	f000 80a2 	beq.w	8014b3e <__kernel_rem_pio2+0x2fe>
 80149fa:	f1ba 0f02 	cmp.w	sl, #2
 80149fe:	f000 80c1 	beq.w	8014b84 <__kernel_rem_pio2+0x344>
 8014a02:	9b02      	ldr	r3, [sp, #8]
 8014a04:	2b02      	cmp	r3, #2
 8014a06:	d14a      	bne.n	8014a9e <__kernel_rem_pio2+0x25e>
 8014a08:	4632      	mov	r2, r6
 8014a0a:	463b      	mov	r3, r7
 8014a0c:	2000      	movs	r0, #0
 8014a0e:	4958      	ldr	r1, [pc, #352]	; (8014b70 <__kernel_rem_pio2+0x330>)
 8014a10:	f7eb fc52 	bl	80002b8 <__aeabi_dsub>
 8014a14:	4606      	mov	r6, r0
 8014a16:	460f      	mov	r7, r1
 8014a18:	2d00      	cmp	r5, #0
 8014a1a:	d040      	beq.n	8014a9e <__kernel_rem_pio2+0x25e>
 8014a1c:	4650      	mov	r0, sl
 8014a1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014b60 <__kernel_rem_pio2+0x320>
 8014a22:	f000 fd65 	bl	80154f0 <scalbn>
 8014a26:	4630      	mov	r0, r6
 8014a28:	4639      	mov	r1, r7
 8014a2a:	ec53 2b10 	vmov	r2, r3, d0
 8014a2e:	f7eb fc43 	bl	80002b8 <__aeabi_dsub>
 8014a32:	4606      	mov	r6, r0
 8014a34:	460f      	mov	r7, r1
 8014a36:	e032      	b.n	8014a9e <__kernel_rem_pio2+0x25e>
 8014a38:	2200      	movs	r2, #0
 8014a3a:	4b4e      	ldr	r3, [pc, #312]	; (8014b74 <__kernel_rem_pio2+0x334>)
 8014a3c:	4640      	mov	r0, r8
 8014a3e:	4649      	mov	r1, r9
 8014a40:	f7eb fdf2 	bl	8000628 <__aeabi_dmul>
 8014a44:	f7ec f8a0 	bl	8000b88 <__aeabi_d2iz>
 8014a48:	f7eb fd84 	bl	8000554 <__aeabi_i2d>
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	4b4a      	ldr	r3, [pc, #296]	; (8014b78 <__kernel_rem_pio2+0x338>)
 8014a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a54:	f7eb fde8 	bl	8000628 <__aeabi_dmul>
 8014a58:	4602      	mov	r2, r0
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	4640      	mov	r0, r8
 8014a5e:	4649      	mov	r1, r9
 8014a60:	f7eb fc2a 	bl	80002b8 <__aeabi_dsub>
 8014a64:	f7ec f890 	bl	8000b88 <__aeabi_d2iz>
 8014a68:	ab0e      	add	r3, sp, #56	; 0x38
 8014a6a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014a6e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a76:	f7eb fc21 	bl	80002bc <__adddf3>
 8014a7a:	3501      	adds	r5, #1
 8014a7c:	4680      	mov	r8, r0
 8014a7e:	4689      	mov	r9, r1
 8014a80:	e75e      	b.n	8014940 <__kernel_rem_pio2+0x100>
 8014a82:	d105      	bne.n	8014a90 <__kernel_rem_pio2+0x250>
 8014a84:	1e63      	subs	r3, r4, #1
 8014a86:	aa0e      	add	r2, sp, #56	; 0x38
 8014a88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014a8c:	15c3      	asrs	r3, r0, #23
 8014a8e:	e79f      	b.n	80149d0 <__kernel_rem_pio2+0x190>
 8014a90:	2200      	movs	r2, #0
 8014a92:	4b3a      	ldr	r3, [pc, #232]	; (8014b7c <__kernel_rem_pio2+0x33c>)
 8014a94:	f7ec f84e 	bl	8000b34 <__aeabi_dcmpge>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d139      	bne.n	8014b10 <__kernel_rem_pio2+0x2d0>
 8014a9c:	9002      	str	r0, [sp, #8]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	4639      	mov	r1, r7
 8014aa6:	f7ec f827 	bl	8000af8 <__aeabi_dcmpeq>
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	f000 80c7 	beq.w	8014c3e <__kernel_rem_pio2+0x3fe>
 8014ab0:	1e65      	subs	r5, r4, #1
 8014ab2:	462b      	mov	r3, r5
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	9904      	ldr	r1, [sp, #16]
 8014ab8:	428b      	cmp	r3, r1
 8014aba:	da6a      	bge.n	8014b92 <__kernel_rem_pio2+0x352>
 8014abc:	2a00      	cmp	r2, #0
 8014abe:	f000 8088 	beq.w	8014bd2 <__kernel_rem_pio2+0x392>
 8014ac2:	ab0e      	add	r3, sp, #56	; 0x38
 8014ac4:	f1aa 0a18 	sub.w	sl, sl, #24
 8014ac8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	f000 80b4 	beq.w	8014c3a <__kernel_rem_pio2+0x3fa>
 8014ad2:	4650      	mov	r0, sl
 8014ad4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014b60 <__kernel_rem_pio2+0x320>
 8014ad8:	f000 fd0a 	bl	80154f0 <scalbn>
 8014adc:	00ec      	lsls	r4, r5, #3
 8014ade:	ab72      	add	r3, sp, #456	; 0x1c8
 8014ae0:	191e      	adds	r6, r3, r4
 8014ae2:	ec59 8b10 	vmov	r8, r9, d0
 8014ae6:	f106 0a08 	add.w	sl, r6, #8
 8014aea:	462f      	mov	r7, r5
 8014aec:	2f00      	cmp	r7, #0
 8014aee:	f280 80df 	bge.w	8014cb0 <__kernel_rem_pio2+0x470>
 8014af2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014b58 <__kernel_rem_pio2+0x318>
 8014af6:	f04f 0a00 	mov.w	sl, #0
 8014afa:	eba5 030a 	sub.w	r3, r5, sl
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	f2c0 810a 	blt.w	8014d18 <__kernel_rem_pio2+0x4d8>
 8014b04:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014b80 <__kernel_rem_pio2+0x340>
 8014b08:	ec59 8b18 	vmov	r8, r9, d8
 8014b0c:	2700      	movs	r7, #0
 8014b0e:	e0f5      	b.n	8014cfc <__kernel_rem_pio2+0x4bc>
 8014b10:	2302      	movs	r3, #2
 8014b12:	9302      	str	r3, [sp, #8]
 8014b14:	e760      	b.n	80149d8 <__kernel_rem_pio2+0x198>
 8014b16:	ab0e      	add	r3, sp, #56	; 0x38
 8014b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b1c:	b94d      	cbnz	r5, 8014b32 <__kernel_rem_pio2+0x2f2>
 8014b1e:	b12b      	cbz	r3, 8014b2c <__kernel_rem_pio2+0x2ec>
 8014b20:	a80e      	add	r0, sp, #56	; 0x38
 8014b22:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014b26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	3201      	adds	r2, #1
 8014b2e:	461d      	mov	r5, r3
 8014b30:	e759      	b.n	80149e6 <__kernel_rem_pio2+0x1a6>
 8014b32:	a80e      	add	r0, sp, #56	; 0x38
 8014b34:	1acb      	subs	r3, r1, r3
 8014b36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014b3a:	462b      	mov	r3, r5
 8014b3c:	e7f6      	b.n	8014b2c <__kernel_rem_pio2+0x2ec>
 8014b3e:	1e62      	subs	r2, r4, #1
 8014b40:	ab0e      	add	r3, sp, #56	; 0x38
 8014b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b46:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014b4a:	a90e      	add	r1, sp, #56	; 0x38
 8014b4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014b50:	e757      	b.n	8014a02 <__kernel_rem_pio2+0x1c2>
 8014b52:	bf00      	nop
 8014b54:	f3af 8000 	nop.w
	...
 8014b64:	3ff00000 	.word	0x3ff00000
 8014b68:	0801a2b0 	.word	0x0801a2b0
 8014b6c:	40200000 	.word	0x40200000
 8014b70:	3ff00000 	.word	0x3ff00000
 8014b74:	3e700000 	.word	0x3e700000
 8014b78:	41700000 	.word	0x41700000
 8014b7c:	3fe00000 	.word	0x3fe00000
 8014b80:	0801a270 	.word	0x0801a270
 8014b84:	1e62      	subs	r2, r4, #1
 8014b86:	ab0e      	add	r3, sp, #56	; 0x38
 8014b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014b90:	e7db      	b.n	8014b4a <__kernel_rem_pio2+0x30a>
 8014b92:	a90e      	add	r1, sp, #56	; 0x38
 8014b94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014b98:	3b01      	subs	r3, #1
 8014b9a:	430a      	orrs	r2, r1
 8014b9c:	e78b      	b.n	8014ab6 <__kernel_rem_pio2+0x276>
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014ba4:	2900      	cmp	r1, #0
 8014ba6:	d0fa      	beq.n	8014b9e <__kernel_rem_pio2+0x35e>
 8014ba8:	9a08      	ldr	r2, [sp, #32]
 8014baa:	4422      	add	r2, r4
 8014bac:	00d2      	lsls	r2, r2, #3
 8014bae:	a922      	add	r1, sp, #136	; 0x88
 8014bb0:	18e3      	adds	r3, r4, r3
 8014bb2:	9206      	str	r2, [sp, #24]
 8014bb4:	440a      	add	r2, r1
 8014bb6:	9302      	str	r3, [sp, #8]
 8014bb8:	f10b 0108 	add.w	r1, fp, #8
 8014bbc:	f102 0308 	add.w	r3, r2, #8
 8014bc0:	1c66      	adds	r6, r4, #1
 8014bc2:	910a      	str	r1, [sp, #40]	; 0x28
 8014bc4:	2500      	movs	r5, #0
 8014bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8014bc8:	9b02      	ldr	r3, [sp, #8]
 8014bca:	42b3      	cmp	r3, r6
 8014bcc:	da04      	bge.n	8014bd8 <__kernel_rem_pio2+0x398>
 8014bce:	461c      	mov	r4, r3
 8014bd0:	e6a6      	b.n	8014920 <__kernel_rem_pio2+0xe0>
 8014bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e7e3      	b.n	8014ba0 <__kernel_rem_pio2+0x360>
 8014bd8:	9b06      	ldr	r3, [sp, #24]
 8014bda:	18ef      	adds	r7, r5, r3
 8014bdc:	ab22      	add	r3, sp, #136	; 0x88
 8014bde:	441f      	add	r7, r3
 8014be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014be2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014be6:	f7eb fcb5 	bl	8000554 <__aeabi_i2d>
 8014bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bec:	461c      	mov	r4, r3
 8014bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bf0:	e9c7 0100 	strd	r0, r1, [r7]
 8014bf4:	eb03 0b05 	add.w	fp, r3, r5
 8014bf8:	2700      	movs	r7, #0
 8014bfa:	f04f 0800 	mov.w	r8, #0
 8014bfe:	f04f 0900 	mov.w	r9, #0
 8014c02:	9b07      	ldr	r3, [sp, #28]
 8014c04:	429f      	cmp	r7, r3
 8014c06:	dd08      	ble.n	8014c1a <__kernel_rem_pio2+0x3da>
 8014c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c0a:	aa72      	add	r2, sp, #456	; 0x1c8
 8014c0c:	18eb      	adds	r3, r5, r3
 8014c0e:	4413      	add	r3, r2
 8014c10:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014c14:	3601      	adds	r6, #1
 8014c16:	3508      	adds	r5, #8
 8014c18:	e7d6      	b.n	8014bc8 <__kernel_rem_pio2+0x388>
 8014c1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014c1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014c22:	f7eb fd01 	bl	8000628 <__aeabi_dmul>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	4640      	mov	r0, r8
 8014c2c:	4649      	mov	r1, r9
 8014c2e:	f7eb fb45 	bl	80002bc <__adddf3>
 8014c32:	3701      	adds	r7, #1
 8014c34:	4680      	mov	r8, r0
 8014c36:	4689      	mov	r9, r1
 8014c38:	e7e3      	b.n	8014c02 <__kernel_rem_pio2+0x3c2>
 8014c3a:	3d01      	subs	r5, #1
 8014c3c:	e741      	b.n	8014ac2 <__kernel_rem_pio2+0x282>
 8014c3e:	f1ca 0000 	rsb	r0, sl, #0
 8014c42:	ec47 6b10 	vmov	d0, r6, r7
 8014c46:	f000 fc53 	bl	80154f0 <scalbn>
 8014c4a:	ec57 6b10 	vmov	r6, r7, d0
 8014c4e:	2200      	movs	r2, #0
 8014c50:	4b99      	ldr	r3, [pc, #612]	; (8014eb8 <__kernel_rem_pio2+0x678>)
 8014c52:	ee10 0a10 	vmov	r0, s0
 8014c56:	4639      	mov	r1, r7
 8014c58:	f7eb ff6c 	bl	8000b34 <__aeabi_dcmpge>
 8014c5c:	b1f8      	cbz	r0, 8014c9e <__kernel_rem_pio2+0x45e>
 8014c5e:	2200      	movs	r2, #0
 8014c60:	4b96      	ldr	r3, [pc, #600]	; (8014ebc <__kernel_rem_pio2+0x67c>)
 8014c62:	4630      	mov	r0, r6
 8014c64:	4639      	mov	r1, r7
 8014c66:	f7eb fcdf 	bl	8000628 <__aeabi_dmul>
 8014c6a:	f7eb ff8d 	bl	8000b88 <__aeabi_d2iz>
 8014c6e:	4680      	mov	r8, r0
 8014c70:	f7eb fc70 	bl	8000554 <__aeabi_i2d>
 8014c74:	2200      	movs	r2, #0
 8014c76:	4b90      	ldr	r3, [pc, #576]	; (8014eb8 <__kernel_rem_pio2+0x678>)
 8014c78:	f7eb fcd6 	bl	8000628 <__aeabi_dmul>
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	4602      	mov	r2, r0
 8014c80:	4639      	mov	r1, r7
 8014c82:	4630      	mov	r0, r6
 8014c84:	f7eb fb18 	bl	80002b8 <__aeabi_dsub>
 8014c88:	f7eb ff7e 	bl	8000b88 <__aeabi_d2iz>
 8014c8c:	1c65      	adds	r5, r4, #1
 8014c8e:	ab0e      	add	r3, sp, #56	; 0x38
 8014c90:	f10a 0a18 	add.w	sl, sl, #24
 8014c94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014c98:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014c9c:	e719      	b.n	8014ad2 <__kernel_rem_pio2+0x292>
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	4639      	mov	r1, r7
 8014ca2:	f7eb ff71 	bl	8000b88 <__aeabi_d2iz>
 8014ca6:	ab0e      	add	r3, sp, #56	; 0x38
 8014ca8:	4625      	mov	r5, r4
 8014caa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014cae:	e710      	b.n	8014ad2 <__kernel_rem_pio2+0x292>
 8014cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8014cb2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014cb6:	f7eb fc4d 	bl	8000554 <__aeabi_i2d>
 8014cba:	4642      	mov	r2, r8
 8014cbc:	464b      	mov	r3, r9
 8014cbe:	f7eb fcb3 	bl	8000628 <__aeabi_dmul>
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014cc8:	4b7c      	ldr	r3, [pc, #496]	; (8014ebc <__kernel_rem_pio2+0x67c>)
 8014cca:	4640      	mov	r0, r8
 8014ccc:	4649      	mov	r1, r9
 8014cce:	f7eb fcab 	bl	8000628 <__aeabi_dmul>
 8014cd2:	3f01      	subs	r7, #1
 8014cd4:	4680      	mov	r8, r0
 8014cd6:	4689      	mov	r9, r1
 8014cd8:	e708      	b.n	8014aec <__kernel_rem_pio2+0x2ac>
 8014cda:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014ce6:	f7eb fc9f 	bl	8000628 <__aeabi_dmul>
 8014cea:	4602      	mov	r2, r0
 8014cec:	460b      	mov	r3, r1
 8014cee:	4640      	mov	r0, r8
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	f7eb fae3 	bl	80002bc <__adddf3>
 8014cf6:	3701      	adds	r7, #1
 8014cf8:	4680      	mov	r8, r0
 8014cfa:	4689      	mov	r9, r1
 8014cfc:	9b04      	ldr	r3, [sp, #16]
 8014cfe:	429f      	cmp	r7, r3
 8014d00:	dc01      	bgt.n	8014d06 <__kernel_rem_pio2+0x4c6>
 8014d02:	45ba      	cmp	sl, r7
 8014d04:	dae9      	bge.n	8014cda <__kernel_rem_pio2+0x49a>
 8014d06:	ab4a      	add	r3, sp, #296	; 0x128
 8014d08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d0c:	e9c3 8900 	strd	r8, r9, [r3]
 8014d10:	f10a 0a01 	add.w	sl, sl, #1
 8014d14:	3e08      	subs	r6, #8
 8014d16:	e6f0      	b.n	8014afa <__kernel_rem_pio2+0x2ba>
 8014d18:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014d1a:	2b03      	cmp	r3, #3
 8014d1c:	d85b      	bhi.n	8014dd6 <__kernel_rem_pio2+0x596>
 8014d1e:	e8df f003 	tbb	[pc, r3]
 8014d22:	264a      	.short	0x264a
 8014d24:	0226      	.short	0x0226
 8014d26:	ab9a      	add	r3, sp, #616	; 0x268
 8014d28:	441c      	add	r4, r3
 8014d2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014d2e:	46a2      	mov	sl, r4
 8014d30:	46ab      	mov	fp, r5
 8014d32:	f1bb 0f00 	cmp.w	fp, #0
 8014d36:	dc6c      	bgt.n	8014e12 <__kernel_rem_pio2+0x5d2>
 8014d38:	46a2      	mov	sl, r4
 8014d3a:	46ab      	mov	fp, r5
 8014d3c:	f1bb 0f01 	cmp.w	fp, #1
 8014d40:	f300 8086 	bgt.w	8014e50 <__kernel_rem_pio2+0x610>
 8014d44:	2000      	movs	r0, #0
 8014d46:	2100      	movs	r1, #0
 8014d48:	2d01      	cmp	r5, #1
 8014d4a:	f300 80a0 	bgt.w	8014e8e <__kernel_rem_pio2+0x64e>
 8014d4e:	9b02      	ldr	r3, [sp, #8]
 8014d50:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014d54:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f040 809e 	bne.w	8014e9a <__kernel_rem_pio2+0x65a>
 8014d5e:	9b01      	ldr	r3, [sp, #4]
 8014d60:	e9c3 7800 	strd	r7, r8, [r3]
 8014d64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014d68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014d6c:	e033      	b.n	8014dd6 <__kernel_rem_pio2+0x596>
 8014d6e:	3408      	adds	r4, #8
 8014d70:	ab4a      	add	r3, sp, #296	; 0x128
 8014d72:	441c      	add	r4, r3
 8014d74:	462e      	mov	r6, r5
 8014d76:	2000      	movs	r0, #0
 8014d78:	2100      	movs	r1, #0
 8014d7a:	2e00      	cmp	r6, #0
 8014d7c:	da3a      	bge.n	8014df4 <__kernel_rem_pio2+0x5b4>
 8014d7e:	9b02      	ldr	r3, [sp, #8]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d03d      	beq.n	8014e00 <__kernel_rem_pio2+0x5c0>
 8014d84:	4602      	mov	r2, r0
 8014d86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d8a:	9c01      	ldr	r4, [sp, #4]
 8014d8c:	e9c4 2300 	strd	r2, r3, [r4]
 8014d90:	4602      	mov	r2, r0
 8014d92:	460b      	mov	r3, r1
 8014d94:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014d98:	f7eb fa8e 	bl	80002b8 <__aeabi_dsub>
 8014d9c:	ae4c      	add	r6, sp, #304	; 0x130
 8014d9e:	2401      	movs	r4, #1
 8014da0:	42a5      	cmp	r5, r4
 8014da2:	da30      	bge.n	8014e06 <__kernel_rem_pio2+0x5c6>
 8014da4:	9b02      	ldr	r3, [sp, #8]
 8014da6:	b113      	cbz	r3, 8014dae <__kernel_rem_pio2+0x56e>
 8014da8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dac:	4619      	mov	r1, r3
 8014dae:	9b01      	ldr	r3, [sp, #4]
 8014db0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014db4:	e00f      	b.n	8014dd6 <__kernel_rem_pio2+0x596>
 8014db6:	ab9a      	add	r3, sp, #616	; 0x268
 8014db8:	441c      	add	r4, r3
 8014dba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	2100      	movs	r1, #0
 8014dc2:	2d00      	cmp	r5, #0
 8014dc4:	da10      	bge.n	8014de8 <__kernel_rem_pio2+0x5a8>
 8014dc6:	9b02      	ldr	r3, [sp, #8]
 8014dc8:	b113      	cbz	r3, 8014dd0 <__kernel_rem_pio2+0x590>
 8014dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dce:	4619      	mov	r1, r3
 8014dd0:	9b01      	ldr	r3, [sp, #4]
 8014dd2:	e9c3 0100 	strd	r0, r1, [r3]
 8014dd6:	9b06      	ldr	r3, [sp, #24]
 8014dd8:	f003 0007 	and.w	r0, r3, #7
 8014ddc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014de0:	ecbd 8b02 	vpop	{d8}
 8014de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014de8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014dec:	f7eb fa66 	bl	80002bc <__adddf3>
 8014df0:	3d01      	subs	r5, #1
 8014df2:	e7e6      	b.n	8014dc2 <__kernel_rem_pio2+0x582>
 8014df4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014df8:	f7eb fa60 	bl	80002bc <__adddf3>
 8014dfc:	3e01      	subs	r6, #1
 8014dfe:	e7bc      	b.n	8014d7a <__kernel_rem_pio2+0x53a>
 8014e00:	4602      	mov	r2, r0
 8014e02:	460b      	mov	r3, r1
 8014e04:	e7c1      	b.n	8014d8a <__kernel_rem_pio2+0x54a>
 8014e06:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014e0a:	f7eb fa57 	bl	80002bc <__adddf3>
 8014e0e:	3401      	adds	r4, #1
 8014e10:	e7c6      	b.n	8014da0 <__kernel_rem_pio2+0x560>
 8014e12:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014e16:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014e1a:	4640      	mov	r0, r8
 8014e1c:	ec53 2b17 	vmov	r2, r3, d7
 8014e20:	4649      	mov	r1, r9
 8014e22:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e26:	f7eb fa49 	bl	80002bc <__adddf3>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	4606      	mov	r6, r0
 8014e30:	460f      	mov	r7, r1
 8014e32:	4640      	mov	r0, r8
 8014e34:	4649      	mov	r1, r9
 8014e36:	f7eb fa3f 	bl	80002b8 <__aeabi_dsub>
 8014e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e3e:	f7eb fa3d 	bl	80002bc <__adddf3>
 8014e42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e46:	e9ca 0100 	strd	r0, r1, [sl]
 8014e4a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014e4e:	e770      	b.n	8014d32 <__kernel_rem_pio2+0x4f2>
 8014e50:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014e54:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014e58:	4630      	mov	r0, r6
 8014e5a:	ec53 2b17 	vmov	r2, r3, d7
 8014e5e:	4639      	mov	r1, r7
 8014e60:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e64:	f7eb fa2a 	bl	80002bc <__adddf3>
 8014e68:	4602      	mov	r2, r0
 8014e6a:	460b      	mov	r3, r1
 8014e6c:	4680      	mov	r8, r0
 8014e6e:	4689      	mov	r9, r1
 8014e70:	4630      	mov	r0, r6
 8014e72:	4639      	mov	r1, r7
 8014e74:	f7eb fa20 	bl	80002b8 <__aeabi_dsub>
 8014e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e7c:	f7eb fa1e 	bl	80002bc <__adddf3>
 8014e80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e84:	e9ca 0100 	strd	r0, r1, [sl]
 8014e88:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014e8c:	e756      	b.n	8014d3c <__kernel_rem_pio2+0x4fc>
 8014e8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014e92:	f7eb fa13 	bl	80002bc <__adddf3>
 8014e96:	3d01      	subs	r5, #1
 8014e98:	e756      	b.n	8014d48 <__kernel_rem_pio2+0x508>
 8014e9a:	9b01      	ldr	r3, [sp, #4]
 8014e9c:	9a01      	ldr	r2, [sp, #4]
 8014e9e:	601f      	str	r7, [r3, #0]
 8014ea0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014ea4:	605c      	str	r4, [r3, #4]
 8014ea6:	609d      	str	r5, [r3, #8]
 8014ea8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014eac:	60d3      	str	r3, [r2, #12]
 8014eae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014eb2:	6110      	str	r0, [r2, #16]
 8014eb4:	6153      	str	r3, [r2, #20]
 8014eb6:	e78e      	b.n	8014dd6 <__kernel_rem_pio2+0x596>
 8014eb8:	41700000 	.word	0x41700000
 8014ebc:	3e700000 	.word	0x3e700000

08014ec0 <__kernel_sin>:
 8014ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec4:	ec55 4b10 	vmov	r4, r5, d0
 8014ec8:	b085      	sub	sp, #20
 8014eca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014ece:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014ed2:	ed8d 1b00 	vstr	d1, [sp]
 8014ed6:	9002      	str	r0, [sp, #8]
 8014ed8:	da06      	bge.n	8014ee8 <__kernel_sin+0x28>
 8014eda:	ee10 0a10 	vmov	r0, s0
 8014ede:	4629      	mov	r1, r5
 8014ee0:	f7eb fe52 	bl	8000b88 <__aeabi_d2iz>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	d051      	beq.n	8014f8c <__kernel_sin+0xcc>
 8014ee8:	4622      	mov	r2, r4
 8014eea:	462b      	mov	r3, r5
 8014eec:	4620      	mov	r0, r4
 8014eee:	4629      	mov	r1, r5
 8014ef0:	f7eb fb9a 	bl	8000628 <__aeabi_dmul>
 8014ef4:	4682      	mov	sl, r0
 8014ef6:	468b      	mov	fp, r1
 8014ef8:	4602      	mov	r2, r0
 8014efa:	460b      	mov	r3, r1
 8014efc:	4620      	mov	r0, r4
 8014efe:	4629      	mov	r1, r5
 8014f00:	f7eb fb92 	bl	8000628 <__aeabi_dmul>
 8014f04:	a341      	add	r3, pc, #260	; (adr r3, 801500c <__kernel_sin+0x14c>)
 8014f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0a:	4680      	mov	r8, r0
 8014f0c:	4689      	mov	r9, r1
 8014f0e:	4650      	mov	r0, sl
 8014f10:	4659      	mov	r1, fp
 8014f12:	f7eb fb89 	bl	8000628 <__aeabi_dmul>
 8014f16:	a33f      	add	r3, pc, #252	; (adr r3, 8015014 <__kernel_sin+0x154>)
 8014f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1c:	f7eb f9cc 	bl	80002b8 <__aeabi_dsub>
 8014f20:	4652      	mov	r2, sl
 8014f22:	465b      	mov	r3, fp
 8014f24:	f7eb fb80 	bl	8000628 <__aeabi_dmul>
 8014f28:	a33c      	add	r3, pc, #240	; (adr r3, 801501c <__kernel_sin+0x15c>)
 8014f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f2e:	f7eb f9c5 	bl	80002bc <__adddf3>
 8014f32:	4652      	mov	r2, sl
 8014f34:	465b      	mov	r3, fp
 8014f36:	f7eb fb77 	bl	8000628 <__aeabi_dmul>
 8014f3a:	a33a      	add	r3, pc, #232	; (adr r3, 8015024 <__kernel_sin+0x164>)
 8014f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f40:	f7eb f9ba 	bl	80002b8 <__aeabi_dsub>
 8014f44:	4652      	mov	r2, sl
 8014f46:	465b      	mov	r3, fp
 8014f48:	f7eb fb6e 	bl	8000628 <__aeabi_dmul>
 8014f4c:	a337      	add	r3, pc, #220	; (adr r3, 801502c <__kernel_sin+0x16c>)
 8014f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f52:	f7eb f9b3 	bl	80002bc <__adddf3>
 8014f56:	9b02      	ldr	r3, [sp, #8]
 8014f58:	4606      	mov	r6, r0
 8014f5a:	460f      	mov	r7, r1
 8014f5c:	b9db      	cbnz	r3, 8014f96 <__kernel_sin+0xd6>
 8014f5e:	4602      	mov	r2, r0
 8014f60:	460b      	mov	r3, r1
 8014f62:	4650      	mov	r0, sl
 8014f64:	4659      	mov	r1, fp
 8014f66:	f7eb fb5f 	bl	8000628 <__aeabi_dmul>
 8014f6a:	a325      	add	r3, pc, #148	; (adr r3, 8015000 <__kernel_sin+0x140>)
 8014f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f70:	f7eb f9a2 	bl	80002b8 <__aeabi_dsub>
 8014f74:	4642      	mov	r2, r8
 8014f76:	464b      	mov	r3, r9
 8014f78:	f7eb fb56 	bl	8000628 <__aeabi_dmul>
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	460b      	mov	r3, r1
 8014f80:	4620      	mov	r0, r4
 8014f82:	4629      	mov	r1, r5
 8014f84:	f7eb f99a 	bl	80002bc <__adddf3>
 8014f88:	4604      	mov	r4, r0
 8014f8a:	460d      	mov	r5, r1
 8014f8c:	ec45 4b10 	vmov	d0, r4, r5
 8014f90:	b005      	add	sp, #20
 8014f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f96:	2200      	movs	r2, #0
 8014f98:	4b1b      	ldr	r3, [pc, #108]	; (8015008 <__kernel_sin+0x148>)
 8014f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f9e:	f7eb fb43 	bl	8000628 <__aeabi_dmul>
 8014fa2:	4632      	mov	r2, r6
 8014fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fa8:	463b      	mov	r3, r7
 8014faa:	4640      	mov	r0, r8
 8014fac:	4649      	mov	r1, r9
 8014fae:	f7eb fb3b 	bl	8000628 <__aeabi_dmul>
 8014fb2:	4602      	mov	r2, r0
 8014fb4:	460b      	mov	r3, r1
 8014fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fba:	f7eb f97d 	bl	80002b8 <__aeabi_dsub>
 8014fbe:	4652      	mov	r2, sl
 8014fc0:	465b      	mov	r3, fp
 8014fc2:	f7eb fb31 	bl	8000628 <__aeabi_dmul>
 8014fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fca:	f7eb f975 	bl	80002b8 <__aeabi_dsub>
 8014fce:	a30c      	add	r3, pc, #48	; (adr r3, 8015000 <__kernel_sin+0x140>)
 8014fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd4:	4606      	mov	r6, r0
 8014fd6:	460f      	mov	r7, r1
 8014fd8:	4640      	mov	r0, r8
 8014fda:	4649      	mov	r1, r9
 8014fdc:	f7eb fb24 	bl	8000628 <__aeabi_dmul>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	4639      	mov	r1, r7
 8014fe8:	f7eb f968 	bl	80002bc <__adddf3>
 8014fec:	4602      	mov	r2, r0
 8014fee:	460b      	mov	r3, r1
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	4629      	mov	r1, r5
 8014ff4:	f7eb f960 	bl	80002b8 <__aeabi_dsub>
 8014ff8:	e7c6      	b.n	8014f88 <__kernel_sin+0xc8>
 8014ffa:	bf00      	nop
 8014ffc:	f3af 8000 	nop.w
 8015000:	55555549 	.word	0x55555549
 8015004:	3fc55555 	.word	0x3fc55555
 8015008:	3fe00000 	.word	0x3fe00000
 801500c:	5acfd57c 	.word	0x5acfd57c
 8015010:	3de5d93a 	.word	0x3de5d93a
 8015014:	8a2b9ceb 	.word	0x8a2b9ceb
 8015018:	3e5ae5e6 	.word	0x3e5ae5e6
 801501c:	57b1fe7d 	.word	0x57b1fe7d
 8015020:	3ec71de3 	.word	0x3ec71de3
 8015024:	19c161d5 	.word	0x19c161d5
 8015028:	3f2a01a0 	.word	0x3f2a01a0
 801502c:	1110f8a6 	.word	0x1110f8a6
 8015030:	3f811111 	.word	0x3f811111
 8015034:	00000000 	.word	0x00000000

08015038 <__kernel_tan>:
 8015038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503c:	ec5b ab10 	vmov	sl, fp, d0
 8015040:	4bbf      	ldr	r3, [pc, #764]	; (8015340 <__kernel_tan+0x308>)
 8015042:	b089      	sub	sp, #36	; 0x24
 8015044:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8015048:	429f      	cmp	r7, r3
 801504a:	ec59 8b11 	vmov	r8, r9, d1
 801504e:	4606      	mov	r6, r0
 8015050:	f8cd b008 	str.w	fp, [sp, #8]
 8015054:	dc22      	bgt.n	801509c <__kernel_tan+0x64>
 8015056:	ee10 0a10 	vmov	r0, s0
 801505a:	4659      	mov	r1, fp
 801505c:	f7eb fd94 	bl	8000b88 <__aeabi_d2iz>
 8015060:	2800      	cmp	r0, #0
 8015062:	d145      	bne.n	80150f0 <__kernel_tan+0xb8>
 8015064:	1c73      	adds	r3, r6, #1
 8015066:	4652      	mov	r2, sl
 8015068:	4313      	orrs	r3, r2
 801506a:	433b      	orrs	r3, r7
 801506c:	d110      	bne.n	8015090 <__kernel_tan+0x58>
 801506e:	ec4b ab10 	vmov	d0, sl, fp
 8015072:	f000 f9ad 	bl	80153d0 <fabs>
 8015076:	49b3      	ldr	r1, [pc, #716]	; (8015344 <__kernel_tan+0x30c>)
 8015078:	ec53 2b10 	vmov	r2, r3, d0
 801507c:	2000      	movs	r0, #0
 801507e:	f7eb fbfd 	bl	800087c <__aeabi_ddiv>
 8015082:	4682      	mov	sl, r0
 8015084:	468b      	mov	fp, r1
 8015086:	ec4b ab10 	vmov	d0, sl, fp
 801508a:	b009      	add	sp, #36	; 0x24
 801508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015090:	2e01      	cmp	r6, #1
 8015092:	d0f8      	beq.n	8015086 <__kernel_tan+0x4e>
 8015094:	465b      	mov	r3, fp
 8015096:	2000      	movs	r0, #0
 8015098:	49ab      	ldr	r1, [pc, #684]	; (8015348 <__kernel_tan+0x310>)
 801509a:	e7f0      	b.n	801507e <__kernel_tan+0x46>
 801509c:	4bab      	ldr	r3, [pc, #684]	; (801534c <__kernel_tan+0x314>)
 801509e:	429f      	cmp	r7, r3
 80150a0:	dd26      	ble.n	80150f0 <__kernel_tan+0xb8>
 80150a2:	9b02      	ldr	r3, [sp, #8]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	da09      	bge.n	80150bc <__kernel_tan+0x84>
 80150a8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80150ac:	469b      	mov	fp, r3
 80150ae:	ee10 aa10 	vmov	sl, s0
 80150b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80150b6:	ee11 8a10 	vmov	r8, s2
 80150ba:	4699      	mov	r9, r3
 80150bc:	4652      	mov	r2, sl
 80150be:	465b      	mov	r3, fp
 80150c0:	a181      	add	r1, pc, #516	; (adr r1, 80152c8 <__kernel_tan+0x290>)
 80150c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150c6:	f7eb f8f7 	bl	80002b8 <__aeabi_dsub>
 80150ca:	4642      	mov	r2, r8
 80150cc:	464b      	mov	r3, r9
 80150ce:	4604      	mov	r4, r0
 80150d0:	460d      	mov	r5, r1
 80150d2:	a17f      	add	r1, pc, #508	; (adr r1, 80152d0 <__kernel_tan+0x298>)
 80150d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150d8:	f7eb f8ee 	bl	80002b8 <__aeabi_dsub>
 80150dc:	4622      	mov	r2, r4
 80150de:	462b      	mov	r3, r5
 80150e0:	f7eb f8ec 	bl	80002bc <__adddf3>
 80150e4:	f04f 0800 	mov.w	r8, #0
 80150e8:	4682      	mov	sl, r0
 80150ea:	468b      	mov	fp, r1
 80150ec:	f04f 0900 	mov.w	r9, #0
 80150f0:	4652      	mov	r2, sl
 80150f2:	465b      	mov	r3, fp
 80150f4:	4650      	mov	r0, sl
 80150f6:	4659      	mov	r1, fp
 80150f8:	f7eb fa96 	bl	8000628 <__aeabi_dmul>
 80150fc:	4602      	mov	r2, r0
 80150fe:	460b      	mov	r3, r1
 8015100:	e9cd 0100 	strd	r0, r1, [sp]
 8015104:	f7eb fa90 	bl	8000628 <__aeabi_dmul>
 8015108:	e9dd 2300 	ldrd	r2, r3, [sp]
 801510c:	4604      	mov	r4, r0
 801510e:	460d      	mov	r5, r1
 8015110:	4650      	mov	r0, sl
 8015112:	4659      	mov	r1, fp
 8015114:	f7eb fa88 	bl	8000628 <__aeabi_dmul>
 8015118:	a36f      	add	r3, pc, #444	; (adr r3, 80152d8 <__kernel_tan+0x2a0>)
 801511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015122:	4620      	mov	r0, r4
 8015124:	4629      	mov	r1, r5
 8015126:	f7eb fa7f 	bl	8000628 <__aeabi_dmul>
 801512a:	a36d      	add	r3, pc, #436	; (adr r3, 80152e0 <__kernel_tan+0x2a8>)
 801512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015130:	f7eb f8c4 	bl	80002bc <__adddf3>
 8015134:	4622      	mov	r2, r4
 8015136:	462b      	mov	r3, r5
 8015138:	f7eb fa76 	bl	8000628 <__aeabi_dmul>
 801513c:	a36a      	add	r3, pc, #424	; (adr r3, 80152e8 <__kernel_tan+0x2b0>)
 801513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015142:	f7eb f8bb 	bl	80002bc <__adddf3>
 8015146:	4622      	mov	r2, r4
 8015148:	462b      	mov	r3, r5
 801514a:	f7eb fa6d 	bl	8000628 <__aeabi_dmul>
 801514e:	a368      	add	r3, pc, #416	; (adr r3, 80152f0 <__kernel_tan+0x2b8>)
 8015150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015154:	f7eb f8b2 	bl	80002bc <__adddf3>
 8015158:	4622      	mov	r2, r4
 801515a:	462b      	mov	r3, r5
 801515c:	f7eb fa64 	bl	8000628 <__aeabi_dmul>
 8015160:	a365      	add	r3, pc, #404	; (adr r3, 80152f8 <__kernel_tan+0x2c0>)
 8015162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015166:	f7eb f8a9 	bl	80002bc <__adddf3>
 801516a:	4622      	mov	r2, r4
 801516c:	462b      	mov	r3, r5
 801516e:	f7eb fa5b 	bl	8000628 <__aeabi_dmul>
 8015172:	a363      	add	r3, pc, #396	; (adr r3, 8015300 <__kernel_tan+0x2c8>)
 8015174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015178:	f7eb f8a0 	bl	80002bc <__adddf3>
 801517c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015180:	f7eb fa52 	bl	8000628 <__aeabi_dmul>
 8015184:	a360      	add	r3, pc, #384	; (adr r3, 8015308 <__kernel_tan+0x2d0>)
 8015186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801518e:	4620      	mov	r0, r4
 8015190:	4629      	mov	r1, r5
 8015192:	f7eb fa49 	bl	8000628 <__aeabi_dmul>
 8015196:	a35e      	add	r3, pc, #376	; (adr r3, 8015310 <__kernel_tan+0x2d8>)
 8015198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519c:	f7eb f88e 	bl	80002bc <__adddf3>
 80151a0:	4622      	mov	r2, r4
 80151a2:	462b      	mov	r3, r5
 80151a4:	f7eb fa40 	bl	8000628 <__aeabi_dmul>
 80151a8:	a35b      	add	r3, pc, #364	; (adr r3, 8015318 <__kernel_tan+0x2e0>)
 80151aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ae:	f7eb f885 	bl	80002bc <__adddf3>
 80151b2:	4622      	mov	r2, r4
 80151b4:	462b      	mov	r3, r5
 80151b6:	f7eb fa37 	bl	8000628 <__aeabi_dmul>
 80151ba:	a359      	add	r3, pc, #356	; (adr r3, 8015320 <__kernel_tan+0x2e8>)
 80151bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c0:	f7eb f87c 	bl	80002bc <__adddf3>
 80151c4:	4622      	mov	r2, r4
 80151c6:	462b      	mov	r3, r5
 80151c8:	f7eb fa2e 	bl	8000628 <__aeabi_dmul>
 80151cc:	a356      	add	r3, pc, #344	; (adr r3, 8015328 <__kernel_tan+0x2f0>)
 80151ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d2:	f7eb f873 	bl	80002bc <__adddf3>
 80151d6:	4622      	mov	r2, r4
 80151d8:	462b      	mov	r3, r5
 80151da:	f7eb fa25 	bl	8000628 <__aeabi_dmul>
 80151de:	a354      	add	r3, pc, #336	; (adr r3, 8015330 <__kernel_tan+0x2f8>)
 80151e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e4:	f7eb f86a 	bl	80002bc <__adddf3>
 80151e8:	4602      	mov	r2, r0
 80151ea:	460b      	mov	r3, r1
 80151ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80151f0:	f7eb f864 	bl	80002bc <__adddf3>
 80151f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151f8:	f7eb fa16 	bl	8000628 <__aeabi_dmul>
 80151fc:	4642      	mov	r2, r8
 80151fe:	464b      	mov	r3, r9
 8015200:	f7eb f85c 	bl	80002bc <__adddf3>
 8015204:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015208:	f7eb fa0e 	bl	8000628 <__aeabi_dmul>
 801520c:	4642      	mov	r2, r8
 801520e:	464b      	mov	r3, r9
 8015210:	f7eb f854 	bl	80002bc <__adddf3>
 8015214:	a348      	add	r3, pc, #288	; (adr r3, 8015338 <__kernel_tan+0x300>)
 8015216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521a:	4604      	mov	r4, r0
 801521c:	460d      	mov	r5, r1
 801521e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015222:	f7eb fa01 	bl	8000628 <__aeabi_dmul>
 8015226:	4622      	mov	r2, r4
 8015228:	462b      	mov	r3, r5
 801522a:	f7eb f847 	bl	80002bc <__adddf3>
 801522e:	e9cd 0100 	strd	r0, r1, [sp]
 8015232:	460b      	mov	r3, r1
 8015234:	4602      	mov	r2, r0
 8015236:	4659      	mov	r1, fp
 8015238:	4650      	mov	r0, sl
 801523a:	f7eb f83f 	bl	80002bc <__adddf3>
 801523e:	4b43      	ldr	r3, [pc, #268]	; (801534c <__kernel_tan+0x314>)
 8015240:	429f      	cmp	r7, r3
 8015242:	4604      	mov	r4, r0
 8015244:	460d      	mov	r5, r1
 8015246:	f340 8083 	ble.w	8015350 <__kernel_tan+0x318>
 801524a:	4630      	mov	r0, r6
 801524c:	f7eb f982 	bl	8000554 <__aeabi_i2d>
 8015250:	4622      	mov	r2, r4
 8015252:	4680      	mov	r8, r0
 8015254:	4689      	mov	r9, r1
 8015256:	462b      	mov	r3, r5
 8015258:	4620      	mov	r0, r4
 801525a:	4629      	mov	r1, r5
 801525c:	f7eb f9e4 	bl	8000628 <__aeabi_dmul>
 8015260:	4642      	mov	r2, r8
 8015262:	4606      	mov	r6, r0
 8015264:	460f      	mov	r7, r1
 8015266:	464b      	mov	r3, r9
 8015268:	4620      	mov	r0, r4
 801526a:	4629      	mov	r1, r5
 801526c:	f7eb f826 	bl	80002bc <__adddf3>
 8015270:	4602      	mov	r2, r0
 8015272:	460b      	mov	r3, r1
 8015274:	4630      	mov	r0, r6
 8015276:	4639      	mov	r1, r7
 8015278:	f7eb fb00 	bl	800087c <__aeabi_ddiv>
 801527c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015280:	f7eb f81a 	bl	80002b8 <__aeabi_dsub>
 8015284:	4602      	mov	r2, r0
 8015286:	460b      	mov	r3, r1
 8015288:	4650      	mov	r0, sl
 801528a:	4659      	mov	r1, fp
 801528c:	f7eb f814 	bl	80002b8 <__aeabi_dsub>
 8015290:	4602      	mov	r2, r0
 8015292:	460b      	mov	r3, r1
 8015294:	f7eb f812 	bl	80002bc <__adddf3>
 8015298:	4602      	mov	r2, r0
 801529a:	460b      	mov	r3, r1
 801529c:	4640      	mov	r0, r8
 801529e:	4649      	mov	r1, r9
 80152a0:	f7eb f80a 	bl	80002b8 <__aeabi_dsub>
 80152a4:	9b02      	ldr	r3, [sp, #8]
 80152a6:	4604      	mov	r4, r0
 80152a8:	1798      	asrs	r0, r3, #30
 80152aa:	f000 0002 	and.w	r0, r0, #2
 80152ae:	f1c0 0001 	rsb	r0, r0, #1
 80152b2:	460d      	mov	r5, r1
 80152b4:	f7eb f94e 	bl	8000554 <__aeabi_i2d>
 80152b8:	4602      	mov	r2, r0
 80152ba:	460b      	mov	r3, r1
 80152bc:	4620      	mov	r0, r4
 80152be:	4629      	mov	r1, r5
 80152c0:	f7eb f9b2 	bl	8000628 <__aeabi_dmul>
 80152c4:	e6dd      	b.n	8015082 <__kernel_tan+0x4a>
 80152c6:	bf00      	nop
 80152c8:	54442d18 	.word	0x54442d18
 80152cc:	3fe921fb 	.word	0x3fe921fb
 80152d0:	33145c07 	.word	0x33145c07
 80152d4:	3c81a626 	.word	0x3c81a626
 80152d8:	74bf7ad4 	.word	0x74bf7ad4
 80152dc:	3efb2a70 	.word	0x3efb2a70
 80152e0:	32f0a7e9 	.word	0x32f0a7e9
 80152e4:	3f12b80f 	.word	0x3f12b80f
 80152e8:	1a8d1068 	.word	0x1a8d1068
 80152ec:	3f3026f7 	.word	0x3f3026f7
 80152f0:	fee08315 	.word	0xfee08315
 80152f4:	3f57dbc8 	.word	0x3f57dbc8
 80152f8:	e96e8493 	.word	0xe96e8493
 80152fc:	3f8226e3 	.word	0x3f8226e3
 8015300:	1bb341fe 	.word	0x1bb341fe
 8015304:	3faba1ba 	.word	0x3faba1ba
 8015308:	db605373 	.word	0xdb605373
 801530c:	bef375cb 	.word	0xbef375cb
 8015310:	a03792a6 	.word	0xa03792a6
 8015314:	3f147e88 	.word	0x3f147e88
 8015318:	f2f26501 	.word	0xf2f26501
 801531c:	3f4344d8 	.word	0x3f4344d8
 8015320:	c9560328 	.word	0xc9560328
 8015324:	3f6d6d22 	.word	0x3f6d6d22
 8015328:	8406d637 	.word	0x8406d637
 801532c:	3f9664f4 	.word	0x3f9664f4
 8015330:	1110fe7a 	.word	0x1110fe7a
 8015334:	3fc11111 	.word	0x3fc11111
 8015338:	55555563 	.word	0x55555563
 801533c:	3fd55555 	.word	0x3fd55555
 8015340:	3e2fffff 	.word	0x3e2fffff
 8015344:	3ff00000 	.word	0x3ff00000
 8015348:	bff00000 	.word	0xbff00000
 801534c:	3fe59427 	.word	0x3fe59427
 8015350:	2e01      	cmp	r6, #1
 8015352:	d036      	beq.n	80153c2 <__kernel_tan+0x38a>
 8015354:	460f      	mov	r7, r1
 8015356:	4602      	mov	r2, r0
 8015358:	460b      	mov	r3, r1
 801535a:	2000      	movs	r0, #0
 801535c:	491a      	ldr	r1, [pc, #104]	; (80153c8 <__kernel_tan+0x390>)
 801535e:	f7eb fa8d 	bl	800087c <__aeabi_ddiv>
 8015362:	2600      	movs	r6, #0
 8015364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015368:	4652      	mov	r2, sl
 801536a:	465b      	mov	r3, fp
 801536c:	4630      	mov	r0, r6
 801536e:	4639      	mov	r1, r7
 8015370:	f7ea ffa2 	bl	80002b8 <__aeabi_dsub>
 8015374:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015378:	4602      	mov	r2, r0
 801537a:	460b      	mov	r3, r1
 801537c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015380:	f7ea ff9a 	bl	80002b8 <__aeabi_dsub>
 8015384:	4632      	mov	r2, r6
 8015386:	462b      	mov	r3, r5
 8015388:	f7eb f94e 	bl	8000628 <__aeabi_dmul>
 801538c:	4632      	mov	r2, r6
 801538e:	4682      	mov	sl, r0
 8015390:	468b      	mov	fp, r1
 8015392:	462b      	mov	r3, r5
 8015394:	4630      	mov	r0, r6
 8015396:	4639      	mov	r1, r7
 8015398:	f7eb f946 	bl	8000628 <__aeabi_dmul>
 801539c:	2200      	movs	r2, #0
 801539e:	4b0b      	ldr	r3, [pc, #44]	; (80153cc <__kernel_tan+0x394>)
 80153a0:	f7ea ff8c 	bl	80002bc <__adddf3>
 80153a4:	4602      	mov	r2, r0
 80153a6:	460b      	mov	r3, r1
 80153a8:	4650      	mov	r0, sl
 80153aa:	4659      	mov	r1, fp
 80153ac:	f7ea ff86 	bl	80002bc <__adddf3>
 80153b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153b4:	f7eb f938 	bl	8000628 <__aeabi_dmul>
 80153b8:	4632      	mov	r2, r6
 80153ba:	462b      	mov	r3, r5
 80153bc:	f7ea ff7e 	bl	80002bc <__adddf3>
 80153c0:	e65f      	b.n	8015082 <__kernel_tan+0x4a>
 80153c2:	4682      	mov	sl, r0
 80153c4:	468b      	mov	fp, r1
 80153c6:	e65e      	b.n	8015086 <__kernel_tan+0x4e>
 80153c8:	bff00000 	.word	0xbff00000
 80153cc:	3ff00000 	.word	0x3ff00000

080153d0 <fabs>:
 80153d0:	ec51 0b10 	vmov	r0, r1, d0
 80153d4:	ee10 2a10 	vmov	r2, s0
 80153d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80153dc:	ec43 2b10 	vmov	d0, r2, r3
 80153e0:	4770      	bx	lr
 80153e2:	0000      	movs	r0, r0
 80153e4:	0000      	movs	r0, r0
	...

080153e8 <floor>:
 80153e8:	ec51 0b10 	vmov	r0, r1, d0
 80153ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80153f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80153f8:	2e13      	cmp	r6, #19
 80153fa:	460c      	mov	r4, r1
 80153fc:	ee10 5a10 	vmov	r5, s0
 8015400:	4680      	mov	r8, r0
 8015402:	dc34      	bgt.n	801546e <floor+0x86>
 8015404:	2e00      	cmp	r6, #0
 8015406:	da16      	bge.n	8015436 <floor+0x4e>
 8015408:	a335      	add	r3, pc, #212	; (adr r3, 80154e0 <floor+0xf8>)
 801540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801540e:	f7ea ff55 	bl	80002bc <__adddf3>
 8015412:	2200      	movs	r2, #0
 8015414:	2300      	movs	r3, #0
 8015416:	f7eb fb97 	bl	8000b48 <__aeabi_dcmpgt>
 801541a:	b148      	cbz	r0, 8015430 <floor+0x48>
 801541c:	2c00      	cmp	r4, #0
 801541e:	da59      	bge.n	80154d4 <floor+0xec>
 8015420:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015424:	4a30      	ldr	r2, [pc, #192]	; (80154e8 <floor+0x100>)
 8015426:	432b      	orrs	r3, r5
 8015428:	2500      	movs	r5, #0
 801542a:	42ab      	cmp	r3, r5
 801542c:	bf18      	it	ne
 801542e:	4614      	movne	r4, r2
 8015430:	4621      	mov	r1, r4
 8015432:	4628      	mov	r0, r5
 8015434:	e025      	b.n	8015482 <floor+0x9a>
 8015436:	4f2d      	ldr	r7, [pc, #180]	; (80154ec <floor+0x104>)
 8015438:	4137      	asrs	r7, r6
 801543a:	ea01 0307 	and.w	r3, r1, r7
 801543e:	4303      	orrs	r3, r0
 8015440:	d01f      	beq.n	8015482 <floor+0x9a>
 8015442:	a327      	add	r3, pc, #156	; (adr r3, 80154e0 <floor+0xf8>)
 8015444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015448:	f7ea ff38 	bl	80002bc <__adddf3>
 801544c:	2200      	movs	r2, #0
 801544e:	2300      	movs	r3, #0
 8015450:	f7eb fb7a 	bl	8000b48 <__aeabi_dcmpgt>
 8015454:	2800      	cmp	r0, #0
 8015456:	d0eb      	beq.n	8015430 <floor+0x48>
 8015458:	2c00      	cmp	r4, #0
 801545a:	bfbe      	ittt	lt
 801545c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015460:	fa43 f606 	asrlt.w	r6, r3, r6
 8015464:	19a4      	addlt	r4, r4, r6
 8015466:	ea24 0407 	bic.w	r4, r4, r7
 801546a:	2500      	movs	r5, #0
 801546c:	e7e0      	b.n	8015430 <floor+0x48>
 801546e:	2e33      	cmp	r6, #51	; 0x33
 8015470:	dd0b      	ble.n	801548a <floor+0xa2>
 8015472:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015476:	d104      	bne.n	8015482 <floor+0x9a>
 8015478:	ee10 2a10 	vmov	r2, s0
 801547c:	460b      	mov	r3, r1
 801547e:	f7ea ff1d 	bl	80002bc <__adddf3>
 8015482:	ec41 0b10 	vmov	d0, r0, r1
 8015486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801548a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801548e:	f04f 33ff 	mov.w	r3, #4294967295
 8015492:	fa23 f707 	lsr.w	r7, r3, r7
 8015496:	4207      	tst	r7, r0
 8015498:	d0f3      	beq.n	8015482 <floor+0x9a>
 801549a:	a311      	add	r3, pc, #68	; (adr r3, 80154e0 <floor+0xf8>)
 801549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a0:	f7ea ff0c 	bl	80002bc <__adddf3>
 80154a4:	2200      	movs	r2, #0
 80154a6:	2300      	movs	r3, #0
 80154a8:	f7eb fb4e 	bl	8000b48 <__aeabi_dcmpgt>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d0bf      	beq.n	8015430 <floor+0x48>
 80154b0:	2c00      	cmp	r4, #0
 80154b2:	da02      	bge.n	80154ba <floor+0xd2>
 80154b4:	2e14      	cmp	r6, #20
 80154b6:	d103      	bne.n	80154c0 <floor+0xd8>
 80154b8:	3401      	adds	r4, #1
 80154ba:	ea25 0507 	bic.w	r5, r5, r7
 80154be:	e7b7      	b.n	8015430 <floor+0x48>
 80154c0:	2301      	movs	r3, #1
 80154c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80154c6:	fa03 f606 	lsl.w	r6, r3, r6
 80154ca:	4435      	add	r5, r6
 80154cc:	4545      	cmp	r5, r8
 80154ce:	bf38      	it	cc
 80154d0:	18e4      	addcc	r4, r4, r3
 80154d2:	e7f2      	b.n	80154ba <floor+0xd2>
 80154d4:	2500      	movs	r5, #0
 80154d6:	462c      	mov	r4, r5
 80154d8:	e7aa      	b.n	8015430 <floor+0x48>
 80154da:	bf00      	nop
 80154dc:	f3af 8000 	nop.w
 80154e0:	8800759c 	.word	0x8800759c
 80154e4:	7e37e43c 	.word	0x7e37e43c
 80154e8:	bff00000 	.word	0xbff00000
 80154ec:	000fffff 	.word	0x000fffff

080154f0 <scalbn>:
 80154f0:	b570      	push	{r4, r5, r6, lr}
 80154f2:	ec55 4b10 	vmov	r4, r5, d0
 80154f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80154fa:	4606      	mov	r6, r0
 80154fc:	462b      	mov	r3, r5
 80154fe:	b9aa      	cbnz	r2, 801552c <scalbn+0x3c>
 8015500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015504:	4323      	orrs	r3, r4
 8015506:	d03b      	beq.n	8015580 <scalbn+0x90>
 8015508:	4b31      	ldr	r3, [pc, #196]	; (80155d0 <scalbn+0xe0>)
 801550a:	4629      	mov	r1, r5
 801550c:	2200      	movs	r2, #0
 801550e:	ee10 0a10 	vmov	r0, s0
 8015512:	f7eb f889 	bl	8000628 <__aeabi_dmul>
 8015516:	4b2f      	ldr	r3, [pc, #188]	; (80155d4 <scalbn+0xe4>)
 8015518:	429e      	cmp	r6, r3
 801551a:	4604      	mov	r4, r0
 801551c:	460d      	mov	r5, r1
 801551e:	da12      	bge.n	8015546 <scalbn+0x56>
 8015520:	a327      	add	r3, pc, #156	; (adr r3, 80155c0 <scalbn+0xd0>)
 8015522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015526:	f7eb f87f 	bl	8000628 <__aeabi_dmul>
 801552a:	e009      	b.n	8015540 <scalbn+0x50>
 801552c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015530:	428a      	cmp	r2, r1
 8015532:	d10c      	bne.n	801554e <scalbn+0x5e>
 8015534:	ee10 2a10 	vmov	r2, s0
 8015538:	4620      	mov	r0, r4
 801553a:	4629      	mov	r1, r5
 801553c:	f7ea febe 	bl	80002bc <__adddf3>
 8015540:	4604      	mov	r4, r0
 8015542:	460d      	mov	r5, r1
 8015544:	e01c      	b.n	8015580 <scalbn+0x90>
 8015546:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801554a:	460b      	mov	r3, r1
 801554c:	3a36      	subs	r2, #54	; 0x36
 801554e:	4432      	add	r2, r6
 8015550:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015554:	428a      	cmp	r2, r1
 8015556:	dd0b      	ble.n	8015570 <scalbn+0x80>
 8015558:	ec45 4b11 	vmov	d1, r4, r5
 801555c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80155c8 <scalbn+0xd8>
 8015560:	f000 f83c 	bl	80155dc <copysign>
 8015564:	a318      	add	r3, pc, #96	; (adr r3, 80155c8 <scalbn+0xd8>)
 8015566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556a:	ec51 0b10 	vmov	r0, r1, d0
 801556e:	e7da      	b.n	8015526 <scalbn+0x36>
 8015570:	2a00      	cmp	r2, #0
 8015572:	dd08      	ble.n	8015586 <scalbn+0x96>
 8015574:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801557c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015580:	ec45 4b10 	vmov	d0, r4, r5
 8015584:	bd70      	pop	{r4, r5, r6, pc}
 8015586:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801558a:	da0d      	bge.n	80155a8 <scalbn+0xb8>
 801558c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015590:	429e      	cmp	r6, r3
 8015592:	ec45 4b11 	vmov	d1, r4, r5
 8015596:	dce1      	bgt.n	801555c <scalbn+0x6c>
 8015598:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80155c0 <scalbn+0xd0>
 801559c:	f000 f81e 	bl	80155dc <copysign>
 80155a0:	a307      	add	r3, pc, #28	; (adr r3, 80155c0 <scalbn+0xd0>)
 80155a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a6:	e7e0      	b.n	801556a <scalbn+0x7a>
 80155a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80155ac:	3236      	adds	r2, #54	; 0x36
 80155ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80155b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80155b6:	4620      	mov	r0, r4
 80155b8:	4629      	mov	r1, r5
 80155ba:	2200      	movs	r2, #0
 80155bc:	4b06      	ldr	r3, [pc, #24]	; (80155d8 <scalbn+0xe8>)
 80155be:	e7b2      	b.n	8015526 <scalbn+0x36>
 80155c0:	c2f8f359 	.word	0xc2f8f359
 80155c4:	01a56e1f 	.word	0x01a56e1f
 80155c8:	8800759c 	.word	0x8800759c
 80155cc:	7e37e43c 	.word	0x7e37e43c
 80155d0:	43500000 	.word	0x43500000
 80155d4:	ffff3cb0 	.word	0xffff3cb0
 80155d8:	3c900000 	.word	0x3c900000

080155dc <copysign>:
 80155dc:	ec51 0b10 	vmov	r0, r1, d0
 80155e0:	ee11 0a90 	vmov	r0, s3
 80155e4:	ee10 2a10 	vmov	r2, s0
 80155e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80155ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80155f0:	ea41 0300 	orr.w	r3, r1, r0
 80155f4:	ec43 2b10 	vmov	d0, r2, r3
 80155f8:	4770      	bx	lr
	...

080155fc <__errno>:
 80155fc:	4b01      	ldr	r3, [pc, #4]	; (8015604 <__errno+0x8>)
 80155fe:	6818      	ldr	r0, [r3, #0]
 8015600:	4770      	bx	lr
 8015602:	bf00      	nop
 8015604:	2000000c 	.word	0x2000000c

08015608 <__libc_init_array>:
 8015608:	b570      	push	{r4, r5, r6, lr}
 801560a:	4e0d      	ldr	r6, [pc, #52]	; (8015640 <__libc_init_array+0x38>)
 801560c:	4c0d      	ldr	r4, [pc, #52]	; (8015644 <__libc_init_array+0x3c>)
 801560e:	1ba4      	subs	r4, r4, r6
 8015610:	10a4      	asrs	r4, r4, #2
 8015612:	2500      	movs	r5, #0
 8015614:	42a5      	cmp	r5, r4
 8015616:	d109      	bne.n	801562c <__libc_init_array+0x24>
 8015618:	4e0b      	ldr	r6, [pc, #44]	; (8015648 <__libc_init_array+0x40>)
 801561a:	4c0c      	ldr	r4, [pc, #48]	; (801564c <__libc_init_array+0x44>)
 801561c:	f004 f9e8 	bl	80199f0 <_init>
 8015620:	1ba4      	subs	r4, r4, r6
 8015622:	10a4      	asrs	r4, r4, #2
 8015624:	2500      	movs	r5, #0
 8015626:	42a5      	cmp	r5, r4
 8015628:	d105      	bne.n	8015636 <__libc_init_array+0x2e>
 801562a:	bd70      	pop	{r4, r5, r6, pc}
 801562c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015630:	4798      	blx	r3
 8015632:	3501      	adds	r5, #1
 8015634:	e7ee      	b.n	8015614 <__libc_init_array+0xc>
 8015636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801563a:	4798      	blx	r3
 801563c:	3501      	adds	r5, #1
 801563e:	e7f2      	b.n	8015626 <__libc_init_array+0x1e>
 8015640:	0801a5fc 	.word	0x0801a5fc
 8015644:	0801a5fc 	.word	0x0801a5fc
 8015648:	0801a5fc 	.word	0x0801a5fc
 801564c:	0801a604 	.word	0x0801a604

08015650 <memcpy>:
 8015650:	b510      	push	{r4, lr}
 8015652:	1e43      	subs	r3, r0, #1
 8015654:	440a      	add	r2, r1
 8015656:	4291      	cmp	r1, r2
 8015658:	d100      	bne.n	801565c <memcpy+0xc>
 801565a:	bd10      	pop	{r4, pc}
 801565c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015664:	e7f7      	b.n	8015656 <memcpy+0x6>

08015666 <memset>:
 8015666:	4402      	add	r2, r0
 8015668:	4603      	mov	r3, r0
 801566a:	4293      	cmp	r3, r2
 801566c:	d100      	bne.n	8015670 <memset+0xa>
 801566e:	4770      	bx	lr
 8015670:	f803 1b01 	strb.w	r1, [r3], #1
 8015674:	e7f9      	b.n	801566a <memset+0x4>

08015676 <__cvt>:
 8015676:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801567a:	ec55 4b10 	vmov	r4, r5, d0
 801567e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015680:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015684:	2d00      	cmp	r5, #0
 8015686:	460e      	mov	r6, r1
 8015688:	4691      	mov	r9, r2
 801568a:	4619      	mov	r1, r3
 801568c:	bfb8      	it	lt
 801568e:	4622      	movlt	r2, r4
 8015690:	462b      	mov	r3, r5
 8015692:	f027 0720 	bic.w	r7, r7, #32
 8015696:	bfbb      	ittet	lt
 8015698:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801569c:	461d      	movlt	r5, r3
 801569e:	2300      	movge	r3, #0
 80156a0:	232d      	movlt	r3, #45	; 0x2d
 80156a2:	bfb8      	it	lt
 80156a4:	4614      	movlt	r4, r2
 80156a6:	2f46      	cmp	r7, #70	; 0x46
 80156a8:	700b      	strb	r3, [r1, #0]
 80156aa:	d004      	beq.n	80156b6 <__cvt+0x40>
 80156ac:	2f45      	cmp	r7, #69	; 0x45
 80156ae:	d100      	bne.n	80156b2 <__cvt+0x3c>
 80156b0:	3601      	adds	r6, #1
 80156b2:	2102      	movs	r1, #2
 80156b4:	e000      	b.n	80156b8 <__cvt+0x42>
 80156b6:	2103      	movs	r1, #3
 80156b8:	ab03      	add	r3, sp, #12
 80156ba:	9301      	str	r3, [sp, #4]
 80156bc:	ab02      	add	r3, sp, #8
 80156be:	9300      	str	r3, [sp, #0]
 80156c0:	4632      	mov	r2, r6
 80156c2:	4653      	mov	r3, sl
 80156c4:	ec45 4b10 	vmov	d0, r4, r5
 80156c8:	f001 fdfe 	bl	80172c8 <_dtoa_r>
 80156cc:	2f47      	cmp	r7, #71	; 0x47
 80156ce:	4680      	mov	r8, r0
 80156d0:	d102      	bne.n	80156d8 <__cvt+0x62>
 80156d2:	f019 0f01 	tst.w	r9, #1
 80156d6:	d026      	beq.n	8015726 <__cvt+0xb0>
 80156d8:	2f46      	cmp	r7, #70	; 0x46
 80156da:	eb08 0906 	add.w	r9, r8, r6
 80156de:	d111      	bne.n	8015704 <__cvt+0x8e>
 80156e0:	f898 3000 	ldrb.w	r3, [r8]
 80156e4:	2b30      	cmp	r3, #48	; 0x30
 80156e6:	d10a      	bne.n	80156fe <__cvt+0x88>
 80156e8:	2200      	movs	r2, #0
 80156ea:	2300      	movs	r3, #0
 80156ec:	4620      	mov	r0, r4
 80156ee:	4629      	mov	r1, r5
 80156f0:	f7eb fa02 	bl	8000af8 <__aeabi_dcmpeq>
 80156f4:	b918      	cbnz	r0, 80156fe <__cvt+0x88>
 80156f6:	f1c6 0601 	rsb	r6, r6, #1
 80156fa:	f8ca 6000 	str.w	r6, [sl]
 80156fe:	f8da 3000 	ldr.w	r3, [sl]
 8015702:	4499      	add	r9, r3
 8015704:	2200      	movs	r2, #0
 8015706:	2300      	movs	r3, #0
 8015708:	4620      	mov	r0, r4
 801570a:	4629      	mov	r1, r5
 801570c:	f7eb f9f4 	bl	8000af8 <__aeabi_dcmpeq>
 8015710:	b938      	cbnz	r0, 8015722 <__cvt+0xac>
 8015712:	2230      	movs	r2, #48	; 0x30
 8015714:	9b03      	ldr	r3, [sp, #12]
 8015716:	454b      	cmp	r3, r9
 8015718:	d205      	bcs.n	8015726 <__cvt+0xb0>
 801571a:	1c59      	adds	r1, r3, #1
 801571c:	9103      	str	r1, [sp, #12]
 801571e:	701a      	strb	r2, [r3, #0]
 8015720:	e7f8      	b.n	8015714 <__cvt+0x9e>
 8015722:	f8cd 900c 	str.w	r9, [sp, #12]
 8015726:	9b03      	ldr	r3, [sp, #12]
 8015728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801572a:	eba3 0308 	sub.w	r3, r3, r8
 801572e:	4640      	mov	r0, r8
 8015730:	6013      	str	r3, [r2, #0]
 8015732:	b004      	add	sp, #16
 8015734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015738 <__exponent>:
 8015738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801573a:	2900      	cmp	r1, #0
 801573c:	4604      	mov	r4, r0
 801573e:	bfba      	itte	lt
 8015740:	4249      	neglt	r1, r1
 8015742:	232d      	movlt	r3, #45	; 0x2d
 8015744:	232b      	movge	r3, #43	; 0x2b
 8015746:	2909      	cmp	r1, #9
 8015748:	f804 2b02 	strb.w	r2, [r4], #2
 801574c:	7043      	strb	r3, [r0, #1]
 801574e:	dd20      	ble.n	8015792 <__exponent+0x5a>
 8015750:	f10d 0307 	add.w	r3, sp, #7
 8015754:	461f      	mov	r7, r3
 8015756:	260a      	movs	r6, #10
 8015758:	fb91 f5f6 	sdiv	r5, r1, r6
 801575c:	fb06 1115 	mls	r1, r6, r5, r1
 8015760:	3130      	adds	r1, #48	; 0x30
 8015762:	2d09      	cmp	r5, #9
 8015764:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015768:	f103 32ff 	add.w	r2, r3, #4294967295
 801576c:	4629      	mov	r1, r5
 801576e:	dc09      	bgt.n	8015784 <__exponent+0x4c>
 8015770:	3130      	adds	r1, #48	; 0x30
 8015772:	3b02      	subs	r3, #2
 8015774:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015778:	42bb      	cmp	r3, r7
 801577a:	4622      	mov	r2, r4
 801577c:	d304      	bcc.n	8015788 <__exponent+0x50>
 801577e:	1a10      	subs	r0, r2, r0
 8015780:	b003      	add	sp, #12
 8015782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015784:	4613      	mov	r3, r2
 8015786:	e7e7      	b.n	8015758 <__exponent+0x20>
 8015788:	f813 2b01 	ldrb.w	r2, [r3], #1
 801578c:	f804 2b01 	strb.w	r2, [r4], #1
 8015790:	e7f2      	b.n	8015778 <__exponent+0x40>
 8015792:	2330      	movs	r3, #48	; 0x30
 8015794:	4419      	add	r1, r3
 8015796:	7083      	strb	r3, [r0, #2]
 8015798:	1d02      	adds	r2, r0, #4
 801579a:	70c1      	strb	r1, [r0, #3]
 801579c:	e7ef      	b.n	801577e <__exponent+0x46>
	...

080157a0 <_printf_float>:
 80157a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a4:	b08d      	sub	sp, #52	; 0x34
 80157a6:	460c      	mov	r4, r1
 80157a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80157ac:	4616      	mov	r6, r2
 80157ae:	461f      	mov	r7, r3
 80157b0:	4605      	mov	r5, r0
 80157b2:	f002 fe7b 	bl	80184ac <_localeconv_r>
 80157b6:	6803      	ldr	r3, [r0, #0]
 80157b8:	9304      	str	r3, [sp, #16]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7ea fd20 	bl	8000200 <strlen>
 80157c0:	2300      	movs	r3, #0
 80157c2:	930a      	str	r3, [sp, #40]	; 0x28
 80157c4:	f8d8 3000 	ldr.w	r3, [r8]
 80157c8:	9005      	str	r0, [sp, #20]
 80157ca:	3307      	adds	r3, #7
 80157cc:	f023 0307 	bic.w	r3, r3, #7
 80157d0:	f103 0208 	add.w	r2, r3, #8
 80157d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80157d8:	f8d4 b000 	ldr.w	fp, [r4]
 80157dc:	f8c8 2000 	str.w	r2, [r8]
 80157e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80157e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80157ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80157f0:	9307      	str	r3, [sp, #28]
 80157f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80157f6:	f04f 32ff 	mov.w	r2, #4294967295
 80157fa:	4ba7      	ldr	r3, [pc, #668]	; (8015a98 <_printf_float+0x2f8>)
 80157fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015800:	f7eb f9ac 	bl	8000b5c <__aeabi_dcmpun>
 8015804:	bb70      	cbnz	r0, 8015864 <_printf_float+0xc4>
 8015806:	f04f 32ff 	mov.w	r2, #4294967295
 801580a:	4ba3      	ldr	r3, [pc, #652]	; (8015a98 <_printf_float+0x2f8>)
 801580c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015810:	f7eb f986 	bl	8000b20 <__aeabi_dcmple>
 8015814:	bb30      	cbnz	r0, 8015864 <_printf_float+0xc4>
 8015816:	2200      	movs	r2, #0
 8015818:	2300      	movs	r3, #0
 801581a:	4640      	mov	r0, r8
 801581c:	4649      	mov	r1, r9
 801581e:	f7eb f975 	bl	8000b0c <__aeabi_dcmplt>
 8015822:	b110      	cbz	r0, 801582a <_printf_float+0x8a>
 8015824:	232d      	movs	r3, #45	; 0x2d
 8015826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801582a:	4a9c      	ldr	r2, [pc, #624]	; (8015a9c <_printf_float+0x2fc>)
 801582c:	4b9c      	ldr	r3, [pc, #624]	; (8015aa0 <_printf_float+0x300>)
 801582e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015832:	bf8c      	ite	hi
 8015834:	4690      	movhi	r8, r2
 8015836:	4698      	movls	r8, r3
 8015838:	2303      	movs	r3, #3
 801583a:	f02b 0204 	bic.w	r2, fp, #4
 801583e:	6123      	str	r3, [r4, #16]
 8015840:	6022      	str	r2, [r4, #0]
 8015842:	f04f 0900 	mov.w	r9, #0
 8015846:	9700      	str	r7, [sp, #0]
 8015848:	4633      	mov	r3, r6
 801584a:	aa0b      	add	r2, sp, #44	; 0x2c
 801584c:	4621      	mov	r1, r4
 801584e:	4628      	mov	r0, r5
 8015850:	f000 f9e6 	bl	8015c20 <_printf_common>
 8015854:	3001      	adds	r0, #1
 8015856:	f040 808d 	bne.w	8015974 <_printf_float+0x1d4>
 801585a:	f04f 30ff 	mov.w	r0, #4294967295
 801585e:	b00d      	add	sp, #52	; 0x34
 8015860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015864:	4642      	mov	r2, r8
 8015866:	464b      	mov	r3, r9
 8015868:	4640      	mov	r0, r8
 801586a:	4649      	mov	r1, r9
 801586c:	f7eb f976 	bl	8000b5c <__aeabi_dcmpun>
 8015870:	b110      	cbz	r0, 8015878 <_printf_float+0xd8>
 8015872:	4a8c      	ldr	r2, [pc, #560]	; (8015aa4 <_printf_float+0x304>)
 8015874:	4b8c      	ldr	r3, [pc, #560]	; (8015aa8 <_printf_float+0x308>)
 8015876:	e7da      	b.n	801582e <_printf_float+0x8e>
 8015878:	6861      	ldr	r1, [r4, #4]
 801587a:	1c4b      	adds	r3, r1, #1
 801587c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015880:	a80a      	add	r0, sp, #40	; 0x28
 8015882:	d13e      	bne.n	8015902 <_printf_float+0x162>
 8015884:	2306      	movs	r3, #6
 8015886:	6063      	str	r3, [r4, #4]
 8015888:	2300      	movs	r3, #0
 801588a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801588e:	ab09      	add	r3, sp, #36	; 0x24
 8015890:	9300      	str	r3, [sp, #0]
 8015892:	ec49 8b10 	vmov	d0, r8, r9
 8015896:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801589a:	6022      	str	r2, [r4, #0]
 801589c:	f8cd a004 	str.w	sl, [sp, #4]
 80158a0:	6861      	ldr	r1, [r4, #4]
 80158a2:	4628      	mov	r0, r5
 80158a4:	f7ff fee7 	bl	8015676 <__cvt>
 80158a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80158ac:	2b47      	cmp	r3, #71	; 0x47
 80158ae:	4680      	mov	r8, r0
 80158b0:	d109      	bne.n	80158c6 <_printf_float+0x126>
 80158b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158b4:	1cd8      	adds	r0, r3, #3
 80158b6:	db02      	blt.n	80158be <_printf_float+0x11e>
 80158b8:	6862      	ldr	r2, [r4, #4]
 80158ba:	4293      	cmp	r3, r2
 80158bc:	dd47      	ble.n	801594e <_printf_float+0x1ae>
 80158be:	f1aa 0a02 	sub.w	sl, sl, #2
 80158c2:	fa5f fa8a 	uxtb.w	sl, sl
 80158c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80158ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158cc:	d824      	bhi.n	8015918 <_printf_float+0x178>
 80158ce:	3901      	subs	r1, #1
 80158d0:	4652      	mov	r2, sl
 80158d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80158d6:	9109      	str	r1, [sp, #36]	; 0x24
 80158d8:	f7ff ff2e 	bl	8015738 <__exponent>
 80158dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158de:	1813      	adds	r3, r2, r0
 80158e0:	2a01      	cmp	r2, #1
 80158e2:	4681      	mov	r9, r0
 80158e4:	6123      	str	r3, [r4, #16]
 80158e6:	dc02      	bgt.n	80158ee <_printf_float+0x14e>
 80158e8:	6822      	ldr	r2, [r4, #0]
 80158ea:	07d1      	lsls	r1, r2, #31
 80158ec:	d501      	bpl.n	80158f2 <_printf_float+0x152>
 80158ee:	3301      	adds	r3, #1
 80158f0:	6123      	str	r3, [r4, #16]
 80158f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d0a5      	beq.n	8015846 <_printf_float+0xa6>
 80158fa:	232d      	movs	r3, #45	; 0x2d
 80158fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015900:	e7a1      	b.n	8015846 <_printf_float+0xa6>
 8015902:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015906:	f000 8177 	beq.w	8015bf8 <_printf_float+0x458>
 801590a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801590e:	d1bb      	bne.n	8015888 <_printf_float+0xe8>
 8015910:	2900      	cmp	r1, #0
 8015912:	d1b9      	bne.n	8015888 <_printf_float+0xe8>
 8015914:	2301      	movs	r3, #1
 8015916:	e7b6      	b.n	8015886 <_printf_float+0xe6>
 8015918:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801591c:	d119      	bne.n	8015952 <_printf_float+0x1b2>
 801591e:	2900      	cmp	r1, #0
 8015920:	6863      	ldr	r3, [r4, #4]
 8015922:	dd0c      	ble.n	801593e <_printf_float+0x19e>
 8015924:	6121      	str	r1, [r4, #16]
 8015926:	b913      	cbnz	r3, 801592e <_printf_float+0x18e>
 8015928:	6822      	ldr	r2, [r4, #0]
 801592a:	07d2      	lsls	r2, r2, #31
 801592c:	d502      	bpl.n	8015934 <_printf_float+0x194>
 801592e:	3301      	adds	r3, #1
 8015930:	440b      	add	r3, r1
 8015932:	6123      	str	r3, [r4, #16]
 8015934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015936:	65a3      	str	r3, [r4, #88]	; 0x58
 8015938:	f04f 0900 	mov.w	r9, #0
 801593c:	e7d9      	b.n	80158f2 <_printf_float+0x152>
 801593e:	b913      	cbnz	r3, 8015946 <_printf_float+0x1a6>
 8015940:	6822      	ldr	r2, [r4, #0]
 8015942:	07d0      	lsls	r0, r2, #31
 8015944:	d501      	bpl.n	801594a <_printf_float+0x1aa>
 8015946:	3302      	adds	r3, #2
 8015948:	e7f3      	b.n	8015932 <_printf_float+0x192>
 801594a:	2301      	movs	r3, #1
 801594c:	e7f1      	b.n	8015932 <_printf_float+0x192>
 801594e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015952:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015956:	4293      	cmp	r3, r2
 8015958:	db05      	blt.n	8015966 <_printf_float+0x1c6>
 801595a:	6822      	ldr	r2, [r4, #0]
 801595c:	6123      	str	r3, [r4, #16]
 801595e:	07d1      	lsls	r1, r2, #31
 8015960:	d5e8      	bpl.n	8015934 <_printf_float+0x194>
 8015962:	3301      	adds	r3, #1
 8015964:	e7e5      	b.n	8015932 <_printf_float+0x192>
 8015966:	2b00      	cmp	r3, #0
 8015968:	bfd4      	ite	le
 801596a:	f1c3 0302 	rsble	r3, r3, #2
 801596e:	2301      	movgt	r3, #1
 8015970:	4413      	add	r3, r2
 8015972:	e7de      	b.n	8015932 <_printf_float+0x192>
 8015974:	6823      	ldr	r3, [r4, #0]
 8015976:	055a      	lsls	r2, r3, #21
 8015978:	d407      	bmi.n	801598a <_printf_float+0x1ea>
 801597a:	6923      	ldr	r3, [r4, #16]
 801597c:	4642      	mov	r2, r8
 801597e:	4631      	mov	r1, r6
 8015980:	4628      	mov	r0, r5
 8015982:	47b8      	blx	r7
 8015984:	3001      	adds	r0, #1
 8015986:	d12b      	bne.n	80159e0 <_printf_float+0x240>
 8015988:	e767      	b.n	801585a <_printf_float+0xba>
 801598a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801598e:	f240 80dc 	bls.w	8015b4a <_printf_float+0x3aa>
 8015992:	2200      	movs	r2, #0
 8015994:	2300      	movs	r3, #0
 8015996:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801599a:	f7eb f8ad 	bl	8000af8 <__aeabi_dcmpeq>
 801599e:	2800      	cmp	r0, #0
 80159a0:	d033      	beq.n	8015a0a <_printf_float+0x26a>
 80159a2:	2301      	movs	r3, #1
 80159a4:	4a41      	ldr	r2, [pc, #260]	; (8015aac <_printf_float+0x30c>)
 80159a6:	4631      	mov	r1, r6
 80159a8:	4628      	mov	r0, r5
 80159aa:	47b8      	blx	r7
 80159ac:	3001      	adds	r0, #1
 80159ae:	f43f af54 	beq.w	801585a <_printf_float+0xba>
 80159b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159b6:	429a      	cmp	r2, r3
 80159b8:	db02      	blt.n	80159c0 <_printf_float+0x220>
 80159ba:	6823      	ldr	r3, [r4, #0]
 80159bc:	07d8      	lsls	r0, r3, #31
 80159be:	d50f      	bpl.n	80159e0 <_printf_float+0x240>
 80159c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159c4:	4631      	mov	r1, r6
 80159c6:	4628      	mov	r0, r5
 80159c8:	47b8      	blx	r7
 80159ca:	3001      	adds	r0, #1
 80159cc:	f43f af45 	beq.w	801585a <_printf_float+0xba>
 80159d0:	f04f 0800 	mov.w	r8, #0
 80159d4:	f104 091a 	add.w	r9, r4, #26
 80159d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159da:	3b01      	subs	r3, #1
 80159dc:	4543      	cmp	r3, r8
 80159de:	dc09      	bgt.n	80159f4 <_printf_float+0x254>
 80159e0:	6823      	ldr	r3, [r4, #0]
 80159e2:	079b      	lsls	r3, r3, #30
 80159e4:	f100 8103 	bmi.w	8015bee <_printf_float+0x44e>
 80159e8:	68e0      	ldr	r0, [r4, #12]
 80159ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159ec:	4298      	cmp	r0, r3
 80159ee:	bfb8      	it	lt
 80159f0:	4618      	movlt	r0, r3
 80159f2:	e734      	b.n	801585e <_printf_float+0xbe>
 80159f4:	2301      	movs	r3, #1
 80159f6:	464a      	mov	r2, r9
 80159f8:	4631      	mov	r1, r6
 80159fa:	4628      	mov	r0, r5
 80159fc:	47b8      	blx	r7
 80159fe:	3001      	adds	r0, #1
 8015a00:	f43f af2b 	beq.w	801585a <_printf_float+0xba>
 8015a04:	f108 0801 	add.w	r8, r8, #1
 8015a08:	e7e6      	b.n	80159d8 <_printf_float+0x238>
 8015a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	dc2b      	bgt.n	8015a68 <_printf_float+0x2c8>
 8015a10:	2301      	movs	r3, #1
 8015a12:	4a26      	ldr	r2, [pc, #152]	; (8015aac <_printf_float+0x30c>)
 8015a14:	4631      	mov	r1, r6
 8015a16:	4628      	mov	r0, r5
 8015a18:	47b8      	blx	r7
 8015a1a:	3001      	adds	r0, #1
 8015a1c:	f43f af1d 	beq.w	801585a <_printf_float+0xba>
 8015a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a22:	b923      	cbnz	r3, 8015a2e <_printf_float+0x28e>
 8015a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a26:	b913      	cbnz	r3, 8015a2e <_printf_float+0x28e>
 8015a28:	6823      	ldr	r3, [r4, #0]
 8015a2a:	07d9      	lsls	r1, r3, #31
 8015a2c:	d5d8      	bpl.n	80159e0 <_printf_float+0x240>
 8015a2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a32:	4631      	mov	r1, r6
 8015a34:	4628      	mov	r0, r5
 8015a36:	47b8      	blx	r7
 8015a38:	3001      	adds	r0, #1
 8015a3a:	f43f af0e 	beq.w	801585a <_printf_float+0xba>
 8015a3e:	f04f 0900 	mov.w	r9, #0
 8015a42:	f104 0a1a 	add.w	sl, r4, #26
 8015a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a48:	425b      	negs	r3, r3
 8015a4a:	454b      	cmp	r3, r9
 8015a4c:	dc01      	bgt.n	8015a52 <_printf_float+0x2b2>
 8015a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a50:	e794      	b.n	801597c <_printf_float+0x1dc>
 8015a52:	2301      	movs	r3, #1
 8015a54:	4652      	mov	r2, sl
 8015a56:	4631      	mov	r1, r6
 8015a58:	4628      	mov	r0, r5
 8015a5a:	47b8      	blx	r7
 8015a5c:	3001      	adds	r0, #1
 8015a5e:	f43f aefc 	beq.w	801585a <_printf_float+0xba>
 8015a62:	f109 0901 	add.w	r9, r9, #1
 8015a66:	e7ee      	b.n	8015a46 <_printf_float+0x2a6>
 8015a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	bfa8      	it	ge
 8015a70:	461a      	movge	r2, r3
 8015a72:	2a00      	cmp	r2, #0
 8015a74:	4691      	mov	r9, r2
 8015a76:	dd07      	ble.n	8015a88 <_printf_float+0x2e8>
 8015a78:	4613      	mov	r3, r2
 8015a7a:	4631      	mov	r1, r6
 8015a7c:	4642      	mov	r2, r8
 8015a7e:	4628      	mov	r0, r5
 8015a80:	47b8      	blx	r7
 8015a82:	3001      	adds	r0, #1
 8015a84:	f43f aee9 	beq.w	801585a <_printf_float+0xba>
 8015a88:	f104 031a 	add.w	r3, r4, #26
 8015a8c:	f04f 0b00 	mov.w	fp, #0
 8015a90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a94:	9306      	str	r3, [sp, #24]
 8015a96:	e015      	b.n	8015ac4 <_printf_float+0x324>
 8015a98:	7fefffff 	.word	0x7fefffff
 8015a9c:	0801a2c4 	.word	0x0801a2c4
 8015aa0:	0801a2c0 	.word	0x0801a2c0
 8015aa4:	0801a2cc 	.word	0x0801a2cc
 8015aa8:	0801a2c8 	.word	0x0801a2c8
 8015aac:	0801a4eb 	.word	0x0801a4eb
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	9a06      	ldr	r2, [sp, #24]
 8015ab4:	4631      	mov	r1, r6
 8015ab6:	4628      	mov	r0, r5
 8015ab8:	47b8      	blx	r7
 8015aba:	3001      	adds	r0, #1
 8015abc:	f43f aecd 	beq.w	801585a <_printf_float+0xba>
 8015ac0:	f10b 0b01 	add.w	fp, fp, #1
 8015ac4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015ac8:	ebaa 0309 	sub.w	r3, sl, r9
 8015acc:	455b      	cmp	r3, fp
 8015ace:	dcef      	bgt.n	8015ab0 <_printf_float+0x310>
 8015ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	44d0      	add	r8, sl
 8015ad8:	db15      	blt.n	8015b06 <_printf_float+0x366>
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	07da      	lsls	r2, r3, #31
 8015ade:	d412      	bmi.n	8015b06 <_printf_float+0x366>
 8015ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ae4:	eba3 020a 	sub.w	r2, r3, sl
 8015ae8:	eba3 0a01 	sub.w	sl, r3, r1
 8015aec:	4592      	cmp	sl, r2
 8015aee:	bfa8      	it	ge
 8015af0:	4692      	movge	sl, r2
 8015af2:	f1ba 0f00 	cmp.w	sl, #0
 8015af6:	dc0e      	bgt.n	8015b16 <_printf_float+0x376>
 8015af8:	f04f 0800 	mov.w	r8, #0
 8015afc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015b00:	f104 091a 	add.w	r9, r4, #26
 8015b04:	e019      	b.n	8015b3a <_printf_float+0x39a>
 8015b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b0a:	4631      	mov	r1, r6
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	47b8      	blx	r7
 8015b10:	3001      	adds	r0, #1
 8015b12:	d1e5      	bne.n	8015ae0 <_printf_float+0x340>
 8015b14:	e6a1      	b.n	801585a <_printf_float+0xba>
 8015b16:	4653      	mov	r3, sl
 8015b18:	4642      	mov	r2, r8
 8015b1a:	4631      	mov	r1, r6
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	47b8      	blx	r7
 8015b20:	3001      	adds	r0, #1
 8015b22:	d1e9      	bne.n	8015af8 <_printf_float+0x358>
 8015b24:	e699      	b.n	801585a <_printf_float+0xba>
 8015b26:	2301      	movs	r3, #1
 8015b28:	464a      	mov	r2, r9
 8015b2a:	4631      	mov	r1, r6
 8015b2c:	4628      	mov	r0, r5
 8015b2e:	47b8      	blx	r7
 8015b30:	3001      	adds	r0, #1
 8015b32:	f43f ae92 	beq.w	801585a <_printf_float+0xba>
 8015b36:	f108 0801 	add.w	r8, r8, #1
 8015b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b3e:	1a9b      	subs	r3, r3, r2
 8015b40:	eba3 030a 	sub.w	r3, r3, sl
 8015b44:	4543      	cmp	r3, r8
 8015b46:	dcee      	bgt.n	8015b26 <_printf_float+0x386>
 8015b48:	e74a      	b.n	80159e0 <_printf_float+0x240>
 8015b4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b4c:	2a01      	cmp	r2, #1
 8015b4e:	dc01      	bgt.n	8015b54 <_printf_float+0x3b4>
 8015b50:	07db      	lsls	r3, r3, #31
 8015b52:	d53a      	bpl.n	8015bca <_printf_float+0x42a>
 8015b54:	2301      	movs	r3, #1
 8015b56:	4642      	mov	r2, r8
 8015b58:	4631      	mov	r1, r6
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	47b8      	blx	r7
 8015b5e:	3001      	adds	r0, #1
 8015b60:	f43f ae7b 	beq.w	801585a <_printf_float+0xba>
 8015b64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b68:	4631      	mov	r1, r6
 8015b6a:	4628      	mov	r0, r5
 8015b6c:	47b8      	blx	r7
 8015b6e:	3001      	adds	r0, #1
 8015b70:	f108 0801 	add.w	r8, r8, #1
 8015b74:	f43f ae71 	beq.w	801585a <_printf_float+0xba>
 8015b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b84:	2300      	movs	r3, #0
 8015b86:	f7ea ffb7 	bl	8000af8 <__aeabi_dcmpeq>
 8015b8a:	b9c8      	cbnz	r0, 8015bc0 <_printf_float+0x420>
 8015b8c:	4653      	mov	r3, sl
 8015b8e:	4642      	mov	r2, r8
 8015b90:	4631      	mov	r1, r6
 8015b92:	4628      	mov	r0, r5
 8015b94:	47b8      	blx	r7
 8015b96:	3001      	adds	r0, #1
 8015b98:	d10e      	bne.n	8015bb8 <_printf_float+0x418>
 8015b9a:	e65e      	b.n	801585a <_printf_float+0xba>
 8015b9c:	2301      	movs	r3, #1
 8015b9e:	4652      	mov	r2, sl
 8015ba0:	4631      	mov	r1, r6
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	47b8      	blx	r7
 8015ba6:	3001      	adds	r0, #1
 8015ba8:	f43f ae57 	beq.w	801585a <_printf_float+0xba>
 8015bac:	f108 0801 	add.w	r8, r8, #1
 8015bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bb2:	3b01      	subs	r3, #1
 8015bb4:	4543      	cmp	r3, r8
 8015bb6:	dcf1      	bgt.n	8015b9c <_printf_float+0x3fc>
 8015bb8:	464b      	mov	r3, r9
 8015bba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015bbe:	e6de      	b.n	801597e <_printf_float+0x1de>
 8015bc0:	f04f 0800 	mov.w	r8, #0
 8015bc4:	f104 0a1a 	add.w	sl, r4, #26
 8015bc8:	e7f2      	b.n	8015bb0 <_printf_float+0x410>
 8015bca:	2301      	movs	r3, #1
 8015bcc:	e7df      	b.n	8015b8e <_printf_float+0x3ee>
 8015bce:	2301      	movs	r3, #1
 8015bd0:	464a      	mov	r2, r9
 8015bd2:	4631      	mov	r1, r6
 8015bd4:	4628      	mov	r0, r5
 8015bd6:	47b8      	blx	r7
 8015bd8:	3001      	adds	r0, #1
 8015bda:	f43f ae3e 	beq.w	801585a <_printf_float+0xba>
 8015bde:	f108 0801 	add.w	r8, r8, #1
 8015be2:	68e3      	ldr	r3, [r4, #12]
 8015be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015be6:	1a9b      	subs	r3, r3, r2
 8015be8:	4543      	cmp	r3, r8
 8015bea:	dcf0      	bgt.n	8015bce <_printf_float+0x42e>
 8015bec:	e6fc      	b.n	80159e8 <_printf_float+0x248>
 8015bee:	f04f 0800 	mov.w	r8, #0
 8015bf2:	f104 0919 	add.w	r9, r4, #25
 8015bf6:	e7f4      	b.n	8015be2 <_printf_float+0x442>
 8015bf8:	2900      	cmp	r1, #0
 8015bfa:	f43f ae8b 	beq.w	8015914 <_printf_float+0x174>
 8015bfe:	2300      	movs	r3, #0
 8015c00:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015c04:	ab09      	add	r3, sp, #36	; 0x24
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	ec49 8b10 	vmov	d0, r8, r9
 8015c0c:	6022      	str	r2, [r4, #0]
 8015c0e:	f8cd a004 	str.w	sl, [sp, #4]
 8015c12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015c16:	4628      	mov	r0, r5
 8015c18:	f7ff fd2d 	bl	8015676 <__cvt>
 8015c1c:	4680      	mov	r8, r0
 8015c1e:	e648      	b.n	80158b2 <_printf_float+0x112>

08015c20 <_printf_common>:
 8015c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c24:	4691      	mov	r9, r2
 8015c26:	461f      	mov	r7, r3
 8015c28:	688a      	ldr	r2, [r1, #8]
 8015c2a:	690b      	ldr	r3, [r1, #16]
 8015c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c30:	4293      	cmp	r3, r2
 8015c32:	bfb8      	it	lt
 8015c34:	4613      	movlt	r3, r2
 8015c36:	f8c9 3000 	str.w	r3, [r9]
 8015c3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015c3e:	4606      	mov	r6, r0
 8015c40:	460c      	mov	r4, r1
 8015c42:	b112      	cbz	r2, 8015c4a <_printf_common+0x2a>
 8015c44:	3301      	adds	r3, #1
 8015c46:	f8c9 3000 	str.w	r3, [r9]
 8015c4a:	6823      	ldr	r3, [r4, #0]
 8015c4c:	0699      	lsls	r1, r3, #26
 8015c4e:	bf42      	ittt	mi
 8015c50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015c54:	3302      	addmi	r3, #2
 8015c56:	f8c9 3000 	strmi.w	r3, [r9]
 8015c5a:	6825      	ldr	r5, [r4, #0]
 8015c5c:	f015 0506 	ands.w	r5, r5, #6
 8015c60:	d107      	bne.n	8015c72 <_printf_common+0x52>
 8015c62:	f104 0a19 	add.w	sl, r4, #25
 8015c66:	68e3      	ldr	r3, [r4, #12]
 8015c68:	f8d9 2000 	ldr.w	r2, [r9]
 8015c6c:	1a9b      	subs	r3, r3, r2
 8015c6e:	42ab      	cmp	r3, r5
 8015c70:	dc28      	bgt.n	8015cc4 <_printf_common+0xa4>
 8015c72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015c76:	6822      	ldr	r2, [r4, #0]
 8015c78:	3300      	adds	r3, #0
 8015c7a:	bf18      	it	ne
 8015c7c:	2301      	movne	r3, #1
 8015c7e:	0692      	lsls	r2, r2, #26
 8015c80:	d42d      	bmi.n	8015cde <_printf_common+0xbe>
 8015c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c86:	4639      	mov	r1, r7
 8015c88:	4630      	mov	r0, r6
 8015c8a:	47c0      	blx	r8
 8015c8c:	3001      	adds	r0, #1
 8015c8e:	d020      	beq.n	8015cd2 <_printf_common+0xb2>
 8015c90:	6823      	ldr	r3, [r4, #0]
 8015c92:	68e5      	ldr	r5, [r4, #12]
 8015c94:	f8d9 2000 	ldr.w	r2, [r9]
 8015c98:	f003 0306 	and.w	r3, r3, #6
 8015c9c:	2b04      	cmp	r3, #4
 8015c9e:	bf08      	it	eq
 8015ca0:	1aad      	subeq	r5, r5, r2
 8015ca2:	68a3      	ldr	r3, [r4, #8]
 8015ca4:	6922      	ldr	r2, [r4, #16]
 8015ca6:	bf0c      	ite	eq
 8015ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015cac:	2500      	movne	r5, #0
 8015cae:	4293      	cmp	r3, r2
 8015cb0:	bfc4      	itt	gt
 8015cb2:	1a9b      	subgt	r3, r3, r2
 8015cb4:	18ed      	addgt	r5, r5, r3
 8015cb6:	f04f 0900 	mov.w	r9, #0
 8015cba:	341a      	adds	r4, #26
 8015cbc:	454d      	cmp	r5, r9
 8015cbe:	d11a      	bne.n	8015cf6 <_printf_common+0xd6>
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	e008      	b.n	8015cd6 <_printf_common+0xb6>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	4652      	mov	r2, sl
 8015cc8:	4639      	mov	r1, r7
 8015cca:	4630      	mov	r0, r6
 8015ccc:	47c0      	blx	r8
 8015cce:	3001      	adds	r0, #1
 8015cd0:	d103      	bne.n	8015cda <_printf_common+0xba>
 8015cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8015cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cda:	3501      	adds	r5, #1
 8015cdc:	e7c3      	b.n	8015c66 <_printf_common+0x46>
 8015cde:	18e1      	adds	r1, r4, r3
 8015ce0:	1c5a      	adds	r2, r3, #1
 8015ce2:	2030      	movs	r0, #48	; 0x30
 8015ce4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015ce8:	4422      	add	r2, r4
 8015cea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015cee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015cf2:	3302      	adds	r3, #2
 8015cf4:	e7c5      	b.n	8015c82 <_printf_common+0x62>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	4622      	mov	r2, r4
 8015cfa:	4639      	mov	r1, r7
 8015cfc:	4630      	mov	r0, r6
 8015cfe:	47c0      	blx	r8
 8015d00:	3001      	adds	r0, #1
 8015d02:	d0e6      	beq.n	8015cd2 <_printf_common+0xb2>
 8015d04:	f109 0901 	add.w	r9, r9, #1
 8015d08:	e7d8      	b.n	8015cbc <_printf_common+0x9c>
	...

08015d0c <_printf_i>:
 8015d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015d14:	460c      	mov	r4, r1
 8015d16:	7e09      	ldrb	r1, [r1, #24]
 8015d18:	b085      	sub	sp, #20
 8015d1a:	296e      	cmp	r1, #110	; 0x6e
 8015d1c:	4617      	mov	r7, r2
 8015d1e:	4606      	mov	r6, r0
 8015d20:	4698      	mov	r8, r3
 8015d22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015d24:	f000 80b3 	beq.w	8015e8e <_printf_i+0x182>
 8015d28:	d822      	bhi.n	8015d70 <_printf_i+0x64>
 8015d2a:	2963      	cmp	r1, #99	; 0x63
 8015d2c:	d036      	beq.n	8015d9c <_printf_i+0x90>
 8015d2e:	d80a      	bhi.n	8015d46 <_printf_i+0x3a>
 8015d30:	2900      	cmp	r1, #0
 8015d32:	f000 80b9 	beq.w	8015ea8 <_printf_i+0x19c>
 8015d36:	2958      	cmp	r1, #88	; 0x58
 8015d38:	f000 8083 	beq.w	8015e42 <_printf_i+0x136>
 8015d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015d44:	e032      	b.n	8015dac <_printf_i+0xa0>
 8015d46:	2964      	cmp	r1, #100	; 0x64
 8015d48:	d001      	beq.n	8015d4e <_printf_i+0x42>
 8015d4a:	2969      	cmp	r1, #105	; 0x69
 8015d4c:	d1f6      	bne.n	8015d3c <_printf_i+0x30>
 8015d4e:	6820      	ldr	r0, [r4, #0]
 8015d50:	6813      	ldr	r3, [r2, #0]
 8015d52:	0605      	lsls	r5, r0, #24
 8015d54:	f103 0104 	add.w	r1, r3, #4
 8015d58:	d52a      	bpl.n	8015db0 <_printf_i+0xa4>
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	6011      	str	r1, [r2, #0]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	da03      	bge.n	8015d6a <_printf_i+0x5e>
 8015d62:	222d      	movs	r2, #45	; 0x2d
 8015d64:	425b      	negs	r3, r3
 8015d66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015d6a:	486f      	ldr	r0, [pc, #444]	; (8015f28 <_printf_i+0x21c>)
 8015d6c:	220a      	movs	r2, #10
 8015d6e:	e039      	b.n	8015de4 <_printf_i+0xd8>
 8015d70:	2973      	cmp	r1, #115	; 0x73
 8015d72:	f000 809d 	beq.w	8015eb0 <_printf_i+0x1a4>
 8015d76:	d808      	bhi.n	8015d8a <_printf_i+0x7e>
 8015d78:	296f      	cmp	r1, #111	; 0x6f
 8015d7a:	d020      	beq.n	8015dbe <_printf_i+0xb2>
 8015d7c:	2970      	cmp	r1, #112	; 0x70
 8015d7e:	d1dd      	bne.n	8015d3c <_printf_i+0x30>
 8015d80:	6823      	ldr	r3, [r4, #0]
 8015d82:	f043 0320 	orr.w	r3, r3, #32
 8015d86:	6023      	str	r3, [r4, #0]
 8015d88:	e003      	b.n	8015d92 <_printf_i+0x86>
 8015d8a:	2975      	cmp	r1, #117	; 0x75
 8015d8c:	d017      	beq.n	8015dbe <_printf_i+0xb2>
 8015d8e:	2978      	cmp	r1, #120	; 0x78
 8015d90:	d1d4      	bne.n	8015d3c <_printf_i+0x30>
 8015d92:	2378      	movs	r3, #120	; 0x78
 8015d94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015d98:	4864      	ldr	r0, [pc, #400]	; (8015f2c <_printf_i+0x220>)
 8015d9a:	e055      	b.n	8015e48 <_printf_i+0x13c>
 8015d9c:	6813      	ldr	r3, [r2, #0]
 8015d9e:	1d19      	adds	r1, r3, #4
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	6011      	str	r1, [r2, #0]
 8015da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015dac:	2301      	movs	r3, #1
 8015dae:	e08c      	b.n	8015eca <_printf_i+0x1be>
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	6011      	str	r1, [r2, #0]
 8015db4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015db8:	bf18      	it	ne
 8015dba:	b21b      	sxthne	r3, r3
 8015dbc:	e7cf      	b.n	8015d5e <_printf_i+0x52>
 8015dbe:	6813      	ldr	r3, [r2, #0]
 8015dc0:	6825      	ldr	r5, [r4, #0]
 8015dc2:	1d18      	adds	r0, r3, #4
 8015dc4:	6010      	str	r0, [r2, #0]
 8015dc6:	0628      	lsls	r0, r5, #24
 8015dc8:	d501      	bpl.n	8015dce <_printf_i+0xc2>
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	e002      	b.n	8015dd4 <_printf_i+0xc8>
 8015dce:	0668      	lsls	r0, r5, #25
 8015dd0:	d5fb      	bpl.n	8015dca <_printf_i+0xbe>
 8015dd2:	881b      	ldrh	r3, [r3, #0]
 8015dd4:	4854      	ldr	r0, [pc, #336]	; (8015f28 <_printf_i+0x21c>)
 8015dd6:	296f      	cmp	r1, #111	; 0x6f
 8015dd8:	bf14      	ite	ne
 8015dda:	220a      	movne	r2, #10
 8015ddc:	2208      	moveq	r2, #8
 8015dde:	2100      	movs	r1, #0
 8015de0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015de4:	6865      	ldr	r5, [r4, #4]
 8015de6:	60a5      	str	r5, [r4, #8]
 8015de8:	2d00      	cmp	r5, #0
 8015dea:	f2c0 8095 	blt.w	8015f18 <_printf_i+0x20c>
 8015dee:	6821      	ldr	r1, [r4, #0]
 8015df0:	f021 0104 	bic.w	r1, r1, #4
 8015df4:	6021      	str	r1, [r4, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d13d      	bne.n	8015e76 <_printf_i+0x16a>
 8015dfa:	2d00      	cmp	r5, #0
 8015dfc:	f040 808e 	bne.w	8015f1c <_printf_i+0x210>
 8015e00:	4665      	mov	r5, ip
 8015e02:	2a08      	cmp	r2, #8
 8015e04:	d10b      	bne.n	8015e1e <_printf_i+0x112>
 8015e06:	6823      	ldr	r3, [r4, #0]
 8015e08:	07db      	lsls	r3, r3, #31
 8015e0a:	d508      	bpl.n	8015e1e <_printf_i+0x112>
 8015e0c:	6923      	ldr	r3, [r4, #16]
 8015e0e:	6862      	ldr	r2, [r4, #4]
 8015e10:	429a      	cmp	r2, r3
 8015e12:	bfde      	ittt	le
 8015e14:	2330      	movle	r3, #48	; 0x30
 8015e16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015e1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015e1e:	ebac 0305 	sub.w	r3, ip, r5
 8015e22:	6123      	str	r3, [r4, #16]
 8015e24:	f8cd 8000 	str.w	r8, [sp]
 8015e28:	463b      	mov	r3, r7
 8015e2a:	aa03      	add	r2, sp, #12
 8015e2c:	4621      	mov	r1, r4
 8015e2e:	4630      	mov	r0, r6
 8015e30:	f7ff fef6 	bl	8015c20 <_printf_common>
 8015e34:	3001      	adds	r0, #1
 8015e36:	d14d      	bne.n	8015ed4 <_printf_i+0x1c8>
 8015e38:	f04f 30ff 	mov.w	r0, #4294967295
 8015e3c:	b005      	add	sp, #20
 8015e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e42:	4839      	ldr	r0, [pc, #228]	; (8015f28 <_printf_i+0x21c>)
 8015e44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015e48:	6813      	ldr	r3, [r2, #0]
 8015e4a:	6821      	ldr	r1, [r4, #0]
 8015e4c:	1d1d      	adds	r5, r3, #4
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	6015      	str	r5, [r2, #0]
 8015e52:	060a      	lsls	r2, r1, #24
 8015e54:	d50b      	bpl.n	8015e6e <_printf_i+0x162>
 8015e56:	07ca      	lsls	r2, r1, #31
 8015e58:	bf44      	itt	mi
 8015e5a:	f041 0120 	orrmi.w	r1, r1, #32
 8015e5e:	6021      	strmi	r1, [r4, #0]
 8015e60:	b91b      	cbnz	r3, 8015e6a <_printf_i+0x15e>
 8015e62:	6822      	ldr	r2, [r4, #0]
 8015e64:	f022 0220 	bic.w	r2, r2, #32
 8015e68:	6022      	str	r2, [r4, #0]
 8015e6a:	2210      	movs	r2, #16
 8015e6c:	e7b7      	b.n	8015dde <_printf_i+0xd2>
 8015e6e:	064d      	lsls	r5, r1, #25
 8015e70:	bf48      	it	mi
 8015e72:	b29b      	uxthmi	r3, r3
 8015e74:	e7ef      	b.n	8015e56 <_printf_i+0x14a>
 8015e76:	4665      	mov	r5, ip
 8015e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8015e7c:	fb02 3311 	mls	r3, r2, r1, r3
 8015e80:	5cc3      	ldrb	r3, [r0, r3]
 8015e82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015e86:	460b      	mov	r3, r1
 8015e88:	2900      	cmp	r1, #0
 8015e8a:	d1f5      	bne.n	8015e78 <_printf_i+0x16c>
 8015e8c:	e7b9      	b.n	8015e02 <_printf_i+0xf6>
 8015e8e:	6813      	ldr	r3, [r2, #0]
 8015e90:	6825      	ldr	r5, [r4, #0]
 8015e92:	6961      	ldr	r1, [r4, #20]
 8015e94:	1d18      	adds	r0, r3, #4
 8015e96:	6010      	str	r0, [r2, #0]
 8015e98:	0628      	lsls	r0, r5, #24
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	d501      	bpl.n	8015ea2 <_printf_i+0x196>
 8015e9e:	6019      	str	r1, [r3, #0]
 8015ea0:	e002      	b.n	8015ea8 <_printf_i+0x19c>
 8015ea2:	066a      	lsls	r2, r5, #25
 8015ea4:	d5fb      	bpl.n	8015e9e <_printf_i+0x192>
 8015ea6:	8019      	strh	r1, [r3, #0]
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	6123      	str	r3, [r4, #16]
 8015eac:	4665      	mov	r5, ip
 8015eae:	e7b9      	b.n	8015e24 <_printf_i+0x118>
 8015eb0:	6813      	ldr	r3, [r2, #0]
 8015eb2:	1d19      	adds	r1, r3, #4
 8015eb4:	6011      	str	r1, [r2, #0]
 8015eb6:	681d      	ldr	r5, [r3, #0]
 8015eb8:	6862      	ldr	r2, [r4, #4]
 8015eba:	2100      	movs	r1, #0
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	f7ea f9a7 	bl	8000210 <memchr>
 8015ec2:	b108      	cbz	r0, 8015ec8 <_printf_i+0x1bc>
 8015ec4:	1b40      	subs	r0, r0, r5
 8015ec6:	6060      	str	r0, [r4, #4]
 8015ec8:	6863      	ldr	r3, [r4, #4]
 8015eca:	6123      	str	r3, [r4, #16]
 8015ecc:	2300      	movs	r3, #0
 8015ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ed2:	e7a7      	b.n	8015e24 <_printf_i+0x118>
 8015ed4:	6923      	ldr	r3, [r4, #16]
 8015ed6:	462a      	mov	r2, r5
 8015ed8:	4639      	mov	r1, r7
 8015eda:	4630      	mov	r0, r6
 8015edc:	47c0      	blx	r8
 8015ede:	3001      	adds	r0, #1
 8015ee0:	d0aa      	beq.n	8015e38 <_printf_i+0x12c>
 8015ee2:	6823      	ldr	r3, [r4, #0]
 8015ee4:	079b      	lsls	r3, r3, #30
 8015ee6:	d413      	bmi.n	8015f10 <_printf_i+0x204>
 8015ee8:	68e0      	ldr	r0, [r4, #12]
 8015eea:	9b03      	ldr	r3, [sp, #12]
 8015eec:	4298      	cmp	r0, r3
 8015eee:	bfb8      	it	lt
 8015ef0:	4618      	movlt	r0, r3
 8015ef2:	e7a3      	b.n	8015e3c <_printf_i+0x130>
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	464a      	mov	r2, r9
 8015ef8:	4639      	mov	r1, r7
 8015efa:	4630      	mov	r0, r6
 8015efc:	47c0      	blx	r8
 8015efe:	3001      	adds	r0, #1
 8015f00:	d09a      	beq.n	8015e38 <_printf_i+0x12c>
 8015f02:	3501      	adds	r5, #1
 8015f04:	68e3      	ldr	r3, [r4, #12]
 8015f06:	9a03      	ldr	r2, [sp, #12]
 8015f08:	1a9b      	subs	r3, r3, r2
 8015f0a:	42ab      	cmp	r3, r5
 8015f0c:	dcf2      	bgt.n	8015ef4 <_printf_i+0x1e8>
 8015f0e:	e7eb      	b.n	8015ee8 <_printf_i+0x1dc>
 8015f10:	2500      	movs	r5, #0
 8015f12:	f104 0919 	add.w	r9, r4, #25
 8015f16:	e7f5      	b.n	8015f04 <_printf_i+0x1f8>
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d1ac      	bne.n	8015e76 <_printf_i+0x16a>
 8015f1c:	7803      	ldrb	r3, [r0, #0]
 8015f1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f26:	e76c      	b.n	8015e02 <_printf_i+0xf6>
 8015f28:	0801a2d0 	.word	0x0801a2d0
 8015f2c:	0801a2e1 	.word	0x0801a2e1

08015f30 <_scanf_float>:
 8015f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f34:	469a      	mov	sl, r3
 8015f36:	688b      	ldr	r3, [r1, #8]
 8015f38:	4616      	mov	r6, r2
 8015f3a:	1e5a      	subs	r2, r3, #1
 8015f3c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015f40:	b087      	sub	sp, #28
 8015f42:	bf83      	ittte	hi
 8015f44:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015f48:	189b      	addhi	r3, r3, r2
 8015f4a:	9301      	strhi	r3, [sp, #4]
 8015f4c:	2300      	movls	r3, #0
 8015f4e:	bf86      	itte	hi
 8015f50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015f54:	608b      	strhi	r3, [r1, #8]
 8015f56:	9301      	strls	r3, [sp, #4]
 8015f58:	680b      	ldr	r3, [r1, #0]
 8015f5a:	4688      	mov	r8, r1
 8015f5c:	f04f 0b00 	mov.w	fp, #0
 8015f60:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015f64:	f848 3b1c 	str.w	r3, [r8], #28
 8015f68:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015f6c:	4607      	mov	r7, r0
 8015f6e:	460c      	mov	r4, r1
 8015f70:	4645      	mov	r5, r8
 8015f72:	465a      	mov	r2, fp
 8015f74:	46d9      	mov	r9, fp
 8015f76:	f8cd b008 	str.w	fp, [sp, #8]
 8015f7a:	68a1      	ldr	r1, [r4, #8]
 8015f7c:	b181      	cbz	r1, 8015fa0 <_scanf_float+0x70>
 8015f7e:	6833      	ldr	r3, [r6, #0]
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	2b49      	cmp	r3, #73	; 0x49
 8015f84:	d071      	beq.n	801606a <_scanf_float+0x13a>
 8015f86:	d84d      	bhi.n	8016024 <_scanf_float+0xf4>
 8015f88:	2b39      	cmp	r3, #57	; 0x39
 8015f8a:	d840      	bhi.n	801600e <_scanf_float+0xde>
 8015f8c:	2b31      	cmp	r3, #49	; 0x31
 8015f8e:	f080 8088 	bcs.w	80160a2 <_scanf_float+0x172>
 8015f92:	2b2d      	cmp	r3, #45	; 0x2d
 8015f94:	f000 8090 	beq.w	80160b8 <_scanf_float+0x188>
 8015f98:	d815      	bhi.n	8015fc6 <_scanf_float+0x96>
 8015f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8015f9c:	f000 808c 	beq.w	80160b8 <_scanf_float+0x188>
 8015fa0:	f1b9 0f00 	cmp.w	r9, #0
 8015fa4:	d003      	beq.n	8015fae <_scanf_float+0x7e>
 8015fa6:	6823      	ldr	r3, [r4, #0]
 8015fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015fac:	6023      	str	r3, [r4, #0]
 8015fae:	3a01      	subs	r2, #1
 8015fb0:	2a01      	cmp	r2, #1
 8015fb2:	f200 80ea 	bhi.w	801618a <_scanf_float+0x25a>
 8015fb6:	4545      	cmp	r5, r8
 8015fb8:	f200 80dc 	bhi.w	8016174 <_scanf_float+0x244>
 8015fbc:	2601      	movs	r6, #1
 8015fbe:	4630      	mov	r0, r6
 8015fc0:	b007      	add	sp, #28
 8015fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8015fc8:	f000 809f 	beq.w	801610a <_scanf_float+0x1da>
 8015fcc:	2b30      	cmp	r3, #48	; 0x30
 8015fce:	d1e7      	bne.n	8015fa0 <_scanf_float+0x70>
 8015fd0:	6820      	ldr	r0, [r4, #0]
 8015fd2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015fd6:	d064      	beq.n	80160a2 <_scanf_float+0x172>
 8015fd8:	9b01      	ldr	r3, [sp, #4]
 8015fda:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015fde:	6020      	str	r0, [r4, #0]
 8015fe0:	f109 0901 	add.w	r9, r9, #1
 8015fe4:	b11b      	cbz	r3, 8015fee <_scanf_float+0xbe>
 8015fe6:	3b01      	subs	r3, #1
 8015fe8:	3101      	adds	r1, #1
 8015fea:	9301      	str	r3, [sp, #4]
 8015fec:	60a1      	str	r1, [r4, #8]
 8015fee:	68a3      	ldr	r3, [r4, #8]
 8015ff0:	3b01      	subs	r3, #1
 8015ff2:	60a3      	str	r3, [r4, #8]
 8015ff4:	6923      	ldr	r3, [r4, #16]
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	6123      	str	r3, [r4, #16]
 8015ffa:	6873      	ldr	r3, [r6, #4]
 8015ffc:	3b01      	subs	r3, #1
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	6073      	str	r3, [r6, #4]
 8016002:	f340 80ac 	ble.w	801615e <_scanf_float+0x22e>
 8016006:	6833      	ldr	r3, [r6, #0]
 8016008:	3301      	adds	r3, #1
 801600a:	6033      	str	r3, [r6, #0]
 801600c:	e7b5      	b.n	8015f7a <_scanf_float+0x4a>
 801600e:	2b45      	cmp	r3, #69	; 0x45
 8016010:	f000 8085 	beq.w	801611e <_scanf_float+0x1ee>
 8016014:	2b46      	cmp	r3, #70	; 0x46
 8016016:	d06a      	beq.n	80160ee <_scanf_float+0x1be>
 8016018:	2b41      	cmp	r3, #65	; 0x41
 801601a:	d1c1      	bne.n	8015fa0 <_scanf_float+0x70>
 801601c:	2a01      	cmp	r2, #1
 801601e:	d1bf      	bne.n	8015fa0 <_scanf_float+0x70>
 8016020:	2202      	movs	r2, #2
 8016022:	e046      	b.n	80160b2 <_scanf_float+0x182>
 8016024:	2b65      	cmp	r3, #101	; 0x65
 8016026:	d07a      	beq.n	801611e <_scanf_float+0x1ee>
 8016028:	d818      	bhi.n	801605c <_scanf_float+0x12c>
 801602a:	2b54      	cmp	r3, #84	; 0x54
 801602c:	d066      	beq.n	80160fc <_scanf_float+0x1cc>
 801602e:	d811      	bhi.n	8016054 <_scanf_float+0x124>
 8016030:	2b4e      	cmp	r3, #78	; 0x4e
 8016032:	d1b5      	bne.n	8015fa0 <_scanf_float+0x70>
 8016034:	2a00      	cmp	r2, #0
 8016036:	d146      	bne.n	80160c6 <_scanf_float+0x196>
 8016038:	f1b9 0f00 	cmp.w	r9, #0
 801603c:	d145      	bne.n	80160ca <_scanf_float+0x19a>
 801603e:	6821      	ldr	r1, [r4, #0]
 8016040:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016044:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016048:	d13f      	bne.n	80160ca <_scanf_float+0x19a>
 801604a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801604e:	6021      	str	r1, [r4, #0]
 8016050:	2201      	movs	r2, #1
 8016052:	e02e      	b.n	80160b2 <_scanf_float+0x182>
 8016054:	2b59      	cmp	r3, #89	; 0x59
 8016056:	d01e      	beq.n	8016096 <_scanf_float+0x166>
 8016058:	2b61      	cmp	r3, #97	; 0x61
 801605a:	e7de      	b.n	801601a <_scanf_float+0xea>
 801605c:	2b6e      	cmp	r3, #110	; 0x6e
 801605e:	d0e9      	beq.n	8016034 <_scanf_float+0x104>
 8016060:	d815      	bhi.n	801608e <_scanf_float+0x15e>
 8016062:	2b66      	cmp	r3, #102	; 0x66
 8016064:	d043      	beq.n	80160ee <_scanf_float+0x1be>
 8016066:	2b69      	cmp	r3, #105	; 0x69
 8016068:	d19a      	bne.n	8015fa0 <_scanf_float+0x70>
 801606a:	f1bb 0f00 	cmp.w	fp, #0
 801606e:	d138      	bne.n	80160e2 <_scanf_float+0x1b2>
 8016070:	f1b9 0f00 	cmp.w	r9, #0
 8016074:	d197      	bne.n	8015fa6 <_scanf_float+0x76>
 8016076:	6821      	ldr	r1, [r4, #0]
 8016078:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801607c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016080:	d195      	bne.n	8015fae <_scanf_float+0x7e>
 8016082:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016086:	6021      	str	r1, [r4, #0]
 8016088:	f04f 0b01 	mov.w	fp, #1
 801608c:	e011      	b.n	80160b2 <_scanf_float+0x182>
 801608e:	2b74      	cmp	r3, #116	; 0x74
 8016090:	d034      	beq.n	80160fc <_scanf_float+0x1cc>
 8016092:	2b79      	cmp	r3, #121	; 0x79
 8016094:	d184      	bne.n	8015fa0 <_scanf_float+0x70>
 8016096:	f1bb 0f07 	cmp.w	fp, #7
 801609a:	d181      	bne.n	8015fa0 <_scanf_float+0x70>
 801609c:	f04f 0b08 	mov.w	fp, #8
 80160a0:	e007      	b.n	80160b2 <_scanf_float+0x182>
 80160a2:	eb12 0f0b 	cmn.w	r2, fp
 80160a6:	f47f af7b 	bne.w	8015fa0 <_scanf_float+0x70>
 80160aa:	6821      	ldr	r1, [r4, #0]
 80160ac:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80160b0:	6021      	str	r1, [r4, #0]
 80160b2:	702b      	strb	r3, [r5, #0]
 80160b4:	3501      	adds	r5, #1
 80160b6:	e79a      	b.n	8015fee <_scanf_float+0xbe>
 80160b8:	6821      	ldr	r1, [r4, #0]
 80160ba:	0608      	lsls	r0, r1, #24
 80160bc:	f57f af70 	bpl.w	8015fa0 <_scanf_float+0x70>
 80160c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80160c4:	e7f4      	b.n	80160b0 <_scanf_float+0x180>
 80160c6:	2a02      	cmp	r2, #2
 80160c8:	d047      	beq.n	801615a <_scanf_float+0x22a>
 80160ca:	f1bb 0f01 	cmp.w	fp, #1
 80160ce:	d003      	beq.n	80160d8 <_scanf_float+0x1a8>
 80160d0:	f1bb 0f04 	cmp.w	fp, #4
 80160d4:	f47f af64 	bne.w	8015fa0 <_scanf_float+0x70>
 80160d8:	f10b 0b01 	add.w	fp, fp, #1
 80160dc:	fa5f fb8b 	uxtb.w	fp, fp
 80160e0:	e7e7      	b.n	80160b2 <_scanf_float+0x182>
 80160e2:	f1bb 0f03 	cmp.w	fp, #3
 80160e6:	d0f7      	beq.n	80160d8 <_scanf_float+0x1a8>
 80160e8:	f1bb 0f05 	cmp.w	fp, #5
 80160ec:	e7f2      	b.n	80160d4 <_scanf_float+0x1a4>
 80160ee:	f1bb 0f02 	cmp.w	fp, #2
 80160f2:	f47f af55 	bne.w	8015fa0 <_scanf_float+0x70>
 80160f6:	f04f 0b03 	mov.w	fp, #3
 80160fa:	e7da      	b.n	80160b2 <_scanf_float+0x182>
 80160fc:	f1bb 0f06 	cmp.w	fp, #6
 8016100:	f47f af4e 	bne.w	8015fa0 <_scanf_float+0x70>
 8016104:	f04f 0b07 	mov.w	fp, #7
 8016108:	e7d3      	b.n	80160b2 <_scanf_float+0x182>
 801610a:	6821      	ldr	r1, [r4, #0]
 801610c:	0588      	lsls	r0, r1, #22
 801610e:	f57f af47 	bpl.w	8015fa0 <_scanf_float+0x70>
 8016112:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016116:	6021      	str	r1, [r4, #0]
 8016118:	f8cd 9008 	str.w	r9, [sp, #8]
 801611c:	e7c9      	b.n	80160b2 <_scanf_float+0x182>
 801611e:	6821      	ldr	r1, [r4, #0]
 8016120:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016124:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016128:	d006      	beq.n	8016138 <_scanf_float+0x208>
 801612a:	0548      	lsls	r0, r1, #21
 801612c:	f57f af38 	bpl.w	8015fa0 <_scanf_float+0x70>
 8016130:	f1b9 0f00 	cmp.w	r9, #0
 8016134:	f43f af3b 	beq.w	8015fae <_scanf_float+0x7e>
 8016138:	0588      	lsls	r0, r1, #22
 801613a:	bf58      	it	pl
 801613c:	9802      	ldrpl	r0, [sp, #8]
 801613e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016142:	bf58      	it	pl
 8016144:	eba9 0000 	subpl.w	r0, r9, r0
 8016148:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801614c:	bf58      	it	pl
 801614e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016152:	6021      	str	r1, [r4, #0]
 8016154:	f04f 0900 	mov.w	r9, #0
 8016158:	e7ab      	b.n	80160b2 <_scanf_float+0x182>
 801615a:	2203      	movs	r2, #3
 801615c:	e7a9      	b.n	80160b2 <_scanf_float+0x182>
 801615e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016162:	9205      	str	r2, [sp, #20]
 8016164:	4631      	mov	r1, r6
 8016166:	4638      	mov	r0, r7
 8016168:	4798      	blx	r3
 801616a:	9a05      	ldr	r2, [sp, #20]
 801616c:	2800      	cmp	r0, #0
 801616e:	f43f af04 	beq.w	8015f7a <_scanf_float+0x4a>
 8016172:	e715      	b.n	8015fa0 <_scanf_float+0x70>
 8016174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016178:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801617c:	4632      	mov	r2, r6
 801617e:	4638      	mov	r0, r7
 8016180:	4798      	blx	r3
 8016182:	6923      	ldr	r3, [r4, #16]
 8016184:	3b01      	subs	r3, #1
 8016186:	6123      	str	r3, [r4, #16]
 8016188:	e715      	b.n	8015fb6 <_scanf_float+0x86>
 801618a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801618e:	2b06      	cmp	r3, #6
 8016190:	d80a      	bhi.n	80161a8 <_scanf_float+0x278>
 8016192:	f1bb 0f02 	cmp.w	fp, #2
 8016196:	d968      	bls.n	801626a <_scanf_float+0x33a>
 8016198:	f1ab 0b03 	sub.w	fp, fp, #3
 801619c:	fa5f fb8b 	uxtb.w	fp, fp
 80161a0:	eba5 0b0b 	sub.w	fp, r5, fp
 80161a4:	455d      	cmp	r5, fp
 80161a6:	d14b      	bne.n	8016240 <_scanf_float+0x310>
 80161a8:	6823      	ldr	r3, [r4, #0]
 80161aa:	05da      	lsls	r2, r3, #23
 80161ac:	d51f      	bpl.n	80161ee <_scanf_float+0x2be>
 80161ae:	055b      	lsls	r3, r3, #21
 80161b0:	d468      	bmi.n	8016284 <_scanf_float+0x354>
 80161b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80161b6:	6923      	ldr	r3, [r4, #16]
 80161b8:	2965      	cmp	r1, #101	; 0x65
 80161ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80161be:	f105 3bff 	add.w	fp, r5, #4294967295
 80161c2:	6123      	str	r3, [r4, #16]
 80161c4:	d00d      	beq.n	80161e2 <_scanf_float+0x2b2>
 80161c6:	2945      	cmp	r1, #69	; 0x45
 80161c8:	d00b      	beq.n	80161e2 <_scanf_float+0x2b2>
 80161ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161ce:	4632      	mov	r2, r6
 80161d0:	4638      	mov	r0, r7
 80161d2:	4798      	blx	r3
 80161d4:	6923      	ldr	r3, [r4, #16]
 80161d6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80161da:	3b01      	subs	r3, #1
 80161dc:	f1a5 0b02 	sub.w	fp, r5, #2
 80161e0:	6123      	str	r3, [r4, #16]
 80161e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161e6:	4632      	mov	r2, r6
 80161e8:	4638      	mov	r0, r7
 80161ea:	4798      	blx	r3
 80161ec:	465d      	mov	r5, fp
 80161ee:	6826      	ldr	r6, [r4, #0]
 80161f0:	f016 0610 	ands.w	r6, r6, #16
 80161f4:	d17a      	bne.n	80162ec <_scanf_float+0x3bc>
 80161f6:	702e      	strb	r6, [r5, #0]
 80161f8:	6823      	ldr	r3, [r4, #0]
 80161fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80161fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016202:	d142      	bne.n	801628a <_scanf_float+0x35a>
 8016204:	9b02      	ldr	r3, [sp, #8]
 8016206:	eba9 0303 	sub.w	r3, r9, r3
 801620a:	425a      	negs	r2, r3
 801620c:	2b00      	cmp	r3, #0
 801620e:	d149      	bne.n	80162a4 <_scanf_float+0x374>
 8016210:	2200      	movs	r2, #0
 8016212:	4641      	mov	r1, r8
 8016214:	4638      	mov	r0, r7
 8016216:	f000 ff0b 	bl	8017030 <_strtod_r>
 801621a:	6825      	ldr	r5, [r4, #0]
 801621c:	f8da 3000 	ldr.w	r3, [sl]
 8016220:	f015 0f02 	tst.w	r5, #2
 8016224:	f103 0204 	add.w	r2, r3, #4
 8016228:	ec59 8b10 	vmov	r8, r9, d0
 801622c:	f8ca 2000 	str.w	r2, [sl]
 8016230:	d043      	beq.n	80162ba <_scanf_float+0x38a>
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	e9c3 8900 	strd	r8, r9, [r3]
 8016238:	68e3      	ldr	r3, [r4, #12]
 801623a:	3301      	adds	r3, #1
 801623c:	60e3      	str	r3, [r4, #12]
 801623e:	e6be      	b.n	8015fbe <_scanf_float+0x8e>
 8016240:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016244:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016248:	4632      	mov	r2, r6
 801624a:	4638      	mov	r0, r7
 801624c:	4798      	blx	r3
 801624e:	6923      	ldr	r3, [r4, #16]
 8016250:	3b01      	subs	r3, #1
 8016252:	6123      	str	r3, [r4, #16]
 8016254:	e7a6      	b.n	80161a4 <_scanf_float+0x274>
 8016256:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801625a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801625e:	4632      	mov	r2, r6
 8016260:	4638      	mov	r0, r7
 8016262:	4798      	blx	r3
 8016264:	6923      	ldr	r3, [r4, #16]
 8016266:	3b01      	subs	r3, #1
 8016268:	6123      	str	r3, [r4, #16]
 801626a:	4545      	cmp	r5, r8
 801626c:	d8f3      	bhi.n	8016256 <_scanf_float+0x326>
 801626e:	e6a5      	b.n	8015fbc <_scanf_float+0x8c>
 8016270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016274:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016278:	4632      	mov	r2, r6
 801627a:	4638      	mov	r0, r7
 801627c:	4798      	blx	r3
 801627e:	6923      	ldr	r3, [r4, #16]
 8016280:	3b01      	subs	r3, #1
 8016282:	6123      	str	r3, [r4, #16]
 8016284:	4545      	cmp	r5, r8
 8016286:	d8f3      	bhi.n	8016270 <_scanf_float+0x340>
 8016288:	e698      	b.n	8015fbc <_scanf_float+0x8c>
 801628a:	9b03      	ldr	r3, [sp, #12]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d0bf      	beq.n	8016210 <_scanf_float+0x2e0>
 8016290:	9904      	ldr	r1, [sp, #16]
 8016292:	230a      	movs	r3, #10
 8016294:	4632      	mov	r2, r6
 8016296:	3101      	adds	r1, #1
 8016298:	4638      	mov	r0, r7
 801629a:	f000 ff55 	bl	8017148 <_strtol_r>
 801629e:	9b03      	ldr	r3, [sp, #12]
 80162a0:	9d04      	ldr	r5, [sp, #16]
 80162a2:	1ac2      	subs	r2, r0, r3
 80162a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80162a8:	429d      	cmp	r5, r3
 80162aa:	bf28      	it	cs
 80162ac:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80162b0:	490f      	ldr	r1, [pc, #60]	; (80162f0 <_scanf_float+0x3c0>)
 80162b2:	4628      	mov	r0, r5
 80162b4:	f000 f858 	bl	8016368 <siprintf>
 80162b8:	e7aa      	b.n	8016210 <_scanf_float+0x2e0>
 80162ba:	f015 0504 	ands.w	r5, r5, #4
 80162be:	d1b8      	bne.n	8016232 <_scanf_float+0x302>
 80162c0:	681f      	ldr	r7, [r3, #0]
 80162c2:	ee10 2a10 	vmov	r2, s0
 80162c6:	464b      	mov	r3, r9
 80162c8:	ee10 0a10 	vmov	r0, s0
 80162cc:	4649      	mov	r1, r9
 80162ce:	f7ea fc45 	bl	8000b5c <__aeabi_dcmpun>
 80162d2:	b128      	cbz	r0, 80162e0 <_scanf_float+0x3b0>
 80162d4:	4628      	mov	r0, r5
 80162d6:	f000 f80d 	bl	80162f4 <nanf>
 80162da:	ed87 0a00 	vstr	s0, [r7]
 80162de:	e7ab      	b.n	8016238 <_scanf_float+0x308>
 80162e0:	4640      	mov	r0, r8
 80162e2:	4649      	mov	r1, r9
 80162e4:	f7ea fc98 	bl	8000c18 <__aeabi_d2f>
 80162e8:	6038      	str	r0, [r7, #0]
 80162ea:	e7a5      	b.n	8016238 <_scanf_float+0x308>
 80162ec:	2600      	movs	r6, #0
 80162ee:	e666      	b.n	8015fbe <_scanf_float+0x8e>
 80162f0:	0801a2f2 	.word	0x0801a2f2

080162f4 <nanf>:
 80162f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80162fc <nanf+0x8>
 80162f8:	4770      	bx	lr
 80162fa:	bf00      	nop
 80162fc:	7fc00000 	.word	0x7fc00000

08016300 <sniprintf>:
 8016300:	b40c      	push	{r2, r3}
 8016302:	b530      	push	{r4, r5, lr}
 8016304:	4b17      	ldr	r3, [pc, #92]	; (8016364 <sniprintf+0x64>)
 8016306:	1e0c      	subs	r4, r1, #0
 8016308:	b09d      	sub	sp, #116	; 0x74
 801630a:	681d      	ldr	r5, [r3, #0]
 801630c:	da08      	bge.n	8016320 <sniprintf+0x20>
 801630e:	238b      	movs	r3, #139	; 0x8b
 8016310:	602b      	str	r3, [r5, #0]
 8016312:	f04f 30ff 	mov.w	r0, #4294967295
 8016316:	b01d      	add	sp, #116	; 0x74
 8016318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801631c:	b002      	add	sp, #8
 801631e:	4770      	bx	lr
 8016320:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016324:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016328:	bf14      	ite	ne
 801632a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801632e:	4623      	moveq	r3, r4
 8016330:	9304      	str	r3, [sp, #16]
 8016332:	9307      	str	r3, [sp, #28]
 8016334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016338:	9002      	str	r0, [sp, #8]
 801633a:	9006      	str	r0, [sp, #24]
 801633c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016340:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016342:	ab21      	add	r3, sp, #132	; 0x84
 8016344:	a902      	add	r1, sp, #8
 8016346:	4628      	mov	r0, r5
 8016348:	9301      	str	r3, [sp, #4]
 801634a:	f002 fde7 	bl	8018f1c <_svfiprintf_r>
 801634e:	1c43      	adds	r3, r0, #1
 8016350:	bfbc      	itt	lt
 8016352:	238b      	movlt	r3, #139	; 0x8b
 8016354:	602b      	strlt	r3, [r5, #0]
 8016356:	2c00      	cmp	r4, #0
 8016358:	d0dd      	beq.n	8016316 <sniprintf+0x16>
 801635a:	9b02      	ldr	r3, [sp, #8]
 801635c:	2200      	movs	r2, #0
 801635e:	701a      	strb	r2, [r3, #0]
 8016360:	e7d9      	b.n	8016316 <sniprintf+0x16>
 8016362:	bf00      	nop
 8016364:	2000000c 	.word	0x2000000c

08016368 <siprintf>:
 8016368:	b40e      	push	{r1, r2, r3}
 801636a:	b500      	push	{lr}
 801636c:	b09c      	sub	sp, #112	; 0x70
 801636e:	ab1d      	add	r3, sp, #116	; 0x74
 8016370:	9002      	str	r0, [sp, #8]
 8016372:	9006      	str	r0, [sp, #24]
 8016374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016378:	4809      	ldr	r0, [pc, #36]	; (80163a0 <siprintf+0x38>)
 801637a:	9107      	str	r1, [sp, #28]
 801637c:	9104      	str	r1, [sp, #16]
 801637e:	4909      	ldr	r1, [pc, #36]	; (80163a4 <siprintf+0x3c>)
 8016380:	f853 2b04 	ldr.w	r2, [r3], #4
 8016384:	9105      	str	r1, [sp, #20]
 8016386:	6800      	ldr	r0, [r0, #0]
 8016388:	9301      	str	r3, [sp, #4]
 801638a:	a902      	add	r1, sp, #8
 801638c:	f002 fdc6 	bl	8018f1c <_svfiprintf_r>
 8016390:	9b02      	ldr	r3, [sp, #8]
 8016392:	2200      	movs	r2, #0
 8016394:	701a      	strb	r2, [r3, #0]
 8016396:	b01c      	add	sp, #112	; 0x70
 8016398:	f85d eb04 	ldr.w	lr, [sp], #4
 801639c:	b003      	add	sp, #12
 801639e:	4770      	bx	lr
 80163a0:	2000000c 	.word	0x2000000c
 80163a4:	ffff0208 	.word	0xffff0208

080163a8 <siscanf>:
 80163a8:	b40e      	push	{r1, r2, r3}
 80163aa:	b530      	push	{r4, r5, lr}
 80163ac:	b09c      	sub	sp, #112	; 0x70
 80163ae:	ac1f      	add	r4, sp, #124	; 0x7c
 80163b0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80163b4:	f854 5b04 	ldr.w	r5, [r4], #4
 80163b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80163bc:	9002      	str	r0, [sp, #8]
 80163be:	9006      	str	r0, [sp, #24]
 80163c0:	f7e9 ff1e 	bl	8000200 <strlen>
 80163c4:	4b0b      	ldr	r3, [pc, #44]	; (80163f4 <siscanf+0x4c>)
 80163c6:	9003      	str	r0, [sp, #12]
 80163c8:	9007      	str	r0, [sp, #28]
 80163ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80163cc:	480a      	ldr	r0, [pc, #40]	; (80163f8 <siscanf+0x50>)
 80163ce:	9401      	str	r4, [sp, #4]
 80163d0:	2300      	movs	r3, #0
 80163d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80163d4:	9314      	str	r3, [sp, #80]	; 0x50
 80163d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80163de:	462a      	mov	r2, r5
 80163e0:	4623      	mov	r3, r4
 80163e2:	a902      	add	r1, sp, #8
 80163e4:	6800      	ldr	r0, [r0, #0]
 80163e6:	f002 feeb 	bl	80191c0 <__ssvfiscanf_r>
 80163ea:	b01c      	add	sp, #112	; 0x70
 80163ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163f0:	b003      	add	sp, #12
 80163f2:	4770      	bx	lr
 80163f4:	080163fd 	.word	0x080163fd
 80163f8:	2000000c 	.word	0x2000000c

080163fc <__seofread>:
 80163fc:	2000      	movs	r0, #0
 80163fe:	4770      	bx	lr

08016400 <strcpy>:
 8016400:	4603      	mov	r3, r0
 8016402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016406:	f803 2b01 	strb.w	r2, [r3], #1
 801640a:	2a00      	cmp	r2, #0
 801640c:	d1f9      	bne.n	8016402 <strcpy+0x2>
 801640e:	4770      	bx	lr

08016410 <sulp>:
 8016410:	b570      	push	{r4, r5, r6, lr}
 8016412:	4604      	mov	r4, r0
 8016414:	460d      	mov	r5, r1
 8016416:	ec45 4b10 	vmov	d0, r4, r5
 801641a:	4616      	mov	r6, r2
 801641c:	f002 fb3a 	bl	8018a94 <__ulp>
 8016420:	ec51 0b10 	vmov	r0, r1, d0
 8016424:	b17e      	cbz	r6, 8016446 <sulp+0x36>
 8016426:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801642a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801642e:	2b00      	cmp	r3, #0
 8016430:	dd09      	ble.n	8016446 <sulp+0x36>
 8016432:	051b      	lsls	r3, r3, #20
 8016434:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016438:	2400      	movs	r4, #0
 801643a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801643e:	4622      	mov	r2, r4
 8016440:	462b      	mov	r3, r5
 8016442:	f7ea f8f1 	bl	8000628 <__aeabi_dmul>
 8016446:	bd70      	pop	{r4, r5, r6, pc}

08016448 <_strtod_l>:
 8016448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801644c:	461f      	mov	r7, r3
 801644e:	b0a1      	sub	sp, #132	; 0x84
 8016450:	2300      	movs	r3, #0
 8016452:	4681      	mov	r9, r0
 8016454:	4638      	mov	r0, r7
 8016456:	460e      	mov	r6, r1
 8016458:	9217      	str	r2, [sp, #92]	; 0x5c
 801645a:	931c      	str	r3, [sp, #112]	; 0x70
 801645c:	f002 f824 	bl	80184a8 <__localeconv_l>
 8016460:	4680      	mov	r8, r0
 8016462:	6800      	ldr	r0, [r0, #0]
 8016464:	f7e9 fecc 	bl	8000200 <strlen>
 8016468:	f04f 0a00 	mov.w	sl, #0
 801646c:	4604      	mov	r4, r0
 801646e:	f04f 0b00 	mov.w	fp, #0
 8016472:	961b      	str	r6, [sp, #108]	; 0x6c
 8016474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016476:	781a      	ldrb	r2, [r3, #0]
 8016478:	2a0d      	cmp	r2, #13
 801647a:	d832      	bhi.n	80164e2 <_strtod_l+0x9a>
 801647c:	2a09      	cmp	r2, #9
 801647e:	d236      	bcs.n	80164ee <_strtod_l+0xa6>
 8016480:	2a00      	cmp	r2, #0
 8016482:	d03e      	beq.n	8016502 <_strtod_l+0xba>
 8016484:	2300      	movs	r3, #0
 8016486:	930d      	str	r3, [sp, #52]	; 0x34
 8016488:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801648a:	782b      	ldrb	r3, [r5, #0]
 801648c:	2b30      	cmp	r3, #48	; 0x30
 801648e:	f040 80ac 	bne.w	80165ea <_strtod_l+0x1a2>
 8016492:	786b      	ldrb	r3, [r5, #1]
 8016494:	2b58      	cmp	r3, #88	; 0x58
 8016496:	d001      	beq.n	801649c <_strtod_l+0x54>
 8016498:	2b78      	cmp	r3, #120	; 0x78
 801649a:	d167      	bne.n	801656c <_strtod_l+0x124>
 801649c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801649e:	9301      	str	r3, [sp, #4]
 80164a0:	ab1c      	add	r3, sp, #112	; 0x70
 80164a2:	9300      	str	r3, [sp, #0]
 80164a4:	9702      	str	r7, [sp, #8]
 80164a6:	ab1d      	add	r3, sp, #116	; 0x74
 80164a8:	4a88      	ldr	r2, [pc, #544]	; (80166cc <_strtod_l+0x284>)
 80164aa:	a91b      	add	r1, sp, #108	; 0x6c
 80164ac:	4648      	mov	r0, r9
 80164ae:	f001 fd12 	bl	8017ed6 <__gethex>
 80164b2:	f010 0407 	ands.w	r4, r0, #7
 80164b6:	4606      	mov	r6, r0
 80164b8:	d005      	beq.n	80164c6 <_strtod_l+0x7e>
 80164ba:	2c06      	cmp	r4, #6
 80164bc:	d12b      	bne.n	8016516 <_strtod_l+0xce>
 80164be:	3501      	adds	r5, #1
 80164c0:	2300      	movs	r3, #0
 80164c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80164c4:	930d      	str	r3, [sp, #52]	; 0x34
 80164c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	f040 859a 	bne.w	8017002 <_strtod_l+0xbba>
 80164ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164d0:	b1e3      	cbz	r3, 801650c <_strtod_l+0xc4>
 80164d2:	4652      	mov	r2, sl
 80164d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80164d8:	ec43 2b10 	vmov	d0, r2, r3
 80164dc:	b021      	add	sp, #132	; 0x84
 80164de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164e2:	2a2b      	cmp	r2, #43	; 0x2b
 80164e4:	d015      	beq.n	8016512 <_strtod_l+0xca>
 80164e6:	2a2d      	cmp	r2, #45	; 0x2d
 80164e8:	d004      	beq.n	80164f4 <_strtod_l+0xac>
 80164ea:	2a20      	cmp	r2, #32
 80164ec:	d1ca      	bne.n	8016484 <_strtod_l+0x3c>
 80164ee:	3301      	adds	r3, #1
 80164f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80164f2:	e7bf      	b.n	8016474 <_strtod_l+0x2c>
 80164f4:	2201      	movs	r2, #1
 80164f6:	920d      	str	r2, [sp, #52]	; 0x34
 80164f8:	1c5a      	adds	r2, r3, #1
 80164fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80164fc:	785b      	ldrb	r3, [r3, #1]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d1c2      	bne.n	8016488 <_strtod_l+0x40>
 8016502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016504:	961b      	str	r6, [sp, #108]	; 0x6c
 8016506:	2b00      	cmp	r3, #0
 8016508:	f040 8579 	bne.w	8016ffe <_strtod_l+0xbb6>
 801650c:	4652      	mov	r2, sl
 801650e:	465b      	mov	r3, fp
 8016510:	e7e2      	b.n	80164d8 <_strtod_l+0x90>
 8016512:	2200      	movs	r2, #0
 8016514:	e7ef      	b.n	80164f6 <_strtod_l+0xae>
 8016516:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016518:	b13a      	cbz	r2, 801652a <_strtod_l+0xe2>
 801651a:	2135      	movs	r1, #53	; 0x35
 801651c:	a81e      	add	r0, sp, #120	; 0x78
 801651e:	f002 fbb1 	bl	8018c84 <__copybits>
 8016522:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016524:	4648      	mov	r0, r9
 8016526:	f002 f81d 	bl	8018564 <_Bfree>
 801652a:	3c01      	subs	r4, #1
 801652c:	2c04      	cmp	r4, #4
 801652e:	d806      	bhi.n	801653e <_strtod_l+0xf6>
 8016530:	e8df f004 	tbb	[pc, r4]
 8016534:	1714030a 	.word	0x1714030a
 8016538:	0a          	.byte	0x0a
 8016539:	00          	.byte	0x00
 801653a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801653e:	0730      	lsls	r0, r6, #28
 8016540:	d5c1      	bpl.n	80164c6 <_strtod_l+0x7e>
 8016542:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016546:	e7be      	b.n	80164c6 <_strtod_l+0x7e>
 8016548:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801654c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801654e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016552:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016556:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801655a:	e7f0      	b.n	801653e <_strtod_l+0xf6>
 801655c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80166d0 <_strtod_l+0x288>
 8016560:	e7ed      	b.n	801653e <_strtod_l+0xf6>
 8016562:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016566:	f04f 3aff 	mov.w	sl, #4294967295
 801656a:	e7e8      	b.n	801653e <_strtod_l+0xf6>
 801656c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801656e:	1c5a      	adds	r2, r3, #1
 8016570:	921b      	str	r2, [sp, #108]	; 0x6c
 8016572:	785b      	ldrb	r3, [r3, #1]
 8016574:	2b30      	cmp	r3, #48	; 0x30
 8016576:	d0f9      	beq.n	801656c <_strtod_l+0x124>
 8016578:	2b00      	cmp	r3, #0
 801657a:	d0a4      	beq.n	80164c6 <_strtod_l+0x7e>
 801657c:	2301      	movs	r3, #1
 801657e:	2500      	movs	r5, #0
 8016580:	9306      	str	r3, [sp, #24]
 8016582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016584:	9308      	str	r3, [sp, #32]
 8016586:	9507      	str	r5, [sp, #28]
 8016588:	9505      	str	r5, [sp, #20]
 801658a:	220a      	movs	r2, #10
 801658c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801658e:	7807      	ldrb	r7, [r0, #0]
 8016590:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016594:	b2d9      	uxtb	r1, r3
 8016596:	2909      	cmp	r1, #9
 8016598:	d929      	bls.n	80165ee <_strtod_l+0x1a6>
 801659a:	4622      	mov	r2, r4
 801659c:	f8d8 1000 	ldr.w	r1, [r8]
 80165a0:	f003 f8f8 	bl	8019794 <strncmp>
 80165a4:	2800      	cmp	r0, #0
 80165a6:	d031      	beq.n	801660c <_strtod_l+0x1c4>
 80165a8:	2000      	movs	r0, #0
 80165aa:	9c05      	ldr	r4, [sp, #20]
 80165ac:	9004      	str	r0, [sp, #16]
 80165ae:	463b      	mov	r3, r7
 80165b0:	4602      	mov	r2, r0
 80165b2:	2b65      	cmp	r3, #101	; 0x65
 80165b4:	d001      	beq.n	80165ba <_strtod_l+0x172>
 80165b6:	2b45      	cmp	r3, #69	; 0x45
 80165b8:	d114      	bne.n	80165e4 <_strtod_l+0x19c>
 80165ba:	b924      	cbnz	r4, 80165c6 <_strtod_l+0x17e>
 80165bc:	b910      	cbnz	r0, 80165c4 <_strtod_l+0x17c>
 80165be:	9b06      	ldr	r3, [sp, #24]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d09e      	beq.n	8016502 <_strtod_l+0xba>
 80165c4:	2400      	movs	r4, #0
 80165c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80165c8:	1c73      	adds	r3, r6, #1
 80165ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80165cc:	7873      	ldrb	r3, [r6, #1]
 80165ce:	2b2b      	cmp	r3, #43	; 0x2b
 80165d0:	d078      	beq.n	80166c4 <_strtod_l+0x27c>
 80165d2:	2b2d      	cmp	r3, #45	; 0x2d
 80165d4:	d070      	beq.n	80166b8 <_strtod_l+0x270>
 80165d6:	f04f 0c00 	mov.w	ip, #0
 80165da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80165de:	2f09      	cmp	r7, #9
 80165e0:	d97c      	bls.n	80166dc <_strtod_l+0x294>
 80165e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80165e4:	f04f 0e00 	mov.w	lr, #0
 80165e8:	e09a      	b.n	8016720 <_strtod_l+0x2d8>
 80165ea:	2300      	movs	r3, #0
 80165ec:	e7c7      	b.n	801657e <_strtod_l+0x136>
 80165ee:	9905      	ldr	r1, [sp, #20]
 80165f0:	2908      	cmp	r1, #8
 80165f2:	bfdd      	ittte	le
 80165f4:	9907      	ldrle	r1, [sp, #28]
 80165f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80165fa:	9307      	strle	r3, [sp, #28]
 80165fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016600:	9b05      	ldr	r3, [sp, #20]
 8016602:	3001      	adds	r0, #1
 8016604:	3301      	adds	r3, #1
 8016606:	9305      	str	r3, [sp, #20]
 8016608:	901b      	str	r0, [sp, #108]	; 0x6c
 801660a:	e7bf      	b.n	801658c <_strtod_l+0x144>
 801660c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801660e:	191a      	adds	r2, r3, r4
 8016610:	921b      	str	r2, [sp, #108]	; 0x6c
 8016612:	9a05      	ldr	r2, [sp, #20]
 8016614:	5d1b      	ldrb	r3, [r3, r4]
 8016616:	2a00      	cmp	r2, #0
 8016618:	d037      	beq.n	801668a <_strtod_l+0x242>
 801661a:	9c05      	ldr	r4, [sp, #20]
 801661c:	4602      	mov	r2, r0
 801661e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016622:	2909      	cmp	r1, #9
 8016624:	d913      	bls.n	801664e <_strtod_l+0x206>
 8016626:	2101      	movs	r1, #1
 8016628:	9104      	str	r1, [sp, #16]
 801662a:	e7c2      	b.n	80165b2 <_strtod_l+0x16a>
 801662c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801662e:	1c5a      	adds	r2, r3, #1
 8016630:	921b      	str	r2, [sp, #108]	; 0x6c
 8016632:	785b      	ldrb	r3, [r3, #1]
 8016634:	3001      	adds	r0, #1
 8016636:	2b30      	cmp	r3, #48	; 0x30
 8016638:	d0f8      	beq.n	801662c <_strtod_l+0x1e4>
 801663a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801663e:	2a08      	cmp	r2, #8
 8016640:	f200 84e4 	bhi.w	801700c <_strtod_l+0xbc4>
 8016644:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016646:	9208      	str	r2, [sp, #32]
 8016648:	4602      	mov	r2, r0
 801664a:	2000      	movs	r0, #0
 801664c:	4604      	mov	r4, r0
 801664e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016652:	f100 0101 	add.w	r1, r0, #1
 8016656:	d012      	beq.n	801667e <_strtod_l+0x236>
 8016658:	440a      	add	r2, r1
 801665a:	eb00 0c04 	add.w	ip, r0, r4
 801665e:	4621      	mov	r1, r4
 8016660:	270a      	movs	r7, #10
 8016662:	458c      	cmp	ip, r1
 8016664:	d113      	bne.n	801668e <_strtod_l+0x246>
 8016666:	1821      	adds	r1, r4, r0
 8016668:	2908      	cmp	r1, #8
 801666a:	f104 0401 	add.w	r4, r4, #1
 801666e:	4404      	add	r4, r0
 8016670:	dc19      	bgt.n	80166a6 <_strtod_l+0x25e>
 8016672:	9b07      	ldr	r3, [sp, #28]
 8016674:	210a      	movs	r1, #10
 8016676:	fb01 e303 	mla	r3, r1, r3, lr
 801667a:	9307      	str	r3, [sp, #28]
 801667c:	2100      	movs	r1, #0
 801667e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016680:	1c58      	adds	r0, r3, #1
 8016682:	901b      	str	r0, [sp, #108]	; 0x6c
 8016684:	785b      	ldrb	r3, [r3, #1]
 8016686:	4608      	mov	r0, r1
 8016688:	e7c9      	b.n	801661e <_strtod_l+0x1d6>
 801668a:	9805      	ldr	r0, [sp, #20]
 801668c:	e7d3      	b.n	8016636 <_strtod_l+0x1ee>
 801668e:	2908      	cmp	r1, #8
 8016690:	f101 0101 	add.w	r1, r1, #1
 8016694:	dc03      	bgt.n	801669e <_strtod_l+0x256>
 8016696:	9b07      	ldr	r3, [sp, #28]
 8016698:	437b      	muls	r3, r7
 801669a:	9307      	str	r3, [sp, #28]
 801669c:	e7e1      	b.n	8016662 <_strtod_l+0x21a>
 801669e:	2910      	cmp	r1, #16
 80166a0:	bfd8      	it	le
 80166a2:	437d      	mulle	r5, r7
 80166a4:	e7dd      	b.n	8016662 <_strtod_l+0x21a>
 80166a6:	2c10      	cmp	r4, #16
 80166a8:	bfdc      	itt	le
 80166aa:	210a      	movle	r1, #10
 80166ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80166b0:	e7e4      	b.n	801667c <_strtod_l+0x234>
 80166b2:	2301      	movs	r3, #1
 80166b4:	9304      	str	r3, [sp, #16]
 80166b6:	e781      	b.n	80165bc <_strtod_l+0x174>
 80166b8:	f04f 0c01 	mov.w	ip, #1
 80166bc:	1cb3      	adds	r3, r6, #2
 80166be:	931b      	str	r3, [sp, #108]	; 0x6c
 80166c0:	78b3      	ldrb	r3, [r6, #2]
 80166c2:	e78a      	b.n	80165da <_strtod_l+0x192>
 80166c4:	f04f 0c00 	mov.w	ip, #0
 80166c8:	e7f8      	b.n	80166bc <_strtod_l+0x274>
 80166ca:	bf00      	nop
 80166cc:	0801a2f8 	.word	0x0801a2f8
 80166d0:	7ff00000 	.word	0x7ff00000
 80166d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166d6:	1c5f      	adds	r7, r3, #1
 80166d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80166da:	785b      	ldrb	r3, [r3, #1]
 80166dc:	2b30      	cmp	r3, #48	; 0x30
 80166de:	d0f9      	beq.n	80166d4 <_strtod_l+0x28c>
 80166e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80166e4:	2f08      	cmp	r7, #8
 80166e6:	f63f af7d 	bhi.w	80165e4 <_strtod_l+0x19c>
 80166ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80166ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166f0:	930a      	str	r3, [sp, #40]	; 0x28
 80166f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166f4:	1c5f      	adds	r7, r3, #1
 80166f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80166f8:	785b      	ldrb	r3, [r3, #1]
 80166fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80166fe:	f1b8 0f09 	cmp.w	r8, #9
 8016702:	d937      	bls.n	8016774 <_strtod_l+0x32c>
 8016704:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016706:	1a7f      	subs	r7, r7, r1
 8016708:	2f08      	cmp	r7, #8
 801670a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801670e:	dc37      	bgt.n	8016780 <_strtod_l+0x338>
 8016710:	45be      	cmp	lr, r7
 8016712:	bfa8      	it	ge
 8016714:	46be      	movge	lr, r7
 8016716:	f1bc 0f00 	cmp.w	ip, #0
 801671a:	d001      	beq.n	8016720 <_strtod_l+0x2d8>
 801671c:	f1ce 0e00 	rsb	lr, lr, #0
 8016720:	2c00      	cmp	r4, #0
 8016722:	d151      	bne.n	80167c8 <_strtod_l+0x380>
 8016724:	2800      	cmp	r0, #0
 8016726:	f47f aece 	bne.w	80164c6 <_strtod_l+0x7e>
 801672a:	9a06      	ldr	r2, [sp, #24]
 801672c:	2a00      	cmp	r2, #0
 801672e:	f47f aeca 	bne.w	80164c6 <_strtod_l+0x7e>
 8016732:	9a04      	ldr	r2, [sp, #16]
 8016734:	2a00      	cmp	r2, #0
 8016736:	f47f aee4 	bne.w	8016502 <_strtod_l+0xba>
 801673a:	2b4e      	cmp	r3, #78	; 0x4e
 801673c:	d027      	beq.n	801678e <_strtod_l+0x346>
 801673e:	dc21      	bgt.n	8016784 <_strtod_l+0x33c>
 8016740:	2b49      	cmp	r3, #73	; 0x49
 8016742:	f47f aede 	bne.w	8016502 <_strtod_l+0xba>
 8016746:	49a0      	ldr	r1, [pc, #640]	; (80169c8 <_strtod_l+0x580>)
 8016748:	a81b      	add	r0, sp, #108	; 0x6c
 801674a:	f001 fdf7 	bl	801833c <__match>
 801674e:	2800      	cmp	r0, #0
 8016750:	f43f aed7 	beq.w	8016502 <_strtod_l+0xba>
 8016754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016756:	499d      	ldr	r1, [pc, #628]	; (80169cc <_strtod_l+0x584>)
 8016758:	3b01      	subs	r3, #1
 801675a:	a81b      	add	r0, sp, #108	; 0x6c
 801675c:	931b      	str	r3, [sp, #108]	; 0x6c
 801675e:	f001 fded 	bl	801833c <__match>
 8016762:	b910      	cbnz	r0, 801676a <_strtod_l+0x322>
 8016764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016766:	3301      	adds	r3, #1
 8016768:	931b      	str	r3, [sp, #108]	; 0x6c
 801676a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80169e0 <_strtod_l+0x598>
 801676e:	f04f 0a00 	mov.w	sl, #0
 8016772:	e6a8      	b.n	80164c6 <_strtod_l+0x7e>
 8016774:	210a      	movs	r1, #10
 8016776:	fb01 3e0e 	mla	lr, r1, lr, r3
 801677a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801677e:	e7b8      	b.n	80166f2 <_strtod_l+0x2aa>
 8016780:	46be      	mov	lr, r7
 8016782:	e7c8      	b.n	8016716 <_strtod_l+0x2ce>
 8016784:	2b69      	cmp	r3, #105	; 0x69
 8016786:	d0de      	beq.n	8016746 <_strtod_l+0x2fe>
 8016788:	2b6e      	cmp	r3, #110	; 0x6e
 801678a:	f47f aeba 	bne.w	8016502 <_strtod_l+0xba>
 801678e:	4990      	ldr	r1, [pc, #576]	; (80169d0 <_strtod_l+0x588>)
 8016790:	a81b      	add	r0, sp, #108	; 0x6c
 8016792:	f001 fdd3 	bl	801833c <__match>
 8016796:	2800      	cmp	r0, #0
 8016798:	f43f aeb3 	beq.w	8016502 <_strtod_l+0xba>
 801679c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	2b28      	cmp	r3, #40	; 0x28
 80167a2:	d10e      	bne.n	80167c2 <_strtod_l+0x37a>
 80167a4:	aa1e      	add	r2, sp, #120	; 0x78
 80167a6:	498b      	ldr	r1, [pc, #556]	; (80169d4 <_strtod_l+0x58c>)
 80167a8:	a81b      	add	r0, sp, #108	; 0x6c
 80167aa:	f001 fddb 	bl	8018364 <__hexnan>
 80167ae:	2805      	cmp	r0, #5
 80167b0:	d107      	bne.n	80167c2 <_strtod_l+0x37a>
 80167b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80167b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80167b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80167bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80167c0:	e681      	b.n	80164c6 <_strtod_l+0x7e>
 80167c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80169e8 <_strtod_l+0x5a0>
 80167c6:	e7d2      	b.n	801676e <_strtod_l+0x326>
 80167c8:	ebae 0302 	sub.w	r3, lr, r2
 80167cc:	9306      	str	r3, [sp, #24]
 80167ce:	9b05      	ldr	r3, [sp, #20]
 80167d0:	9807      	ldr	r0, [sp, #28]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	bf08      	it	eq
 80167d6:	4623      	moveq	r3, r4
 80167d8:	2c10      	cmp	r4, #16
 80167da:	9305      	str	r3, [sp, #20]
 80167dc:	46a0      	mov	r8, r4
 80167de:	bfa8      	it	ge
 80167e0:	f04f 0810 	movge.w	r8, #16
 80167e4:	f7e9 fea6 	bl	8000534 <__aeabi_ui2d>
 80167e8:	2c09      	cmp	r4, #9
 80167ea:	4682      	mov	sl, r0
 80167ec:	468b      	mov	fp, r1
 80167ee:	dc13      	bgt.n	8016818 <_strtod_l+0x3d0>
 80167f0:	9b06      	ldr	r3, [sp, #24]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	f43f ae67 	beq.w	80164c6 <_strtod_l+0x7e>
 80167f8:	9b06      	ldr	r3, [sp, #24]
 80167fa:	dd7a      	ble.n	80168f2 <_strtod_l+0x4aa>
 80167fc:	2b16      	cmp	r3, #22
 80167fe:	dc61      	bgt.n	80168c4 <_strtod_l+0x47c>
 8016800:	4a75      	ldr	r2, [pc, #468]	; (80169d8 <_strtod_l+0x590>)
 8016802:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016806:	e9de 0100 	ldrd	r0, r1, [lr]
 801680a:	4652      	mov	r2, sl
 801680c:	465b      	mov	r3, fp
 801680e:	f7e9 ff0b 	bl	8000628 <__aeabi_dmul>
 8016812:	4682      	mov	sl, r0
 8016814:	468b      	mov	fp, r1
 8016816:	e656      	b.n	80164c6 <_strtod_l+0x7e>
 8016818:	4b6f      	ldr	r3, [pc, #444]	; (80169d8 <_strtod_l+0x590>)
 801681a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801681e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016822:	f7e9 ff01 	bl	8000628 <__aeabi_dmul>
 8016826:	4606      	mov	r6, r0
 8016828:	4628      	mov	r0, r5
 801682a:	460f      	mov	r7, r1
 801682c:	f7e9 fe82 	bl	8000534 <__aeabi_ui2d>
 8016830:	4602      	mov	r2, r0
 8016832:	460b      	mov	r3, r1
 8016834:	4630      	mov	r0, r6
 8016836:	4639      	mov	r1, r7
 8016838:	f7e9 fd40 	bl	80002bc <__adddf3>
 801683c:	2c0f      	cmp	r4, #15
 801683e:	4682      	mov	sl, r0
 8016840:	468b      	mov	fp, r1
 8016842:	ddd5      	ble.n	80167f0 <_strtod_l+0x3a8>
 8016844:	9b06      	ldr	r3, [sp, #24]
 8016846:	eba4 0808 	sub.w	r8, r4, r8
 801684a:	4498      	add	r8, r3
 801684c:	f1b8 0f00 	cmp.w	r8, #0
 8016850:	f340 8096 	ble.w	8016980 <_strtod_l+0x538>
 8016854:	f018 030f 	ands.w	r3, r8, #15
 8016858:	d00a      	beq.n	8016870 <_strtod_l+0x428>
 801685a:	495f      	ldr	r1, [pc, #380]	; (80169d8 <_strtod_l+0x590>)
 801685c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016860:	4652      	mov	r2, sl
 8016862:	465b      	mov	r3, fp
 8016864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016868:	f7e9 fede 	bl	8000628 <__aeabi_dmul>
 801686c:	4682      	mov	sl, r0
 801686e:	468b      	mov	fp, r1
 8016870:	f038 080f 	bics.w	r8, r8, #15
 8016874:	d073      	beq.n	801695e <_strtod_l+0x516>
 8016876:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801687a:	dd47      	ble.n	801690c <_strtod_l+0x4c4>
 801687c:	2400      	movs	r4, #0
 801687e:	46a0      	mov	r8, r4
 8016880:	9407      	str	r4, [sp, #28]
 8016882:	9405      	str	r4, [sp, #20]
 8016884:	2322      	movs	r3, #34	; 0x22
 8016886:	f8df b158 	ldr.w	fp, [pc, #344]	; 80169e0 <_strtod_l+0x598>
 801688a:	f8c9 3000 	str.w	r3, [r9]
 801688e:	f04f 0a00 	mov.w	sl, #0
 8016892:	9b07      	ldr	r3, [sp, #28]
 8016894:	2b00      	cmp	r3, #0
 8016896:	f43f ae16 	beq.w	80164c6 <_strtod_l+0x7e>
 801689a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801689c:	4648      	mov	r0, r9
 801689e:	f001 fe61 	bl	8018564 <_Bfree>
 80168a2:	9905      	ldr	r1, [sp, #20]
 80168a4:	4648      	mov	r0, r9
 80168a6:	f001 fe5d 	bl	8018564 <_Bfree>
 80168aa:	4641      	mov	r1, r8
 80168ac:	4648      	mov	r0, r9
 80168ae:	f001 fe59 	bl	8018564 <_Bfree>
 80168b2:	9907      	ldr	r1, [sp, #28]
 80168b4:	4648      	mov	r0, r9
 80168b6:	f001 fe55 	bl	8018564 <_Bfree>
 80168ba:	4621      	mov	r1, r4
 80168bc:	4648      	mov	r0, r9
 80168be:	f001 fe51 	bl	8018564 <_Bfree>
 80168c2:	e600      	b.n	80164c6 <_strtod_l+0x7e>
 80168c4:	9a06      	ldr	r2, [sp, #24]
 80168c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80168ca:	4293      	cmp	r3, r2
 80168cc:	dbba      	blt.n	8016844 <_strtod_l+0x3fc>
 80168ce:	4d42      	ldr	r5, [pc, #264]	; (80169d8 <_strtod_l+0x590>)
 80168d0:	f1c4 040f 	rsb	r4, r4, #15
 80168d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80168d8:	4652      	mov	r2, sl
 80168da:	465b      	mov	r3, fp
 80168dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168e0:	f7e9 fea2 	bl	8000628 <__aeabi_dmul>
 80168e4:	9b06      	ldr	r3, [sp, #24]
 80168e6:	1b1c      	subs	r4, r3, r4
 80168e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80168ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80168f0:	e78d      	b.n	801680e <_strtod_l+0x3c6>
 80168f2:	f113 0f16 	cmn.w	r3, #22
 80168f6:	dba5      	blt.n	8016844 <_strtod_l+0x3fc>
 80168f8:	4a37      	ldr	r2, [pc, #220]	; (80169d8 <_strtod_l+0x590>)
 80168fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80168fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016902:	4650      	mov	r0, sl
 8016904:	4659      	mov	r1, fp
 8016906:	f7e9 ffb9 	bl	800087c <__aeabi_ddiv>
 801690a:	e782      	b.n	8016812 <_strtod_l+0x3ca>
 801690c:	2300      	movs	r3, #0
 801690e:	4e33      	ldr	r6, [pc, #204]	; (80169dc <_strtod_l+0x594>)
 8016910:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016914:	4650      	mov	r0, sl
 8016916:	4659      	mov	r1, fp
 8016918:	461d      	mov	r5, r3
 801691a:	f1b8 0f01 	cmp.w	r8, #1
 801691e:	dc21      	bgt.n	8016964 <_strtod_l+0x51c>
 8016920:	b10b      	cbz	r3, 8016926 <_strtod_l+0x4de>
 8016922:	4682      	mov	sl, r0
 8016924:	468b      	mov	fp, r1
 8016926:	4b2d      	ldr	r3, [pc, #180]	; (80169dc <_strtod_l+0x594>)
 8016928:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801692c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016930:	4652      	mov	r2, sl
 8016932:	465b      	mov	r3, fp
 8016934:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016938:	f7e9 fe76 	bl	8000628 <__aeabi_dmul>
 801693c:	4b28      	ldr	r3, [pc, #160]	; (80169e0 <_strtod_l+0x598>)
 801693e:	460a      	mov	r2, r1
 8016940:	400b      	ands	r3, r1
 8016942:	4928      	ldr	r1, [pc, #160]	; (80169e4 <_strtod_l+0x59c>)
 8016944:	428b      	cmp	r3, r1
 8016946:	4682      	mov	sl, r0
 8016948:	d898      	bhi.n	801687c <_strtod_l+0x434>
 801694a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801694e:	428b      	cmp	r3, r1
 8016950:	bf86      	itte	hi
 8016952:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80169ec <_strtod_l+0x5a4>
 8016956:	f04f 3aff 	movhi.w	sl, #4294967295
 801695a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801695e:	2300      	movs	r3, #0
 8016960:	9304      	str	r3, [sp, #16]
 8016962:	e077      	b.n	8016a54 <_strtod_l+0x60c>
 8016964:	f018 0f01 	tst.w	r8, #1
 8016968:	d006      	beq.n	8016978 <_strtod_l+0x530>
 801696a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016972:	f7e9 fe59 	bl	8000628 <__aeabi_dmul>
 8016976:	2301      	movs	r3, #1
 8016978:	3501      	adds	r5, #1
 801697a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801697e:	e7cc      	b.n	801691a <_strtod_l+0x4d2>
 8016980:	d0ed      	beq.n	801695e <_strtod_l+0x516>
 8016982:	f1c8 0800 	rsb	r8, r8, #0
 8016986:	f018 020f 	ands.w	r2, r8, #15
 801698a:	d00a      	beq.n	80169a2 <_strtod_l+0x55a>
 801698c:	4b12      	ldr	r3, [pc, #72]	; (80169d8 <_strtod_l+0x590>)
 801698e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016992:	4650      	mov	r0, sl
 8016994:	4659      	mov	r1, fp
 8016996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801699a:	f7e9 ff6f 	bl	800087c <__aeabi_ddiv>
 801699e:	4682      	mov	sl, r0
 80169a0:	468b      	mov	fp, r1
 80169a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80169a6:	d0da      	beq.n	801695e <_strtod_l+0x516>
 80169a8:	f1b8 0f1f 	cmp.w	r8, #31
 80169ac:	dd20      	ble.n	80169f0 <_strtod_l+0x5a8>
 80169ae:	2400      	movs	r4, #0
 80169b0:	46a0      	mov	r8, r4
 80169b2:	9407      	str	r4, [sp, #28]
 80169b4:	9405      	str	r4, [sp, #20]
 80169b6:	2322      	movs	r3, #34	; 0x22
 80169b8:	f04f 0a00 	mov.w	sl, #0
 80169bc:	f04f 0b00 	mov.w	fp, #0
 80169c0:	f8c9 3000 	str.w	r3, [r9]
 80169c4:	e765      	b.n	8016892 <_strtod_l+0x44a>
 80169c6:	bf00      	nop
 80169c8:	0801a2c5 	.word	0x0801a2c5
 80169cc:	0801a34b 	.word	0x0801a34b
 80169d0:	0801a2cd 	.word	0x0801a2cd
 80169d4:	0801a30c 	.word	0x0801a30c
 80169d8:	0801a3f0 	.word	0x0801a3f0
 80169dc:	0801a3c8 	.word	0x0801a3c8
 80169e0:	7ff00000 	.word	0x7ff00000
 80169e4:	7ca00000 	.word	0x7ca00000
 80169e8:	fff80000 	.word	0xfff80000
 80169ec:	7fefffff 	.word	0x7fefffff
 80169f0:	f018 0310 	ands.w	r3, r8, #16
 80169f4:	bf18      	it	ne
 80169f6:	236a      	movne	r3, #106	; 0x6a
 80169f8:	4da0      	ldr	r5, [pc, #640]	; (8016c7c <_strtod_l+0x834>)
 80169fa:	9304      	str	r3, [sp, #16]
 80169fc:	4650      	mov	r0, sl
 80169fe:	4659      	mov	r1, fp
 8016a00:	2300      	movs	r3, #0
 8016a02:	f1b8 0f00 	cmp.w	r8, #0
 8016a06:	f300 810a 	bgt.w	8016c1e <_strtod_l+0x7d6>
 8016a0a:	b10b      	cbz	r3, 8016a10 <_strtod_l+0x5c8>
 8016a0c:	4682      	mov	sl, r0
 8016a0e:	468b      	mov	fp, r1
 8016a10:	9b04      	ldr	r3, [sp, #16]
 8016a12:	b1bb      	cbz	r3, 8016a44 <_strtod_l+0x5fc>
 8016a14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016a18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	4659      	mov	r1, fp
 8016a20:	dd10      	ble.n	8016a44 <_strtod_l+0x5fc>
 8016a22:	2b1f      	cmp	r3, #31
 8016a24:	f340 8107 	ble.w	8016c36 <_strtod_l+0x7ee>
 8016a28:	2b34      	cmp	r3, #52	; 0x34
 8016a2a:	bfde      	ittt	le
 8016a2c:	3b20      	suble	r3, #32
 8016a2e:	f04f 32ff 	movle.w	r2, #4294967295
 8016a32:	fa02 f303 	lslle.w	r3, r2, r3
 8016a36:	f04f 0a00 	mov.w	sl, #0
 8016a3a:	bfcc      	ite	gt
 8016a3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016a40:	ea03 0b01 	andle.w	fp, r3, r1
 8016a44:	2200      	movs	r2, #0
 8016a46:	2300      	movs	r3, #0
 8016a48:	4650      	mov	r0, sl
 8016a4a:	4659      	mov	r1, fp
 8016a4c:	f7ea f854 	bl	8000af8 <__aeabi_dcmpeq>
 8016a50:	2800      	cmp	r0, #0
 8016a52:	d1ac      	bne.n	80169ae <_strtod_l+0x566>
 8016a54:	9b07      	ldr	r3, [sp, #28]
 8016a56:	9300      	str	r3, [sp, #0]
 8016a58:	9a05      	ldr	r2, [sp, #20]
 8016a5a:	9908      	ldr	r1, [sp, #32]
 8016a5c:	4623      	mov	r3, r4
 8016a5e:	4648      	mov	r0, r9
 8016a60:	f001 fdd2 	bl	8018608 <__s2b>
 8016a64:	9007      	str	r0, [sp, #28]
 8016a66:	2800      	cmp	r0, #0
 8016a68:	f43f af08 	beq.w	801687c <_strtod_l+0x434>
 8016a6c:	9a06      	ldr	r2, [sp, #24]
 8016a6e:	9b06      	ldr	r3, [sp, #24]
 8016a70:	2a00      	cmp	r2, #0
 8016a72:	f1c3 0300 	rsb	r3, r3, #0
 8016a76:	bfa8      	it	ge
 8016a78:	2300      	movge	r3, #0
 8016a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8016a7c:	2400      	movs	r4, #0
 8016a7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016a82:	9316      	str	r3, [sp, #88]	; 0x58
 8016a84:	46a0      	mov	r8, r4
 8016a86:	9b07      	ldr	r3, [sp, #28]
 8016a88:	4648      	mov	r0, r9
 8016a8a:	6859      	ldr	r1, [r3, #4]
 8016a8c:	f001 fd36 	bl	80184fc <_Balloc>
 8016a90:	9005      	str	r0, [sp, #20]
 8016a92:	2800      	cmp	r0, #0
 8016a94:	f43f aef6 	beq.w	8016884 <_strtod_l+0x43c>
 8016a98:	9b07      	ldr	r3, [sp, #28]
 8016a9a:	691a      	ldr	r2, [r3, #16]
 8016a9c:	3202      	adds	r2, #2
 8016a9e:	f103 010c 	add.w	r1, r3, #12
 8016aa2:	0092      	lsls	r2, r2, #2
 8016aa4:	300c      	adds	r0, #12
 8016aa6:	f7fe fdd3 	bl	8015650 <memcpy>
 8016aaa:	aa1e      	add	r2, sp, #120	; 0x78
 8016aac:	a91d      	add	r1, sp, #116	; 0x74
 8016aae:	ec4b ab10 	vmov	d0, sl, fp
 8016ab2:	4648      	mov	r0, r9
 8016ab4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016ab8:	f002 f862 	bl	8018b80 <__d2b>
 8016abc:	901c      	str	r0, [sp, #112]	; 0x70
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	f43f aee0 	beq.w	8016884 <_strtod_l+0x43c>
 8016ac4:	2101      	movs	r1, #1
 8016ac6:	4648      	mov	r0, r9
 8016ac8:	f001 fe2a 	bl	8018720 <__i2b>
 8016acc:	4680      	mov	r8, r0
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	f43f aed8 	beq.w	8016884 <_strtod_l+0x43c>
 8016ad4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016ad6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016ad8:	2e00      	cmp	r6, #0
 8016ada:	bfab      	itete	ge
 8016adc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016ade:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016ae0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016ae2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016ae4:	bfac      	ite	ge
 8016ae6:	18f7      	addge	r7, r6, r3
 8016ae8:	1b9d      	sublt	r5, r3, r6
 8016aea:	9b04      	ldr	r3, [sp, #16]
 8016aec:	1af6      	subs	r6, r6, r3
 8016aee:	4416      	add	r6, r2
 8016af0:	4b63      	ldr	r3, [pc, #396]	; (8016c80 <_strtod_l+0x838>)
 8016af2:	3e01      	subs	r6, #1
 8016af4:	429e      	cmp	r6, r3
 8016af6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016afa:	f280 80af 	bge.w	8016c5c <_strtod_l+0x814>
 8016afe:	1b9b      	subs	r3, r3, r6
 8016b00:	2b1f      	cmp	r3, #31
 8016b02:	eba2 0203 	sub.w	r2, r2, r3
 8016b06:	f04f 0101 	mov.w	r1, #1
 8016b0a:	f300 809b 	bgt.w	8016c44 <_strtod_l+0x7fc>
 8016b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8016b12:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b14:	2300      	movs	r3, #0
 8016b16:	930a      	str	r3, [sp, #40]	; 0x28
 8016b18:	18be      	adds	r6, r7, r2
 8016b1a:	9b04      	ldr	r3, [sp, #16]
 8016b1c:	42b7      	cmp	r7, r6
 8016b1e:	4415      	add	r5, r2
 8016b20:	441d      	add	r5, r3
 8016b22:	463b      	mov	r3, r7
 8016b24:	bfa8      	it	ge
 8016b26:	4633      	movge	r3, r6
 8016b28:	42ab      	cmp	r3, r5
 8016b2a:	bfa8      	it	ge
 8016b2c:	462b      	movge	r3, r5
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	bfc2      	ittt	gt
 8016b32:	1af6      	subgt	r6, r6, r3
 8016b34:	1aed      	subgt	r5, r5, r3
 8016b36:	1aff      	subgt	r7, r7, r3
 8016b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b3a:	b1bb      	cbz	r3, 8016b6c <_strtod_l+0x724>
 8016b3c:	4641      	mov	r1, r8
 8016b3e:	461a      	mov	r2, r3
 8016b40:	4648      	mov	r0, r9
 8016b42:	f001 fe8d 	bl	8018860 <__pow5mult>
 8016b46:	4680      	mov	r8, r0
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	f43f ae9b 	beq.w	8016884 <_strtod_l+0x43c>
 8016b4e:	4601      	mov	r1, r0
 8016b50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016b52:	4648      	mov	r0, r9
 8016b54:	f001 fded 	bl	8018732 <__multiply>
 8016b58:	900c      	str	r0, [sp, #48]	; 0x30
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	f43f ae92 	beq.w	8016884 <_strtod_l+0x43c>
 8016b60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016b62:	4648      	mov	r0, r9
 8016b64:	f001 fcfe 	bl	8018564 <_Bfree>
 8016b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b6a:	931c      	str	r3, [sp, #112]	; 0x70
 8016b6c:	2e00      	cmp	r6, #0
 8016b6e:	dc7a      	bgt.n	8016c66 <_strtod_l+0x81e>
 8016b70:	9b06      	ldr	r3, [sp, #24]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	dd08      	ble.n	8016b88 <_strtod_l+0x740>
 8016b76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016b78:	9905      	ldr	r1, [sp, #20]
 8016b7a:	4648      	mov	r0, r9
 8016b7c:	f001 fe70 	bl	8018860 <__pow5mult>
 8016b80:	9005      	str	r0, [sp, #20]
 8016b82:	2800      	cmp	r0, #0
 8016b84:	f43f ae7e 	beq.w	8016884 <_strtod_l+0x43c>
 8016b88:	2d00      	cmp	r5, #0
 8016b8a:	dd08      	ble.n	8016b9e <_strtod_l+0x756>
 8016b8c:	462a      	mov	r2, r5
 8016b8e:	9905      	ldr	r1, [sp, #20]
 8016b90:	4648      	mov	r0, r9
 8016b92:	f001 feb3 	bl	80188fc <__lshift>
 8016b96:	9005      	str	r0, [sp, #20]
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	f43f ae73 	beq.w	8016884 <_strtod_l+0x43c>
 8016b9e:	2f00      	cmp	r7, #0
 8016ba0:	dd08      	ble.n	8016bb4 <_strtod_l+0x76c>
 8016ba2:	4641      	mov	r1, r8
 8016ba4:	463a      	mov	r2, r7
 8016ba6:	4648      	mov	r0, r9
 8016ba8:	f001 fea8 	bl	80188fc <__lshift>
 8016bac:	4680      	mov	r8, r0
 8016bae:	2800      	cmp	r0, #0
 8016bb0:	f43f ae68 	beq.w	8016884 <_strtod_l+0x43c>
 8016bb4:	9a05      	ldr	r2, [sp, #20]
 8016bb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016bb8:	4648      	mov	r0, r9
 8016bba:	f001 ff0d 	bl	80189d8 <__mdiff>
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	f43f ae5f 	beq.w	8016884 <_strtod_l+0x43c>
 8016bc6:	68c3      	ldr	r3, [r0, #12]
 8016bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8016bca:	2300      	movs	r3, #0
 8016bcc:	60c3      	str	r3, [r0, #12]
 8016bce:	4641      	mov	r1, r8
 8016bd0:	f001 fee8 	bl	80189a4 <__mcmp>
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	da55      	bge.n	8016c84 <_strtod_l+0x83c>
 8016bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bda:	b9e3      	cbnz	r3, 8016c16 <_strtod_l+0x7ce>
 8016bdc:	f1ba 0f00 	cmp.w	sl, #0
 8016be0:	d119      	bne.n	8016c16 <_strtod_l+0x7ce>
 8016be2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016be6:	b9b3      	cbnz	r3, 8016c16 <_strtod_l+0x7ce>
 8016be8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016bec:	0d1b      	lsrs	r3, r3, #20
 8016bee:	051b      	lsls	r3, r3, #20
 8016bf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016bf4:	d90f      	bls.n	8016c16 <_strtod_l+0x7ce>
 8016bf6:	6963      	ldr	r3, [r4, #20]
 8016bf8:	b913      	cbnz	r3, 8016c00 <_strtod_l+0x7b8>
 8016bfa:	6923      	ldr	r3, [r4, #16]
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	dd0a      	ble.n	8016c16 <_strtod_l+0x7ce>
 8016c00:	4621      	mov	r1, r4
 8016c02:	2201      	movs	r2, #1
 8016c04:	4648      	mov	r0, r9
 8016c06:	f001 fe79 	bl	80188fc <__lshift>
 8016c0a:	4641      	mov	r1, r8
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	f001 fec9 	bl	80189a4 <__mcmp>
 8016c12:	2800      	cmp	r0, #0
 8016c14:	dc67      	bgt.n	8016ce6 <_strtod_l+0x89e>
 8016c16:	9b04      	ldr	r3, [sp, #16]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d171      	bne.n	8016d00 <_strtod_l+0x8b8>
 8016c1c:	e63d      	b.n	801689a <_strtod_l+0x452>
 8016c1e:	f018 0f01 	tst.w	r8, #1
 8016c22:	d004      	beq.n	8016c2e <_strtod_l+0x7e6>
 8016c24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016c28:	f7e9 fcfe 	bl	8000628 <__aeabi_dmul>
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016c32:	3508      	adds	r5, #8
 8016c34:	e6e5      	b.n	8016a02 <_strtod_l+0x5ba>
 8016c36:	f04f 32ff 	mov.w	r2, #4294967295
 8016c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8016c3e:	ea03 0a0a 	and.w	sl, r3, sl
 8016c42:	e6ff      	b.n	8016a44 <_strtod_l+0x5fc>
 8016c44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016c48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016c4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016c50:	36e2      	adds	r6, #226	; 0xe2
 8016c52:	fa01 f306 	lsl.w	r3, r1, r6
 8016c56:	930a      	str	r3, [sp, #40]	; 0x28
 8016c58:	910f      	str	r1, [sp, #60]	; 0x3c
 8016c5a:	e75d      	b.n	8016b18 <_strtod_l+0x6d0>
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8016c60:	2301      	movs	r3, #1
 8016c62:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c64:	e758      	b.n	8016b18 <_strtod_l+0x6d0>
 8016c66:	4632      	mov	r2, r6
 8016c68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c6a:	4648      	mov	r0, r9
 8016c6c:	f001 fe46 	bl	80188fc <__lshift>
 8016c70:	901c      	str	r0, [sp, #112]	; 0x70
 8016c72:	2800      	cmp	r0, #0
 8016c74:	f47f af7c 	bne.w	8016b70 <_strtod_l+0x728>
 8016c78:	e604      	b.n	8016884 <_strtod_l+0x43c>
 8016c7a:	bf00      	nop
 8016c7c:	0801a320 	.word	0x0801a320
 8016c80:	fffffc02 	.word	0xfffffc02
 8016c84:	465d      	mov	r5, fp
 8016c86:	f040 8086 	bne.w	8016d96 <_strtod_l+0x94e>
 8016c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c90:	b32a      	cbz	r2, 8016cde <_strtod_l+0x896>
 8016c92:	4aaf      	ldr	r2, [pc, #700]	; (8016f50 <_strtod_l+0xb08>)
 8016c94:	4293      	cmp	r3, r2
 8016c96:	d153      	bne.n	8016d40 <_strtod_l+0x8f8>
 8016c98:	9b04      	ldr	r3, [sp, #16]
 8016c9a:	4650      	mov	r0, sl
 8016c9c:	b1d3      	cbz	r3, 8016cd4 <_strtod_l+0x88c>
 8016c9e:	4aad      	ldr	r2, [pc, #692]	; (8016f54 <_strtod_l+0xb0c>)
 8016ca0:	402a      	ands	r2, r5
 8016ca2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8016caa:	d816      	bhi.n	8016cda <_strtod_l+0x892>
 8016cac:	0d12      	lsrs	r2, r2, #20
 8016cae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8016cb6:	4298      	cmp	r0, r3
 8016cb8:	d142      	bne.n	8016d40 <_strtod_l+0x8f8>
 8016cba:	4ba7      	ldr	r3, [pc, #668]	; (8016f58 <_strtod_l+0xb10>)
 8016cbc:	429d      	cmp	r5, r3
 8016cbe:	d102      	bne.n	8016cc6 <_strtod_l+0x87e>
 8016cc0:	3001      	adds	r0, #1
 8016cc2:	f43f addf 	beq.w	8016884 <_strtod_l+0x43c>
 8016cc6:	4ba3      	ldr	r3, [pc, #652]	; (8016f54 <_strtod_l+0xb0c>)
 8016cc8:	402b      	ands	r3, r5
 8016cca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016cce:	f04f 0a00 	mov.w	sl, #0
 8016cd2:	e7a0      	b.n	8016c16 <_strtod_l+0x7ce>
 8016cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8016cd8:	e7ed      	b.n	8016cb6 <_strtod_l+0x86e>
 8016cda:	460b      	mov	r3, r1
 8016cdc:	e7eb      	b.n	8016cb6 <_strtod_l+0x86e>
 8016cde:	bb7b      	cbnz	r3, 8016d40 <_strtod_l+0x8f8>
 8016ce0:	f1ba 0f00 	cmp.w	sl, #0
 8016ce4:	d12c      	bne.n	8016d40 <_strtod_l+0x8f8>
 8016ce6:	9904      	ldr	r1, [sp, #16]
 8016ce8:	4a9a      	ldr	r2, [pc, #616]	; (8016f54 <_strtod_l+0xb0c>)
 8016cea:	465b      	mov	r3, fp
 8016cec:	b1f1      	cbz	r1, 8016d2c <_strtod_l+0x8e4>
 8016cee:	ea02 010b 	and.w	r1, r2, fp
 8016cf2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016cf6:	dc19      	bgt.n	8016d2c <_strtod_l+0x8e4>
 8016cf8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016cfc:	f77f ae5b 	ble.w	80169b6 <_strtod_l+0x56e>
 8016d00:	4a96      	ldr	r2, [pc, #600]	; (8016f5c <_strtod_l+0xb14>)
 8016d02:	2300      	movs	r3, #0
 8016d04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016d08:	4650      	mov	r0, sl
 8016d0a:	4659      	mov	r1, fp
 8016d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016d10:	f7e9 fc8a 	bl	8000628 <__aeabi_dmul>
 8016d14:	4682      	mov	sl, r0
 8016d16:	468b      	mov	fp, r1
 8016d18:	2900      	cmp	r1, #0
 8016d1a:	f47f adbe 	bne.w	801689a <_strtod_l+0x452>
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	f47f adbb 	bne.w	801689a <_strtod_l+0x452>
 8016d24:	2322      	movs	r3, #34	; 0x22
 8016d26:	f8c9 3000 	str.w	r3, [r9]
 8016d2a:	e5b6      	b.n	801689a <_strtod_l+0x452>
 8016d2c:	4013      	ands	r3, r2
 8016d2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016d32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016d36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016d3a:	f04f 3aff 	mov.w	sl, #4294967295
 8016d3e:	e76a      	b.n	8016c16 <_strtod_l+0x7ce>
 8016d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d42:	b193      	cbz	r3, 8016d6a <_strtod_l+0x922>
 8016d44:	422b      	tst	r3, r5
 8016d46:	f43f af66 	beq.w	8016c16 <_strtod_l+0x7ce>
 8016d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d4c:	9a04      	ldr	r2, [sp, #16]
 8016d4e:	4650      	mov	r0, sl
 8016d50:	4659      	mov	r1, fp
 8016d52:	b173      	cbz	r3, 8016d72 <_strtod_l+0x92a>
 8016d54:	f7ff fb5c 	bl	8016410 <sulp>
 8016d58:	4602      	mov	r2, r0
 8016d5a:	460b      	mov	r3, r1
 8016d5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016d60:	f7e9 faac 	bl	80002bc <__adddf3>
 8016d64:	4682      	mov	sl, r0
 8016d66:	468b      	mov	fp, r1
 8016d68:	e755      	b.n	8016c16 <_strtod_l+0x7ce>
 8016d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d6c:	ea13 0f0a 	tst.w	r3, sl
 8016d70:	e7e9      	b.n	8016d46 <_strtod_l+0x8fe>
 8016d72:	f7ff fb4d 	bl	8016410 <sulp>
 8016d76:	4602      	mov	r2, r0
 8016d78:	460b      	mov	r3, r1
 8016d7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016d7e:	f7e9 fa9b 	bl	80002b8 <__aeabi_dsub>
 8016d82:	2200      	movs	r2, #0
 8016d84:	2300      	movs	r3, #0
 8016d86:	4682      	mov	sl, r0
 8016d88:	468b      	mov	fp, r1
 8016d8a:	f7e9 feb5 	bl	8000af8 <__aeabi_dcmpeq>
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	f47f ae11 	bne.w	80169b6 <_strtod_l+0x56e>
 8016d94:	e73f      	b.n	8016c16 <_strtod_l+0x7ce>
 8016d96:	4641      	mov	r1, r8
 8016d98:	4620      	mov	r0, r4
 8016d9a:	f001 ff40 	bl	8018c1e <__ratio>
 8016d9e:	ec57 6b10 	vmov	r6, r7, d0
 8016da2:	2200      	movs	r2, #0
 8016da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016da8:	ee10 0a10 	vmov	r0, s0
 8016dac:	4639      	mov	r1, r7
 8016dae:	f7e9 feb7 	bl	8000b20 <__aeabi_dcmple>
 8016db2:	2800      	cmp	r0, #0
 8016db4:	d077      	beq.n	8016ea6 <_strtod_l+0xa5e>
 8016db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d04a      	beq.n	8016e52 <_strtod_l+0xa0a>
 8016dbc:	4b68      	ldr	r3, [pc, #416]	; (8016f60 <_strtod_l+0xb18>)
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016dc4:	4f66      	ldr	r7, [pc, #408]	; (8016f60 <_strtod_l+0xb18>)
 8016dc6:	2600      	movs	r6, #0
 8016dc8:	4b62      	ldr	r3, [pc, #392]	; (8016f54 <_strtod_l+0xb0c>)
 8016dca:	402b      	ands	r3, r5
 8016dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8016dce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016dd0:	4b64      	ldr	r3, [pc, #400]	; (8016f64 <_strtod_l+0xb1c>)
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	f040 80ce 	bne.w	8016f74 <_strtod_l+0xb2c>
 8016dd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016ddc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016de0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016de4:	ec4b ab10 	vmov	d0, sl, fp
 8016de8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016dec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016df0:	f001 fe50 	bl	8018a94 <__ulp>
 8016df4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016df8:	ec53 2b10 	vmov	r2, r3, d0
 8016dfc:	f7e9 fc14 	bl	8000628 <__aeabi_dmul>
 8016e00:	4652      	mov	r2, sl
 8016e02:	465b      	mov	r3, fp
 8016e04:	f7e9 fa5a 	bl	80002bc <__adddf3>
 8016e08:	460b      	mov	r3, r1
 8016e0a:	4952      	ldr	r1, [pc, #328]	; (8016f54 <_strtod_l+0xb0c>)
 8016e0c:	4a56      	ldr	r2, [pc, #344]	; (8016f68 <_strtod_l+0xb20>)
 8016e0e:	4019      	ands	r1, r3
 8016e10:	4291      	cmp	r1, r2
 8016e12:	4682      	mov	sl, r0
 8016e14:	d95b      	bls.n	8016ece <_strtod_l+0xa86>
 8016e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016e1c:	4293      	cmp	r3, r2
 8016e1e:	d103      	bne.n	8016e28 <_strtod_l+0x9e0>
 8016e20:	9b08      	ldr	r3, [sp, #32]
 8016e22:	3301      	adds	r3, #1
 8016e24:	f43f ad2e 	beq.w	8016884 <_strtod_l+0x43c>
 8016e28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016f58 <_strtod_l+0xb10>
 8016e2c:	f04f 3aff 	mov.w	sl, #4294967295
 8016e30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e32:	4648      	mov	r0, r9
 8016e34:	f001 fb96 	bl	8018564 <_Bfree>
 8016e38:	9905      	ldr	r1, [sp, #20]
 8016e3a:	4648      	mov	r0, r9
 8016e3c:	f001 fb92 	bl	8018564 <_Bfree>
 8016e40:	4641      	mov	r1, r8
 8016e42:	4648      	mov	r0, r9
 8016e44:	f001 fb8e 	bl	8018564 <_Bfree>
 8016e48:	4621      	mov	r1, r4
 8016e4a:	4648      	mov	r0, r9
 8016e4c:	f001 fb8a 	bl	8018564 <_Bfree>
 8016e50:	e619      	b.n	8016a86 <_strtod_l+0x63e>
 8016e52:	f1ba 0f00 	cmp.w	sl, #0
 8016e56:	d11a      	bne.n	8016e8e <_strtod_l+0xa46>
 8016e58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e5c:	b9eb      	cbnz	r3, 8016e9a <_strtod_l+0xa52>
 8016e5e:	2200      	movs	r2, #0
 8016e60:	4b3f      	ldr	r3, [pc, #252]	; (8016f60 <_strtod_l+0xb18>)
 8016e62:	4630      	mov	r0, r6
 8016e64:	4639      	mov	r1, r7
 8016e66:	f7e9 fe51 	bl	8000b0c <__aeabi_dcmplt>
 8016e6a:	b9c8      	cbnz	r0, 8016ea0 <_strtod_l+0xa58>
 8016e6c:	4630      	mov	r0, r6
 8016e6e:	4639      	mov	r1, r7
 8016e70:	2200      	movs	r2, #0
 8016e72:	4b3e      	ldr	r3, [pc, #248]	; (8016f6c <_strtod_l+0xb24>)
 8016e74:	f7e9 fbd8 	bl	8000628 <__aeabi_dmul>
 8016e78:	4606      	mov	r6, r0
 8016e7a:	460f      	mov	r7, r1
 8016e7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016e80:	9618      	str	r6, [sp, #96]	; 0x60
 8016e82:	9319      	str	r3, [sp, #100]	; 0x64
 8016e84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016e88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016e8c:	e79c      	b.n	8016dc8 <_strtod_l+0x980>
 8016e8e:	f1ba 0f01 	cmp.w	sl, #1
 8016e92:	d102      	bne.n	8016e9a <_strtod_l+0xa52>
 8016e94:	2d00      	cmp	r5, #0
 8016e96:	f43f ad8e 	beq.w	80169b6 <_strtod_l+0x56e>
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	4b34      	ldr	r3, [pc, #208]	; (8016f70 <_strtod_l+0xb28>)
 8016e9e:	e78f      	b.n	8016dc0 <_strtod_l+0x978>
 8016ea0:	2600      	movs	r6, #0
 8016ea2:	4f32      	ldr	r7, [pc, #200]	; (8016f6c <_strtod_l+0xb24>)
 8016ea4:	e7ea      	b.n	8016e7c <_strtod_l+0xa34>
 8016ea6:	4b31      	ldr	r3, [pc, #196]	; (8016f6c <_strtod_l+0xb24>)
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	4639      	mov	r1, r7
 8016eac:	2200      	movs	r2, #0
 8016eae:	f7e9 fbbb 	bl	8000628 <__aeabi_dmul>
 8016eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016eb4:	4606      	mov	r6, r0
 8016eb6:	460f      	mov	r7, r1
 8016eb8:	b933      	cbnz	r3, 8016ec8 <_strtod_l+0xa80>
 8016eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ebe:	9010      	str	r0, [sp, #64]	; 0x40
 8016ec0:	9311      	str	r3, [sp, #68]	; 0x44
 8016ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016ec6:	e7df      	b.n	8016e88 <_strtod_l+0xa40>
 8016ec8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016ecc:	e7f9      	b.n	8016ec2 <_strtod_l+0xa7a>
 8016ece:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016ed2:	9b04      	ldr	r3, [sp, #16]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d1ab      	bne.n	8016e30 <_strtod_l+0x9e8>
 8016ed8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016edc:	0d1b      	lsrs	r3, r3, #20
 8016ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ee0:	051b      	lsls	r3, r3, #20
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	465d      	mov	r5, fp
 8016ee6:	d1a3      	bne.n	8016e30 <_strtod_l+0x9e8>
 8016ee8:	4639      	mov	r1, r7
 8016eea:	4630      	mov	r0, r6
 8016eec:	f7e9 fe4c 	bl	8000b88 <__aeabi_d2iz>
 8016ef0:	f7e9 fb30 	bl	8000554 <__aeabi_i2d>
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	4602      	mov	r2, r0
 8016ef8:	4639      	mov	r1, r7
 8016efa:	4630      	mov	r0, r6
 8016efc:	f7e9 f9dc 	bl	80002b8 <__aeabi_dsub>
 8016f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f02:	4606      	mov	r6, r0
 8016f04:	460f      	mov	r7, r1
 8016f06:	b933      	cbnz	r3, 8016f16 <_strtod_l+0xace>
 8016f08:	f1ba 0f00 	cmp.w	sl, #0
 8016f0c:	d103      	bne.n	8016f16 <_strtod_l+0xace>
 8016f0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016f12:	2d00      	cmp	r5, #0
 8016f14:	d06d      	beq.n	8016ff2 <_strtod_l+0xbaa>
 8016f16:	a30a      	add	r3, pc, #40	; (adr r3, 8016f40 <_strtod_l+0xaf8>)
 8016f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1c:	4630      	mov	r0, r6
 8016f1e:	4639      	mov	r1, r7
 8016f20:	f7e9 fdf4 	bl	8000b0c <__aeabi_dcmplt>
 8016f24:	2800      	cmp	r0, #0
 8016f26:	f47f acb8 	bne.w	801689a <_strtod_l+0x452>
 8016f2a:	a307      	add	r3, pc, #28	; (adr r3, 8016f48 <_strtod_l+0xb00>)
 8016f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f30:	4630      	mov	r0, r6
 8016f32:	4639      	mov	r1, r7
 8016f34:	f7e9 fe08 	bl	8000b48 <__aeabi_dcmpgt>
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	f43f af79 	beq.w	8016e30 <_strtod_l+0x9e8>
 8016f3e:	e4ac      	b.n	801689a <_strtod_l+0x452>
 8016f40:	94a03595 	.word	0x94a03595
 8016f44:	3fdfffff 	.word	0x3fdfffff
 8016f48:	35afe535 	.word	0x35afe535
 8016f4c:	3fe00000 	.word	0x3fe00000
 8016f50:	000fffff 	.word	0x000fffff
 8016f54:	7ff00000 	.word	0x7ff00000
 8016f58:	7fefffff 	.word	0x7fefffff
 8016f5c:	39500000 	.word	0x39500000
 8016f60:	3ff00000 	.word	0x3ff00000
 8016f64:	7fe00000 	.word	0x7fe00000
 8016f68:	7c9fffff 	.word	0x7c9fffff
 8016f6c:	3fe00000 	.word	0x3fe00000
 8016f70:	bff00000 	.word	0xbff00000
 8016f74:	9b04      	ldr	r3, [sp, #16]
 8016f76:	b333      	cbz	r3, 8016fc6 <_strtod_l+0xb7e>
 8016f78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016f7e:	d822      	bhi.n	8016fc6 <_strtod_l+0xb7e>
 8016f80:	a327      	add	r3, pc, #156	; (adr r3, 8017020 <_strtod_l+0xbd8>)
 8016f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f86:	4630      	mov	r0, r6
 8016f88:	4639      	mov	r1, r7
 8016f8a:	f7e9 fdc9 	bl	8000b20 <__aeabi_dcmple>
 8016f8e:	b1a0      	cbz	r0, 8016fba <_strtod_l+0xb72>
 8016f90:	4639      	mov	r1, r7
 8016f92:	4630      	mov	r0, r6
 8016f94:	f7e9 fe20 	bl	8000bd8 <__aeabi_d2uiz>
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	bf08      	it	eq
 8016f9c:	2001      	moveq	r0, #1
 8016f9e:	f7e9 fac9 	bl	8000534 <__aeabi_ui2d>
 8016fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fa4:	4606      	mov	r6, r0
 8016fa6:	460f      	mov	r7, r1
 8016fa8:	bb03      	cbnz	r3, 8016fec <_strtod_l+0xba4>
 8016faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016fae:	9012      	str	r0, [sp, #72]	; 0x48
 8016fb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016fb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016fb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fbe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016fc2:	1a9b      	subs	r3, r3, r2
 8016fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fc6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016fca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016fce:	f001 fd61 	bl	8018a94 <__ulp>
 8016fd2:	4650      	mov	r0, sl
 8016fd4:	ec53 2b10 	vmov	r2, r3, d0
 8016fd8:	4659      	mov	r1, fp
 8016fda:	f7e9 fb25 	bl	8000628 <__aeabi_dmul>
 8016fde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016fe2:	f7e9 f96b 	bl	80002bc <__adddf3>
 8016fe6:	4682      	mov	sl, r0
 8016fe8:	468b      	mov	fp, r1
 8016fea:	e772      	b.n	8016ed2 <_strtod_l+0xa8a>
 8016fec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016ff0:	e7df      	b.n	8016fb2 <_strtod_l+0xb6a>
 8016ff2:	a30d      	add	r3, pc, #52	; (adr r3, 8017028 <_strtod_l+0xbe0>)
 8016ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff8:	f7e9 fd88 	bl	8000b0c <__aeabi_dcmplt>
 8016ffc:	e79c      	b.n	8016f38 <_strtod_l+0xaf0>
 8016ffe:	2300      	movs	r3, #0
 8017000:	930d      	str	r3, [sp, #52]	; 0x34
 8017002:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017006:	6013      	str	r3, [r2, #0]
 8017008:	f7ff ba61 	b.w	80164ce <_strtod_l+0x86>
 801700c:	2b65      	cmp	r3, #101	; 0x65
 801700e:	f04f 0200 	mov.w	r2, #0
 8017012:	f43f ab4e 	beq.w	80166b2 <_strtod_l+0x26a>
 8017016:	2101      	movs	r1, #1
 8017018:	4614      	mov	r4, r2
 801701a:	9104      	str	r1, [sp, #16]
 801701c:	f7ff bacb 	b.w	80165b6 <_strtod_l+0x16e>
 8017020:	ffc00000 	.word	0xffc00000
 8017024:	41dfffff 	.word	0x41dfffff
 8017028:	94a03595 	.word	0x94a03595
 801702c:	3fcfffff 	.word	0x3fcfffff

08017030 <_strtod_r>:
 8017030:	4b05      	ldr	r3, [pc, #20]	; (8017048 <_strtod_r+0x18>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	b410      	push	{r4}
 8017036:	6a1b      	ldr	r3, [r3, #32]
 8017038:	4c04      	ldr	r4, [pc, #16]	; (801704c <_strtod_r+0x1c>)
 801703a:	2b00      	cmp	r3, #0
 801703c:	bf08      	it	eq
 801703e:	4623      	moveq	r3, r4
 8017040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017044:	f7ff ba00 	b.w	8016448 <_strtod_l>
 8017048:	2000000c 	.word	0x2000000c
 801704c:	20000070 	.word	0x20000070

08017050 <_strtol_l.isra.0>:
 8017050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017054:	4680      	mov	r8, r0
 8017056:	4689      	mov	r9, r1
 8017058:	4692      	mov	sl, r2
 801705a:	461e      	mov	r6, r3
 801705c:	460f      	mov	r7, r1
 801705e:	463d      	mov	r5, r7
 8017060:	9808      	ldr	r0, [sp, #32]
 8017062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017066:	f001 fa0d 	bl	8018484 <__locale_ctype_ptr_l>
 801706a:	4420      	add	r0, r4
 801706c:	7843      	ldrb	r3, [r0, #1]
 801706e:	f013 0308 	ands.w	r3, r3, #8
 8017072:	d132      	bne.n	80170da <_strtol_l.isra.0+0x8a>
 8017074:	2c2d      	cmp	r4, #45	; 0x2d
 8017076:	d132      	bne.n	80170de <_strtol_l.isra.0+0x8e>
 8017078:	787c      	ldrb	r4, [r7, #1]
 801707a:	1cbd      	adds	r5, r7, #2
 801707c:	2201      	movs	r2, #1
 801707e:	2e00      	cmp	r6, #0
 8017080:	d05d      	beq.n	801713e <_strtol_l.isra.0+0xee>
 8017082:	2e10      	cmp	r6, #16
 8017084:	d109      	bne.n	801709a <_strtol_l.isra.0+0x4a>
 8017086:	2c30      	cmp	r4, #48	; 0x30
 8017088:	d107      	bne.n	801709a <_strtol_l.isra.0+0x4a>
 801708a:	782b      	ldrb	r3, [r5, #0]
 801708c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017090:	2b58      	cmp	r3, #88	; 0x58
 8017092:	d14f      	bne.n	8017134 <_strtol_l.isra.0+0xe4>
 8017094:	786c      	ldrb	r4, [r5, #1]
 8017096:	2610      	movs	r6, #16
 8017098:	3502      	adds	r5, #2
 801709a:	2a00      	cmp	r2, #0
 801709c:	bf14      	ite	ne
 801709e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80170a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80170a6:	2700      	movs	r7, #0
 80170a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80170ac:	4638      	mov	r0, r7
 80170ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80170b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80170b6:	2b09      	cmp	r3, #9
 80170b8:	d817      	bhi.n	80170ea <_strtol_l.isra.0+0x9a>
 80170ba:	461c      	mov	r4, r3
 80170bc:	42a6      	cmp	r6, r4
 80170be:	dd23      	ble.n	8017108 <_strtol_l.isra.0+0xb8>
 80170c0:	1c7b      	adds	r3, r7, #1
 80170c2:	d007      	beq.n	80170d4 <_strtol_l.isra.0+0x84>
 80170c4:	4584      	cmp	ip, r0
 80170c6:	d31c      	bcc.n	8017102 <_strtol_l.isra.0+0xb2>
 80170c8:	d101      	bne.n	80170ce <_strtol_l.isra.0+0x7e>
 80170ca:	45a6      	cmp	lr, r4
 80170cc:	db19      	blt.n	8017102 <_strtol_l.isra.0+0xb2>
 80170ce:	fb00 4006 	mla	r0, r0, r6, r4
 80170d2:	2701      	movs	r7, #1
 80170d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170d8:	e7eb      	b.n	80170b2 <_strtol_l.isra.0+0x62>
 80170da:	462f      	mov	r7, r5
 80170dc:	e7bf      	b.n	801705e <_strtol_l.isra.0+0xe>
 80170de:	2c2b      	cmp	r4, #43	; 0x2b
 80170e0:	bf04      	itt	eq
 80170e2:	1cbd      	addeq	r5, r7, #2
 80170e4:	787c      	ldrbeq	r4, [r7, #1]
 80170e6:	461a      	mov	r2, r3
 80170e8:	e7c9      	b.n	801707e <_strtol_l.isra.0+0x2e>
 80170ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80170ee:	2b19      	cmp	r3, #25
 80170f0:	d801      	bhi.n	80170f6 <_strtol_l.isra.0+0xa6>
 80170f2:	3c37      	subs	r4, #55	; 0x37
 80170f4:	e7e2      	b.n	80170bc <_strtol_l.isra.0+0x6c>
 80170f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80170fa:	2b19      	cmp	r3, #25
 80170fc:	d804      	bhi.n	8017108 <_strtol_l.isra.0+0xb8>
 80170fe:	3c57      	subs	r4, #87	; 0x57
 8017100:	e7dc      	b.n	80170bc <_strtol_l.isra.0+0x6c>
 8017102:	f04f 37ff 	mov.w	r7, #4294967295
 8017106:	e7e5      	b.n	80170d4 <_strtol_l.isra.0+0x84>
 8017108:	1c7b      	adds	r3, r7, #1
 801710a:	d108      	bne.n	801711e <_strtol_l.isra.0+0xce>
 801710c:	2322      	movs	r3, #34	; 0x22
 801710e:	f8c8 3000 	str.w	r3, [r8]
 8017112:	4608      	mov	r0, r1
 8017114:	f1ba 0f00 	cmp.w	sl, #0
 8017118:	d107      	bne.n	801712a <_strtol_l.isra.0+0xda>
 801711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801711e:	b102      	cbz	r2, 8017122 <_strtol_l.isra.0+0xd2>
 8017120:	4240      	negs	r0, r0
 8017122:	f1ba 0f00 	cmp.w	sl, #0
 8017126:	d0f8      	beq.n	801711a <_strtol_l.isra.0+0xca>
 8017128:	b10f      	cbz	r7, 801712e <_strtol_l.isra.0+0xde>
 801712a:	f105 39ff 	add.w	r9, r5, #4294967295
 801712e:	f8ca 9000 	str.w	r9, [sl]
 8017132:	e7f2      	b.n	801711a <_strtol_l.isra.0+0xca>
 8017134:	2430      	movs	r4, #48	; 0x30
 8017136:	2e00      	cmp	r6, #0
 8017138:	d1af      	bne.n	801709a <_strtol_l.isra.0+0x4a>
 801713a:	2608      	movs	r6, #8
 801713c:	e7ad      	b.n	801709a <_strtol_l.isra.0+0x4a>
 801713e:	2c30      	cmp	r4, #48	; 0x30
 8017140:	d0a3      	beq.n	801708a <_strtol_l.isra.0+0x3a>
 8017142:	260a      	movs	r6, #10
 8017144:	e7a9      	b.n	801709a <_strtol_l.isra.0+0x4a>
	...

08017148 <_strtol_r>:
 8017148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801714a:	4c06      	ldr	r4, [pc, #24]	; (8017164 <_strtol_r+0x1c>)
 801714c:	4d06      	ldr	r5, [pc, #24]	; (8017168 <_strtol_r+0x20>)
 801714e:	6824      	ldr	r4, [r4, #0]
 8017150:	6a24      	ldr	r4, [r4, #32]
 8017152:	2c00      	cmp	r4, #0
 8017154:	bf08      	it	eq
 8017156:	462c      	moveq	r4, r5
 8017158:	9400      	str	r4, [sp, #0]
 801715a:	f7ff ff79 	bl	8017050 <_strtol_l.isra.0>
 801715e:	b003      	add	sp, #12
 8017160:	bd30      	pop	{r4, r5, pc}
 8017162:	bf00      	nop
 8017164:	2000000c 	.word	0x2000000c
 8017168:	20000070 	.word	0x20000070

0801716c <_vsiprintf_r>:
 801716c:	b500      	push	{lr}
 801716e:	b09b      	sub	sp, #108	; 0x6c
 8017170:	9100      	str	r1, [sp, #0]
 8017172:	9104      	str	r1, [sp, #16]
 8017174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017178:	9105      	str	r1, [sp, #20]
 801717a:	9102      	str	r1, [sp, #8]
 801717c:	4905      	ldr	r1, [pc, #20]	; (8017194 <_vsiprintf_r+0x28>)
 801717e:	9103      	str	r1, [sp, #12]
 8017180:	4669      	mov	r1, sp
 8017182:	f001 fecb 	bl	8018f1c <_svfiprintf_r>
 8017186:	9b00      	ldr	r3, [sp, #0]
 8017188:	2200      	movs	r2, #0
 801718a:	701a      	strb	r2, [r3, #0]
 801718c:	b01b      	add	sp, #108	; 0x6c
 801718e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017192:	bf00      	nop
 8017194:	ffff0208 	.word	0xffff0208

08017198 <vsiprintf>:
 8017198:	4613      	mov	r3, r2
 801719a:	460a      	mov	r2, r1
 801719c:	4601      	mov	r1, r0
 801719e:	4802      	ldr	r0, [pc, #8]	; (80171a8 <vsiprintf+0x10>)
 80171a0:	6800      	ldr	r0, [r0, #0]
 80171a2:	f7ff bfe3 	b.w	801716c <_vsiprintf_r>
 80171a6:	bf00      	nop
 80171a8:	2000000c 	.word	0x2000000c

080171ac <quorem>:
 80171ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171b0:	6903      	ldr	r3, [r0, #16]
 80171b2:	690c      	ldr	r4, [r1, #16]
 80171b4:	42a3      	cmp	r3, r4
 80171b6:	4680      	mov	r8, r0
 80171b8:	f2c0 8082 	blt.w	80172c0 <quorem+0x114>
 80171bc:	3c01      	subs	r4, #1
 80171be:	f101 0714 	add.w	r7, r1, #20
 80171c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80171c6:	f100 0614 	add.w	r6, r0, #20
 80171ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80171ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80171d2:	eb06 030c 	add.w	r3, r6, ip
 80171d6:	3501      	adds	r5, #1
 80171d8:	eb07 090c 	add.w	r9, r7, ip
 80171dc:	9301      	str	r3, [sp, #4]
 80171de:	fbb0 f5f5 	udiv	r5, r0, r5
 80171e2:	b395      	cbz	r5, 801724a <quorem+0x9e>
 80171e4:	f04f 0a00 	mov.w	sl, #0
 80171e8:	4638      	mov	r0, r7
 80171ea:	46b6      	mov	lr, r6
 80171ec:	46d3      	mov	fp, sl
 80171ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80171f2:	b293      	uxth	r3, r2
 80171f4:	fb05 a303 	mla	r3, r5, r3, sl
 80171f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80171fc:	b29b      	uxth	r3, r3
 80171fe:	ebab 0303 	sub.w	r3, fp, r3
 8017202:	0c12      	lsrs	r2, r2, #16
 8017204:	f8de b000 	ldr.w	fp, [lr]
 8017208:	fb05 a202 	mla	r2, r5, r2, sl
 801720c:	fa13 f38b 	uxtah	r3, r3, fp
 8017210:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017214:	fa1f fb82 	uxth.w	fp, r2
 8017218:	f8de 2000 	ldr.w	r2, [lr]
 801721c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017224:	b29b      	uxth	r3, r3
 8017226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801722a:	4581      	cmp	r9, r0
 801722c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017230:	f84e 3b04 	str.w	r3, [lr], #4
 8017234:	d2db      	bcs.n	80171ee <quorem+0x42>
 8017236:	f856 300c 	ldr.w	r3, [r6, ip]
 801723a:	b933      	cbnz	r3, 801724a <quorem+0x9e>
 801723c:	9b01      	ldr	r3, [sp, #4]
 801723e:	3b04      	subs	r3, #4
 8017240:	429e      	cmp	r6, r3
 8017242:	461a      	mov	r2, r3
 8017244:	d330      	bcc.n	80172a8 <quorem+0xfc>
 8017246:	f8c8 4010 	str.w	r4, [r8, #16]
 801724a:	4640      	mov	r0, r8
 801724c:	f001 fbaa 	bl	80189a4 <__mcmp>
 8017250:	2800      	cmp	r0, #0
 8017252:	db25      	blt.n	80172a0 <quorem+0xf4>
 8017254:	3501      	adds	r5, #1
 8017256:	4630      	mov	r0, r6
 8017258:	f04f 0c00 	mov.w	ip, #0
 801725c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017260:	f8d0 e000 	ldr.w	lr, [r0]
 8017264:	b293      	uxth	r3, r2
 8017266:	ebac 0303 	sub.w	r3, ip, r3
 801726a:	0c12      	lsrs	r2, r2, #16
 801726c:	fa13 f38e 	uxtah	r3, r3, lr
 8017270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017278:	b29b      	uxth	r3, r3
 801727a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801727e:	45b9      	cmp	r9, r7
 8017280:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017284:	f840 3b04 	str.w	r3, [r0], #4
 8017288:	d2e8      	bcs.n	801725c <quorem+0xb0>
 801728a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801728e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017292:	b92a      	cbnz	r2, 80172a0 <quorem+0xf4>
 8017294:	3b04      	subs	r3, #4
 8017296:	429e      	cmp	r6, r3
 8017298:	461a      	mov	r2, r3
 801729a:	d30b      	bcc.n	80172b4 <quorem+0x108>
 801729c:	f8c8 4010 	str.w	r4, [r8, #16]
 80172a0:	4628      	mov	r0, r5
 80172a2:	b003      	add	sp, #12
 80172a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172a8:	6812      	ldr	r2, [r2, #0]
 80172aa:	3b04      	subs	r3, #4
 80172ac:	2a00      	cmp	r2, #0
 80172ae:	d1ca      	bne.n	8017246 <quorem+0x9a>
 80172b0:	3c01      	subs	r4, #1
 80172b2:	e7c5      	b.n	8017240 <quorem+0x94>
 80172b4:	6812      	ldr	r2, [r2, #0]
 80172b6:	3b04      	subs	r3, #4
 80172b8:	2a00      	cmp	r2, #0
 80172ba:	d1ef      	bne.n	801729c <quorem+0xf0>
 80172bc:	3c01      	subs	r4, #1
 80172be:	e7ea      	b.n	8017296 <quorem+0xea>
 80172c0:	2000      	movs	r0, #0
 80172c2:	e7ee      	b.n	80172a2 <quorem+0xf6>
 80172c4:	0000      	movs	r0, r0
	...

080172c8 <_dtoa_r>:
 80172c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172cc:	ec57 6b10 	vmov	r6, r7, d0
 80172d0:	b097      	sub	sp, #92	; 0x5c
 80172d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80172d4:	9106      	str	r1, [sp, #24]
 80172d6:	4604      	mov	r4, r0
 80172d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80172da:	9312      	str	r3, [sp, #72]	; 0x48
 80172dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80172e0:	e9cd 6700 	strd	r6, r7, [sp]
 80172e4:	b93d      	cbnz	r5, 80172f6 <_dtoa_r+0x2e>
 80172e6:	2010      	movs	r0, #16
 80172e8:	f001 f8ee 	bl	80184c8 <malloc>
 80172ec:	6260      	str	r0, [r4, #36]	; 0x24
 80172ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80172f2:	6005      	str	r5, [r0, #0]
 80172f4:	60c5      	str	r5, [r0, #12]
 80172f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172f8:	6819      	ldr	r1, [r3, #0]
 80172fa:	b151      	cbz	r1, 8017312 <_dtoa_r+0x4a>
 80172fc:	685a      	ldr	r2, [r3, #4]
 80172fe:	604a      	str	r2, [r1, #4]
 8017300:	2301      	movs	r3, #1
 8017302:	4093      	lsls	r3, r2
 8017304:	608b      	str	r3, [r1, #8]
 8017306:	4620      	mov	r0, r4
 8017308:	f001 f92c 	bl	8018564 <_Bfree>
 801730c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801730e:	2200      	movs	r2, #0
 8017310:	601a      	str	r2, [r3, #0]
 8017312:	1e3b      	subs	r3, r7, #0
 8017314:	bfbb      	ittet	lt
 8017316:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801731a:	9301      	strlt	r3, [sp, #4]
 801731c:	2300      	movge	r3, #0
 801731e:	2201      	movlt	r2, #1
 8017320:	bfac      	ite	ge
 8017322:	f8c8 3000 	strge.w	r3, [r8]
 8017326:	f8c8 2000 	strlt.w	r2, [r8]
 801732a:	4baf      	ldr	r3, [pc, #700]	; (80175e8 <_dtoa_r+0x320>)
 801732c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017330:	ea33 0308 	bics.w	r3, r3, r8
 8017334:	d114      	bne.n	8017360 <_dtoa_r+0x98>
 8017336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017338:	f242 730f 	movw	r3, #9999	; 0x270f
 801733c:	6013      	str	r3, [r2, #0]
 801733e:	9b00      	ldr	r3, [sp, #0]
 8017340:	b923      	cbnz	r3, 801734c <_dtoa_r+0x84>
 8017342:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017346:	2800      	cmp	r0, #0
 8017348:	f000 8542 	beq.w	8017dd0 <_dtoa_r+0xb08>
 801734c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801734e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80175fc <_dtoa_r+0x334>
 8017352:	2b00      	cmp	r3, #0
 8017354:	f000 8544 	beq.w	8017de0 <_dtoa_r+0xb18>
 8017358:	f10b 0303 	add.w	r3, fp, #3
 801735c:	f000 bd3e 	b.w	8017ddc <_dtoa_r+0xb14>
 8017360:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017364:	2200      	movs	r2, #0
 8017366:	2300      	movs	r3, #0
 8017368:	4630      	mov	r0, r6
 801736a:	4639      	mov	r1, r7
 801736c:	f7e9 fbc4 	bl	8000af8 <__aeabi_dcmpeq>
 8017370:	4681      	mov	r9, r0
 8017372:	b168      	cbz	r0, 8017390 <_dtoa_r+0xc8>
 8017374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017376:	2301      	movs	r3, #1
 8017378:	6013      	str	r3, [r2, #0]
 801737a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801737c:	2b00      	cmp	r3, #0
 801737e:	f000 8524 	beq.w	8017dca <_dtoa_r+0xb02>
 8017382:	4b9a      	ldr	r3, [pc, #616]	; (80175ec <_dtoa_r+0x324>)
 8017384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017386:	f103 3bff 	add.w	fp, r3, #4294967295
 801738a:	6013      	str	r3, [r2, #0]
 801738c:	f000 bd28 	b.w	8017de0 <_dtoa_r+0xb18>
 8017390:	aa14      	add	r2, sp, #80	; 0x50
 8017392:	a915      	add	r1, sp, #84	; 0x54
 8017394:	ec47 6b10 	vmov	d0, r6, r7
 8017398:	4620      	mov	r0, r4
 801739a:	f001 fbf1 	bl	8018b80 <__d2b>
 801739e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80173a2:	9004      	str	r0, [sp, #16]
 80173a4:	2d00      	cmp	r5, #0
 80173a6:	d07c      	beq.n	80174a2 <_dtoa_r+0x1da>
 80173a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80173ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80173b0:	46b2      	mov	sl, r6
 80173b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80173b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80173ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80173be:	2200      	movs	r2, #0
 80173c0:	4b8b      	ldr	r3, [pc, #556]	; (80175f0 <_dtoa_r+0x328>)
 80173c2:	4650      	mov	r0, sl
 80173c4:	4659      	mov	r1, fp
 80173c6:	f7e8 ff77 	bl	80002b8 <__aeabi_dsub>
 80173ca:	a381      	add	r3, pc, #516	; (adr r3, 80175d0 <_dtoa_r+0x308>)
 80173cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d0:	f7e9 f92a 	bl	8000628 <__aeabi_dmul>
 80173d4:	a380      	add	r3, pc, #512	; (adr r3, 80175d8 <_dtoa_r+0x310>)
 80173d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173da:	f7e8 ff6f 	bl	80002bc <__adddf3>
 80173de:	4606      	mov	r6, r0
 80173e0:	4628      	mov	r0, r5
 80173e2:	460f      	mov	r7, r1
 80173e4:	f7e9 f8b6 	bl	8000554 <__aeabi_i2d>
 80173e8:	a37d      	add	r3, pc, #500	; (adr r3, 80175e0 <_dtoa_r+0x318>)
 80173ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ee:	f7e9 f91b 	bl	8000628 <__aeabi_dmul>
 80173f2:	4602      	mov	r2, r0
 80173f4:	460b      	mov	r3, r1
 80173f6:	4630      	mov	r0, r6
 80173f8:	4639      	mov	r1, r7
 80173fa:	f7e8 ff5f 	bl	80002bc <__adddf3>
 80173fe:	4606      	mov	r6, r0
 8017400:	460f      	mov	r7, r1
 8017402:	f7e9 fbc1 	bl	8000b88 <__aeabi_d2iz>
 8017406:	2200      	movs	r2, #0
 8017408:	4682      	mov	sl, r0
 801740a:	2300      	movs	r3, #0
 801740c:	4630      	mov	r0, r6
 801740e:	4639      	mov	r1, r7
 8017410:	f7e9 fb7c 	bl	8000b0c <__aeabi_dcmplt>
 8017414:	b148      	cbz	r0, 801742a <_dtoa_r+0x162>
 8017416:	4650      	mov	r0, sl
 8017418:	f7e9 f89c 	bl	8000554 <__aeabi_i2d>
 801741c:	4632      	mov	r2, r6
 801741e:	463b      	mov	r3, r7
 8017420:	f7e9 fb6a 	bl	8000af8 <__aeabi_dcmpeq>
 8017424:	b908      	cbnz	r0, 801742a <_dtoa_r+0x162>
 8017426:	f10a 3aff 	add.w	sl, sl, #4294967295
 801742a:	f1ba 0f16 	cmp.w	sl, #22
 801742e:	d859      	bhi.n	80174e4 <_dtoa_r+0x21c>
 8017430:	4970      	ldr	r1, [pc, #448]	; (80175f4 <_dtoa_r+0x32c>)
 8017432:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017436:	e9dd 2300 	ldrd	r2, r3, [sp]
 801743a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801743e:	f7e9 fb83 	bl	8000b48 <__aeabi_dcmpgt>
 8017442:	2800      	cmp	r0, #0
 8017444:	d050      	beq.n	80174e8 <_dtoa_r+0x220>
 8017446:	f10a 3aff 	add.w	sl, sl, #4294967295
 801744a:	2300      	movs	r3, #0
 801744c:	930f      	str	r3, [sp, #60]	; 0x3c
 801744e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017450:	1b5d      	subs	r5, r3, r5
 8017452:	f1b5 0801 	subs.w	r8, r5, #1
 8017456:	bf49      	itett	mi
 8017458:	f1c5 0301 	rsbmi	r3, r5, #1
 801745c:	2300      	movpl	r3, #0
 801745e:	9305      	strmi	r3, [sp, #20]
 8017460:	f04f 0800 	movmi.w	r8, #0
 8017464:	bf58      	it	pl
 8017466:	9305      	strpl	r3, [sp, #20]
 8017468:	f1ba 0f00 	cmp.w	sl, #0
 801746c:	db3e      	blt.n	80174ec <_dtoa_r+0x224>
 801746e:	2300      	movs	r3, #0
 8017470:	44d0      	add	r8, sl
 8017472:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017476:	9307      	str	r3, [sp, #28]
 8017478:	9b06      	ldr	r3, [sp, #24]
 801747a:	2b09      	cmp	r3, #9
 801747c:	f200 8090 	bhi.w	80175a0 <_dtoa_r+0x2d8>
 8017480:	2b05      	cmp	r3, #5
 8017482:	bfc4      	itt	gt
 8017484:	3b04      	subgt	r3, #4
 8017486:	9306      	strgt	r3, [sp, #24]
 8017488:	9b06      	ldr	r3, [sp, #24]
 801748a:	f1a3 0302 	sub.w	r3, r3, #2
 801748e:	bfcc      	ite	gt
 8017490:	2500      	movgt	r5, #0
 8017492:	2501      	movle	r5, #1
 8017494:	2b03      	cmp	r3, #3
 8017496:	f200 808f 	bhi.w	80175b8 <_dtoa_r+0x2f0>
 801749a:	e8df f003 	tbb	[pc, r3]
 801749e:	7f7d      	.short	0x7f7d
 80174a0:	7131      	.short	0x7131
 80174a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80174a6:	441d      	add	r5, r3
 80174a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80174ac:	2820      	cmp	r0, #32
 80174ae:	dd13      	ble.n	80174d8 <_dtoa_r+0x210>
 80174b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80174b4:	9b00      	ldr	r3, [sp, #0]
 80174b6:	fa08 f800 	lsl.w	r8, r8, r0
 80174ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80174be:	fa23 f000 	lsr.w	r0, r3, r0
 80174c2:	ea48 0000 	orr.w	r0, r8, r0
 80174c6:	f7e9 f835 	bl	8000534 <__aeabi_ui2d>
 80174ca:	2301      	movs	r3, #1
 80174cc:	4682      	mov	sl, r0
 80174ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80174d2:	3d01      	subs	r5, #1
 80174d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80174d6:	e772      	b.n	80173be <_dtoa_r+0xf6>
 80174d8:	9b00      	ldr	r3, [sp, #0]
 80174da:	f1c0 0020 	rsb	r0, r0, #32
 80174de:	fa03 f000 	lsl.w	r0, r3, r0
 80174e2:	e7f0      	b.n	80174c6 <_dtoa_r+0x1fe>
 80174e4:	2301      	movs	r3, #1
 80174e6:	e7b1      	b.n	801744c <_dtoa_r+0x184>
 80174e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80174ea:	e7b0      	b.n	801744e <_dtoa_r+0x186>
 80174ec:	9b05      	ldr	r3, [sp, #20]
 80174ee:	eba3 030a 	sub.w	r3, r3, sl
 80174f2:	9305      	str	r3, [sp, #20]
 80174f4:	f1ca 0300 	rsb	r3, sl, #0
 80174f8:	9307      	str	r3, [sp, #28]
 80174fa:	2300      	movs	r3, #0
 80174fc:	930e      	str	r3, [sp, #56]	; 0x38
 80174fe:	e7bb      	b.n	8017478 <_dtoa_r+0x1b0>
 8017500:	2301      	movs	r3, #1
 8017502:	930a      	str	r3, [sp, #40]	; 0x28
 8017504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017506:	2b00      	cmp	r3, #0
 8017508:	dd59      	ble.n	80175be <_dtoa_r+0x2f6>
 801750a:	9302      	str	r3, [sp, #8]
 801750c:	4699      	mov	r9, r3
 801750e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017510:	2200      	movs	r2, #0
 8017512:	6072      	str	r2, [r6, #4]
 8017514:	2204      	movs	r2, #4
 8017516:	f102 0014 	add.w	r0, r2, #20
 801751a:	4298      	cmp	r0, r3
 801751c:	6871      	ldr	r1, [r6, #4]
 801751e:	d953      	bls.n	80175c8 <_dtoa_r+0x300>
 8017520:	4620      	mov	r0, r4
 8017522:	f000 ffeb 	bl	80184fc <_Balloc>
 8017526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017528:	6030      	str	r0, [r6, #0]
 801752a:	f1b9 0f0e 	cmp.w	r9, #14
 801752e:	f8d3 b000 	ldr.w	fp, [r3]
 8017532:	f200 80e6 	bhi.w	8017702 <_dtoa_r+0x43a>
 8017536:	2d00      	cmp	r5, #0
 8017538:	f000 80e3 	beq.w	8017702 <_dtoa_r+0x43a>
 801753c:	ed9d 7b00 	vldr	d7, [sp]
 8017540:	f1ba 0f00 	cmp.w	sl, #0
 8017544:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017548:	dd74      	ble.n	8017634 <_dtoa_r+0x36c>
 801754a:	4a2a      	ldr	r2, [pc, #168]	; (80175f4 <_dtoa_r+0x32c>)
 801754c:	f00a 030f 	and.w	r3, sl, #15
 8017550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017554:	ed93 7b00 	vldr	d7, [r3]
 8017558:	ea4f 162a 	mov.w	r6, sl, asr #4
 801755c:	06f0      	lsls	r0, r6, #27
 801755e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017562:	d565      	bpl.n	8017630 <_dtoa_r+0x368>
 8017564:	4b24      	ldr	r3, [pc, #144]	; (80175f8 <_dtoa_r+0x330>)
 8017566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801756a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801756e:	f7e9 f985 	bl	800087c <__aeabi_ddiv>
 8017572:	e9cd 0100 	strd	r0, r1, [sp]
 8017576:	f006 060f 	and.w	r6, r6, #15
 801757a:	2503      	movs	r5, #3
 801757c:	4f1e      	ldr	r7, [pc, #120]	; (80175f8 <_dtoa_r+0x330>)
 801757e:	e04c      	b.n	801761a <_dtoa_r+0x352>
 8017580:	2301      	movs	r3, #1
 8017582:	930a      	str	r3, [sp, #40]	; 0x28
 8017584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017586:	4453      	add	r3, sl
 8017588:	f103 0901 	add.w	r9, r3, #1
 801758c:	9302      	str	r3, [sp, #8]
 801758e:	464b      	mov	r3, r9
 8017590:	2b01      	cmp	r3, #1
 8017592:	bfb8      	it	lt
 8017594:	2301      	movlt	r3, #1
 8017596:	e7ba      	b.n	801750e <_dtoa_r+0x246>
 8017598:	2300      	movs	r3, #0
 801759a:	e7b2      	b.n	8017502 <_dtoa_r+0x23a>
 801759c:	2300      	movs	r3, #0
 801759e:	e7f0      	b.n	8017582 <_dtoa_r+0x2ba>
 80175a0:	2501      	movs	r5, #1
 80175a2:	2300      	movs	r3, #0
 80175a4:	9306      	str	r3, [sp, #24]
 80175a6:	950a      	str	r5, [sp, #40]	; 0x28
 80175a8:	f04f 33ff 	mov.w	r3, #4294967295
 80175ac:	9302      	str	r3, [sp, #8]
 80175ae:	4699      	mov	r9, r3
 80175b0:	2200      	movs	r2, #0
 80175b2:	2312      	movs	r3, #18
 80175b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80175b6:	e7aa      	b.n	801750e <_dtoa_r+0x246>
 80175b8:	2301      	movs	r3, #1
 80175ba:	930a      	str	r3, [sp, #40]	; 0x28
 80175bc:	e7f4      	b.n	80175a8 <_dtoa_r+0x2e0>
 80175be:	2301      	movs	r3, #1
 80175c0:	9302      	str	r3, [sp, #8]
 80175c2:	4699      	mov	r9, r3
 80175c4:	461a      	mov	r2, r3
 80175c6:	e7f5      	b.n	80175b4 <_dtoa_r+0x2ec>
 80175c8:	3101      	adds	r1, #1
 80175ca:	6071      	str	r1, [r6, #4]
 80175cc:	0052      	lsls	r2, r2, #1
 80175ce:	e7a2      	b.n	8017516 <_dtoa_r+0x24e>
 80175d0:	636f4361 	.word	0x636f4361
 80175d4:	3fd287a7 	.word	0x3fd287a7
 80175d8:	8b60c8b3 	.word	0x8b60c8b3
 80175dc:	3fc68a28 	.word	0x3fc68a28
 80175e0:	509f79fb 	.word	0x509f79fb
 80175e4:	3fd34413 	.word	0x3fd34413
 80175e8:	7ff00000 	.word	0x7ff00000
 80175ec:	0801a4ec 	.word	0x0801a4ec
 80175f0:	3ff80000 	.word	0x3ff80000
 80175f4:	0801a3f0 	.word	0x0801a3f0
 80175f8:	0801a3c8 	.word	0x0801a3c8
 80175fc:	0801a351 	.word	0x0801a351
 8017600:	07f1      	lsls	r1, r6, #31
 8017602:	d508      	bpl.n	8017616 <_dtoa_r+0x34e>
 8017604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017608:	e9d7 2300 	ldrd	r2, r3, [r7]
 801760c:	f7e9 f80c 	bl	8000628 <__aeabi_dmul>
 8017610:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017614:	3501      	adds	r5, #1
 8017616:	1076      	asrs	r6, r6, #1
 8017618:	3708      	adds	r7, #8
 801761a:	2e00      	cmp	r6, #0
 801761c:	d1f0      	bne.n	8017600 <_dtoa_r+0x338>
 801761e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017626:	f7e9 f929 	bl	800087c <__aeabi_ddiv>
 801762a:	e9cd 0100 	strd	r0, r1, [sp]
 801762e:	e01a      	b.n	8017666 <_dtoa_r+0x39e>
 8017630:	2502      	movs	r5, #2
 8017632:	e7a3      	b.n	801757c <_dtoa_r+0x2b4>
 8017634:	f000 80a0 	beq.w	8017778 <_dtoa_r+0x4b0>
 8017638:	f1ca 0600 	rsb	r6, sl, #0
 801763c:	4b9f      	ldr	r3, [pc, #636]	; (80178bc <_dtoa_r+0x5f4>)
 801763e:	4fa0      	ldr	r7, [pc, #640]	; (80178c0 <_dtoa_r+0x5f8>)
 8017640:	f006 020f 	and.w	r2, r6, #15
 8017644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017650:	f7e8 ffea 	bl	8000628 <__aeabi_dmul>
 8017654:	e9cd 0100 	strd	r0, r1, [sp]
 8017658:	1136      	asrs	r6, r6, #4
 801765a:	2300      	movs	r3, #0
 801765c:	2502      	movs	r5, #2
 801765e:	2e00      	cmp	r6, #0
 8017660:	d17f      	bne.n	8017762 <_dtoa_r+0x49a>
 8017662:	2b00      	cmp	r3, #0
 8017664:	d1e1      	bne.n	801762a <_dtoa_r+0x362>
 8017666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017668:	2b00      	cmp	r3, #0
 801766a:	f000 8087 	beq.w	801777c <_dtoa_r+0x4b4>
 801766e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017672:	2200      	movs	r2, #0
 8017674:	4b93      	ldr	r3, [pc, #588]	; (80178c4 <_dtoa_r+0x5fc>)
 8017676:	4630      	mov	r0, r6
 8017678:	4639      	mov	r1, r7
 801767a:	f7e9 fa47 	bl	8000b0c <__aeabi_dcmplt>
 801767e:	2800      	cmp	r0, #0
 8017680:	d07c      	beq.n	801777c <_dtoa_r+0x4b4>
 8017682:	f1b9 0f00 	cmp.w	r9, #0
 8017686:	d079      	beq.n	801777c <_dtoa_r+0x4b4>
 8017688:	9b02      	ldr	r3, [sp, #8]
 801768a:	2b00      	cmp	r3, #0
 801768c:	dd35      	ble.n	80176fa <_dtoa_r+0x432>
 801768e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017692:	9308      	str	r3, [sp, #32]
 8017694:	4639      	mov	r1, r7
 8017696:	2200      	movs	r2, #0
 8017698:	4b8b      	ldr	r3, [pc, #556]	; (80178c8 <_dtoa_r+0x600>)
 801769a:	4630      	mov	r0, r6
 801769c:	f7e8 ffc4 	bl	8000628 <__aeabi_dmul>
 80176a0:	e9cd 0100 	strd	r0, r1, [sp]
 80176a4:	9f02      	ldr	r7, [sp, #8]
 80176a6:	3501      	adds	r5, #1
 80176a8:	4628      	mov	r0, r5
 80176aa:	f7e8 ff53 	bl	8000554 <__aeabi_i2d>
 80176ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176b2:	f7e8 ffb9 	bl	8000628 <__aeabi_dmul>
 80176b6:	2200      	movs	r2, #0
 80176b8:	4b84      	ldr	r3, [pc, #528]	; (80178cc <_dtoa_r+0x604>)
 80176ba:	f7e8 fdff 	bl	80002bc <__adddf3>
 80176be:	4605      	mov	r5, r0
 80176c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80176c4:	2f00      	cmp	r7, #0
 80176c6:	d15d      	bne.n	8017784 <_dtoa_r+0x4bc>
 80176c8:	2200      	movs	r2, #0
 80176ca:	4b81      	ldr	r3, [pc, #516]	; (80178d0 <_dtoa_r+0x608>)
 80176cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176d0:	f7e8 fdf2 	bl	80002b8 <__aeabi_dsub>
 80176d4:	462a      	mov	r2, r5
 80176d6:	4633      	mov	r3, r6
 80176d8:	e9cd 0100 	strd	r0, r1, [sp]
 80176dc:	f7e9 fa34 	bl	8000b48 <__aeabi_dcmpgt>
 80176e0:	2800      	cmp	r0, #0
 80176e2:	f040 8288 	bne.w	8017bf6 <_dtoa_r+0x92e>
 80176e6:	462a      	mov	r2, r5
 80176e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80176ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176f0:	f7e9 fa0c 	bl	8000b0c <__aeabi_dcmplt>
 80176f4:	2800      	cmp	r0, #0
 80176f6:	f040 827c 	bne.w	8017bf2 <_dtoa_r+0x92a>
 80176fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80176fe:	e9cd 2300 	strd	r2, r3, [sp]
 8017702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017704:	2b00      	cmp	r3, #0
 8017706:	f2c0 8150 	blt.w	80179aa <_dtoa_r+0x6e2>
 801770a:	f1ba 0f0e 	cmp.w	sl, #14
 801770e:	f300 814c 	bgt.w	80179aa <_dtoa_r+0x6e2>
 8017712:	4b6a      	ldr	r3, [pc, #424]	; (80178bc <_dtoa_r+0x5f4>)
 8017714:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017718:	ed93 7b00 	vldr	d7, [r3]
 801771c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801771e:	2b00      	cmp	r3, #0
 8017720:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017724:	f280 80d8 	bge.w	80178d8 <_dtoa_r+0x610>
 8017728:	f1b9 0f00 	cmp.w	r9, #0
 801772c:	f300 80d4 	bgt.w	80178d8 <_dtoa_r+0x610>
 8017730:	f040 825e 	bne.w	8017bf0 <_dtoa_r+0x928>
 8017734:	2200      	movs	r2, #0
 8017736:	4b66      	ldr	r3, [pc, #408]	; (80178d0 <_dtoa_r+0x608>)
 8017738:	ec51 0b17 	vmov	r0, r1, d7
 801773c:	f7e8 ff74 	bl	8000628 <__aeabi_dmul>
 8017740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017744:	f7e9 f9f6 	bl	8000b34 <__aeabi_dcmpge>
 8017748:	464f      	mov	r7, r9
 801774a:	464e      	mov	r6, r9
 801774c:	2800      	cmp	r0, #0
 801774e:	f040 8234 	bne.w	8017bba <_dtoa_r+0x8f2>
 8017752:	2331      	movs	r3, #49	; 0x31
 8017754:	f10b 0501 	add.w	r5, fp, #1
 8017758:	f88b 3000 	strb.w	r3, [fp]
 801775c:	f10a 0a01 	add.w	sl, sl, #1
 8017760:	e22f      	b.n	8017bc2 <_dtoa_r+0x8fa>
 8017762:	07f2      	lsls	r2, r6, #31
 8017764:	d505      	bpl.n	8017772 <_dtoa_r+0x4aa>
 8017766:	e9d7 2300 	ldrd	r2, r3, [r7]
 801776a:	f7e8 ff5d 	bl	8000628 <__aeabi_dmul>
 801776e:	3501      	adds	r5, #1
 8017770:	2301      	movs	r3, #1
 8017772:	1076      	asrs	r6, r6, #1
 8017774:	3708      	adds	r7, #8
 8017776:	e772      	b.n	801765e <_dtoa_r+0x396>
 8017778:	2502      	movs	r5, #2
 801777a:	e774      	b.n	8017666 <_dtoa_r+0x39e>
 801777c:	f8cd a020 	str.w	sl, [sp, #32]
 8017780:	464f      	mov	r7, r9
 8017782:	e791      	b.n	80176a8 <_dtoa_r+0x3e0>
 8017784:	4b4d      	ldr	r3, [pc, #308]	; (80178bc <_dtoa_r+0x5f4>)
 8017786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801778a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801778e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017790:	2b00      	cmp	r3, #0
 8017792:	d047      	beq.n	8017824 <_dtoa_r+0x55c>
 8017794:	4602      	mov	r2, r0
 8017796:	460b      	mov	r3, r1
 8017798:	2000      	movs	r0, #0
 801779a:	494e      	ldr	r1, [pc, #312]	; (80178d4 <_dtoa_r+0x60c>)
 801779c:	f7e9 f86e 	bl	800087c <__aeabi_ddiv>
 80177a0:	462a      	mov	r2, r5
 80177a2:	4633      	mov	r3, r6
 80177a4:	f7e8 fd88 	bl	80002b8 <__aeabi_dsub>
 80177a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80177ac:	465d      	mov	r5, fp
 80177ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177b2:	f7e9 f9e9 	bl	8000b88 <__aeabi_d2iz>
 80177b6:	4606      	mov	r6, r0
 80177b8:	f7e8 fecc 	bl	8000554 <__aeabi_i2d>
 80177bc:	4602      	mov	r2, r0
 80177be:	460b      	mov	r3, r1
 80177c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177c4:	f7e8 fd78 	bl	80002b8 <__aeabi_dsub>
 80177c8:	3630      	adds	r6, #48	; 0x30
 80177ca:	f805 6b01 	strb.w	r6, [r5], #1
 80177ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80177d2:	e9cd 0100 	strd	r0, r1, [sp]
 80177d6:	f7e9 f999 	bl	8000b0c <__aeabi_dcmplt>
 80177da:	2800      	cmp	r0, #0
 80177dc:	d163      	bne.n	80178a6 <_dtoa_r+0x5de>
 80177de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177e2:	2000      	movs	r0, #0
 80177e4:	4937      	ldr	r1, [pc, #220]	; (80178c4 <_dtoa_r+0x5fc>)
 80177e6:	f7e8 fd67 	bl	80002b8 <__aeabi_dsub>
 80177ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80177ee:	f7e9 f98d 	bl	8000b0c <__aeabi_dcmplt>
 80177f2:	2800      	cmp	r0, #0
 80177f4:	f040 80b7 	bne.w	8017966 <_dtoa_r+0x69e>
 80177f8:	eba5 030b 	sub.w	r3, r5, fp
 80177fc:	429f      	cmp	r7, r3
 80177fe:	f77f af7c 	ble.w	80176fa <_dtoa_r+0x432>
 8017802:	2200      	movs	r2, #0
 8017804:	4b30      	ldr	r3, [pc, #192]	; (80178c8 <_dtoa_r+0x600>)
 8017806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801780a:	f7e8 ff0d 	bl	8000628 <__aeabi_dmul>
 801780e:	2200      	movs	r2, #0
 8017810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017814:	4b2c      	ldr	r3, [pc, #176]	; (80178c8 <_dtoa_r+0x600>)
 8017816:	e9dd 0100 	ldrd	r0, r1, [sp]
 801781a:	f7e8 ff05 	bl	8000628 <__aeabi_dmul>
 801781e:	e9cd 0100 	strd	r0, r1, [sp]
 8017822:	e7c4      	b.n	80177ae <_dtoa_r+0x4e6>
 8017824:	462a      	mov	r2, r5
 8017826:	4633      	mov	r3, r6
 8017828:	f7e8 fefe 	bl	8000628 <__aeabi_dmul>
 801782c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017830:	eb0b 0507 	add.w	r5, fp, r7
 8017834:	465e      	mov	r6, fp
 8017836:	e9dd 0100 	ldrd	r0, r1, [sp]
 801783a:	f7e9 f9a5 	bl	8000b88 <__aeabi_d2iz>
 801783e:	4607      	mov	r7, r0
 8017840:	f7e8 fe88 	bl	8000554 <__aeabi_i2d>
 8017844:	3730      	adds	r7, #48	; 0x30
 8017846:	4602      	mov	r2, r0
 8017848:	460b      	mov	r3, r1
 801784a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801784e:	f7e8 fd33 	bl	80002b8 <__aeabi_dsub>
 8017852:	f806 7b01 	strb.w	r7, [r6], #1
 8017856:	42ae      	cmp	r6, r5
 8017858:	e9cd 0100 	strd	r0, r1, [sp]
 801785c:	f04f 0200 	mov.w	r2, #0
 8017860:	d126      	bne.n	80178b0 <_dtoa_r+0x5e8>
 8017862:	4b1c      	ldr	r3, [pc, #112]	; (80178d4 <_dtoa_r+0x60c>)
 8017864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017868:	f7e8 fd28 	bl	80002bc <__adddf3>
 801786c:	4602      	mov	r2, r0
 801786e:	460b      	mov	r3, r1
 8017870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017874:	f7e9 f968 	bl	8000b48 <__aeabi_dcmpgt>
 8017878:	2800      	cmp	r0, #0
 801787a:	d174      	bne.n	8017966 <_dtoa_r+0x69e>
 801787c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017880:	2000      	movs	r0, #0
 8017882:	4914      	ldr	r1, [pc, #80]	; (80178d4 <_dtoa_r+0x60c>)
 8017884:	f7e8 fd18 	bl	80002b8 <__aeabi_dsub>
 8017888:	4602      	mov	r2, r0
 801788a:	460b      	mov	r3, r1
 801788c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017890:	f7e9 f93c 	bl	8000b0c <__aeabi_dcmplt>
 8017894:	2800      	cmp	r0, #0
 8017896:	f43f af30 	beq.w	80176fa <_dtoa_r+0x432>
 801789a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801789e:	2b30      	cmp	r3, #48	; 0x30
 80178a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80178a4:	d002      	beq.n	80178ac <_dtoa_r+0x5e4>
 80178a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80178aa:	e04a      	b.n	8017942 <_dtoa_r+0x67a>
 80178ac:	4615      	mov	r5, r2
 80178ae:	e7f4      	b.n	801789a <_dtoa_r+0x5d2>
 80178b0:	4b05      	ldr	r3, [pc, #20]	; (80178c8 <_dtoa_r+0x600>)
 80178b2:	f7e8 feb9 	bl	8000628 <__aeabi_dmul>
 80178b6:	e9cd 0100 	strd	r0, r1, [sp]
 80178ba:	e7bc      	b.n	8017836 <_dtoa_r+0x56e>
 80178bc:	0801a3f0 	.word	0x0801a3f0
 80178c0:	0801a3c8 	.word	0x0801a3c8
 80178c4:	3ff00000 	.word	0x3ff00000
 80178c8:	40240000 	.word	0x40240000
 80178cc:	401c0000 	.word	0x401c0000
 80178d0:	40140000 	.word	0x40140000
 80178d4:	3fe00000 	.word	0x3fe00000
 80178d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80178dc:	465d      	mov	r5, fp
 80178de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80178e2:	4630      	mov	r0, r6
 80178e4:	4639      	mov	r1, r7
 80178e6:	f7e8 ffc9 	bl	800087c <__aeabi_ddiv>
 80178ea:	f7e9 f94d 	bl	8000b88 <__aeabi_d2iz>
 80178ee:	4680      	mov	r8, r0
 80178f0:	f7e8 fe30 	bl	8000554 <__aeabi_i2d>
 80178f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80178f8:	f7e8 fe96 	bl	8000628 <__aeabi_dmul>
 80178fc:	4602      	mov	r2, r0
 80178fe:	460b      	mov	r3, r1
 8017900:	4630      	mov	r0, r6
 8017902:	4639      	mov	r1, r7
 8017904:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017908:	f7e8 fcd6 	bl	80002b8 <__aeabi_dsub>
 801790c:	f805 6b01 	strb.w	r6, [r5], #1
 8017910:	eba5 060b 	sub.w	r6, r5, fp
 8017914:	45b1      	cmp	r9, r6
 8017916:	4602      	mov	r2, r0
 8017918:	460b      	mov	r3, r1
 801791a:	d139      	bne.n	8017990 <_dtoa_r+0x6c8>
 801791c:	f7e8 fcce 	bl	80002bc <__adddf3>
 8017920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017924:	4606      	mov	r6, r0
 8017926:	460f      	mov	r7, r1
 8017928:	f7e9 f90e 	bl	8000b48 <__aeabi_dcmpgt>
 801792c:	b9c8      	cbnz	r0, 8017962 <_dtoa_r+0x69a>
 801792e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017932:	4630      	mov	r0, r6
 8017934:	4639      	mov	r1, r7
 8017936:	f7e9 f8df 	bl	8000af8 <__aeabi_dcmpeq>
 801793a:	b110      	cbz	r0, 8017942 <_dtoa_r+0x67a>
 801793c:	f018 0f01 	tst.w	r8, #1
 8017940:	d10f      	bne.n	8017962 <_dtoa_r+0x69a>
 8017942:	9904      	ldr	r1, [sp, #16]
 8017944:	4620      	mov	r0, r4
 8017946:	f000 fe0d 	bl	8018564 <_Bfree>
 801794a:	2300      	movs	r3, #0
 801794c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801794e:	702b      	strb	r3, [r5, #0]
 8017950:	f10a 0301 	add.w	r3, sl, #1
 8017954:	6013      	str	r3, [r2, #0]
 8017956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017958:	2b00      	cmp	r3, #0
 801795a:	f000 8241 	beq.w	8017de0 <_dtoa_r+0xb18>
 801795e:	601d      	str	r5, [r3, #0]
 8017960:	e23e      	b.n	8017de0 <_dtoa_r+0xb18>
 8017962:	f8cd a020 	str.w	sl, [sp, #32]
 8017966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801796a:	2a39      	cmp	r2, #57	; 0x39
 801796c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017970:	d108      	bne.n	8017984 <_dtoa_r+0x6bc>
 8017972:	459b      	cmp	fp, r3
 8017974:	d10a      	bne.n	801798c <_dtoa_r+0x6c4>
 8017976:	9b08      	ldr	r3, [sp, #32]
 8017978:	3301      	adds	r3, #1
 801797a:	9308      	str	r3, [sp, #32]
 801797c:	2330      	movs	r3, #48	; 0x30
 801797e:	f88b 3000 	strb.w	r3, [fp]
 8017982:	465b      	mov	r3, fp
 8017984:	781a      	ldrb	r2, [r3, #0]
 8017986:	3201      	adds	r2, #1
 8017988:	701a      	strb	r2, [r3, #0]
 801798a:	e78c      	b.n	80178a6 <_dtoa_r+0x5de>
 801798c:	461d      	mov	r5, r3
 801798e:	e7ea      	b.n	8017966 <_dtoa_r+0x69e>
 8017990:	2200      	movs	r2, #0
 8017992:	4b9b      	ldr	r3, [pc, #620]	; (8017c00 <_dtoa_r+0x938>)
 8017994:	f7e8 fe48 	bl	8000628 <__aeabi_dmul>
 8017998:	2200      	movs	r2, #0
 801799a:	2300      	movs	r3, #0
 801799c:	4606      	mov	r6, r0
 801799e:	460f      	mov	r7, r1
 80179a0:	f7e9 f8aa 	bl	8000af8 <__aeabi_dcmpeq>
 80179a4:	2800      	cmp	r0, #0
 80179a6:	d09a      	beq.n	80178de <_dtoa_r+0x616>
 80179a8:	e7cb      	b.n	8017942 <_dtoa_r+0x67a>
 80179aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179ac:	2a00      	cmp	r2, #0
 80179ae:	f000 808b 	beq.w	8017ac8 <_dtoa_r+0x800>
 80179b2:	9a06      	ldr	r2, [sp, #24]
 80179b4:	2a01      	cmp	r2, #1
 80179b6:	dc6e      	bgt.n	8017a96 <_dtoa_r+0x7ce>
 80179b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80179ba:	2a00      	cmp	r2, #0
 80179bc:	d067      	beq.n	8017a8e <_dtoa_r+0x7c6>
 80179be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80179c2:	9f07      	ldr	r7, [sp, #28]
 80179c4:	9d05      	ldr	r5, [sp, #20]
 80179c6:	9a05      	ldr	r2, [sp, #20]
 80179c8:	2101      	movs	r1, #1
 80179ca:	441a      	add	r2, r3
 80179cc:	4620      	mov	r0, r4
 80179ce:	9205      	str	r2, [sp, #20]
 80179d0:	4498      	add	r8, r3
 80179d2:	f000 fea5 	bl	8018720 <__i2b>
 80179d6:	4606      	mov	r6, r0
 80179d8:	2d00      	cmp	r5, #0
 80179da:	dd0c      	ble.n	80179f6 <_dtoa_r+0x72e>
 80179dc:	f1b8 0f00 	cmp.w	r8, #0
 80179e0:	dd09      	ble.n	80179f6 <_dtoa_r+0x72e>
 80179e2:	4545      	cmp	r5, r8
 80179e4:	9a05      	ldr	r2, [sp, #20]
 80179e6:	462b      	mov	r3, r5
 80179e8:	bfa8      	it	ge
 80179ea:	4643      	movge	r3, r8
 80179ec:	1ad2      	subs	r2, r2, r3
 80179ee:	9205      	str	r2, [sp, #20]
 80179f0:	1aed      	subs	r5, r5, r3
 80179f2:	eba8 0803 	sub.w	r8, r8, r3
 80179f6:	9b07      	ldr	r3, [sp, #28]
 80179f8:	b1eb      	cbz	r3, 8017a36 <_dtoa_r+0x76e>
 80179fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d067      	beq.n	8017ad0 <_dtoa_r+0x808>
 8017a00:	b18f      	cbz	r7, 8017a26 <_dtoa_r+0x75e>
 8017a02:	4631      	mov	r1, r6
 8017a04:	463a      	mov	r2, r7
 8017a06:	4620      	mov	r0, r4
 8017a08:	f000 ff2a 	bl	8018860 <__pow5mult>
 8017a0c:	9a04      	ldr	r2, [sp, #16]
 8017a0e:	4601      	mov	r1, r0
 8017a10:	4606      	mov	r6, r0
 8017a12:	4620      	mov	r0, r4
 8017a14:	f000 fe8d 	bl	8018732 <__multiply>
 8017a18:	9904      	ldr	r1, [sp, #16]
 8017a1a:	9008      	str	r0, [sp, #32]
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	f000 fda1 	bl	8018564 <_Bfree>
 8017a22:	9b08      	ldr	r3, [sp, #32]
 8017a24:	9304      	str	r3, [sp, #16]
 8017a26:	9b07      	ldr	r3, [sp, #28]
 8017a28:	1bda      	subs	r2, r3, r7
 8017a2a:	d004      	beq.n	8017a36 <_dtoa_r+0x76e>
 8017a2c:	9904      	ldr	r1, [sp, #16]
 8017a2e:	4620      	mov	r0, r4
 8017a30:	f000 ff16 	bl	8018860 <__pow5mult>
 8017a34:	9004      	str	r0, [sp, #16]
 8017a36:	2101      	movs	r1, #1
 8017a38:	4620      	mov	r0, r4
 8017a3a:	f000 fe71 	bl	8018720 <__i2b>
 8017a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a40:	4607      	mov	r7, r0
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	f000 81d0 	beq.w	8017de8 <_dtoa_r+0xb20>
 8017a48:	461a      	mov	r2, r3
 8017a4a:	4601      	mov	r1, r0
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	f000 ff07 	bl	8018860 <__pow5mult>
 8017a52:	9b06      	ldr	r3, [sp, #24]
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	4607      	mov	r7, r0
 8017a58:	dc40      	bgt.n	8017adc <_dtoa_r+0x814>
 8017a5a:	9b00      	ldr	r3, [sp, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d139      	bne.n	8017ad4 <_dtoa_r+0x80c>
 8017a60:	9b01      	ldr	r3, [sp, #4]
 8017a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d136      	bne.n	8017ad8 <_dtoa_r+0x810>
 8017a6a:	9b01      	ldr	r3, [sp, #4]
 8017a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a70:	0d1b      	lsrs	r3, r3, #20
 8017a72:	051b      	lsls	r3, r3, #20
 8017a74:	b12b      	cbz	r3, 8017a82 <_dtoa_r+0x7ba>
 8017a76:	9b05      	ldr	r3, [sp, #20]
 8017a78:	3301      	adds	r3, #1
 8017a7a:	9305      	str	r3, [sp, #20]
 8017a7c:	f108 0801 	add.w	r8, r8, #1
 8017a80:	2301      	movs	r3, #1
 8017a82:	9307      	str	r3, [sp, #28]
 8017a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d12a      	bne.n	8017ae0 <_dtoa_r+0x818>
 8017a8a:	2001      	movs	r0, #1
 8017a8c:	e030      	b.n	8017af0 <_dtoa_r+0x828>
 8017a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017a90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017a94:	e795      	b.n	80179c2 <_dtoa_r+0x6fa>
 8017a96:	9b07      	ldr	r3, [sp, #28]
 8017a98:	f109 37ff 	add.w	r7, r9, #4294967295
 8017a9c:	42bb      	cmp	r3, r7
 8017a9e:	bfbf      	itttt	lt
 8017aa0:	9b07      	ldrlt	r3, [sp, #28]
 8017aa2:	9707      	strlt	r7, [sp, #28]
 8017aa4:	1afa      	sublt	r2, r7, r3
 8017aa6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017aa8:	bfbb      	ittet	lt
 8017aaa:	189b      	addlt	r3, r3, r2
 8017aac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017aae:	1bdf      	subge	r7, r3, r7
 8017ab0:	2700      	movlt	r7, #0
 8017ab2:	f1b9 0f00 	cmp.w	r9, #0
 8017ab6:	bfb5      	itete	lt
 8017ab8:	9b05      	ldrlt	r3, [sp, #20]
 8017aba:	9d05      	ldrge	r5, [sp, #20]
 8017abc:	eba3 0509 	sublt.w	r5, r3, r9
 8017ac0:	464b      	movge	r3, r9
 8017ac2:	bfb8      	it	lt
 8017ac4:	2300      	movlt	r3, #0
 8017ac6:	e77e      	b.n	80179c6 <_dtoa_r+0x6fe>
 8017ac8:	9f07      	ldr	r7, [sp, #28]
 8017aca:	9d05      	ldr	r5, [sp, #20]
 8017acc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017ace:	e783      	b.n	80179d8 <_dtoa_r+0x710>
 8017ad0:	9a07      	ldr	r2, [sp, #28]
 8017ad2:	e7ab      	b.n	8017a2c <_dtoa_r+0x764>
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	e7d4      	b.n	8017a82 <_dtoa_r+0x7ba>
 8017ad8:	9b00      	ldr	r3, [sp, #0]
 8017ada:	e7d2      	b.n	8017a82 <_dtoa_r+0x7ba>
 8017adc:	2300      	movs	r3, #0
 8017ade:	9307      	str	r3, [sp, #28]
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017ae6:	6918      	ldr	r0, [r3, #16]
 8017ae8:	f000 fdcc 	bl	8018684 <__hi0bits>
 8017aec:	f1c0 0020 	rsb	r0, r0, #32
 8017af0:	4440      	add	r0, r8
 8017af2:	f010 001f 	ands.w	r0, r0, #31
 8017af6:	d047      	beq.n	8017b88 <_dtoa_r+0x8c0>
 8017af8:	f1c0 0320 	rsb	r3, r0, #32
 8017afc:	2b04      	cmp	r3, #4
 8017afe:	dd3b      	ble.n	8017b78 <_dtoa_r+0x8b0>
 8017b00:	9b05      	ldr	r3, [sp, #20]
 8017b02:	f1c0 001c 	rsb	r0, r0, #28
 8017b06:	4403      	add	r3, r0
 8017b08:	9305      	str	r3, [sp, #20]
 8017b0a:	4405      	add	r5, r0
 8017b0c:	4480      	add	r8, r0
 8017b0e:	9b05      	ldr	r3, [sp, #20]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	dd05      	ble.n	8017b20 <_dtoa_r+0x858>
 8017b14:	461a      	mov	r2, r3
 8017b16:	9904      	ldr	r1, [sp, #16]
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f000 feef 	bl	80188fc <__lshift>
 8017b1e:	9004      	str	r0, [sp, #16]
 8017b20:	f1b8 0f00 	cmp.w	r8, #0
 8017b24:	dd05      	ble.n	8017b32 <_dtoa_r+0x86a>
 8017b26:	4639      	mov	r1, r7
 8017b28:	4642      	mov	r2, r8
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f000 fee6 	bl	80188fc <__lshift>
 8017b30:	4607      	mov	r7, r0
 8017b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b34:	b353      	cbz	r3, 8017b8c <_dtoa_r+0x8c4>
 8017b36:	4639      	mov	r1, r7
 8017b38:	9804      	ldr	r0, [sp, #16]
 8017b3a:	f000 ff33 	bl	80189a4 <__mcmp>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	da24      	bge.n	8017b8c <_dtoa_r+0x8c4>
 8017b42:	2300      	movs	r3, #0
 8017b44:	220a      	movs	r2, #10
 8017b46:	9904      	ldr	r1, [sp, #16]
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f000 fd22 	bl	8018592 <__multadd>
 8017b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b50:	9004      	str	r0, [sp, #16]
 8017b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	f000 814d 	beq.w	8017df6 <_dtoa_r+0xb2e>
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	4631      	mov	r1, r6
 8017b60:	220a      	movs	r2, #10
 8017b62:	4620      	mov	r0, r4
 8017b64:	f000 fd15 	bl	8018592 <__multadd>
 8017b68:	9b02      	ldr	r3, [sp, #8]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	4606      	mov	r6, r0
 8017b6e:	dc4f      	bgt.n	8017c10 <_dtoa_r+0x948>
 8017b70:	9b06      	ldr	r3, [sp, #24]
 8017b72:	2b02      	cmp	r3, #2
 8017b74:	dd4c      	ble.n	8017c10 <_dtoa_r+0x948>
 8017b76:	e011      	b.n	8017b9c <_dtoa_r+0x8d4>
 8017b78:	d0c9      	beq.n	8017b0e <_dtoa_r+0x846>
 8017b7a:	9a05      	ldr	r2, [sp, #20]
 8017b7c:	331c      	adds	r3, #28
 8017b7e:	441a      	add	r2, r3
 8017b80:	9205      	str	r2, [sp, #20]
 8017b82:	441d      	add	r5, r3
 8017b84:	4498      	add	r8, r3
 8017b86:	e7c2      	b.n	8017b0e <_dtoa_r+0x846>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	e7f6      	b.n	8017b7a <_dtoa_r+0x8b2>
 8017b8c:	f1b9 0f00 	cmp.w	r9, #0
 8017b90:	dc38      	bgt.n	8017c04 <_dtoa_r+0x93c>
 8017b92:	9b06      	ldr	r3, [sp, #24]
 8017b94:	2b02      	cmp	r3, #2
 8017b96:	dd35      	ble.n	8017c04 <_dtoa_r+0x93c>
 8017b98:	f8cd 9008 	str.w	r9, [sp, #8]
 8017b9c:	9b02      	ldr	r3, [sp, #8]
 8017b9e:	b963      	cbnz	r3, 8017bba <_dtoa_r+0x8f2>
 8017ba0:	4639      	mov	r1, r7
 8017ba2:	2205      	movs	r2, #5
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	f000 fcf4 	bl	8018592 <__multadd>
 8017baa:	4601      	mov	r1, r0
 8017bac:	4607      	mov	r7, r0
 8017bae:	9804      	ldr	r0, [sp, #16]
 8017bb0:	f000 fef8 	bl	80189a4 <__mcmp>
 8017bb4:	2800      	cmp	r0, #0
 8017bb6:	f73f adcc 	bgt.w	8017752 <_dtoa_r+0x48a>
 8017bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bbc:	465d      	mov	r5, fp
 8017bbe:	ea6f 0a03 	mvn.w	sl, r3
 8017bc2:	f04f 0900 	mov.w	r9, #0
 8017bc6:	4639      	mov	r1, r7
 8017bc8:	4620      	mov	r0, r4
 8017bca:	f000 fccb 	bl	8018564 <_Bfree>
 8017bce:	2e00      	cmp	r6, #0
 8017bd0:	f43f aeb7 	beq.w	8017942 <_dtoa_r+0x67a>
 8017bd4:	f1b9 0f00 	cmp.w	r9, #0
 8017bd8:	d005      	beq.n	8017be6 <_dtoa_r+0x91e>
 8017bda:	45b1      	cmp	r9, r6
 8017bdc:	d003      	beq.n	8017be6 <_dtoa_r+0x91e>
 8017bde:	4649      	mov	r1, r9
 8017be0:	4620      	mov	r0, r4
 8017be2:	f000 fcbf 	bl	8018564 <_Bfree>
 8017be6:	4631      	mov	r1, r6
 8017be8:	4620      	mov	r0, r4
 8017bea:	f000 fcbb 	bl	8018564 <_Bfree>
 8017bee:	e6a8      	b.n	8017942 <_dtoa_r+0x67a>
 8017bf0:	2700      	movs	r7, #0
 8017bf2:	463e      	mov	r6, r7
 8017bf4:	e7e1      	b.n	8017bba <_dtoa_r+0x8f2>
 8017bf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017bfa:	463e      	mov	r6, r7
 8017bfc:	e5a9      	b.n	8017752 <_dtoa_r+0x48a>
 8017bfe:	bf00      	nop
 8017c00:	40240000 	.word	0x40240000
 8017c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	f000 80fa 	beq.w	8017e04 <_dtoa_r+0xb3c>
 8017c10:	2d00      	cmp	r5, #0
 8017c12:	dd05      	ble.n	8017c20 <_dtoa_r+0x958>
 8017c14:	4631      	mov	r1, r6
 8017c16:	462a      	mov	r2, r5
 8017c18:	4620      	mov	r0, r4
 8017c1a:	f000 fe6f 	bl	80188fc <__lshift>
 8017c1e:	4606      	mov	r6, r0
 8017c20:	9b07      	ldr	r3, [sp, #28]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d04c      	beq.n	8017cc0 <_dtoa_r+0x9f8>
 8017c26:	6871      	ldr	r1, [r6, #4]
 8017c28:	4620      	mov	r0, r4
 8017c2a:	f000 fc67 	bl	80184fc <_Balloc>
 8017c2e:	6932      	ldr	r2, [r6, #16]
 8017c30:	3202      	adds	r2, #2
 8017c32:	4605      	mov	r5, r0
 8017c34:	0092      	lsls	r2, r2, #2
 8017c36:	f106 010c 	add.w	r1, r6, #12
 8017c3a:	300c      	adds	r0, #12
 8017c3c:	f7fd fd08 	bl	8015650 <memcpy>
 8017c40:	2201      	movs	r2, #1
 8017c42:	4629      	mov	r1, r5
 8017c44:	4620      	mov	r0, r4
 8017c46:	f000 fe59 	bl	80188fc <__lshift>
 8017c4a:	9b00      	ldr	r3, [sp, #0]
 8017c4c:	f8cd b014 	str.w	fp, [sp, #20]
 8017c50:	f003 0301 	and.w	r3, r3, #1
 8017c54:	46b1      	mov	r9, r6
 8017c56:	9307      	str	r3, [sp, #28]
 8017c58:	4606      	mov	r6, r0
 8017c5a:	4639      	mov	r1, r7
 8017c5c:	9804      	ldr	r0, [sp, #16]
 8017c5e:	f7ff faa5 	bl	80171ac <quorem>
 8017c62:	4649      	mov	r1, r9
 8017c64:	4605      	mov	r5, r0
 8017c66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017c6a:	9804      	ldr	r0, [sp, #16]
 8017c6c:	f000 fe9a 	bl	80189a4 <__mcmp>
 8017c70:	4632      	mov	r2, r6
 8017c72:	9000      	str	r0, [sp, #0]
 8017c74:	4639      	mov	r1, r7
 8017c76:	4620      	mov	r0, r4
 8017c78:	f000 feae 	bl	80189d8 <__mdiff>
 8017c7c:	68c3      	ldr	r3, [r0, #12]
 8017c7e:	4602      	mov	r2, r0
 8017c80:	bb03      	cbnz	r3, 8017cc4 <_dtoa_r+0x9fc>
 8017c82:	4601      	mov	r1, r0
 8017c84:	9008      	str	r0, [sp, #32]
 8017c86:	9804      	ldr	r0, [sp, #16]
 8017c88:	f000 fe8c 	bl	80189a4 <__mcmp>
 8017c8c:	9a08      	ldr	r2, [sp, #32]
 8017c8e:	4603      	mov	r3, r0
 8017c90:	4611      	mov	r1, r2
 8017c92:	4620      	mov	r0, r4
 8017c94:	9308      	str	r3, [sp, #32]
 8017c96:	f000 fc65 	bl	8018564 <_Bfree>
 8017c9a:	9b08      	ldr	r3, [sp, #32]
 8017c9c:	b9a3      	cbnz	r3, 8017cc8 <_dtoa_r+0xa00>
 8017c9e:	9a06      	ldr	r2, [sp, #24]
 8017ca0:	b992      	cbnz	r2, 8017cc8 <_dtoa_r+0xa00>
 8017ca2:	9a07      	ldr	r2, [sp, #28]
 8017ca4:	b982      	cbnz	r2, 8017cc8 <_dtoa_r+0xa00>
 8017ca6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017caa:	d029      	beq.n	8017d00 <_dtoa_r+0xa38>
 8017cac:	9b00      	ldr	r3, [sp, #0]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	dd01      	ble.n	8017cb6 <_dtoa_r+0x9ee>
 8017cb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017cb6:	9b05      	ldr	r3, [sp, #20]
 8017cb8:	1c5d      	adds	r5, r3, #1
 8017cba:	f883 8000 	strb.w	r8, [r3]
 8017cbe:	e782      	b.n	8017bc6 <_dtoa_r+0x8fe>
 8017cc0:	4630      	mov	r0, r6
 8017cc2:	e7c2      	b.n	8017c4a <_dtoa_r+0x982>
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	e7e3      	b.n	8017c90 <_dtoa_r+0x9c8>
 8017cc8:	9a00      	ldr	r2, [sp, #0]
 8017cca:	2a00      	cmp	r2, #0
 8017ccc:	db04      	blt.n	8017cd8 <_dtoa_r+0xa10>
 8017cce:	d125      	bne.n	8017d1c <_dtoa_r+0xa54>
 8017cd0:	9a06      	ldr	r2, [sp, #24]
 8017cd2:	bb1a      	cbnz	r2, 8017d1c <_dtoa_r+0xa54>
 8017cd4:	9a07      	ldr	r2, [sp, #28]
 8017cd6:	bb0a      	cbnz	r2, 8017d1c <_dtoa_r+0xa54>
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	ddec      	ble.n	8017cb6 <_dtoa_r+0x9ee>
 8017cdc:	2201      	movs	r2, #1
 8017cde:	9904      	ldr	r1, [sp, #16]
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	f000 fe0b 	bl	80188fc <__lshift>
 8017ce6:	4639      	mov	r1, r7
 8017ce8:	9004      	str	r0, [sp, #16]
 8017cea:	f000 fe5b 	bl	80189a4 <__mcmp>
 8017cee:	2800      	cmp	r0, #0
 8017cf0:	dc03      	bgt.n	8017cfa <_dtoa_r+0xa32>
 8017cf2:	d1e0      	bne.n	8017cb6 <_dtoa_r+0x9ee>
 8017cf4:	f018 0f01 	tst.w	r8, #1
 8017cf8:	d0dd      	beq.n	8017cb6 <_dtoa_r+0x9ee>
 8017cfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017cfe:	d1d8      	bne.n	8017cb2 <_dtoa_r+0x9ea>
 8017d00:	9b05      	ldr	r3, [sp, #20]
 8017d02:	9a05      	ldr	r2, [sp, #20]
 8017d04:	1c5d      	adds	r5, r3, #1
 8017d06:	2339      	movs	r3, #57	; 0x39
 8017d08:	7013      	strb	r3, [r2, #0]
 8017d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017d0e:	2b39      	cmp	r3, #57	; 0x39
 8017d10:	f105 32ff 	add.w	r2, r5, #4294967295
 8017d14:	d04f      	beq.n	8017db6 <_dtoa_r+0xaee>
 8017d16:	3301      	adds	r3, #1
 8017d18:	7013      	strb	r3, [r2, #0]
 8017d1a:	e754      	b.n	8017bc6 <_dtoa_r+0x8fe>
 8017d1c:	9a05      	ldr	r2, [sp, #20]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	f102 0501 	add.w	r5, r2, #1
 8017d24:	dd06      	ble.n	8017d34 <_dtoa_r+0xa6c>
 8017d26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017d2a:	d0e9      	beq.n	8017d00 <_dtoa_r+0xa38>
 8017d2c:	f108 0801 	add.w	r8, r8, #1
 8017d30:	9b05      	ldr	r3, [sp, #20]
 8017d32:	e7c2      	b.n	8017cba <_dtoa_r+0x9f2>
 8017d34:	9a02      	ldr	r2, [sp, #8]
 8017d36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017d3a:	eba5 030b 	sub.w	r3, r5, fp
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	d021      	beq.n	8017d86 <_dtoa_r+0xabe>
 8017d42:	2300      	movs	r3, #0
 8017d44:	220a      	movs	r2, #10
 8017d46:	9904      	ldr	r1, [sp, #16]
 8017d48:	4620      	mov	r0, r4
 8017d4a:	f000 fc22 	bl	8018592 <__multadd>
 8017d4e:	45b1      	cmp	r9, r6
 8017d50:	9004      	str	r0, [sp, #16]
 8017d52:	f04f 0300 	mov.w	r3, #0
 8017d56:	f04f 020a 	mov.w	r2, #10
 8017d5a:	4649      	mov	r1, r9
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	d105      	bne.n	8017d6c <_dtoa_r+0xaa4>
 8017d60:	f000 fc17 	bl	8018592 <__multadd>
 8017d64:	4681      	mov	r9, r0
 8017d66:	4606      	mov	r6, r0
 8017d68:	9505      	str	r5, [sp, #20]
 8017d6a:	e776      	b.n	8017c5a <_dtoa_r+0x992>
 8017d6c:	f000 fc11 	bl	8018592 <__multadd>
 8017d70:	4631      	mov	r1, r6
 8017d72:	4681      	mov	r9, r0
 8017d74:	2300      	movs	r3, #0
 8017d76:	220a      	movs	r2, #10
 8017d78:	4620      	mov	r0, r4
 8017d7a:	f000 fc0a 	bl	8018592 <__multadd>
 8017d7e:	4606      	mov	r6, r0
 8017d80:	e7f2      	b.n	8017d68 <_dtoa_r+0xaa0>
 8017d82:	f04f 0900 	mov.w	r9, #0
 8017d86:	2201      	movs	r2, #1
 8017d88:	9904      	ldr	r1, [sp, #16]
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	f000 fdb6 	bl	80188fc <__lshift>
 8017d90:	4639      	mov	r1, r7
 8017d92:	9004      	str	r0, [sp, #16]
 8017d94:	f000 fe06 	bl	80189a4 <__mcmp>
 8017d98:	2800      	cmp	r0, #0
 8017d9a:	dcb6      	bgt.n	8017d0a <_dtoa_r+0xa42>
 8017d9c:	d102      	bne.n	8017da4 <_dtoa_r+0xadc>
 8017d9e:	f018 0f01 	tst.w	r8, #1
 8017da2:	d1b2      	bne.n	8017d0a <_dtoa_r+0xa42>
 8017da4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017da8:	2b30      	cmp	r3, #48	; 0x30
 8017daa:	f105 32ff 	add.w	r2, r5, #4294967295
 8017dae:	f47f af0a 	bne.w	8017bc6 <_dtoa_r+0x8fe>
 8017db2:	4615      	mov	r5, r2
 8017db4:	e7f6      	b.n	8017da4 <_dtoa_r+0xadc>
 8017db6:	4593      	cmp	fp, r2
 8017db8:	d105      	bne.n	8017dc6 <_dtoa_r+0xafe>
 8017dba:	2331      	movs	r3, #49	; 0x31
 8017dbc:	f10a 0a01 	add.w	sl, sl, #1
 8017dc0:	f88b 3000 	strb.w	r3, [fp]
 8017dc4:	e6ff      	b.n	8017bc6 <_dtoa_r+0x8fe>
 8017dc6:	4615      	mov	r5, r2
 8017dc8:	e79f      	b.n	8017d0a <_dtoa_r+0xa42>
 8017dca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017e30 <_dtoa_r+0xb68>
 8017dce:	e007      	b.n	8017de0 <_dtoa_r+0xb18>
 8017dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017dd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017e34 <_dtoa_r+0xb6c>
 8017dd6:	b11b      	cbz	r3, 8017de0 <_dtoa_r+0xb18>
 8017dd8:	f10b 0308 	add.w	r3, fp, #8
 8017ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017dde:	6013      	str	r3, [r2, #0]
 8017de0:	4658      	mov	r0, fp
 8017de2:	b017      	add	sp, #92	; 0x5c
 8017de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de8:	9b06      	ldr	r3, [sp, #24]
 8017dea:	2b01      	cmp	r3, #1
 8017dec:	f77f ae35 	ble.w	8017a5a <_dtoa_r+0x792>
 8017df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017df2:	9307      	str	r3, [sp, #28]
 8017df4:	e649      	b.n	8017a8a <_dtoa_r+0x7c2>
 8017df6:	9b02      	ldr	r3, [sp, #8]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	dc03      	bgt.n	8017e04 <_dtoa_r+0xb3c>
 8017dfc:	9b06      	ldr	r3, [sp, #24]
 8017dfe:	2b02      	cmp	r3, #2
 8017e00:	f73f aecc 	bgt.w	8017b9c <_dtoa_r+0x8d4>
 8017e04:	465d      	mov	r5, fp
 8017e06:	4639      	mov	r1, r7
 8017e08:	9804      	ldr	r0, [sp, #16]
 8017e0a:	f7ff f9cf 	bl	80171ac <quorem>
 8017e0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017e12:	f805 8b01 	strb.w	r8, [r5], #1
 8017e16:	9a02      	ldr	r2, [sp, #8]
 8017e18:	eba5 030b 	sub.w	r3, r5, fp
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	ddb0      	ble.n	8017d82 <_dtoa_r+0xaba>
 8017e20:	2300      	movs	r3, #0
 8017e22:	220a      	movs	r2, #10
 8017e24:	9904      	ldr	r1, [sp, #16]
 8017e26:	4620      	mov	r0, r4
 8017e28:	f000 fbb3 	bl	8018592 <__multadd>
 8017e2c:	9004      	str	r0, [sp, #16]
 8017e2e:	e7ea      	b.n	8017e06 <_dtoa_r+0xb3e>
 8017e30:	0801a4eb 	.word	0x0801a4eb
 8017e34:	0801a348 	.word	0x0801a348

08017e38 <rshift>:
 8017e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e3a:	6906      	ldr	r6, [r0, #16]
 8017e3c:	114b      	asrs	r3, r1, #5
 8017e3e:	429e      	cmp	r6, r3
 8017e40:	f100 0414 	add.w	r4, r0, #20
 8017e44:	dd30      	ble.n	8017ea8 <rshift+0x70>
 8017e46:	f011 011f 	ands.w	r1, r1, #31
 8017e4a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017e4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017e52:	d108      	bne.n	8017e66 <rshift+0x2e>
 8017e54:	4621      	mov	r1, r4
 8017e56:	42b2      	cmp	r2, r6
 8017e58:	460b      	mov	r3, r1
 8017e5a:	d211      	bcs.n	8017e80 <rshift+0x48>
 8017e5c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017e60:	f841 3b04 	str.w	r3, [r1], #4
 8017e64:	e7f7      	b.n	8017e56 <rshift+0x1e>
 8017e66:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017e6a:	f1c1 0c20 	rsb	ip, r1, #32
 8017e6e:	40cd      	lsrs	r5, r1
 8017e70:	3204      	adds	r2, #4
 8017e72:	4623      	mov	r3, r4
 8017e74:	42b2      	cmp	r2, r6
 8017e76:	4617      	mov	r7, r2
 8017e78:	d30c      	bcc.n	8017e94 <rshift+0x5c>
 8017e7a:	601d      	str	r5, [r3, #0]
 8017e7c:	b105      	cbz	r5, 8017e80 <rshift+0x48>
 8017e7e:	3304      	adds	r3, #4
 8017e80:	1b1a      	subs	r2, r3, r4
 8017e82:	42a3      	cmp	r3, r4
 8017e84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017e88:	bf08      	it	eq
 8017e8a:	2300      	moveq	r3, #0
 8017e8c:	6102      	str	r2, [r0, #16]
 8017e8e:	bf08      	it	eq
 8017e90:	6143      	streq	r3, [r0, #20]
 8017e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e94:	683f      	ldr	r7, [r7, #0]
 8017e96:	fa07 f70c 	lsl.w	r7, r7, ip
 8017e9a:	433d      	orrs	r5, r7
 8017e9c:	f843 5b04 	str.w	r5, [r3], #4
 8017ea0:	f852 5b04 	ldr.w	r5, [r2], #4
 8017ea4:	40cd      	lsrs	r5, r1
 8017ea6:	e7e5      	b.n	8017e74 <rshift+0x3c>
 8017ea8:	4623      	mov	r3, r4
 8017eaa:	e7e9      	b.n	8017e80 <rshift+0x48>

08017eac <__hexdig_fun>:
 8017eac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017eb0:	2b09      	cmp	r3, #9
 8017eb2:	d802      	bhi.n	8017eba <__hexdig_fun+0xe>
 8017eb4:	3820      	subs	r0, #32
 8017eb6:	b2c0      	uxtb	r0, r0
 8017eb8:	4770      	bx	lr
 8017eba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017ebe:	2b05      	cmp	r3, #5
 8017ec0:	d801      	bhi.n	8017ec6 <__hexdig_fun+0x1a>
 8017ec2:	3847      	subs	r0, #71	; 0x47
 8017ec4:	e7f7      	b.n	8017eb6 <__hexdig_fun+0xa>
 8017ec6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017eca:	2b05      	cmp	r3, #5
 8017ecc:	d801      	bhi.n	8017ed2 <__hexdig_fun+0x26>
 8017ece:	3827      	subs	r0, #39	; 0x27
 8017ed0:	e7f1      	b.n	8017eb6 <__hexdig_fun+0xa>
 8017ed2:	2000      	movs	r0, #0
 8017ed4:	4770      	bx	lr

08017ed6 <__gethex>:
 8017ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eda:	b08b      	sub	sp, #44	; 0x2c
 8017edc:	468a      	mov	sl, r1
 8017ede:	9002      	str	r0, [sp, #8]
 8017ee0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017ee2:	9306      	str	r3, [sp, #24]
 8017ee4:	4690      	mov	r8, r2
 8017ee6:	f000 fadf 	bl	80184a8 <__localeconv_l>
 8017eea:	6803      	ldr	r3, [r0, #0]
 8017eec:	9303      	str	r3, [sp, #12]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7e8 f986 	bl	8000200 <strlen>
 8017ef4:	9b03      	ldr	r3, [sp, #12]
 8017ef6:	9001      	str	r0, [sp, #4]
 8017ef8:	4403      	add	r3, r0
 8017efa:	f04f 0b00 	mov.w	fp, #0
 8017efe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017f02:	9307      	str	r3, [sp, #28]
 8017f04:	f8da 3000 	ldr.w	r3, [sl]
 8017f08:	3302      	adds	r3, #2
 8017f0a:	461f      	mov	r7, r3
 8017f0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017f10:	2830      	cmp	r0, #48	; 0x30
 8017f12:	d06c      	beq.n	8017fee <__gethex+0x118>
 8017f14:	f7ff ffca 	bl	8017eac <__hexdig_fun>
 8017f18:	4604      	mov	r4, r0
 8017f1a:	2800      	cmp	r0, #0
 8017f1c:	d16a      	bne.n	8017ff4 <__gethex+0x11e>
 8017f1e:	9a01      	ldr	r2, [sp, #4]
 8017f20:	9903      	ldr	r1, [sp, #12]
 8017f22:	4638      	mov	r0, r7
 8017f24:	f001 fc36 	bl	8019794 <strncmp>
 8017f28:	2800      	cmp	r0, #0
 8017f2a:	d166      	bne.n	8017ffa <__gethex+0x124>
 8017f2c:	9b01      	ldr	r3, [sp, #4]
 8017f2e:	5cf8      	ldrb	r0, [r7, r3]
 8017f30:	18fe      	adds	r6, r7, r3
 8017f32:	f7ff ffbb 	bl	8017eac <__hexdig_fun>
 8017f36:	2800      	cmp	r0, #0
 8017f38:	d062      	beq.n	8018000 <__gethex+0x12a>
 8017f3a:	4633      	mov	r3, r6
 8017f3c:	7818      	ldrb	r0, [r3, #0]
 8017f3e:	2830      	cmp	r0, #48	; 0x30
 8017f40:	461f      	mov	r7, r3
 8017f42:	f103 0301 	add.w	r3, r3, #1
 8017f46:	d0f9      	beq.n	8017f3c <__gethex+0x66>
 8017f48:	f7ff ffb0 	bl	8017eac <__hexdig_fun>
 8017f4c:	fab0 f580 	clz	r5, r0
 8017f50:	096d      	lsrs	r5, r5, #5
 8017f52:	4634      	mov	r4, r6
 8017f54:	f04f 0b01 	mov.w	fp, #1
 8017f58:	463a      	mov	r2, r7
 8017f5a:	4616      	mov	r6, r2
 8017f5c:	3201      	adds	r2, #1
 8017f5e:	7830      	ldrb	r0, [r6, #0]
 8017f60:	f7ff ffa4 	bl	8017eac <__hexdig_fun>
 8017f64:	2800      	cmp	r0, #0
 8017f66:	d1f8      	bne.n	8017f5a <__gethex+0x84>
 8017f68:	9a01      	ldr	r2, [sp, #4]
 8017f6a:	9903      	ldr	r1, [sp, #12]
 8017f6c:	4630      	mov	r0, r6
 8017f6e:	f001 fc11 	bl	8019794 <strncmp>
 8017f72:	b950      	cbnz	r0, 8017f8a <__gethex+0xb4>
 8017f74:	b954      	cbnz	r4, 8017f8c <__gethex+0xb6>
 8017f76:	9b01      	ldr	r3, [sp, #4]
 8017f78:	18f4      	adds	r4, r6, r3
 8017f7a:	4622      	mov	r2, r4
 8017f7c:	4616      	mov	r6, r2
 8017f7e:	3201      	adds	r2, #1
 8017f80:	7830      	ldrb	r0, [r6, #0]
 8017f82:	f7ff ff93 	bl	8017eac <__hexdig_fun>
 8017f86:	2800      	cmp	r0, #0
 8017f88:	d1f8      	bne.n	8017f7c <__gethex+0xa6>
 8017f8a:	b10c      	cbz	r4, 8017f90 <__gethex+0xba>
 8017f8c:	1ba4      	subs	r4, r4, r6
 8017f8e:	00a4      	lsls	r4, r4, #2
 8017f90:	7833      	ldrb	r3, [r6, #0]
 8017f92:	2b50      	cmp	r3, #80	; 0x50
 8017f94:	d001      	beq.n	8017f9a <__gethex+0xc4>
 8017f96:	2b70      	cmp	r3, #112	; 0x70
 8017f98:	d140      	bne.n	801801c <__gethex+0x146>
 8017f9a:	7873      	ldrb	r3, [r6, #1]
 8017f9c:	2b2b      	cmp	r3, #43	; 0x2b
 8017f9e:	d031      	beq.n	8018004 <__gethex+0x12e>
 8017fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8017fa2:	d033      	beq.n	801800c <__gethex+0x136>
 8017fa4:	1c71      	adds	r1, r6, #1
 8017fa6:	f04f 0900 	mov.w	r9, #0
 8017faa:	7808      	ldrb	r0, [r1, #0]
 8017fac:	f7ff ff7e 	bl	8017eac <__hexdig_fun>
 8017fb0:	1e43      	subs	r3, r0, #1
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	2b18      	cmp	r3, #24
 8017fb6:	d831      	bhi.n	801801c <__gethex+0x146>
 8017fb8:	f1a0 0210 	sub.w	r2, r0, #16
 8017fbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017fc0:	f7ff ff74 	bl	8017eac <__hexdig_fun>
 8017fc4:	1e43      	subs	r3, r0, #1
 8017fc6:	b2db      	uxtb	r3, r3
 8017fc8:	2b18      	cmp	r3, #24
 8017fca:	d922      	bls.n	8018012 <__gethex+0x13c>
 8017fcc:	f1b9 0f00 	cmp.w	r9, #0
 8017fd0:	d000      	beq.n	8017fd4 <__gethex+0xfe>
 8017fd2:	4252      	negs	r2, r2
 8017fd4:	4414      	add	r4, r2
 8017fd6:	f8ca 1000 	str.w	r1, [sl]
 8017fda:	b30d      	cbz	r5, 8018020 <__gethex+0x14a>
 8017fdc:	f1bb 0f00 	cmp.w	fp, #0
 8017fe0:	bf0c      	ite	eq
 8017fe2:	2706      	moveq	r7, #6
 8017fe4:	2700      	movne	r7, #0
 8017fe6:	4638      	mov	r0, r7
 8017fe8:	b00b      	add	sp, #44	; 0x2c
 8017fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fee:	f10b 0b01 	add.w	fp, fp, #1
 8017ff2:	e78a      	b.n	8017f0a <__gethex+0x34>
 8017ff4:	2500      	movs	r5, #0
 8017ff6:	462c      	mov	r4, r5
 8017ff8:	e7ae      	b.n	8017f58 <__gethex+0x82>
 8017ffa:	463e      	mov	r6, r7
 8017ffc:	2501      	movs	r5, #1
 8017ffe:	e7c7      	b.n	8017f90 <__gethex+0xba>
 8018000:	4604      	mov	r4, r0
 8018002:	e7fb      	b.n	8017ffc <__gethex+0x126>
 8018004:	f04f 0900 	mov.w	r9, #0
 8018008:	1cb1      	adds	r1, r6, #2
 801800a:	e7ce      	b.n	8017faa <__gethex+0xd4>
 801800c:	f04f 0901 	mov.w	r9, #1
 8018010:	e7fa      	b.n	8018008 <__gethex+0x132>
 8018012:	230a      	movs	r3, #10
 8018014:	fb03 0202 	mla	r2, r3, r2, r0
 8018018:	3a10      	subs	r2, #16
 801801a:	e7cf      	b.n	8017fbc <__gethex+0xe6>
 801801c:	4631      	mov	r1, r6
 801801e:	e7da      	b.n	8017fd6 <__gethex+0x100>
 8018020:	1bf3      	subs	r3, r6, r7
 8018022:	3b01      	subs	r3, #1
 8018024:	4629      	mov	r1, r5
 8018026:	2b07      	cmp	r3, #7
 8018028:	dc49      	bgt.n	80180be <__gethex+0x1e8>
 801802a:	9802      	ldr	r0, [sp, #8]
 801802c:	f000 fa66 	bl	80184fc <_Balloc>
 8018030:	9b01      	ldr	r3, [sp, #4]
 8018032:	f100 0914 	add.w	r9, r0, #20
 8018036:	f04f 0b00 	mov.w	fp, #0
 801803a:	f1c3 0301 	rsb	r3, r3, #1
 801803e:	4605      	mov	r5, r0
 8018040:	f8cd 9010 	str.w	r9, [sp, #16]
 8018044:	46da      	mov	sl, fp
 8018046:	9308      	str	r3, [sp, #32]
 8018048:	42b7      	cmp	r7, r6
 801804a:	d33b      	bcc.n	80180c4 <__gethex+0x1ee>
 801804c:	9804      	ldr	r0, [sp, #16]
 801804e:	f840 ab04 	str.w	sl, [r0], #4
 8018052:	eba0 0009 	sub.w	r0, r0, r9
 8018056:	1080      	asrs	r0, r0, #2
 8018058:	6128      	str	r0, [r5, #16]
 801805a:	0147      	lsls	r7, r0, #5
 801805c:	4650      	mov	r0, sl
 801805e:	f000 fb11 	bl	8018684 <__hi0bits>
 8018062:	f8d8 6000 	ldr.w	r6, [r8]
 8018066:	1a3f      	subs	r7, r7, r0
 8018068:	42b7      	cmp	r7, r6
 801806a:	dd64      	ble.n	8018136 <__gethex+0x260>
 801806c:	1bbf      	subs	r7, r7, r6
 801806e:	4639      	mov	r1, r7
 8018070:	4628      	mov	r0, r5
 8018072:	f000 fe21 	bl	8018cb8 <__any_on>
 8018076:	4682      	mov	sl, r0
 8018078:	b178      	cbz	r0, 801809a <__gethex+0x1c4>
 801807a:	1e7b      	subs	r3, r7, #1
 801807c:	1159      	asrs	r1, r3, #5
 801807e:	f003 021f 	and.w	r2, r3, #31
 8018082:	f04f 0a01 	mov.w	sl, #1
 8018086:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801808a:	fa0a f202 	lsl.w	r2, sl, r2
 801808e:	420a      	tst	r2, r1
 8018090:	d003      	beq.n	801809a <__gethex+0x1c4>
 8018092:	4553      	cmp	r3, sl
 8018094:	dc46      	bgt.n	8018124 <__gethex+0x24e>
 8018096:	f04f 0a02 	mov.w	sl, #2
 801809a:	4639      	mov	r1, r7
 801809c:	4628      	mov	r0, r5
 801809e:	f7ff fecb 	bl	8017e38 <rshift>
 80180a2:	443c      	add	r4, r7
 80180a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80180a8:	42a3      	cmp	r3, r4
 80180aa:	da52      	bge.n	8018152 <__gethex+0x27c>
 80180ac:	4629      	mov	r1, r5
 80180ae:	9802      	ldr	r0, [sp, #8]
 80180b0:	f000 fa58 	bl	8018564 <_Bfree>
 80180b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80180b6:	2300      	movs	r3, #0
 80180b8:	6013      	str	r3, [r2, #0]
 80180ba:	27a3      	movs	r7, #163	; 0xa3
 80180bc:	e793      	b.n	8017fe6 <__gethex+0x110>
 80180be:	3101      	adds	r1, #1
 80180c0:	105b      	asrs	r3, r3, #1
 80180c2:	e7b0      	b.n	8018026 <__gethex+0x150>
 80180c4:	1e73      	subs	r3, r6, #1
 80180c6:	9305      	str	r3, [sp, #20]
 80180c8:	9a07      	ldr	r2, [sp, #28]
 80180ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80180ce:	4293      	cmp	r3, r2
 80180d0:	d018      	beq.n	8018104 <__gethex+0x22e>
 80180d2:	f1bb 0f20 	cmp.w	fp, #32
 80180d6:	d107      	bne.n	80180e8 <__gethex+0x212>
 80180d8:	9b04      	ldr	r3, [sp, #16]
 80180da:	f8c3 a000 	str.w	sl, [r3]
 80180de:	3304      	adds	r3, #4
 80180e0:	f04f 0a00 	mov.w	sl, #0
 80180e4:	9304      	str	r3, [sp, #16]
 80180e6:	46d3      	mov	fp, sl
 80180e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80180ec:	f7ff fede 	bl	8017eac <__hexdig_fun>
 80180f0:	f000 000f 	and.w	r0, r0, #15
 80180f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80180f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80180fc:	f10b 0b04 	add.w	fp, fp, #4
 8018100:	9b05      	ldr	r3, [sp, #20]
 8018102:	e00d      	b.n	8018120 <__gethex+0x24a>
 8018104:	9b05      	ldr	r3, [sp, #20]
 8018106:	9a08      	ldr	r2, [sp, #32]
 8018108:	4413      	add	r3, r2
 801810a:	42bb      	cmp	r3, r7
 801810c:	d3e1      	bcc.n	80180d2 <__gethex+0x1fc>
 801810e:	4618      	mov	r0, r3
 8018110:	9a01      	ldr	r2, [sp, #4]
 8018112:	9903      	ldr	r1, [sp, #12]
 8018114:	9309      	str	r3, [sp, #36]	; 0x24
 8018116:	f001 fb3d 	bl	8019794 <strncmp>
 801811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801811c:	2800      	cmp	r0, #0
 801811e:	d1d8      	bne.n	80180d2 <__gethex+0x1fc>
 8018120:	461e      	mov	r6, r3
 8018122:	e791      	b.n	8018048 <__gethex+0x172>
 8018124:	1eb9      	subs	r1, r7, #2
 8018126:	4628      	mov	r0, r5
 8018128:	f000 fdc6 	bl	8018cb8 <__any_on>
 801812c:	2800      	cmp	r0, #0
 801812e:	d0b2      	beq.n	8018096 <__gethex+0x1c0>
 8018130:	f04f 0a03 	mov.w	sl, #3
 8018134:	e7b1      	b.n	801809a <__gethex+0x1c4>
 8018136:	da09      	bge.n	801814c <__gethex+0x276>
 8018138:	1bf7      	subs	r7, r6, r7
 801813a:	4629      	mov	r1, r5
 801813c:	463a      	mov	r2, r7
 801813e:	9802      	ldr	r0, [sp, #8]
 8018140:	f000 fbdc 	bl	80188fc <__lshift>
 8018144:	1be4      	subs	r4, r4, r7
 8018146:	4605      	mov	r5, r0
 8018148:	f100 0914 	add.w	r9, r0, #20
 801814c:	f04f 0a00 	mov.w	sl, #0
 8018150:	e7a8      	b.n	80180a4 <__gethex+0x1ce>
 8018152:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018156:	42a0      	cmp	r0, r4
 8018158:	dd6a      	ble.n	8018230 <__gethex+0x35a>
 801815a:	1b04      	subs	r4, r0, r4
 801815c:	42a6      	cmp	r6, r4
 801815e:	dc2e      	bgt.n	80181be <__gethex+0x2e8>
 8018160:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018164:	2b02      	cmp	r3, #2
 8018166:	d022      	beq.n	80181ae <__gethex+0x2d8>
 8018168:	2b03      	cmp	r3, #3
 801816a:	d024      	beq.n	80181b6 <__gethex+0x2e0>
 801816c:	2b01      	cmp	r3, #1
 801816e:	d115      	bne.n	801819c <__gethex+0x2c6>
 8018170:	42a6      	cmp	r6, r4
 8018172:	d113      	bne.n	801819c <__gethex+0x2c6>
 8018174:	2e01      	cmp	r6, #1
 8018176:	dc0b      	bgt.n	8018190 <__gethex+0x2ba>
 8018178:	9a06      	ldr	r2, [sp, #24]
 801817a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801817e:	6013      	str	r3, [r2, #0]
 8018180:	2301      	movs	r3, #1
 8018182:	612b      	str	r3, [r5, #16]
 8018184:	f8c9 3000 	str.w	r3, [r9]
 8018188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801818a:	2762      	movs	r7, #98	; 0x62
 801818c:	601d      	str	r5, [r3, #0]
 801818e:	e72a      	b.n	8017fe6 <__gethex+0x110>
 8018190:	1e71      	subs	r1, r6, #1
 8018192:	4628      	mov	r0, r5
 8018194:	f000 fd90 	bl	8018cb8 <__any_on>
 8018198:	2800      	cmp	r0, #0
 801819a:	d1ed      	bne.n	8018178 <__gethex+0x2a2>
 801819c:	4629      	mov	r1, r5
 801819e:	9802      	ldr	r0, [sp, #8]
 80181a0:	f000 f9e0 	bl	8018564 <_Bfree>
 80181a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80181a6:	2300      	movs	r3, #0
 80181a8:	6013      	str	r3, [r2, #0]
 80181aa:	2750      	movs	r7, #80	; 0x50
 80181ac:	e71b      	b.n	8017fe6 <__gethex+0x110>
 80181ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d0e1      	beq.n	8018178 <__gethex+0x2a2>
 80181b4:	e7f2      	b.n	801819c <__gethex+0x2c6>
 80181b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d1dd      	bne.n	8018178 <__gethex+0x2a2>
 80181bc:	e7ee      	b.n	801819c <__gethex+0x2c6>
 80181be:	1e67      	subs	r7, r4, #1
 80181c0:	f1ba 0f00 	cmp.w	sl, #0
 80181c4:	d131      	bne.n	801822a <__gethex+0x354>
 80181c6:	b127      	cbz	r7, 80181d2 <__gethex+0x2fc>
 80181c8:	4639      	mov	r1, r7
 80181ca:	4628      	mov	r0, r5
 80181cc:	f000 fd74 	bl	8018cb8 <__any_on>
 80181d0:	4682      	mov	sl, r0
 80181d2:	117a      	asrs	r2, r7, #5
 80181d4:	2301      	movs	r3, #1
 80181d6:	f007 071f 	and.w	r7, r7, #31
 80181da:	fa03 f707 	lsl.w	r7, r3, r7
 80181de:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80181e2:	4621      	mov	r1, r4
 80181e4:	421f      	tst	r7, r3
 80181e6:	4628      	mov	r0, r5
 80181e8:	bf18      	it	ne
 80181ea:	f04a 0a02 	orrne.w	sl, sl, #2
 80181ee:	1b36      	subs	r6, r6, r4
 80181f0:	f7ff fe22 	bl	8017e38 <rshift>
 80181f4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80181f8:	2702      	movs	r7, #2
 80181fa:	f1ba 0f00 	cmp.w	sl, #0
 80181fe:	d048      	beq.n	8018292 <__gethex+0x3bc>
 8018200:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018204:	2b02      	cmp	r3, #2
 8018206:	d015      	beq.n	8018234 <__gethex+0x35e>
 8018208:	2b03      	cmp	r3, #3
 801820a:	d017      	beq.n	801823c <__gethex+0x366>
 801820c:	2b01      	cmp	r3, #1
 801820e:	d109      	bne.n	8018224 <__gethex+0x34e>
 8018210:	f01a 0f02 	tst.w	sl, #2
 8018214:	d006      	beq.n	8018224 <__gethex+0x34e>
 8018216:	f8d9 3000 	ldr.w	r3, [r9]
 801821a:	ea4a 0a03 	orr.w	sl, sl, r3
 801821e:	f01a 0f01 	tst.w	sl, #1
 8018222:	d10e      	bne.n	8018242 <__gethex+0x36c>
 8018224:	f047 0710 	orr.w	r7, r7, #16
 8018228:	e033      	b.n	8018292 <__gethex+0x3bc>
 801822a:	f04f 0a01 	mov.w	sl, #1
 801822e:	e7d0      	b.n	80181d2 <__gethex+0x2fc>
 8018230:	2701      	movs	r7, #1
 8018232:	e7e2      	b.n	80181fa <__gethex+0x324>
 8018234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018236:	f1c3 0301 	rsb	r3, r3, #1
 801823a:	9315      	str	r3, [sp, #84]	; 0x54
 801823c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801823e:	2b00      	cmp	r3, #0
 8018240:	d0f0      	beq.n	8018224 <__gethex+0x34e>
 8018242:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018246:	f105 0314 	add.w	r3, r5, #20
 801824a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801824e:	eb03 010a 	add.w	r1, r3, sl
 8018252:	f04f 0c00 	mov.w	ip, #0
 8018256:	4618      	mov	r0, r3
 8018258:	f853 2b04 	ldr.w	r2, [r3], #4
 801825c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018260:	d01c      	beq.n	801829c <__gethex+0x3c6>
 8018262:	3201      	adds	r2, #1
 8018264:	6002      	str	r2, [r0, #0]
 8018266:	2f02      	cmp	r7, #2
 8018268:	f105 0314 	add.w	r3, r5, #20
 801826c:	d138      	bne.n	80182e0 <__gethex+0x40a>
 801826e:	f8d8 2000 	ldr.w	r2, [r8]
 8018272:	3a01      	subs	r2, #1
 8018274:	42b2      	cmp	r2, r6
 8018276:	d10a      	bne.n	801828e <__gethex+0x3b8>
 8018278:	1171      	asrs	r1, r6, #5
 801827a:	2201      	movs	r2, #1
 801827c:	f006 061f 	and.w	r6, r6, #31
 8018280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018284:	fa02 f606 	lsl.w	r6, r2, r6
 8018288:	421e      	tst	r6, r3
 801828a:	bf18      	it	ne
 801828c:	4617      	movne	r7, r2
 801828e:	f047 0720 	orr.w	r7, r7, #32
 8018292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018294:	601d      	str	r5, [r3, #0]
 8018296:	9b06      	ldr	r3, [sp, #24]
 8018298:	601c      	str	r4, [r3, #0]
 801829a:	e6a4      	b.n	8017fe6 <__gethex+0x110>
 801829c:	4299      	cmp	r1, r3
 801829e:	f843 cc04 	str.w	ip, [r3, #-4]
 80182a2:	d8d8      	bhi.n	8018256 <__gethex+0x380>
 80182a4:	68ab      	ldr	r3, [r5, #8]
 80182a6:	4599      	cmp	r9, r3
 80182a8:	db12      	blt.n	80182d0 <__gethex+0x3fa>
 80182aa:	6869      	ldr	r1, [r5, #4]
 80182ac:	9802      	ldr	r0, [sp, #8]
 80182ae:	3101      	adds	r1, #1
 80182b0:	f000 f924 	bl	80184fc <_Balloc>
 80182b4:	692a      	ldr	r2, [r5, #16]
 80182b6:	3202      	adds	r2, #2
 80182b8:	f105 010c 	add.w	r1, r5, #12
 80182bc:	4683      	mov	fp, r0
 80182be:	0092      	lsls	r2, r2, #2
 80182c0:	300c      	adds	r0, #12
 80182c2:	f7fd f9c5 	bl	8015650 <memcpy>
 80182c6:	4629      	mov	r1, r5
 80182c8:	9802      	ldr	r0, [sp, #8]
 80182ca:	f000 f94b 	bl	8018564 <_Bfree>
 80182ce:	465d      	mov	r5, fp
 80182d0:	692b      	ldr	r3, [r5, #16]
 80182d2:	1c5a      	adds	r2, r3, #1
 80182d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80182d8:	612a      	str	r2, [r5, #16]
 80182da:	2201      	movs	r2, #1
 80182dc:	615a      	str	r2, [r3, #20]
 80182de:	e7c2      	b.n	8018266 <__gethex+0x390>
 80182e0:	692a      	ldr	r2, [r5, #16]
 80182e2:	454a      	cmp	r2, r9
 80182e4:	dd0b      	ble.n	80182fe <__gethex+0x428>
 80182e6:	2101      	movs	r1, #1
 80182e8:	4628      	mov	r0, r5
 80182ea:	f7ff fda5 	bl	8017e38 <rshift>
 80182ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182f2:	3401      	adds	r4, #1
 80182f4:	42a3      	cmp	r3, r4
 80182f6:	f6ff aed9 	blt.w	80180ac <__gethex+0x1d6>
 80182fa:	2701      	movs	r7, #1
 80182fc:	e7c7      	b.n	801828e <__gethex+0x3b8>
 80182fe:	f016 061f 	ands.w	r6, r6, #31
 8018302:	d0fa      	beq.n	80182fa <__gethex+0x424>
 8018304:	449a      	add	sl, r3
 8018306:	f1c6 0620 	rsb	r6, r6, #32
 801830a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801830e:	f000 f9b9 	bl	8018684 <__hi0bits>
 8018312:	42b0      	cmp	r0, r6
 8018314:	dbe7      	blt.n	80182e6 <__gethex+0x410>
 8018316:	e7f0      	b.n	80182fa <__gethex+0x424>

08018318 <L_shift>:
 8018318:	f1c2 0208 	rsb	r2, r2, #8
 801831c:	0092      	lsls	r2, r2, #2
 801831e:	b570      	push	{r4, r5, r6, lr}
 8018320:	f1c2 0620 	rsb	r6, r2, #32
 8018324:	6843      	ldr	r3, [r0, #4]
 8018326:	6804      	ldr	r4, [r0, #0]
 8018328:	fa03 f506 	lsl.w	r5, r3, r6
 801832c:	432c      	orrs	r4, r5
 801832e:	40d3      	lsrs	r3, r2
 8018330:	6004      	str	r4, [r0, #0]
 8018332:	f840 3f04 	str.w	r3, [r0, #4]!
 8018336:	4288      	cmp	r0, r1
 8018338:	d3f4      	bcc.n	8018324 <L_shift+0xc>
 801833a:	bd70      	pop	{r4, r5, r6, pc}

0801833c <__match>:
 801833c:	b530      	push	{r4, r5, lr}
 801833e:	6803      	ldr	r3, [r0, #0]
 8018340:	3301      	adds	r3, #1
 8018342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018346:	b914      	cbnz	r4, 801834e <__match+0x12>
 8018348:	6003      	str	r3, [r0, #0]
 801834a:	2001      	movs	r0, #1
 801834c:	bd30      	pop	{r4, r5, pc}
 801834e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018352:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018356:	2d19      	cmp	r5, #25
 8018358:	bf98      	it	ls
 801835a:	3220      	addls	r2, #32
 801835c:	42a2      	cmp	r2, r4
 801835e:	d0f0      	beq.n	8018342 <__match+0x6>
 8018360:	2000      	movs	r0, #0
 8018362:	e7f3      	b.n	801834c <__match+0x10>

08018364 <__hexnan>:
 8018364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018368:	680b      	ldr	r3, [r1, #0]
 801836a:	6801      	ldr	r1, [r0, #0]
 801836c:	115f      	asrs	r7, r3, #5
 801836e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018372:	f013 031f 	ands.w	r3, r3, #31
 8018376:	b087      	sub	sp, #28
 8018378:	bf18      	it	ne
 801837a:	3704      	addne	r7, #4
 801837c:	2500      	movs	r5, #0
 801837e:	1f3e      	subs	r6, r7, #4
 8018380:	4682      	mov	sl, r0
 8018382:	4690      	mov	r8, r2
 8018384:	9301      	str	r3, [sp, #4]
 8018386:	f847 5c04 	str.w	r5, [r7, #-4]
 801838a:	46b1      	mov	r9, r6
 801838c:	4634      	mov	r4, r6
 801838e:	9502      	str	r5, [sp, #8]
 8018390:	46ab      	mov	fp, r5
 8018392:	784a      	ldrb	r2, [r1, #1]
 8018394:	1c4b      	adds	r3, r1, #1
 8018396:	9303      	str	r3, [sp, #12]
 8018398:	b342      	cbz	r2, 80183ec <__hexnan+0x88>
 801839a:	4610      	mov	r0, r2
 801839c:	9105      	str	r1, [sp, #20]
 801839e:	9204      	str	r2, [sp, #16]
 80183a0:	f7ff fd84 	bl	8017eac <__hexdig_fun>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	d143      	bne.n	8018430 <__hexnan+0xcc>
 80183a8:	9a04      	ldr	r2, [sp, #16]
 80183aa:	9905      	ldr	r1, [sp, #20]
 80183ac:	2a20      	cmp	r2, #32
 80183ae:	d818      	bhi.n	80183e2 <__hexnan+0x7e>
 80183b0:	9b02      	ldr	r3, [sp, #8]
 80183b2:	459b      	cmp	fp, r3
 80183b4:	dd13      	ble.n	80183de <__hexnan+0x7a>
 80183b6:	454c      	cmp	r4, r9
 80183b8:	d206      	bcs.n	80183c8 <__hexnan+0x64>
 80183ba:	2d07      	cmp	r5, #7
 80183bc:	dc04      	bgt.n	80183c8 <__hexnan+0x64>
 80183be:	462a      	mov	r2, r5
 80183c0:	4649      	mov	r1, r9
 80183c2:	4620      	mov	r0, r4
 80183c4:	f7ff ffa8 	bl	8018318 <L_shift>
 80183c8:	4544      	cmp	r4, r8
 80183ca:	d944      	bls.n	8018456 <__hexnan+0xf2>
 80183cc:	2300      	movs	r3, #0
 80183ce:	f1a4 0904 	sub.w	r9, r4, #4
 80183d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80183d6:	f8cd b008 	str.w	fp, [sp, #8]
 80183da:	464c      	mov	r4, r9
 80183dc:	461d      	mov	r5, r3
 80183de:	9903      	ldr	r1, [sp, #12]
 80183e0:	e7d7      	b.n	8018392 <__hexnan+0x2e>
 80183e2:	2a29      	cmp	r2, #41	; 0x29
 80183e4:	d14a      	bne.n	801847c <__hexnan+0x118>
 80183e6:	3102      	adds	r1, #2
 80183e8:	f8ca 1000 	str.w	r1, [sl]
 80183ec:	f1bb 0f00 	cmp.w	fp, #0
 80183f0:	d044      	beq.n	801847c <__hexnan+0x118>
 80183f2:	454c      	cmp	r4, r9
 80183f4:	d206      	bcs.n	8018404 <__hexnan+0xa0>
 80183f6:	2d07      	cmp	r5, #7
 80183f8:	dc04      	bgt.n	8018404 <__hexnan+0xa0>
 80183fa:	462a      	mov	r2, r5
 80183fc:	4649      	mov	r1, r9
 80183fe:	4620      	mov	r0, r4
 8018400:	f7ff ff8a 	bl	8018318 <L_shift>
 8018404:	4544      	cmp	r4, r8
 8018406:	d928      	bls.n	801845a <__hexnan+0xf6>
 8018408:	4643      	mov	r3, r8
 801840a:	f854 2b04 	ldr.w	r2, [r4], #4
 801840e:	f843 2b04 	str.w	r2, [r3], #4
 8018412:	42a6      	cmp	r6, r4
 8018414:	d2f9      	bcs.n	801840a <__hexnan+0xa6>
 8018416:	2200      	movs	r2, #0
 8018418:	f843 2b04 	str.w	r2, [r3], #4
 801841c:	429e      	cmp	r6, r3
 801841e:	d2fb      	bcs.n	8018418 <__hexnan+0xb4>
 8018420:	6833      	ldr	r3, [r6, #0]
 8018422:	b91b      	cbnz	r3, 801842c <__hexnan+0xc8>
 8018424:	4546      	cmp	r6, r8
 8018426:	d127      	bne.n	8018478 <__hexnan+0x114>
 8018428:	2301      	movs	r3, #1
 801842a:	6033      	str	r3, [r6, #0]
 801842c:	2005      	movs	r0, #5
 801842e:	e026      	b.n	801847e <__hexnan+0x11a>
 8018430:	3501      	adds	r5, #1
 8018432:	2d08      	cmp	r5, #8
 8018434:	f10b 0b01 	add.w	fp, fp, #1
 8018438:	dd06      	ble.n	8018448 <__hexnan+0xe4>
 801843a:	4544      	cmp	r4, r8
 801843c:	d9cf      	bls.n	80183de <__hexnan+0x7a>
 801843e:	2300      	movs	r3, #0
 8018440:	f844 3c04 	str.w	r3, [r4, #-4]
 8018444:	2501      	movs	r5, #1
 8018446:	3c04      	subs	r4, #4
 8018448:	6822      	ldr	r2, [r4, #0]
 801844a:	f000 000f 	and.w	r0, r0, #15
 801844e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018452:	6020      	str	r0, [r4, #0]
 8018454:	e7c3      	b.n	80183de <__hexnan+0x7a>
 8018456:	2508      	movs	r5, #8
 8018458:	e7c1      	b.n	80183de <__hexnan+0x7a>
 801845a:	9b01      	ldr	r3, [sp, #4]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d0df      	beq.n	8018420 <__hexnan+0xbc>
 8018460:	f04f 32ff 	mov.w	r2, #4294967295
 8018464:	f1c3 0320 	rsb	r3, r3, #32
 8018468:	fa22 f303 	lsr.w	r3, r2, r3
 801846c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018470:	401a      	ands	r2, r3
 8018472:	f847 2c04 	str.w	r2, [r7, #-4]
 8018476:	e7d3      	b.n	8018420 <__hexnan+0xbc>
 8018478:	3e04      	subs	r6, #4
 801847a:	e7d1      	b.n	8018420 <__hexnan+0xbc>
 801847c:	2004      	movs	r0, #4
 801847e:	b007      	add	sp, #28
 8018480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018484 <__locale_ctype_ptr_l>:
 8018484:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018488:	4770      	bx	lr
	...

0801848c <__locale_ctype_ptr>:
 801848c:	4b04      	ldr	r3, [pc, #16]	; (80184a0 <__locale_ctype_ptr+0x14>)
 801848e:	4a05      	ldr	r2, [pc, #20]	; (80184a4 <__locale_ctype_ptr+0x18>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	6a1b      	ldr	r3, [r3, #32]
 8018494:	2b00      	cmp	r3, #0
 8018496:	bf08      	it	eq
 8018498:	4613      	moveq	r3, r2
 801849a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801849e:	4770      	bx	lr
 80184a0:	2000000c 	.word	0x2000000c
 80184a4:	20000070 	.word	0x20000070

080184a8 <__localeconv_l>:
 80184a8:	30f0      	adds	r0, #240	; 0xf0
 80184aa:	4770      	bx	lr

080184ac <_localeconv_r>:
 80184ac:	4b04      	ldr	r3, [pc, #16]	; (80184c0 <_localeconv_r+0x14>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	6a18      	ldr	r0, [r3, #32]
 80184b2:	4b04      	ldr	r3, [pc, #16]	; (80184c4 <_localeconv_r+0x18>)
 80184b4:	2800      	cmp	r0, #0
 80184b6:	bf08      	it	eq
 80184b8:	4618      	moveq	r0, r3
 80184ba:	30f0      	adds	r0, #240	; 0xf0
 80184bc:	4770      	bx	lr
 80184be:	bf00      	nop
 80184c0:	2000000c 	.word	0x2000000c
 80184c4:	20000070 	.word	0x20000070

080184c8 <malloc>:
 80184c8:	4b02      	ldr	r3, [pc, #8]	; (80184d4 <malloc+0xc>)
 80184ca:	4601      	mov	r1, r0
 80184cc:	6818      	ldr	r0, [r3, #0]
 80184ce:	f000 bc71 	b.w	8018db4 <_malloc_r>
 80184d2:	bf00      	nop
 80184d4:	2000000c 	.word	0x2000000c

080184d8 <__ascii_mbtowc>:
 80184d8:	b082      	sub	sp, #8
 80184da:	b901      	cbnz	r1, 80184de <__ascii_mbtowc+0x6>
 80184dc:	a901      	add	r1, sp, #4
 80184de:	b142      	cbz	r2, 80184f2 <__ascii_mbtowc+0x1a>
 80184e0:	b14b      	cbz	r3, 80184f6 <__ascii_mbtowc+0x1e>
 80184e2:	7813      	ldrb	r3, [r2, #0]
 80184e4:	600b      	str	r3, [r1, #0]
 80184e6:	7812      	ldrb	r2, [r2, #0]
 80184e8:	1c10      	adds	r0, r2, #0
 80184ea:	bf18      	it	ne
 80184ec:	2001      	movne	r0, #1
 80184ee:	b002      	add	sp, #8
 80184f0:	4770      	bx	lr
 80184f2:	4610      	mov	r0, r2
 80184f4:	e7fb      	b.n	80184ee <__ascii_mbtowc+0x16>
 80184f6:	f06f 0001 	mvn.w	r0, #1
 80184fa:	e7f8      	b.n	80184ee <__ascii_mbtowc+0x16>

080184fc <_Balloc>:
 80184fc:	b570      	push	{r4, r5, r6, lr}
 80184fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018500:	4604      	mov	r4, r0
 8018502:	460e      	mov	r6, r1
 8018504:	b93d      	cbnz	r5, 8018516 <_Balloc+0x1a>
 8018506:	2010      	movs	r0, #16
 8018508:	f7ff ffde 	bl	80184c8 <malloc>
 801850c:	6260      	str	r0, [r4, #36]	; 0x24
 801850e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018512:	6005      	str	r5, [r0, #0]
 8018514:	60c5      	str	r5, [r0, #12]
 8018516:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018518:	68eb      	ldr	r3, [r5, #12]
 801851a:	b183      	cbz	r3, 801853e <_Balloc+0x42>
 801851c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801851e:	68db      	ldr	r3, [r3, #12]
 8018520:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018524:	b9b8      	cbnz	r0, 8018556 <_Balloc+0x5a>
 8018526:	2101      	movs	r1, #1
 8018528:	fa01 f506 	lsl.w	r5, r1, r6
 801852c:	1d6a      	adds	r2, r5, #5
 801852e:	0092      	lsls	r2, r2, #2
 8018530:	4620      	mov	r0, r4
 8018532:	f000 fbe2 	bl	8018cfa <_calloc_r>
 8018536:	b160      	cbz	r0, 8018552 <_Balloc+0x56>
 8018538:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801853c:	e00e      	b.n	801855c <_Balloc+0x60>
 801853e:	2221      	movs	r2, #33	; 0x21
 8018540:	2104      	movs	r1, #4
 8018542:	4620      	mov	r0, r4
 8018544:	f000 fbd9 	bl	8018cfa <_calloc_r>
 8018548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801854a:	60e8      	str	r0, [r5, #12]
 801854c:	68db      	ldr	r3, [r3, #12]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d1e4      	bne.n	801851c <_Balloc+0x20>
 8018552:	2000      	movs	r0, #0
 8018554:	bd70      	pop	{r4, r5, r6, pc}
 8018556:	6802      	ldr	r2, [r0, #0]
 8018558:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801855c:	2300      	movs	r3, #0
 801855e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018562:	e7f7      	b.n	8018554 <_Balloc+0x58>

08018564 <_Bfree>:
 8018564:	b570      	push	{r4, r5, r6, lr}
 8018566:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018568:	4606      	mov	r6, r0
 801856a:	460d      	mov	r5, r1
 801856c:	b93c      	cbnz	r4, 801857e <_Bfree+0x1a>
 801856e:	2010      	movs	r0, #16
 8018570:	f7ff ffaa 	bl	80184c8 <malloc>
 8018574:	6270      	str	r0, [r6, #36]	; 0x24
 8018576:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801857a:	6004      	str	r4, [r0, #0]
 801857c:	60c4      	str	r4, [r0, #12]
 801857e:	b13d      	cbz	r5, 8018590 <_Bfree+0x2c>
 8018580:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018582:	686a      	ldr	r2, [r5, #4]
 8018584:	68db      	ldr	r3, [r3, #12]
 8018586:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801858a:	6029      	str	r1, [r5, #0]
 801858c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018590:	bd70      	pop	{r4, r5, r6, pc}

08018592 <__multadd>:
 8018592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018596:	690d      	ldr	r5, [r1, #16]
 8018598:	461f      	mov	r7, r3
 801859a:	4606      	mov	r6, r0
 801859c:	460c      	mov	r4, r1
 801859e:	f101 0c14 	add.w	ip, r1, #20
 80185a2:	2300      	movs	r3, #0
 80185a4:	f8dc 0000 	ldr.w	r0, [ip]
 80185a8:	b281      	uxth	r1, r0
 80185aa:	fb02 7101 	mla	r1, r2, r1, r7
 80185ae:	0c0f      	lsrs	r7, r1, #16
 80185b0:	0c00      	lsrs	r0, r0, #16
 80185b2:	fb02 7000 	mla	r0, r2, r0, r7
 80185b6:	b289      	uxth	r1, r1
 80185b8:	3301      	adds	r3, #1
 80185ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80185be:	429d      	cmp	r5, r3
 80185c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80185c4:	f84c 1b04 	str.w	r1, [ip], #4
 80185c8:	dcec      	bgt.n	80185a4 <__multadd+0x12>
 80185ca:	b1d7      	cbz	r7, 8018602 <__multadd+0x70>
 80185cc:	68a3      	ldr	r3, [r4, #8]
 80185ce:	42ab      	cmp	r3, r5
 80185d0:	dc12      	bgt.n	80185f8 <__multadd+0x66>
 80185d2:	6861      	ldr	r1, [r4, #4]
 80185d4:	4630      	mov	r0, r6
 80185d6:	3101      	adds	r1, #1
 80185d8:	f7ff ff90 	bl	80184fc <_Balloc>
 80185dc:	6922      	ldr	r2, [r4, #16]
 80185de:	3202      	adds	r2, #2
 80185e0:	f104 010c 	add.w	r1, r4, #12
 80185e4:	4680      	mov	r8, r0
 80185e6:	0092      	lsls	r2, r2, #2
 80185e8:	300c      	adds	r0, #12
 80185ea:	f7fd f831 	bl	8015650 <memcpy>
 80185ee:	4621      	mov	r1, r4
 80185f0:	4630      	mov	r0, r6
 80185f2:	f7ff ffb7 	bl	8018564 <_Bfree>
 80185f6:	4644      	mov	r4, r8
 80185f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80185fc:	3501      	adds	r5, #1
 80185fe:	615f      	str	r7, [r3, #20]
 8018600:	6125      	str	r5, [r4, #16]
 8018602:	4620      	mov	r0, r4
 8018604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018608 <__s2b>:
 8018608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801860c:	460c      	mov	r4, r1
 801860e:	4615      	mov	r5, r2
 8018610:	461f      	mov	r7, r3
 8018612:	2209      	movs	r2, #9
 8018614:	3308      	adds	r3, #8
 8018616:	4606      	mov	r6, r0
 8018618:	fb93 f3f2 	sdiv	r3, r3, r2
 801861c:	2100      	movs	r1, #0
 801861e:	2201      	movs	r2, #1
 8018620:	429a      	cmp	r2, r3
 8018622:	db20      	blt.n	8018666 <__s2b+0x5e>
 8018624:	4630      	mov	r0, r6
 8018626:	f7ff ff69 	bl	80184fc <_Balloc>
 801862a:	9b08      	ldr	r3, [sp, #32]
 801862c:	6143      	str	r3, [r0, #20]
 801862e:	2d09      	cmp	r5, #9
 8018630:	f04f 0301 	mov.w	r3, #1
 8018634:	6103      	str	r3, [r0, #16]
 8018636:	dd19      	ble.n	801866c <__s2b+0x64>
 8018638:	f104 0809 	add.w	r8, r4, #9
 801863c:	46c1      	mov	r9, r8
 801863e:	442c      	add	r4, r5
 8018640:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018644:	4601      	mov	r1, r0
 8018646:	3b30      	subs	r3, #48	; 0x30
 8018648:	220a      	movs	r2, #10
 801864a:	4630      	mov	r0, r6
 801864c:	f7ff ffa1 	bl	8018592 <__multadd>
 8018650:	45a1      	cmp	r9, r4
 8018652:	d1f5      	bne.n	8018640 <__s2b+0x38>
 8018654:	eb08 0405 	add.w	r4, r8, r5
 8018658:	3c08      	subs	r4, #8
 801865a:	1b2d      	subs	r5, r5, r4
 801865c:	1963      	adds	r3, r4, r5
 801865e:	42bb      	cmp	r3, r7
 8018660:	db07      	blt.n	8018672 <__s2b+0x6a>
 8018662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018666:	0052      	lsls	r2, r2, #1
 8018668:	3101      	adds	r1, #1
 801866a:	e7d9      	b.n	8018620 <__s2b+0x18>
 801866c:	340a      	adds	r4, #10
 801866e:	2509      	movs	r5, #9
 8018670:	e7f3      	b.n	801865a <__s2b+0x52>
 8018672:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018676:	4601      	mov	r1, r0
 8018678:	3b30      	subs	r3, #48	; 0x30
 801867a:	220a      	movs	r2, #10
 801867c:	4630      	mov	r0, r6
 801867e:	f7ff ff88 	bl	8018592 <__multadd>
 8018682:	e7eb      	b.n	801865c <__s2b+0x54>

08018684 <__hi0bits>:
 8018684:	0c02      	lsrs	r2, r0, #16
 8018686:	0412      	lsls	r2, r2, #16
 8018688:	4603      	mov	r3, r0
 801868a:	b9b2      	cbnz	r2, 80186ba <__hi0bits+0x36>
 801868c:	0403      	lsls	r3, r0, #16
 801868e:	2010      	movs	r0, #16
 8018690:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018694:	bf04      	itt	eq
 8018696:	021b      	lsleq	r3, r3, #8
 8018698:	3008      	addeq	r0, #8
 801869a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801869e:	bf04      	itt	eq
 80186a0:	011b      	lsleq	r3, r3, #4
 80186a2:	3004      	addeq	r0, #4
 80186a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80186a8:	bf04      	itt	eq
 80186aa:	009b      	lsleq	r3, r3, #2
 80186ac:	3002      	addeq	r0, #2
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	db06      	blt.n	80186c0 <__hi0bits+0x3c>
 80186b2:	005b      	lsls	r3, r3, #1
 80186b4:	d503      	bpl.n	80186be <__hi0bits+0x3a>
 80186b6:	3001      	adds	r0, #1
 80186b8:	4770      	bx	lr
 80186ba:	2000      	movs	r0, #0
 80186bc:	e7e8      	b.n	8018690 <__hi0bits+0xc>
 80186be:	2020      	movs	r0, #32
 80186c0:	4770      	bx	lr

080186c2 <__lo0bits>:
 80186c2:	6803      	ldr	r3, [r0, #0]
 80186c4:	f013 0207 	ands.w	r2, r3, #7
 80186c8:	4601      	mov	r1, r0
 80186ca:	d00b      	beq.n	80186e4 <__lo0bits+0x22>
 80186cc:	07da      	lsls	r2, r3, #31
 80186ce:	d423      	bmi.n	8018718 <__lo0bits+0x56>
 80186d0:	0798      	lsls	r0, r3, #30
 80186d2:	bf49      	itett	mi
 80186d4:	085b      	lsrmi	r3, r3, #1
 80186d6:	089b      	lsrpl	r3, r3, #2
 80186d8:	2001      	movmi	r0, #1
 80186da:	600b      	strmi	r3, [r1, #0]
 80186dc:	bf5c      	itt	pl
 80186de:	600b      	strpl	r3, [r1, #0]
 80186e0:	2002      	movpl	r0, #2
 80186e2:	4770      	bx	lr
 80186e4:	b298      	uxth	r0, r3
 80186e6:	b9a8      	cbnz	r0, 8018714 <__lo0bits+0x52>
 80186e8:	0c1b      	lsrs	r3, r3, #16
 80186ea:	2010      	movs	r0, #16
 80186ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80186f0:	bf04      	itt	eq
 80186f2:	0a1b      	lsreq	r3, r3, #8
 80186f4:	3008      	addeq	r0, #8
 80186f6:	071a      	lsls	r2, r3, #28
 80186f8:	bf04      	itt	eq
 80186fa:	091b      	lsreq	r3, r3, #4
 80186fc:	3004      	addeq	r0, #4
 80186fe:	079a      	lsls	r2, r3, #30
 8018700:	bf04      	itt	eq
 8018702:	089b      	lsreq	r3, r3, #2
 8018704:	3002      	addeq	r0, #2
 8018706:	07da      	lsls	r2, r3, #31
 8018708:	d402      	bmi.n	8018710 <__lo0bits+0x4e>
 801870a:	085b      	lsrs	r3, r3, #1
 801870c:	d006      	beq.n	801871c <__lo0bits+0x5a>
 801870e:	3001      	adds	r0, #1
 8018710:	600b      	str	r3, [r1, #0]
 8018712:	4770      	bx	lr
 8018714:	4610      	mov	r0, r2
 8018716:	e7e9      	b.n	80186ec <__lo0bits+0x2a>
 8018718:	2000      	movs	r0, #0
 801871a:	4770      	bx	lr
 801871c:	2020      	movs	r0, #32
 801871e:	4770      	bx	lr

08018720 <__i2b>:
 8018720:	b510      	push	{r4, lr}
 8018722:	460c      	mov	r4, r1
 8018724:	2101      	movs	r1, #1
 8018726:	f7ff fee9 	bl	80184fc <_Balloc>
 801872a:	2201      	movs	r2, #1
 801872c:	6144      	str	r4, [r0, #20]
 801872e:	6102      	str	r2, [r0, #16]
 8018730:	bd10      	pop	{r4, pc}

08018732 <__multiply>:
 8018732:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018736:	4614      	mov	r4, r2
 8018738:	690a      	ldr	r2, [r1, #16]
 801873a:	6923      	ldr	r3, [r4, #16]
 801873c:	429a      	cmp	r2, r3
 801873e:	bfb8      	it	lt
 8018740:	460b      	movlt	r3, r1
 8018742:	4688      	mov	r8, r1
 8018744:	bfbc      	itt	lt
 8018746:	46a0      	movlt	r8, r4
 8018748:	461c      	movlt	r4, r3
 801874a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801874e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018752:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018756:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801875a:	eb07 0609 	add.w	r6, r7, r9
 801875e:	42b3      	cmp	r3, r6
 8018760:	bfb8      	it	lt
 8018762:	3101      	addlt	r1, #1
 8018764:	f7ff feca 	bl	80184fc <_Balloc>
 8018768:	f100 0514 	add.w	r5, r0, #20
 801876c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018770:	462b      	mov	r3, r5
 8018772:	2200      	movs	r2, #0
 8018774:	4573      	cmp	r3, lr
 8018776:	d316      	bcc.n	80187a6 <__multiply+0x74>
 8018778:	f104 0214 	add.w	r2, r4, #20
 801877c:	f108 0114 	add.w	r1, r8, #20
 8018780:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018784:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018788:	9300      	str	r3, [sp, #0]
 801878a:	9b00      	ldr	r3, [sp, #0]
 801878c:	9201      	str	r2, [sp, #4]
 801878e:	4293      	cmp	r3, r2
 8018790:	d80c      	bhi.n	80187ac <__multiply+0x7a>
 8018792:	2e00      	cmp	r6, #0
 8018794:	dd03      	ble.n	801879e <__multiply+0x6c>
 8018796:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801879a:	2b00      	cmp	r3, #0
 801879c:	d05d      	beq.n	801885a <__multiply+0x128>
 801879e:	6106      	str	r6, [r0, #16]
 80187a0:	b003      	add	sp, #12
 80187a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187a6:	f843 2b04 	str.w	r2, [r3], #4
 80187aa:	e7e3      	b.n	8018774 <__multiply+0x42>
 80187ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80187b0:	f1bb 0f00 	cmp.w	fp, #0
 80187b4:	d023      	beq.n	80187fe <__multiply+0xcc>
 80187b6:	4689      	mov	r9, r1
 80187b8:	46ac      	mov	ip, r5
 80187ba:	f04f 0800 	mov.w	r8, #0
 80187be:	f859 4b04 	ldr.w	r4, [r9], #4
 80187c2:	f8dc a000 	ldr.w	sl, [ip]
 80187c6:	b2a3      	uxth	r3, r4
 80187c8:	fa1f fa8a 	uxth.w	sl, sl
 80187cc:	fb0b a303 	mla	r3, fp, r3, sl
 80187d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80187d4:	f8dc 4000 	ldr.w	r4, [ip]
 80187d8:	4443      	add	r3, r8
 80187da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80187de:	fb0b 840a 	mla	r4, fp, sl, r8
 80187e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80187e6:	46e2      	mov	sl, ip
 80187e8:	b29b      	uxth	r3, r3
 80187ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80187ee:	454f      	cmp	r7, r9
 80187f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80187f4:	f84a 3b04 	str.w	r3, [sl], #4
 80187f8:	d82b      	bhi.n	8018852 <__multiply+0x120>
 80187fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80187fe:	9b01      	ldr	r3, [sp, #4]
 8018800:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018804:	3204      	adds	r2, #4
 8018806:	f1ba 0f00 	cmp.w	sl, #0
 801880a:	d020      	beq.n	801884e <__multiply+0x11c>
 801880c:	682b      	ldr	r3, [r5, #0]
 801880e:	4689      	mov	r9, r1
 8018810:	46a8      	mov	r8, r5
 8018812:	f04f 0b00 	mov.w	fp, #0
 8018816:	f8b9 c000 	ldrh.w	ip, [r9]
 801881a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801881e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018822:	445c      	add	r4, fp
 8018824:	46c4      	mov	ip, r8
 8018826:	b29b      	uxth	r3, r3
 8018828:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801882c:	f84c 3b04 	str.w	r3, [ip], #4
 8018830:	f859 3b04 	ldr.w	r3, [r9], #4
 8018834:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018838:	0c1b      	lsrs	r3, r3, #16
 801883a:	fb0a b303 	mla	r3, sl, r3, fp
 801883e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018842:	454f      	cmp	r7, r9
 8018844:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018848:	d805      	bhi.n	8018856 <__multiply+0x124>
 801884a:	f8c8 3004 	str.w	r3, [r8, #4]
 801884e:	3504      	adds	r5, #4
 8018850:	e79b      	b.n	801878a <__multiply+0x58>
 8018852:	46d4      	mov	ip, sl
 8018854:	e7b3      	b.n	80187be <__multiply+0x8c>
 8018856:	46e0      	mov	r8, ip
 8018858:	e7dd      	b.n	8018816 <__multiply+0xe4>
 801885a:	3e01      	subs	r6, #1
 801885c:	e799      	b.n	8018792 <__multiply+0x60>
	...

08018860 <__pow5mult>:
 8018860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018864:	4615      	mov	r5, r2
 8018866:	f012 0203 	ands.w	r2, r2, #3
 801886a:	4606      	mov	r6, r0
 801886c:	460f      	mov	r7, r1
 801886e:	d007      	beq.n	8018880 <__pow5mult+0x20>
 8018870:	3a01      	subs	r2, #1
 8018872:	4c21      	ldr	r4, [pc, #132]	; (80188f8 <__pow5mult+0x98>)
 8018874:	2300      	movs	r3, #0
 8018876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801887a:	f7ff fe8a 	bl	8018592 <__multadd>
 801887e:	4607      	mov	r7, r0
 8018880:	10ad      	asrs	r5, r5, #2
 8018882:	d035      	beq.n	80188f0 <__pow5mult+0x90>
 8018884:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018886:	b93c      	cbnz	r4, 8018898 <__pow5mult+0x38>
 8018888:	2010      	movs	r0, #16
 801888a:	f7ff fe1d 	bl	80184c8 <malloc>
 801888e:	6270      	str	r0, [r6, #36]	; 0x24
 8018890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018894:	6004      	str	r4, [r0, #0]
 8018896:	60c4      	str	r4, [r0, #12]
 8018898:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801889c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80188a0:	b94c      	cbnz	r4, 80188b6 <__pow5mult+0x56>
 80188a2:	f240 2171 	movw	r1, #625	; 0x271
 80188a6:	4630      	mov	r0, r6
 80188a8:	f7ff ff3a 	bl	8018720 <__i2b>
 80188ac:	2300      	movs	r3, #0
 80188ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80188b2:	4604      	mov	r4, r0
 80188b4:	6003      	str	r3, [r0, #0]
 80188b6:	f04f 0800 	mov.w	r8, #0
 80188ba:	07eb      	lsls	r3, r5, #31
 80188bc:	d50a      	bpl.n	80188d4 <__pow5mult+0x74>
 80188be:	4639      	mov	r1, r7
 80188c0:	4622      	mov	r2, r4
 80188c2:	4630      	mov	r0, r6
 80188c4:	f7ff ff35 	bl	8018732 <__multiply>
 80188c8:	4639      	mov	r1, r7
 80188ca:	4681      	mov	r9, r0
 80188cc:	4630      	mov	r0, r6
 80188ce:	f7ff fe49 	bl	8018564 <_Bfree>
 80188d2:	464f      	mov	r7, r9
 80188d4:	106d      	asrs	r5, r5, #1
 80188d6:	d00b      	beq.n	80188f0 <__pow5mult+0x90>
 80188d8:	6820      	ldr	r0, [r4, #0]
 80188da:	b938      	cbnz	r0, 80188ec <__pow5mult+0x8c>
 80188dc:	4622      	mov	r2, r4
 80188de:	4621      	mov	r1, r4
 80188e0:	4630      	mov	r0, r6
 80188e2:	f7ff ff26 	bl	8018732 <__multiply>
 80188e6:	6020      	str	r0, [r4, #0]
 80188e8:	f8c0 8000 	str.w	r8, [r0]
 80188ec:	4604      	mov	r4, r0
 80188ee:	e7e4      	b.n	80188ba <__pow5mult+0x5a>
 80188f0:	4638      	mov	r0, r7
 80188f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188f6:	bf00      	nop
 80188f8:	0801a4b8 	.word	0x0801a4b8

080188fc <__lshift>:
 80188fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018900:	460c      	mov	r4, r1
 8018902:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018906:	6923      	ldr	r3, [r4, #16]
 8018908:	6849      	ldr	r1, [r1, #4]
 801890a:	eb0a 0903 	add.w	r9, sl, r3
 801890e:	68a3      	ldr	r3, [r4, #8]
 8018910:	4607      	mov	r7, r0
 8018912:	4616      	mov	r6, r2
 8018914:	f109 0501 	add.w	r5, r9, #1
 8018918:	42ab      	cmp	r3, r5
 801891a:	db32      	blt.n	8018982 <__lshift+0x86>
 801891c:	4638      	mov	r0, r7
 801891e:	f7ff fded 	bl	80184fc <_Balloc>
 8018922:	2300      	movs	r3, #0
 8018924:	4680      	mov	r8, r0
 8018926:	f100 0114 	add.w	r1, r0, #20
 801892a:	461a      	mov	r2, r3
 801892c:	4553      	cmp	r3, sl
 801892e:	db2b      	blt.n	8018988 <__lshift+0x8c>
 8018930:	6920      	ldr	r0, [r4, #16]
 8018932:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018936:	f104 0314 	add.w	r3, r4, #20
 801893a:	f016 021f 	ands.w	r2, r6, #31
 801893e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018942:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018946:	d025      	beq.n	8018994 <__lshift+0x98>
 8018948:	f1c2 0e20 	rsb	lr, r2, #32
 801894c:	2000      	movs	r0, #0
 801894e:	681e      	ldr	r6, [r3, #0]
 8018950:	468a      	mov	sl, r1
 8018952:	4096      	lsls	r6, r2
 8018954:	4330      	orrs	r0, r6
 8018956:	f84a 0b04 	str.w	r0, [sl], #4
 801895a:	f853 0b04 	ldr.w	r0, [r3], #4
 801895e:	459c      	cmp	ip, r3
 8018960:	fa20 f00e 	lsr.w	r0, r0, lr
 8018964:	d814      	bhi.n	8018990 <__lshift+0x94>
 8018966:	6048      	str	r0, [r1, #4]
 8018968:	b108      	cbz	r0, 801896e <__lshift+0x72>
 801896a:	f109 0502 	add.w	r5, r9, #2
 801896e:	3d01      	subs	r5, #1
 8018970:	4638      	mov	r0, r7
 8018972:	f8c8 5010 	str.w	r5, [r8, #16]
 8018976:	4621      	mov	r1, r4
 8018978:	f7ff fdf4 	bl	8018564 <_Bfree>
 801897c:	4640      	mov	r0, r8
 801897e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018982:	3101      	adds	r1, #1
 8018984:	005b      	lsls	r3, r3, #1
 8018986:	e7c7      	b.n	8018918 <__lshift+0x1c>
 8018988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801898c:	3301      	adds	r3, #1
 801898e:	e7cd      	b.n	801892c <__lshift+0x30>
 8018990:	4651      	mov	r1, sl
 8018992:	e7dc      	b.n	801894e <__lshift+0x52>
 8018994:	3904      	subs	r1, #4
 8018996:	f853 2b04 	ldr.w	r2, [r3], #4
 801899a:	f841 2f04 	str.w	r2, [r1, #4]!
 801899e:	459c      	cmp	ip, r3
 80189a0:	d8f9      	bhi.n	8018996 <__lshift+0x9a>
 80189a2:	e7e4      	b.n	801896e <__lshift+0x72>

080189a4 <__mcmp>:
 80189a4:	6903      	ldr	r3, [r0, #16]
 80189a6:	690a      	ldr	r2, [r1, #16]
 80189a8:	1a9b      	subs	r3, r3, r2
 80189aa:	b530      	push	{r4, r5, lr}
 80189ac:	d10c      	bne.n	80189c8 <__mcmp+0x24>
 80189ae:	0092      	lsls	r2, r2, #2
 80189b0:	3014      	adds	r0, #20
 80189b2:	3114      	adds	r1, #20
 80189b4:	1884      	adds	r4, r0, r2
 80189b6:	4411      	add	r1, r2
 80189b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80189bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80189c0:	4295      	cmp	r5, r2
 80189c2:	d003      	beq.n	80189cc <__mcmp+0x28>
 80189c4:	d305      	bcc.n	80189d2 <__mcmp+0x2e>
 80189c6:	2301      	movs	r3, #1
 80189c8:	4618      	mov	r0, r3
 80189ca:	bd30      	pop	{r4, r5, pc}
 80189cc:	42a0      	cmp	r0, r4
 80189ce:	d3f3      	bcc.n	80189b8 <__mcmp+0x14>
 80189d0:	e7fa      	b.n	80189c8 <__mcmp+0x24>
 80189d2:	f04f 33ff 	mov.w	r3, #4294967295
 80189d6:	e7f7      	b.n	80189c8 <__mcmp+0x24>

080189d8 <__mdiff>:
 80189d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189dc:	460d      	mov	r5, r1
 80189de:	4607      	mov	r7, r0
 80189e0:	4611      	mov	r1, r2
 80189e2:	4628      	mov	r0, r5
 80189e4:	4614      	mov	r4, r2
 80189e6:	f7ff ffdd 	bl	80189a4 <__mcmp>
 80189ea:	1e06      	subs	r6, r0, #0
 80189ec:	d108      	bne.n	8018a00 <__mdiff+0x28>
 80189ee:	4631      	mov	r1, r6
 80189f0:	4638      	mov	r0, r7
 80189f2:	f7ff fd83 	bl	80184fc <_Balloc>
 80189f6:	2301      	movs	r3, #1
 80189f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80189fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a00:	bfa4      	itt	ge
 8018a02:	4623      	movge	r3, r4
 8018a04:	462c      	movge	r4, r5
 8018a06:	4638      	mov	r0, r7
 8018a08:	6861      	ldr	r1, [r4, #4]
 8018a0a:	bfa6      	itte	ge
 8018a0c:	461d      	movge	r5, r3
 8018a0e:	2600      	movge	r6, #0
 8018a10:	2601      	movlt	r6, #1
 8018a12:	f7ff fd73 	bl	80184fc <_Balloc>
 8018a16:	692b      	ldr	r3, [r5, #16]
 8018a18:	60c6      	str	r6, [r0, #12]
 8018a1a:	6926      	ldr	r6, [r4, #16]
 8018a1c:	f105 0914 	add.w	r9, r5, #20
 8018a20:	f104 0214 	add.w	r2, r4, #20
 8018a24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018a28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018a2c:	f100 0514 	add.w	r5, r0, #20
 8018a30:	f04f 0e00 	mov.w	lr, #0
 8018a34:	f852 ab04 	ldr.w	sl, [r2], #4
 8018a38:	f859 4b04 	ldr.w	r4, [r9], #4
 8018a3c:	fa1e f18a 	uxtah	r1, lr, sl
 8018a40:	b2a3      	uxth	r3, r4
 8018a42:	1ac9      	subs	r1, r1, r3
 8018a44:	0c23      	lsrs	r3, r4, #16
 8018a46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018a4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018a4e:	b289      	uxth	r1, r1
 8018a50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018a54:	45c8      	cmp	r8, r9
 8018a56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018a5a:	4694      	mov	ip, r2
 8018a5c:	f845 3b04 	str.w	r3, [r5], #4
 8018a60:	d8e8      	bhi.n	8018a34 <__mdiff+0x5c>
 8018a62:	45bc      	cmp	ip, r7
 8018a64:	d304      	bcc.n	8018a70 <__mdiff+0x98>
 8018a66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018a6a:	b183      	cbz	r3, 8018a8e <__mdiff+0xb6>
 8018a6c:	6106      	str	r6, [r0, #16]
 8018a6e:	e7c5      	b.n	80189fc <__mdiff+0x24>
 8018a70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018a74:	fa1e f381 	uxtah	r3, lr, r1
 8018a78:	141a      	asrs	r2, r3, #16
 8018a7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018a7e:	b29b      	uxth	r3, r3
 8018a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018a84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018a88:	f845 3b04 	str.w	r3, [r5], #4
 8018a8c:	e7e9      	b.n	8018a62 <__mdiff+0x8a>
 8018a8e:	3e01      	subs	r6, #1
 8018a90:	e7e9      	b.n	8018a66 <__mdiff+0x8e>
	...

08018a94 <__ulp>:
 8018a94:	4b12      	ldr	r3, [pc, #72]	; (8018ae0 <__ulp+0x4c>)
 8018a96:	ee10 2a90 	vmov	r2, s1
 8018a9a:	401a      	ands	r2, r3
 8018a9c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	dd04      	ble.n	8018aae <__ulp+0x1a>
 8018aa4:	2000      	movs	r0, #0
 8018aa6:	4619      	mov	r1, r3
 8018aa8:	ec41 0b10 	vmov	d0, r0, r1
 8018aac:	4770      	bx	lr
 8018aae:	425b      	negs	r3, r3
 8018ab0:	151b      	asrs	r3, r3, #20
 8018ab2:	2b13      	cmp	r3, #19
 8018ab4:	f04f 0000 	mov.w	r0, #0
 8018ab8:	f04f 0100 	mov.w	r1, #0
 8018abc:	dc04      	bgt.n	8018ac8 <__ulp+0x34>
 8018abe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018ac2:	fa42 f103 	asr.w	r1, r2, r3
 8018ac6:	e7ef      	b.n	8018aa8 <__ulp+0x14>
 8018ac8:	3b14      	subs	r3, #20
 8018aca:	2b1e      	cmp	r3, #30
 8018acc:	f04f 0201 	mov.w	r2, #1
 8018ad0:	bfda      	itte	le
 8018ad2:	f1c3 031f 	rsble	r3, r3, #31
 8018ad6:	fa02 f303 	lslle.w	r3, r2, r3
 8018ada:	4613      	movgt	r3, r2
 8018adc:	4618      	mov	r0, r3
 8018ade:	e7e3      	b.n	8018aa8 <__ulp+0x14>
 8018ae0:	7ff00000 	.word	0x7ff00000

08018ae4 <__b2d>:
 8018ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ae6:	6905      	ldr	r5, [r0, #16]
 8018ae8:	f100 0714 	add.w	r7, r0, #20
 8018aec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018af0:	1f2e      	subs	r6, r5, #4
 8018af2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018af6:	4620      	mov	r0, r4
 8018af8:	f7ff fdc4 	bl	8018684 <__hi0bits>
 8018afc:	f1c0 0320 	rsb	r3, r0, #32
 8018b00:	280a      	cmp	r0, #10
 8018b02:	600b      	str	r3, [r1, #0]
 8018b04:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018b7c <__b2d+0x98>
 8018b08:	dc14      	bgt.n	8018b34 <__b2d+0x50>
 8018b0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8018b0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018b12:	42b7      	cmp	r7, r6
 8018b14:	ea41 030c 	orr.w	r3, r1, ip
 8018b18:	bf34      	ite	cc
 8018b1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018b1e:	2100      	movcs	r1, #0
 8018b20:	3015      	adds	r0, #21
 8018b22:	fa04 f000 	lsl.w	r0, r4, r0
 8018b26:	fa21 f10e 	lsr.w	r1, r1, lr
 8018b2a:	ea40 0201 	orr.w	r2, r0, r1
 8018b2e:	ec43 2b10 	vmov	d0, r2, r3
 8018b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b34:	42b7      	cmp	r7, r6
 8018b36:	bf3a      	itte	cc
 8018b38:	f1a5 0608 	subcc.w	r6, r5, #8
 8018b3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018b40:	2100      	movcs	r1, #0
 8018b42:	380b      	subs	r0, #11
 8018b44:	d015      	beq.n	8018b72 <__b2d+0x8e>
 8018b46:	4084      	lsls	r4, r0
 8018b48:	f1c0 0520 	rsb	r5, r0, #32
 8018b4c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018b50:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018b54:	42be      	cmp	r6, r7
 8018b56:	fa21 fc05 	lsr.w	ip, r1, r5
 8018b5a:	ea44 030c 	orr.w	r3, r4, ip
 8018b5e:	bf8c      	ite	hi
 8018b60:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018b64:	2400      	movls	r4, #0
 8018b66:	fa01 f000 	lsl.w	r0, r1, r0
 8018b6a:	40ec      	lsrs	r4, r5
 8018b6c:	ea40 0204 	orr.w	r2, r0, r4
 8018b70:	e7dd      	b.n	8018b2e <__b2d+0x4a>
 8018b72:	ea44 030c 	orr.w	r3, r4, ip
 8018b76:	460a      	mov	r2, r1
 8018b78:	e7d9      	b.n	8018b2e <__b2d+0x4a>
 8018b7a:	bf00      	nop
 8018b7c:	3ff00000 	.word	0x3ff00000

08018b80 <__d2b>:
 8018b80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018b84:	460e      	mov	r6, r1
 8018b86:	2101      	movs	r1, #1
 8018b88:	ec59 8b10 	vmov	r8, r9, d0
 8018b8c:	4615      	mov	r5, r2
 8018b8e:	f7ff fcb5 	bl	80184fc <_Balloc>
 8018b92:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018b96:	4607      	mov	r7, r0
 8018b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018b9c:	bb34      	cbnz	r4, 8018bec <__d2b+0x6c>
 8018b9e:	9301      	str	r3, [sp, #4]
 8018ba0:	f1b8 0300 	subs.w	r3, r8, #0
 8018ba4:	d027      	beq.n	8018bf6 <__d2b+0x76>
 8018ba6:	a802      	add	r0, sp, #8
 8018ba8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018bac:	f7ff fd89 	bl	80186c2 <__lo0bits>
 8018bb0:	9900      	ldr	r1, [sp, #0]
 8018bb2:	b1f0      	cbz	r0, 8018bf2 <__d2b+0x72>
 8018bb4:	9a01      	ldr	r2, [sp, #4]
 8018bb6:	f1c0 0320 	rsb	r3, r0, #32
 8018bba:	fa02 f303 	lsl.w	r3, r2, r3
 8018bbe:	430b      	orrs	r3, r1
 8018bc0:	40c2      	lsrs	r2, r0
 8018bc2:	617b      	str	r3, [r7, #20]
 8018bc4:	9201      	str	r2, [sp, #4]
 8018bc6:	9b01      	ldr	r3, [sp, #4]
 8018bc8:	61bb      	str	r3, [r7, #24]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	bf14      	ite	ne
 8018bce:	2102      	movne	r1, #2
 8018bd0:	2101      	moveq	r1, #1
 8018bd2:	6139      	str	r1, [r7, #16]
 8018bd4:	b1c4      	cbz	r4, 8018c08 <__d2b+0x88>
 8018bd6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018bda:	4404      	add	r4, r0
 8018bdc:	6034      	str	r4, [r6, #0]
 8018bde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018be2:	6028      	str	r0, [r5, #0]
 8018be4:	4638      	mov	r0, r7
 8018be6:	b003      	add	sp, #12
 8018be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018bf0:	e7d5      	b.n	8018b9e <__d2b+0x1e>
 8018bf2:	6179      	str	r1, [r7, #20]
 8018bf4:	e7e7      	b.n	8018bc6 <__d2b+0x46>
 8018bf6:	a801      	add	r0, sp, #4
 8018bf8:	f7ff fd63 	bl	80186c2 <__lo0bits>
 8018bfc:	9b01      	ldr	r3, [sp, #4]
 8018bfe:	617b      	str	r3, [r7, #20]
 8018c00:	2101      	movs	r1, #1
 8018c02:	6139      	str	r1, [r7, #16]
 8018c04:	3020      	adds	r0, #32
 8018c06:	e7e5      	b.n	8018bd4 <__d2b+0x54>
 8018c08:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018c0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018c10:	6030      	str	r0, [r6, #0]
 8018c12:	6918      	ldr	r0, [r3, #16]
 8018c14:	f7ff fd36 	bl	8018684 <__hi0bits>
 8018c18:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018c1c:	e7e1      	b.n	8018be2 <__d2b+0x62>

08018c1e <__ratio>:
 8018c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c22:	4688      	mov	r8, r1
 8018c24:	4669      	mov	r1, sp
 8018c26:	4681      	mov	r9, r0
 8018c28:	f7ff ff5c 	bl	8018ae4 <__b2d>
 8018c2c:	a901      	add	r1, sp, #4
 8018c2e:	4640      	mov	r0, r8
 8018c30:	ec57 6b10 	vmov	r6, r7, d0
 8018c34:	f7ff ff56 	bl	8018ae4 <__b2d>
 8018c38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018c3c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018c40:	eba3 0c02 	sub.w	ip, r3, r2
 8018c44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018c48:	1a9b      	subs	r3, r3, r2
 8018c4a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018c4e:	ec5b ab10 	vmov	sl, fp, d0
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	bfce      	itee	gt
 8018c56:	463a      	movgt	r2, r7
 8018c58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018c5c:	465a      	movle	r2, fp
 8018c5e:	4659      	mov	r1, fp
 8018c60:	463d      	mov	r5, r7
 8018c62:	bfd4      	ite	le
 8018c64:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018c68:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018c6c:	4630      	mov	r0, r6
 8018c6e:	ee10 2a10 	vmov	r2, s0
 8018c72:	460b      	mov	r3, r1
 8018c74:	4629      	mov	r1, r5
 8018c76:	f7e7 fe01 	bl	800087c <__aeabi_ddiv>
 8018c7a:	ec41 0b10 	vmov	d0, r0, r1
 8018c7e:	b003      	add	sp, #12
 8018c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c84 <__copybits>:
 8018c84:	3901      	subs	r1, #1
 8018c86:	b510      	push	{r4, lr}
 8018c88:	1149      	asrs	r1, r1, #5
 8018c8a:	6914      	ldr	r4, [r2, #16]
 8018c8c:	3101      	adds	r1, #1
 8018c8e:	f102 0314 	add.w	r3, r2, #20
 8018c92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018c96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018c9a:	42a3      	cmp	r3, r4
 8018c9c:	4602      	mov	r2, r0
 8018c9e:	d303      	bcc.n	8018ca8 <__copybits+0x24>
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	428a      	cmp	r2, r1
 8018ca4:	d305      	bcc.n	8018cb2 <__copybits+0x2e>
 8018ca6:	bd10      	pop	{r4, pc}
 8018ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cac:	f840 2b04 	str.w	r2, [r0], #4
 8018cb0:	e7f3      	b.n	8018c9a <__copybits+0x16>
 8018cb2:	f842 3b04 	str.w	r3, [r2], #4
 8018cb6:	e7f4      	b.n	8018ca2 <__copybits+0x1e>

08018cb8 <__any_on>:
 8018cb8:	f100 0214 	add.w	r2, r0, #20
 8018cbc:	6900      	ldr	r0, [r0, #16]
 8018cbe:	114b      	asrs	r3, r1, #5
 8018cc0:	4298      	cmp	r0, r3
 8018cc2:	b510      	push	{r4, lr}
 8018cc4:	db11      	blt.n	8018cea <__any_on+0x32>
 8018cc6:	dd0a      	ble.n	8018cde <__any_on+0x26>
 8018cc8:	f011 011f 	ands.w	r1, r1, #31
 8018ccc:	d007      	beq.n	8018cde <__any_on+0x26>
 8018cce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018cd2:	fa24 f001 	lsr.w	r0, r4, r1
 8018cd6:	fa00 f101 	lsl.w	r1, r0, r1
 8018cda:	428c      	cmp	r4, r1
 8018cdc:	d10b      	bne.n	8018cf6 <__any_on+0x3e>
 8018cde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018ce2:	4293      	cmp	r3, r2
 8018ce4:	d803      	bhi.n	8018cee <__any_on+0x36>
 8018ce6:	2000      	movs	r0, #0
 8018ce8:	bd10      	pop	{r4, pc}
 8018cea:	4603      	mov	r3, r0
 8018cec:	e7f7      	b.n	8018cde <__any_on+0x26>
 8018cee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018cf2:	2900      	cmp	r1, #0
 8018cf4:	d0f5      	beq.n	8018ce2 <__any_on+0x2a>
 8018cf6:	2001      	movs	r0, #1
 8018cf8:	e7f6      	b.n	8018ce8 <__any_on+0x30>

08018cfa <_calloc_r>:
 8018cfa:	b538      	push	{r3, r4, r5, lr}
 8018cfc:	fb02 f401 	mul.w	r4, r2, r1
 8018d00:	4621      	mov	r1, r4
 8018d02:	f000 f857 	bl	8018db4 <_malloc_r>
 8018d06:	4605      	mov	r5, r0
 8018d08:	b118      	cbz	r0, 8018d12 <_calloc_r+0x18>
 8018d0a:	4622      	mov	r2, r4
 8018d0c:	2100      	movs	r1, #0
 8018d0e:	f7fc fcaa 	bl	8015666 <memset>
 8018d12:	4628      	mov	r0, r5
 8018d14:	bd38      	pop	{r3, r4, r5, pc}
	...

08018d18 <_free_r>:
 8018d18:	b538      	push	{r3, r4, r5, lr}
 8018d1a:	4605      	mov	r5, r0
 8018d1c:	2900      	cmp	r1, #0
 8018d1e:	d045      	beq.n	8018dac <_free_r+0x94>
 8018d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d24:	1f0c      	subs	r4, r1, #4
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	bfb8      	it	lt
 8018d2a:	18e4      	addlt	r4, r4, r3
 8018d2c:	f000 fe30 	bl	8019990 <__malloc_lock>
 8018d30:	4a1f      	ldr	r2, [pc, #124]	; (8018db0 <_free_r+0x98>)
 8018d32:	6813      	ldr	r3, [r2, #0]
 8018d34:	4610      	mov	r0, r2
 8018d36:	b933      	cbnz	r3, 8018d46 <_free_r+0x2e>
 8018d38:	6063      	str	r3, [r4, #4]
 8018d3a:	6014      	str	r4, [r2, #0]
 8018d3c:	4628      	mov	r0, r5
 8018d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d42:	f000 be26 	b.w	8019992 <__malloc_unlock>
 8018d46:	42a3      	cmp	r3, r4
 8018d48:	d90c      	bls.n	8018d64 <_free_r+0x4c>
 8018d4a:	6821      	ldr	r1, [r4, #0]
 8018d4c:	1862      	adds	r2, r4, r1
 8018d4e:	4293      	cmp	r3, r2
 8018d50:	bf04      	itt	eq
 8018d52:	681a      	ldreq	r2, [r3, #0]
 8018d54:	685b      	ldreq	r3, [r3, #4]
 8018d56:	6063      	str	r3, [r4, #4]
 8018d58:	bf04      	itt	eq
 8018d5a:	1852      	addeq	r2, r2, r1
 8018d5c:	6022      	streq	r2, [r4, #0]
 8018d5e:	6004      	str	r4, [r0, #0]
 8018d60:	e7ec      	b.n	8018d3c <_free_r+0x24>
 8018d62:	4613      	mov	r3, r2
 8018d64:	685a      	ldr	r2, [r3, #4]
 8018d66:	b10a      	cbz	r2, 8018d6c <_free_r+0x54>
 8018d68:	42a2      	cmp	r2, r4
 8018d6a:	d9fa      	bls.n	8018d62 <_free_r+0x4a>
 8018d6c:	6819      	ldr	r1, [r3, #0]
 8018d6e:	1858      	adds	r0, r3, r1
 8018d70:	42a0      	cmp	r0, r4
 8018d72:	d10b      	bne.n	8018d8c <_free_r+0x74>
 8018d74:	6820      	ldr	r0, [r4, #0]
 8018d76:	4401      	add	r1, r0
 8018d78:	1858      	adds	r0, r3, r1
 8018d7a:	4282      	cmp	r2, r0
 8018d7c:	6019      	str	r1, [r3, #0]
 8018d7e:	d1dd      	bne.n	8018d3c <_free_r+0x24>
 8018d80:	6810      	ldr	r0, [r2, #0]
 8018d82:	6852      	ldr	r2, [r2, #4]
 8018d84:	605a      	str	r2, [r3, #4]
 8018d86:	4401      	add	r1, r0
 8018d88:	6019      	str	r1, [r3, #0]
 8018d8a:	e7d7      	b.n	8018d3c <_free_r+0x24>
 8018d8c:	d902      	bls.n	8018d94 <_free_r+0x7c>
 8018d8e:	230c      	movs	r3, #12
 8018d90:	602b      	str	r3, [r5, #0]
 8018d92:	e7d3      	b.n	8018d3c <_free_r+0x24>
 8018d94:	6820      	ldr	r0, [r4, #0]
 8018d96:	1821      	adds	r1, r4, r0
 8018d98:	428a      	cmp	r2, r1
 8018d9a:	bf04      	itt	eq
 8018d9c:	6811      	ldreq	r1, [r2, #0]
 8018d9e:	6852      	ldreq	r2, [r2, #4]
 8018da0:	6062      	str	r2, [r4, #4]
 8018da2:	bf04      	itt	eq
 8018da4:	1809      	addeq	r1, r1, r0
 8018da6:	6021      	streq	r1, [r4, #0]
 8018da8:	605c      	str	r4, [r3, #4]
 8018daa:	e7c7      	b.n	8018d3c <_free_r+0x24>
 8018dac:	bd38      	pop	{r3, r4, r5, pc}
 8018dae:	bf00      	nop
 8018db0:	20041398 	.word	0x20041398

08018db4 <_malloc_r>:
 8018db4:	b570      	push	{r4, r5, r6, lr}
 8018db6:	1ccd      	adds	r5, r1, #3
 8018db8:	f025 0503 	bic.w	r5, r5, #3
 8018dbc:	3508      	adds	r5, #8
 8018dbe:	2d0c      	cmp	r5, #12
 8018dc0:	bf38      	it	cc
 8018dc2:	250c      	movcc	r5, #12
 8018dc4:	2d00      	cmp	r5, #0
 8018dc6:	4606      	mov	r6, r0
 8018dc8:	db01      	blt.n	8018dce <_malloc_r+0x1a>
 8018dca:	42a9      	cmp	r1, r5
 8018dcc:	d903      	bls.n	8018dd6 <_malloc_r+0x22>
 8018dce:	230c      	movs	r3, #12
 8018dd0:	6033      	str	r3, [r6, #0]
 8018dd2:	2000      	movs	r0, #0
 8018dd4:	bd70      	pop	{r4, r5, r6, pc}
 8018dd6:	f000 fddb 	bl	8019990 <__malloc_lock>
 8018dda:	4a21      	ldr	r2, [pc, #132]	; (8018e60 <_malloc_r+0xac>)
 8018ddc:	6814      	ldr	r4, [r2, #0]
 8018dde:	4621      	mov	r1, r4
 8018de0:	b991      	cbnz	r1, 8018e08 <_malloc_r+0x54>
 8018de2:	4c20      	ldr	r4, [pc, #128]	; (8018e64 <_malloc_r+0xb0>)
 8018de4:	6823      	ldr	r3, [r4, #0]
 8018de6:	b91b      	cbnz	r3, 8018df0 <_malloc_r+0x3c>
 8018de8:	4630      	mov	r0, r6
 8018dea:	f000 fc91 	bl	8019710 <_sbrk_r>
 8018dee:	6020      	str	r0, [r4, #0]
 8018df0:	4629      	mov	r1, r5
 8018df2:	4630      	mov	r0, r6
 8018df4:	f000 fc8c 	bl	8019710 <_sbrk_r>
 8018df8:	1c43      	adds	r3, r0, #1
 8018dfa:	d124      	bne.n	8018e46 <_malloc_r+0x92>
 8018dfc:	230c      	movs	r3, #12
 8018dfe:	6033      	str	r3, [r6, #0]
 8018e00:	4630      	mov	r0, r6
 8018e02:	f000 fdc6 	bl	8019992 <__malloc_unlock>
 8018e06:	e7e4      	b.n	8018dd2 <_malloc_r+0x1e>
 8018e08:	680b      	ldr	r3, [r1, #0]
 8018e0a:	1b5b      	subs	r3, r3, r5
 8018e0c:	d418      	bmi.n	8018e40 <_malloc_r+0x8c>
 8018e0e:	2b0b      	cmp	r3, #11
 8018e10:	d90f      	bls.n	8018e32 <_malloc_r+0x7e>
 8018e12:	600b      	str	r3, [r1, #0]
 8018e14:	50cd      	str	r5, [r1, r3]
 8018e16:	18cc      	adds	r4, r1, r3
 8018e18:	4630      	mov	r0, r6
 8018e1a:	f000 fdba 	bl	8019992 <__malloc_unlock>
 8018e1e:	f104 000b 	add.w	r0, r4, #11
 8018e22:	1d23      	adds	r3, r4, #4
 8018e24:	f020 0007 	bic.w	r0, r0, #7
 8018e28:	1ac3      	subs	r3, r0, r3
 8018e2a:	d0d3      	beq.n	8018dd4 <_malloc_r+0x20>
 8018e2c:	425a      	negs	r2, r3
 8018e2e:	50e2      	str	r2, [r4, r3]
 8018e30:	e7d0      	b.n	8018dd4 <_malloc_r+0x20>
 8018e32:	428c      	cmp	r4, r1
 8018e34:	684b      	ldr	r3, [r1, #4]
 8018e36:	bf16      	itet	ne
 8018e38:	6063      	strne	r3, [r4, #4]
 8018e3a:	6013      	streq	r3, [r2, #0]
 8018e3c:	460c      	movne	r4, r1
 8018e3e:	e7eb      	b.n	8018e18 <_malloc_r+0x64>
 8018e40:	460c      	mov	r4, r1
 8018e42:	6849      	ldr	r1, [r1, #4]
 8018e44:	e7cc      	b.n	8018de0 <_malloc_r+0x2c>
 8018e46:	1cc4      	adds	r4, r0, #3
 8018e48:	f024 0403 	bic.w	r4, r4, #3
 8018e4c:	42a0      	cmp	r0, r4
 8018e4e:	d005      	beq.n	8018e5c <_malloc_r+0xa8>
 8018e50:	1a21      	subs	r1, r4, r0
 8018e52:	4630      	mov	r0, r6
 8018e54:	f000 fc5c 	bl	8019710 <_sbrk_r>
 8018e58:	3001      	adds	r0, #1
 8018e5a:	d0cf      	beq.n	8018dfc <_malloc_r+0x48>
 8018e5c:	6025      	str	r5, [r4, #0]
 8018e5e:	e7db      	b.n	8018e18 <_malloc_r+0x64>
 8018e60:	20041398 	.word	0x20041398
 8018e64:	2004139c 	.word	0x2004139c

08018e68 <__ssputs_r>:
 8018e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e6c:	688e      	ldr	r6, [r1, #8]
 8018e6e:	429e      	cmp	r6, r3
 8018e70:	4682      	mov	sl, r0
 8018e72:	460c      	mov	r4, r1
 8018e74:	4690      	mov	r8, r2
 8018e76:	4699      	mov	r9, r3
 8018e78:	d837      	bhi.n	8018eea <__ssputs_r+0x82>
 8018e7a:	898a      	ldrh	r2, [r1, #12]
 8018e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018e80:	d031      	beq.n	8018ee6 <__ssputs_r+0x7e>
 8018e82:	6825      	ldr	r5, [r4, #0]
 8018e84:	6909      	ldr	r1, [r1, #16]
 8018e86:	1a6f      	subs	r7, r5, r1
 8018e88:	6965      	ldr	r5, [r4, #20]
 8018e8a:	2302      	movs	r3, #2
 8018e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e90:	fb95 f5f3 	sdiv	r5, r5, r3
 8018e94:	f109 0301 	add.w	r3, r9, #1
 8018e98:	443b      	add	r3, r7
 8018e9a:	429d      	cmp	r5, r3
 8018e9c:	bf38      	it	cc
 8018e9e:	461d      	movcc	r5, r3
 8018ea0:	0553      	lsls	r3, r2, #21
 8018ea2:	d530      	bpl.n	8018f06 <__ssputs_r+0x9e>
 8018ea4:	4629      	mov	r1, r5
 8018ea6:	f7ff ff85 	bl	8018db4 <_malloc_r>
 8018eaa:	4606      	mov	r6, r0
 8018eac:	b950      	cbnz	r0, 8018ec4 <__ssputs_r+0x5c>
 8018eae:	230c      	movs	r3, #12
 8018eb0:	f8ca 3000 	str.w	r3, [sl]
 8018eb4:	89a3      	ldrh	r3, [r4, #12]
 8018eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018eba:	81a3      	strh	r3, [r4, #12]
 8018ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8018ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ec4:	463a      	mov	r2, r7
 8018ec6:	6921      	ldr	r1, [r4, #16]
 8018ec8:	f7fc fbc2 	bl	8015650 <memcpy>
 8018ecc:	89a3      	ldrh	r3, [r4, #12]
 8018ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ed6:	81a3      	strh	r3, [r4, #12]
 8018ed8:	6126      	str	r6, [r4, #16]
 8018eda:	6165      	str	r5, [r4, #20]
 8018edc:	443e      	add	r6, r7
 8018ede:	1bed      	subs	r5, r5, r7
 8018ee0:	6026      	str	r6, [r4, #0]
 8018ee2:	60a5      	str	r5, [r4, #8]
 8018ee4:	464e      	mov	r6, r9
 8018ee6:	454e      	cmp	r6, r9
 8018ee8:	d900      	bls.n	8018eec <__ssputs_r+0x84>
 8018eea:	464e      	mov	r6, r9
 8018eec:	4632      	mov	r2, r6
 8018eee:	4641      	mov	r1, r8
 8018ef0:	6820      	ldr	r0, [r4, #0]
 8018ef2:	f000 fd34 	bl	801995e <memmove>
 8018ef6:	68a3      	ldr	r3, [r4, #8]
 8018ef8:	1b9b      	subs	r3, r3, r6
 8018efa:	60a3      	str	r3, [r4, #8]
 8018efc:	6823      	ldr	r3, [r4, #0]
 8018efe:	441e      	add	r6, r3
 8018f00:	6026      	str	r6, [r4, #0]
 8018f02:	2000      	movs	r0, #0
 8018f04:	e7dc      	b.n	8018ec0 <__ssputs_r+0x58>
 8018f06:	462a      	mov	r2, r5
 8018f08:	f000 fd44 	bl	8019994 <_realloc_r>
 8018f0c:	4606      	mov	r6, r0
 8018f0e:	2800      	cmp	r0, #0
 8018f10:	d1e2      	bne.n	8018ed8 <__ssputs_r+0x70>
 8018f12:	6921      	ldr	r1, [r4, #16]
 8018f14:	4650      	mov	r0, sl
 8018f16:	f7ff feff 	bl	8018d18 <_free_r>
 8018f1a:	e7c8      	b.n	8018eae <__ssputs_r+0x46>

08018f1c <_svfiprintf_r>:
 8018f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f20:	461d      	mov	r5, r3
 8018f22:	898b      	ldrh	r3, [r1, #12]
 8018f24:	061f      	lsls	r7, r3, #24
 8018f26:	b09d      	sub	sp, #116	; 0x74
 8018f28:	4680      	mov	r8, r0
 8018f2a:	460c      	mov	r4, r1
 8018f2c:	4616      	mov	r6, r2
 8018f2e:	d50f      	bpl.n	8018f50 <_svfiprintf_r+0x34>
 8018f30:	690b      	ldr	r3, [r1, #16]
 8018f32:	b96b      	cbnz	r3, 8018f50 <_svfiprintf_r+0x34>
 8018f34:	2140      	movs	r1, #64	; 0x40
 8018f36:	f7ff ff3d 	bl	8018db4 <_malloc_r>
 8018f3a:	6020      	str	r0, [r4, #0]
 8018f3c:	6120      	str	r0, [r4, #16]
 8018f3e:	b928      	cbnz	r0, 8018f4c <_svfiprintf_r+0x30>
 8018f40:	230c      	movs	r3, #12
 8018f42:	f8c8 3000 	str.w	r3, [r8]
 8018f46:	f04f 30ff 	mov.w	r0, #4294967295
 8018f4a:	e0c8      	b.n	80190de <_svfiprintf_r+0x1c2>
 8018f4c:	2340      	movs	r3, #64	; 0x40
 8018f4e:	6163      	str	r3, [r4, #20]
 8018f50:	2300      	movs	r3, #0
 8018f52:	9309      	str	r3, [sp, #36]	; 0x24
 8018f54:	2320      	movs	r3, #32
 8018f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f5a:	2330      	movs	r3, #48	; 0x30
 8018f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f60:	9503      	str	r5, [sp, #12]
 8018f62:	f04f 0b01 	mov.w	fp, #1
 8018f66:	4637      	mov	r7, r6
 8018f68:	463d      	mov	r5, r7
 8018f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018f6e:	b10b      	cbz	r3, 8018f74 <_svfiprintf_r+0x58>
 8018f70:	2b25      	cmp	r3, #37	; 0x25
 8018f72:	d13e      	bne.n	8018ff2 <_svfiprintf_r+0xd6>
 8018f74:	ebb7 0a06 	subs.w	sl, r7, r6
 8018f78:	d00b      	beq.n	8018f92 <_svfiprintf_r+0x76>
 8018f7a:	4653      	mov	r3, sl
 8018f7c:	4632      	mov	r2, r6
 8018f7e:	4621      	mov	r1, r4
 8018f80:	4640      	mov	r0, r8
 8018f82:	f7ff ff71 	bl	8018e68 <__ssputs_r>
 8018f86:	3001      	adds	r0, #1
 8018f88:	f000 80a4 	beq.w	80190d4 <_svfiprintf_r+0x1b8>
 8018f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f8e:	4453      	add	r3, sl
 8018f90:	9309      	str	r3, [sp, #36]	; 0x24
 8018f92:	783b      	ldrb	r3, [r7, #0]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	f000 809d 	beq.w	80190d4 <_svfiprintf_r+0x1b8>
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8018fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018fa4:	9304      	str	r3, [sp, #16]
 8018fa6:	9307      	str	r3, [sp, #28]
 8018fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018fac:	931a      	str	r3, [sp, #104]	; 0x68
 8018fae:	462f      	mov	r7, r5
 8018fb0:	2205      	movs	r2, #5
 8018fb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018fb6:	4850      	ldr	r0, [pc, #320]	; (80190f8 <_svfiprintf_r+0x1dc>)
 8018fb8:	f7e7 f92a 	bl	8000210 <memchr>
 8018fbc:	9b04      	ldr	r3, [sp, #16]
 8018fbe:	b9d0      	cbnz	r0, 8018ff6 <_svfiprintf_r+0xda>
 8018fc0:	06d9      	lsls	r1, r3, #27
 8018fc2:	bf44      	itt	mi
 8018fc4:	2220      	movmi	r2, #32
 8018fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018fca:	071a      	lsls	r2, r3, #28
 8018fcc:	bf44      	itt	mi
 8018fce:	222b      	movmi	r2, #43	; 0x2b
 8018fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018fd4:	782a      	ldrb	r2, [r5, #0]
 8018fd6:	2a2a      	cmp	r2, #42	; 0x2a
 8018fd8:	d015      	beq.n	8019006 <_svfiprintf_r+0xea>
 8018fda:	9a07      	ldr	r2, [sp, #28]
 8018fdc:	462f      	mov	r7, r5
 8018fde:	2000      	movs	r0, #0
 8018fe0:	250a      	movs	r5, #10
 8018fe2:	4639      	mov	r1, r7
 8018fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018fe8:	3b30      	subs	r3, #48	; 0x30
 8018fea:	2b09      	cmp	r3, #9
 8018fec:	d94d      	bls.n	801908a <_svfiprintf_r+0x16e>
 8018fee:	b1b8      	cbz	r0, 8019020 <_svfiprintf_r+0x104>
 8018ff0:	e00f      	b.n	8019012 <_svfiprintf_r+0xf6>
 8018ff2:	462f      	mov	r7, r5
 8018ff4:	e7b8      	b.n	8018f68 <_svfiprintf_r+0x4c>
 8018ff6:	4a40      	ldr	r2, [pc, #256]	; (80190f8 <_svfiprintf_r+0x1dc>)
 8018ff8:	1a80      	subs	r0, r0, r2
 8018ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8018ffe:	4318      	orrs	r0, r3
 8019000:	9004      	str	r0, [sp, #16]
 8019002:	463d      	mov	r5, r7
 8019004:	e7d3      	b.n	8018fae <_svfiprintf_r+0x92>
 8019006:	9a03      	ldr	r2, [sp, #12]
 8019008:	1d11      	adds	r1, r2, #4
 801900a:	6812      	ldr	r2, [r2, #0]
 801900c:	9103      	str	r1, [sp, #12]
 801900e:	2a00      	cmp	r2, #0
 8019010:	db01      	blt.n	8019016 <_svfiprintf_r+0xfa>
 8019012:	9207      	str	r2, [sp, #28]
 8019014:	e004      	b.n	8019020 <_svfiprintf_r+0x104>
 8019016:	4252      	negs	r2, r2
 8019018:	f043 0302 	orr.w	r3, r3, #2
 801901c:	9207      	str	r2, [sp, #28]
 801901e:	9304      	str	r3, [sp, #16]
 8019020:	783b      	ldrb	r3, [r7, #0]
 8019022:	2b2e      	cmp	r3, #46	; 0x2e
 8019024:	d10c      	bne.n	8019040 <_svfiprintf_r+0x124>
 8019026:	787b      	ldrb	r3, [r7, #1]
 8019028:	2b2a      	cmp	r3, #42	; 0x2a
 801902a:	d133      	bne.n	8019094 <_svfiprintf_r+0x178>
 801902c:	9b03      	ldr	r3, [sp, #12]
 801902e:	1d1a      	adds	r2, r3, #4
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	9203      	str	r2, [sp, #12]
 8019034:	2b00      	cmp	r3, #0
 8019036:	bfb8      	it	lt
 8019038:	f04f 33ff 	movlt.w	r3, #4294967295
 801903c:	3702      	adds	r7, #2
 801903e:	9305      	str	r3, [sp, #20]
 8019040:	4d2e      	ldr	r5, [pc, #184]	; (80190fc <_svfiprintf_r+0x1e0>)
 8019042:	7839      	ldrb	r1, [r7, #0]
 8019044:	2203      	movs	r2, #3
 8019046:	4628      	mov	r0, r5
 8019048:	f7e7 f8e2 	bl	8000210 <memchr>
 801904c:	b138      	cbz	r0, 801905e <_svfiprintf_r+0x142>
 801904e:	2340      	movs	r3, #64	; 0x40
 8019050:	1b40      	subs	r0, r0, r5
 8019052:	fa03 f000 	lsl.w	r0, r3, r0
 8019056:	9b04      	ldr	r3, [sp, #16]
 8019058:	4303      	orrs	r3, r0
 801905a:	3701      	adds	r7, #1
 801905c:	9304      	str	r3, [sp, #16]
 801905e:	7839      	ldrb	r1, [r7, #0]
 8019060:	4827      	ldr	r0, [pc, #156]	; (8019100 <_svfiprintf_r+0x1e4>)
 8019062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019066:	2206      	movs	r2, #6
 8019068:	1c7e      	adds	r6, r7, #1
 801906a:	f7e7 f8d1 	bl	8000210 <memchr>
 801906e:	2800      	cmp	r0, #0
 8019070:	d038      	beq.n	80190e4 <_svfiprintf_r+0x1c8>
 8019072:	4b24      	ldr	r3, [pc, #144]	; (8019104 <_svfiprintf_r+0x1e8>)
 8019074:	bb13      	cbnz	r3, 80190bc <_svfiprintf_r+0x1a0>
 8019076:	9b03      	ldr	r3, [sp, #12]
 8019078:	3307      	adds	r3, #7
 801907a:	f023 0307 	bic.w	r3, r3, #7
 801907e:	3308      	adds	r3, #8
 8019080:	9303      	str	r3, [sp, #12]
 8019082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019084:	444b      	add	r3, r9
 8019086:	9309      	str	r3, [sp, #36]	; 0x24
 8019088:	e76d      	b.n	8018f66 <_svfiprintf_r+0x4a>
 801908a:	fb05 3202 	mla	r2, r5, r2, r3
 801908e:	2001      	movs	r0, #1
 8019090:	460f      	mov	r7, r1
 8019092:	e7a6      	b.n	8018fe2 <_svfiprintf_r+0xc6>
 8019094:	2300      	movs	r3, #0
 8019096:	3701      	adds	r7, #1
 8019098:	9305      	str	r3, [sp, #20]
 801909a:	4619      	mov	r1, r3
 801909c:	250a      	movs	r5, #10
 801909e:	4638      	mov	r0, r7
 80190a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190a4:	3a30      	subs	r2, #48	; 0x30
 80190a6:	2a09      	cmp	r2, #9
 80190a8:	d903      	bls.n	80190b2 <_svfiprintf_r+0x196>
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d0c8      	beq.n	8019040 <_svfiprintf_r+0x124>
 80190ae:	9105      	str	r1, [sp, #20]
 80190b0:	e7c6      	b.n	8019040 <_svfiprintf_r+0x124>
 80190b2:	fb05 2101 	mla	r1, r5, r1, r2
 80190b6:	2301      	movs	r3, #1
 80190b8:	4607      	mov	r7, r0
 80190ba:	e7f0      	b.n	801909e <_svfiprintf_r+0x182>
 80190bc:	ab03      	add	r3, sp, #12
 80190be:	9300      	str	r3, [sp, #0]
 80190c0:	4622      	mov	r2, r4
 80190c2:	4b11      	ldr	r3, [pc, #68]	; (8019108 <_svfiprintf_r+0x1ec>)
 80190c4:	a904      	add	r1, sp, #16
 80190c6:	4640      	mov	r0, r8
 80190c8:	f7fc fb6a 	bl	80157a0 <_printf_float>
 80190cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80190d0:	4681      	mov	r9, r0
 80190d2:	d1d6      	bne.n	8019082 <_svfiprintf_r+0x166>
 80190d4:	89a3      	ldrh	r3, [r4, #12]
 80190d6:	065b      	lsls	r3, r3, #25
 80190d8:	f53f af35 	bmi.w	8018f46 <_svfiprintf_r+0x2a>
 80190dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80190de:	b01d      	add	sp, #116	; 0x74
 80190e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e4:	ab03      	add	r3, sp, #12
 80190e6:	9300      	str	r3, [sp, #0]
 80190e8:	4622      	mov	r2, r4
 80190ea:	4b07      	ldr	r3, [pc, #28]	; (8019108 <_svfiprintf_r+0x1ec>)
 80190ec:	a904      	add	r1, sp, #16
 80190ee:	4640      	mov	r0, r8
 80190f0:	f7fc fe0c 	bl	8015d0c <_printf_i>
 80190f4:	e7ea      	b.n	80190cc <_svfiprintf_r+0x1b0>
 80190f6:	bf00      	nop
 80190f8:	0801a4c4 	.word	0x0801a4c4
 80190fc:	0801a4ca 	.word	0x0801a4ca
 8019100:	0801a4ce 	.word	0x0801a4ce
 8019104:	080157a1 	.word	0x080157a1
 8019108:	08018e69 	.word	0x08018e69

0801910c <_sungetc_r>:
 801910c:	b538      	push	{r3, r4, r5, lr}
 801910e:	1c4b      	adds	r3, r1, #1
 8019110:	4614      	mov	r4, r2
 8019112:	d103      	bne.n	801911c <_sungetc_r+0x10>
 8019114:	f04f 35ff 	mov.w	r5, #4294967295
 8019118:	4628      	mov	r0, r5
 801911a:	bd38      	pop	{r3, r4, r5, pc}
 801911c:	8993      	ldrh	r3, [r2, #12]
 801911e:	f023 0320 	bic.w	r3, r3, #32
 8019122:	8193      	strh	r3, [r2, #12]
 8019124:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019126:	6852      	ldr	r2, [r2, #4]
 8019128:	b2cd      	uxtb	r5, r1
 801912a:	b18b      	cbz	r3, 8019150 <_sungetc_r+0x44>
 801912c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801912e:	4293      	cmp	r3, r2
 8019130:	dd08      	ble.n	8019144 <_sungetc_r+0x38>
 8019132:	6823      	ldr	r3, [r4, #0]
 8019134:	1e5a      	subs	r2, r3, #1
 8019136:	6022      	str	r2, [r4, #0]
 8019138:	f803 5c01 	strb.w	r5, [r3, #-1]
 801913c:	6863      	ldr	r3, [r4, #4]
 801913e:	3301      	adds	r3, #1
 8019140:	6063      	str	r3, [r4, #4]
 8019142:	e7e9      	b.n	8019118 <_sungetc_r+0xc>
 8019144:	4621      	mov	r1, r4
 8019146:	f000 fbc3 	bl	80198d0 <__submore>
 801914a:	2800      	cmp	r0, #0
 801914c:	d0f1      	beq.n	8019132 <_sungetc_r+0x26>
 801914e:	e7e1      	b.n	8019114 <_sungetc_r+0x8>
 8019150:	6921      	ldr	r1, [r4, #16]
 8019152:	6823      	ldr	r3, [r4, #0]
 8019154:	b151      	cbz	r1, 801916c <_sungetc_r+0x60>
 8019156:	4299      	cmp	r1, r3
 8019158:	d208      	bcs.n	801916c <_sungetc_r+0x60>
 801915a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801915e:	42a9      	cmp	r1, r5
 8019160:	d104      	bne.n	801916c <_sungetc_r+0x60>
 8019162:	3b01      	subs	r3, #1
 8019164:	3201      	adds	r2, #1
 8019166:	6023      	str	r3, [r4, #0]
 8019168:	6062      	str	r2, [r4, #4]
 801916a:	e7d5      	b.n	8019118 <_sungetc_r+0xc>
 801916c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019174:	6363      	str	r3, [r4, #52]	; 0x34
 8019176:	2303      	movs	r3, #3
 8019178:	63a3      	str	r3, [r4, #56]	; 0x38
 801917a:	4623      	mov	r3, r4
 801917c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019180:	6023      	str	r3, [r4, #0]
 8019182:	2301      	movs	r3, #1
 8019184:	e7dc      	b.n	8019140 <_sungetc_r+0x34>

08019186 <__ssrefill_r>:
 8019186:	b510      	push	{r4, lr}
 8019188:	460c      	mov	r4, r1
 801918a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801918c:	b169      	cbz	r1, 80191aa <__ssrefill_r+0x24>
 801918e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019192:	4299      	cmp	r1, r3
 8019194:	d001      	beq.n	801919a <__ssrefill_r+0x14>
 8019196:	f7ff fdbf 	bl	8018d18 <_free_r>
 801919a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801919c:	6063      	str	r3, [r4, #4]
 801919e:	2000      	movs	r0, #0
 80191a0:	6360      	str	r0, [r4, #52]	; 0x34
 80191a2:	b113      	cbz	r3, 80191aa <__ssrefill_r+0x24>
 80191a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80191a6:	6023      	str	r3, [r4, #0]
 80191a8:	bd10      	pop	{r4, pc}
 80191aa:	6923      	ldr	r3, [r4, #16]
 80191ac:	6023      	str	r3, [r4, #0]
 80191ae:	2300      	movs	r3, #0
 80191b0:	6063      	str	r3, [r4, #4]
 80191b2:	89a3      	ldrh	r3, [r4, #12]
 80191b4:	f043 0320 	orr.w	r3, r3, #32
 80191b8:	81a3      	strh	r3, [r4, #12]
 80191ba:	f04f 30ff 	mov.w	r0, #4294967295
 80191be:	e7f3      	b.n	80191a8 <__ssrefill_r+0x22>

080191c0 <__ssvfiscanf_r>:
 80191c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191c4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80191c8:	460c      	mov	r4, r1
 80191ca:	2100      	movs	r1, #0
 80191cc:	9144      	str	r1, [sp, #272]	; 0x110
 80191ce:	9145      	str	r1, [sp, #276]	; 0x114
 80191d0:	499f      	ldr	r1, [pc, #636]	; (8019450 <__ssvfiscanf_r+0x290>)
 80191d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80191d4:	f10d 0804 	add.w	r8, sp, #4
 80191d8:	499e      	ldr	r1, [pc, #632]	; (8019454 <__ssvfiscanf_r+0x294>)
 80191da:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019458 <__ssvfiscanf_r+0x298>
 80191de:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80191e2:	4606      	mov	r6, r0
 80191e4:	4692      	mov	sl, r2
 80191e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80191e8:	9300      	str	r3, [sp, #0]
 80191ea:	270a      	movs	r7, #10
 80191ec:	f89a 3000 	ldrb.w	r3, [sl]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	f000 812a 	beq.w	801944a <__ssvfiscanf_r+0x28a>
 80191f6:	4655      	mov	r5, sl
 80191f8:	f7ff f948 	bl	801848c <__locale_ctype_ptr>
 80191fc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019200:	4458      	add	r0, fp
 8019202:	7843      	ldrb	r3, [r0, #1]
 8019204:	f013 0308 	ands.w	r3, r3, #8
 8019208:	d01c      	beq.n	8019244 <__ssvfiscanf_r+0x84>
 801920a:	6863      	ldr	r3, [r4, #4]
 801920c:	2b00      	cmp	r3, #0
 801920e:	dd12      	ble.n	8019236 <__ssvfiscanf_r+0x76>
 8019210:	f7ff f93c 	bl	801848c <__locale_ctype_ptr>
 8019214:	6823      	ldr	r3, [r4, #0]
 8019216:	781a      	ldrb	r2, [r3, #0]
 8019218:	4410      	add	r0, r2
 801921a:	7842      	ldrb	r2, [r0, #1]
 801921c:	0712      	lsls	r2, r2, #28
 801921e:	d401      	bmi.n	8019224 <__ssvfiscanf_r+0x64>
 8019220:	46aa      	mov	sl, r5
 8019222:	e7e3      	b.n	80191ec <__ssvfiscanf_r+0x2c>
 8019224:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019226:	3201      	adds	r2, #1
 8019228:	9245      	str	r2, [sp, #276]	; 0x114
 801922a:	6862      	ldr	r2, [r4, #4]
 801922c:	3301      	adds	r3, #1
 801922e:	3a01      	subs	r2, #1
 8019230:	6062      	str	r2, [r4, #4]
 8019232:	6023      	str	r3, [r4, #0]
 8019234:	e7e9      	b.n	801920a <__ssvfiscanf_r+0x4a>
 8019236:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019238:	4621      	mov	r1, r4
 801923a:	4630      	mov	r0, r6
 801923c:	4798      	blx	r3
 801923e:	2800      	cmp	r0, #0
 8019240:	d0e6      	beq.n	8019210 <__ssvfiscanf_r+0x50>
 8019242:	e7ed      	b.n	8019220 <__ssvfiscanf_r+0x60>
 8019244:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019248:	f040 8082 	bne.w	8019350 <__ssvfiscanf_r+0x190>
 801924c:	9343      	str	r3, [sp, #268]	; 0x10c
 801924e:	9341      	str	r3, [sp, #260]	; 0x104
 8019250:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019254:	2b2a      	cmp	r3, #42	; 0x2a
 8019256:	d103      	bne.n	8019260 <__ssvfiscanf_r+0xa0>
 8019258:	2310      	movs	r3, #16
 801925a:	9341      	str	r3, [sp, #260]	; 0x104
 801925c:	f10a 0502 	add.w	r5, sl, #2
 8019260:	46aa      	mov	sl, r5
 8019262:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019266:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801926a:	2a09      	cmp	r2, #9
 801926c:	d922      	bls.n	80192b4 <__ssvfiscanf_r+0xf4>
 801926e:	2203      	movs	r2, #3
 8019270:	4879      	ldr	r0, [pc, #484]	; (8019458 <__ssvfiscanf_r+0x298>)
 8019272:	f7e6 ffcd 	bl	8000210 <memchr>
 8019276:	b138      	cbz	r0, 8019288 <__ssvfiscanf_r+0xc8>
 8019278:	eba0 0309 	sub.w	r3, r0, r9
 801927c:	2001      	movs	r0, #1
 801927e:	4098      	lsls	r0, r3
 8019280:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019282:	4318      	orrs	r0, r3
 8019284:	9041      	str	r0, [sp, #260]	; 0x104
 8019286:	46aa      	mov	sl, r5
 8019288:	f89a 3000 	ldrb.w	r3, [sl]
 801928c:	2b67      	cmp	r3, #103	; 0x67
 801928e:	f10a 0501 	add.w	r5, sl, #1
 8019292:	d82b      	bhi.n	80192ec <__ssvfiscanf_r+0x12c>
 8019294:	2b65      	cmp	r3, #101	; 0x65
 8019296:	f080 809f 	bcs.w	80193d8 <__ssvfiscanf_r+0x218>
 801929a:	2b47      	cmp	r3, #71	; 0x47
 801929c:	d810      	bhi.n	80192c0 <__ssvfiscanf_r+0x100>
 801929e:	2b45      	cmp	r3, #69	; 0x45
 80192a0:	f080 809a 	bcs.w	80193d8 <__ssvfiscanf_r+0x218>
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d06c      	beq.n	8019382 <__ssvfiscanf_r+0x1c2>
 80192a8:	2b25      	cmp	r3, #37	; 0x25
 80192aa:	d051      	beq.n	8019350 <__ssvfiscanf_r+0x190>
 80192ac:	2303      	movs	r3, #3
 80192ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80192b0:	9742      	str	r7, [sp, #264]	; 0x108
 80192b2:	e027      	b.n	8019304 <__ssvfiscanf_r+0x144>
 80192b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80192b6:	fb07 1303 	mla	r3, r7, r3, r1
 80192ba:	3b30      	subs	r3, #48	; 0x30
 80192bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80192be:	e7cf      	b.n	8019260 <__ssvfiscanf_r+0xa0>
 80192c0:	2b5b      	cmp	r3, #91	; 0x5b
 80192c2:	d06a      	beq.n	801939a <__ssvfiscanf_r+0x1da>
 80192c4:	d80c      	bhi.n	80192e0 <__ssvfiscanf_r+0x120>
 80192c6:	2b58      	cmp	r3, #88	; 0x58
 80192c8:	d1f0      	bne.n	80192ac <__ssvfiscanf_r+0xec>
 80192ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80192cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80192d0:	9241      	str	r2, [sp, #260]	; 0x104
 80192d2:	2210      	movs	r2, #16
 80192d4:	9242      	str	r2, [sp, #264]	; 0x108
 80192d6:	2b6e      	cmp	r3, #110	; 0x6e
 80192d8:	bf8c      	ite	hi
 80192da:	2304      	movhi	r3, #4
 80192dc:	2303      	movls	r3, #3
 80192de:	e010      	b.n	8019302 <__ssvfiscanf_r+0x142>
 80192e0:	2b63      	cmp	r3, #99	; 0x63
 80192e2:	d065      	beq.n	80193b0 <__ssvfiscanf_r+0x1f0>
 80192e4:	2b64      	cmp	r3, #100	; 0x64
 80192e6:	d1e1      	bne.n	80192ac <__ssvfiscanf_r+0xec>
 80192e8:	9742      	str	r7, [sp, #264]	; 0x108
 80192ea:	e7f4      	b.n	80192d6 <__ssvfiscanf_r+0x116>
 80192ec:	2b70      	cmp	r3, #112	; 0x70
 80192ee:	d04b      	beq.n	8019388 <__ssvfiscanf_r+0x1c8>
 80192f0:	d826      	bhi.n	8019340 <__ssvfiscanf_r+0x180>
 80192f2:	2b6e      	cmp	r3, #110	; 0x6e
 80192f4:	d062      	beq.n	80193bc <__ssvfiscanf_r+0x1fc>
 80192f6:	d84c      	bhi.n	8019392 <__ssvfiscanf_r+0x1d2>
 80192f8:	2b69      	cmp	r3, #105	; 0x69
 80192fa:	d1d7      	bne.n	80192ac <__ssvfiscanf_r+0xec>
 80192fc:	2300      	movs	r3, #0
 80192fe:	9342      	str	r3, [sp, #264]	; 0x108
 8019300:	2303      	movs	r3, #3
 8019302:	9347      	str	r3, [sp, #284]	; 0x11c
 8019304:	6863      	ldr	r3, [r4, #4]
 8019306:	2b00      	cmp	r3, #0
 8019308:	dd68      	ble.n	80193dc <__ssvfiscanf_r+0x21c>
 801930a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801930c:	0659      	lsls	r1, r3, #25
 801930e:	d407      	bmi.n	8019320 <__ssvfiscanf_r+0x160>
 8019310:	f7ff f8bc 	bl	801848c <__locale_ctype_ptr>
 8019314:	6823      	ldr	r3, [r4, #0]
 8019316:	781a      	ldrb	r2, [r3, #0]
 8019318:	4410      	add	r0, r2
 801931a:	7842      	ldrb	r2, [r0, #1]
 801931c:	0712      	lsls	r2, r2, #28
 801931e:	d464      	bmi.n	80193ea <__ssvfiscanf_r+0x22a>
 8019320:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019322:	2b02      	cmp	r3, #2
 8019324:	dc73      	bgt.n	801940e <__ssvfiscanf_r+0x24e>
 8019326:	466b      	mov	r3, sp
 8019328:	4622      	mov	r2, r4
 801932a:	a941      	add	r1, sp, #260	; 0x104
 801932c:	4630      	mov	r0, r6
 801932e:	f000 f897 	bl	8019460 <_scanf_chars>
 8019332:	2801      	cmp	r0, #1
 8019334:	f000 8089 	beq.w	801944a <__ssvfiscanf_r+0x28a>
 8019338:	2802      	cmp	r0, #2
 801933a:	f47f af71 	bne.w	8019220 <__ssvfiscanf_r+0x60>
 801933e:	e01d      	b.n	801937c <__ssvfiscanf_r+0x1bc>
 8019340:	2b75      	cmp	r3, #117	; 0x75
 8019342:	d0d1      	beq.n	80192e8 <__ssvfiscanf_r+0x128>
 8019344:	2b78      	cmp	r3, #120	; 0x78
 8019346:	d0c0      	beq.n	80192ca <__ssvfiscanf_r+0x10a>
 8019348:	2b73      	cmp	r3, #115	; 0x73
 801934a:	d1af      	bne.n	80192ac <__ssvfiscanf_r+0xec>
 801934c:	2302      	movs	r3, #2
 801934e:	e7d8      	b.n	8019302 <__ssvfiscanf_r+0x142>
 8019350:	6863      	ldr	r3, [r4, #4]
 8019352:	2b00      	cmp	r3, #0
 8019354:	dd0c      	ble.n	8019370 <__ssvfiscanf_r+0x1b0>
 8019356:	6823      	ldr	r3, [r4, #0]
 8019358:	781a      	ldrb	r2, [r3, #0]
 801935a:	455a      	cmp	r2, fp
 801935c:	d175      	bne.n	801944a <__ssvfiscanf_r+0x28a>
 801935e:	3301      	adds	r3, #1
 8019360:	6862      	ldr	r2, [r4, #4]
 8019362:	6023      	str	r3, [r4, #0]
 8019364:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019366:	3a01      	subs	r2, #1
 8019368:	3301      	adds	r3, #1
 801936a:	6062      	str	r2, [r4, #4]
 801936c:	9345      	str	r3, [sp, #276]	; 0x114
 801936e:	e757      	b.n	8019220 <__ssvfiscanf_r+0x60>
 8019370:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019372:	4621      	mov	r1, r4
 8019374:	4630      	mov	r0, r6
 8019376:	4798      	blx	r3
 8019378:	2800      	cmp	r0, #0
 801937a:	d0ec      	beq.n	8019356 <__ssvfiscanf_r+0x196>
 801937c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801937e:	2800      	cmp	r0, #0
 8019380:	d159      	bne.n	8019436 <__ssvfiscanf_r+0x276>
 8019382:	f04f 30ff 	mov.w	r0, #4294967295
 8019386:	e05c      	b.n	8019442 <__ssvfiscanf_r+0x282>
 8019388:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801938a:	f042 0220 	orr.w	r2, r2, #32
 801938e:	9241      	str	r2, [sp, #260]	; 0x104
 8019390:	e79b      	b.n	80192ca <__ssvfiscanf_r+0x10a>
 8019392:	2308      	movs	r3, #8
 8019394:	9342      	str	r3, [sp, #264]	; 0x108
 8019396:	2304      	movs	r3, #4
 8019398:	e7b3      	b.n	8019302 <__ssvfiscanf_r+0x142>
 801939a:	4629      	mov	r1, r5
 801939c:	4640      	mov	r0, r8
 801939e:	f000 f9c7 	bl	8019730 <__sccl>
 80193a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80193a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193a8:	9341      	str	r3, [sp, #260]	; 0x104
 80193aa:	4605      	mov	r5, r0
 80193ac:	2301      	movs	r3, #1
 80193ae:	e7a8      	b.n	8019302 <__ssvfiscanf_r+0x142>
 80193b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80193b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193b6:	9341      	str	r3, [sp, #260]	; 0x104
 80193b8:	2300      	movs	r3, #0
 80193ba:	e7a2      	b.n	8019302 <__ssvfiscanf_r+0x142>
 80193bc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80193be:	06c3      	lsls	r3, r0, #27
 80193c0:	f53f af2e 	bmi.w	8019220 <__ssvfiscanf_r+0x60>
 80193c4:	9b00      	ldr	r3, [sp, #0]
 80193c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80193c8:	1d19      	adds	r1, r3, #4
 80193ca:	9100      	str	r1, [sp, #0]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	07c0      	lsls	r0, r0, #31
 80193d0:	bf4c      	ite	mi
 80193d2:	801a      	strhmi	r2, [r3, #0]
 80193d4:	601a      	strpl	r2, [r3, #0]
 80193d6:	e723      	b.n	8019220 <__ssvfiscanf_r+0x60>
 80193d8:	2305      	movs	r3, #5
 80193da:	e792      	b.n	8019302 <__ssvfiscanf_r+0x142>
 80193dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80193de:	4621      	mov	r1, r4
 80193e0:	4630      	mov	r0, r6
 80193e2:	4798      	blx	r3
 80193e4:	2800      	cmp	r0, #0
 80193e6:	d090      	beq.n	801930a <__ssvfiscanf_r+0x14a>
 80193e8:	e7c8      	b.n	801937c <__ssvfiscanf_r+0x1bc>
 80193ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80193ec:	3201      	adds	r2, #1
 80193ee:	9245      	str	r2, [sp, #276]	; 0x114
 80193f0:	6862      	ldr	r2, [r4, #4]
 80193f2:	3a01      	subs	r2, #1
 80193f4:	2a00      	cmp	r2, #0
 80193f6:	6062      	str	r2, [r4, #4]
 80193f8:	dd02      	ble.n	8019400 <__ssvfiscanf_r+0x240>
 80193fa:	3301      	adds	r3, #1
 80193fc:	6023      	str	r3, [r4, #0]
 80193fe:	e787      	b.n	8019310 <__ssvfiscanf_r+0x150>
 8019400:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019402:	4621      	mov	r1, r4
 8019404:	4630      	mov	r0, r6
 8019406:	4798      	blx	r3
 8019408:	2800      	cmp	r0, #0
 801940a:	d081      	beq.n	8019310 <__ssvfiscanf_r+0x150>
 801940c:	e7b6      	b.n	801937c <__ssvfiscanf_r+0x1bc>
 801940e:	2b04      	cmp	r3, #4
 8019410:	dc06      	bgt.n	8019420 <__ssvfiscanf_r+0x260>
 8019412:	466b      	mov	r3, sp
 8019414:	4622      	mov	r2, r4
 8019416:	a941      	add	r1, sp, #260	; 0x104
 8019418:	4630      	mov	r0, r6
 801941a:	f000 f885 	bl	8019528 <_scanf_i>
 801941e:	e788      	b.n	8019332 <__ssvfiscanf_r+0x172>
 8019420:	4b0e      	ldr	r3, [pc, #56]	; (801945c <__ssvfiscanf_r+0x29c>)
 8019422:	2b00      	cmp	r3, #0
 8019424:	f43f aefc 	beq.w	8019220 <__ssvfiscanf_r+0x60>
 8019428:	466b      	mov	r3, sp
 801942a:	4622      	mov	r2, r4
 801942c:	a941      	add	r1, sp, #260	; 0x104
 801942e:	4630      	mov	r0, r6
 8019430:	f7fc fd7e 	bl	8015f30 <_scanf_float>
 8019434:	e77d      	b.n	8019332 <__ssvfiscanf_r+0x172>
 8019436:	89a3      	ldrh	r3, [r4, #12]
 8019438:	f013 0f40 	tst.w	r3, #64	; 0x40
 801943c:	bf18      	it	ne
 801943e:	f04f 30ff 	movne.w	r0, #4294967295
 8019442:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801944a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801944c:	e7f9      	b.n	8019442 <__ssvfiscanf_r+0x282>
 801944e:	bf00      	nop
 8019450:	0801910d 	.word	0x0801910d
 8019454:	08019187 	.word	0x08019187
 8019458:	0801a4ca 	.word	0x0801a4ca
 801945c:	08015f31 	.word	0x08015f31

08019460 <_scanf_chars>:
 8019460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019464:	4615      	mov	r5, r2
 8019466:	688a      	ldr	r2, [r1, #8]
 8019468:	4680      	mov	r8, r0
 801946a:	460c      	mov	r4, r1
 801946c:	b932      	cbnz	r2, 801947c <_scanf_chars+0x1c>
 801946e:	698a      	ldr	r2, [r1, #24]
 8019470:	2a00      	cmp	r2, #0
 8019472:	bf14      	ite	ne
 8019474:	f04f 32ff 	movne.w	r2, #4294967295
 8019478:	2201      	moveq	r2, #1
 801947a:	608a      	str	r2, [r1, #8]
 801947c:	6822      	ldr	r2, [r4, #0]
 801947e:	06d1      	lsls	r1, r2, #27
 8019480:	bf5f      	itttt	pl
 8019482:	681a      	ldrpl	r2, [r3, #0]
 8019484:	1d11      	addpl	r1, r2, #4
 8019486:	6019      	strpl	r1, [r3, #0]
 8019488:	6817      	ldrpl	r7, [r2, #0]
 801948a:	2600      	movs	r6, #0
 801948c:	69a3      	ldr	r3, [r4, #24]
 801948e:	b1db      	cbz	r3, 80194c8 <_scanf_chars+0x68>
 8019490:	2b01      	cmp	r3, #1
 8019492:	d107      	bne.n	80194a4 <_scanf_chars+0x44>
 8019494:	682b      	ldr	r3, [r5, #0]
 8019496:	6962      	ldr	r2, [r4, #20]
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	5cd3      	ldrb	r3, [r2, r3]
 801949c:	b9a3      	cbnz	r3, 80194c8 <_scanf_chars+0x68>
 801949e:	2e00      	cmp	r6, #0
 80194a0:	d132      	bne.n	8019508 <_scanf_chars+0xa8>
 80194a2:	e006      	b.n	80194b2 <_scanf_chars+0x52>
 80194a4:	2b02      	cmp	r3, #2
 80194a6:	d007      	beq.n	80194b8 <_scanf_chars+0x58>
 80194a8:	2e00      	cmp	r6, #0
 80194aa:	d12d      	bne.n	8019508 <_scanf_chars+0xa8>
 80194ac:	69a3      	ldr	r3, [r4, #24]
 80194ae:	2b01      	cmp	r3, #1
 80194b0:	d12a      	bne.n	8019508 <_scanf_chars+0xa8>
 80194b2:	2001      	movs	r0, #1
 80194b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194b8:	f7fe ffe8 	bl	801848c <__locale_ctype_ptr>
 80194bc:	682b      	ldr	r3, [r5, #0]
 80194be:	781b      	ldrb	r3, [r3, #0]
 80194c0:	4418      	add	r0, r3
 80194c2:	7843      	ldrb	r3, [r0, #1]
 80194c4:	071b      	lsls	r3, r3, #28
 80194c6:	d4ef      	bmi.n	80194a8 <_scanf_chars+0x48>
 80194c8:	6823      	ldr	r3, [r4, #0]
 80194ca:	06da      	lsls	r2, r3, #27
 80194cc:	bf5e      	ittt	pl
 80194ce:	682b      	ldrpl	r3, [r5, #0]
 80194d0:	781b      	ldrbpl	r3, [r3, #0]
 80194d2:	703b      	strbpl	r3, [r7, #0]
 80194d4:	682a      	ldr	r2, [r5, #0]
 80194d6:	686b      	ldr	r3, [r5, #4]
 80194d8:	f102 0201 	add.w	r2, r2, #1
 80194dc:	602a      	str	r2, [r5, #0]
 80194de:	68a2      	ldr	r2, [r4, #8]
 80194e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80194e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80194e8:	606b      	str	r3, [r5, #4]
 80194ea:	f106 0601 	add.w	r6, r6, #1
 80194ee:	bf58      	it	pl
 80194f0:	3701      	addpl	r7, #1
 80194f2:	60a2      	str	r2, [r4, #8]
 80194f4:	b142      	cbz	r2, 8019508 <_scanf_chars+0xa8>
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	dcc8      	bgt.n	801948c <_scanf_chars+0x2c>
 80194fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80194fe:	4629      	mov	r1, r5
 8019500:	4640      	mov	r0, r8
 8019502:	4798      	blx	r3
 8019504:	2800      	cmp	r0, #0
 8019506:	d0c1      	beq.n	801948c <_scanf_chars+0x2c>
 8019508:	6823      	ldr	r3, [r4, #0]
 801950a:	f013 0310 	ands.w	r3, r3, #16
 801950e:	d105      	bne.n	801951c <_scanf_chars+0xbc>
 8019510:	68e2      	ldr	r2, [r4, #12]
 8019512:	3201      	adds	r2, #1
 8019514:	60e2      	str	r2, [r4, #12]
 8019516:	69a2      	ldr	r2, [r4, #24]
 8019518:	b102      	cbz	r2, 801951c <_scanf_chars+0xbc>
 801951a:	703b      	strb	r3, [r7, #0]
 801951c:	6923      	ldr	r3, [r4, #16]
 801951e:	441e      	add	r6, r3
 8019520:	6126      	str	r6, [r4, #16]
 8019522:	2000      	movs	r0, #0
 8019524:	e7c6      	b.n	80194b4 <_scanf_chars+0x54>
	...

08019528 <_scanf_i>:
 8019528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801952c:	469a      	mov	sl, r3
 801952e:	4b74      	ldr	r3, [pc, #464]	; (8019700 <_scanf_i+0x1d8>)
 8019530:	460c      	mov	r4, r1
 8019532:	4683      	mov	fp, r0
 8019534:	4616      	mov	r6, r2
 8019536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801953a:	b087      	sub	sp, #28
 801953c:	ab03      	add	r3, sp, #12
 801953e:	68a7      	ldr	r7, [r4, #8]
 8019540:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019544:	4b6f      	ldr	r3, [pc, #444]	; (8019704 <_scanf_i+0x1dc>)
 8019546:	69a1      	ldr	r1, [r4, #24]
 8019548:	4a6f      	ldr	r2, [pc, #444]	; (8019708 <_scanf_i+0x1e0>)
 801954a:	2903      	cmp	r1, #3
 801954c:	bf08      	it	eq
 801954e:	461a      	moveq	r2, r3
 8019550:	1e7b      	subs	r3, r7, #1
 8019552:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019556:	bf84      	itt	hi
 8019558:	f240 135d 	movwhi	r3, #349	; 0x15d
 801955c:	60a3      	strhi	r3, [r4, #8]
 801955e:	6823      	ldr	r3, [r4, #0]
 8019560:	9200      	str	r2, [sp, #0]
 8019562:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019566:	bf88      	it	hi
 8019568:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801956c:	f104 091c 	add.w	r9, r4, #28
 8019570:	6023      	str	r3, [r4, #0]
 8019572:	bf8c      	ite	hi
 8019574:	197f      	addhi	r7, r7, r5
 8019576:	2700      	movls	r7, #0
 8019578:	464b      	mov	r3, r9
 801957a:	f04f 0800 	mov.w	r8, #0
 801957e:	9301      	str	r3, [sp, #4]
 8019580:	6831      	ldr	r1, [r6, #0]
 8019582:	ab03      	add	r3, sp, #12
 8019584:	2202      	movs	r2, #2
 8019586:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801958a:	7809      	ldrb	r1, [r1, #0]
 801958c:	f7e6 fe40 	bl	8000210 <memchr>
 8019590:	9b01      	ldr	r3, [sp, #4]
 8019592:	b330      	cbz	r0, 80195e2 <_scanf_i+0xba>
 8019594:	f1b8 0f01 	cmp.w	r8, #1
 8019598:	d15a      	bne.n	8019650 <_scanf_i+0x128>
 801959a:	6862      	ldr	r2, [r4, #4]
 801959c:	b92a      	cbnz	r2, 80195aa <_scanf_i+0x82>
 801959e:	6822      	ldr	r2, [r4, #0]
 80195a0:	2108      	movs	r1, #8
 80195a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80195a6:	6061      	str	r1, [r4, #4]
 80195a8:	6022      	str	r2, [r4, #0]
 80195aa:	6822      	ldr	r2, [r4, #0]
 80195ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80195b0:	6022      	str	r2, [r4, #0]
 80195b2:	68a2      	ldr	r2, [r4, #8]
 80195b4:	1e51      	subs	r1, r2, #1
 80195b6:	60a1      	str	r1, [r4, #8]
 80195b8:	b19a      	cbz	r2, 80195e2 <_scanf_i+0xba>
 80195ba:	6832      	ldr	r2, [r6, #0]
 80195bc:	1c51      	adds	r1, r2, #1
 80195be:	6031      	str	r1, [r6, #0]
 80195c0:	7812      	ldrb	r2, [r2, #0]
 80195c2:	701a      	strb	r2, [r3, #0]
 80195c4:	1c5d      	adds	r5, r3, #1
 80195c6:	6873      	ldr	r3, [r6, #4]
 80195c8:	3b01      	subs	r3, #1
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	6073      	str	r3, [r6, #4]
 80195ce:	dc07      	bgt.n	80195e0 <_scanf_i+0xb8>
 80195d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80195d4:	4631      	mov	r1, r6
 80195d6:	4658      	mov	r0, fp
 80195d8:	4798      	blx	r3
 80195da:	2800      	cmp	r0, #0
 80195dc:	f040 8086 	bne.w	80196ec <_scanf_i+0x1c4>
 80195e0:	462b      	mov	r3, r5
 80195e2:	f108 0801 	add.w	r8, r8, #1
 80195e6:	f1b8 0f03 	cmp.w	r8, #3
 80195ea:	d1c8      	bne.n	801957e <_scanf_i+0x56>
 80195ec:	6862      	ldr	r2, [r4, #4]
 80195ee:	b90a      	cbnz	r2, 80195f4 <_scanf_i+0xcc>
 80195f0:	220a      	movs	r2, #10
 80195f2:	6062      	str	r2, [r4, #4]
 80195f4:	6862      	ldr	r2, [r4, #4]
 80195f6:	4945      	ldr	r1, [pc, #276]	; (801970c <_scanf_i+0x1e4>)
 80195f8:	6960      	ldr	r0, [r4, #20]
 80195fa:	9301      	str	r3, [sp, #4]
 80195fc:	1a89      	subs	r1, r1, r2
 80195fe:	f000 f897 	bl	8019730 <__sccl>
 8019602:	9b01      	ldr	r3, [sp, #4]
 8019604:	f04f 0800 	mov.w	r8, #0
 8019608:	461d      	mov	r5, r3
 801960a:	68a3      	ldr	r3, [r4, #8]
 801960c:	6822      	ldr	r2, [r4, #0]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d03a      	beq.n	8019688 <_scanf_i+0x160>
 8019612:	6831      	ldr	r1, [r6, #0]
 8019614:	6960      	ldr	r0, [r4, #20]
 8019616:	f891 c000 	ldrb.w	ip, [r1]
 801961a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801961e:	2800      	cmp	r0, #0
 8019620:	d032      	beq.n	8019688 <_scanf_i+0x160>
 8019622:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019626:	d121      	bne.n	801966c <_scanf_i+0x144>
 8019628:	0510      	lsls	r0, r2, #20
 801962a:	d51f      	bpl.n	801966c <_scanf_i+0x144>
 801962c:	f108 0801 	add.w	r8, r8, #1
 8019630:	b117      	cbz	r7, 8019638 <_scanf_i+0x110>
 8019632:	3301      	adds	r3, #1
 8019634:	3f01      	subs	r7, #1
 8019636:	60a3      	str	r3, [r4, #8]
 8019638:	6873      	ldr	r3, [r6, #4]
 801963a:	3b01      	subs	r3, #1
 801963c:	2b00      	cmp	r3, #0
 801963e:	6073      	str	r3, [r6, #4]
 8019640:	dd1b      	ble.n	801967a <_scanf_i+0x152>
 8019642:	6833      	ldr	r3, [r6, #0]
 8019644:	3301      	adds	r3, #1
 8019646:	6033      	str	r3, [r6, #0]
 8019648:	68a3      	ldr	r3, [r4, #8]
 801964a:	3b01      	subs	r3, #1
 801964c:	60a3      	str	r3, [r4, #8]
 801964e:	e7dc      	b.n	801960a <_scanf_i+0xe2>
 8019650:	f1b8 0f02 	cmp.w	r8, #2
 8019654:	d1ad      	bne.n	80195b2 <_scanf_i+0x8a>
 8019656:	6822      	ldr	r2, [r4, #0]
 8019658:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801965c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019660:	d1bf      	bne.n	80195e2 <_scanf_i+0xba>
 8019662:	2110      	movs	r1, #16
 8019664:	6061      	str	r1, [r4, #4]
 8019666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801966a:	e7a1      	b.n	80195b0 <_scanf_i+0x88>
 801966c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019670:	6022      	str	r2, [r4, #0]
 8019672:	780b      	ldrb	r3, [r1, #0]
 8019674:	702b      	strb	r3, [r5, #0]
 8019676:	3501      	adds	r5, #1
 8019678:	e7de      	b.n	8019638 <_scanf_i+0x110>
 801967a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801967e:	4631      	mov	r1, r6
 8019680:	4658      	mov	r0, fp
 8019682:	4798      	blx	r3
 8019684:	2800      	cmp	r0, #0
 8019686:	d0df      	beq.n	8019648 <_scanf_i+0x120>
 8019688:	6823      	ldr	r3, [r4, #0]
 801968a:	05d9      	lsls	r1, r3, #23
 801968c:	d50c      	bpl.n	80196a8 <_scanf_i+0x180>
 801968e:	454d      	cmp	r5, r9
 8019690:	d908      	bls.n	80196a4 <_scanf_i+0x17c>
 8019692:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019696:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801969a:	4632      	mov	r2, r6
 801969c:	4658      	mov	r0, fp
 801969e:	4798      	blx	r3
 80196a0:	1e6f      	subs	r7, r5, #1
 80196a2:	463d      	mov	r5, r7
 80196a4:	454d      	cmp	r5, r9
 80196a6:	d029      	beq.n	80196fc <_scanf_i+0x1d4>
 80196a8:	6822      	ldr	r2, [r4, #0]
 80196aa:	f012 0210 	ands.w	r2, r2, #16
 80196ae:	d113      	bne.n	80196d8 <_scanf_i+0x1b0>
 80196b0:	702a      	strb	r2, [r5, #0]
 80196b2:	6863      	ldr	r3, [r4, #4]
 80196b4:	9e00      	ldr	r6, [sp, #0]
 80196b6:	4649      	mov	r1, r9
 80196b8:	4658      	mov	r0, fp
 80196ba:	47b0      	blx	r6
 80196bc:	f8da 3000 	ldr.w	r3, [sl]
 80196c0:	6821      	ldr	r1, [r4, #0]
 80196c2:	1d1a      	adds	r2, r3, #4
 80196c4:	f8ca 2000 	str.w	r2, [sl]
 80196c8:	f011 0f20 	tst.w	r1, #32
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	d010      	beq.n	80196f2 <_scanf_i+0x1ca>
 80196d0:	6018      	str	r0, [r3, #0]
 80196d2:	68e3      	ldr	r3, [r4, #12]
 80196d4:	3301      	adds	r3, #1
 80196d6:	60e3      	str	r3, [r4, #12]
 80196d8:	eba5 0509 	sub.w	r5, r5, r9
 80196dc:	44a8      	add	r8, r5
 80196de:	6925      	ldr	r5, [r4, #16]
 80196e0:	4445      	add	r5, r8
 80196e2:	6125      	str	r5, [r4, #16]
 80196e4:	2000      	movs	r0, #0
 80196e6:	b007      	add	sp, #28
 80196e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ec:	f04f 0800 	mov.w	r8, #0
 80196f0:	e7ca      	b.n	8019688 <_scanf_i+0x160>
 80196f2:	07ca      	lsls	r2, r1, #31
 80196f4:	bf4c      	ite	mi
 80196f6:	8018      	strhmi	r0, [r3, #0]
 80196f8:	6018      	strpl	r0, [r3, #0]
 80196fa:	e7ea      	b.n	80196d2 <_scanf_i+0x1aa>
 80196fc:	2001      	movs	r0, #1
 80196fe:	e7f2      	b.n	80196e6 <_scanf_i+0x1be>
 8019700:	0801a024 	.word	0x0801a024
 8019704:	08017149 	.word	0x08017149
 8019708:	080198ad 	.word	0x080198ad
 801970c:	0801a4e5 	.word	0x0801a4e5

08019710 <_sbrk_r>:
 8019710:	b538      	push	{r3, r4, r5, lr}
 8019712:	4c06      	ldr	r4, [pc, #24]	; (801972c <_sbrk_r+0x1c>)
 8019714:	2300      	movs	r3, #0
 8019716:	4605      	mov	r5, r0
 8019718:	4608      	mov	r0, r1
 801971a:	6023      	str	r3, [r4, #0]
 801971c:	f7ed fe4c 	bl	80073b8 <_sbrk>
 8019720:	1c43      	adds	r3, r0, #1
 8019722:	d102      	bne.n	801972a <_sbrk_r+0x1a>
 8019724:	6823      	ldr	r3, [r4, #0]
 8019726:	b103      	cbz	r3, 801972a <_sbrk_r+0x1a>
 8019728:	602b      	str	r3, [r5, #0]
 801972a:	bd38      	pop	{r3, r4, r5, pc}
 801972c:	20045d34 	.word	0x20045d34

08019730 <__sccl>:
 8019730:	b570      	push	{r4, r5, r6, lr}
 8019732:	780b      	ldrb	r3, [r1, #0]
 8019734:	2b5e      	cmp	r3, #94	; 0x5e
 8019736:	bf13      	iteet	ne
 8019738:	1c4a      	addne	r2, r1, #1
 801973a:	1c8a      	addeq	r2, r1, #2
 801973c:	784b      	ldrbeq	r3, [r1, #1]
 801973e:	2100      	movne	r1, #0
 8019740:	bf08      	it	eq
 8019742:	2101      	moveq	r1, #1
 8019744:	1e44      	subs	r4, r0, #1
 8019746:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801974a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801974e:	42ac      	cmp	r4, r5
 8019750:	d1fb      	bne.n	801974a <__sccl+0x1a>
 8019752:	b913      	cbnz	r3, 801975a <__sccl+0x2a>
 8019754:	3a01      	subs	r2, #1
 8019756:	4610      	mov	r0, r2
 8019758:	bd70      	pop	{r4, r5, r6, pc}
 801975a:	f081 0401 	eor.w	r4, r1, #1
 801975e:	54c4      	strb	r4, [r0, r3]
 8019760:	1c51      	adds	r1, r2, #1
 8019762:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019766:	2d2d      	cmp	r5, #45	; 0x2d
 8019768:	f101 36ff 	add.w	r6, r1, #4294967295
 801976c:	460a      	mov	r2, r1
 801976e:	d006      	beq.n	801977e <__sccl+0x4e>
 8019770:	2d5d      	cmp	r5, #93	; 0x5d
 8019772:	d0f0      	beq.n	8019756 <__sccl+0x26>
 8019774:	b90d      	cbnz	r5, 801977a <__sccl+0x4a>
 8019776:	4632      	mov	r2, r6
 8019778:	e7ed      	b.n	8019756 <__sccl+0x26>
 801977a:	462b      	mov	r3, r5
 801977c:	e7ef      	b.n	801975e <__sccl+0x2e>
 801977e:	780e      	ldrb	r6, [r1, #0]
 8019780:	2e5d      	cmp	r6, #93	; 0x5d
 8019782:	d0fa      	beq.n	801977a <__sccl+0x4a>
 8019784:	42b3      	cmp	r3, r6
 8019786:	dcf8      	bgt.n	801977a <__sccl+0x4a>
 8019788:	3301      	adds	r3, #1
 801978a:	429e      	cmp	r6, r3
 801978c:	54c4      	strb	r4, [r0, r3]
 801978e:	dcfb      	bgt.n	8019788 <__sccl+0x58>
 8019790:	3102      	adds	r1, #2
 8019792:	e7e6      	b.n	8019762 <__sccl+0x32>

08019794 <strncmp>:
 8019794:	b510      	push	{r4, lr}
 8019796:	b16a      	cbz	r2, 80197b4 <strncmp+0x20>
 8019798:	3901      	subs	r1, #1
 801979a:	1884      	adds	r4, r0, r2
 801979c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80197a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80197a4:	4293      	cmp	r3, r2
 80197a6:	d103      	bne.n	80197b0 <strncmp+0x1c>
 80197a8:	42a0      	cmp	r0, r4
 80197aa:	d001      	beq.n	80197b0 <strncmp+0x1c>
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d1f5      	bne.n	801979c <strncmp+0x8>
 80197b0:	1a98      	subs	r0, r3, r2
 80197b2:	bd10      	pop	{r4, pc}
 80197b4:	4610      	mov	r0, r2
 80197b6:	e7fc      	b.n	80197b2 <strncmp+0x1e>

080197b8 <_strtoul_l.isra.0>:
 80197b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197bc:	4680      	mov	r8, r0
 80197be:	4689      	mov	r9, r1
 80197c0:	4692      	mov	sl, r2
 80197c2:	461e      	mov	r6, r3
 80197c4:	460f      	mov	r7, r1
 80197c6:	463d      	mov	r5, r7
 80197c8:	9808      	ldr	r0, [sp, #32]
 80197ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80197ce:	f7fe fe59 	bl	8018484 <__locale_ctype_ptr_l>
 80197d2:	4420      	add	r0, r4
 80197d4:	7843      	ldrb	r3, [r0, #1]
 80197d6:	f013 0308 	ands.w	r3, r3, #8
 80197da:	d130      	bne.n	801983e <_strtoul_l.isra.0+0x86>
 80197dc:	2c2d      	cmp	r4, #45	; 0x2d
 80197de:	d130      	bne.n	8019842 <_strtoul_l.isra.0+0x8a>
 80197e0:	787c      	ldrb	r4, [r7, #1]
 80197e2:	1cbd      	adds	r5, r7, #2
 80197e4:	2101      	movs	r1, #1
 80197e6:	2e00      	cmp	r6, #0
 80197e8:	d05c      	beq.n	80198a4 <_strtoul_l.isra.0+0xec>
 80197ea:	2e10      	cmp	r6, #16
 80197ec:	d109      	bne.n	8019802 <_strtoul_l.isra.0+0x4a>
 80197ee:	2c30      	cmp	r4, #48	; 0x30
 80197f0:	d107      	bne.n	8019802 <_strtoul_l.isra.0+0x4a>
 80197f2:	782b      	ldrb	r3, [r5, #0]
 80197f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80197f8:	2b58      	cmp	r3, #88	; 0x58
 80197fa:	d14e      	bne.n	801989a <_strtoul_l.isra.0+0xe2>
 80197fc:	786c      	ldrb	r4, [r5, #1]
 80197fe:	2610      	movs	r6, #16
 8019800:	3502      	adds	r5, #2
 8019802:	f04f 32ff 	mov.w	r2, #4294967295
 8019806:	2300      	movs	r3, #0
 8019808:	fbb2 f2f6 	udiv	r2, r2, r6
 801980c:	fb06 fc02 	mul.w	ip, r6, r2
 8019810:	ea6f 0c0c 	mvn.w	ip, ip
 8019814:	4618      	mov	r0, r3
 8019816:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801981a:	2f09      	cmp	r7, #9
 801981c:	d817      	bhi.n	801984e <_strtoul_l.isra.0+0x96>
 801981e:	463c      	mov	r4, r7
 8019820:	42a6      	cmp	r6, r4
 8019822:	dd23      	ble.n	801986c <_strtoul_l.isra.0+0xb4>
 8019824:	2b00      	cmp	r3, #0
 8019826:	db1e      	blt.n	8019866 <_strtoul_l.isra.0+0xae>
 8019828:	4282      	cmp	r2, r0
 801982a:	d31c      	bcc.n	8019866 <_strtoul_l.isra.0+0xae>
 801982c:	d101      	bne.n	8019832 <_strtoul_l.isra.0+0x7a>
 801982e:	45a4      	cmp	ip, r4
 8019830:	db19      	blt.n	8019866 <_strtoul_l.isra.0+0xae>
 8019832:	fb00 4006 	mla	r0, r0, r6, r4
 8019836:	2301      	movs	r3, #1
 8019838:	f815 4b01 	ldrb.w	r4, [r5], #1
 801983c:	e7eb      	b.n	8019816 <_strtoul_l.isra.0+0x5e>
 801983e:	462f      	mov	r7, r5
 8019840:	e7c1      	b.n	80197c6 <_strtoul_l.isra.0+0xe>
 8019842:	2c2b      	cmp	r4, #43	; 0x2b
 8019844:	bf04      	itt	eq
 8019846:	1cbd      	addeq	r5, r7, #2
 8019848:	787c      	ldrbeq	r4, [r7, #1]
 801984a:	4619      	mov	r1, r3
 801984c:	e7cb      	b.n	80197e6 <_strtoul_l.isra.0+0x2e>
 801984e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019852:	2f19      	cmp	r7, #25
 8019854:	d801      	bhi.n	801985a <_strtoul_l.isra.0+0xa2>
 8019856:	3c37      	subs	r4, #55	; 0x37
 8019858:	e7e2      	b.n	8019820 <_strtoul_l.isra.0+0x68>
 801985a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801985e:	2f19      	cmp	r7, #25
 8019860:	d804      	bhi.n	801986c <_strtoul_l.isra.0+0xb4>
 8019862:	3c57      	subs	r4, #87	; 0x57
 8019864:	e7dc      	b.n	8019820 <_strtoul_l.isra.0+0x68>
 8019866:	f04f 33ff 	mov.w	r3, #4294967295
 801986a:	e7e5      	b.n	8019838 <_strtoul_l.isra.0+0x80>
 801986c:	2b00      	cmp	r3, #0
 801986e:	da09      	bge.n	8019884 <_strtoul_l.isra.0+0xcc>
 8019870:	2322      	movs	r3, #34	; 0x22
 8019872:	f8c8 3000 	str.w	r3, [r8]
 8019876:	f04f 30ff 	mov.w	r0, #4294967295
 801987a:	f1ba 0f00 	cmp.w	sl, #0
 801987e:	d107      	bne.n	8019890 <_strtoul_l.isra.0+0xd8>
 8019880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019884:	b101      	cbz	r1, 8019888 <_strtoul_l.isra.0+0xd0>
 8019886:	4240      	negs	r0, r0
 8019888:	f1ba 0f00 	cmp.w	sl, #0
 801988c:	d0f8      	beq.n	8019880 <_strtoul_l.isra.0+0xc8>
 801988e:	b10b      	cbz	r3, 8019894 <_strtoul_l.isra.0+0xdc>
 8019890:	f105 39ff 	add.w	r9, r5, #4294967295
 8019894:	f8ca 9000 	str.w	r9, [sl]
 8019898:	e7f2      	b.n	8019880 <_strtoul_l.isra.0+0xc8>
 801989a:	2430      	movs	r4, #48	; 0x30
 801989c:	2e00      	cmp	r6, #0
 801989e:	d1b0      	bne.n	8019802 <_strtoul_l.isra.0+0x4a>
 80198a0:	2608      	movs	r6, #8
 80198a2:	e7ae      	b.n	8019802 <_strtoul_l.isra.0+0x4a>
 80198a4:	2c30      	cmp	r4, #48	; 0x30
 80198a6:	d0a4      	beq.n	80197f2 <_strtoul_l.isra.0+0x3a>
 80198a8:	260a      	movs	r6, #10
 80198aa:	e7aa      	b.n	8019802 <_strtoul_l.isra.0+0x4a>

080198ac <_strtoul_r>:
 80198ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198ae:	4c06      	ldr	r4, [pc, #24]	; (80198c8 <_strtoul_r+0x1c>)
 80198b0:	4d06      	ldr	r5, [pc, #24]	; (80198cc <_strtoul_r+0x20>)
 80198b2:	6824      	ldr	r4, [r4, #0]
 80198b4:	6a24      	ldr	r4, [r4, #32]
 80198b6:	2c00      	cmp	r4, #0
 80198b8:	bf08      	it	eq
 80198ba:	462c      	moveq	r4, r5
 80198bc:	9400      	str	r4, [sp, #0]
 80198be:	f7ff ff7b 	bl	80197b8 <_strtoul_l.isra.0>
 80198c2:	b003      	add	sp, #12
 80198c4:	bd30      	pop	{r4, r5, pc}
 80198c6:	bf00      	nop
 80198c8:	2000000c 	.word	0x2000000c
 80198cc:	20000070 	.word	0x20000070

080198d0 <__submore>:
 80198d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198d4:	460c      	mov	r4, r1
 80198d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80198d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198dc:	4299      	cmp	r1, r3
 80198de:	d11d      	bne.n	801991c <__submore+0x4c>
 80198e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80198e4:	f7ff fa66 	bl	8018db4 <_malloc_r>
 80198e8:	b918      	cbnz	r0, 80198f2 <__submore+0x22>
 80198ea:	f04f 30ff 	mov.w	r0, #4294967295
 80198ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80198f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80198f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80198fc:	6360      	str	r0, [r4, #52]	; 0x34
 80198fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019902:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019906:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801990a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801990e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019912:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019916:	6020      	str	r0, [r4, #0]
 8019918:	2000      	movs	r0, #0
 801991a:	e7e8      	b.n	80198ee <__submore+0x1e>
 801991c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801991e:	0077      	lsls	r7, r6, #1
 8019920:	463a      	mov	r2, r7
 8019922:	f000 f837 	bl	8019994 <_realloc_r>
 8019926:	4605      	mov	r5, r0
 8019928:	2800      	cmp	r0, #0
 801992a:	d0de      	beq.n	80198ea <__submore+0x1a>
 801992c:	eb00 0806 	add.w	r8, r0, r6
 8019930:	4601      	mov	r1, r0
 8019932:	4632      	mov	r2, r6
 8019934:	4640      	mov	r0, r8
 8019936:	f7fb fe8b 	bl	8015650 <memcpy>
 801993a:	f8c4 8000 	str.w	r8, [r4]
 801993e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019942:	e7e9      	b.n	8019918 <__submore+0x48>

08019944 <__ascii_wctomb>:
 8019944:	b149      	cbz	r1, 801995a <__ascii_wctomb+0x16>
 8019946:	2aff      	cmp	r2, #255	; 0xff
 8019948:	bf85      	ittet	hi
 801994a:	238a      	movhi	r3, #138	; 0x8a
 801994c:	6003      	strhi	r3, [r0, #0]
 801994e:	700a      	strbls	r2, [r1, #0]
 8019950:	f04f 30ff 	movhi.w	r0, #4294967295
 8019954:	bf98      	it	ls
 8019956:	2001      	movls	r0, #1
 8019958:	4770      	bx	lr
 801995a:	4608      	mov	r0, r1
 801995c:	4770      	bx	lr

0801995e <memmove>:
 801995e:	4288      	cmp	r0, r1
 8019960:	b510      	push	{r4, lr}
 8019962:	eb01 0302 	add.w	r3, r1, r2
 8019966:	d807      	bhi.n	8019978 <memmove+0x1a>
 8019968:	1e42      	subs	r2, r0, #1
 801996a:	4299      	cmp	r1, r3
 801996c:	d00a      	beq.n	8019984 <memmove+0x26>
 801996e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019972:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019976:	e7f8      	b.n	801996a <memmove+0xc>
 8019978:	4283      	cmp	r3, r0
 801997a:	d9f5      	bls.n	8019968 <memmove+0xa>
 801997c:	1881      	adds	r1, r0, r2
 801997e:	1ad2      	subs	r2, r2, r3
 8019980:	42d3      	cmn	r3, r2
 8019982:	d100      	bne.n	8019986 <memmove+0x28>
 8019984:	bd10      	pop	{r4, pc}
 8019986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801998a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801998e:	e7f7      	b.n	8019980 <memmove+0x22>

08019990 <__malloc_lock>:
 8019990:	4770      	bx	lr

08019992 <__malloc_unlock>:
 8019992:	4770      	bx	lr

08019994 <_realloc_r>:
 8019994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019996:	4607      	mov	r7, r0
 8019998:	4614      	mov	r4, r2
 801999a:	460e      	mov	r6, r1
 801999c:	b921      	cbnz	r1, 80199a8 <_realloc_r+0x14>
 801999e:	4611      	mov	r1, r2
 80199a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80199a4:	f7ff ba06 	b.w	8018db4 <_malloc_r>
 80199a8:	b922      	cbnz	r2, 80199b4 <_realloc_r+0x20>
 80199aa:	f7ff f9b5 	bl	8018d18 <_free_r>
 80199ae:	4625      	mov	r5, r4
 80199b0:	4628      	mov	r0, r5
 80199b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199b4:	f000 f814 	bl	80199e0 <_malloc_usable_size_r>
 80199b8:	42a0      	cmp	r0, r4
 80199ba:	d20f      	bcs.n	80199dc <_realloc_r+0x48>
 80199bc:	4621      	mov	r1, r4
 80199be:	4638      	mov	r0, r7
 80199c0:	f7ff f9f8 	bl	8018db4 <_malloc_r>
 80199c4:	4605      	mov	r5, r0
 80199c6:	2800      	cmp	r0, #0
 80199c8:	d0f2      	beq.n	80199b0 <_realloc_r+0x1c>
 80199ca:	4631      	mov	r1, r6
 80199cc:	4622      	mov	r2, r4
 80199ce:	f7fb fe3f 	bl	8015650 <memcpy>
 80199d2:	4631      	mov	r1, r6
 80199d4:	4638      	mov	r0, r7
 80199d6:	f7ff f99f 	bl	8018d18 <_free_r>
 80199da:	e7e9      	b.n	80199b0 <_realloc_r+0x1c>
 80199dc:	4635      	mov	r5, r6
 80199de:	e7e7      	b.n	80199b0 <_realloc_r+0x1c>

080199e0 <_malloc_usable_size_r>:
 80199e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199e4:	1f18      	subs	r0, r3, #4
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	bfbc      	itt	lt
 80199ea:	580b      	ldrlt	r3, [r1, r0]
 80199ec:	18c0      	addlt	r0, r0, r3
 80199ee:	4770      	bx	lr

080199f0 <_init>:
 80199f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199f2:	bf00      	nop
 80199f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199f6:	bc08      	pop	{r3}
 80199f8:	469e      	mov	lr, r3
 80199fa:	4770      	bx	lr

080199fc <_fini>:
 80199fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199fe:	bf00      	nop
 8019a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a02:	bc08      	pop	{r3}
 8019a04:	469e      	mov	lr, r3
 8019a06:	4770      	bx	lr
