
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a64  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a0c  08019c28  08019c28  00029c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a634  0801a634  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a634  0801a634  0002a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a63c  0801a63c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a63c  0801a63c  0002a63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a644  0801a644  0002a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a648  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c9b0  200001e0  0801a824  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2004cb90  0801a824  0003cb90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1b1  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00075330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  000773a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026601  00000000  00000000  000ac854  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110c8  00000000  00000000  000d2e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a764  00000000  00000000  001e3f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019c0c 	.word	0x08019c0c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019c0c 	.word	0x08019c0c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fabe 	bl	800b558 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2004a688 	.word	0x2004a688

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a faa6 	bl	800b558 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2004a688 	.word	0x2004a688

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f947 	bl	800b2b4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 feae 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fea8 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fea2 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fe9c 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fe96 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fe90 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fe8a 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fe84 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fe7e 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fe78 	bl	8009d88 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fe6c 	bl	8009d88 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fe66 	bl	8009d88 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f939 	bl	80173a0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d ff76 	bl	800f0e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d ff72 	bl	800f0e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d ff6e 	bl	800f0e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d ff6a 	bl	800f0e8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004a774 	.word	0x2004a774
 8001248:	2004a6dc 	.word	0x2004a6dc
 800124c:	2004a7fc 	.word	0x2004a7fc

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004a774 	.word	0x2004a774
 800137c:	2004a7fc 	.word	0x2004a7fc
 8001380:	2004a6dc 	.word	0x2004a6dc

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004a774 	.word	0x2004a774
 80013c4:	2004a6dc 	.word	0x2004a6dc
 80013c8:	2004a7fc 	.word	0x2004a7fc

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d ff2a 	bl	800f288 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d ff26 	bl	800f288 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2004a8dc 	.word	0x2004a8dc
 8001458:	2004a5c0 	.word	0x2004a5c0
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <_ZN7Encoder6updateEv+0x100>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800156c <_ZN7Encoder6updateEv+0x104>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001570 <_ZN7Encoder6updateEv+0x108>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <_ZN7Encoder6updateEv+0x10c>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800156c <_ZN7Encoder6updateEv+0x104>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001570 <_ZN7Encoder6updateEv+0x108>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	4a31      	ldr	r2, [pc, #196]	; (8001578 <_ZN7Encoder6updateEv+0x110>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = cnt_l;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	605a      	str	r2, [r3, #4]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a321      	add	r3, pc, #132	; (adr r3, 8001560 <_ZN7Encoder6updateEv+0xf8>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4618      	mov	r0, r3
 80014ea:	4621      	mov	r1, r4
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f4:	f7ff f9c2 	bl	800087c <__aeabi_ddiv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	4618      	mov	r0, r3
 80014fe:	4621      	mov	r1, r4
 8001500:	f7ff fb8a 	bl	8000c18 <__aeabi_d2f>
 8001504:	4602      	mov	r2, r0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	edd3 7a02 	vldr	s15, [r3, #8]
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	ed93 7a06 	vldr	s14, [r3, #24]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	edd3 7a02 	vldr	s15, [r3, #8]
 800152c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	ed93 7a07 	vldr	s14, [r3, #28]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <_ZN7Encoder6updateEv+0x114>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}
 800155c:	f3af 8000 	nop.w
 8001560:	ce73a049 	.word	0xce73a049
 8001564:	3f77a3f6 	.word	0x3f77a3f6
 8001568:	40010000 	.word	0x40010000
 800156c:	47000000 	.word	0x47000000
 8001570:	3f912547 	.word	0x3f912547
 8001574:	40010400 	.word	0x40010400
 8001578:	20000200 	.word	0x20000200
 800157c:	200001fc 	.word	0x200001fc

08001580 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_ZN7Encoder5clearEv+0x3c>)
 800159a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_ZN7Encoder5clearEv+0x40>)
 80015a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40010000 	.word	0x40010000
 80015c0:	40010400 	.word	0x40010400

080015c4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	return distance_;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	ee07 3a90 	vmov	s15, r3
}
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	ee07 3a90 	vmov	s15, r3
}
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	ee07 3a90 	vmov	s15, r3
}
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	619a      	str	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	ee07 3a90 	vmov	s15, r3
}
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f978 	bl	80019dc <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80016ec:	f000 f98c 	bl	8001a08 <fopen_folder_and_file>

	return ret;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001706:	4804      	ldr	r0, [pc, #16]	; (8001718 <user_fclose+0x1c>)
 8001708:	f012 fb18 	bl	8013d3c <f_close>

	return ret;
 800170c:	79fb      	ldrb	r3, [r7, #7]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200494cc 	.word	0x200494cc

0800171c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b087      	sub	sp, #28
 8001720:	af02      	add	r7, sp, #8
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	80fb      	strh	r3, [r7, #6]
 8001728:	4613      	mov	r3, r2
 800172a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001730:	2300      	movs	r3, #0
 8001732:	81fb      	strh	r3, [r7, #14]
 8001734:	e030      	b.n	8001798 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff18 	bl	8000578 <__aeabi_f2d>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	e9cd 3400 	strd	r3, r4, [sp]
 8001750:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <sd_write_float+0x94>)
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	4817      	ldr	r0, [pc, #92]	; (80017b4 <sd_write_float+0x98>)
 8001756:	f014 fed7 	bl	8016508 <sniprintf>

		if(state == ADD_WRITE){
 800175a:	797b      	ldrb	r3, [r7, #5]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <sd_write_float+0x9c>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4619      	mov	r1, r3
 8001766:	4814      	ldr	r0, [pc, #80]	; (80017b8 <sd_write_float+0x9c>)
 8001768:	f012 fb5c 	bl	8013e24 <f_lseek>
 800176c:	e003      	b.n	8001776 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800176e:	2100      	movs	r1, #0
 8001770:	4811      	ldr	r0, [pc, #68]	; (80017b8 <sd_write_float+0x9c>)
 8001772:	f012 fb57 	bl	8013e24 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001776:	480f      	ldr	r0, [pc, #60]	; (80017b4 <sd_write_float+0x98>)
 8001778:	f7fe fd42 	bl	8000200 <strlen>
 800177c:	4602      	mov	r2, r0
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <sd_write_float+0xa0>)
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <sd_write_float+0x98>)
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <sd_write_float+0x9c>)
 8001784:	f012 f8c5 	bl	8013912 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001788:	f000 f958 	bl	8001a3c <bufclear>
	for(short i = 0 ; i < size; i++){
 800178c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001790:	b29b      	uxth	r3, r3
 8001792:	3301      	adds	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	81fb      	strh	r3, [r7, #14]
 8001798:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800179c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbc8      	blt.n	8001736 <sd_write_float+0x1a>
	}
	return ret;
 80017a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	08019c28 	.word	0x08019c28
 80017b4:	2004943c 	.word	0x2004943c
 80017b8:	200494cc 	.word	0x200494cc
 80017bc:	200494bc 	.word	0x200494bc

080017c0 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f900 	bl	80019dc <create_path>

	if(state == OVER_WRITE){
 80017dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d108      	bne.n	80017f6 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80017e4:	4822      	ldr	r0, [pc, #136]	; (8001870 <sd_write_array_float+0xb0>)
 80017e6:	f012 fad3 	bl	8013d90 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80017ea:	4822      	ldr	r0, [pc, #136]	; (8001874 <sd_write_array_float+0xb4>)
 80017ec:	f012 fd3e 	bl	801426c <f_unlink>
		f_chdir("..");
 80017f0:	4821      	ldr	r0, [pc, #132]	; (8001878 <sd_write_array_float+0xb8>)
 80017f2:	f012 facd 	bl	8013d90 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80017f6:	f000 f907 	bl	8001a08 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80017fa:	2300      	movs	r3, #0
 80017fc:	82fb      	strh	r3, [r7, #22]
 80017fe:	e028      	b.n	8001852 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001800:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe feb3 	bl	8000578 <__aeabi_f2d>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	e9cd 3400 	strd	r3, r4, [sp]
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <sd_write_array_float+0xbc>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	4818      	ldr	r0, [pc, #96]	; (8001880 <sd_write_array_float+0xc0>)
 8001820:	f014 fe72 	bl	8016508 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <sd_write_array_float+0xc4>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4619      	mov	r1, r3
 800182a:	4816      	ldr	r0, [pc, #88]	; (8001884 <sd_write_array_float+0xc4>)
 800182c:	f012 fafa 	bl	8013e24 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <sd_write_array_float+0xc0>)
 8001832:	f7fe fce5 	bl	8000200 <strlen>
 8001836:	4602      	mov	r2, r0
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <sd_write_array_float+0xc8>)
 800183a:	4911      	ldr	r1, [pc, #68]	; (8001880 <sd_write_array_float+0xc0>)
 800183c:	4811      	ldr	r0, [pc, #68]	; (8001884 <sd_write_array_float+0xc4>)
 800183e:	f012 f868 	bl	8013912 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001842:	f000 f8fb 	bl	8001a3c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001846:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800184a:	b29b      	uxth	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	b29b      	uxth	r3, r3
 8001850:	82fb      	strh	r3, [r7, #22]
 8001852:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbd0      	blt.n	8001800 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800185e:	4809      	ldr	r0, [pc, #36]	; (8001884 <sd_write_array_float+0xc4>)
 8001860:	f012 fa6c 	bl	8013d3c <f_close>

	return ret;
 8001864:	7d7b      	ldrb	r3, [r7, #21]
}
 8001866:	4618      	mov	r0, r3
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	bf00      	nop
 8001870:	2004933c 	.word	0x2004933c
 8001874:	200481fc 	.word	0x200481fc
 8001878:	08019c44 	.word	0x08019c44
 800187c:	08019c28 	.word	0x08019c28
 8001880:	2004943c 	.word	0x2004943c
 8001884:	200494cc 	.word	0x200494cc
 8001888:	200494bc 	.word	0x200494bc

0800188c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f898 	bl	80019dc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80018ac:	f000 f8ac 	bl	8001a08 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018b0:	e019      	b.n	80018e6 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80018b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4913      	ldr	r1, [pc, #76]	; (800190c <sd_read_array_float+0x80>)
 80018c0:	4813      	ldr	r0, [pc, #76]	; (8001910 <sd_read_array_float+0x84>)
 80018c2:	f014 fe75 	bl	80165b0 <siscanf>
		i++;
 80018c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80018d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018da:	429a      	cmp	r2, r3
 80018dc:	db03      	blt.n	80018e6 <sd_read_array_float+0x5a>
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <sd_read_array_float+0x88>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <sd_read_array_float+0x84>)
 80018ec:	f012 fe9c 	bl	8014628 <f_gets>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1dd      	bne.n	80018b2 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80018f6:	f000 f8a1 	bl	8001a3c <bufclear>

	f_close(&fil);	//ファイル閉じる
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <sd_read_array_float+0x88>)
 80018fc:	f012 fa1e 	bl	8013d3c <f_close>

	return ret;
 8001900:	7d7b      	ldrb	r3, [r7, #21]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	08019c34 	.word	0x08019c34
 8001910:	2004943c 	.word	0x2004943c
 8001914:	200494cc 	.word	0x200494cc

08001918 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f852 	bl	80019dc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001938:	f000 f866 	bl	8001a08 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800193c:	e019      	b.n	8001972 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800193e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	4413      	add	r3, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4913      	ldr	r1, [pc, #76]	; (8001998 <sd_read_array_double+0x80>)
 800194c:	4813      	ldr	r0, [pc, #76]	; (800199c <sd_read_array_double+0x84>)
 800194e:	f014 fe2f 	bl	80165b0 <siscanf>
		i++;
 8001952:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001956:	b29b      	uxth	r3, r3
 8001958:	3301      	adds	r3, #1
 800195a:	b29b      	uxth	r3, r3
 800195c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800195e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	429a      	cmp	r2, r3
 8001968:	db03      	blt.n	8001972 <sd_read_array_double+0x5a>
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	3b01      	subs	r3, #1
 800196e:	b29b      	uxth	r3, r3
 8001970:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <sd_read_array_double+0x88>)
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	4809      	ldr	r0, [pc, #36]	; (800199c <sd_read_array_double+0x84>)
 8001978:	f012 fe56 	bl	8014628 <f_gets>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1dd      	bne.n	800193e <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001982:	f000 f85b 	bl	8001a3c <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <sd_read_array_double+0x88>)
 8001988:	f012 f9d8 	bl	8013d3c <f_close>

	return ret;
 800198c:	7d7b      	ldrb	r3, [r7, #21]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	08019c40 	.word	0x08019c40
 800199c:	2004943c 	.word	0x2004943c
 80019a0:	200494cc 	.word	0x200494cc

080019a4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80019ae:	2201      	movs	r2, #1
 80019b0:	4908      	ldr	r1, [pc, #32]	; (80019d4 <sd_mount+0x30>)
 80019b2:	4809      	ldr	r0, [pc, #36]	; (80019d8 <sd_mount+0x34>)
 80019b4:	f011 fc3a 	bl	801322c <f_mount>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <sd_mount+0x20>
 80019be:	2301      	movs	r3, #1
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	e001      	b.n	80019c8 <sd_mount+0x24>
	else ret = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08019c50 	.word	0x08019c50
 80019d8:	200482fc 	.word	0x200482fc

080019dc <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <create_path+0x24>)
 80019ea:	f014 fe0d 	bl	8016608 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <create_path+0x28>)
 80019f2:	f014 fe09 	bl	8016608 <strcpy>

}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2004933c 	.word	0x2004933c
 8001a04:	200481fc 	.word	0x200481fc

08001a08 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <fopen_folder_and_file+0x24>)
 8001a0e:	f012 fcef 	bl	80143f0 <f_mkdir>

	f_chdir(dirpath);
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <fopen_folder_and_file+0x24>)
 8001a14:	f012 f9bc 	bl	8013d90 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001a18:	2213      	movs	r2, #19
 8001a1a:	4905      	ldr	r1, [pc, #20]	; (8001a30 <fopen_folder_and_file+0x28>)
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <fopen_folder_and_file+0x2c>)
 8001a1e:	f011 fc4b 	bl	80132b8 <f_open>

	f_chdir("..");
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <fopen_folder_and_file+0x30>)
 8001a24:	f012 f9b4 	bl	8013d90 <f_chdir>


}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2004933c 	.word	0x2004933c
 8001a30:	200481fc 	.word	0x200481fc
 8001a34:	200494cc 	.word	0x200494cc
 8001a38:	08019c44 	.word	0x08019c44

08001a3c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e007      	b.n	8001a58 <bufclear+0x1c>
		buffer[i] = '\0';
 8001a48:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <bufclear+0x30>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3301      	adds	r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a5c:	ddf4      	ble.n	8001a48 <bufclear+0xc>
	}
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2004943c 	.word	0x2004943c

08001a70 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a8a:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <read_byte+0x54>)
 8001a8c:	f009 fc12 	bl	800b2b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001a90:	f107 010f 	add.w	r1, r7, #15
 8001a94:	2364      	movs	r3, #100	; 0x64
 8001a96:	2201      	movs	r2, #1
 8001a98:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <read_byte+0x58>)
 8001a9a:	f00c fdbb 	bl	800e614 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001a9e:	f107 010e 	add.w	r1, r7, #14
 8001aa2:	2364      	movs	r3, #100	; 0x64
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <read_byte+0x58>)
 8001aa8:	f00c fee8 	bl	800e87c <HAL_SPI_Receive>
	CS_SET;
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab2:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <read_byte+0x54>)
 8001ab4:	f009 fbfe 	bl	800b2b4 <HAL_GPIO_WritePin>

	return val;
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	2004a568 	.word	0x2004a568

08001acc <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <write_byte+0x54>)
 8001aee:	f009 fbe1 	bl	800b2b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001af2:	f107 010f 	add.w	r1, r7, #15
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	2201      	movs	r2, #1
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <write_byte+0x58>)
 8001afc:	f00c fd8a 	bl	800e614 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b00:	1db9      	adds	r1, r7, #6
 8001b02:	2364      	movs	r3, #100	; 0x64
 8001b04:	2201      	movs	r2, #1
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <write_byte+0x58>)
 8001b08:	f00c fd84 	bl	800e614 <HAL_SPI_Transmit>
	CS_SET;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b12:	4803      	ldr	r0, [pc, #12]	; (8001b20 <write_byte+0x54>)
 8001b14:	f009 fbce 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40020400 	.word	0x40020400
 8001b24:	2004a568 	.word	0x2004a568

08001b28 <IMU_init>:

uint16_t IMU_init() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff ff9c 	bl	8001a70 <read_byte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	2be0      	cmp	r3, #224	; 0xe0
 8001b40:	d119      	bne.n	8001b76 <IMU_init+0x4e>
		ret = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001b46:	2101      	movs	r1, #1
 8001b48:	2006      	movs	r0, #6
 8001b4a:	f7ff ffbf 	bl	8001acc <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001b4e:	2110      	movs	r1, #16
 8001b50:	2003      	movs	r0, #3
 8001b52:	f7ff ffbb 	bl	8001acc <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001b56:	2120      	movs	r1, #32
 8001b58:	207f      	movs	r0, #127	; 0x7f
 8001b5a:	f7ff ffb7 	bl	8001acc <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001b5e:	2106      	movs	r1, #6
 8001b60:	2001      	movs	r0, #1
 8001b62:	f7ff ffb3 	bl	8001acc <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001b66:	2106      	movs	r1, #6
 8001b68:	2014      	movs	r0, #20
 8001b6a:	f7ff ffaf 	bl	8001acc <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	207f      	movs	r0, #127	; 0x7f
 8001b72:	f7ff ffab 	bl	8001acc <write_byte>
	}
	return ret;
 8001b76:	88fb      	ldrh	r3, [r7, #6]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <read_gyro_data>:

void read_gyro_data() {
 8001b80:	b598      	push	{r3, r4, r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001b84:	2033      	movs	r0, #51	; 0x33
 8001b86:	f7ff ff73 	bl	8001a70 <read_byte>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b21c      	sxth	r4, r3
 8001b90:	2034      	movs	r0, #52	; 0x34
 8001b92:	f7ff ff6d 	bl	8001a70 <read_byte>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	4323      	orrs	r3, r4
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <read_gyro_data+0x64>)
 8001ba0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001ba2:	2035      	movs	r0, #53	; 0x35
 8001ba4:	f7ff ff64 	bl	8001a70 <read_byte>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21c      	sxth	r4, r3
 8001bae:	2036      	movs	r0, #54	; 0x36
 8001bb0:	f7ff ff5e 	bl	8001a70 <read_byte>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4323      	orrs	r3, r4
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <read_gyro_data+0x68>)
 8001bbe:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001bc0:	2037      	movs	r0, #55	; 0x37
 8001bc2:	f7ff ff55 	bl	8001a70 <read_byte>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21c      	sxth	r4, r3
 8001bcc:	2038      	movs	r0, #56	; 0x38
 8001bce:	f7ff ff4f 	bl	8001a70 <read_byte>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	4323      	orrs	r3, r4
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <read_gyro_data+0x6c>)
 8001bdc:	801a      	strh	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	bd98      	pop	{r3, r4, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2004a504 	.word	0x2004a504
 8001be8:	2004a502 	.word	0x2004a502
 8001bec:	2004a4fc 	.word	0x2004a4fc

08001bf0 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	805a      	strh	r2, [r3, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	809a      	strh	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	80da      	strh	r2, [r3, #6]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	811a      	strh	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	815a      	strh	r2, [r3, #10]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
{

}
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001c3c:	f7ff ff74 	bl	8001b28 <IMU_init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001c44:	f7ff fa2c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff fa38 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <_ZN3IMU4initEv+0x44>)
 8001c52:	f7ff fa5f 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c56:	2101      	movs	r1, #1
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff fa31 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <_ZN3IMU4initEv+0x48>)
 8001c64:	f7ff fa56 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c6c:	f008 f88c 	bl	8009d88 <HAL_Delay>

}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08019c54 	.word	0x08019c54
 8001c7c:	08019c60 	.word	0x08019c60

08001c80 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001c88:	f7ff ff7a 	bl	8001b80 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <_ZN3IMU12updateValuesEv+0xa0>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <_ZN3IMU12updateValuesEv+0xa4>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <_ZN3IMU12updateValuesEv+0xa8>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc4f 	bl	8000554 <__aeabi_i2d>
 8001cb6:	a316      	add	r3, pc, #88	; (adr r3, 8001d10 <_ZN3IMU12updateValuesEv+0x90>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fcb4 	bl	8000628 <__aeabi_dmul>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	4625      	mov	r5, r4
 8001cc6:	461c      	mov	r4, r3
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <_ZN3IMU12updateValuesEv+0xac>)
 8001cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc40 	bl	8000554 <__aeabi_i2d>
 8001cd4:	a310      	add	r3, pc, #64	; (adr r3, 8001d18 <_ZN3IMU12updateValuesEv+0x98>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fca5 	bl	8000628 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fae9 	bl	80002bc <__adddf3>
 8001cea:	4603      	mov	r3, r0
 8001cec:	460c      	mov	r4, r1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	f7fe ff49 	bl	8000b88 <__aeabi_d2iz>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <_ZN3IMU12updateValuesEv+0xac>)
 8001d06:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d10:	47ae147b 	.word	0x47ae147b
 8001d14:	3f847ae1 	.word	0x3f847ae1
 8001d18:	7ae147ae 	.word	0x7ae147ae
 8001d1c:	3fefae14 	.word	0x3fefae14
 8001d20:	2004a504 	.word	0x2004a504
 8001d24:	2004a502 	.word	0x2004a502
 8001d28:	2004a4fc 	.word	0x2004a4fc
 8001d2c:	20000204 	.word	0x20000204

08001d30 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d50:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7fe fc0f 	bl	8000578 <__aeabi_f2d>
 8001d5a:	a316      	add	r3, pc, #88	; (adr r3, 8001db4 <_ZN3IMU8getOmegaEv+0x84>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fd8c 	bl	800087c <__aeabi_ddiv>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4614      	mov	r4, r2
 8001d6a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d6e:	a313      	add	r3, pc, #76	; (adr r3, 8001dbc <_ZN3IMU8getOmegaEv+0x8c>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	f7fe fc56 	bl	8000628 <__aeabi_dmul>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	4618      	mov	r0, r3
 8001d82:	4621      	mov	r1, r4
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <_ZN3IMU8getOmegaEv+0x80>)
 8001d8a:	f7fe fd77 	bl	800087c <__aeabi_ddiv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	460c      	mov	r4, r1
 8001d92:	4618      	mov	r0, r3
 8001d94:	4621      	mov	r1, r4
 8001d96:	f7fe ff3f 	bl	8000c18 <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	ee07 3a90 	vmov	s15, r3
}
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40668000 	.word	0x40668000
 8001db4:	66666666 	.word	0x66666666
 8001db8:	40306666 	.word	0x40306666
 8001dbc:	54411744 	.word	0x54411744
 8001dc0:	400921fb 	.word	0x400921fb

08001dc4 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	b08b      	sub	sp, #44	; 0x2c
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001dcc:	466b      	mov	r3, sp
 8001dce:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001dd0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001dd4:	f007 ffd8 	bl	8009d88 <HAL_Delay>
	lcd_clear();
 8001dd8:	f7ff f962 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff f96e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001de4:	4840      	ldr	r0, [pc, #256]	; (8001ee8 <_ZN3IMU11calibrationEv+0x124>)
 8001de6:	f7ff f995 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dea:	2101      	movs	r1, #1
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff f967 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001df2:	483e      	ldr	r0, [pc, #248]	; (8001eec <_ZN3IMU11calibrationEv+0x128>)
 8001df4:	f7ff f98e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001df8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001dfc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001dfe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e02:	1e5d      	subs	r5, r3, #1
 8001e04:	61bd      	str	r5, [r7, #24]
 8001e06:	462b      	mov	r3, r5
 8001e08:	3301      	adds	r3, #1
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	f04f 0400 	mov.w	r4, #0
 8001e18:	0154      	lsls	r4, r2, #5
 8001e1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e1e:	014b      	lsls	r3, r1, #5
 8001e20:	462b      	mov	r3, r5
 8001e22:	3301      	adds	r3, #1
 8001e24:	4619      	mov	r1, r3
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	f04f 0400 	mov.w	r4, #0
 8001e32:	0154      	lsls	r4, r2, #5
 8001e34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e38:	014b      	lsls	r3, r1, #5
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	3303      	adds	r3, #3
 8001e42:	3307      	adds	r3, #7
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	ebad 0d03 	sub.w	sp, sp, r3
 8001e4c:	466b      	mov	r3, sp
 8001e4e:	3303      	adds	r3, #3
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001e56:	2300      	movs	r3, #0
 8001e58:	83fb      	strh	r3, [r7, #30]
 8001e5a:	8bfa      	ldrh	r2, [r7, #30]
 8001e5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	da13      	bge.n	8001e8c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e6a:	8bfb      	ldrh	r3, [r7, #30]
 8001e6c:	ee07 2a90 	vmov	s15, r2
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f007 ff82 	bl	8009d88 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001e84:	8bfb      	ldrh	r3, [r7, #30]
 8001e86:	3301      	adds	r3, #1
 8001e88:	83fb      	strh	r3, [r7, #30]
 8001e8a:	e7e6      	b.n	8001e5a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	462b      	mov	r3, r5
 8001e94:	3301      	adds	r3, #1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d00e      	beq.n	8001ec2 <_ZN3IMU11calibrationEv+0xfe>
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	e7ec      	b.n	8001e9c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001ec2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ece:	edd7 6a08 	vldr	s13, [r7, #32]
 8001ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001edc:	46b5      	mov	sp, r6
}
 8001ede:	bf00      	nop
 8001ee0:	372c      	adds	r7, #44	; 0x2c
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	08019c64 	.word	0x08019c64
 8001eec:	08019c70 	.word	0x08019c70

08001ef0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460a      	mov	r2, r1
 8001efa:	71fb      	strb	r3, [r7, #7]
 8001efc:	4613      	mov	r3, r2
 8001efe:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	b299      	uxth	r1, r3
 8001f04:	1dfa      	adds	r2, r7, #7
 8001f06:	2364      	movs	r3, #100	; 0x64
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <INA260_read+0x50>)
 8001f0e:	f009 fb23 	bl	800b558 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	b299      	uxth	r1, r3
 8001f16:	f107 020c 	add.w	r2, r7, #12
 8001f1a:	2364      	movs	r3, #100	; 0x64
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2302      	movs	r3, #2
 8001f20:	4807      	ldr	r0, [pc, #28]	; (8001f40 <INA260_read+0x50>)
 8001f22:	f009 fc17 	bl	800b754 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001f26:	7b3b      	ldrb	r3, [r7, #12]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	7b7b      	ldrb	r3, [r7, #13]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	81fb      	strh	r3, [r7, #14]
	return val;
 8001f36:	89fb      	ldrh	r3, [r7, #14]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2004a71c 	.word	0x2004a71c

08001f44 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	4603      	mov	r3, r0
 8001f58:	71bb      	strb	r3, [r7, #6]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	717b      	strb	r3, [r7, #5]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	733b      	strb	r3, [r7, #12]
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	737b      	strb	r3, [r7, #13]
 8001f6a:	797b      	ldrb	r3, [r7, #5]
 8001f6c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001f6e:	793b      	ldrb	r3, [r7, #4]
 8001f70:	b299      	uxth	r1, r3
 8001f72:	f107 020c 	add.w	r2, r7, #12
 8001f76:	2364      	movs	r3, #100	; 0x64
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <INA260_write+0x48>)
 8001f7e:	f009 faeb 	bl	800b558 <HAL_I2C_Master_Transmit>
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2004a71c 	.word	0x2004a71c

08001f90 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	71bb      	strb	r3, [r7, #6]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001fa2:	797b      	ldrb	r3, [r7, #5]
 8001fa4:	79ba      	ldrb	r2, [r7, #6]
 8001fa6:	79f9      	ldrb	r1, [r7, #7]
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ffcb 	bl	8001f44 <INA260_write>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	21df      	movs	r1, #223	; 0xdf
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff ffe2 	bl	8001f90 <setConfig>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
{

}
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ffc:	482a      	ldr	r0, [pc, #168]	; (80020a8 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ffe:	f009 f941 	bl	800b284 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <_ZN8JoyStick8getValueEv+0x2e>
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800201a:	2101      	movs	r1, #1
 800201c:	4823      	ldr	r0, [pc, #140]	; (80020ac <_ZN8JoyStick8getValueEv+0xc0>)
 800201e:	f009 f931 	bl	800b284 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <_ZN8JoyStick8getValueEv+0x4e>
 8002032:	89fb      	ldrh	r3, [r7, #14]
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800203a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203e:	481a      	ldr	r0, [pc, #104]	; (80020a8 <_ZN8JoyStick8getValueEv+0xbc>)
 8002040:	f009 f920 	bl	800b284 <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <_ZN8JoyStick8getValueEv+0x70>
 8002054:	89fb      	ldrh	r3, [r7, #14]
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800205c:	2104      	movs	r1, #4
 800205e:	4814      	ldr	r0, [pc, #80]	; (80020b0 <_ZN8JoyStick8getValueEv+0xc4>)
 8002060:	f009 f910 	bl	800b284 <HAL_GPIO_ReadPin>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <_ZN8JoyStick8getValueEv+0x90>
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	480a      	ldr	r0, [pc, #40]	; (80020a8 <_ZN8JoyStick8getValueEv+0xbc>)
 8002080:	f009 f900 	bl	800b284 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <_ZN8JoyStick8getValueEv+0xb0>
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	f043 0310 	orr.w	r3, r3, #16
 800209a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800209c:	89fb      	ldrh	r3, [r7, #14]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40020c00 	.word	0x40020c00
 80020b0:	40020400 	.word	0x40020400

080020b4 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b52      	cmp	r3, #82	; 0x52
 80020c4:	d112      	bne.n	80020ec <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020cc:	4856      	ldr	r0, [pc, #344]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80020ce:	f009 f8f1 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020d2:	2201      	movs	r2, #1
 80020d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020d8:	4853      	ldr	r0, [pc, #332]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80020da:	f009 f8eb 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020de:	2201      	movs	r2, #1
 80020e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e4:	4850      	ldr	r0, [pc, #320]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80020e6:	f009 f8e5 	bl	800b2b4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80020ea:	e098      	b.n	800221e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	2b47      	cmp	r3, #71	; 0x47
 80020f0:	d112      	bne.n	8002118 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f8:	484b      	ldr	r0, [pc, #300]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80020fa:	f009 f8db 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002104:	4848      	ldr	r0, [pc, #288]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 8002106:	f009 f8d5 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800210a:	2201      	movs	r2, #1
 800210c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002110:	4845      	ldr	r0, [pc, #276]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 8002112:	f009 f8cf 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 8002116:	e082      	b.n	800221e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	2b42      	cmp	r3, #66	; 0x42
 800211c:	d112      	bne.n	8002144 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002124:	4840      	ldr	r0, [pc, #256]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 8002126:	f009 f8c5 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002130:	483d      	ldr	r0, [pc, #244]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 8002132:	f009 f8bf 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213c:	483a      	ldr	r0, [pc, #232]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 800213e:	f009 f8b9 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 8002142:	e06c      	b.n	800221e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	2b43      	cmp	r3, #67	; 0x43
 8002148:	d112      	bne.n	8002170 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 8002152:	f009 f8af 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800215c:	4832      	ldr	r0, [pc, #200]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 800215e:	f009 f8a9 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002168:	482f      	ldr	r0, [pc, #188]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 800216a:	f009 f8a3 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 800216e:	e056      	b.n	800221e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	2b4d      	cmp	r3, #77	; 0x4d
 8002174:	d112      	bne.n	800219c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800217c:	482a      	ldr	r0, [pc, #168]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 800217e:	f009 f899 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002188:	4827      	ldr	r0, [pc, #156]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 800218a:	f009 f893 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002194:	4824      	ldr	r0, [pc, #144]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 8002196:	f009 f88d 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 800219a:	e040      	b.n	800221e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	2b59      	cmp	r3, #89	; 0x59
 80021a0:	d112      	bne.n	80021c8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a8:	481f      	ldr	r0, [pc, #124]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80021aa:	f009 f883 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b4:	481c      	ldr	r0, [pc, #112]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80021b6:	f009 f87d 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c0:	4819      	ldr	r0, [pc, #100]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80021c2:	f009 f877 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 80021c6:	e02a      	b.n	800221e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	2b57      	cmp	r3, #87	; 0x57
 80021cc:	d112      	bne.n	80021f4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d4:	4814      	ldr	r0, [pc, #80]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80021d6:	f009 f86d 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80021e2:	f009 f867 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ec:	480e      	ldr	r0, [pc, #56]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 80021ee:	f009 f861 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 80021f2:	e014      	b.n	800221e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	2b7e      	cmp	r3, #126	; 0x7e
 80021f8:	d111      	bne.n	800221e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002200:	4809      	ldr	r0, [pc, #36]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 8002202:	f009 f857 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220c:	4806      	ldr	r0, [pc, #24]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 800220e:	f009 f851 	bl	800b2b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <_ZN3LED9fullColorEc+0x174>)
 800221a:	f009 f84b 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020000 	.word	0x40020000

0800222c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
 8002238:	4613      	mov	r3, r2
 800223a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800223c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002244:	2201      	movs	r2, #1
 8002246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224a:	4813      	ldr	r0, [pc, #76]	; (8002298 <_ZN3LED2LREaa+0x6c>)
 800224c:	f009 f832 	bl	800b2b4 <HAL_GPIO_WritePin>
 8002250:	e009      	b.n	8002266 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <_ZN3LED2LREaa+0x6c>)
 8002262:	f009 f827 	bl	800b2b4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002266:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d106      	bne.n	800227c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002274:	4808      	ldr	r0, [pc, #32]	; (8002298 <_ZN3LED2LREaa+0x6c>)
 8002276:	f009 f81d 	bl	800b2b4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800227a:	e009      	b.n	8002290 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800227c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 7100 	mov.w	r1, #512	; 0x200
 800228a:	4803      	ldr	r0, [pc, #12]	; (8002298 <_ZN3LED2LREaa+0x6c>)
 800228c:	f009 f812 	bl	800b2b4 <HAL_GPIO_WritePin>
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40020000 	.word	0x40020000

0800229c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800229c:	b580      	push	{r7, lr}
 800229e:	b092      	sub	sp, #72	; 0x48
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fe92 	bl	8001fd4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
 80022b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	331c      	adds	r3, #28
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
 80022be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d008      	beq.n	80022d8 <_ZN10LineSensorC1Ev+0x3c>
 80022c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	2200      	movs	r2, #0
 80022ce:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80022d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d2:	3302      	adds	r3, #2
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
 80022d6:	e7f2      	b.n	80022be <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	643b      	str	r3, [r7, #64]	; 0x40
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	3338      	adds	r3, #56	; 0x38
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d009      	beq.n	8002306 <_ZN10LineSensorC1Ev+0x6a>
 80022f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f4:	623b      	str	r3, [r7, #32]
		s = 0;
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80022fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002300:	3304      	adds	r3, #4
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
 8002304:	e7f1      	b.n	80022ea <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3338      	adds	r3, #56	; 0x38
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	d009      	beq.n	8002334 <_ZN10LineSensorC1Ev+0x98>
 8002320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002322:	617b      	str	r3, [r7, #20]
		m = 0;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800232c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232e:	3304      	adds	r3, #4
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002332:	e7f1      	b.n	8002318 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	3338      	adds	r3, #56	; 0x38
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	429a      	cmp	r2, r3
 800234c:	d009      	beq.n	8002362 <_ZN10LineSensorC1Ev+0xc6>
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002358:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	3304      	adds	r3, #4
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002360:	e7f1      	b.n	8002346 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4618      	mov	r0, r3
 8002366:	3748      	adds	r7, #72	; 0x48
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	220e      	movs	r2, #14
 8002378:	4619      	mov	r1, r3
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800237c:	f007 fd6a 	bl	8009e54 <HAL_ADC_Start_DMA>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2004a640 	.word	0x2004a640

0800238c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b0d      	cmp	r3, #13
 800239c:	dc2f      	bgt.n	80023fe <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3392      	adds	r3, #146	; 0x92
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	33a0      	adds	r3, #160	; 0xa0
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a5b      	subs	r3, r3, r1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	68f9      	ldr	r1, [r7, #12]
 80023e8:	440b      	add	r3, r1
 80023ea:	3306      	adds	r3, #6
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3304      	adds	r3, #4
 80023f2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e7cc      	b.n	8002398 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002408:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b09      	cmp	r3, #9
 8002410:	d902      	bls.n	8002418 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]


}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20000206 	.word	0x20000206

08002428 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002428:	b490      	push	{r4, r7}
 800242a:	b08e      	sub	sp, #56	; 0x38
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800243a:	2b0d      	cmp	r3, #13
 800243c:	f200 8087 	bhi.w	800254e <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002446:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800244a:	2b09      	cmp	r3, #9
 800244c:	d81c      	bhi.n	8002488 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800244e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002452:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002456:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4423      	add	r3, r4
 8002466:	3306      	adds	r3, #6
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4403      	add	r3, r0
 800246c:	3304      	adds	r3, #4
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	008b      	lsls	r3, r1, #2
 8002472:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002476:	440b      	add	r3, r1
 8002478:	3b30      	subs	r3, #48	; 0x30
 800247a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800247c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002480:	3301      	adds	r3, #1
 8002482:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002486:	e7de      	b.n	8002446 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800248e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002492:	2b09      	cmp	r3, #9
 8002494:	d84d      	bhi.n	8002532 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002496:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800249a:	3301      	adds	r3, #1
 800249c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	d83e      	bhi.n	8002526 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80024a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024b2:	4413      	add	r3, r2
 80024b4:	3b30      	subs	r3, #48	; 0x30
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024c4:	4413      	add	r3, r2
 80024c6:	3b30      	subs	r3, #48	; 0x30
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	d521      	bpl.n	800251a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80024d6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024e0:	4413      	add	r3, r2
 80024e2:	3b30      	subs	r3, #48	; 0x30
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80024e8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80024ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024f6:	440a      	add	r2, r1
 80024f8:	3a30      	subs	r2, #48	; 0x30
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002502:	440b      	add	r3, r1
 8002504:	3b30      	subs	r3, #48	; 0x30
 8002506:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002508:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002512:	4413      	add	r3, r2
 8002514:	3b30      	subs	r3, #48	; 0x30
 8002516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002518:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800251a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800251e:	3301      	adds	r3, #1
 8002520:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002524:	e7bc      	b.n	80024a0 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002526:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800252a:	3301      	adds	r3, #1
 800252c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002530:	e7ad      	b.n	800248e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 8002532:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	33b0      	adds	r3, #176	; 0xb0
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002546:	3301      	adds	r3, #1
 8002548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800254c:	e773      	b.n	8002436 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 800254e:	bf00      	nop
 8002550:	3738      	adds	r7, #56	; 0x38
 8002552:	46bd      	mov	sp, r7
 8002554:	bc90      	pop	{r4, r7}
 8002556:	4770      	bx	lr

08002558 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b0a0      	sub	sp, #128	; 0x80
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002560:	2064      	movs	r0, #100	; 0x64
 8002562:	f007 fc11 	bl	8009d88 <HAL_Delay>

	lcd_clear();
 8002566:	f7fe fd9b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800256a:	2100      	movs	r1, #0
 800256c:	2000      	movs	r0, #0
 800256e:	f7fe fda7 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002572:	4886      	ldr	r0, [pc, #536]	; (800278c <_ZN10LineSensor11calibrationEv+0x234>)
 8002574:	f7fe fdce 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002578:	2101      	movs	r1, #1
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe fda0 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002580:	4883      	ldr	r0, [pc, #524]	; (8002790 <_ZN10LineSensor11calibrationEv+0x238>)
 8002582:	f7fe fdc7 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002586:	2300      	movs	r3, #0
 8002588:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800258c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002590:	2b0d      	cmp	r3, #13
 8002592:	d823      	bhi.n	80025dc <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002594:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002598:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	32b0      	adds	r2, #176	; 0xb0
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	440a      	add	r2, r1
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025ac:	440b      	add	r3, r1
 80025ae:	3b40      	subs	r3, #64	; 0x40
 80025b0:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80025b2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80025b6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	32b0      	adds	r2, #176	; 0xb0
 80025be:	0092      	lsls	r2, r2, #2
 80025c0:	440a      	add	r2, r1
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025ca:	440b      	add	r3, r1
 80025cc:	3b78      	subs	r3, #120	; 0x78
 80025ce:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025d0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025d4:	3301      	adds	r3, #1
 80025d6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80025da:	e7d7      	b.n	800258c <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fd02 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d079      	beq.n	80026ec <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80025fe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002602:	2b0d      	cmp	r3, #13
 8002604:	d850      	bhi.n	80026a8 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002606:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002610:	4413      	add	r3, r2
 8002612:	3b40      	subs	r3, #64	; 0x40
 8002614:	ed93 7a00 	vldr	s14, [r3]
 8002618:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	33b0      	adds	r3, #176	; 0xb0
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	d50f      	bpl.n	8002652 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002632:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002636:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	32b0      	adds	r2, #176	; 0xb0
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	440a      	add	r2, r1
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800264a:	440b      	add	r3, r1
 800264c:	3b40      	subs	r3, #64	; 0x40
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e024      	b.n	800269c <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002652:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800265c:	4413      	add	r3, r2
 800265e:	3b78      	subs	r3, #120	; 0x78
 8002660:	ed93 7a00 	vldr	s14, [r3]
 8002664:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	33b0      	adds	r3, #176	; 0xb0
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	dd0e      	ble.n	800269c <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800267e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002682:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	32b0      	adds	r2, #176	; 0xb0
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	440a      	add	r2, r1
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002696:	440b      	add	r3, r1
 8002698:	3b78      	subs	r3, #120	; 0x78
 800269a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800269c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a0:	3301      	adds	r3, #1
 80026a2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80026a6:	e7aa      	b.n	80025fe <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 fe94 	bl	80053dc <_ZN12RotarySwitch8getValueEv>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80026ca:	2201      	movs	r2, #1
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fdab 	bl	800222c <_ZN3LED2LREaa>
 80026d6:	e781      	b.n	80025dc <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80026de:	2200      	movs	r2, #0
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fda1 	bl	800222c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80026ea:	e777      	b.n	80025dc <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80026f2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80026f6:	2b0d      	cmp	r3, #13
 80026f8:	d826      	bhi.n	8002748 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80026fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002704:	4413      	add	r3, r2
 8002706:	3b40      	subs	r3, #64	; 0x40
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002716:	4413      	add	r3, r2
 8002718:	3b78      	subs	r3, #120	; 0x78
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002722:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002726:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002794 <_ZN10LineSensor11calibrationEv+0x23c>
 800272a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	3392      	adds	r3, #146	; 0x92
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3304      	adds	r3, #4
 8002738:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800273c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002740:	3301      	adds	r3, #1
 8002742:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002746:	e7d4      	b.n	80026f2 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002748:	2300      	movs	r3, #0
 800274a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800274e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002752:	2b0d      	cmp	r3, #13
 8002754:	d815      	bhi.n	8002782 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002756:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800275a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002764:	440a      	add	r2, r1
 8002766:	3a78      	subs	r2, #120	; 0x78
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	33a0      	adds	r3, #160	; 0xa0
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3304      	adds	r3, #4
 8002774:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002776:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800277a:	3301      	adds	r3, #1
 800277c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002780:	e7e5      	b.n	800274e <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002782:	bf00      	nop
 8002784:	3780      	adds	r7, #128	; 0x80
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	08019c7c 	.word	0x08019c7c
 8002790:	08019c88 	.word	0x08019c88
 8002794:	447a0000 	.word	0x447a0000

08002798 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 80027a4:	2303      	movs	r3, #3
 80027a6:	81bb      	strh	r3, [r7, #12]
 80027a8:	89bb      	ldrh	r3, [r7, #12]
 80027aa:	2b0a      	cmp	r3, #10
 80027ac:	d814      	bhi.n	80027d8 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80027ae:	89bb      	ldrh	r3, [r7, #12]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	33b0      	adds	r3, #176	; 0xb0
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800282c <_ZN10LineSensor13emergencyStopEv+0x94>
 80027c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	db02      	blt.n	80027d0 <_ZN10LineSensor13emergencyStopEv+0x38>
 80027ca:	89fb      	ldrh	r3, [r7, #14]
 80027cc:	3301      	adds	r3, #1
 80027ce:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 80027d0:	89bb      	ldrh	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	81bb      	strh	r3, [r7, #12]
 80027d6:	e7e7      	b.n	80027a8 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 80027d8:	89fb      	ldrh	r3, [r7, #14]
 80027da:	2b07      	cmp	r3, #7
 80027dc:	d906      	bls.n	80027ec <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	e002      	b.n	80027f2 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b63      	cmp	r3, #99	; 0x63
 80027f8:	d903      	bls.n	8002802 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e002      	b.n	8002808 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002810:	4293      	cmp	r3, r2
 8002812:	d903      	bls.n	800281c <_ZN10LineSensor13emergencyStopEv+0x84>
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002816:	f242 7210 	movw	r2, #10000	; 0x2710
 800281a:	801a      	strh	r2, [r3, #0]

	return flag;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800281e:	781b      	ldrb	r3, [r3, #0]

}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	44098000 	.word	0x44098000
 8002830:	20000208 	.word	0x20000208
 8002834:	2000020a 	.word	0x2000020a

08002838 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002842:	edd7 7a01 	vldr	s15, [r7, #4]
 8002846:	eef0 7ae7 	vabs.f32	s15, s15
 800284a:	eeb0 0a67 	vmov.f32	s0, s15
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), all_sideline_flag_(false)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80028d6:	330c      	adds	r3, #12
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80028e4:	3350      	adds	r3, #80	; 0x50
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80028f0:	3352      	adds	r3, #82	; 0x52
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80028fc:	3354      	adds	r3, #84	; 0x54
 80028fe:	2200      	movs	r2, #0
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002908:	3318      	adds	r3, #24
 800290a:	2200      	movs	r2, #0
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002914:	331c      	adds	r3, #28
 8002916:	2200      	movs	r2, #0
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002920:	331e      	adds	r3, #30
 8002922:	2200      	movs	r2, #0
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800292c:	3320      	adds	r3, #32
 800292e:	2200      	movs	r2, #0
 8002930:	801a      	strh	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002938:	3322      	adds	r3, #34	; 0x22
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002944:	3323      	adds	r3, #35	; 0x23
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002950:	3324      	adds	r3, #36	; 0x24
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800295c:	3328      	adds	r3, #40	; 0x28
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800296a:	332c      	adds	r3, #44	; 0x2c
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002978:	3330      	adds	r3, #48	; 0x30
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002986:	3334      	adds	r3, #52	; 0x34
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002994:	3338      	adds	r3, #56	; 0x38
 8002996:	2200      	movs	r2, #0
 8002998:	801a      	strh	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029a0:	333a      	adds	r3, #58	; 0x3a
 80029a2:	2200      	movs	r2, #0
 80029a4:	801a      	strh	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029ac:	333c      	adds	r3, #60	; 0x3c
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029c8:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ce:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d4:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029da:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e0:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80029e8:	2300      	movs	r3, #0
 80029ea:	83fb      	strh	r3, [r7, #30]
 80029ec:	8bfb      	ldrh	r3, [r7, #30]
 80029ee:	f241 726f 	movw	r2, #5999	; 0x176f
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d80d      	bhi.n	8002a12 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ba>
		velocity_table_[i] = 0;
 80029f6:	8bfb      	ldrh	r3, [r7, #30]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80029fe:	3304      	adds	r3, #4
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a0a:	8bfb      	ldrh	r3, [r7, #30]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	83fb      	strh	r3, [r7, #30]
 8002a10:	e7ec      	b.n	80029ec <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x194>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a12:	2300      	movs	r3, #0
 8002a14:	83bb      	strh	r3, [r7, #28]
 8002a16:	8bbb      	ldrh	r3, [r7, #28]
 8002a18:	2b63      	cmp	r3, #99	; 0x63
 8002a1a:	d80d      	bhi.n	8002a38 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e0>
		crossline_distance_[i] = 0;
 8002a1c:	8bbb      	ldrh	r3, [r7, #28]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002a24:	3316      	adds	r3, #22
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a30:	8bbb      	ldrh	r3, [r7, #28]
 8002a32:	3301      	adds	r3, #1
 8002a34:	83bb      	strh	r3, [r7, #28]
 8002a36:	e7ee      	b.n	8002a16 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1be>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a38:	2300      	movs	r3, #0
 8002a3a:	837b      	strh	r3, [r7, #26]
 8002a3c:	8b7b      	ldrh	r3, [r7, #26]
 8002a3e:	2b63      	cmp	r3, #99	; 0x63
 8002a40:	d80d      	bhi.n	8002a5e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x206>
		crossline_distance2_[i] = 0;
 8002a42:	8b7b      	ldrh	r3, [r7, #26]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002a4a:	333a      	adds	r3, #58	; 0x3a
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a56:	8b7b      	ldrh	r3, [r7, #26]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	837b      	strh	r3, [r7, #26]
 8002a5c:	e7ee      	b.n	8002a3c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	833b      	strh	r3, [r7, #24]
 8002a62:	8b3b      	ldrh	r3, [r7, #24]
 8002a64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a68:	d20d      	bcs.n	8002a86 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x22e>
		sideline_distance_[i] = 0;
 8002a6a:	8b3b      	ldrh	r3, [r7, #24]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002a72:	331e      	adds	r3, #30
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a7e:	8b3b      	ldrh	r3, [r7, #24]
 8002a80:	3301      	adds	r3, #1
 8002a82:	833b      	strh	r3, [r7, #24]
 8002a84:	e7ed      	b.n	8002a62 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20a>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a86:	2300      	movs	r3, #0
 8002a88:	82fb      	strh	r3, [r7, #22]
 8002a8a:	8afb      	ldrh	r3, [r7, #22]
 8002a8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a90:	d20d      	bcs.n	8002aae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x256>
		sideline_distance2_[i] = 0;
 8002a92:	8afb      	ldrh	r3, [r7, #22]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002a9a:	3312      	adds	r3, #18
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002aa6:	8afb      	ldrh	r3, [r7, #22]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	82fb      	strh	r3, [r7, #22]
 8002aac:	e7ed      	b.n	8002a8a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3724      	adds	r7, #36	; 0x24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002af4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b08:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	ee07 3a90 	vmov	s15, r3

}
 8002b18:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	2000020c 	.word	0x2000020c
 8002b2c:	00000000 	.word	0x00000000

08002b30 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ffbf 	bl	8002abc <_ZN9LineTrace9calcErrorEv>
 8002b3e:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002b4c:	4b66      	ldr	r3, [pc, #408]	; (8002ce8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b62:	3354      	adds	r3, #84	; 0x54
 8002b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d14c      	bne.n	8002c06 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b72:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7a:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b96:	ee17 0a90 	vmov	r0, s15
 8002b9a:	f7fd fced 	bl	8000578 <__aeabi_f2d>
 8002b9e:	a350      	add	r3, pc, #320	; (adr r3, 8002ce0 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f7fd fe6a 	bl	800087c <__aeabi_ddiv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460c      	mov	r4, r1
 8002bac:	4618      	mov	r0, r3
 8002bae:	4621      	mov	r1, r4
 8002bb0:	f7fe f832 	bl	8000c18 <__aeabi_d2f>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fcdb 	bl	8000578 <__aeabi_f2d>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	460d      	mov	r5, r1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd4:	ee17 0a90 	vmov	r0, s15
 8002bd8:	f7fd fcce 	bl	8000578 <__aeabi_f2d>
 8002bdc:	a340      	add	r3, pc, #256	; (adr r3, 8002ce0 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fd21 	bl	8000628 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f7fd fb65 	bl	80002bc <__adddf3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	f7fe f80d 	bl	8000c18 <__aeabi_d2f>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e04b      	b.n	8002c9e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002c1e:	4b33      	ldr	r3, [pc, #204]	; (8002cec <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c30:	ee17 0a90 	vmov	r0, s15
 8002c34:	f7fd fca0 	bl	8000578 <__aeabi_f2d>
 8002c38:	a329      	add	r3, pc, #164	; (adr r3, 8002ce0 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f7fd fe1d 	bl	800087c <__aeabi_ddiv>
 8002c42:	4603      	mov	r3, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	4618      	mov	r0, r3
 8002c48:	4621      	mov	r1, r4
 8002c4a:	f7fd ffe5 	bl	8000c18 <__aeabi_d2f>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002c52:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc8e 	bl	8000578 <__aeabi_f2d>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	460d      	mov	r5, r1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6e:	ee17 0a90 	vmov	r0, s15
 8002c72:	f7fd fc81 	bl	8000578 <__aeabi_f2d>
 8002c76:	a31a      	add	r3, pc, #104	; (adr r3, 8002ce0 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f7fd fcd4 	bl	8000628 <__aeabi_dmul>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4620      	mov	r0, r4
 8002c86:	4629      	mov	r1, r5
 8002c88:	f7fd fb18 	bl	80002bc <__adddf3>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	4618      	mov	r0, r3
 8002c92:	4621      	mov	r1, r4
 8002c94:	f7fd ffc0 	bl	8000c18 <__aeabi_d2f>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c9c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002c9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ca2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002cc2:	edd7 0a02 	vldr	s1, [r7, #8]
 8002cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f003 f860 	bl	8005d90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002cd0:	4a06      	ldr	r2, [pc, #24]	; (8002cec <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6013      	str	r3, [r2, #0]

}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ce4:	3f50624d 	.word	0x3f50624d
 8002ce8:	20000220 	.word	0x20000220
 8002cec:	2000021c 	.word	0x2000021c

08002cf0 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fcb1 	bl	8001664 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f002 fa2a 	bl	8005160 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 ff3a 	bl	8004b8a <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 ffbb 	bl	8004cae <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d5a:	3318      	adds	r3, #24
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	461c      	mov	r4, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f7fe fc61 	bl	8001628 <_ZN7Encoder16getTotalDistanceEv>
 8002d66:	eef0 7a40 	vmov.f32	s15, s0
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002d70:	3316      	adds	r3, #22
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d80:	3318      	adds	r3, #24
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d8e:	3318      	adds	r3, #24
 8002d90:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d98:	3318      	adds	r3, #24
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	2b63      	cmp	r3, #99	; 0x63
 8002d9e:	d905      	bls.n	8002dac <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002da6:	3318      	adds	r3, #24
 8002da8:	2263      	movs	r2, #99	; 0x63
 8002daa:	801a      	strh	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}

08002db4 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dc6:	331a      	adds	r3, #26
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	461c      	mov	r4, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f7fe fc2b 	bl	8001628 <_ZN7Encoder16getTotalDistanceEv>
 8002dd2:	eef0 7a40 	vmov.f32	s15, s0
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002ddc:	333a      	adds	r3, #58	; 0x3a
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dec:	331a      	adds	r3, #26
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dfa:	331a      	adds	r3, #26
 8002dfc:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e04:	331a      	adds	r3, #26
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	2b63      	cmp	r3, #99	; 0x63
 8002e0a:	d905      	bls.n	8002e18 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e12:	331a      	adds	r3, #26
 8002e14:	2263      	movs	r2, #99	; 0x63
 8002e16:	801a      	strh	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd90      	pop	{r4, r7, pc}

08002e20 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e32:	331c      	adds	r3, #28
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	461c      	mov	r4, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f7fe fbf5 	bl	8001628 <_ZN7Encoder16getTotalDistanceEv>
 8002e3e:	eef0 7a40 	vmov.f32	s15, s0
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002e48:	331e      	adds	r3, #30
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e58:	331c      	adds	r3, #28
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e66:	331c      	adds	r3, #28
 8002e68:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e70:	331c      	adds	r3, #28
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e78:	d306      	bcc.n	8002e88 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e80:	331c      	adds	r3, #28
 8002e82:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e86:	801a      	strh	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}

08002e90 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea2:	331e      	adds	r3, #30
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	461c      	mov	r4, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f7fe fbbd 	bl	8001628 <_ZN7Encoder16getTotalDistanceEv>
 8002eae:	eef0 7a40 	vmov.f32	s15, s0
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002eb8:	3312      	adds	r3, #18
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ec8:	331e      	adds	r3, #30
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ed6:	331e      	adds	r3, #30
 8002ed8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ee0:	331e      	adds	r3, #30
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ee8:	d306      	bcc.n	8002ef8 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ef0:	331e      	adds	r3, #30
 8002ef2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ef6:	801a      	strh	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}

08002f00 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	ed2d 8b02 	vpush	{d8}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d046      	beq.n	8002fa4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f1c:	3354      	adds	r3, #84	; 0x54
 8002f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11c      	bne.n	8002f60 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69dc      	ldr	r4, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fb6b 	bl	800160a <_ZN7Encoder15getDistance10mmEv>
 8002f34:	eeb0 8a40 	vmov.f32	s16, s0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 f8fe 	bl	800513e <_ZN8Odometry8getThetaEv>
 8002f42:	ec53 2b10 	vmov	r2, r3, d0
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7fd fe65 	bl	8000c18 <__aeabi_d2f>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	ee00 3a90 	vmov	s1, r3
 8002f54:	eeb0 0a48 	vmov.f32	s0, s16
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f001 fcd5 	bl	8004908 <_ZN6Logger21storeDistanceAndThetaEff>
 8002f5e:	e01b      	b.n	8002f98 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69dc      	ldr	r4, [r3, #28]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fb5d 	bl	8001628 <_ZN7Encoder16getTotalDistanceEv>
 8002f6e:	eeb0 8a40 	vmov.f32	s16, s0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 f8e1 	bl	800513e <_ZN8Odometry8getThetaEv>
 8002f7c:	ec53 2b10 	vmov	r2, r3, d0
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fd fe48 	bl	8000c18 <__aeabi_d2f>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	ee00 3a90 	vmov	s1, r3
 8002f8e:	eeb0 0a48 	vmov.f32	s0, s16
 8002f92:	4620      	mov	r0, r4
 8002f94:	f001 fd01 	bl	800499a <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002fa2:	801a      	strh	r2, [r3, #0]
	}
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	ecbd 8b02 	vpop	{d8}
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	20000210 	.word	0x20000210

08002fb4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fc2:	3318      	adds	r3, #24
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d85a      	bhi.n	8003080 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fd0:	3318      	adds	r3, #24
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002fda:	3316      	adds	r3, #22
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fb1d 	bl	8001628 <_ZN7Encoder16getTotalDistanceEv>
 8002fee:	eeb0 7a40 	vmov.f32	s14, s0
 8002ff2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ff6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffe:	f7ff fc1b 	bl	8002838 <_ZSt3absf>
 8003002:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 8003006:	edd7 7a02 	vldr	s15, [r7, #8]
 800300a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80030a4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 800300e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	d826      	bhi.n	8003066 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800301e:	3338      	adds	r3, #56	; 0x38
 8003020:	2200      	movs	r2, #0
 8003022:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6959      	ldr	r1, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800302e:	3318      	adds	r3, #24
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003038:	3316      	adds	r3, #22
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	eeb0 0a67 	vmov.f32	s0, s15
 8003046:	4608      	mov	r0, r1
 8003048:	f7fe fafd 	bl	8001646 <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003052:	3318      	adds	r3, #24
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003060:	3318      	adds	r3, #24
 8003062:	801a      	strh	r2, [r3, #0]
			break;
 8003064:	e00c      	b.n	8003080 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306c:	3318      	adds	r3, #24
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800307a:	3318      	adds	r3, #24
 800307c:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 800307e:	e79d      	b.n	8002fbc <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003086:	3318      	adds	r3, #24
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	2b63      	cmp	r3, #99	; 0x63
 800308c:	d905      	bls.n	800309a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003094:	3318      	adds	r3, #24
 8003096:	2263      	movs	r2, #99	; 0x63
 8003098:	801a      	strh	r2, [r3, #0]

}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	437a0000 	.word	0x437a0000

080030a8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80030b0:	2300      	movs	r3, #0
 80030b2:	82fb      	strh	r3, [r7, #22]
 80030b4:	8afb      	ldrh	r3, [r7, #22]
 80030b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ba:	d23d      	bcs.n	8003138 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 80030bc:	8afb      	ldrh	r3, [r7, #22]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80030c4:	331e      	adds	r3, #30
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe faa8 	bl	8001628 <_ZN7Encoder16getTotalDistanceEv>
 80030d8:	eeb0 7a40 	vmov.f32	s14, s0
 80030dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80030e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030e4:	eeb0 0a67 	vmov.f32	s0, s15
 80030e8:	f7ff fba6 	bl	8002838 <_ZSt3absf>
 80030ec:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 80030f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030f4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003160 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 80030f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	d816      	bhi.n	8003130 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003108:	3338      	adds	r3, #56	; 0x38
 800310a:	2200      	movs	r2, #0
 800310c:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6959      	ldr	r1, [r3, #20]
 8003112:	8afb      	ldrh	r3, [r7, #22]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800311a:	331e      	adds	r3, #30
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	eeb0 0a67 	vmov.f32	s0, s15
 8003128:	4608      	mov	r0, r1
 800312a:	f7fe fa8c 	bl	8001646 <_ZN7Encoder16setTotalDistanceEf>
			break;
 800312e:	e003      	b.n	8003138 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003130:	8afb      	ldrh	r3, [r7, #22]
 8003132:	3301      	adds	r3, #1
 8003134:	82fb      	strh	r3, [r7, #22]
 8003136:	e7bd      	b.n	80030b4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800313e:	331c      	adds	r3, #28
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003146:	d306      	bcc.n	8003156 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800314e:	331c      	adds	r3, #28
 8003150:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003154:	801a      	strh	r2, [r3, #0]

}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	43660000 	.word	0x43660000

08003164 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003176:	3354      	adds	r3, #84	; 0x54
 8003178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d144      	bne.n	800320a <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 8003180:	edd7 7a00 	vldr	s15, [r7]
 8003184:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80032bc <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003190:	d504      	bpl.n	800319c <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e084      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.5;
 800319c:	edd7 7a00 	vldr	s15, [r7]
 80031a0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80032c0 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 80031a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	d503      	bpl.n	80031b6 <_ZN9LineTrace15radius2VelocityEf+0x52>
 80031ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e077      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 80031b6:	edd7 7a00 	vldr	s15, [r7]
 80031ba:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80032c4 <_ZN9LineTrace15radius2VelocityEf+0x160>
 80031be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d503      	bpl.n	80031d0 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 80031c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e06a      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 80031d0:	edd7 7a00 	vldr	s15, [r7]
 80031d4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80032c8 <_ZN9LineTrace15radius2VelocityEf+0x164>
 80031d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	d502      	bpl.n	80031e8 <_ZN9LineTrace15radius2VelocityEf+0x84>
 80031e2:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	e05e      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 80031e8:	edd7 7a00 	vldr	s15, [r7]
 80031ec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80032d0 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 80031f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	d502      	bpl.n	8003200 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 80031fa:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	e052      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity_;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e04d      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003210:	3354      	adds	r3, #84	; 0x54
 8003212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d143      	bne.n	80032a2 <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 800321a:	edd7 7a00 	vldr	s15, [r7]
 800321e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80032bc <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d504      	bpl.n	8003236 <_ZN9LineTrace15radius2VelocityEf+0xd2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e037      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.7;
 8003236:	edd7 7a00 	vldr	s15, [r7]
 800323a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80032c0 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 800323e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	d502      	bpl.n	800324e <_ZN9LineTrace15radius2VelocityEf+0xea>
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <_ZN9LineTrace15radius2VelocityEf+0x174>)
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e02b      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 800324e:	edd7 7a00 	vldr	s15, [r7]
 8003252:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80032c4 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	d503      	bpl.n	8003268 <_ZN9LineTrace15radius2VelocityEf+0x104>
 8003260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e01e      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003268:	edd7 7a00 	vldr	s15, [r7]
 800326c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032c8 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003278:	d502      	bpl.n	8003280 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <_ZN9LineTrace15radius2VelocityEf+0x168>)
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e012      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003280:	edd7 7a00 	vldr	s15, [r7]
 8003284:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80032d0 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	d502      	bpl.n	8003298 <_ZN9LineTrace15radius2VelocityEf+0x134>
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e006      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity2_;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e001      	b.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}
	else velocity = 1.3;
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <_ZN9LineTrace15radius2VelocityEf+0x178>)
 80032a4:	60fb      	str	r3, [r7, #12]

	return velocity;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	ee07 3a90 	vmov	s15, r3
}
 80032ac:	eeb0 0a67 	vmov.f32	s0, s15
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	43c80000 	.word	0x43c80000
 80032c0:	43fa0000 	.word	0x43fa0000
 80032c4:	44228000 	.word	0x44228000
 80032c8:	44bb8000 	.word	0x44bb8000
 80032cc:	40200000 	.word	0x40200000
 80032d0:	44fa0000 	.word	0x44fa0000
 80032d4:	40400000 	.word	0x40400000
 80032d8:	3fd9999a 	.word	0x3fd9999a
 80032dc:	3fa66666 	.word	0x3fa66666

080032e0 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032e0:	b5b0      	push	{r4, r5, r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80032ec:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032ee:	f241 736f 	movw	r3, #5999	; 0x176f
 80032f2:	83fb      	strh	r3, [r7, #30]
 80032f4:	8bfb      	ldrh	r3, [r7, #30]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 808d 	beq.w	8003416 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80032fc:	8bfb      	ldrh	r3, [r7, #30]
 80032fe:	3b01      	subs	r3, #1
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003306:	3304      	adds	r3, #4
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	ed93 7a00 	vldr	s14, [r3]
 8003310:	8bfb      	ldrh	r3, [r7, #30]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003318:	3304      	adds	r3, #4
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003326:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800332a:	edd7 7a06 	vldr	s15, [r7, #24]
 800332e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	dd6a      	ble.n	800340e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003338:	8bfb      	ldrh	r3, [r7, #30]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd f918 	bl	8000578 <__aeabi_f2d>
 8003348:	a335      	add	r3, pc, #212	; (adr r3, 8003420 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f7fd f96b 	bl	8000628 <__aeabi_dmul>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	4625      	mov	r5, r4
 8003358:	461c      	mov	r4, r3
 800335a:	69b8      	ldr	r0, [r7, #24]
 800335c:	f7fd f90c 	bl	8000578 <__aeabi_f2d>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4620      	mov	r0, r4
 8003366:	4629      	mov	r1, r5
 8003368:	f7fd fa88 	bl	800087c <__aeabi_ddiv>
 800336c:	4603      	mov	r3, r0
 800336e:	460c      	mov	r4, r1
 8003370:	4618      	mov	r0, r3
 8003372:	4621      	mov	r1, r4
 8003374:	f7fd fc50 	bl	8000c18 <__aeabi_d2f>
 8003378:	4603      	mov	r3, r0
 800337a:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800337c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003380:	ed97 7a05 	vldr	s14, [r7, #20]
 8003384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003388:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800338c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003390:	edd7 7a02 	vldr	s15, [r7, #8]
 8003394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339c:	dd37      	ble.n	800340e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800339e:	8bfb      	ldrh	r3, [r7, #30]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033a6:	3304      	adds	r3, #4
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd f8e2 	bl	8000578 <__aeabi_f2d>
 80033b4:	4604      	mov	r4, r0
 80033b6:	460d      	mov	r5, r1
 80033b8:	8bfb      	ldrh	r3, [r7, #30]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4413      	add	r3, r2
 80033c0:	ed93 7a00 	vldr	s14, [r3]
 80033c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033cc:	ee17 0a90 	vmov	r0, s15
 80033d0:	f7fd f8d2 	bl	8000578 <__aeabi_f2d>
 80033d4:	a312      	add	r3, pc, #72	; (adr r3, 8003420 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f7fd f925 	bl	8000628 <__aeabi_dmul>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4620      	mov	r0, r4
 80033e4:	4629      	mov	r1, r5
 80033e6:	f7fc ff69 	bl	80002bc <__adddf3>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	4619      	mov	r1, r3
 80033f0:	4622      	mov	r2, r4
 80033f2:	8bfb      	ldrh	r3, [r7, #30]
 80033f4:	1e5c      	subs	r4, r3, #1
 80033f6:	4608      	mov	r0, r1
 80033f8:	4611      	mov	r1, r2
 80033fa:	f7fd fc0d 	bl	8000c18 <__aeabi_d2f>
 80033fe:	4601      	mov	r1, r0
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003406:	3304      	adds	r3, #4
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800340e:	8bfb      	ldrh	r3, [r7, #30]
 8003410:	3b01      	subs	r3, #1
 8003412:	83fb      	strh	r3, [r7, #30]
 8003414:	e76e      	b.n	80032f4 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003416:	bf00      	nop
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bdb0      	pop	{r4, r5, r7, pc}
 800341e:	bf00      	nop
 8003420:	d2f1a9fc 	.word	0xd2f1a9fc
 8003424:	3f50624d 	.word	0x3f50624d

08003428 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	ed87 0a02 	vstr	s0, [r7, #8]
 8003434:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003436:	2300      	movs	r3, #0
 8003438:	83fb      	strh	r3, [r7, #30]
 800343a:	8bfb      	ldrh	r3, [r7, #30]
 800343c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003440:	4293      	cmp	r3, r2
 8003442:	f200 808d 	bhi.w	8003560 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003446:	8bfb      	ldrh	r3, [r7, #30]
 8003448:	3301      	adds	r3, #1
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003450:	3304      	adds	r3, #4
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	8bfb      	ldrh	r3, [r7, #30]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003462:	3304      	adds	r3, #4
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	edd3 7a00 	vldr	s15, [r3]
 800346c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003470:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003474:	edd7 7a06 	vldr	s15, [r7, #24]
 8003478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	dd6a      	ble.n	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 8003482:	8bfb      	ldrh	r3, [r7, #30]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd f873 	bl	8000578 <__aeabi_f2d>
 8003492:	a335      	add	r3, pc, #212	; (adr r3, 8003568 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f7fd f8c6 	bl	8000628 <__aeabi_dmul>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	4625      	mov	r5, r4
 80034a2:	461c      	mov	r4, r3
 80034a4:	69b8      	ldr	r0, [r7, #24]
 80034a6:	f7fd f867 	bl	8000578 <__aeabi_f2d>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4620      	mov	r0, r4
 80034b0:	4629      	mov	r1, r5
 80034b2:	f7fd f9e3 	bl	800087c <__aeabi_ddiv>
 80034b6:	4603      	mov	r3, r0
 80034b8:	460c      	mov	r4, r1
 80034ba:	4618      	mov	r0, r3
 80034bc:	4621      	mov	r1, r4
 80034be:	f7fd fbab 	bl	8000c18 <__aeabi_d2f>
 80034c2:	4603      	mov	r3, r0
 80034c4:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80034ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80034ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034d2:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80034da:	edd7 7a02 	vldr	s15, [r7, #8]
 80034de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e6:	dd37      	ble.n	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034e8:	8bfb      	ldrh	r3, [r7, #30]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034f0:	3304      	adds	r3, #4
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f83d 	bl	8000578 <__aeabi_f2d>
 80034fe:	4604      	mov	r4, r0
 8003500:	460d      	mov	r5, r1
 8003502:	8bfb      	ldrh	r3, [r7, #30]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	ed93 7a00 	vldr	s14, [r3]
 800350e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	ee17 0a90 	vmov	r0, s15
 800351a:	f7fd f82d 	bl	8000578 <__aeabi_f2d>
 800351e:	a312      	add	r3, pc, #72	; (adr r3, 8003568 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f880 	bl	8000628 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4620      	mov	r0, r4
 800352e:	4629      	mov	r1, r5
 8003530:	f7fc fec4 	bl	80002bc <__adddf3>
 8003534:	4603      	mov	r3, r0
 8003536:	460c      	mov	r4, r1
 8003538:	4619      	mov	r1, r3
 800353a:	4622      	mov	r2, r4
 800353c:	8bfb      	ldrh	r3, [r7, #30]
 800353e:	1c5c      	adds	r4, r3, #1
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	f7fd fb68 	bl	8000c18 <__aeabi_d2f>
 8003548:	4601      	mov	r1, r0
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003550:	3304      	adds	r3, #4
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003558:	8bfb      	ldrh	r3, [r7, #30]
 800355a:	3301      	adds	r3, #1
 800355c:	83fb      	strh	r3, [r7, #30]
 800355e:	e76c      	b.n	800343a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003560:	bf00      	nop
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bdb0      	pop	{r4, r5, r7, pc}
 8003568:	d2f1a9fc 	.word	0xd2f1a9fc
 800356c:	3f50624d 	.word	0x3f50624d

08003570 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe f87f 	bl	8001680 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003588:	3350      	adds	r3, #80	; 0x50
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003594:	3352      	adds	r3, #82	; 0x52
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035a0:	330c      	adds	r3, #12
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035be:	3350      	adds	r3, #80	; 0x50
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035ca:	3352      	adds	r3, #82	; 0x52
 80035cc:	2200      	movs	r2, #0
 80035ce:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035d6:	330c      	adds	r3, #12
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035f8:	3350      	adds	r3, #80	; 0x50
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d05e      	beq.n	80036be <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe f80f 	bl	8001628 <_ZN7Encoder16getTotalDistanceEv>
 800360a:	eeb0 7a40 	vmov.f32	s14, s0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003614:	330c      	adds	r3, #12
 8003616:	edd3 7a00 	vldr	s15, [r3]
 800361a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	bfac      	ite	ge
 8003624:	2301      	movge	r3, #1
 8003626:	2300      	movlt	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d025      	beq.n	800367a <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003634:	330c      	adds	r3, #12
 8003636:	ed93 7a00 	vldr	s14, [r3]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003640:	3352      	adds	r3, #82	; 0x52
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	3332      	adds	r3, #50	; 0x32
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800365c:	330c      	adds	r3, #12
 800365e:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003668:	3352      	adds	r3, #82	; 0x52
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003676:	3352      	adds	r3, #82	; 0x52
 8003678:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003680:	3352      	adds	r3, #82	; 0x52
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	f241 726f 	movw	r2, #5999	; 0x176f
 8003688:	4293      	cmp	r3, r2
 800368a:	d906      	bls.n	800369a <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003692:	3352      	adds	r3, #82	; 0x52
 8003694:	f241 726f 	movw	r2, #5999	; 0x176f
 8003698:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a0:	3352      	adds	r3, #82	; 0x52
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036aa:	3304      	adds	r3, #4
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	edd3 7a00 	vldr	s15, [r3]
 80036b4:	eeb0 0a67 	vmov.f32	s0, s15
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fade 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd ff95 	bl	800160a <_ZN7Encoder15getDistance10mmEv>
 80036e0:	eeb0 7a40 	vmov.f32	s14, s0
 80036e4:	edd7 7a00 	vldr	s15, [r7]
 80036e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f0:	bf94      	ite	ls
 80036f2:	2301      	movls	r3, #1
 80036f4:	2300      	movhi	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003728:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800372c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003730:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003748:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800374c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003750:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003754:	4a44      	ldr	r2, [pc, #272]	; (8003868 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 800375a:	4a44      	ldr	r2, [pc, #272]	; (800386c <_ZN9LineTrace11isCrossLineEv+0x160>)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8003760:	4b43      	ldr	r3, [pc, #268]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04d      	beq.n	800380a <_ZN9LineTrace11isCrossLineEv+0xfe>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 800376e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003772:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003874 <_ZN9LineTrace11isCrossLineEv+0x168>
 8003776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377e:	d50f      	bpl.n	80037a0 <_ZN9LineTrace11isCrossLineEv+0x94>
 8003780:	edd7 7a02 	vldr	s15, [r7, #8]
 8003784:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003874 <_ZN9LineTrace11isCrossLineEv+0x168>
 8003788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	d506      	bpl.n	80037a0 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	e002      	b.n	80037a6 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80037a0:	4b35      	ldr	r3, [pc, #212]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 80037a6:	4b34      	ldr	r3, [pc, #208]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d056      	beq.n	800385c <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = true;
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <_ZN9LineTrace11isCrossLineEv+0x170>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80037b4:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x164>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037d2:	3354      	adds	r3, #84	; 0x54
 80037d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <_ZN9LineTrace11isCrossLineEv+0xe4>
				store_check_cnt_ = 0;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80037e2:	333a      	adds	r3, #58	; 0x3a
 80037e4:	2200      	movs	r2, #0
 80037e6:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff faad 	bl	8002d48 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80037ee:	e035      	b.n	800385c <_ZN9LineTrace11isCrossLineEv+0x150>
			}
			else{
				store_check_cnt_ = 0;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80037f6:	333a      	adds	r3, #58	; 0x3a
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fbd9 	bl	8002fb4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fad6 	bl	8002db4 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 8003808:	e028      	b.n	800385c <_ZN9LineTrace11isCrossLineEv+0x150>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 800380a:	edd7 7a03 	vldr	s15, [r7, #12]
 800380e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003880 <_ZN9LineTrace11isCrossLineEv+0x174>
 8003812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381a:	dd0f      	ble.n	800383c <_ZN9LineTrace11isCrossLineEv+0x130>
 800381c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003820:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003880 <_ZN9LineTrace11isCrossLineEv+0x174>
 8003824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382c:	dd06      	ble.n	800383c <_ZN9LineTrace11isCrossLineEv+0x130>
			cnt++;
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	3301      	adds	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003838:	801a      	strh	r2, [r3, #0]
 800383a:	e002      	b.n	8003842 <_ZN9LineTrace11isCrossLineEv+0x136>
		}
		else{
			cnt = 0;
 800383c:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800383e:	2200      	movs	r2, #0
 8003840:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 5){
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d908      	bls.n	800385c <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = false;
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <_ZN9LineTrace11isCrossLineEv+0x170>)
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003858:	2200      	movs	r2, #0
 800385a:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 800385c:	4b07      	ldr	r3, [pc, #28]	; (800387c <_ZN9LineTrace11isCrossLineEv+0x170>)
 800385e:	781b      	ldrb	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000214 	.word	0x20000214
 800386c:	20000218 	.word	0x20000218
 8003870:	20000227 	.word	0x20000227
 8003874:	44160000 	.word	0x44160000
 8003878:	20000224 	.word	0x20000224
 800387c:	20000226 	.word	0x20000226
 8003880:	43fa0000 	.word	0x43fa0000

08003884 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800388c:	2300      	movs	r3, #0
 800388e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd feb8 	bl	800160a <_ZN7Encoder15getDistance10mmEv>
 800389a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fc4b 	bl	800513e <_ZN8Odometry8getThetaEv>
 80038a8:	ec54 3b10 	vmov	r3, r4, d0
 80038ac:	4618      	mov	r0, r3
 80038ae:	4621      	mov	r1, r4
 80038b0:	f7fd f9b2 	bl	8000c18 <__aeabi_d2f>
 80038b4:	4603      	mov	r3, r0
 80038b6:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80038b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80038bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	d101      	bne.n	80038ca <_ZN9LineTrace8isStableEv+0x46>
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <_ZN9LineTrace8isStableEv+0xd0>)
 80038c8:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80038ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80038ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80038d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038d6:	eeb0 0a66 	vmov.f32	s0, s13
 80038da:	f7fe ffad 	bl	8002838 <_ZSt3absf>
 80038de:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80038e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80038e6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003958 <_ZN9LineTrace8isStableEv+0xd4>
 80038ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f2:	db01      	blt.n	80038f8 <_ZN9LineTrace8isStableEv+0x74>
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <_ZN9LineTrace8isStableEv+0xd8>)
 80038f6:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038fe:	3324      	adds	r3, #36	; 0x24
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <_ZN9LineTrace8isStableEv+0xdc>)
 8003908:	2200      	movs	r2, #0
 800390a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003912:	3324      	adds	r3, #36	; 0x24
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003918:	edd7 7a03 	vldr	s15, [r7, #12]
 800391c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003964 <_ZN9LineTrace8isStableEv+0xe0>
 8003920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003928:	db06      	blt.n	8003938 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <_ZN9LineTrace8isStableEv+0xdc>)
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <_ZN9LineTrace8isStableEv+0xdc>)
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	e002      	b.n	800393e <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <_ZN9LineTrace8isStableEv+0xdc>)
 800393a:	2200      	movs	r2, #0
 800393c:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <_ZN9LineTrace8isStableEv+0xdc>)
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	2b18      	cmp	r3, #24
 8003944:	d901      	bls.n	800394a <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	3727c5ac 	.word	0x3727c5ac
 8003958:	459c4000 	.word	0x459c4000
 800395c:	459c4000 	.word	0x459c4000
 8003960:	20000228 	.word	0x20000228
 8003964:	44fa0000 	.word	0x44fa0000

08003968 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b092      	sub	sp, #72	; 0x48
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003970:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003974:	2201      	movs	r2, #1
 8003976:	4963      	ldr	r1, [pc, #396]	; (8003b04 <_ZN9LineTrace4initEv+0x19c>)
 8003978:	4863      	ldr	r0, [pc, #396]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 800397a:	f7fd ff87 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800397e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003982:	2201      	movs	r2, #1
 8003984:	4961      	ldr	r1, [pc, #388]	; (8003b0c <_ZN9LineTrace4initEv+0x1a4>)
 8003986:	4860      	ldr	r0, [pc, #384]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003988:	f7fd ff80 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 800398c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003990:	2201      	movs	r2, #1
 8003992:	495f      	ldr	r1, [pc, #380]	; (8003b10 <_ZN9LineTrace4initEv+0x1a8>)
 8003994:	485c      	ldr	r0, [pc, #368]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003996:	f7fd ff79 	bl	800188c <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 800399a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800399e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80039a2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80039a6:	eeb0 1a66 	vmov.f32	s2, s13
 80039aa:	eef0 0a47 	vmov.f32	s1, s14
 80039ae:	eeb0 0a67 	vmov.f32	s0, s15
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8c6 	bl	8003b44 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 80039b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039bc:	2201      	movs	r2, #1
 80039be:	4955      	ldr	r1, [pc, #340]	; (8003b14 <_ZN9LineTrace4initEv+0x1ac>)
 80039c0:	4851      	ldr	r0, [pc, #324]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 80039c2:	f7fd ff63 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 80039c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039ca:	2201      	movs	r2, #1
 80039cc:	4952      	ldr	r1, [pc, #328]	; (8003b18 <_ZN9LineTrace4initEv+0x1b0>)
 80039ce:	484e      	ldr	r0, [pc, #312]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 80039d0:	f7fd ff5c 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 80039d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039d8:	2201      	movs	r2, #1
 80039da:	4950      	ldr	r1, [pc, #320]	; (8003b1c <_ZN9LineTrace4initEv+0x1b4>)
 80039dc:	484a      	ldr	r0, [pc, #296]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 80039de:	f7fd ff55 	bl	800188c <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 80039e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80039ea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80039ee:	eeb0 1a66 	vmov.f32	s2, s13
 80039f2:	eef0 0a47 	vmov.f32	s1, s14
 80039f6:	eeb0 0a67 	vmov.f32	s0, s15
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8e8 	bl	8003bd0 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a04:	2201      	movs	r2, #1
 8003a06:	4946      	ldr	r1, [pc, #280]	; (8003b20 <_ZN9LineTrace4initEv+0x1b8>)
 8003a08:	483f      	ldr	r0, [pc, #252]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003a0a:	f7fd ff3f 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a12:	2201      	movs	r2, #1
 8003a14:	4943      	ldr	r1, [pc, #268]	; (8003b24 <_ZN9LineTrace4initEv+0x1bc>)
 8003a16:	483c      	ldr	r0, [pc, #240]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003a18:	f7fd ff38 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a20:	2201      	movs	r2, #1
 8003a22:	4941      	ldr	r1, [pc, #260]	; (8003b28 <_ZN9LineTrace4initEv+0x1c0>)
 8003a24:	4838      	ldr	r0, [pc, #224]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003a26:	f7fd ff31 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a2a:	f107 0320 	add.w	r3, r7, #32
 8003a2e:	2201      	movs	r2, #1
 8003a30:	493e      	ldr	r1, [pc, #248]	; (8003b2c <_ZN9LineTrace4initEv+0x1c4>)
 8003a32:	4835      	ldr	r0, [pc, #212]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003a34:	f7fd ff2a 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a38:	f107 031c 	add.w	r3, r7, #28
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	493c      	ldr	r1, [pc, #240]	; (8003b30 <_ZN9LineTrace4initEv+0x1c8>)
 8003a40:	4831      	ldr	r0, [pc, #196]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003a42:	f7fd ff23 	bl	800188c <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f913 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003a54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a58:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f91c 	bl	8003c9a <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003a62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a66:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f925 	bl	8003cba <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003a70:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a74:	eeb0 0a67 	vmov.f32	s0, s15
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f92e 	bl	8003cda <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003a7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a82:	eeb0 0a67 	vmov.f32	s0, s15
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f937 	bl	8003cfa <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003a8c:	f107 0318 	add.w	r3, r7, #24
 8003a90:	2201      	movs	r2, #1
 8003a92:	4928      	ldr	r1, [pc, #160]	; (8003b34 <_ZN9LineTrace4initEv+0x1cc>)
 8003a94:	481c      	ldr	r0, [pc, #112]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003a96:	f7fd fef9 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4925      	ldr	r1, [pc, #148]	; (8003b38 <_ZN9LineTrace4initEv+0x1d0>)
 8003aa2:	4819      	ldr	r0, [pc, #100]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003aa4:	f7fd fef2 	bl	800188c <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003aa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003aac:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ab0:	eef0 0a47 	vmov.f32	s1, s14
 8003ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f97e 	bl	8003dba <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003aca:	f107 0310 	add.w	r3, r7, #16
 8003ace:	2201      	movs	r2, #1
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <_ZN9LineTrace4initEv+0x1d4>)
 8003ad2:	480d      	ldr	r0, [pc, #52]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003ad4:	f7fd feda 	bl	800188c <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	2201      	movs	r2, #1
 8003ade:	4918      	ldr	r1, [pc, #96]	; (8003b40 <_ZN9LineTrace4initEv+0x1d8>)
 8003ae0:	4809      	ldr	r0, [pc, #36]	; (8003b08 <_ZN9LineTrace4initEv+0x1a0>)
 8003ae2:	f7fd fed3 	bl	800188c <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003ae6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aea:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aee:	eef0 0a47 	vmov.f32	s1, s14
 8003af2:	eeb0 0a67 	vmov.f32	s0, s15
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f979 	bl	8003dee <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003afc:	bf00      	nop
 8003afe:	3748      	adds	r7, #72	; 0x48
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	08019cc8 	.word	0x08019cc8
 8003b08:	08019cd0 	.word	0x08019cd0
 8003b0c:	08019cd8 	.word	0x08019cd8
 8003b10:	08019ce0 	.word	0x08019ce0
 8003b14:	08019ce8 	.word	0x08019ce8
 8003b18:	08019cf4 	.word	0x08019cf4
 8003b1c:	08019d00 	.word	0x08019d00
 8003b20:	08019d0c 	.word	0x08019d0c
 8003b24:	08019d18 	.word	0x08019d18
 8003b28:	08019d24 	.word	0x08019d24
 8003b2c:	08019d30 	.word	0x08019d30
 8003b30:	08019d3c 	.word	0x08019d3c
 8003b34:	08019d48 	.word	0x08019d48
 8003b38:	08019d50 	.word	0x08019d50
 8003b3c:	08019d58 	.word	0x08019d58
 8003b40:	08019d64 	.word	0x08019d64

08003b44 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b50:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b54:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
	return kp_;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	ee07 3a90 	vmov	s15, r3
}
 8003b86:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	ee07 3a90 	vmov	s15, r3
}
 8003ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
	return kd_;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	ee07 3a90 	vmov	s15, r3
}
 8003bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bdc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003be0:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	ee07 3a90 	vmov	s15, r3
}
 8003c12:	eeb0 0a67 	vmov.f32	s0, s15
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	ee07 3a90 	vmov	s15, r3
}
 8003c30:	eeb0 0a67 	vmov.f32	s0, s15
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	ee07 3a90 	vmov	s15, r3
}
 8003c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d28:	ee07 3a90 	vmov	s15, r3
}
 8003d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d48:	ee07 3a90 	vmov	s15, r3
}
 8003d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d68:	ee07 3a90 	vmov	s15, r3
}
 8003d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d88:	ee07 3a90 	vmov	s15, r3
}
 8003d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003da8:	ee07 3a90 	vmov	s15, r3
}
 8003dac:	eeb0 0a67 	vmov.f32	s0, s15
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dc6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003dd0:	3328      	adds	r3, #40	; 0x28
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ddc:	332c      	adds	r3, #44	; 0x2c
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dfa:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e04:	3330      	adds	r3, #48	; 0x30
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e10:	3334      	adds	r3, #52	; 0x34
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e30:	3328      	adds	r3, #40	; 0x28
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	ee07 3a90 	vmov	s15, r3
}
 8003e38:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e54:	3334      	adds	r3, #52	; 0x34
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	ee07 3a90 	vmov	s15, r3
}
 8003e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e78:	3330      	adds	r3, #48	; 0x30
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	ee07 3a90 	vmov	s15, r3
}
 8003e80:	eeb0 0a67 	vmov.f32	s0, s15
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e9c:	332c      	adds	r3, #44	; 0x2c
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	ee07 3a90 	vmov	s15, r3
}
 8003ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8120 	beq.w	8004108 <_ZN9LineTrace4flipEv+0x254>
		// ---- line following processing -----//
		pidTrace();
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fe fe31 	bl	8002b30 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fb8b 	bl	80035ea <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8003ed4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff fbf4 	bl	80036c6 <_ZN9LineTrace16isTargetDistanceEf>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d028      	beq.n	8003f36 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff f80b 	bl	8002f00 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fcca 	bl	8003884 <_ZN9LineTrace8isStableEv>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00c      	beq.n	8003f10 <_ZN9LineTrace4flipEv+0x5c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 fbea 	bl	80056d4 <_ZN10SideSensor10getStatusLEv>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f083 0301 	eor.w	r3, r3, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <_ZN9LineTrace4flipEv+0x5c>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <_ZN9LineTrace4flipEv+0x5e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f1c:	3323      	adds	r3, #35	; 0x23
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd fb9c 	bl	8001664 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 f915 	bl	8005160 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f3c:	3323      	adds	r3, #35	; 0x23
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <_ZN9LineTrace4flipEv+0xa4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 fbc3 	bl	80056d4 <_ZN10SideSensor10getStatusLEv>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <_ZN9LineTrace4flipEv+0xa4>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <_ZN9LineTrace4flipEv+0xa6>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d029      	beq.n	8003fb2 <_ZN9LineTrace4flipEv+0xfe>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f64:	3354      	adds	r3, #84	; 0x54
 8003f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <_ZN9LineTrace4flipEv+0xce>
				store_check_cnt_ = 0;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f74:	333a      	adds	r3, #58	; 0x3a
 8003f76:	2200      	movs	r2, #0
 8003f78:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe ff50 	bl	8002e20 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f80:	e00b      	b.n	8003f9a <_ZN9LineTrace4flipEv+0xe6>
			}
			else{
				store_check_cnt_ = 0;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f88:	333a      	adds	r3, #58	; 0x3a
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff f88a 	bl	80030a8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7fe ff7b 	bl	8002e90 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fa0:	3323      	adds	r3, #35	; 0x23
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fac:	3324      	adds	r3, #36	; 0x24
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fbaa 	bl	800370c <_ZN9LineTrace11isCrossLineEv>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <_ZN9LineTrace4flipEv+0x11e>
			side_sensor_->enableIgnore();
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 fbae 	bl	8005724 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd fb74 	bl	80016ba <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 60){
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 fbbe 	bl	8005758 <_ZN10SideSensor13getIgnoreFlagEv>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00f      	beq.n	8004002 <_ZN9LineTrace4flipEv+0x14e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd fb58 	bl	800169c <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003fec:	eeb0 7a40 	vmov.f32	s14, s0
 8003ff0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8004110 <_ZN9LineTrace4flipEv+0x25c>
 8003ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	db01      	blt.n	8004002 <_ZN9LineTrace4flipEv+0x14e>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <_ZN9LineTrace4flipEv+0x150>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <_ZN9LineTrace4flipEv+0x15e>
			side_sensor_->disableIgnore();
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fb96 	bl	800573e <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fbbe 	bl	8002798 <_ZN10LineSensor13emergencyStopEv>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <_ZN9LineTrace4flipEv+0x18a>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8004114 <_ZN9LineTrace4flipEv+0x260>
 800402a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8004114 <_ZN9LineTrace4flipEv+0x260>
 800402e:	4618      	mov	r0, r3
 8004030:	f001 feae 	bl	8005d90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	4618      	mov	r0, r3
 800403a:	f7fd f9a3 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004044:	3338      	adds	r3, #56	; 0x38
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004052:	3338      	adds	r3, #56	; 0x38
 8004054:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800405c:	3338      	adds	r3, #56	; 0x38
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	f242 720f 	movw	r2, #9999	; 0x270f
 8004064:	4293      	cmp	r3, r2
 8004066:	d906      	bls.n	8004076 <_ZN9LineTrace4flipEv+0x1c2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800406e:	3338      	adds	r3, #56	; 0x38
 8004070:	f242 7210 	movw	r2, #10000	; 0x2710
 8004074:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800407c:	3338      	adds	r3, #56	; 0x38
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004084:	d806      	bhi.n	8004094 <_ZN9LineTrace4flipEv+0x1e0>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	330c      	adds	r3, #12
 800408a:	2152      	movs	r1, #82	; 0x52
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe f811 	bl	80020b4 <_ZN3LED9fullColorEc>
 8004092:	e005      	b.n	80040a0 <_ZN9LineTrace4flipEv+0x1ec>
		else led_.fullColor('B');
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	330c      	adds	r3, #12
 8004098:	2142      	movs	r1, #66	; 0x42
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe f80a 	bl	80020b4 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040a6:	333a      	adds	r3, #58	; 0x3a
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040b4:	333a      	adds	r3, #58	; 0x3a
 80040b6:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040be:	333a      	adds	r3, #58	; 0x3a
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d906      	bls.n	80040d8 <_ZN9LineTrace4flipEv+0x224>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040d0:	333a      	adds	r3, #58	; 0x3a
 80040d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80040d6:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040de:	333a      	adds	r3, #58	; 0x3a
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	2bc8      	cmp	r3, #200	; 0xc8
 80040e4:	d808      	bhi.n	80040f8 <_ZN9LineTrace4flipEv+0x244>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	330c      	adds	r3, #12
 80040ea:	f04f 32ff 	mov.w	r2, #4294967295
 80040ee:	2101      	movs	r1, #1
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe f89b 	bl	800222c <_ZN3LED2LREaa>
		else led_.LR(0, -1);
	}
}
 80040f6:	e007      	b.n	8004108 <_ZN9LineTrace4flipEv+0x254>
		else led_.LR(0, -1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	330c      	adds	r3, #12
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe f892 	bl	800222c <_ZN3LED2LREaa>
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	42700000 	.word	0x42700000
 8004114:	00000000 	.word	0x00000000

08004118 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800412a:	3354      	adds	r3, #84	; 0x54
 800412c:	887a      	ldrh	r2, [r7, #2]
 800412e:	801a      	strh	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	f001 fe72 	bl	8005e42 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	4618      	mov	r0, r3
 8004164:	f001 face 	bl	8005704 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800416e:	3318      	adds	r3, #24
 8004170:	2200      	movs	r2, #0
 8004172:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800417a:	331c      	adds	r3, #28
 800417c:	2200      	movs	r2, #0
 800417e:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004186:	331e      	adds	r3, #30
 8004188:	2200      	movs	r2, #0
 800418a:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004192:	3320      	adds	r3, #32
 8004194:	2200      	movs	r2, #0
 8004196:	801a      	strh	r2, [r3, #0]
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80041ac:	2300      	movs	r3, #0
 80041ae:	737b      	strb	r3, [r7, #13]
	start();
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ffc3 	bl	800413c <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80041b6:	7b7b      	ldrb	r3, [r7, #13]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d161      	bne.n	8004280 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <_ZN9LineTrace7runningEv+0x28>
 80041c2:	2b0a      	cmp	r3, #10
 80041c4:	d030      	beq.n	8004228 <_ZN9LineTrace7runningEv+0x88>
 80041c6:	e05a      	b.n	800427e <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 fa8d 	bl	80056ec <_ZN10SideSensor16getWhiteLineCntREv>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04a      	beq.n	8004278 <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fe fd84 	bl	8002cf0 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041ee:	3354      	adds	r3, #84	; 0x54
 80041f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff f9b9 	bl	8003570 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fa59 	bl	80016ba <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fd fa37 	bl	8001680 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	330c      	adds	r3, #12
 8004216:	f04f 32ff 	mov.w	r2, #4294967295
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe f805 	bl	800222c <_ZN3LED2LREaa>
				stage = 10;
 8004222:	230a      	movs	r3, #10
 8004224:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004226:	e027      	b.n	8004278 <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fa5d 	bl	80056ec <_ZN10SideSensor16getWhiteLineCntREv>
 8004232:	4603      	mov	r3, r0
 8004234:	2b02      	cmp	r3, #2
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01c      	beq.n	800427c <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	330c      	adds	r3, #12
 8004246:	214d      	movs	r1, #77	; 0x4d
 8004248:	4618      	mov	r0, r3
 800424a:	f7fd ff33 	bl	80020b4 <_ZN3LED9fullColorEc>
				loggerStop();
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fe fd69 	bl	8002d26 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff f9ab 	bl	80035b0 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 800425a:	2064      	movs	r0, #100	; 0x64
 800425c:	f005 fd94 	bl	8009d88 <HAL_Delay>

				setTargetVelocity(0);
 8004260:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004290 <_ZN9LineTrace7runningEv+0xf0>
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fd08 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 800426a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800426e:	f005 fd8b 	bl	8009d88 <HAL_Delay>

				goal_flag = true;
 8004272:	2301      	movs	r3, #1
 8004274:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004276:	e001      	b.n	800427c <_ZN9LineTrace7runningEv+0xdc>
			break;
 8004278:	bf00      	nop
 800427a:	e79c      	b.n	80041b6 <_ZN9LineTrace7runningEv+0x16>
			break;
 800427c:	bf00      	nop
	while(goal_flag == false){
 800427e:	e79a      	b.n	80041b6 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f807 	bl	8004294 <_ZN9LineTrace4stopEv>
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	00000000 	.word	0x00000000

08004294 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af02      	add	r7, sp, #8
 800429a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 fddd 	bl	8005e68 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	330c      	adds	r3, #12
 80042b2:	2201      	movs	r2, #1
 80042b4:	f04f 31ff 	mov.w	r1, #4294967295
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fd ffb7 	bl	800222c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042c4:	3354      	adds	r3, #84	; 0x54
 80042c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11e      	bne.n	800430c <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69d8      	ldr	r0, [r3, #28]
 80042d2:	4b28      	ldr	r3, [pc, #160]	; (8004374 <_ZN9LineTrace4stopEv+0xe0>)
 80042d4:	4a28      	ldr	r2, [pc, #160]	; (8004378 <_ZN9LineTrace4stopEv+0xe4>)
 80042d6:	4929      	ldr	r1, [pc, #164]	; (800437c <_ZN9LineTrace4stopEv+0xe8>)
 80042d8:	f000 fbef 	bl	8004aba <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042e2:	3358      	adds	r3, #88	; 0x58
 80042e4:	2200      	movs	r2, #0
 80042e6:	9200      	str	r2, [sp, #0]
 80042e8:	2264      	movs	r2, #100	; 0x64
 80042ea:	4925      	ldr	r1, [pc, #148]	; (8004380 <_ZN9LineTrace4stopEv+0xec>)
 80042ec:	4823      	ldr	r0, [pc, #140]	; (800437c <_ZN9LineTrace4stopEv+0xe8>)
 80042ee:	f7fd fa67 	bl	80017c0 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80042f8:	3378      	adds	r3, #120	; 0x78
 80042fa:	2200      	movs	r2, #0
 80042fc:	9200      	str	r2, [sp, #0]
 80042fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004302:	4920      	ldr	r1, [pc, #128]	; (8004384 <_ZN9LineTrace4stopEv+0xf0>)
 8004304:	481d      	ldr	r0, [pc, #116]	; (800437c <_ZN9LineTrace4stopEv+0xe8>)
 8004306:	f7fd fa5b 	bl	80017c0 <sd_write_array_float>
 800430a:	e01d      	b.n	8004348 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69d8      	ldr	r0, [r3, #28]
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <_ZN9LineTrace4stopEv+0xf4>)
 8004312:	4a1e      	ldr	r2, [pc, #120]	; (800438c <_ZN9LineTrace4stopEv+0xf8>)
 8004314:	4919      	ldr	r1, [pc, #100]	; (800437c <_ZN9LineTrace4stopEv+0xe8>)
 8004316:	f000 fbf4 	bl	8004b02 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004320:	33e8      	adds	r3, #232	; 0xe8
 8004322:	2200      	movs	r2, #0
 8004324:	9200      	str	r2, [sp, #0]
 8004326:	2264      	movs	r2, #100	; 0x64
 8004328:	4919      	ldr	r1, [pc, #100]	; (8004390 <_ZN9LineTrace4stopEv+0xfc>)
 800432a:	4814      	ldr	r0, [pc, #80]	; (800437c <_ZN9LineTrace4stopEv+0xe8>)
 800432c:	f7fd fa48 	bl	80017c0 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8004336:	3348      	adds	r3, #72	; 0x48
 8004338:	2200      	movs	r2, #0
 800433a:	9200      	str	r2, [sp, #0]
 800433c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004340:	4914      	ldr	r1, [pc, #80]	; (8004394 <_ZN9LineTrace4stopEv+0x100>)
 8004342:	480e      	ldr	r0, [pc, #56]	; (800437c <_ZN9LineTrace4stopEv+0xe8>)
 8004344:	f7fd fa3c 	bl	80017c0 <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	330c      	adds	r3, #12
 800434c:	2200      	movs	r2, #0
 800434e:	f04f 31ff 	mov.w	r1, #4294967295
 8004352:	4618      	mov	r0, r3
 8004354:	f7fd ff6a 	bl	800222c <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fc68 	bl	8004c32 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fc0f 	bl	8004b8a <_ZN6Logger10resetLogs2Ev>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	08019d70 	.word	0x08019d70
 8004378:	08019d7c 	.word	0x08019d7c
 800437c:	08019d8c 	.word	0x08019d8c
 8004380:	08019d98 	.word	0x08019d98
 8004384:	08019da8 	.word	0x08019da8
 8004388:	08019db4 	.word	0x08019db4
 800438c:	08019dc0 	.word	0x08019dc0
 8004390:	08019dd0 	.word	0x08019dd0
 8004394:	08019de0 	.word	0x08019de0

08004398 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b08b      	sub	sp, #44	; 0x2c
 800439c:	af02      	add	r7, sp, #8
 800439e:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fb41 	bl	8004a2c <_ZN6Logger23getDistanceArrayPointerEv>
 80043aa:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fb49 	bl	8004a48 <_ZN6Logger20getThetaArrayPointerEv>
 80043b6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80043b8:	2300      	movs	r3, #0
 80043ba:	837b      	strh	r3, [r7, #26]
 80043bc:	8b7b      	ldrh	r3, [r7, #26]
 80043be:	f241 726f 	movw	r2, #5999	; 0x176f
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d84b      	bhi.n	800445e <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80043c6:	8b7b      	ldrh	r3, [r7, #26]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80043d2:	8b7b      	ldrh	r3, [r7, #26]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80043de:	edd7 7a07 	vldr	s15, [r7, #28]
 80043e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ea:	d101      	bne.n	80043f0 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80043ec:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 80043ee:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80043f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80043f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80043f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043fc:	eeb0 0a66 	vmov.f32	s0, s13
 8004400:	f7fe fa1a 	bl	8002838 <_ZSt3absf>
 8004404:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004408:	edd7 7a05 	vldr	s15, [r7, #20]
 800440c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004524 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	db01      	blt.n	800441e <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800441a:	4b43      	ldr	r3, [pc, #268]	; (8004528 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 800441c:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800441e:	8b7c      	ldrh	r4, [r7, #26]
 8004420:	ed97 0a05 	vldr	s0, [r7, #20]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fe fe9d 	bl	8003164 <_ZN9LineTrace15radius2VelocityEf>
 800442a:	eef0 7a40 	vmov.f32	s15, s0
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004434:	3304      	adds	r3, #4
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800443e:	8b7b      	ldrh	r3, [r7, #26]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	441a      	add	r2, r3
 8004446:	8b7b      	ldrh	r3, [r7, #26]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	3332      	adds	r3, #50	; 0x32
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3304      	adds	r3, #4
 8004454:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004456:	8b7b      	ldrh	r3, [r7, #26]
 8004458:	3301      	adds	r3, #1
 800445a:	837b      	strh	r3, [r7, #26]
 800445c:	e7ae      	b.n	80043bc <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004464:	3354      	adds	r3, #84	; 0x54
 8004466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d120      	bne.n	80044b0 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800447a:	3310      	adds	r3, #16
 800447c:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004484:	332c      	adds	r3, #44	; 0x2c
 8004486:	edd3 7a00 	vldr	s15, [r3]
 800448a:	6939      	ldr	r1, [r7, #16]
 800448c:	eeb0 0a67 	vmov.f32	s0, s15
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fe ff25 	bl	80032e0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800449c:	3328      	adds	r3, #40	; 0x28
 800449e:	edd3 7a00 	vldr	s15, [r3]
 80044a2:	6939      	ldr	r1, [r7, #16]
 80044a4:	eeb0 0a67 	vmov.f32	s0, s15
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fe ffbd 	bl	8003428 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80044ae:	e027      	b.n	8004500 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044b6:	3354      	adds	r3, #84	; 0x54
 80044b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d11f      	bne.n	8004500 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044cc:	3310      	adds	r3, #16
 80044ce:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044d6:	3334      	adds	r3, #52	; 0x34
 80044d8:	edd3 7a00 	vldr	s15, [r3]
 80044dc:	6939      	ldr	r1, [r7, #16]
 80044de:	eeb0 0a67 	vmov.f32	s0, s15
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fe fefc 	bl	80032e0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044ee:	3330      	adds	r3, #48	; 0x30
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	6939      	ldr	r1, [r7, #16]
 80044f6:	eeb0 0a67 	vmov.f32	s0, s15
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fe ff94 	bl	8003428 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004506:	3310      	adds	r3, #16
 8004508:	2200      	movs	r2, #0
 800450a:	9200      	str	r2, [sp, #0]
 800450c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004510:	4906      	ldr	r1, [pc, #24]	; (800452c <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004512:	4807      	ldr	r0, [pc, #28]	; (8004530 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004514:	f7fd f954 	bl	80017c0 <sd_write_array_float>

}
 8004518:	bf00      	nop
 800451a:	3724      	adds	r7, #36	; 0x24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	3727c5ac 	.word	0x3727c5ac
 8004524:	459c4000 	.word	0x459c4000
 8004528:	459c4000 	.word	0x459c4000
 800452c:	08019df0 	.word	0x08019df0
 8004530:	08019d8c 	.word	0x08019d8c

08004534 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b08b      	sub	sp, #44	; 0x2c
 8004538:	af02      	add	r7, sp, #8
 800453a:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69d8      	ldr	r0, [r3, #28]
 8004540:	4b6b      	ldr	r3, [pc, #428]	; (80046f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004542:	4a6c      	ldr	r2, [pc, #432]	; (80046f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004544:	496c      	ldr	r1, [pc, #432]	; (80046f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004546:	f000 fb00 	bl	8004b4a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004550:	3358      	adds	r3, #88	; 0x58
 8004552:	2264      	movs	r2, #100	; 0x64
 8004554:	4969      	ldr	r1, [pc, #420]	; (80046fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8004556:	4868      	ldr	r0, [pc, #416]	; (80046f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004558:	f7fd f998 	bl	800188c <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004562:	3378      	adds	r3, #120	; 0x78
 8004564:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004568:	4965      	ldr	r1, [pc, #404]	; (8004700 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800456a:	4863      	ldr	r0, [pc, #396]	; (80046f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800456c:	f7fd f98e 	bl	800188c <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa59 	bl	8004a2c <_ZN6Logger23getDistanceArrayPointerEv>
 800457a:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fa61 	bl	8004a48 <_ZN6Logger20getThetaArrayPointerEv>
 8004586:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004588:	2300      	movs	r3, #0
 800458a:	837b      	strh	r3, [r7, #26]
 800458c:	8b7b      	ldrh	r3, [r7, #26]
 800458e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004592:	4293      	cmp	r3, r2
 8004594:	d84b      	bhi.n	800462e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8004596:	8b7b      	ldrh	r3, [r7, #26]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4413      	add	r3, r2
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80045a2:	8b7b      	ldrh	r3, [r7, #26]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80045ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80045b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ba:	d101      	bne.n	80045c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80045bc:	4b51      	ldr	r3, [pc, #324]	; (8004704 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80045be:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80045c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80045c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80045c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045cc:	eeb0 0a66 	vmov.f32	s0, s13
 80045d0:	f7fe f932 	bl	8002838 <_ZSt3absf>
 80045d4:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80045d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80045dc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004708 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80045e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e8:	db01      	blt.n	80045ee <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80045ea:	4b48      	ldr	r3, [pc, #288]	; (800470c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80045ec:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80045ee:	8b7c      	ldrh	r4, [r7, #26]
 80045f0:	ed97 0a05 	vldr	s0, [r7, #20]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fe fdb5 	bl	8003164 <_ZN9LineTrace15radius2VelocityEf>
 80045fa:	eef0 7a40 	vmov.f32	s15, s0
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004604:	3304      	adds	r3, #4
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800460e:	8b7b      	ldrh	r3, [r7, #26]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	441a      	add	r2, r3
 8004616:	8b7b      	ldrh	r3, [r7, #26]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3304      	adds	r3, #4
 8004624:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004626:	8b7b      	ldrh	r3, [r7, #26]
 8004628:	3301      	adds	r3, #1
 800462a:	837b      	strh	r3, [r7, #26]
 800462c:	e7ae      	b.n	800458c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004634:	3354      	adds	r3, #84	; 0x54
 8004636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d120      	bne.n	8004680 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800464a:	3310      	adds	r3, #16
 800464c:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004654:	332c      	adds	r3, #44	; 0x2c
 8004656:	edd3 7a00 	vldr	s15, [r3]
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	eeb0 0a67 	vmov.f32	s0, s15
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fe fe3d 	bl	80032e0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800466c:	3328      	adds	r3, #40	; 0x28
 800466e:	edd3 7a00 	vldr	s15, [r3]
 8004672:	6939      	ldr	r1, [r7, #16]
 8004674:	eeb0 0a67 	vmov.f32	s0, s15
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7fe fed5 	bl	8003428 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800467e:	e027      	b.n	80046d0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004686:	3354      	adds	r3, #84	; 0x54
 8004688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d11f      	bne.n	80046d0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800469c:	3310      	adds	r3, #16
 800469e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046a6:	3334      	adds	r3, #52	; 0x34
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	6939      	ldr	r1, [r7, #16]
 80046ae:	eeb0 0a67 	vmov.f32	s0, s15
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fe fe14 	bl	80032e0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046be:	3330      	adds	r3, #48	; 0x30
 80046c0:	edd3 7a00 	vldr	s15, [r3]
 80046c4:	6939      	ldr	r1, [r7, #16]
 80046c6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fe feac 	bl	8003428 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046d6:	3310      	adds	r3, #16
 80046d8:	2200      	movs	r2, #0
 80046da:	9200      	str	r2, [sp, #0]
 80046dc:	f241 7270 	movw	r2, #6000	; 0x1770
 80046e0:	490b      	ldr	r1, [pc, #44]	; (8004710 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80046e2:	4805      	ldr	r0, [pc, #20]	; (80046f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046e4:	f7fd f86c 	bl	80017c0 <sd_write_array_float>

}
 80046e8:	bf00      	nop
 80046ea:	3724      	adds	r7, #36	; 0x24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd90      	pop	{r4, r7, pc}
 80046f0:	08019d70 	.word	0x08019d70
 80046f4:	08019d7c 	.word	0x08019d7c
 80046f8:	08019d8c 	.word	0x08019d8c
 80046fc:	08019d98 	.word	0x08019d98
 8004700:	08019da8 	.word	0x08019da8
 8004704:	3727c5ac 	.word	0x3727c5ac
 8004708:	459c4000 	.word	0x459c4000
 800470c:	459c4000 	.word	0x459c4000
 8004710:	08019df0 	.word	0x08019df0

08004714 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004722:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004730:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004734:	2200      	movs	r2, #0
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800473e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004742:	2200      	movs	r2, #0
 8004744:	801a      	strh	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800474c:	f203 2386 	addw	r3, r3, #646	; 0x286
 8004750:	2200      	movs	r2, #0
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800475a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800475e:	2200      	movs	r2, #0
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004768:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800476c:	2200      	movs	r2, #0
 800476e:	801a      	strh	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800478c:	f7fd f90a 	bl	80019a4 <sd_mount>
 8004790:	4603      	mov	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d016      	beq.n	80047ce <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80047a0:	f7fc fc7e 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80047a4:	2100      	movs	r1, #0
 80047a6:	2000      	movs	r0, #0
 80047a8:	f7fc fc8a 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80047ac:	4815      	ldr	r0, [pc, #84]	; (8004804 <_ZN6Logger10sdCardInitEv+0x84>)
 80047ae:	f7fc fcb1 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80047b2:	2101      	movs	r1, #1
 80047b4:	2000      	movs	r0, #0
 80047b6:	f7fc fc83 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80047ba:	4813      	ldr	r0, [pc, #76]	; (8004808 <_ZN6Logger10sdCardInitEv+0x88>)
 80047bc:	f7fc fcaa 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80047c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047c4:	f005 fae0 	bl	8009d88 <HAL_Delay>

	  ret = true;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	e015      	b.n	80047fa <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80047ce:	f7fc fc67 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80047d2:	2100      	movs	r1, #0
 80047d4:	2000      	movs	r0, #0
 80047d6:	f7fc fc73 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80047da:	480a      	ldr	r0, [pc, #40]	; (8004804 <_ZN6Logger10sdCardInitEv+0x84>)
 80047dc:	f7fc fc9a 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80047e0:	2101      	movs	r1, #1
 80047e2:	2000      	movs	r0, #0
 80047e4:	f7fc fc6c 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80047e8:	4808      	ldr	r0, [pc, #32]	; (800480c <_ZN6Logger10sdCardInitEv+0x8c>)
 80047ea:	f7fc fc93 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80047ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047f2:	f005 fac9 	bl	8009d88 <HAL_Delay>

	  ret = false;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	08019e00 	.word	0x08019e00
 8004808:	08019e0c 	.word	0x08019e0c
 800480c:	08019e14 	.word	0x08019e14

08004810 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004822:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d028      	beq.n	800487e <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004832:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004848:	f203 2382 	addw	r3, r3, #642	; 0x282
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	3301      	adds	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004858:	f203 2382 	addw	r3, r3, #642	; 0x282
 800485c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004864:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800486e:	d306      	bcc.n	800487e <_ZN6Logger8storeLogEf+0x6e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004876:	f203 2382 	addw	r3, r3, #642	; 0x282
 800487a:	2200      	movs	r2, #0
 800487c:	801a      	strh	r2, [r3, #0]
	}
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800489c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d02a      	beq.n	80048fc <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048ac:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048c6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048d6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048da:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048e2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80048ec:	d306      	bcc.n	80048fc <_ZN6Logger9storeLog2Ef+0x72>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048f4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048f8:	2200      	movs	r2, #0
 80048fa:	801a      	strh	r2, [r3, #0]
	}
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	ed87 0a02 	vstr	s0, [r7, #8]
 8004914:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800491e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800492a:	3320      	adds	r3, #32
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800493a:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004946:	3350      	adds	r3, #80	; 0x50
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004956:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004966:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800496a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004972:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	f241 726f 	movw	r2, #5999	; 0x176f
 800497c:	4293      	cmp	r3, r2
 800497e:	d906      	bls.n	800498e <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004986:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800498a:	2200      	movs	r2, #0
 800498c:	801a      	strh	r2, [r3, #0]
	//}
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80049a6:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049b0:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80049bc:	3340      	adds	r3, #64	; 0x40
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049cc:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80049d8:	3330      	adds	r3, #48	; 0x30
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049e8:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049f8:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049fc:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a04:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	f241 726f 	movw	r2, #5999	; 0x176f
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d906      	bls.n	8004a20 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a18:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a3a:	3380      	adds	r3, #128	; 0x80
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004a56:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b086      	sub	sp, #24
 8004a6a:	af02      	add	r7, sp, #8
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	2300      	movs	r3, #0
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	68b8      	ldr	r0, [r7, #8]
 8004a82:	f7fc fe9d 	bl	80017c0 <sd_write_array_float>
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af02      	add	r7, sp, #8
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	68b8      	ldr	r0, [r7, #8]
 8004aae:	f7fc fe87 	bl	80017c0 <sd_write_array_float>
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af02      	add	r7, sp, #8
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004ace:	3380      	adds	r3, #128	; 0x80
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	9200      	str	r2, [sp, #0]
 8004ad4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	68b8      	ldr	r0, [r7, #8]
 8004adc:	f7fc fe70 	bl	80017c0 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004ae6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004aea:	2200      	movs	r2, #0
 8004aec:	9200      	str	r2, [sp, #0]
 8004aee:	f241 7270 	movw	r2, #6000	; 0x1770
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	68b8      	ldr	r0, [r7, #8]
 8004af6:	f7fc fe63 	bl	80017c0 <sd_write_array_float>
}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af02      	add	r7, sp, #8
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	9200      	str	r2, [sp, #0]
 8004b1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	68b8      	ldr	r0, [r7, #8]
 8004b26:	f7fc fe4b 	bl	80017c0 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b30:	33c0      	adds	r3, #192	; 0xc0
 8004b32:	2200      	movs	r2, #0
 8004b34:	9200      	str	r2, [sp, #0]
 8004b36:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	68b8      	ldr	r0, [r7, #8]
 8004b3e:	f7fc fe3f 	bl	80017c0 <sd_write_array_float>
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b5e:	3380      	adds	r3, #128	; 0x80
 8004b60:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	68b8      	ldr	r0, [r7, #8]
 8004b68:	f7fc fe90 	bl	800188c <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b72:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b76:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b7a:	6839      	ldr	r1, [r7, #0]
 8004b7c:	68b8      	ldr	r0, [r7, #8]
 8004b7e:	f7fc fe85 	bl	800188c <sd_read_array_float>
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <_ZN6Logger10resetLogs2Ev>:
	log_index_tim2_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b08b      	sub	sp, #44	; 0x2c
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ba8:	3340      	adds	r3, #64	; 0x40
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d009      	beq.n	8004bc8 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	617b      	str	r3, [r7, #20]
		log = 0;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	e7f1      	b.n	8004bac <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bce:	33c0      	adds	r3, #192	; 0xc0
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004bdc:	3340      	adds	r3, #64	; 0x40
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d009      	beq.n	8004bfc <_ZN6Logger10resetLogs2Ev+0x72>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	e7f1      	b.n	8004be0 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c02:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004c06:	2200      	movs	r2, #0
 8004c08:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c10:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004c14:	2200      	movs	r2, #0
 8004c16:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c1e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004c22:	2200      	movs	r2, #0
 8004c24:	801a      	strh	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	372c      	adds	r7, #44	; 0x2c
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c40:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004c44:	2200      	movs	r2, #0
 8004c46:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c4e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004c52:	2200      	movs	r2, #0
 8004c54:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c5c:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004c60:	2200      	movs	r2, #0
 8004c62:	801a      	strh	r2, [r3, #0]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c7e:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004c82:	2200      	movs	r2, #0
 8004c84:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c8c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004c90:	2200      	movs	r2, #0
 8004c92:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004cbc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	805a      	strh	r2, [r3, #2]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004cfc:	2108      	movs	r1, #8
 8004cfe:	4805      	ldr	r0, [pc, #20]	; (8004d14 <_ZN5Motor4initEv+0x20>)
 8004d00:	f00a f9f2 	bl	800f0e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004d04:	210c      	movs	r1, #12
 8004d06:	4803      	ldr	r0, [pc, #12]	; (8004d14 <_ZN5Motor4initEv+0x20>)
 8004d08:	f00a f9ee 	bl	800f0e8 <HAL_TIM_PWM_Start>

}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	2004a600 	.word	0x2004a600

08004d18 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	da0d      	bge.n	8004d46 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d30:	481f      	ldr	r0, [pc, #124]	; (8004db0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d32:	f006 fabf 	bl	800b2b4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	425b      	negs	r3, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	81fb      	strh	r3, [r7, #14]
 8004d44:	e00a      	b.n	8004d5c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004d46:	2201      	movs	r2, #1
 8004d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d4c:	4818      	ldr	r0, [pc, #96]	; (8004db0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d4e:	f006 fab1 	bl	800b2b4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da0d      	bge.n	8004d82 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004d66:	2201      	movs	r2, #1
 8004d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d6c:	4810      	ldr	r0, [pc, #64]	; (8004db0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d6e:	f006 faa1 	bl	800b2b4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	425b      	negs	r3, r3
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	81bb      	strh	r3, [r7, #12]
 8004d80:	e00a      	b.n	8004d98 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004d82:	2200      	movs	r2, #0
 8004d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d88:	4809      	ldr	r0, [pc, #36]	; (8004db0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d8a:	f006 fa93 	bl	800b2b4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004d98:	89fa      	ldrh	r2, [r7, #14]
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004da0:	89ba      	ldrh	r2, [r7, #12]
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40020c00 	.word	0x40020c00
 8004db4:	2004a600 	.word	0x2004a600

08004db8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6178      	str	r0, [r7, #20]
 8004dc0:	ed87 0b02 	vstr	d0, [r7, #8]
 8004dc4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <_ZN5Motor8setRatioEdd+0xd8>)
 8004dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dd2:	f7fb feb9 	bl	8000b48 <__aeabi_dcmpgt>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <_ZN5Motor8setRatioEdd+0x30>
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	4c2b      	ldr	r4, [pc, #172]	; (8004e90 <_ZN5Motor8setRatioEdd+0xd8>)
 8004de2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004de6:	e00e      	b.n	8004e06 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <_ZN5Motor8setRatioEdd+0xdc>)
 8004dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004df2:	f7fb fe8b 	bl	8000b0c <__aeabi_dcmplt>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <_ZN5Motor8setRatioEdd+0x4e>
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	4c24      	ldr	r4, [pc, #144]	; (8004e94 <_ZN5Motor8setRatioEdd+0xdc>)
 8004e02:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e10:	f7fb fe9a 	bl	8000b48 <__aeabi_dcmpgt>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <_ZN5Motor8setRatioEdd+0x6e>
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	4c1c      	ldr	r4, [pc, #112]	; (8004e90 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e20:	e9c7 3400 	strd	r3, r4, [r7]
 8004e24:	e00e      	b.n	8004e44 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <_ZN5Motor8setRatioEdd+0xdc>)
 8004e2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e30:	f7fb fe6c 	bl	8000b0c <__aeabi_dcmplt>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <_ZN5Motor8setRatioEdd+0x8c>
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	4c15      	ldr	r4, [pc, #84]	; (8004e94 <_ZN5Motor8setRatioEdd+0xdc>)
 8004e40:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <_ZN5Motor8setRatioEdd+0xe0>)
 8004e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e4e:	f7fb fbeb 	bl	8000628 <__aeabi_dmul>
 8004e52:	4603      	mov	r3, r0
 8004e54:	460c      	mov	r4, r1
 8004e56:	4618      	mov	r0, r3
 8004e58:	4621      	mov	r1, r4
 8004e5a:	f7fb fe95 	bl	8000b88 <__aeabi_d2iz>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	b21a      	sxth	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <_ZN5Motor8setRatioEdd+0xe0>)
 8004e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e70:	f7fb fbda 	bl	8000628 <__aeabi_dmul>
 8004e74:	4603      	mov	r3, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	4618      	mov	r0, r3
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	f7fb fe84 	bl	8000b88 <__aeabi_d2iz>
 8004e80:	4603      	mov	r3, r0
 8004e82:	b21a      	sxth	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	805a      	strh	r2, [r3, #2]

}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}
 8004e90:	3ff00000 	.word	0x3ff00000
 8004e94:	bff00000 	.word	0xbff00000
 8004e98:	409c2000 	.word	0x409c2000

08004e9c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004e9c:	b490      	push	{r4, r7}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	f04f 0400 	mov.w	r4, #0
 8004eb4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	f04f 0400 	mov.w	r4, #0
 8004ec2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	f04f 0400 	mov.w	r4, #0
 8004ed0:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	f04f 0400 	mov.w	r4, #0
 8004ede:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	f04f 0400 	mov.w	r4, #0
 8004eec:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	609a      	str	r2, [r3, #8]
}
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc90      	pop	{r4, r7}
 8004f0c:	4770      	bx	lr
	...

08004f10 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fc ff06 	bl	8001d30 <_ZN3IMU8getOmegaEv>
 8004f24:	ee10 3a10 	vmov	r3, s0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fb fb25 	bl	8000578 <__aeabi_f2d>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	460c      	mov	r4, r1
 8004f32:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fc fb56 	bl	80015ec <_ZN7Encoder11getDistanceEv>
 8004f40:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004f44:	a376      	add	r3, pc, #472	; (adr r3, 8005120 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f4e:	f7fb fb6b 	bl	8000628 <__aeabi_dmul>
 8004f52:	4603      	mov	r3, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7fb fb08 	bl	8000578 <__aeabi_f2d>
 8004f68:	4682      	mov	sl, r0
 8004f6a:	468b      	mov	fp, r1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f80:	f7fb fc7c 	bl	800087c <__aeabi_ddiv>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4640      	mov	r0, r8
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	f7fb f996 	bl	80002bc <__adddf3>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	ec43 2b17 	vmov	d7, r2, r3
 8004f98:	eeb0 0a47 	vmov.f32	s0, s14
 8004f9c:	eef0 0a67 	vmov.f32	s1, s15
 8004fa0:	f00f fbe6 	bl	8014770 <cos>
 8004fa4:	ec53 2b10 	vmov	r2, r3, d0
 8004fa8:	4650      	mov	r0, sl
 8004faa:	4659      	mov	r1, fp
 8004fac:	f7fb fb3c 	bl	8000628 <__aeabi_dmul>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	f7fb f980 	bl	80002bc <__adddf3>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7fb fad3 	bl	8000578 <__aeabi_f2d>
 8004fd2:	4682      	mov	sl, r0
 8004fd4:	468b      	mov	fp, r1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fea:	f7fb fc47 	bl	800087c <__aeabi_ddiv>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	f7fb f961 	bl	80002bc <__adddf3>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	ec43 2b17 	vmov	d7, r2, r3
 8005002:	eeb0 0a47 	vmov.f32	s0, s14
 8005006:	eef0 0a67 	vmov.f32	s1, s15
 800500a:	f00f fbf5 	bl	80147f8 <sin>
 800500e:	ec53 2b10 	vmov	r2, r3, d0
 8005012:	4650      	mov	r0, sl
 8005014:	4659      	mov	r1, fp
 8005016:	f7fb fb07 	bl	8000628 <__aeabi_dmul>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb f94b 	bl	80002bc <__adddf3>
 8005026:	4603      	mov	r3, r0
 8005028:	460c      	mov	r4, r1
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800503c:	461a      	mov	r2, r3
 800503e:	4623      	mov	r3, r4
 8005040:	f7fb f93c 	bl	80002bc <__adddf3>
 8005044:	4603      	mov	r3, r0
 8005046:	460c      	mov	r4, r1
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	ed93 7b08 	vldr	d7, [r3, #32]
 800505a:	eeb0 0a47 	vmov.f32	s0, s14
 800505e:	eef0 0a67 	vmov.f32	s1, s15
 8005062:	f00f fb85 	bl	8014770 <cos>
 8005066:	ec51 0b10 	vmov	r0, r1, d0
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	4b28      	ldr	r3, [pc, #160]	; (8005110 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005070:	f7fb fada 	bl	8000628 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb f91e 	bl	80002bc <__adddf3>
 8005080:	4603      	mov	r3, r0
 8005082:	460c      	mov	r4, r1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	ed93 7b08 	vldr	d7, [r3, #32]
 8005096:	eeb0 0a47 	vmov.f32	s0, s14
 800509a:	eef0 0a67 	vmov.f32	s1, s15
 800509e:	f00f fbab 	bl	80147f8 <sin>
 80050a2:	ec51 0b10 	vmov	r0, r1, d0
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	4b19      	ldr	r3, [pc, #100]	; (8005110 <_ZN8Odometry12calcPotitionEv+0x200>)
 80050ac:	f7fb fabc 	bl	8000628 <__aeabi_dmul>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4620      	mov	r0, r4
 80050b6:	4629      	mov	r1, r5
 80050b8:	f7fb f900 	bl	80002bc <__adddf3>
 80050bc:	4603      	mov	r3, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80050cc:	4618      	mov	r0, r3
 80050ce:	4621      	mov	r1, r4
 80050d0:	f7fb fda2 	bl	8000c18 <__aeabi_d2f>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <_ZN8Odometry12calcPotitionEv+0x204>)
 80050d8:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80050e0:	4618      	mov	r0, r3
 80050e2:	4621      	mov	r1, r4
 80050e4:	f7fb fd98 	bl	8000c18 <__aeabi_d2f>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <_ZN8Odometry12calcPotitionEv+0x208>)
 80050ec:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050f4:	4618      	mov	r0, r3
 80050f6:	4621      	mov	r1, r4
 80050f8:	f7fb fd8e 	bl	8000c18 <__aeabi_d2f>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005100:	601a      	str	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800510c:	f3af 8000 	nop.w
 8005110:	405b8000 	.word	0x405b8000
 8005114:	2000022c 	.word	0x2000022c
 8005118:	20000230 	.word	0x20000230
 800511c:	20000234 	.word	0x20000234
 8005120:	d2f1a9fc 	.word	0xd2f1a9fc
 8005124:	3f50624d 	.word	0x3f50624d

08005128 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff feed 	bl	8004f10 <_ZN8Odometry12calcPotitionEv>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800513e:	b490      	push	{r4, r7}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
	return theta_;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800514c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005150:	eeb0 0a47 	vmov.f32	s0, s14
 8005154:	eef0 0a67 	vmov.f32	s1, s15
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bc90      	pop	{r4, r7}
 800515e:	4770      	bx	lr

08005160 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005160:	b490      	push	{r4, r7}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	f04f 0400 	mov.w	r4, #0
 8005172:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	f04f 0400 	mov.w	r4, #0
 8005180:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	f04f 0400 	mov.w	r4, #0
 800518e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bc90      	pop	{r4, r7}
 800519a:	4770      	bx	lr

0800519c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800519c:	b490      	push	{r4, r7}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80051da:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80051de:	2200      	movs	r2, #0
 80051e0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80051e2:	4a29      	ldr	r2, [pc, #164]	; (8005288 <_ZN13PathFollowingC1Ev+0xec>)
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80051f0:	4a25      	ldr	r2, [pc, #148]	; (8005288 <_ZN13PathFollowingC1Ev+0xec>)
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	f04f 0400 	mov.w	r4, #0
 80051fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80051fe:	4a22      	ldr	r2, [pc, #136]	; (8005288 <_ZN13PathFollowingC1Ev+0xec>)
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800520c:	4a1f      	ldr	r2, [pc, #124]	; (800528c <_ZN13PathFollowingC1Ev+0xf0>)
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	f04f 0400 	mov.w	r4, #0
 8005216:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800521a:	4a1c      	ldr	r2, [pc, #112]	; (800528c <_ZN13PathFollowingC1Ev+0xf0>)
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005228:	4a18      	ldr	r2, [pc, #96]	; (800528c <_ZN13PathFollowingC1Ev+0xf0>)
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	f04f 0400 	mov.w	r4, #0
 8005232:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <_ZN13PathFollowingC1Ev+0xf0>)
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005244:	4a11      	ldr	r2, [pc, #68]	; (800528c <_ZN13PathFollowingC1Ev+0xf0>)
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	f04f 0400 	mov.w	r4, #0
 800524e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005252:	4a0e      	ldr	r2, [pc, #56]	; (800528c <_ZN13PathFollowingC1Ev+0xf0>)
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005260:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <_ZN13PathFollowingC1Ev+0xf4>)
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	f04f 0400 	mov.w	r4, #0
 800526a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800526e:	4a08      	ldr	r2, [pc, #32]	; (8005290 <_ZN13PathFollowingC1Ev+0xf4>)
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	f04f 0400 	mov.w	r4, #0
 8005278:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bc90      	pop	{r4, r7}
 8005286:	4770      	bx	lr
 8005288:	2004ab00 	.word	0x2004ab00
 800528c:	2004aa90 	.word	0x2004aa90
 8005290:	2004aaf0 	.word	0x2004aaf0

08005294 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800529c:	f001 fd8a 	bl	8006db4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80052a0:	f107 0318 	add.w	r3, r7, #24
 80052a4:	2201      	movs	r2, #1
 80052a6:	4915      	ldr	r1, [pc, #84]	; (80052fc <_ZN13PathFollowing4initEv+0x68>)
 80052a8:	4815      	ldr	r0, [pc, #84]	; (8005300 <_ZN13PathFollowing4initEv+0x6c>)
 80052aa:	f7fc fb35 	bl	8001918 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80052ae:	f107 0310 	add.w	r3, r7, #16
 80052b2:	2201      	movs	r2, #1
 80052b4:	4913      	ldr	r1, [pc, #76]	; (8005304 <_ZN13PathFollowing4initEv+0x70>)
 80052b6:	4812      	ldr	r0, [pc, #72]	; (8005300 <_ZN13PathFollowing4initEv+0x6c>)
 80052b8:	f7fc fb2e 	bl	8001918 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80052bc:	f107 0308 	add.w	r3, r7, #8
 80052c0:	2201      	movs	r2, #1
 80052c2:	4911      	ldr	r1, [pc, #68]	; (8005308 <_ZN13PathFollowing4initEv+0x74>)
 80052c4:	480e      	ldr	r0, [pc, #56]	; (8005300 <_ZN13PathFollowing4initEv+0x6c>)
 80052c6:	f7fc fb27 	bl	8001918 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80052ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80052ce:	ed97 6b04 	vldr	d6, [r7, #16]
 80052d2:	ed97 5b02 	vldr	d5, [r7, #8]
 80052d6:	eeb0 2a45 	vmov.f32	s4, s10
 80052da:	eef0 2a65 	vmov.f32	s5, s11
 80052de:	eeb0 1a46 	vmov.f32	s2, s12
 80052e2:	eef0 1a66 	vmov.f32	s3, s13
 80052e6:	eeb0 0a47 	vmov.f32	s0, s14
 80052ea:	eef0 0a67 	vmov.f32	s1, s15
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f80c 	bl	800530c <_ZN13PathFollowing7setGainEddd>
}
 80052f4:	bf00      	nop
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	08019e1c 	.word	0x08019e1c
 8005300:	08019e24 	.word	0x08019e24
 8005304:	08019e2c 	.word	0x08019e2c
 8005308:	08019e34 	.word	0x08019e34

0800530c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800530c:	b490      	push	{r4, r7}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	61f8      	str	r0, [r7, #28]
 8005314:	ed87 0b04 	vstr	d0, [r7, #16]
 8005318:	ed87 1b02 	vstr	d1, [r7, #8]
 800531c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005320:	4a09      	ldr	r2, [pc, #36]	; (8005348 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005322:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005326:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800532a:	4a07      	ldr	r2, [pc, #28]	; (8005348 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800532c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005330:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005334:	4a04      	ldr	r2, [pc, #16]	; (8005348 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005336:	e9d7 3400 	ldrd	r3, r4, [r7]
 800533a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800533e:	bf00      	nop
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bc90      	pop	{r4, r7}
 8005346:	4770      	bx	lr
 8005348:	2004ab00 	.word	0x2004ab00

0800534c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005354:	2088      	movs	r0, #136	; 0x88
 8005356:	f7fc fe2e 	bl	8001fb6 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800535a:	2080      	movs	r0, #128	; 0x80
 800535c:	f7fc fe2b 	bl	8001fb6 <INA260_init>
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005370:	2188      	movs	r1, #136	; 0x88
 8005372:	2002      	movs	r0, #2
 8005374:	f7fc fdbc 	bl	8001ef0 <INA260_read>
 8005378:	4603      	mov	r3, r0
 800537a:	4618      	mov	r0, r3
 800537c:	f7fb f8ea 	bl	8000554 <__aeabi_i2d>
 8005380:	a30c      	add	r3, pc, #48	; (adr r3, 80053b4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fb f94f 	bl	8000628 <__aeabi_dmul>
 800538a:	4603      	mov	r3, r0
 800538c:	460c      	mov	r4, r1
 800538e:	4618      	mov	r0, r3
 8005390:	4621      	mov	r1, r4
 8005392:	f7fb fc41 	bl	8000c18 <__aeabi_d2f>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a03      	ldr	r2, [pc, #12]	; (80053b0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80053a2:	6013      	str	r3, [r2, #0]
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd90      	pop	{r4, r7, pc}
 80053ac:	f3af 8000 	nop.w
 80053b0:	20000238 	.word	0x20000238
 80053b4:	47ae147b 	.word	0x47ae147b
 80053b8:	3f547ae1 	.word	0x3f547ae1

080053bc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	ee07 3a90 	vmov	s15, r3

}
 80053cc:	eeb0 0a67 	vmov.f32	s0, s15
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80053e8:	2102      	movs	r1, #2
 80053ea:	4822      	ldr	r0, [pc, #136]	; (8005474 <_ZN12RotarySwitch8getValueEv+0x98>)
 80053ec:	f005 ff4a 	bl	800b284 <HAL_GPIO_ReadPin>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005400:	89fb      	ldrh	r3, [r7, #14]
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005408:	2108      	movs	r1, #8
 800540a:	481a      	ldr	r0, [pc, #104]	; (8005474 <_ZN12RotarySwitch8getValueEv+0x98>)
 800540c:	f005 ff3a 	bl	800b284 <HAL_GPIO_ReadPin>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	f043 0302 	orr.w	r3, r3, #2
 8005426:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005428:	2110      	movs	r1, #16
 800542a:	4812      	ldr	r0, [pc, #72]	; (8005474 <_ZN12RotarySwitch8getValueEv+0x98>)
 800542c:	f005 ff2a 	bl	800b284 <HAL_GPIO_ReadPin>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	f043 0304 	orr.w	r3, r3, #4
 8005446:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005448:	2180      	movs	r1, #128	; 0x80
 800544a:	480a      	ldr	r0, [pc, #40]	; (8005474 <_ZN12RotarySwitch8getValueEv+0x98>)
 800544c:	f005 ff1a 	bl	800b284 <HAL_GPIO_ReadPin>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005460:	89fb      	ldrh	r3, [r7, #14]
 8005462:	f043 0308 	orr.w	r3, r3, #8
 8005466:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005468:	89fb      	ldrh	r3, [r7, #14]

}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40020c00 	.word	0x40020c00

08005478 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	709a      	strb	r2, [r3, #2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	70da      	strb	r2, [r3, #3]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	809a      	strh	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	80da      	strh	r2, [r3, #6]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	721a      	strb	r2, [r3, #8]
{

}
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7a1b      	ldrb	r3, [r3, #8]
 80054c0:	f083 0301 	eor.w	r3, r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80ea 	beq.w	80056a0 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 80054cc:	4b76      	ldr	r3, [pc, #472]	; (80056a8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f083 0301 	eor.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d032      	beq.n	8005540 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 80054da:	2104      	movs	r1, #4
 80054dc:	4873      	ldr	r0, [pc, #460]	; (80056ac <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80054de:	f005 fed1 	bl	800b284 <HAL_GPIO_ReadPin>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <_ZN10SideSensor12updateStatusEv+0x48>
 80054e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ec:	4870      	ldr	r0, [pc, #448]	; (80056b0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80054ee:	f005 fec9 	bl	800b284 <HAL_GPIO_ReadPin>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <_ZN10SideSensor12updateStatusEv+0x48>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <_ZN10SideSensor12updateStatusEv+0x4a>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 8005502:	4b6c      	ldr	r3, [pc, #432]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	4b6a      	ldr	r3, [pc, #424]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e002      	b.n	8005516 <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005510:	4b68      	ldr	r3, [pc, #416]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005512:	2200      	movs	r2, #0
 8005514:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005516:	4b67      	ldr	r3, [pc, #412]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d945      	bls.n	80055aa <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 8005532:	4b5d      	ldr	r3, [pc, #372]	; (80056a8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005538:	4b5e      	ldr	r3, [pc, #376]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 800553a:	2200      	movs	r2, #0
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e034      	b.n	80055aa <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 8005540:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d030      	beq.n	80055aa <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 8005548:	2104      	movs	r1, #4
 800554a:	4858      	ldr	r0, [pc, #352]	; (80056ac <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800554c:	f005 fe9a 	bl	800b284 <HAL_GPIO_ReadPin>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 8005560:	4b54      	ldr	r3, [pc, #336]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	4b52      	ldr	r3, [pc, #328]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e002      	b.n	8005574 <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 800556e:	4b51      	ldr	r3, [pc, #324]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005570:	2200      	movs	r2, #0
 8005572:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005574:	4b4f      	ldr	r3, [pc, #316]	; (80056b4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	2b04      	cmp	r3, #4
 800557a:	d916      	bls.n	80055aa <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	f083 0301 	eor.w	r3, r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8005590:	4b45      	ldr	r3, [pc, #276]	; (80056a8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	88db      	ldrh	r3, [r3, #6]
 800559a:	3301      	adds	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	88da      	ldrh	r2, [r3, #6]
 80055a6:	4b44      	ldr	r3, [pc, #272]	; (80056b8 <_ZN10SideSensor12updateStatusEv+0x204>)
 80055a8:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80055aa:	4b44      	ldr	r3, [pc, #272]	; (80056bc <_ZN10SideSensor12updateStatusEv+0x208>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f083 0301 	eor.w	r3, r3, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d031      	beq.n	800561c <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 80055b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055bc:	483c      	ldr	r0, [pc, #240]	; (80056b0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80055be:	f005 fe61 	bl	800b284 <HAL_GPIO_ReadPin>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d108      	bne.n	80055da <_ZN10SideSensor12updateStatusEv+0x126>
 80055c8:	2104      	movs	r1, #4
 80055ca:	4838      	ldr	r0, [pc, #224]	; (80056ac <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80055cc:	f005 fe5a 	bl	800b284 <HAL_GPIO_ReadPin>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <_ZN10SideSensor12updateStatusEv+0x126>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <_ZN10SideSensor12updateStatusEv+0x128>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 80055e0:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	4b35      	ldr	r3, [pc, #212]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	e002      	b.n	80055f4 <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 80055ee:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80055f4:	4b32      	ldr	r3, [pc, #200]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d90f      	bls.n	800561c <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005610:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <_ZN10SideSensor12updateStatusEv+0x208>)
 8005612:	2201      	movs	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005616:	4b2a      	ldr	r3, [pc, #168]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005618:	2200      	movs	r2, #0
 800561a:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <_ZN10SideSensor12updateStatusEv+0x208>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d031      	beq.n	8005688 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 8005624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005628:	4821      	ldr	r0, [pc, #132]	; (80056b0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800562a:	f005 fe2b 	bl	800b284 <HAL_GPIO_ReadPin>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 800563e:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e002      	b.n	8005652 <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800564e:	2200      	movs	r2, #0
 8005650:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005652:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	2b04      	cmp	r3, #4
 8005658:	d916      	bls.n	8005688 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	f083 0302 	eor.w	r3, r3, #2
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <_ZN10SideSensor12updateStatusEv+0x208>)
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	889b      	ldrh	r3, [r3, #4]
 8005678:	3301      	adds	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	889a      	ldrh	r2, [r3, #4]
 8005684:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <_ZN10SideSensor12updateStatusEv+0x210>)
 8005686:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	881a      	ldrh	r2, [r3, #0]
 800568c:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <_ZN10SideSensor12updateStatusEv+0x214>)
 800568e:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	789a      	ldrb	r2, [r3, #2]
 8005694:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <_ZN10SideSensor12updateStatusEv+0x218>)
 8005696:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	78da      	ldrb	r2, [r3, #3]
 800569c:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <_ZN10SideSensor12updateStatusEv+0x21c>)
 800569e:	701a      	strb	r2, [r3, #0]
	}

}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000244 	.word	0x20000244
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40020c00 	.word	0x40020c00
 80056b4:	20000248 	.word	0x20000248
 80056b8:	20000242 	.word	0x20000242
 80056bc:	20000245 	.word	0x20000245
 80056c0:	20000246 	.word	0x20000246
 80056c4:	20000240 	.word	0x20000240
 80056c8:	2000023c 	.word	0x2000023c
 80056cc:	2000023e 	.word	0x2000023e
 80056d0:	2000023f 	.word	0x2000023f

080056d4 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	return status_L_;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	789b      	ldrb	r3, [r3, #2]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	88db      	ldrh	r3, [r3, #6]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	80da      	strh	r2, [r3, #6]
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	721a      	strb	r2, [r3, #8]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	721a      	strb	r2, [r3, #8]
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	7a1b      	ldrb	r3, [r3, #8]
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3308      	adds	r3, #8
 8005780:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f010 f872 	bl	8015870 <memset>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005792:	811a      	strh	r2, [r3, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800579a:	815a      	strh	r2, [r3, #10]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a2:	819a      	strh	r2, [r3, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057aa:	81da      	strh	r2, [r3, #14]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057b2:	821a      	strh	r2, [r3, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ba:	825a      	strh	r2, [r3, #18]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	829a      	strh	r2, [r3, #20]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	82da      	strh	r2, [r3, #22]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	831a      	strh	r2, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	835a      	strh	r2, [r3, #26]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	839a      	strh	r2, [r3, #28]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	83da      	strh	r2, [r3, #30]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	841a      	strh	r2, [r3, #32]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ec:	845a      	strh	r2, [r3, #34]	; 0x22
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	849a      	strh	r2, [r3, #36]	; 0x24
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fa:	84da      	strh	r2, [r3, #38]	; 0x26
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	851a      	strh	r2, [r3, #40]	; 0x28
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005816:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581e:	861a      	strh	r2, [r3, #48]	; 0x30
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	865a      	strh	r2, [r3, #50]	; 0x32
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	869a      	strh	r2, [r3, #52]	; 0x34
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005832:	86da      	strh	r2, [r3, #54]	; 0x36
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800583a:	871a      	strh	r2, [r3, #56]	; 0x38
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005876:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005888:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005892:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058be:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005916:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005930:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005942:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800595c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005976:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005980:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005992:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800599c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ae:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c2:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ee:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059f8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a02:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a14:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a46:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a50:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a62:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a74:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a96:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aa0:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aba:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005acc:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	609a      	str	r2, [r3, #8]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	611a      	str	r2, [r3, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	615a      	str	r2, [r3, #20]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	619a      	str	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	61da      	str	r2, [r3, #28]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	621a      	str	r2, [r3, #32]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
	...

08005b98 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba4:	f107 020c 	add.w	r2, r7, #12
 8005ba8:	f107 0110 	add.w	r1, r7, #16
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fb fd09 	bl	80015c4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005bb2:	ed97 7a04 	vldr	s14, [r7, #16]
 8005bb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bc6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005bca:	6978      	ldr	r0, [r7, #20]
 8005bcc:	f7fa fcd4 	bl	8000578 <__aeabi_f2d>
 8005bd0:	a30e      	add	r3, pc, #56	; (adr r3, 8005c0c <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fd27 	bl	8000628 <__aeabi_dmul>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	4618      	mov	r0, r3
 8005be0:	4621      	mov	r1, r4
 8005be2:	f7fb f819 	bl	8000c18 <__aeabi_d2f>
 8005be6:	4602      	mov	r2, r0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005bf2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	ee07 3a90 	vmov	s15, r3
}
 8005bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd90      	pop	{r4, r7, pc}
 8005c06:	bf00      	nop
 8005c08:	2000024c 	.word	0x2000024c
 8005c0c:	1ab1d998 	.word	0x1ab1d998
 8005c10:	3f7830b5 	.word	0x3f7830b5
 8005c14:	00000000 	.word	0x00000000

08005c18 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	ed93 7a00 	vldr	s14, [r3]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c30:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005c3e:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c54:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005c60:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fa fc87 	bl	8000578 <__aeabi_f2d>
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	ed93 7a06 	vldr	s14, [r3, #24]
 8005c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7c:	ee17 0a90 	vmov	r0, s15
 8005c80:	f7fa fc7a 	bl	8000578 <__aeabi_f2d>
 8005c84:	a334      	add	r3, pc, #208	; (adr r3, 8005d58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f7fa fccd 	bl	8000628 <__aeabi_dmul>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa fb11 	bl	80002bc <__adddf3>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	f7fa ffb9 	bl	8000c18 <__aeabi_d2f>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	4b2d      	ldr	r3, [pc, #180]	; (8005d60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005caa:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	ed93 7a05 	vldr	s14, [r3, #20]
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005cb4:	edd3 7a00 	vldr	s15, [r3]
 8005cb8:	edd7 6a05 	vldr	s13, [r7, #20]
 8005cbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	ee17 0a90 	vmov	r0, s15
 8005cc8:	f7fa fc56 	bl	8000578 <__aeabi_f2d>
 8005ccc:	a322      	add	r3, pc, #136	; (adr r3, 8005d58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fdd3 	bl	800087c <__aeabi_ddiv>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	4618      	mov	r0, r3
 8005cdc:	4621      	mov	r1, r4
 8005cde:	f7fa ff9b 	bl	8000c18 <__aeabi_d2f>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005cea:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005cf4:	edd3 7a00 	vldr	s15, [r3]
 8005cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cfc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d12:	ee17 0a90 	vmov	r0, s15
 8005d16:	f7fa fc2f 	bl	8000578 <__aeabi_f2d>
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	460e      	mov	r6, r1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d24:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d2c:	ee17 0a90 	vmov	r0, s15
 8005d30:	f7fa fc22 	bl	8000578 <__aeabi_f2d>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	ec43 2b11 	vmov	d1, r2, r3
 8005d3c:	ec46 5b10 	vmov	d0, r5, r6
 8005d40:	4620      	mov	r0, r4
 8005d42:	f7ff f839 	bl	8004db8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005d46:	4a07      	ldr	r2, [pc, #28]	; (8005d64 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	6013      	str	r3, [r2, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d54:	f3af 8000 	nop.w
 8005d58:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d5c:	3f50624d 	.word	0x3f50624d
 8005d60:	20000254 	.word	0x20000254
 8005d64:	20000250 	.word	0x20000250

08005d68 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d74:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d9c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8005dc8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	615a      	str	r2, [r3, #20]
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005df6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005dfa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff feb7 	bl	8005b98 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff feef 	bl	8005c18 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005e98 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e80:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005e98 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe ff97 	bl	8004db8 <_ZN5Motor8setRatioEdd>

}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	f3af 8000 	nop.w
	...

08005ea0 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	ee07 3a90 	vmov	s15, r3
}
 8005eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005ed2:	f001 fe0f 	bl	8007af4 <cppFlip100ns>

		tim7_timer++;
 8005ed6:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3301      	adds	r3, #1
 8005edc:	4a1b      	ldr	r2, [pc, #108]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ede:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1a      	ldr	r2, [pc, #104]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d902      	bls.n	8005ef0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005eea:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d10e      	bne.n	8005f18 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005efa:	f001 fdcb 	bl	8007a94 <cppFlip1ms>

		tim6_timer++;
 8005efe:	4b16      	ldr	r3, [pc, #88]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f06:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005f08:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a10      	ldr	r2, [pc, #64]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d902      	bls.n	8005f18 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0f      	ldr	r2, [pc, #60]	; (8005f5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10e      	bne.n	8005f40 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005f22:	f001 fdf1 	bl	8007b08 <cppFlip10ms>

		tim13_timer++;
 8005f26:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	4a0c      	ldr	r2, [pc, #48]	; (8005f60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f2e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a06      	ldr	r2, [pc, #24]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d902      	bls.n	8005f40 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
	}

}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40001400 	.word	0x40001400
 8005f4c:	2004a7b4 	.word	0x2004a7b4
 8005f50:	0001869f 	.word	0x0001869f
 8005f54:	40001000 	.word	0x40001000
 8005f58:	2004a770 	.word	0x2004a770
 8005f5c:	40001c00 	.word	0x40001c00
 8005f60:	2004a7b8 	.word	0x2004a7b8

08005f64 <init>:

void init()
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f6e:	4808      	ldr	r0, [pc, #32]	; (8005f90 <init+0x2c>)
 8005f70:	f005 f9a0 	bl	800b2b4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005f74:	4807      	ldr	r0, [pc, #28]	; (8005f94 <init+0x30>)
 8005f76:	f009 f868 	bl	800f04a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005f7a:	4807      	ldr	r0, [pc, #28]	; (8005f98 <init+0x34>)
 8005f7c:	f009 f865 	bl	800f04a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005f80:	4806      	ldr	r0, [pc, #24]	; (8005f9c <init+0x38>)
 8005f82:	f009 f862 	bl	800f04a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005f86:	f001 fce3 	bl	8007950 <cppInit>

	//path_following_initialize();

}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40021000 	.word	0x40021000
 8005f94:	2004a89c 	.word	0x2004a89c
 8005f98:	2004aa40 	.word	0x2004aa40
 8005f9c:	2004a7bc 	.word	0x2004a7bc

08005fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fa4:	f003 fe7e 	bl	8009ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fa8:	f000 f82a 	bl	8006000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fac:	f000 fdbc 	bl	8006b28 <MX_GPIO_Init>
  MX_DMA_Init();
 8005fb0:	f000 fd8a 	bl	8006ac8 <MX_DMA_Init>
  MX_I2C2_Init();
 8005fb4:	f000 f9e8 	bl	8006388 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005fb8:	f000 fa14 	bl	80063e4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005fbc:	f000 fa32 	bl	8006424 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005fc0:	f000 fa66 	bl	8006490 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005fc4:	f000 fb70 	bl	80066a8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005fc8:	f000 fc3c 	bl	8006844 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005fcc:	f000 fd52 	bl	8006a74 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005fd0:	f00b f80e 	bl	8010ff0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005fd4:	f000 fbcc 	bl	8006770 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005fd8:	f000 f9a8 	bl	800632c <MX_I2C1_Init>
  MX_TIM3_Init();
 8005fdc:	f000 fb00 	bl	80065e0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005fe0:	f000 fc88 	bl	80068f4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005fe4:	f000 fcd4 	bl	8006990 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005fe8:	f000 f898 	bl	800611c <MX_ADC2_Init>
  MX_TIM7_Init();
 8005fec:	f000 fbf6 	bl	80067dc <MX_TIM7_Init>
  MX_TIM13_Init();
 8005ff0:	f000 fd1c 	bl	8006a2c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005ff4:	f7ff ffb6 	bl	8005f64 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005ff8:	f001 fda6 	bl	8007b48 <cppLoop>
 8005ffc:	e7fc      	b.n	8005ff8 <main+0x58>
	...

08006000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b0a4      	sub	sp, #144	; 0x90
 8006004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006006:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800600a:	2234      	movs	r2, #52	; 0x34
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f00f fc2e 	bl	8015870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006014:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	605a      	str	r2, [r3, #4]
 800601e:	609a      	str	r2, [r3, #8]
 8006020:	60da      	str	r2, [r3, #12]
 8006022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006024:	f107 030c 	add.w	r3, r7, #12
 8006028:	223c      	movs	r2, #60	; 0x3c
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f00f fc1f 	bl	8015870 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	4b37      	ldr	r3, [pc, #220]	; (8006114 <SystemClock_Config+0x114>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	4a36      	ldr	r2, [pc, #216]	; (8006114 <SystemClock_Config+0x114>)
 800603c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006040:	6413      	str	r3, [r2, #64]	; 0x40
 8006042:	4b34      	ldr	r3, [pc, #208]	; (8006114 <SystemClock_Config+0x114>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800604e:	2300      	movs	r3, #0
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	4b31      	ldr	r3, [pc, #196]	; (8006118 <SystemClock_Config+0x118>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a30      	ldr	r2, [pc, #192]	; (8006118 <SystemClock_Config+0x118>)
 8006058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <SystemClock_Config+0x118>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800606a:	2301      	movs	r3, #1
 800606c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800606e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006072:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006074:	2302      	movs	r3, #2
 8006076:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006078:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800607c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800607e:	2308      	movs	r3, #8
 8006080:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006082:	23b4      	movs	r3, #180	; 0xb4
 8006084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006088:	2302      	movs	r3, #2
 800608a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800608e:	2308      	movs	r3, #8
 8006090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006094:	2302      	movs	r3, #2
 8006096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800609a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800609e:	4618      	mov	r0, r3
 80060a0:	f006 fd2a 	bl	800caf8 <HAL_RCC_OscConfig>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80060aa:	f000 fe7f 	bl	8006dac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80060ae:	f006 f8a5 	bl	800c1fc <HAL_PWREx_EnableOverDrive>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80060b8:	f000 fe78 	bl	8006dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060bc:	230f      	movs	r3, #15
 80060be:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060c0:	2302      	movs	r3, #2
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060c4:	2300      	movs	r3, #0
 80060c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80060c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80060cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80060ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060d2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80060d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060d8:	2105      	movs	r1, #5
 80060da:	4618      	mov	r0, r3
 80060dc:	f006 f8de 	bl	800c29c <HAL_RCC_ClockConfig>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <SystemClock_Config+0xea>
  {
    Error_Handler();
 80060e6:	f000 fe61 	bl	8006dac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80060ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80060ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80060f0:	2300      	movs	r3, #0
 80060f2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80060f4:	2300      	movs	r3, #0
 80060f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060f8:	f107 030c 	add.w	r3, r7, #12
 80060fc:	4618      	mov	r0, r3
 80060fe:	f006 fabd 	bl	800c67c <HAL_RCCEx_PeriphCLKConfig>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006108:	f000 fe50 	bl	8006dac <Error_Handler>
  }
}
 800610c:	bf00      	nop
 800610e:	3790      	adds	r7, #144	; 0x90
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	40007000 	.word	0x40007000

0800611c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006122:	463b      	mov	r3, r7
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	605a      	str	r2, [r3, #4]
 800612a:	609a      	str	r2, [r3, #8]
 800612c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800612e:	4b7c      	ldr	r3, [pc, #496]	; (8006320 <MX_ADC2_Init+0x204>)
 8006130:	4a7c      	ldr	r2, [pc, #496]	; (8006324 <MX_ADC2_Init+0x208>)
 8006132:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006134:	4b7a      	ldr	r3, [pc, #488]	; (8006320 <MX_ADC2_Init+0x204>)
 8006136:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800613a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800613c:	4b78      	ldr	r3, [pc, #480]	; (8006320 <MX_ADC2_Init+0x204>)
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006142:	4b77      	ldr	r3, [pc, #476]	; (8006320 <MX_ADC2_Init+0x204>)
 8006144:	2201      	movs	r2, #1
 8006146:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006148:	4b75      	ldr	r3, [pc, #468]	; (8006320 <MX_ADC2_Init+0x204>)
 800614a:	2201      	movs	r2, #1
 800614c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800614e:	4b74      	ldr	r3, [pc, #464]	; (8006320 <MX_ADC2_Init+0x204>)
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006156:	4b72      	ldr	r3, [pc, #456]	; (8006320 <MX_ADC2_Init+0x204>)
 8006158:	2200      	movs	r2, #0
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800615c:	4b70      	ldr	r3, [pc, #448]	; (8006320 <MX_ADC2_Init+0x204>)
 800615e:	4a72      	ldr	r2, [pc, #456]	; (8006328 <MX_ADC2_Init+0x20c>)
 8006160:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006162:	4b6f      	ldr	r3, [pc, #444]	; (8006320 <MX_ADC2_Init+0x204>)
 8006164:	2200      	movs	r2, #0
 8006166:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006168:	4b6d      	ldr	r3, [pc, #436]	; (8006320 <MX_ADC2_Init+0x204>)
 800616a:	220e      	movs	r2, #14
 800616c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800616e:	4b6c      	ldr	r3, [pc, #432]	; (8006320 <MX_ADC2_Init+0x204>)
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006176:	4b6a      	ldr	r3, [pc, #424]	; (8006320 <MX_ADC2_Init+0x204>)
 8006178:	2201      	movs	r2, #1
 800617a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800617c:	4868      	ldr	r0, [pc, #416]	; (8006320 <MX_ADC2_Init+0x204>)
 800617e:	f003 fe25 	bl	8009dcc <HAL_ADC_Init>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006188:	f000 fe10 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800618c:	230a      	movs	r3, #10
 800618e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006190:	2301      	movs	r3, #1
 8006192:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006194:	2306      	movs	r3, #6
 8006196:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006198:	463b      	mov	r3, r7
 800619a:	4619      	mov	r1, r3
 800619c:	4860      	ldr	r0, [pc, #384]	; (8006320 <MX_ADC2_Init+0x204>)
 800619e:	f003 ff69 	bl	800a074 <HAL_ADC_ConfigChannel>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80061a8:	f000 fe00 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80061ac:	230b      	movs	r3, #11
 80061ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80061b0:	2302      	movs	r3, #2
 80061b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061b4:	463b      	mov	r3, r7
 80061b6:	4619      	mov	r1, r3
 80061b8:	4859      	ldr	r0, [pc, #356]	; (8006320 <MX_ADC2_Init+0x204>)
 80061ba:	f003 ff5b 	bl	800a074 <HAL_ADC_ConfigChannel>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80061c4:	f000 fdf2 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80061c8:	230c      	movs	r3, #12
 80061ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80061cc:	2303      	movs	r3, #3
 80061ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061d0:	463b      	mov	r3, r7
 80061d2:	4619      	mov	r1, r3
 80061d4:	4852      	ldr	r0, [pc, #328]	; (8006320 <MX_ADC2_Init+0x204>)
 80061d6:	f003 ff4d 	bl	800a074 <HAL_ADC_ConfigChannel>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80061e0:	f000 fde4 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80061e4:	230d      	movs	r3, #13
 80061e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80061e8:	2304      	movs	r3, #4
 80061ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061ec:	463b      	mov	r3, r7
 80061ee:	4619      	mov	r1, r3
 80061f0:	484b      	ldr	r0, [pc, #300]	; (8006320 <MX_ADC2_Init+0x204>)
 80061f2:	f003 ff3f 	bl	800a074 <HAL_ADC_ConfigChannel>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80061fc:	f000 fdd6 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006200:	2300      	movs	r3, #0
 8006202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006204:	2305      	movs	r3, #5
 8006206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006208:	463b      	mov	r3, r7
 800620a:	4619      	mov	r1, r3
 800620c:	4844      	ldr	r0, [pc, #272]	; (8006320 <MX_ADC2_Init+0x204>)
 800620e:	f003 ff31 	bl	800a074 <HAL_ADC_ConfigChannel>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006218:	f000 fdc8 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800621c:	2301      	movs	r3, #1
 800621e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006220:	2306      	movs	r3, #6
 8006222:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006224:	463b      	mov	r3, r7
 8006226:	4619      	mov	r1, r3
 8006228:	483d      	ldr	r0, [pc, #244]	; (8006320 <MX_ADC2_Init+0x204>)
 800622a:	f003 ff23 	bl	800a074 <HAL_ADC_ConfigChannel>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006234:	f000 fdba 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006238:	2302      	movs	r3, #2
 800623a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800623c:	2307      	movs	r3, #7
 800623e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006240:	463b      	mov	r3, r7
 8006242:	4619      	mov	r1, r3
 8006244:	4836      	ldr	r0, [pc, #216]	; (8006320 <MX_ADC2_Init+0x204>)
 8006246:	f003 ff15 	bl	800a074 <HAL_ADC_ConfigChannel>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006250:	f000 fdac 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006254:	2303      	movs	r3, #3
 8006256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006258:	2308      	movs	r3, #8
 800625a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800625c:	463b      	mov	r3, r7
 800625e:	4619      	mov	r1, r3
 8006260:	482f      	ldr	r0, [pc, #188]	; (8006320 <MX_ADC2_Init+0x204>)
 8006262:	f003 ff07 	bl	800a074 <HAL_ADC_ConfigChannel>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800626c:	f000 fd9e 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006270:	2304      	movs	r3, #4
 8006272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006274:	2309      	movs	r3, #9
 8006276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006278:	463b      	mov	r3, r7
 800627a:	4619      	mov	r1, r3
 800627c:	4828      	ldr	r0, [pc, #160]	; (8006320 <MX_ADC2_Init+0x204>)
 800627e:	f003 fef9 	bl	800a074 <HAL_ADC_ConfigChannel>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006288:	f000 fd90 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800628c:	2305      	movs	r3, #5
 800628e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006290:	230a      	movs	r3, #10
 8006292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006294:	463b      	mov	r3, r7
 8006296:	4619      	mov	r1, r3
 8006298:	4821      	ldr	r0, [pc, #132]	; (8006320 <MX_ADC2_Init+0x204>)
 800629a:	f003 feeb 	bl	800a074 <HAL_ADC_ConfigChannel>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80062a4:	f000 fd82 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80062a8:	2306      	movs	r3, #6
 80062aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80062ac:	230b      	movs	r3, #11
 80062ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062b0:	463b      	mov	r3, r7
 80062b2:	4619      	mov	r1, r3
 80062b4:	481a      	ldr	r0, [pc, #104]	; (8006320 <MX_ADC2_Init+0x204>)
 80062b6:	f003 fedd 	bl	800a074 <HAL_ADC_ConfigChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80062c0:	f000 fd74 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80062c4:	2307      	movs	r3, #7
 80062c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80062c8:	230c      	movs	r3, #12
 80062ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062cc:	463b      	mov	r3, r7
 80062ce:	4619      	mov	r1, r3
 80062d0:	4813      	ldr	r0, [pc, #76]	; (8006320 <MX_ADC2_Init+0x204>)
 80062d2:	f003 fecf 	bl	800a074 <HAL_ADC_ConfigChannel>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80062dc:	f000 fd66 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80062e0:	2308      	movs	r3, #8
 80062e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80062e4:	230d      	movs	r3, #13
 80062e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062e8:	463b      	mov	r3, r7
 80062ea:	4619      	mov	r1, r3
 80062ec:	480c      	ldr	r0, [pc, #48]	; (8006320 <MX_ADC2_Init+0x204>)
 80062ee:	f003 fec1 	bl	800a074 <HAL_ADC_ConfigChannel>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80062f8:	f000 fd58 	bl	8006dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80062fc:	2309      	movs	r3, #9
 80062fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006300:	230e      	movs	r3, #14
 8006302:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006304:	463b      	mov	r3, r7
 8006306:	4619      	mov	r1, r3
 8006308:	4805      	ldr	r0, [pc, #20]	; (8006320 <MX_ADC2_Init+0x204>)
 800630a:	f003 feb3 	bl	800a074 <HAL_ADC_ConfigChannel>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006314:	f000 fd4a 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	2004a640 	.word	0x2004a640
 8006324:	40012100 	.word	0x40012100
 8006328:	0f000001 	.word	0x0f000001

0800632c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006330:	4b12      	ldr	r3, [pc, #72]	; (800637c <MX_I2C1_Init+0x50>)
 8006332:	4a13      	ldr	r2, [pc, #76]	; (8006380 <MX_I2C1_Init+0x54>)
 8006334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006336:	4b11      	ldr	r3, [pc, #68]	; (800637c <MX_I2C1_Init+0x50>)
 8006338:	4a12      	ldr	r2, [pc, #72]	; (8006384 <MX_I2C1_Init+0x58>)
 800633a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800633c:	4b0f      	ldr	r3, [pc, #60]	; (800637c <MX_I2C1_Init+0x50>)
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006342:	4b0e      	ldr	r3, [pc, #56]	; (800637c <MX_I2C1_Init+0x50>)
 8006344:	2200      	movs	r2, #0
 8006346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <MX_I2C1_Init+0x50>)
 800634a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800634e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <MX_I2C1_Init+0x50>)
 8006352:	2200      	movs	r2, #0
 8006354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <MX_I2C1_Init+0x50>)
 8006358:	2200      	movs	r2, #0
 800635a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <MX_I2C1_Init+0x50>)
 800635e:	2200      	movs	r2, #0
 8006360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006362:	4b06      	ldr	r3, [pc, #24]	; (800637c <MX_I2C1_Init+0x50>)
 8006364:	2280      	movs	r2, #128	; 0x80
 8006366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006368:	4804      	ldr	r0, [pc, #16]	; (800637c <MX_I2C1_Init+0x50>)
 800636a:	f004 ffbd 	bl	800b2e8 <HAL_I2C_Init>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006374:	f000 fd1a 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006378:	bf00      	nop
 800637a:	bd80      	pop	{r7, pc}
 800637c:	2004a688 	.word	0x2004a688
 8006380:	40005400 	.word	0x40005400
 8006384:	000186a0 	.word	0x000186a0

08006388 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800638c:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <MX_I2C2_Init+0x50>)
 800638e:	4a13      	ldr	r2, [pc, #76]	; (80063dc <MX_I2C2_Init+0x54>)
 8006390:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006392:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <MX_I2C2_Init+0x50>)
 8006394:	4a12      	ldr	r2, [pc, #72]	; (80063e0 <MX_I2C2_Init+0x58>)
 8006396:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <MX_I2C2_Init+0x50>)
 800639a:	2200      	movs	r2, #0
 800639c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <MX_I2C2_Init+0x50>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063a4:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <MX_I2C2_Init+0x50>)
 80063a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <MX_I2C2_Init+0x50>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <MX_I2C2_Init+0x50>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063b8:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <MX_I2C2_Init+0x50>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <MX_I2C2_Init+0x50>)
 80063c0:	2280      	movs	r2, #128	; 0x80
 80063c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80063c4:	4804      	ldr	r0, [pc, #16]	; (80063d8 <MX_I2C2_Init+0x50>)
 80063c6:	f004 ff8f 	bl	800b2e8 <HAL_I2C_Init>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80063d0:	f000 fcec 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80063d4:	bf00      	nop
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	2004a71c 	.word	0x2004a71c
 80063dc:	40005800 	.word	0x40005800
 80063e0:	000186a0 	.word	0x000186a0

080063e4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <MX_SDIO_SD_Init+0x38>)
 80063ea:	4a0d      	ldr	r2, [pc, #52]	; (8006420 <MX_SDIO_SD_Init+0x3c>)
 80063ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <MX_SDIO_SD_Init+0x38>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80063f4:	4b09      	ldr	r3, [pc, #36]	; (800641c <MX_SDIO_SD_Init+0x38>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <MX_SDIO_SD_Init+0x38>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <MX_SDIO_SD_Init+0x38>)
 8006402:	2200      	movs	r2, #0
 8006404:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <MX_SDIO_SD_Init+0x38>)
 8006408:	2200      	movs	r2, #0
 800640a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800640c:	4b03      	ldr	r3, [pc, #12]	; (800641c <MX_SDIO_SD_Init+0x38>)
 800640e:	2204      	movs	r2, #4
 8006410:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006412:	bf00      	nop
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	2004a91c 	.word	0x2004a91c
 8006420:	40012c00 	.word	0x40012c00

08006424 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006428:	4b17      	ldr	r3, [pc, #92]	; (8006488 <MX_SPI2_Init+0x64>)
 800642a:	4a18      	ldr	r2, [pc, #96]	; (800648c <MX_SPI2_Init+0x68>)
 800642c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800642e:	4b16      	ldr	r3, [pc, #88]	; (8006488 <MX_SPI2_Init+0x64>)
 8006430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006434:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006436:	4b14      	ldr	r3, [pc, #80]	; (8006488 <MX_SPI2_Init+0x64>)
 8006438:	2200      	movs	r2, #0
 800643a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800643c:	4b12      	ldr	r3, [pc, #72]	; (8006488 <MX_SPI2_Init+0x64>)
 800643e:	2200      	movs	r2, #0
 8006440:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006442:	4b11      	ldr	r3, [pc, #68]	; (8006488 <MX_SPI2_Init+0x64>)
 8006444:	2202      	movs	r2, #2
 8006446:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <MX_SPI2_Init+0x64>)
 800644a:	2201      	movs	r2, #1
 800644c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800644e:	4b0e      	ldr	r3, [pc, #56]	; (8006488 <MX_SPI2_Init+0x64>)
 8006450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006454:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <MX_SPI2_Init+0x64>)
 8006458:	2220      	movs	r2, #32
 800645a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <MX_SPI2_Init+0x64>)
 800645e:	2200      	movs	r2, #0
 8006460:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <MX_SPI2_Init+0x64>)
 8006464:	2200      	movs	r2, #0
 8006466:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006468:	4b07      	ldr	r3, [pc, #28]	; (8006488 <MX_SPI2_Init+0x64>)
 800646a:	2200      	movs	r2, #0
 800646c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800646e:	4b06      	ldr	r3, [pc, #24]	; (8006488 <MX_SPI2_Init+0x64>)
 8006470:	220a      	movs	r2, #10
 8006472:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006474:	4804      	ldr	r0, [pc, #16]	; (8006488 <MX_SPI2_Init+0x64>)
 8006476:	f008 f869 	bl	800e54c <HAL_SPI_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006480:	f000 fc94 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}
 8006488:	2004a568 	.word	0x2004a568
 800648c:	40003800 	.word	0x40003800

08006490 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b09a      	sub	sp, #104	; 0x68
 8006494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006496:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800649a:	2224      	movs	r2, #36	; 0x24
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f00f f9e6 	bl	8015870 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064ae:	f107 0320 	add.w	r3, r7, #32
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	605a      	str	r2, [r3, #4]
 80064b8:	609a      	str	r2, [r3, #8]
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	611a      	str	r2, [r3, #16]
 80064be:	615a      	str	r2, [r3, #20]
 80064c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80064c2:	463b      	mov	r3, r7
 80064c4:	2220      	movs	r2, #32
 80064c6:	2100      	movs	r1, #0
 80064c8:	4618      	mov	r0, r3
 80064ca:	f00f f9d1 	bl	8015870 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80064ce:	4b42      	ldr	r3, [pc, #264]	; (80065d8 <MX_TIM1_Init+0x148>)
 80064d0:	4a42      	ldr	r2, [pc, #264]	; (80065dc <MX_TIM1_Init+0x14c>)
 80064d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80064d4:	4b40      	ldr	r3, [pc, #256]	; (80065d8 <MX_TIM1_Init+0x148>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064da:	4b3f      	ldr	r3, [pc, #252]	; (80065d8 <MX_TIM1_Init+0x148>)
 80064dc:	2200      	movs	r2, #0
 80064de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80064e0:	4b3d      	ldr	r3, [pc, #244]	; (80065d8 <MX_TIM1_Init+0x148>)
 80064e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064e8:	4b3b      	ldr	r3, [pc, #236]	; (80065d8 <MX_TIM1_Init+0x148>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80064ee:	4b3a      	ldr	r3, [pc, #232]	; (80065d8 <MX_TIM1_Init+0x148>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064f4:	4b38      	ldr	r3, [pc, #224]	; (80065d8 <MX_TIM1_Init+0x148>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80064fa:	4837      	ldr	r0, [pc, #220]	; (80065d8 <MX_TIM1_Init+0x148>)
 80064fc:	f008 fdc9 	bl	800f092 <HAL_TIM_PWM_Init>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006506:	f000 fc51 	bl	8006dac <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800650a:	2303      	movs	r3, #3
 800650c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800650e:	2300      	movs	r3, #0
 8006510:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006512:	2301      	movs	r3, #1
 8006514:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006516:	2300      	movs	r3, #0
 8006518:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800651e:	2300      	movs	r3, #0
 8006520:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006522:	2301      	movs	r3, #1
 8006524:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006526:	2300      	movs	r3, #0
 8006528:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800652e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006532:	4619      	mov	r1, r3
 8006534:	4828      	ldr	r0, [pc, #160]	; (80065d8 <MX_TIM1_Init+0x148>)
 8006536:	f008 fe15 	bl	800f164 <HAL_TIM_Encoder_Init>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006540:	f000 fc34 	bl	8006dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006544:	2300      	movs	r3, #0
 8006546:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006548:	2300      	movs	r3, #0
 800654a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800654c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006550:	4619      	mov	r1, r3
 8006552:	4821      	ldr	r0, [pc, #132]	; (80065d8 <MX_TIM1_Init+0x148>)
 8006554:	f009 fb3c 	bl	800fbd0 <HAL_TIMEx_MasterConfigSynchronization>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800655e:	f000 fc25 	bl	8006dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006562:	2360      	movs	r3, #96	; 0x60
 8006564:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800656a:	2300      	movs	r3, #0
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800656e:	2300      	movs	r3, #0
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006572:	2300      	movs	r3, #0
 8006574:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800657a:	2300      	movs	r3, #0
 800657c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800657e:	f107 0320 	add.w	r3, r7, #32
 8006582:	2208      	movs	r2, #8
 8006584:	4619      	mov	r1, r3
 8006586:	4814      	ldr	r0, [pc, #80]	; (80065d8 <MX_TIM1_Init+0x148>)
 8006588:	f008 ffbe 	bl	800f508 <HAL_TIM_PWM_ConfigChannel>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006592:	f000 fc0b 	bl	8006dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006596:	2300      	movs	r3, #0
 8006598:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800659a:	2300      	movs	r3, #0
 800659c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800659e:	2300      	movs	r3, #0
 80065a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80065aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80065b4:	463b      	mov	r3, r7
 80065b6:	4619      	mov	r1, r3
 80065b8:	4807      	ldr	r0, [pc, #28]	; (80065d8 <MX_TIM1_Init+0x148>)
 80065ba:	f009 fb85 	bl	800fcc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80065c4:	f000 fbf2 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80065c8:	4803      	ldr	r0, [pc, #12]	; (80065d8 <MX_TIM1_Init+0x148>)
 80065ca:	f000 ffdf 	bl	800758c <HAL_TIM_MspPostInit>

}
 80065ce:	bf00      	nop
 80065d0:	3768      	adds	r7, #104	; 0x68
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	2004a8dc 	.word	0x2004a8dc
 80065dc:	40010000 	.word	0x40010000

080065e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065e6:	f107 0320 	add.w	r3, r7, #32
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]
 80065f8:	609a      	str	r2, [r3, #8]
 80065fa:	60da      	str	r2, [r3, #12]
 80065fc:	611a      	str	r2, [r3, #16]
 80065fe:	615a      	str	r2, [r3, #20]
 8006600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006602:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <MX_TIM3_Init+0xc0>)
 8006604:	4a27      	ldr	r2, [pc, #156]	; (80066a4 <MX_TIM3_Init+0xc4>)
 8006606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006608:	4b25      	ldr	r3, [pc, #148]	; (80066a0 <MX_TIM3_Init+0xc0>)
 800660a:	2201      	movs	r2, #1
 800660c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800660e:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <MX_TIM3_Init+0xc0>)
 8006610:	2200      	movs	r2, #0
 8006612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006614:	4b22      	ldr	r3, [pc, #136]	; (80066a0 <MX_TIM3_Init+0xc0>)
 8006616:	f241 1293 	movw	r2, #4499	; 0x1193
 800661a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800661c:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <MX_TIM3_Init+0xc0>)
 800661e:	2200      	movs	r2, #0
 8006620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006622:	4b1f      	ldr	r3, [pc, #124]	; (80066a0 <MX_TIM3_Init+0xc0>)
 8006624:	2200      	movs	r2, #0
 8006626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006628:	481d      	ldr	r0, [pc, #116]	; (80066a0 <MX_TIM3_Init+0xc0>)
 800662a:	f008 fd32 	bl	800f092 <HAL_TIM_PWM_Init>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006634:	f000 fbba 	bl	8006dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006638:	2300      	movs	r3, #0
 800663a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800663c:	2300      	movs	r3, #0
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006640:	f107 0320 	add.w	r3, r7, #32
 8006644:	4619      	mov	r1, r3
 8006646:	4816      	ldr	r0, [pc, #88]	; (80066a0 <MX_TIM3_Init+0xc0>)
 8006648:	f009 fac2 	bl	800fbd0 <HAL_TIMEx_MasterConfigSynchronization>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006652:	f000 fbab 	bl	8006dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006656:	2360      	movs	r3, #96	; 0x60
 8006658:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006666:	1d3b      	adds	r3, r7, #4
 8006668:	2200      	movs	r2, #0
 800666a:	4619      	mov	r1, r3
 800666c:	480c      	ldr	r0, [pc, #48]	; (80066a0 <MX_TIM3_Init+0xc0>)
 800666e:	f008 ff4b 	bl	800f508 <HAL_TIM_PWM_ConfigChannel>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006678:	f000 fb98 	bl	8006dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800667c:	1d3b      	adds	r3, r7, #4
 800667e:	2204      	movs	r2, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4807      	ldr	r0, [pc, #28]	; (80066a0 <MX_TIM3_Init+0xc0>)
 8006684:	f008 ff40 	bl	800f508 <HAL_TIM_PWM_ConfigChannel>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800668e:	f000 fb8d 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006692:	4803      	ldr	r0, [pc, #12]	; (80066a0 <MX_TIM3_Init+0xc0>)
 8006694:	f000 ff7a 	bl	800758c <HAL_TIM_MspPostInit>

}
 8006698:	bf00      	nop
 800669a:	3728      	adds	r7, #40	; 0x28
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	2004a774 	.word	0x2004a774
 80066a4:	40000400 	.word	0x40000400

080066a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066ae:	f107 0320 	add.w	r3, r7, #32
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066b8:	1d3b      	adds	r3, r7, #4
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	609a      	str	r2, [r3, #8]
 80066c2:	60da      	str	r2, [r3, #12]
 80066c4:	611a      	str	r2, [r3, #16]
 80066c6:	615a      	str	r2, [r3, #20]
 80066c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <MX_TIM4_Init+0xc0>)
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <MX_TIM4_Init+0xc4>)
 80066ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80066d0:	4b25      	ldr	r3, [pc, #148]	; (8006768 <MX_TIM4_Init+0xc0>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <MX_TIM4_Init+0xc0>)
 80066d8:	2200      	movs	r2, #0
 80066da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80066dc:	4b22      	ldr	r3, [pc, #136]	; (8006768 <MX_TIM4_Init+0xc0>)
 80066de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80066e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066e4:	4b20      	ldr	r3, [pc, #128]	; (8006768 <MX_TIM4_Init+0xc0>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ea:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <MX_TIM4_Init+0xc0>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80066f0:	481d      	ldr	r0, [pc, #116]	; (8006768 <MX_TIM4_Init+0xc0>)
 80066f2:	f008 fcce 	bl	800f092 <HAL_TIM_PWM_Init>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80066fc:	f000 fb56 	bl	8006dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006700:	2300      	movs	r3, #0
 8006702:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006704:	2300      	movs	r3, #0
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006708:	f107 0320 	add.w	r3, r7, #32
 800670c:	4619      	mov	r1, r3
 800670e:	4816      	ldr	r0, [pc, #88]	; (8006768 <MX_TIM4_Init+0xc0>)
 8006710:	f009 fa5e 	bl	800fbd0 <HAL_TIMEx_MasterConfigSynchronization>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800671a:	f000 fb47 	bl	8006dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800671e:	2360      	movs	r3, #96	; 0x60
 8006720:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	2208      	movs	r2, #8
 8006732:	4619      	mov	r1, r3
 8006734:	480c      	ldr	r0, [pc, #48]	; (8006768 <MX_TIM4_Init+0xc0>)
 8006736:	f008 fee7 	bl	800f508 <HAL_TIM_PWM_ConfigChannel>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006740:	f000 fb34 	bl	8006dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	220c      	movs	r2, #12
 8006748:	4619      	mov	r1, r3
 800674a:	4807      	ldr	r0, [pc, #28]	; (8006768 <MX_TIM4_Init+0xc0>)
 800674c:	f008 fedc 	bl	800f508 <HAL_TIM_PWM_ConfigChannel>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006756:	f000 fb29 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800675a:	4803      	ldr	r0, [pc, #12]	; (8006768 <MX_TIM4_Init+0xc0>)
 800675c:	f000 ff16 	bl	800758c <HAL_TIM_MspPostInit>

}
 8006760:	bf00      	nop
 8006762:	3728      	adds	r7, #40	; 0x28
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	2004a600 	.word	0x2004a600
 800676c:	40000800 	.word	0x40000800

08006770 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006776:	463b      	mov	r3, r7
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <MX_TIM6_Init+0x64>)
 8006780:	4a15      	ldr	r2, [pc, #84]	; (80067d8 <MX_TIM6_Init+0x68>)
 8006782:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006784:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <MX_TIM6_Init+0x64>)
 8006786:	2259      	movs	r2, #89	; 0x59
 8006788:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800678a:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <MX_TIM6_Init+0x64>)
 800678c:	2200      	movs	r2, #0
 800678e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006790:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <MX_TIM6_Init+0x64>)
 8006792:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006796:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <MX_TIM6_Init+0x64>)
 800679a:	2280      	movs	r2, #128	; 0x80
 800679c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800679e:	480d      	ldr	r0, [pc, #52]	; (80067d4 <MX_TIM6_Init+0x64>)
 80067a0:	f008 fc28 	bl	800eff4 <HAL_TIM_Base_Init>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80067aa:	f000 faff 	bl	8006dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067ae:	2300      	movs	r3, #0
 80067b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80067b6:	463b      	mov	r3, r7
 80067b8:	4619      	mov	r1, r3
 80067ba:	4806      	ldr	r0, [pc, #24]	; (80067d4 <MX_TIM6_Init+0x64>)
 80067bc:	f009 fa08 	bl	800fbd0 <HAL_TIMEx_MasterConfigSynchronization>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80067c6:	f000 faf1 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	2004a89c 	.word	0x2004a89c
 80067d8:	40001000 	.word	0x40001000

080067dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067e2:	463b      	mov	r3, r7
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <MX_TIM7_Init+0x60>)
 80067ec:	4a14      	ldr	r2, [pc, #80]	; (8006840 <MX_TIM7_Init+0x64>)
 80067ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80067f0:	4b12      	ldr	r3, [pc, #72]	; (800683c <MX_TIM7_Init+0x60>)
 80067f2:	22b3      	movs	r2, #179	; 0xb3
 80067f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <MX_TIM7_Init+0x60>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <MX_TIM7_Init+0x60>)
 80067fe:	2231      	movs	r2, #49	; 0x31
 8006800:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006802:	4b0e      	ldr	r3, [pc, #56]	; (800683c <MX_TIM7_Init+0x60>)
 8006804:	2280      	movs	r2, #128	; 0x80
 8006806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006808:	480c      	ldr	r0, [pc, #48]	; (800683c <MX_TIM7_Init+0x60>)
 800680a:	f008 fbf3 	bl	800eff4 <HAL_TIM_Base_Init>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006814:	f000 faca 	bl	8006dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006818:	2300      	movs	r3, #0
 800681a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800681c:	2300      	movs	r3, #0
 800681e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006820:	463b      	mov	r3, r7
 8006822:	4619      	mov	r1, r3
 8006824:	4805      	ldr	r0, [pc, #20]	; (800683c <MX_TIM7_Init+0x60>)
 8006826:	f009 f9d3 	bl	800fbd0 <HAL_TIMEx_MasterConfigSynchronization>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006830:	f000 fabc 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	2004aa40 	.word	0x2004aa40
 8006840:	40001400 	.word	0x40001400

08006844 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08c      	sub	sp, #48	; 0x30
 8006848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800684a:	f107 030c 	add.w	r3, r7, #12
 800684e:	2224      	movs	r2, #36	; 0x24
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f00f f80c 	bl	8015870 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006858:	1d3b      	adds	r3, r7, #4
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006860:	4b22      	ldr	r3, [pc, #136]	; (80068ec <MX_TIM8_Init+0xa8>)
 8006862:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <MX_TIM8_Init+0xac>)
 8006864:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006866:	4b21      	ldr	r3, [pc, #132]	; (80068ec <MX_TIM8_Init+0xa8>)
 8006868:	2200      	movs	r2, #0
 800686a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800686c:	4b1f      	ldr	r3, [pc, #124]	; (80068ec <MX_TIM8_Init+0xa8>)
 800686e:	2210      	movs	r2, #16
 8006870:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006872:	4b1e      	ldr	r3, [pc, #120]	; (80068ec <MX_TIM8_Init+0xa8>)
 8006874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006878:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800687a:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <MX_TIM8_Init+0xa8>)
 800687c:	2200      	movs	r2, #0
 800687e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006880:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <MX_TIM8_Init+0xa8>)
 8006882:	2200      	movs	r2, #0
 8006884:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006886:	4b19      	ldr	r3, [pc, #100]	; (80068ec <MX_TIM8_Init+0xa8>)
 8006888:	2200      	movs	r2, #0
 800688a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800688c:	2303      	movs	r3, #3
 800688e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006894:	2301      	movs	r3, #1
 8006896:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006898:	2300      	movs	r3, #0
 800689a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80068a0:	2300      	movs	r3, #0
 80068a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80068a4:	2301      	movs	r3, #1
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80068a8:	2300      	movs	r3, #0
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80068b0:	f107 030c 	add.w	r3, r7, #12
 80068b4:	4619      	mov	r1, r3
 80068b6:	480d      	ldr	r0, [pc, #52]	; (80068ec <MX_TIM8_Init+0xa8>)
 80068b8:	f008 fc54 	bl	800f164 <HAL_TIM_Encoder_Init>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80068c2:	f000 fa73 	bl	8006dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80068ce:	1d3b      	adds	r3, r7, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4806      	ldr	r0, [pc, #24]	; (80068ec <MX_TIM8_Init+0xa8>)
 80068d4:	f009 f97c 	bl	800fbd0 <HAL_TIMEx_MasterConfigSynchronization>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80068de:	f000 fa65 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80068e2:	bf00      	nop
 80068e4:	3730      	adds	r7, #48	; 0x30
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2004a5c0 	.word	0x2004a5c0
 80068f0:	40010400 	.word	0x40010400

080068f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80068fa:	1d3b      	adds	r3, r7, #4
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	609a      	str	r2, [r3, #8]
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	611a      	str	r2, [r3, #16]
 8006908:	615a      	str	r2, [r3, #20]
 800690a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800690c:	4b1e      	ldr	r3, [pc, #120]	; (8006988 <MX_TIM10_Init+0x94>)
 800690e:	4a1f      	ldr	r2, [pc, #124]	; (800698c <MX_TIM10_Init+0x98>)
 8006910:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006912:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <MX_TIM10_Init+0x94>)
 8006914:	2201      	movs	r2, #1
 8006916:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <MX_TIM10_Init+0x94>)
 800691a:	2200      	movs	r2, #0
 800691c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 800691e:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <MX_TIM10_Init+0x94>)
 8006920:	f242 3227 	movw	r2, #8999	; 0x2327
 8006924:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <MX_TIM10_Init+0x94>)
 8006928:	2200      	movs	r2, #0
 800692a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800692c:	4b16      	ldr	r3, [pc, #88]	; (8006988 <MX_TIM10_Init+0x94>)
 800692e:	2200      	movs	r2, #0
 8006930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006932:	4815      	ldr	r0, [pc, #84]	; (8006988 <MX_TIM10_Init+0x94>)
 8006934:	f008 fb5e 	bl	800eff4 <HAL_TIM_Base_Init>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800693e:	f000 fa35 	bl	8006dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006942:	4811      	ldr	r0, [pc, #68]	; (8006988 <MX_TIM10_Init+0x94>)
 8006944:	f008 fba5 	bl	800f092 <HAL_TIM_PWM_Init>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800694e:	f000 fa2d 	bl	8006dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006952:	2360      	movs	r3, #96	; 0x60
 8006954:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800695e:	2300      	movs	r3, #0
 8006960:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	2200      	movs	r2, #0
 8006966:	4619      	mov	r1, r3
 8006968:	4807      	ldr	r0, [pc, #28]	; (8006988 <MX_TIM10_Init+0x94>)
 800696a:	f008 fdcd 	bl	800f508 <HAL_TIM_PWM_ConfigChannel>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006974:	f000 fa1a 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006978:	4803      	ldr	r0, [pc, #12]	; (8006988 <MX_TIM10_Init+0x94>)
 800697a:	f000 fe07 	bl	800758c <HAL_TIM_MspPostInit>

}
 800697e:	bf00      	nop
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	2004a6dc 	.word	0x2004a6dc
 800698c:	40014400 	.word	0x40014400

08006990 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	605a      	str	r2, [r3, #4]
 800699e:	609a      	str	r2, [r3, #8]
 80069a0:	60da      	str	r2, [r3, #12]
 80069a2:	611a      	str	r2, [r3, #16]
 80069a4:	615a      	str	r2, [r3, #20]
 80069a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80069a8:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <MX_TIM11_Init+0x94>)
 80069aa:	4a1f      	ldr	r2, [pc, #124]	; (8006a28 <MX_TIM11_Init+0x98>)
 80069ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 80069ae:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <MX_TIM11_Init+0x94>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069b4:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <MX_TIM11_Init+0x94>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <MX_TIM11_Init+0x94>)
 80069bc:	f242 3227 	movw	r2, #8999	; 0x2327
 80069c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069c2:	4b18      	ldr	r3, [pc, #96]	; (8006a24 <MX_TIM11_Init+0x94>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069c8:	4b16      	ldr	r3, [pc, #88]	; (8006a24 <MX_TIM11_Init+0x94>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80069ce:	4815      	ldr	r0, [pc, #84]	; (8006a24 <MX_TIM11_Init+0x94>)
 80069d0:	f008 fb10 	bl	800eff4 <HAL_TIM_Base_Init>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80069da:	f000 f9e7 	bl	8006dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80069de:	4811      	ldr	r0, [pc, #68]	; (8006a24 <MX_TIM11_Init+0x94>)
 80069e0:	f008 fb57 	bl	800f092 <HAL_TIM_PWM_Init>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80069ea:	f000 f9df 	bl	8006dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069ee:	2360      	movs	r3, #96	; 0x60
 80069f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80069fe:	1d3b      	adds	r3, r7, #4
 8006a00:	2200      	movs	r2, #0
 8006a02:	4619      	mov	r1, r3
 8006a04:	4807      	ldr	r0, [pc, #28]	; (8006a24 <MX_TIM11_Init+0x94>)
 8006a06:	f008 fd7f 	bl	800f508 <HAL_TIM_PWM_ConfigChannel>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006a10:	f000 f9cc 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006a14:	4803      	ldr	r0, [pc, #12]	; (8006a24 <MX_TIM11_Init+0x94>)
 8006a16:	f000 fdb9 	bl	800758c <HAL_TIM_MspPostInit>

}
 8006a1a:	bf00      	nop
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	2004a7fc 	.word	0x2004a7fc
 8006a28:	40014800 	.word	0x40014800

08006a2c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006a30:	4b0e      	ldr	r3, [pc, #56]	; (8006a6c <MX_TIM13_Init+0x40>)
 8006a32:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <MX_TIM13_Init+0x44>)
 8006a34:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <MX_TIM13_Init+0x40>)
 8006a38:	2259      	movs	r2, #89	; 0x59
 8006a3a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <MX_TIM13_Init+0x40>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006a42:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <MX_TIM13_Init+0x40>)
 8006a44:	f242 720f 	movw	r2, #9999	; 0x270f
 8006a48:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a4a:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <MX_TIM13_Init+0x40>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <MX_TIM13_Init+0x40>)
 8006a52:	2280      	movs	r2, #128	; 0x80
 8006a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006a56:	4805      	ldr	r0, [pc, #20]	; (8006a6c <MX_TIM13_Init+0x40>)
 8006a58:	f008 facc 	bl	800eff4 <HAL_TIM_Base_Init>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006a62:	f000 f9a3 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006a66:	bf00      	nop
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2004a7bc 	.word	0x2004a7bc
 8006a70:	40001c00 	.word	0x40001c00

08006a74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006a78:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006a7a:	4a12      	ldr	r2, [pc, #72]	; (8006ac4 <MX_USART2_UART_Init+0x50>)
 8006a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006a7e:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006a92:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006a98:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006a9a:	220c      	movs	r2, #12
 8006a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006aaa:	4805      	ldr	r0, [pc, #20]	; (8006ac0 <MX_USART2_UART_Init+0x4c>)
 8006aac:	f009 f972 	bl	800fd94 <HAL_UART_Init>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006ab6:	f000 f979 	bl	8006dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	2004a9a0 	.word	0x2004a9a0
 8006ac4:	40004400 	.word	0x40004400

08006ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <MX_DMA_Init+0x5c>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <MX_DMA_Init+0x5c>)
 8006ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006adc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <MX_DMA_Init+0x5c>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae6:	607b      	str	r3, [r7, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006aea:	2200      	movs	r2, #0
 8006aec:	2100      	movs	r1, #0
 8006aee:	203a      	movs	r0, #58	; 0x3a
 8006af0:	f003 fe4b 	bl	800a78a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006af4:	203a      	movs	r0, #58	; 0x3a
 8006af6:	f003 fe64 	bl	800a7c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006afa:	2200      	movs	r2, #0
 8006afc:	2100      	movs	r1, #0
 8006afe:	203b      	movs	r0, #59	; 0x3b
 8006b00:	f003 fe43 	bl	800a78a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006b04:	203b      	movs	r0, #59	; 0x3b
 8006b06:	f003 fe5c 	bl	800a7c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	2045      	movs	r0, #69	; 0x45
 8006b10:	f003 fe3b 	bl	800a78a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006b14:	2045      	movs	r0, #69	; 0x45
 8006b16:	f003 fe54 	bl	800a7c2 <HAL_NVIC_EnableIRQ>

}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40023800 	.word	0x40023800

08006b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08c      	sub	sp, #48	; 0x30
 8006b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b2e:	f107 031c 	add.w	r3, r7, #28
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	605a      	str	r2, [r3, #4]
 8006b38:	609a      	str	r2, [r3, #8]
 8006b3a:	60da      	str	r2, [r3, #12]
 8006b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	4b94      	ldr	r3, [pc, #592]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	4a93      	ldr	r2, [pc, #588]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b48:	f043 0310 	orr.w	r3, r3, #16
 8006b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4e:	4b91      	ldr	r3, [pc, #580]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	4b8d      	ldr	r3, [pc, #564]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	4a8c      	ldr	r2, [pc, #560]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b68:	6313      	str	r3, [r2, #48]	; 0x30
 8006b6a:	4b8a      	ldr	r3, [pc, #552]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b76:	2300      	movs	r3, #0
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	4b86      	ldr	r3, [pc, #536]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	4a85      	ldr	r2, [pc, #532]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b80:	f043 0304 	orr.w	r3, r3, #4
 8006b84:	6313      	str	r3, [r2, #48]	; 0x30
 8006b86:	4b83      	ldr	r3, [pc, #524]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	4b7f      	ldr	r3, [pc, #508]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	4a7e      	ldr	r2, [pc, #504]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba2:	4b7c      	ldr	r3, [pc, #496]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	4b78      	ldr	r3, [pc, #480]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	4a77      	ldr	r2, [pc, #476]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006bb8:	f043 0302 	orr.w	r3, r3, #2
 8006bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006bbe:	4b75      	ldr	r3, [pc, #468]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	4b71      	ldr	r3, [pc, #452]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	4a70      	ldr	r2, [pc, #448]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006bd4:	f043 0308 	orr.w	r3, r3, #8
 8006bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bda:	4b6e      	ldr	r3, [pc, #440]	; (8006d94 <MX_GPIO_Init+0x26c>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006be6:	2200      	movs	r2, #0
 8006be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bec:	486a      	ldr	r0, [pc, #424]	; (8006d98 <MX_GPIO_Init+0x270>)
 8006bee:	f004 fb61 	bl	800b2b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bf8:	4868      	ldr	r0, [pc, #416]	; (8006d9c <MX_GPIO_Init+0x274>)
 8006bfa:	f004 fb5b 	bl	800b2b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c04:	4866      	ldr	r0, [pc, #408]	; (8006da0 <MX_GPIO_Init+0x278>)
 8006c06:	f004 fb55 	bl	800b2b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006c10:	4864      	ldr	r0, [pc, #400]	; (8006da4 <MX_GPIO_Init+0x27c>)
 8006c12:	f004 fb4f 	bl	800b2b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c16:	2304      	movs	r3, #4
 8006c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c22:	f107 031c 	add.w	r3, r7, #28
 8006c26:	4619      	mov	r1, r3
 8006c28:	485b      	ldr	r0, [pc, #364]	; (8006d98 <MX_GPIO_Init+0x270>)
 8006c2a:	f004 f981 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006c2e:	230f      	movs	r3, #15
 8006c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c32:	2303      	movs	r3, #3
 8006c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c3a:	f107 031c 	add.w	r3, r7, #28
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4859      	ldr	r0, [pc, #356]	; (8006da8 <MX_GPIO_Init+0x280>)
 8006c42:	f004 f975 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006c46:	23e1      	movs	r3, #225	; 0xe1
 8006c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c52:	f107 031c 	add.w	r3, r7, #28
 8006c56:	4619      	mov	r1, r3
 8006c58:	4852      	ldr	r0, [pc, #328]	; (8006da4 <MX_GPIO_Init+0x27c>)
 8006c5a:	f004 f969 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c62:	2303      	movs	r3, #3
 8006c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c6a:	f107 031c 	add.w	r3, r7, #28
 8006c6e:	4619      	mov	r1, r3
 8006c70:	484a      	ldr	r0, [pc, #296]	; (8006d9c <MX_GPIO_Init+0x274>)
 8006c72:	f004 f95d 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c76:	2304      	movs	r3, #4
 8006c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c82:	f107 031c 	add.w	r3, r7, #28
 8006c86:	4619      	mov	r1, r3
 8006c88:	4844      	ldr	r0, [pc, #272]	; (8006d9c <MX_GPIO_Init+0x274>)
 8006c8a:	f004 f951 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006c8e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c94:	2300      	movs	r3, #0
 8006c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c9c:	f107 031c 	add.w	r3, r7, #28
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	483d      	ldr	r0, [pc, #244]	; (8006d98 <MX_GPIO_Init+0x270>)
 8006ca4:	f004 f944 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006ca8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cba:	f107 031c 	add.w	r3, r7, #28
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4835      	ldr	r0, [pc, #212]	; (8006d98 <MX_GPIO_Init+0x270>)
 8006cc2:	f004 f935 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cd8:	f107 031c 	add.w	r3, r7, #28
 8006cdc:	4619      	mov	r1, r3
 8006cde:	482f      	ldr	r0, [pc, #188]	; (8006d9c <MX_GPIO_Init+0x274>)
 8006ce0:	f004 f926 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cea:	2300      	movs	r3, #0
 8006cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cf2:	f107 031c 	add.w	r3, r7, #28
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4829      	ldr	r0, [pc, #164]	; (8006da0 <MX_GPIO_Init+0x278>)
 8006cfa:	f004 f919 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d04:	2301      	movs	r3, #1
 8006d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d10:	f107 031c 	add.w	r3, r7, #28
 8006d14:	4619      	mov	r1, r3
 8006d16:	4822      	ldr	r0, [pc, #136]	; (8006da0 <MX_GPIO_Init+0x278>)
 8006d18:	f004 f90a 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d22:	2301      	movs	r3, #1
 8006d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d26:	2301      	movs	r3, #1
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d2e:	f107 031c 	add.w	r3, r7, #28
 8006d32:	4619      	mov	r1, r3
 8006d34:	481a      	ldr	r0, [pc, #104]	; (8006da0 <MX_GPIO_Init+0x278>)
 8006d36:	f004 f8fb 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d3a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d3e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d40:	2301      	movs	r3, #1
 8006d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d4c:	f107 031c 	add.w	r3, r7, #28
 8006d50:	4619      	mov	r1, r3
 8006d52:	4814      	ldr	r0, [pc, #80]	; (8006da4 <MX_GPIO_Init+0x27c>)
 8006d54:	f004 f8ec 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d66:	f107 031c 	add.w	r3, r7, #28
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	480d      	ldr	r0, [pc, #52]	; (8006da4 <MX_GPIO_Init+0x27c>)
 8006d6e:	f004 f8df 	bl	800af30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006d72:	239b      	movs	r3, #155	; 0x9b
 8006d74:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d76:	2300      	movs	r3, #0
 8006d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d7e:	f107 031c 	add.w	r3, r7, #28
 8006d82:	4619      	mov	r1, r3
 8006d84:	4806      	ldr	r0, [pc, #24]	; (8006da0 <MX_GPIO_Init+0x278>)
 8006d86:	f004 f8d3 	bl	800af30 <HAL_GPIO_Init>

}
 8006d8a:	bf00      	nop
 8006d8c:	3730      	adds	r7, #48	; 0x30
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	40023800 	.word	0x40023800
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	40020400 	.word	0x40020400
 8006da0:	40020c00 	.word	0x40020c00
 8006da4:	40020000 	.word	0x40020000
 8006da8:	40020800 	.word	0x40020800

08006dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006db0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006db2:	e7fe      	b.n	8006db2 <Error_Handler+0x6>

08006db4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
	...

08006dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dca:	2300      	movs	r3, #0
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <HAL_MspInit+0x4c>)
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	4a0f      	ldr	r2, [pc, #60]	; (8006e10 <HAL_MspInit+0x4c>)
 8006dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <HAL_MspInit+0x4c>)
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	2300      	movs	r3, #0
 8006de8:	603b      	str	r3, [r7, #0]
 8006dea:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <HAL_MspInit+0x4c>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	4a08      	ldr	r2, [pc, #32]	; (8006e10 <HAL_MspInit+0x4c>)
 8006df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df4:	6413      	str	r3, [r2, #64]	; 0x40
 8006df6:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <HAL_MspInit+0x4c>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40023800 	.word	0x40023800

08006e14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08c      	sub	sp, #48	; 0x30
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e1c:	f107 031c 	add.w	r3, r7, #28
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	609a      	str	r2, [r3, #8]
 8006e28:	60da      	str	r2, [r3, #12]
 8006e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a4a      	ldr	r2, [pc, #296]	; (8006f5c <HAL_ADC_MspInit+0x148>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f040 808e 	bne.w	8006f54 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	4b48      	ldr	r3, [pc, #288]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	4a47      	ldr	r2, [pc, #284]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e46:	6453      	str	r3, [r2, #68]	; 0x44
 8006e48:	4b45      	ldr	r3, [pc, #276]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	4b41      	ldr	r3, [pc, #260]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	4a40      	ldr	r2, [pc, #256]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e5e:	f043 0304 	orr.w	r3, r3, #4
 8006e62:	6313      	str	r3, [r2, #48]	; 0x30
 8006e64:	4b3e      	ldr	r3, [pc, #248]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	4b3a      	ldr	r3, [pc, #232]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	4a39      	ldr	r2, [pc, #228]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e7a:	f043 0301 	orr.w	r3, r3, #1
 8006e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e80:	4b37      	ldr	r3, [pc, #220]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	4b33      	ldr	r3, [pc, #204]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	4a32      	ldr	r2, [pc, #200]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e96:	f043 0302 	orr.w	r3, r3, #2
 8006e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e9c:	4b30      	ldr	r3, [pc, #192]	; (8006f60 <HAL_ADC_MspInit+0x14c>)
 8006e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ea8:	230f      	movs	r3, #15
 8006eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eac:	2303      	movs	r3, #3
 8006eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eb4:	f107 031c 	add.w	r3, r7, #28
 8006eb8:	4619      	mov	r1, r3
 8006eba:	482a      	ldr	r0, [pc, #168]	; (8006f64 <HAL_ADC_MspInit+0x150>)
 8006ebc:	f004 f838 	bl	800af30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006ec0:	23ff      	movs	r3, #255	; 0xff
 8006ec2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ecc:	f107 031c 	add.w	r3, r7, #28
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4825      	ldr	r0, [pc, #148]	; (8006f68 <HAL_ADC_MspInit+0x154>)
 8006ed4:	f004 f82c 	bl	800af30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006edc:	2303      	movs	r3, #3
 8006ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ee4:	f107 031c 	add.w	r3, r7, #28
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4820      	ldr	r0, [pc, #128]	; (8006f6c <HAL_ADC_MspInit+0x158>)
 8006eec:	f004 f820 	bl	800af30 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006ef0:	4b1f      	ldr	r3, [pc, #124]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006ef2:	4a20      	ldr	r2, [pc, #128]	; (8006f74 <HAL_ADC_MspInit+0x160>)
 8006ef4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006ef6:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006efc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006efe:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006f0a:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f10:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f12:	4b17      	ldr	r3, [pc, #92]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f18:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f1a:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f20:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006f22:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f28:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f2a:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f30:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f32:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006f38:	480d      	ldr	r0, [pc, #52]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f3a:	f003 fc5d 	bl	800a7f8 <HAL_DMA_Init>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006f44:	f7ff ff32 	bl	8006dac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f4e:	4a08      	ldr	r2, [pc, #32]	; (8006f70 <HAL_ADC_MspInit+0x15c>)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006f54:	bf00      	nop
 8006f56:	3730      	adds	r7, #48	; 0x30
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40012100 	.word	0x40012100
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40020800 	.word	0x40020800
 8006f68:	40020000 	.word	0x40020000
 8006f6c:	40020400 	.word	0x40020400
 8006f70:	2004a9e0 	.word	0x2004a9e0
 8006f74:	40026440 	.word	0x40026440

08006f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08c      	sub	sp, #48	; 0x30
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f80:	f107 031c 	add.w	r3, r7, #28
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	605a      	str	r2, [r3, #4]
 8006f8a:	609a      	str	r2, [r3, #8]
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a32      	ldr	r2, [pc, #200]	; (8007060 <HAL_I2C_MspInit+0xe8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d12c      	bne.n	8006ff4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	4b31      	ldr	r3, [pc, #196]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	4a30      	ldr	r2, [pc, #192]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8006fa4:	f043 0302 	orr.w	r3, r3, #2
 8006fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006faa:	4b2e      	ldr	r3, [pc, #184]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006fb6:	23c0      	movs	r3, #192	; 0xc0
 8006fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fba:	2312      	movs	r3, #18
 8006fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006fc6:	2304      	movs	r3, #4
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fca:	f107 031c 	add.w	r3, r7, #28
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4825      	ldr	r0, [pc, #148]	; (8007068 <HAL_I2C_MspInit+0xf0>)
 8006fd2:	f003 ffad 	bl	800af30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	4b22      	ldr	r3, [pc, #136]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	4a21      	ldr	r2, [pc, #132]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8006fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe6:	4b1f      	ldr	r3, [pc, #124]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006ff2:	e031      	b.n	8007058 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	; (800706c <HAL_I2C_MspInit+0xf4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d12c      	bne.n	8007058 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	4b18      	ldr	r3, [pc, #96]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	4a17      	ldr	r2, [pc, #92]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8007008:	f043 0302 	orr.w	r3, r3, #2
 800700c:	6313      	str	r3, [r2, #48]	; 0x30
 800700e:	4b15      	ldr	r3, [pc, #84]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800701a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800701e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007020:	2312      	movs	r3, #18
 8007022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007024:	2301      	movs	r3, #1
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007028:	2303      	movs	r3, #3
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800702c:	2304      	movs	r3, #4
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007030:	f107 031c 	add.w	r3, r7, #28
 8007034:	4619      	mov	r1, r3
 8007036:	480c      	ldr	r0, [pc, #48]	; (8007068 <HAL_I2C_MspInit+0xf0>)
 8007038:	f003 ff7a 	bl	800af30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	4b08      	ldr	r3, [pc, #32]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	4a07      	ldr	r2, [pc, #28]	; (8007064 <HAL_I2C_MspInit+0xec>)
 8007046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800704a:	6413      	str	r3, [r2, #64]	; 0x40
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_I2C_MspInit+0xec>)
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
}
 8007058:	bf00      	nop
 800705a:	3730      	adds	r7, #48	; 0x30
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40005400 	.word	0x40005400
 8007064:	40023800 	.word	0x40023800
 8007068:	40020400 	.word	0x40020400
 800706c:	40005800 	.word	0x40005800

08007070 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	605a      	str	r2, [r3, #4]
 8007082:	609a      	str	r2, [r3, #8]
 8007084:	60da      	str	r2, [r3, #12]
 8007086:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a69      	ldr	r2, [pc, #420]	; (8007234 <HAL_SD_MspInit+0x1c4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	f040 80cb 	bne.w	800722a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007094:	2300      	movs	r3, #0
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	4b67      	ldr	r3, [pc, #412]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	4a66      	ldr	r2, [pc, #408]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 800709e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070a2:	6453      	str	r3, [r2, #68]	; 0x44
 80070a4:	4b64      	ldr	r3, [pc, #400]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 80070a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	4b60      	ldr	r3, [pc, #384]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	4a5f      	ldr	r2, [pc, #380]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 80070ba:	f043 0304 	orr.w	r3, r3, #4
 80070be:	6313      	str	r3, [r2, #48]	; 0x30
 80070c0:	4b5d      	ldr	r3, [pc, #372]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80070cc:	2300      	movs	r3, #0
 80070ce:	60bb      	str	r3, [r7, #8]
 80070d0:	4b59      	ldr	r3, [pc, #356]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	4a58      	ldr	r2, [pc, #352]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 80070d6:	f043 0308 	orr.w	r3, r3, #8
 80070da:	6313      	str	r3, [r2, #48]	; 0x30
 80070dc:	4b56      	ldr	r3, [pc, #344]	; (8007238 <HAL_SD_MspInit+0x1c8>)
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	60bb      	str	r3, [r7, #8]
 80070e6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80070e8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80070ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ee:	2302      	movs	r3, #2
 80070f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070f6:	2303      	movs	r3, #3
 80070f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80070fa:	230c      	movs	r3, #12
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070fe:	f107 0314 	add.w	r3, r7, #20
 8007102:	4619      	mov	r1, r3
 8007104:	484d      	ldr	r0, [pc, #308]	; (800723c <HAL_SD_MspInit+0x1cc>)
 8007106:	f003 ff13 	bl	800af30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800710a:	2304      	movs	r3, #4
 800710c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710e:	2302      	movs	r3, #2
 8007110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007112:	2300      	movs	r3, #0
 8007114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007116:	2303      	movs	r3, #3
 8007118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800711a:	230c      	movs	r3, #12
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800711e:	f107 0314 	add.w	r3, r7, #20
 8007122:	4619      	mov	r1, r3
 8007124:	4846      	ldr	r0, [pc, #280]	; (8007240 <HAL_SD_MspInit+0x1d0>)
 8007126:	f003 ff03 	bl	800af30 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800712a:	4b46      	ldr	r3, [pc, #280]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 800712c:	4a46      	ldr	r2, [pc, #280]	; (8007248 <HAL_SD_MspInit+0x1d8>)
 800712e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007130:	4b44      	ldr	r3, [pc, #272]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007136:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007138:	4b42      	ldr	r3, [pc, #264]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 800713a:	2200      	movs	r2, #0
 800713c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800713e:	4b41      	ldr	r3, [pc, #260]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007140:	2200      	movs	r2, #0
 8007142:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007144:	4b3f      	ldr	r3, [pc, #252]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800714a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800714c:	4b3d      	ldr	r3, [pc, #244]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 800714e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007152:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007154:	4b3b      	ldr	r3, [pc, #236]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800715a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800715c:	4b39      	ldr	r3, [pc, #228]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 800715e:	2220      	movs	r2, #32
 8007160:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007162:	4b38      	ldr	r3, [pc, #224]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007164:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007168:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800716a:	4b36      	ldr	r3, [pc, #216]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 800716c:	2204      	movs	r2, #4
 800716e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007170:	4b34      	ldr	r3, [pc, #208]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007172:	2203      	movs	r2, #3
 8007174:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007176:	4b33      	ldr	r3, [pc, #204]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007178:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800717e:	4b31      	ldr	r3, [pc, #196]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007180:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007184:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007186:	482f      	ldr	r0, [pc, #188]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 8007188:	f003 fb36 	bl	800a7f8 <HAL_DMA_Init>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007192:	f7ff fe0b 	bl	8006dac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2a      	ldr	r2, [pc, #168]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 800719a:	641a      	str	r2, [r3, #64]	; 0x40
 800719c:	4a29      	ldr	r2, [pc, #164]	; (8007244 <HAL_SD_MspInit+0x1d4>)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80071a2:	4b2a      	ldr	r3, [pc, #168]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071a4:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <HAL_SD_MspInit+0x1e0>)
 80071a6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80071a8:	4b28      	ldr	r3, [pc, #160]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071ae:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80071b0:	4b26      	ldr	r3, [pc, #152]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071b2:	2240      	movs	r2, #64	; 0x40
 80071b4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071b6:	4b25      	ldr	r3, [pc, #148]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80071bc:	4b23      	ldr	r3, [pc, #140]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071c2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80071c4:	4b21      	ldr	r3, [pc, #132]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071ca:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80071cc:	4b1f      	ldr	r3, [pc, #124]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071d2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80071d4:	4b1d      	ldr	r3, [pc, #116]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071d6:	2220      	movs	r2, #32
 80071d8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071da:	4b1c      	ldr	r3, [pc, #112]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80071e0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80071e2:	4b1a      	ldr	r3, [pc, #104]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071e4:	2204      	movs	r2, #4
 80071e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80071e8:	4b18      	ldr	r3, [pc, #96]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071ea:	2203      	movs	r2, #3
 80071ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80071ee:	4b17      	ldr	r3, [pc, #92]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80071f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <HAL_SD_MspInit+0x1dc>)
 80071f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80071fe:	4813      	ldr	r0, [pc, #76]	; (800724c <HAL_SD_MspInit+0x1dc>)
 8007200:	f003 fafa 	bl	800a7f8 <HAL_DMA_Init>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800720a:	f7ff fdcf 	bl	8006dac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a0e      	ldr	r2, [pc, #56]	; (800724c <HAL_SD_MspInit+0x1dc>)
 8007212:	63da      	str	r2, [r3, #60]	; 0x3c
 8007214:	4a0d      	ldr	r2, [pc, #52]	; (800724c <HAL_SD_MspInit+0x1dc>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800721a:	2200      	movs	r2, #0
 800721c:	2100      	movs	r1, #0
 800721e:	2031      	movs	r0, #49	; 0x31
 8007220:	f003 fab3 	bl	800a78a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007224:	2031      	movs	r0, #49	; 0x31
 8007226:	f003 facc 	bl	800a7c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800722a:	bf00      	nop
 800722c:	3728      	adds	r7, #40	; 0x28
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40023800 	.word	0x40023800
 800723c:	40020800 	.word	0x40020800
 8007240:	40020c00 	.word	0x40020c00
 8007244:	2004a508 	.word	0x2004a508
 8007248:	40026458 	.word	0x40026458
 800724c:	2004a83c 	.word	0x2004a83c
 8007250:	400264a0 	.word	0x400264a0

08007254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08a      	sub	sp, #40	; 0x28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800725c:	f107 0314 	add.w	r3, r7, #20
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	609a      	str	r2, [r3, #8]
 8007268:	60da      	str	r2, [r3, #12]
 800726a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_SPI_MspInit+0x84>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d12c      	bne.n	80072d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	4b18      	ldr	r3, [pc, #96]	; (80072dc <HAL_SPI_MspInit+0x88>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	4a17      	ldr	r2, [pc, #92]	; (80072dc <HAL_SPI_MspInit+0x88>)
 8007280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007284:	6413      	str	r3, [r2, #64]	; 0x40
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <HAL_SPI_MspInit+0x88>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	4b11      	ldr	r3, [pc, #68]	; (80072dc <HAL_SPI_MspInit+0x88>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	4a10      	ldr	r2, [pc, #64]	; (80072dc <HAL_SPI_MspInit+0x88>)
 800729c:	f043 0302 	orr.w	r3, r3, #2
 80072a0:	6313      	str	r3, [r2, #48]	; 0x30
 80072a2:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <HAL_SPI_MspInit+0x88>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80072ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80072b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b4:	2302      	movs	r3, #2
 80072b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072bc:	2303      	movs	r3, #3
 80072be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80072c0:	2305      	movs	r3, #5
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	4619      	mov	r1, r3
 80072ca:	4805      	ldr	r0, [pc, #20]	; (80072e0 <HAL_SPI_MspInit+0x8c>)
 80072cc:	f003 fe30 	bl	800af30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80072d0:	bf00      	nop
 80072d2:	3728      	adds	r7, #40	; 0x28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40003800 	.word	0x40003800
 80072dc:	40023800 	.word	0x40023800
 80072e0:	40020400 	.word	0x40020400

080072e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	; 0x30
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ec:	f107 031c 	add.w	r3, r7, #28
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	605a      	str	r2, [r3, #4]
 80072f6:	609a      	str	r2, [r3, #8]
 80072f8:	60da      	str	r2, [r3, #12]
 80072fa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2d      	ldr	r2, [pc, #180]	; (80073b8 <HAL_TIM_PWM_MspInit+0xd4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d12d      	bne.n	8007362 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007306:	2300      	movs	r3, #0
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	4b2c      	ldr	r3, [pc, #176]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	4a2b      	ldr	r2, [pc, #172]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	6453      	str	r3, [r2, #68]	; 0x44
 8007316:	4b29      	ldr	r3, [pc, #164]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	4b25      	ldr	r3, [pc, #148]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	4a24      	ldr	r2, [pc, #144]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 800732c:	f043 0310 	orr.w	r3, r3, #16
 8007330:	6313      	str	r3, [r2, #48]	; 0x30
 8007332:	4b22      	ldr	r3, [pc, #136]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800733e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007344:	2302      	movs	r3, #2
 8007346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007348:	2300      	movs	r3, #0
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800734c:	2300      	movs	r3, #0
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007350:	2301      	movs	r3, #1
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007354:	f107 031c 	add.w	r3, r7, #28
 8007358:	4619      	mov	r1, r3
 800735a:	4819      	ldr	r0, [pc, #100]	; (80073c0 <HAL_TIM_PWM_MspInit+0xdc>)
 800735c:	f003 fde8 	bl	800af30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007360:	e026      	b.n	80073b0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <HAL_TIM_PWM_MspInit+0xe0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d10e      	bne.n	800738a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800736c:	2300      	movs	r3, #0
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	4b12      	ldr	r3, [pc, #72]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	4a11      	ldr	r2, [pc, #68]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007376:	f043 0302 	orr.w	r3, r3, #2
 800737a:	6413      	str	r3, [r2, #64]	; 0x40
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	693b      	ldr	r3, [r7, #16]
}
 8007388:	e012      	b.n	80073b0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a0e      	ldr	r2, [pc, #56]	; (80073c8 <HAL_TIM_PWM_MspInit+0xe4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10d      	bne.n	80073b0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	4b08      	ldr	r3, [pc, #32]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	4a07      	ldr	r2, [pc, #28]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 800739e:	f043 0304 	orr.w	r3, r3, #4
 80073a2:	6413      	str	r3, [r2, #64]	; 0x40
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <HAL_TIM_PWM_MspInit+0xd8>)
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	68fb      	ldr	r3, [r7, #12]
}
 80073b0:	bf00      	nop
 80073b2:	3730      	adds	r7, #48	; 0x30
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40023800 	.word	0x40023800
 80073c0:	40021000 	.word	0x40021000
 80073c4:	40000400 	.word	0x40000400
 80073c8:	40000800 	.word	0x40000800

080073cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3e      	ldr	r2, [pc, #248]	; (80074d4 <HAL_TIM_Base_MspInit+0x108>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d116      	bne.n	800740c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	4a3c      	ldr	r2, [pc, #240]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 80073e8:	f043 0310 	orr.w	r3, r3, #16
 80073ec:	6413      	str	r3, [r2, #64]	; 0x40
 80073ee:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80073fa:	2200      	movs	r2, #0
 80073fc:	2101      	movs	r1, #1
 80073fe:	2036      	movs	r0, #54	; 0x36
 8007400:	f003 f9c3 	bl	800a78a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007404:	2036      	movs	r0, #54	; 0x36
 8007406:	f003 f9dc 	bl	800a7c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800740a:	e05e      	b.n	80074ca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a32      	ldr	r2, [pc, #200]	; (80074dc <HAL_TIM_Base_MspInit+0x110>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d116      	bne.n	8007444 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007420:	f043 0320 	orr.w	r3, r3, #32
 8007424:	6413      	str	r3, [r2, #64]	; 0x40
 8007426:	4b2c      	ldr	r3, [pc, #176]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	2037      	movs	r0, #55	; 0x37
 8007438:	f003 f9a7 	bl	800a78a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800743c:	2037      	movs	r0, #55	; 0x37
 800743e:	f003 f9c0 	bl	800a7c2 <HAL_NVIC_EnableIRQ>
}
 8007442:	e042      	b.n	80074ca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a25      	ldr	r2, [pc, #148]	; (80074e0 <HAL_TIM_Base_MspInit+0x114>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d10e      	bne.n	800746c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	4b21      	ldr	r3, [pc, #132]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007456:	4a20      	ldr	r2, [pc, #128]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800745c:	6453      	str	r3, [r2, #68]	; 0x44
 800745e:	4b1e      	ldr	r3, [pc, #120]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	697b      	ldr	r3, [r7, #20]
}
 800746a:	e02e      	b.n	80074ca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <HAL_TIM_Base_MspInit+0x118>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d10e      	bne.n	8007494 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
 800747a:	4b17      	ldr	r3, [pc, #92]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 800747c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747e:	4a16      	ldr	r2, [pc, #88]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007484:	6453      	str	r3, [r2, #68]	; 0x44
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	693b      	ldr	r3, [r7, #16]
}
 8007492:	e01a      	b.n	80074ca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <HAL_TIM_Base_MspInit+0x11c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d115      	bne.n	80074ca <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	4b0d      	ldr	r3, [pc, #52]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 80074a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ac:	6413      	str	r3, [r2, #64]	; 0x40
 80074ae:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <HAL_TIM_Base_MspInit+0x10c>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80074ba:	2200      	movs	r2, #0
 80074bc:	2100      	movs	r1, #0
 80074be:	202c      	movs	r0, #44	; 0x2c
 80074c0:	f003 f963 	bl	800a78a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80074c4:	202c      	movs	r0, #44	; 0x2c
 80074c6:	f003 f97c 	bl	800a7c2 <HAL_NVIC_EnableIRQ>
}
 80074ca:	bf00      	nop
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40001000 	.word	0x40001000
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40001400 	.word	0x40001400
 80074e0:	40014400 	.word	0x40014400
 80074e4:	40014800 	.word	0x40014800
 80074e8:	40001c00 	.word	0x40001c00

080074ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f4:	f107 0314 	add.w	r3, r7, #20
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	605a      	str	r2, [r3, #4]
 80074fe:	609a      	str	r2, [r3, #8]
 8007500:	60da      	str	r2, [r3, #12]
 8007502:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <HAL_TIM_Encoder_MspInit+0x94>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d133      	bne.n	8007576 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <HAL_TIM_Encoder_MspInit+0x98>)
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	4a1b      	ldr	r2, [pc, #108]	; (8007584 <HAL_TIM_Encoder_MspInit+0x98>)
 8007518:	f043 0302 	orr.w	r3, r3, #2
 800751c:	6453      	str	r3, [r2, #68]	; 0x44
 800751e:	4b19      	ldr	r3, [pc, #100]	; (8007584 <HAL_TIM_Encoder_MspInit+0x98>)
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	4b15      	ldr	r3, [pc, #84]	; (8007584 <HAL_TIM_Encoder_MspInit+0x98>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	4a14      	ldr	r2, [pc, #80]	; (8007584 <HAL_TIM_Encoder_MspInit+0x98>)
 8007534:	f043 0304 	orr.w	r3, r3, #4
 8007538:	6313      	str	r3, [r2, #48]	; 0x30
 800753a:	4b12      	ldr	r3, [pc, #72]	; (8007584 <HAL_TIM_Encoder_MspInit+0x98>)
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007546:	23c0      	movs	r3, #192	; 0xc0
 8007548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754a:	2302      	movs	r3, #2
 800754c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007552:	2300      	movs	r3, #0
 8007554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007556:	2303      	movs	r3, #3
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800755a:	f107 0314 	add.w	r3, r7, #20
 800755e:	4619      	mov	r1, r3
 8007560:	4809      	ldr	r0, [pc, #36]	; (8007588 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007562:	f003 fce5 	bl	800af30 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007566:	2200      	movs	r2, #0
 8007568:	2100      	movs	r1, #0
 800756a:	202c      	movs	r0, #44	; 0x2c
 800756c:	f003 f90d 	bl	800a78a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007570:	202c      	movs	r0, #44	; 0x2c
 8007572:	f003 f926 	bl	800a7c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007576:	bf00      	nop
 8007578:	3728      	adds	r7, #40	; 0x28
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40010400 	.word	0x40010400
 8007584:	40023800 	.word	0x40023800
 8007588:	40020800 	.word	0x40020800

0800758c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08c      	sub	sp, #48	; 0x30
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007594:	f107 031c 	add.w	r3, r7, #28
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	605a      	str	r2, [r3, #4]
 800759e:	609a      	str	r2, [r3, #8]
 80075a0:	60da      	str	r2, [r3, #12]
 80075a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a5c      	ldr	r2, [pc, #368]	; (800771c <HAL_TIM_MspPostInit+0x190>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d11f      	bne.n	80075ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80075ae:	2300      	movs	r3, #0
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	4b5b      	ldr	r3, [pc, #364]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	4a5a      	ldr	r2, [pc, #360]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 80075b8:	f043 0310 	orr.w	r3, r3, #16
 80075bc:	6313      	str	r3, [r2, #48]	; 0x30
 80075be:	4b58      	ldr	r3, [pc, #352]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	f003 0310 	and.w	r3, r3, #16
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80075ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d0:	2302      	movs	r3, #2
 80075d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d8:	2300      	movs	r3, #0
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80075dc:	2301      	movs	r3, #1
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075e0:	f107 031c 	add.w	r3, r7, #28
 80075e4:	4619      	mov	r1, r3
 80075e6:	484f      	ldr	r0, [pc, #316]	; (8007724 <HAL_TIM_MspPostInit+0x198>)
 80075e8:	f003 fca2 	bl	800af30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80075ec:	e091      	b.n	8007712 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a4d      	ldr	r2, [pc, #308]	; (8007728 <HAL_TIM_MspPostInit+0x19c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d11e      	bne.n	8007636 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	4b48      	ldr	r3, [pc, #288]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	4a47      	ldr	r2, [pc, #284]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 8007602:	f043 0302 	orr.w	r3, r3, #2
 8007606:	6313      	str	r3, [r2, #48]	; 0x30
 8007608:	4b45      	ldr	r3, [pc, #276]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	617b      	str	r3, [r7, #20]
 8007612:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007614:	2330      	movs	r3, #48	; 0x30
 8007616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007618:	2302      	movs	r3, #2
 800761a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761c:	2300      	movs	r3, #0
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007620:	2300      	movs	r3, #0
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007624:	2302      	movs	r3, #2
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007628:	f107 031c 	add.w	r3, r7, #28
 800762c:	4619      	mov	r1, r3
 800762e:	483f      	ldr	r0, [pc, #252]	; (800772c <HAL_TIM_MspPostInit+0x1a0>)
 8007630:	f003 fc7e 	bl	800af30 <HAL_GPIO_Init>
}
 8007634:	e06d      	b.n	8007712 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a3d      	ldr	r2, [pc, #244]	; (8007730 <HAL_TIM_MspPostInit+0x1a4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d11f      	bne.n	8007680 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	4b36      	ldr	r3, [pc, #216]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	4a35      	ldr	r2, [pc, #212]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 800764a:	f043 0308 	orr.w	r3, r3, #8
 800764e:	6313      	str	r3, [r2, #48]	; 0x30
 8007650:	4b33      	ldr	r3, [pc, #204]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 8007652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800765c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007662:	2302      	movs	r3, #2
 8007664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007666:	2300      	movs	r3, #0
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800766a:	2300      	movs	r3, #0
 800766c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800766e:	2302      	movs	r3, #2
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007672:	f107 031c 	add.w	r3, r7, #28
 8007676:	4619      	mov	r1, r3
 8007678:	482e      	ldr	r0, [pc, #184]	; (8007734 <HAL_TIM_MspPostInit+0x1a8>)
 800767a:	f003 fc59 	bl	800af30 <HAL_GPIO_Init>
}
 800767e:	e048      	b.n	8007712 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2c      	ldr	r2, [pc, #176]	; (8007738 <HAL_TIM_MspPostInit+0x1ac>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d11f      	bne.n	80076ca <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	4b24      	ldr	r3, [pc, #144]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	4a23      	ldr	r2, [pc, #140]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 8007694:	f043 0302 	orr.w	r3, r3, #2
 8007698:	6313      	str	r3, [r2, #48]	; 0x30
 800769a:	4b21      	ldr	r3, [pc, #132]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80076a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ac:	2302      	movs	r3, #2
 80076ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076b4:	2300      	movs	r3, #0
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80076b8:	2303      	movs	r3, #3
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076bc:	f107 031c 	add.w	r3, r7, #28
 80076c0:	4619      	mov	r1, r3
 80076c2:	481a      	ldr	r0, [pc, #104]	; (800772c <HAL_TIM_MspPostInit+0x1a0>)
 80076c4:	f003 fc34 	bl	800af30 <HAL_GPIO_Init>
}
 80076c8:	e023      	b.n	8007712 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1b      	ldr	r2, [pc, #108]	; (800773c <HAL_TIM_MspPostInit+0x1b0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d11e      	bne.n	8007712 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076d4:	2300      	movs	r3, #0
 80076d6:	60bb      	str	r3, [r7, #8]
 80076d8:	4b11      	ldr	r3, [pc, #68]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	4a10      	ldr	r2, [pc, #64]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 80076de:	f043 0302 	orr.w	r3, r3, #2
 80076e2:	6313      	str	r3, [r2, #48]	; 0x30
 80076e4:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <HAL_TIM_MspPostInit+0x194>)
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	60bb      	str	r3, [r7, #8]
 80076ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80076f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076f6:	2302      	movs	r3, #2
 80076f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076fe:	2300      	movs	r3, #0
 8007700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007702:	2303      	movs	r3, #3
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007706:	f107 031c 	add.w	r3, r7, #28
 800770a:	4619      	mov	r1, r3
 800770c:	4807      	ldr	r0, [pc, #28]	; (800772c <HAL_TIM_MspPostInit+0x1a0>)
 800770e:	f003 fc0f 	bl	800af30 <HAL_GPIO_Init>
}
 8007712:	bf00      	nop
 8007714:	3730      	adds	r7, #48	; 0x30
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	40010000 	.word	0x40010000
 8007720:	40023800 	.word	0x40023800
 8007724:	40021000 	.word	0x40021000
 8007728:	40000400 	.word	0x40000400
 800772c:	40020400 	.word	0x40020400
 8007730:	40000800 	.word	0x40000800
 8007734:	40020c00 	.word	0x40020c00
 8007738:	40014400 	.word	0x40014400
 800773c:	40014800 	.word	0x40014800

08007740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	; 0x28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007748:	f107 0314 	add.w	r3, r7, #20
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	609a      	str	r2, [r3, #8]
 8007754:	60da      	str	r2, [r3, #12]
 8007756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <HAL_UART_MspInit+0x84>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d12b      	bne.n	80077ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007762:	2300      	movs	r3, #0
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	4b18      	ldr	r3, [pc, #96]	; (80077c8 <HAL_UART_MspInit+0x88>)
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <HAL_UART_MspInit+0x88>)
 800776c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007770:	6413      	str	r3, [r2, #64]	; 0x40
 8007772:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <HAL_UART_MspInit+0x88>)
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777a:	613b      	str	r3, [r7, #16]
 800777c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <HAL_UART_MspInit+0x88>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <HAL_UART_MspInit+0x88>)
 8007788:	f043 0308 	orr.w	r3, r3, #8
 800778c:	6313      	str	r3, [r2, #48]	; 0x30
 800778e:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <HAL_UART_MspInit+0x88>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800779a:	2360      	movs	r3, #96	; 0x60
 800779c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800779e:	2302      	movs	r3, #2
 80077a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077a6:	2303      	movs	r3, #3
 80077a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077aa:	2307      	movs	r3, #7
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077ae:	f107 0314 	add.w	r3, r7, #20
 80077b2:	4619      	mov	r1, r3
 80077b4:	4805      	ldr	r0, [pc, #20]	; (80077cc <HAL_UART_MspInit+0x8c>)
 80077b6:	f003 fbbb 	bl	800af30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80077ba:	bf00      	nop
 80077bc:	3728      	adds	r7, #40	; 0x28
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40004400 	.word	0x40004400
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40020c00 	.word	0x40020c00

080077d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80077d4:	e7fe      	b.n	80077d4 <NMI_Handler+0x4>

080077d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077d6:	b480      	push	{r7}
 80077d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077da:	e7fe      	b.n	80077da <HardFault_Handler+0x4>

080077dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077e0:	e7fe      	b.n	80077e0 <MemManage_Handler+0x4>

080077e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077e2:	b480      	push	{r7}
 80077e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077e6:	e7fe      	b.n	80077e6 <BusFault_Handler+0x4>

080077e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077ec:	e7fe      	b.n	80077ec <UsageFault_Handler+0x4>

080077ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077ee:	b480      	push	{r7}
 80077f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077f2:	bf00      	nop
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007800:	bf00      	nop
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800780a:	b480      	push	{r7}
 800780c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800780e:	bf00      	nop
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800781c:	f002 fa94 	bl	8009d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007820:	bf00      	nop
 8007822:	bd80      	pop	{r7, pc}

08007824 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007828:	4803      	ldr	r0, [pc, #12]	; (8007838 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800782a:	f007 fd64 	bl	800f2f6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800782e:	4803      	ldr	r0, [pc, #12]	; (800783c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007830:	f007 fd61 	bl	800f2f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007834:	bf00      	nop
 8007836:	bd80      	pop	{r7, pc}
 8007838:	2004a5c0 	.word	0x2004a5c0
 800783c:	2004a7bc 	.word	0x2004a7bc

08007840 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007844:	4802      	ldr	r0, [pc, #8]	; (8007850 <SDIO_IRQHandler+0x10>)
 8007846:	f005 fdfd 	bl	800d444 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800784a:	bf00      	nop
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2004a91c 	.word	0x2004a91c

08007854 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007858:	4802      	ldr	r0, [pc, #8]	; (8007864 <TIM6_DAC_IRQHandler+0x10>)
 800785a:	f007 fd4c 	bl	800f2f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800785e:	bf00      	nop
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	2004a89c 	.word	0x2004a89c

08007868 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800786c:	4802      	ldr	r0, [pc, #8]	; (8007878 <TIM7_IRQHandler+0x10>)
 800786e:	f007 fd42 	bl	800f2f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007872:	bf00      	nop
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	2004aa40 	.word	0x2004aa40

0800787c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007880:	4802      	ldr	r0, [pc, #8]	; (800788c <DMA2_Stream2_IRQHandler+0x10>)
 8007882:	f003 f8e1 	bl	800aa48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	2004a9e0 	.word	0x2004a9e0

08007890 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007894:	4802      	ldr	r0, [pc, #8]	; (80078a0 <DMA2_Stream3_IRQHandler+0x10>)
 8007896:	f003 f8d7 	bl	800aa48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800789a:	bf00      	nop
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	2004a508 	.word	0x2004a508

080078a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80078a8:	4802      	ldr	r0, [pc, #8]	; (80078b4 <DMA2_Stream6_IRQHandler+0x10>)
 80078aa:	f003 f8cd 	bl	800aa48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80078ae:	bf00      	nop
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	2004a83c 	.word	0x2004a83c

080078b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078c0:	4a14      	ldr	r2, [pc, #80]	; (8007914 <_sbrk+0x5c>)
 80078c2:	4b15      	ldr	r3, [pc, #84]	; (8007918 <_sbrk+0x60>)
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078cc:	4b13      	ldr	r3, [pc, #76]	; (800791c <_sbrk+0x64>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d102      	bne.n	80078da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078d4:	4b11      	ldr	r3, [pc, #68]	; (800791c <_sbrk+0x64>)
 80078d6:	4a12      	ldr	r2, [pc, #72]	; (8007920 <_sbrk+0x68>)
 80078d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078da:	4b10      	ldr	r3, [pc, #64]	; (800791c <_sbrk+0x64>)
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4413      	add	r3, r2
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d207      	bcs.n	80078f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078e8:	f00d ff98 	bl	801581c <__errno>
 80078ec:	4602      	mov	r2, r0
 80078ee:	230c      	movs	r3, #12
 80078f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295
 80078f6:	e009      	b.n	800790c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078f8:	4b08      	ldr	r3, [pc, #32]	; (800791c <_sbrk+0x64>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80078fe:	4b07      	ldr	r3, [pc, #28]	; (800791c <_sbrk+0x64>)
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4413      	add	r3, r2
 8007906:	4a05      	ldr	r2, [pc, #20]	; (800791c <_sbrk+0x64>)
 8007908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800790a:	68fb      	ldr	r3, [r7, #12]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20050000 	.word	0x20050000
 8007918:	00000800 	.word	0x00000800
 800791c:	20000258 	.word	0x20000258
 8007920:	2004cb90 	.word	0x2004cb90

08007924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007928:	4b08      	ldr	r3, [pc, #32]	; (800794c <SystemInit+0x28>)
 800792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792e:	4a07      	ldr	r2, [pc, #28]	; (800794c <SystemInit+0x28>)
 8007930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <SystemInit+0x28>)
 800793a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800793e:	609a      	str	r2, [r3, #8]
#endif
}
 8007940:	bf00      	nop
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	e000ed00 	.word	0xe000ed00

08007950 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007950:	b598      	push	{r3, r4, r7, lr}
 8007952:	af00      	add	r7, sp, #0
	lcd_init();
 8007954:	f7f9 fb60 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007958:	483b      	ldr	r0, [pc, #236]	; (8007a48 <cppInit+0xf8>)
 800795a:	f7fd fcf7 	bl	800534c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800795e:	2064      	movs	r0, #100	; 0x64
 8007960:	f002 fa12 	bl	8009d88 <HAL_Delay>
	power_sensor.updateValues();
 8007964:	4838      	ldr	r0, [pc, #224]	; (8007a48 <cppInit+0xf8>)
 8007966:	f7fd fcff 	bl	8005368 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800796a:	f7f9 fb99 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800796e:	2100      	movs	r1, #0
 8007970:	2000      	movs	r0, #0
 8007972:	f7f9 fba5 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007976:	4835      	ldr	r0, [pc, #212]	; (8007a4c <cppInit+0xfc>)
 8007978:	f7f9 fbcc 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800797c:	2101      	movs	r1, #1
 800797e:	2000      	movs	r0, #0
 8007980:	f7f9 fb9e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007984:	4830      	ldr	r0, [pc, #192]	; (8007a48 <cppInit+0xf8>)
 8007986:	f7fd fd19 	bl	80053bc <_ZN11PowerSensor17getButteryVoltageEv>
 800798a:	ee10 3a10 	vmov	r3, s0
 800798e:	4618      	mov	r0, r3
 8007990:	f7f8 fdf2 	bl	8000578 <__aeabi_f2d>
 8007994:	4603      	mov	r3, r0
 8007996:	460c      	mov	r4, r1
 8007998:	461a      	mov	r2, r3
 800799a:	4623      	mov	r3, r4
 800799c:	482c      	ldr	r0, [pc, #176]	; (8007a50 <cppInit+0x100>)
 800799e:	f7f9 fbb9 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 80079a2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80079a6:	f002 f9ef 	bl	8009d88 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80079aa:	482a      	ldr	r0, [pc, #168]	; (8007a54 <cppInit+0x104>)
 80079ac:	f7fc fee8 	bl	8004780 <_ZN6Logger10sdCardInitEv>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <cppInit+0x76>
		led.fullColor('G');
 80079b6:	2147      	movs	r1, #71	; 0x47
 80079b8:	4827      	ldr	r0, [pc, #156]	; (8007a58 <cppInit+0x108>)
 80079ba:	f7fa fb7b 	bl	80020b4 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80079be:	2064      	movs	r0, #100	; 0x64
 80079c0:	f002 f9e2 	bl	8009d88 <HAL_Delay>
 80079c4:	e006      	b.n	80079d4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80079c6:	2152      	movs	r1, #82	; 0x52
 80079c8:	4823      	ldr	r0, [pc, #140]	; (8007a58 <cppInit+0x108>)
 80079ca:	f7fa fb73 	bl	80020b4 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80079ce:	2064      	movs	r0, #100	; 0x64
 80079d0:	f002 f9da 	bl	8009d88 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80079d4:	4821      	ldr	r0, [pc, #132]	; (8007a5c <cppInit+0x10c>)
 80079d6:	f7fa fcc9 	bl	800236c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80079da:	4821      	ldr	r0, [pc, #132]	; (8007a60 <cppInit+0x110>)
 80079dc:	f7fd f98a 	bl	8004cf4 <_ZN5Motor4initEv>
	encoder.init();
 80079e0:	4820      	ldr	r0, [pc, #128]	; (8007a64 <cppInit+0x114>)
 80079e2:	f7f9 fd1f 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80079e6:	4820      	ldr	r0, [pc, #128]	; (8007a68 <cppInit+0x118>)
 80079e8:	f7fa f924 	bl	8001c34 <_ZN3IMU4initEv>
	line_trace.init();
 80079ec:	481f      	ldr	r0, [pc, #124]	; (8007a6c <cppInit+0x11c>)
 80079ee:	f7fb ffbb 	bl	8003968 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80079f2:	481a      	ldr	r0, [pc, #104]	; (8007a5c <cppInit+0x10c>)
 80079f4:	f7fa fdb0 	bl	8002558 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80079f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079fc:	f002 f9c4 	bl	8009d88 <HAL_Delay>

	led.fullColor('M');
 8007a00:	214d      	movs	r1, #77	; 0x4d
 8007a02:	4815      	ldr	r0, [pc, #84]	; (8007a58 <cppInit+0x108>)
 8007a04:	f7fa fb56 	bl	80020b4 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007a08:	4817      	ldr	r0, [pc, #92]	; (8007a68 <cppInit+0x118>)
 8007a0a:	f7fa f9db 	bl	8001dc4 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007a0e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007a70 <cppInit+0x120>
 8007a12:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007a74 <cppInit+0x124>
 8007a16:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007a78 <cppInit+0x128>
 8007a1a:	4818      	ldr	r0, [pc, #96]	; (8007a7c <cppInit+0x12c>)
 8007a1c:	f7fe f9cc 	bl	8005db8 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007a20:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8007a70 <cppInit+0x120>
 8007a24:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007a80 <cppInit+0x130>
 8007a28:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007a84 <cppInit+0x134>
 8007a2c:	4813      	ldr	r0, [pc, #76]	; (8007a7c <cppInit+0x12c>)
 8007a2e:	f7fe f9dc 	bl	8005dea <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007a32:	4815      	ldr	r0, [pc, #84]	; (8007a88 <cppInit+0x138>)
 8007a34:	f7fd fb94 	bl	8005160 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007a38:	4814      	ldr	r0, [pc, #80]	; (8007a8c <cppInit+0x13c>)
 8007a3a:	f7fd fc2b 	bl	8005294 <_ZN13PathFollowing4initEv>

	esc.init();
 8007a3e:	4814      	ldr	r0, [pc, #80]	; (8007a90 <cppInit+0x140>)
 8007a40:	f7f9 fbd4 	bl	80011ec <_ZN3ESC4initEv>

}
 8007a44:	bf00      	nop
 8007a46:	bd98      	pop	{r3, r4, r7, pc}
 8007a48:	20000570 	.word	0x20000570
 8007a4c:	08019e64 	.word	0x08019e64
 8007a50:	08019e6c 	.word	0x08019e6c
 8007a54:	20000590 	.word	0x20000590
 8007a58:	2000056c 	.word	0x2000056c
 8007a5c:	2000025c 	.word	0x2000025c
 8007a60:	20000568 	.word	0x20000568
 8007a64:	2002381c 	.word	0x2002381c
 8007a68:	2000057c 	.word	0x2000057c
 8007a6c:	200238bc 	.word	0x200238bc
 8007a70:	00000000 	.word	0x00000000
 8007a74:	4129999a 	.word	0x4129999a
 8007a78:	3f99999a 	.word	0x3f99999a
 8007a7c:	2002383c 	.word	0x2002383c
 8007a80:	3f5e3fbc 	.word	0x3f5e3fbc
 8007a84:	3d75c28f 	.word	0x3d75c28f
 8007a88:	20023878 	.word	0x20023878
 8007a8c:	20030a08 	.word	0x20030a08
 8007a90:	200238b8 	.word	0x200238b8

08007a94 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007a98:	480e      	ldr	r0, [pc, #56]	; (8007ad4 <cppFlip1ms+0x40>)
 8007a9a:	f7fa fcc5 	bl	8002428 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007a9e:	480e      	ldr	r0, [pc, #56]	; (8007ad8 <cppFlip1ms+0x44>)
 8007aa0:	f7fa f8ee 	bl	8001c80 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007aa4:	480d      	ldr	r0, [pc, #52]	; (8007adc <cppFlip1ms+0x48>)
 8007aa6:	f7f9 fcdf 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007aaa:	480d      	ldr	r0, [pc, #52]	; (8007ae0 <cppFlip1ms+0x4c>)
 8007aac:	f7fc fa02 	bl	8003eb4 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007ab0:	480c      	ldr	r0, [pc, #48]	; (8007ae4 <cppFlip1ms+0x50>)
 8007ab2:	f7fe f9b3 	bl	8005e1c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007ab6:	480c      	ldr	r0, [pc, #48]	; (8007ae8 <cppFlip1ms+0x54>)
 8007ab8:	f7fd fb36 	bl	8005128 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007abc:	480b      	ldr	r0, [pc, #44]	; (8007aec <cppFlip1ms+0x58>)
 8007abe:	f7fd fcf9 	bl	80054b4 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007ac2:	480b      	ldr	r0, [pc, #44]	; (8007af0 <cppFlip1ms+0x5c>)
 8007ac4:	f7fd f928 	bl	8004d18 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007ac8:	4804      	ldr	r0, [pc, #16]	; (8007adc <cppFlip1ms+0x48>)
 8007aca:	f7f9 fd59 	bl	8001580 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007ace:	bf00      	nop
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	2000025c 	.word	0x2000025c
 8007ad8:	2000057c 	.word	0x2000057c
 8007adc:	2002381c 	.word	0x2002381c
 8007ae0:	200238bc 	.word	0x200238bc
 8007ae4:	2002383c 	.word	0x2002383c
 8007ae8:	20023878 	.word	0x20023878
 8007aec:	20000554 	.word	0x20000554
 8007af0:	20000568 	.word	0x20000568

08007af4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007af8:	4802      	ldr	r0, [pc, #8]	; (8007b04 <cppFlip100ns+0x10>)
 8007afa:	f7fa fc47 	bl	800238c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007afe:	bf00      	nop
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	2000025c 	.word	0x2000025c

08007b08 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8007b0c:	480a      	ldr	r0, [pc, #40]	; (8007b38 <cppFlip10ms+0x30>)
 8007b0e:	f7fc f904 	bl	8003d1a <_ZN9LineTrace17getTargetVelocityEv>
 8007b12:	eef0 7a40 	vmov.f32	s15, s0
 8007b16:	eeb0 0a67 	vmov.f32	s0, s15
 8007b1a:	4808      	ldr	r0, [pc, #32]	; (8007b3c <cppFlip10ms+0x34>)
 8007b1c:	f7fc fe78 	bl	8004810 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8007b20:	4807      	ldr	r0, [pc, #28]	; (8007b40 <cppFlip10ms+0x38>)
 8007b22:	f7fe f9bd 	bl	8005ea0 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8007b26:	eef0 7a40 	vmov.f32	s15, s0
 8007b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b2e:	4803      	ldr	r0, [pc, #12]	; (8007b3c <cppFlip10ms+0x34>)
 8007b30:	f7fc feab 	bl	800488a <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007b34:	bf00      	nop
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	200238bc 	.word	0x200238bc
 8007b3c:	20000590 	.word	0x20000590
 8007b40:	2002383c 	.word	0x2002383c
 8007b44:	00000000 	.word	0x00000000

08007b48 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007b4e:	4baf      	ldr	r3, [pc, #700]	; (8007e0c <cppLoop+0x2c4>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f3bf 8f5b 	dmb	ish
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf0c      	ite	eq
 8007b60:	2301      	moveq	r3, #1
 8007b62:	2300      	movne	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d015      	beq.n	8007b96 <cppLoop+0x4e>
 8007b6a:	48a8      	ldr	r0, [pc, #672]	; (8007e0c <cppLoop+0x2c4>)
 8007b6c:	f00c fdf1 	bl	8014752 <__cxa_guard_acquire>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bf14      	ite	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	2300      	moveq	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <cppLoop+0x4e>
 8007b80:	48a3      	ldr	r0, [pc, #652]	; (8007e10 <cppLoop+0x2c8>)
 8007b82:	f7fb fff8 	bl	8003b76 <_ZN9LineTrace5getKpEv>
 8007b86:	eef0 7a40 	vmov.f32	s15, s0
 8007b8a:	4ba2      	ldr	r3, [pc, #648]	; (8007e14 <cppLoop+0x2cc>)
 8007b8c:	edc3 7a00 	vstr	s15, [r3]
 8007b90:	489e      	ldr	r0, [pc, #632]	; (8007e0c <cppLoop+0x2c4>)
 8007b92:	f00c fdea 	bl	801476a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007b96:	4ba0      	ldr	r3, [pc, #640]	; (8007e18 <cppLoop+0x2d0>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f3bf 8f5b 	dmb	ish
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d015      	beq.n	8007bde <cppLoop+0x96>
 8007bb2:	4899      	ldr	r0, [pc, #612]	; (8007e18 <cppLoop+0x2d0>)
 8007bb4:	f00c fdcd 	bl	8014752 <__cxa_guard_acquire>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <cppLoop+0x96>
 8007bc8:	4891      	ldr	r0, [pc, #580]	; (8007e10 <cppLoop+0x2c8>)
 8007bca:	f7fb ffe3 	bl	8003b94 <_ZN9LineTrace5getKiEv>
 8007bce:	eef0 7a40 	vmov.f32	s15, s0
 8007bd2:	4b92      	ldr	r3, [pc, #584]	; (8007e1c <cppLoop+0x2d4>)
 8007bd4:	edc3 7a00 	vstr	s15, [r3]
 8007bd8:	488f      	ldr	r0, [pc, #572]	; (8007e18 <cppLoop+0x2d0>)
 8007bda:	f00c fdc6 	bl	801476a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007bde:	4b90      	ldr	r3, [pc, #576]	; (8007e20 <cppLoop+0x2d8>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f3bf 8f5b 	dmb	ish
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	bf0c      	ite	eq
 8007bf0:	2301      	moveq	r3, #1
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d015      	beq.n	8007c26 <cppLoop+0xde>
 8007bfa:	4889      	ldr	r0, [pc, #548]	; (8007e20 <cppLoop+0x2d8>)
 8007bfc:	f00c fda9 	bl	8014752 <__cxa_guard_acquire>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bf14      	ite	ne
 8007c06:	2301      	movne	r3, #1
 8007c08:	2300      	moveq	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <cppLoop+0xde>
 8007c10:	487f      	ldr	r0, [pc, #508]	; (8007e10 <cppLoop+0x2c8>)
 8007c12:	f7fb ffce 	bl	8003bb2 <_ZN9LineTrace5getKdEv>
 8007c16:	eef0 7a40 	vmov.f32	s15, s0
 8007c1a:	4b82      	ldr	r3, [pc, #520]	; (8007e24 <cppLoop+0x2dc>)
 8007c1c:	edc3 7a00 	vstr	s15, [r3]
 8007c20:	487f      	ldr	r0, [pc, #508]	; (8007e20 <cppLoop+0x2d8>)
 8007c22:	f00c fda2 	bl	801476a <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007c26:	4b80      	ldr	r3, [pc, #512]	; (8007e28 <cppLoop+0x2e0>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f3bf 8f5b 	dmb	ish
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bf0c      	ite	eq
 8007c38:	2301      	moveq	r3, #1
 8007c3a:	2300      	movne	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <cppLoop+0x126>
 8007c42:	4879      	ldr	r0, [pc, #484]	; (8007e28 <cppLoop+0x2e0>)
 8007c44:	f00c fd85 	bl	8014752 <__cxa_guard_acquire>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bf14      	ite	ne
 8007c4e:	2301      	movne	r3, #1
 8007c50:	2300      	moveq	r3, #0
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <cppLoop+0x126>
 8007c58:	486d      	ldr	r0, [pc, #436]	; (8007e10 <cppLoop+0x2c8>)
 8007c5a:	f7fb ffd2 	bl	8003c02 <_ZN9LineTrace9getKpSlowEv>
 8007c5e:	eef0 7a40 	vmov.f32	s15, s0
 8007c62:	4b72      	ldr	r3, [pc, #456]	; (8007e2c <cppLoop+0x2e4>)
 8007c64:	edc3 7a00 	vstr	s15, [r3]
 8007c68:	486f      	ldr	r0, [pc, #444]	; (8007e28 <cppLoop+0x2e0>)
 8007c6a:	f00c fd7e 	bl	801476a <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007c6e:	4b70      	ldr	r3, [pc, #448]	; (8007e30 <cppLoop+0x2e8>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f3bf 8f5b 	dmb	ish
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf0c      	ite	eq
 8007c80:	2301      	moveq	r3, #1
 8007c82:	2300      	movne	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d015      	beq.n	8007cb6 <cppLoop+0x16e>
 8007c8a:	4869      	ldr	r0, [pc, #420]	; (8007e30 <cppLoop+0x2e8>)
 8007c8c:	f00c fd61 	bl	8014752 <__cxa_guard_acquire>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bf14      	ite	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <cppLoop+0x16e>
 8007ca0:	485b      	ldr	r0, [pc, #364]	; (8007e10 <cppLoop+0x2c8>)
 8007ca2:	f7fb ffbd 	bl	8003c20 <_ZN9LineTrace9getKiSlowEv>
 8007ca6:	eef0 7a40 	vmov.f32	s15, s0
 8007caa:	4b62      	ldr	r3, [pc, #392]	; (8007e34 <cppLoop+0x2ec>)
 8007cac:	edc3 7a00 	vstr	s15, [r3]
 8007cb0:	485f      	ldr	r0, [pc, #380]	; (8007e30 <cppLoop+0x2e8>)
 8007cb2:	f00c fd5a 	bl	801476a <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007cb6:	4b60      	ldr	r3, [pc, #384]	; (8007e38 <cppLoop+0x2f0>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	f3bf 8f5b 	dmb	ish
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d015      	beq.n	8007cfe <cppLoop+0x1b6>
 8007cd2:	4859      	ldr	r0, [pc, #356]	; (8007e38 <cppLoop+0x2f0>)
 8007cd4:	f00c fd3d 	bl	8014752 <__cxa_guard_acquire>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bf14      	ite	ne
 8007cde:	2301      	movne	r3, #1
 8007ce0:	2300      	moveq	r3, #0
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <cppLoop+0x1b6>
 8007ce8:	4849      	ldr	r0, [pc, #292]	; (8007e10 <cppLoop+0x2c8>)
 8007cea:	f7fb ffa8 	bl	8003c3e <_ZN9LineTrace9getKdSlowEv>
 8007cee:	eef0 7a40 	vmov.f32	s15, s0
 8007cf2:	4b52      	ldr	r3, [pc, #328]	; (8007e3c <cppLoop+0x2f4>)
 8007cf4:	edc3 7a00 	vstr	s15, [r3]
 8007cf8:	484f      	ldr	r0, [pc, #316]	; (8007e38 <cppLoop+0x2f0>)
 8007cfa:	f00c fd36 	bl	801476a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007cfe:	4b50      	ldr	r3, [pc, #320]	; (8007e40 <cppLoop+0x2f8>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	f3bf 8f5b 	dmb	ish
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	bf0c      	ite	eq
 8007d10:	2301      	moveq	r3, #1
 8007d12:	2300      	movne	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d015      	beq.n	8007d46 <cppLoop+0x1fe>
 8007d1a:	4849      	ldr	r0, [pc, #292]	; (8007e40 <cppLoop+0x2f8>)
 8007d1c:	f00c fd19 	bl	8014752 <__cxa_guard_acquire>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bf14      	ite	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	2300      	moveq	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <cppLoop+0x1fe>
 8007d30:	4837      	ldr	r0, [pc, #220]	; (8007e10 <cppLoop+0x2c8>)
 8007d32:	f7fb fff2 	bl	8003d1a <_ZN9LineTrace17getTargetVelocityEv>
 8007d36:	eef0 7a40 	vmov.f32	s15, s0
 8007d3a:	4b42      	ldr	r3, [pc, #264]	; (8007e44 <cppLoop+0x2fc>)
 8007d3c:	edc3 7a00 	vstr	s15, [r3]
 8007d40:	483f      	ldr	r0, [pc, #252]	; (8007e40 <cppLoop+0x2f8>)
 8007d42:	f00c fd12 	bl	801476a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007d46:	4b40      	ldr	r3, [pc, #256]	; (8007e48 <cppLoop+0x300>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	f3bf 8f5b 	dmb	ish
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bf0c      	ite	eq
 8007d58:	2301      	moveq	r3, #1
 8007d5a:	2300      	movne	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d015      	beq.n	8007d8e <cppLoop+0x246>
 8007d62:	4839      	ldr	r0, [pc, #228]	; (8007e48 <cppLoop+0x300>)
 8007d64:	f00c fcf5 	bl	8014752 <__cxa_guard_acquire>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bf14      	ite	ne
 8007d6e:	2301      	movne	r3, #1
 8007d70:	2300      	moveq	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <cppLoop+0x246>
 8007d78:	4825      	ldr	r0, [pc, #148]	; (8007e10 <cppLoop+0x2c8>)
 8007d7a:	f7fb ffde 	bl	8003d3a <_ZN9LineTrace14getMaxVelocityEv>
 8007d7e:	eef0 7a40 	vmov.f32	s15, s0
 8007d82:	4b32      	ldr	r3, [pc, #200]	; (8007e4c <cppLoop+0x304>)
 8007d84:	edc3 7a00 	vstr	s15, [r3]
 8007d88:	482f      	ldr	r0, [pc, #188]	; (8007e48 <cppLoop+0x300>)
 8007d8a:	f00c fcee 	bl	801476a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007d8e:	4b30      	ldr	r3, [pc, #192]	; (8007e50 <cppLoop+0x308>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f3bf 8f5b 	dmb	ish
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bf0c      	ite	eq
 8007da0:	2301      	moveq	r3, #1
 8007da2:	2300      	movne	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d015      	beq.n	8007dd6 <cppLoop+0x28e>
 8007daa:	4829      	ldr	r0, [pc, #164]	; (8007e50 <cppLoop+0x308>)
 8007dac:	f00c fcd1 	bl	8014752 <__cxa_guard_acquire>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bf14      	ite	ne
 8007db6:	2301      	movne	r3, #1
 8007db8:	2300      	moveq	r3, #0
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <cppLoop+0x28e>
 8007dc0:	4813      	ldr	r0, [pc, #76]	; (8007e10 <cppLoop+0x2c8>)
 8007dc2:	f7fb ffca 	bl	8003d5a <_ZN9LineTrace15getMaxVelocity2Ev>
 8007dc6:	eef0 7a40 	vmov.f32	s15, s0
 8007dca:	4b22      	ldr	r3, [pc, #136]	; (8007e54 <cppLoop+0x30c>)
 8007dcc:	edc3 7a00 	vstr	s15, [r3]
 8007dd0:	481f      	ldr	r0, [pc, #124]	; (8007e50 <cppLoop+0x308>)
 8007dd2:	f00c fcca 	bl	801476a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007dd6:	4b20      	ldr	r3, [pc, #128]	; (8007e58 <cppLoop+0x310>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f3bf 8f5b 	dmb	ish
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d03f      	beq.n	8007e72 <cppLoop+0x32a>
 8007df2:	4819      	ldr	r0, [pc, #100]	; (8007e58 <cppLoop+0x310>)
 8007df4:	f00c fcad 	bl	8014752 <__cxa_guard_acquire>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bf14      	ite	ne
 8007dfe:	2301      	movne	r3, #1
 8007e00:	2300      	moveq	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d034      	beq.n	8007e72 <cppLoop+0x32a>
 8007e08:	e028      	b.n	8007e5c <cppLoop+0x314>
 8007e0a:	bf00      	nop
 8007e0c:	20048140 	.word	0x20048140
 8007e10:	200238bc 	.word	0x200238bc
 8007e14:	2004813c 	.word	0x2004813c
 8007e18:	20048148 	.word	0x20048148
 8007e1c:	20048144 	.word	0x20048144
 8007e20:	20048150 	.word	0x20048150
 8007e24:	2004814c 	.word	0x2004814c
 8007e28:	20048158 	.word	0x20048158
 8007e2c:	20048154 	.word	0x20048154
 8007e30:	20048160 	.word	0x20048160
 8007e34:	2004815c 	.word	0x2004815c
 8007e38:	20048168 	.word	0x20048168
 8007e3c:	20048164 	.word	0x20048164
 8007e40:	20048170 	.word	0x20048170
 8007e44:	2004816c 	.word	0x2004816c
 8007e48:	20048178 	.word	0x20048178
 8007e4c:	20048174 	.word	0x20048174
 8007e50:	20048180 	.word	0x20048180
 8007e54:	2004817c 	.word	0x2004817c
 8007e58:	20048188 	.word	0x20048188
 8007e5c:	48b6      	ldr	r0, [pc, #728]	; (8008138 <cppLoop+0x5f0>)
 8007e5e:	f7fb ff8c 	bl	8003d7a <_ZN9LineTrace14getMinVelocityEv>
 8007e62:	eef0 7a40 	vmov.f32	s15, s0
 8007e66:	4bb5      	ldr	r3, [pc, #724]	; (800813c <cppLoop+0x5f4>)
 8007e68:	edc3 7a00 	vstr	s15, [r3]
 8007e6c:	48b4      	ldr	r0, [pc, #720]	; (8008140 <cppLoop+0x5f8>)
 8007e6e:	f00c fc7c 	bl	801476a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007e72:	4bb4      	ldr	r3, [pc, #720]	; (8008144 <cppLoop+0x5fc>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	f3bf 8f5b 	dmb	ish
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d015      	beq.n	8007eba <cppLoop+0x372>
 8007e8e:	48ad      	ldr	r0, [pc, #692]	; (8008144 <cppLoop+0x5fc>)
 8007e90:	f00c fc5f 	bl	8014752 <__cxa_guard_acquire>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bf14      	ite	ne
 8007e9a:	2301      	movne	r3, #1
 8007e9c:	2300      	moveq	r3, #0
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <cppLoop+0x372>
 8007ea4:	48a4      	ldr	r0, [pc, #656]	; (8008138 <cppLoop+0x5f0>)
 8007ea6:	f7fb ff78 	bl	8003d9a <_ZN9LineTrace15getMinVelocity2Ev>
 8007eaa:	eef0 7a40 	vmov.f32	s15, s0
 8007eae:	4ba6      	ldr	r3, [pc, #664]	; (8008148 <cppLoop+0x600>)
 8007eb0:	edc3 7a00 	vstr	s15, [r3]
 8007eb4:	48a3      	ldr	r0, [pc, #652]	; (8008144 <cppLoop+0x5fc>)
 8007eb6:	f00c fc58 	bl	801476a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007eba:	4ba4      	ldr	r3, [pc, #656]	; (800814c <cppLoop+0x604>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	f3bf 8f5b 	dmb	ish
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bf0c      	ite	eq
 8007ecc:	2301      	moveq	r3, #1
 8007ece:	2300      	movne	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d015      	beq.n	8007f02 <cppLoop+0x3ba>
 8007ed6:	489d      	ldr	r0, [pc, #628]	; (800814c <cppLoop+0x604>)
 8007ed8:	f00c fc3b 	bl	8014752 <__cxa_guard_acquire>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bf14      	ite	ne
 8007ee2:	2301      	movne	r3, #1
 8007ee4:	2300      	moveq	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <cppLoop+0x3ba>
 8007eec:	4892      	ldr	r0, [pc, #584]	; (8008138 <cppLoop+0x5f0>)
 8007eee:	f7fb ff98 	bl	8003e22 <_ZN9LineTrace9getMaxAccEv>
 8007ef2:	eef0 7a40 	vmov.f32	s15, s0
 8007ef6:	4b96      	ldr	r3, [pc, #600]	; (8008150 <cppLoop+0x608>)
 8007ef8:	edc3 7a00 	vstr	s15, [r3]
 8007efc:	4893      	ldr	r0, [pc, #588]	; (800814c <cppLoop+0x604>)
 8007efe:	f00c fc34 	bl	801476a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007f02:	4b94      	ldr	r3, [pc, #592]	; (8008154 <cppLoop+0x60c>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	f3bf 8f5b 	dmb	ish
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bf0c      	ite	eq
 8007f14:	2301      	moveq	r3, #1
 8007f16:	2300      	movne	r3, #0
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d015      	beq.n	8007f4a <cppLoop+0x402>
 8007f1e:	488d      	ldr	r0, [pc, #564]	; (8008154 <cppLoop+0x60c>)
 8007f20:	f00c fc17 	bl	8014752 <__cxa_guard_acquire>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bf14      	ite	ne
 8007f2a:	2301      	movne	r3, #1
 8007f2c:	2300      	moveq	r3, #0
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <cppLoop+0x402>
 8007f34:	4880      	ldr	r0, [pc, #512]	; (8008138 <cppLoop+0x5f0>)
 8007f36:	f7fb ffaa 	bl	8003e8e <_ZN9LineTrace9getMaxDecEv>
 8007f3a:	eef0 7a40 	vmov.f32	s15, s0
 8007f3e:	4b86      	ldr	r3, [pc, #536]	; (8008158 <cppLoop+0x610>)
 8007f40:	edc3 7a00 	vstr	s15, [r3]
 8007f44:	4883      	ldr	r0, [pc, #524]	; (8008154 <cppLoop+0x60c>)
 8007f46:	f00c fc10 	bl	801476a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007f4a:	4b84      	ldr	r3, [pc, #528]	; (800815c <cppLoop+0x614>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	f3bf 8f5b 	dmb	ish
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2301      	moveq	r3, #1
 8007f5e:	2300      	movne	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d015      	beq.n	8007f92 <cppLoop+0x44a>
 8007f66:	487d      	ldr	r0, [pc, #500]	; (800815c <cppLoop+0x614>)
 8007f68:	f00c fbf3 	bl	8014752 <__cxa_guard_acquire>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bf14      	ite	ne
 8007f72:	2301      	movne	r3, #1
 8007f74:	2300      	moveq	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <cppLoop+0x44a>
 8007f7c:	486e      	ldr	r0, [pc, #440]	; (8008138 <cppLoop+0x5f0>)
 8007f7e:	f7fb ff74 	bl	8003e6a <_ZN9LineTrace10getMaxAcc2Ev>
 8007f82:	eef0 7a40 	vmov.f32	s15, s0
 8007f86:	4b76      	ldr	r3, [pc, #472]	; (8008160 <cppLoop+0x618>)
 8007f88:	edc3 7a00 	vstr	s15, [r3]
 8007f8c:	4873      	ldr	r0, [pc, #460]	; (800815c <cppLoop+0x614>)
 8007f8e:	f00c fbec 	bl	801476a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007f92:	4b74      	ldr	r3, [pc, #464]	; (8008164 <cppLoop+0x61c>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f3bf 8f5b 	dmb	ish
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bf0c      	ite	eq
 8007fa4:	2301      	moveq	r3, #1
 8007fa6:	2300      	movne	r3, #0
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d015      	beq.n	8007fda <cppLoop+0x492>
 8007fae:	486d      	ldr	r0, [pc, #436]	; (8008164 <cppLoop+0x61c>)
 8007fb0:	f00c fbcf 	bl	8014752 <__cxa_guard_acquire>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bf14      	ite	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	2300      	moveq	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <cppLoop+0x492>
 8007fc4:	485c      	ldr	r0, [pc, #368]	; (8008138 <cppLoop+0x5f0>)
 8007fc6:	f7fb ff3e 	bl	8003e46 <_ZN9LineTrace10getMaxDec2Ev>
 8007fca:	eef0 7a40 	vmov.f32	s15, s0
 8007fce:	4b66      	ldr	r3, [pc, #408]	; (8008168 <cppLoop+0x620>)
 8007fd0:	edc3 7a00 	vstr	s15, [r3]
 8007fd4:	4863      	ldr	r0, [pc, #396]	; (8008164 <cppLoop+0x61c>)
 8007fd6:	f00c fbc8 	bl	801476a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007fda:	4864      	ldr	r0, [pc, #400]	; (800816c <cppLoop+0x624>)
 8007fdc:	f7fd f9fe 	bl	80053dc <_ZN12RotarySwitch8getValueEv>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b0f      	cmp	r3, #15
 8007fe4:	f201 8586 	bhi.w	8009af4 <cppLoop+0x1fac>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <cppLoop+0x4a8>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	080083b5 	.word	0x080083b5
 8007ff8:	080084d1 	.word	0x080084d1
 8007ffc:	08008623 	.word	0x08008623
 8008000:	08008717 	.word	0x08008717
 8008004:	080089b9 	.word	0x080089b9
 8008008:	08008b21 	.word	0x08008b21
 800800c:	08008da5 	.word	0x08008da5
 8008010:	08008fef 	.word	0x08008fef
 8008014:	0800927f 	.word	0x0800927f
 8008018:	0800933b 	.word	0x0800933b
 800801c:	08009431 	.word	0x08009431
 8008020:	080094b7 	.word	0x080094b7
 8008024:	0800957d 	.word	0x0800957d
 8008028:	08009643 	.word	0x08009643
 800802c:	08009785 	.word	0x08009785
	case 0:
		led.fullColor('W');
 8008030:	2157      	movs	r1, #87	; 0x57
 8008032:	484f      	ldr	r0, [pc, #316]	; (8008170 <cppLoop+0x628>)
 8008034:	f7fa f83e 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008038:	f7f9 f832 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800803c:	2100      	movs	r1, #0
 800803e:	2000      	movs	r0, #0
 8008040:	f7f9 f83e 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 8008044:	483c      	ldr	r0, [pc, #240]	; (8008138 <cppLoop+0x5f0>)
 8008046:	f7fb fddc 	bl	8003c02 <_ZN9LineTrace9getKpSlowEv>
 800804a:	eeb0 7a40 	vmov.f32	s14, s0
 800804e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008174 <cppLoop+0x62c>
 8008052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008056:	eeb0 0a67 	vmov.f32	s0, s15
 800805a:	f7fa fbed 	bl	8002838 <_ZSt3absf>
 800805e:	ee10 3a10 	vmov	r3, s0
 8008062:	4618      	mov	r0, r3
 8008064:	f7f8 fa88 	bl	8000578 <__aeabi_f2d>
 8008068:	4603      	mov	r3, r0
 800806a:	460c      	mov	r4, r1
 800806c:	461a      	mov	r2, r3
 800806e:	4623      	mov	r3, r4
 8008070:	4841      	ldr	r0, [pc, #260]	; (8008178 <cppLoop+0x630>)
 8008072:	f7f9 f84f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008076:	2101      	movs	r1, #1
 8008078:	2000      	movs	r0, #0
 800807a:	f7f9 f821 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*100000));
 800807e:	482e      	ldr	r0, [pc, #184]	; (8008138 <cppLoop+0x5f0>)
 8008080:	f7fb fdce 	bl	8003c20 <_ZN9LineTrace9getKiSlowEv>
 8008084:	eeb0 7a40 	vmov.f32	s14, s0
 8008088:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800817c <cppLoop+0x634>
 800808c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008090:	eeb0 0a67 	vmov.f32	s0, s15
 8008094:	f7fa fbd0 	bl	8002838 <_ZSt3absf>
 8008098:	ee10 3a10 	vmov	r3, s0
 800809c:	4618      	mov	r0, r3
 800809e:	f7f8 fa6b 	bl	8000578 <__aeabi_f2d>
 80080a2:	4605      	mov	r5, r0
 80080a4:	460e      	mov	r6, r1
 80080a6:	4824      	ldr	r0, [pc, #144]	; (8008138 <cppLoop+0x5f0>)
 80080a8:	f7fb fdc9 	bl	8003c3e <_ZN9LineTrace9getKdSlowEv>
 80080ac:	eeb0 7a40 	vmov.f32	s14, s0
 80080b0:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008180 <cppLoop+0x638>
 80080b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b8:	eeb0 0a67 	vmov.f32	s0, s15
 80080bc:	f7fa fbbc 	bl	8002838 <_ZSt3absf>
 80080c0:	ee10 3a10 	vmov	r3, s0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7f8 fa57 	bl	8000578 <__aeabi_f2d>
 80080ca:	4603      	mov	r3, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	e9cd 3400 	strd	r3, r4, [sp]
 80080d2:	462a      	mov	r2, r5
 80080d4:	4633      	mov	r3, r6
 80080d6:	482b      	ldr	r0, [pc, #172]	; (8008184 <cppLoop+0x63c>)
 80080d8:	f7f9 f81c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80080dc:	482a      	ldr	r0, [pc, #168]	; (8008188 <cppLoop+0x640>)
 80080de:	f7f9 ff85 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	bf0c      	ite	eq
 80080e8:	2301      	moveq	r3, #1
 80080ea:	2300      	movne	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d04e      	beq.n	8008190 <cppLoop+0x648>
			led.LR(-1, 1);
 80080f2:	2201      	movs	r2, #1
 80080f4:	f04f 31ff 	mov.w	r1, #4294967295
 80080f8:	481d      	ldr	r0, [pc, #116]	; (8008170 <cppLoop+0x628>)
 80080fa:	f7fa f897 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008102:	f001 fe41 	bl	8009d88 <HAL_Delay>

			selector++;
 8008106:	4b21      	ldr	r3, [pc, #132]	; (800818c <cppLoop+0x644>)
 8008108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800810c:	b29b      	uxth	r3, r3
 800810e:	3301      	adds	r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	b21a      	sxth	r2, r3
 8008114:	4b1d      	ldr	r3, [pc, #116]	; (800818c <cppLoop+0x644>)
 8008116:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008118:	4b1c      	ldr	r3, [pc, #112]	; (800818c <cppLoop+0x644>)
 800811a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800811e:	2b02      	cmp	r3, #2
 8008120:	dd02      	ble.n	8008128 <cppLoop+0x5e0>
 8008122:	4b1a      	ldr	r3, [pc, #104]	; (800818c <cppLoop+0x644>)
 8008124:	2200      	movs	r2, #0
 8008126:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008128:	2200      	movs	r2, #0
 800812a:	f04f 31ff 	mov.w	r1, #4294967295
 800812e:	4810      	ldr	r0, [pc, #64]	; (8008170 <cppLoop+0x628>)
 8008130:	f7fa f87c 	bl	800222c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008134:	f001 bce0 	b.w	8009af8 <cppLoop+0x1fb0>
 8008138:	200238bc 	.word	0x200238bc
 800813c:	20048184 	.word	0x20048184
 8008140:	20048188 	.word	0x20048188
 8008144:	20048190 	.word	0x20048190
 8008148:	2004818c 	.word	0x2004818c
 800814c:	20048198 	.word	0x20048198
 8008150:	20048194 	.word	0x20048194
 8008154:	200481a0 	.word	0x200481a0
 8008158:	2004819c 	.word	0x2004819c
 800815c:	200481a8 	.word	0x200481a8
 8008160:	200481a4 	.word	0x200481a4
 8008164:	200481b0 	.word	0x200481b0
 8008168:	200481ac 	.word	0x200481ac
 800816c:	20000564 	.word	0x20000564
 8008170:	2000056c 	.word	0x2000056c
 8008174:	461c4000 	.word	0x461c4000
 8008178:	08019e70 	.word	0x08019e70
 800817c:	447a0000 	.word	0x447a0000
 8008180:	47c35000 	.word	0x47c35000
 8008184:	08019e7c 	.word	0x08019e7c
 8008188:	20000560 	.word	0x20000560
 800818c:	20048130 	.word	0x20048130
		else if(joy_stick.getValue() == JOY_R){
 8008190:	48bd      	ldr	r0, [pc, #756]	; (8008488 <cppLoop+0x940>)
 8008192:	f7f9 ff2b 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008196:	4603      	mov	r3, r0
 8008198:	2b10      	cmp	r3, #16
 800819a:	bf0c      	ite	eq
 800819c:	2301      	moveq	r3, #1
 800819e:	2300      	movne	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d059      	beq.n	800825a <cppLoop+0x712>
			led.LR(-1, 1);
 80081a6:	2201      	movs	r2, #1
 80081a8:	f04f 31ff 	mov.w	r1, #4294967295
 80081ac:	48b7      	ldr	r0, [pc, #732]	; (800848c <cppLoop+0x944>)
 80081ae:	f7fa f83d 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081b2:	2064      	movs	r0, #100	; 0x64
 80081b4:	f001 fde8 	bl	8009d88 <HAL_Delay>
			if(selector == 0){
 80081b8:	4bb5      	ldr	r3, [pc, #724]	; (8008490 <cppLoop+0x948>)
 80081ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d113      	bne.n	80081ea <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.000001;
 80081c2:	4bb4      	ldr	r3, [pc, #720]	; (8008494 <cppLoop+0x94c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 f9d6 	bl	8000578 <__aeabi_f2d>
 80081cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008470 <cppLoop+0x928>)
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	f7f8 f873 	bl	80002bc <__adddf3>
 80081d6:	4603      	mov	r3, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	4618      	mov	r0, r3
 80081dc:	4621      	mov	r1, r4
 80081de:	f7f8 fd1b 	bl	8000c18 <__aeabi_d2f>
 80081e2:	4602      	mov	r2, r0
 80081e4:	4bab      	ldr	r3, [pc, #684]	; (8008494 <cppLoop+0x94c>)
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e02b      	b.n	8008242 <cppLoop+0x6fa>
			else if(selector == 1){
 80081ea:	4ba9      	ldr	r3, [pc, #676]	; (8008490 <cppLoop+0x948>)
 80081ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d113      	bne.n	800821c <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.00001;
 80081f4:	4ba8      	ldr	r3, [pc, #672]	; (8008498 <cppLoop+0x950>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7f8 f9bd 	bl	8000578 <__aeabi_f2d>
 80081fe:	a39e      	add	r3, pc, #632	; (adr r3, 8008478 <cppLoop+0x930>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f7f8 f85a 	bl	80002bc <__adddf3>
 8008208:	4603      	mov	r3, r0
 800820a:	460c      	mov	r4, r1
 800820c:	4618      	mov	r0, r3
 800820e:	4621      	mov	r1, r4
 8008210:	f7f8 fd02 	bl	8000c18 <__aeabi_d2f>
 8008214:	4602      	mov	r2, r0
 8008216:	4ba0      	ldr	r3, [pc, #640]	; (8008498 <cppLoop+0x950>)
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	e012      	b.n	8008242 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.0000001;
 800821c:	4b9f      	ldr	r3, [pc, #636]	; (800849c <cppLoop+0x954>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f7f8 f9a9 	bl	8000578 <__aeabi_f2d>
 8008226:	a396      	add	r3, pc, #600	; (adr r3, 8008480 <cppLoop+0x938>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f8 f846 	bl	80002bc <__adddf3>
 8008230:	4603      	mov	r3, r0
 8008232:	460c      	mov	r4, r1
 8008234:	4618      	mov	r0, r3
 8008236:	4621      	mov	r1, r4
 8008238:	f7f8 fcee 	bl	8000c18 <__aeabi_d2f>
 800823c:	4602      	mov	r2, r0
 800823e:	4b97      	ldr	r3, [pc, #604]	; (800849c <cppLoop+0x954>)
 8008240:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008242:	2152      	movs	r1, #82	; 0x52
 8008244:	4891      	ldr	r0, [pc, #580]	; (800848c <cppLoop+0x944>)
 8008246:	f7f9 ff35 	bl	80020b4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800824a:	2200      	movs	r2, #0
 800824c:	f04f 31ff 	mov.w	r1, #4294967295
 8008250:	488e      	ldr	r0, [pc, #568]	; (800848c <cppLoop+0x944>)
 8008252:	f7f9 ffeb 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008256:	f001 bc4f 	b.w	8009af8 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_L){
 800825a:	488b      	ldr	r0, [pc, #556]	; (8008488 <cppLoop+0x940>)
 800825c:	f7f9 fec6 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008260:	4603      	mov	r3, r0
 8008262:	2b01      	cmp	r3, #1
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d059      	beq.n	8008324 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008270:	2201      	movs	r2, #1
 8008272:	f04f 31ff 	mov.w	r1, #4294967295
 8008276:	4885      	ldr	r0, [pc, #532]	; (800848c <cppLoop+0x944>)
 8008278:	f7f9 ffd8 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800827c:	2064      	movs	r0, #100	; 0x64
 800827e:	f001 fd83 	bl	8009d88 <HAL_Delay>
			if(selector == 0){
 8008282:	4b83      	ldr	r3, [pc, #524]	; (8008490 <cppLoop+0x948>)
 8008284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d113      	bne.n	80082b4 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 800828c:	4b81      	ldr	r3, [pc, #516]	; (8008494 <cppLoop+0x94c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4618      	mov	r0, r3
 8008292:	f7f8 f971 	bl	8000578 <__aeabi_f2d>
 8008296:	a376      	add	r3, pc, #472	; (adr r3, 8008470 <cppLoop+0x928>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f7f8 f80c 	bl	80002b8 <__aeabi_dsub>
 80082a0:	4603      	mov	r3, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	4618      	mov	r0, r3
 80082a6:	4621      	mov	r1, r4
 80082a8:	f7f8 fcb6 	bl	8000c18 <__aeabi_d2f>
 80082ac:	4602      	mov	r2, r0
 80082ae:	4b79      	ldr	r3, [pc, #484]	; (8008494 <cppLoop+0x94c>)
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	e02b      	b.n	800830c <cppLoop+0x7c4>
			else if(selector == 1){
 80082b4:	4b76      	ldr	r3, [pc, #472]	; (8008490 <cppLoop+0x948>)
 80082b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d113      	bne.n	80082e6 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 80082be:	4b76      	ldr	r3, [pc, #472]	; (8008498 <cppLoop+0x950>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f8 f958 	bl	8000578 <__aeabi_f2d>
 80082c8:	a36b      	add	r3, pc, #428	; (adr r3, 8008478 <cppLoop+0x930>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f7f7 fff3 	bl	80002b8 <__aeabi_dsub>
 80082d2:	4603      	mov	r3, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	4618      	mov	r0, r3
 80082d8:	4621      	mov	r1, r4
 80082da:	f7f8 fc9d 	bl	8000c18 <__aeabi_d2f>
 80082de:	4602      	mov	r2, r0
 80082e0:	4b6d      	ldr	r3, [pc, #436]	; (8008498 <cppLoop+0x950>)
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e012      	b.n	800830c <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.0000001;
 80082e6:	4b6d      	ldr	r3, [pc, #436]	; (800849c <cppLoop+0x954>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7f8 f944 	bl	8000578 <__aeabi_f2d>
 80082f0:	a363      	add	r3, pc, #396	; (adr r3, 8008480 <cppLoop+0x938>)
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f7 ffdf 	bl	80002b8 <__aeabi_dsub>
 80082fa:	4603      	mov	r3, r0
 80082fc:	460c      	mov	r4, r1
 80082fe:	4618      	mov	r0, r3
 8008300:	4621      	mov	r1, r4
 8008302:	f7f8 fc89 	bl	8000c18 <__aeabi_d2f>
 8008306:	4602      	mov	r2, r0
 8008308:	4b64      	ldr	r3, [pc, #400]	; (800849c <cppLoop+0x954>)
 800830a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800830c:	2152      	movs	r1, #82	; 0x52
 800830e:	485f      	ldr	r0, [pc, #380]	; (800848c <cppLoop+0x944>)
 8008310:	f7f9 fed0 	bl	80020b4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008314:	2200      	movs	r2, #0
 8008316:	f04f 31ff 	mov.w	r1, #4294967295
 800831a:	485c      	ldr	r0, [pc, #368]	; (800848c <cppLoop+0x944>)
 800831c:	f7f9 ff86 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008320:	f001 bbea 	b.w	8009af8 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_C){
 8008324:	4858      	ldr	r0, [pc, #352]	; (8008488 <cppLoop+0x940>)
 8008326:	f7f9 fe61 	bl	8001fec <_ZN8JoyStick8getValueEv>
 800832a:	4603      	mov	r3, r0
 800832c:	2b02      	cmp	r3, #2
 800832e:	bf0c      	ite	eq
 8008330:	2301      	moveq	r3, #1
 8008332:	2300      	movne	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	f001 83de 	beq.w	8009af8 <cppLoop+0x1fb0>
			led.LR(-1, 1);
 800833c:	2201      	movs	r2, #1
 800833e:	f04f 31ff 	mov.w	r1, #4294967295
 8008342:	4852      	ldr	r0, [pc, #328]	; (800848c <cppLoop+0x944>)
 8008344:	f7f9 ff72 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008348:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800834c:	f001 fd1c 	bl	8009d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008350:	2300      	movs	r3, #0
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	4b4f      	ldr	r3, [pc, #316]	; (8008494 <cppLoop+0x94c>)
 8008356:	2201      	movs	r2, #1
 8008358:	4951      	ldr	r1, [pc, #324]	; (80084a0 <cppLoop+0x958>)
 800835a:	4852      	ldr	r0, [pc, #328]	; (80084a4 <cppLoop+0x95c>)
 800835c:	f7f9 fa30 	bl	80017c0 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008360:	2300      	movs	r3, #0
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	4b4c      	ldr	r3, [pc, #304]	; (8008498 <cppLoop+0x950>)
 8008366:	2201      	movs	r2, #1
 8008368:	494f      	ldr	r1, [pc, #316]	; (80084a8 <cppLoop+0x960>)
 800836a:	484e      	ldr	r0, [pc, #312]	; (80084a4 <cppLoop+0x95c>)
 800836c:	f7f9 fa28 	bl	80017c0 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	4b49      	ldr	r3, [pc, #292]	; (800849c <cppLoop+0x954>)
 8008376:	2201      	movs	r2, #1
 8008378:	494c      	ldr	r1, [pc, #304]	; (80084ac <cppLoop+0x964>)
 800837a:	484a      	ldr	r0, [pc, #296]	; (80084a4 <cppLoop+0x95c>)
 800837c:	f7f9 fa20 	bl	80017c0 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008380:	4b44      	ldr	r3, [pc, #272]	; (8008494 <cppLoop+0x94c>)
 8008382:	edd3 7a00 	vldr	s15, [r3]
 8008386:	4b44      	ldr	r3, [pc, #272]	; (8008498 <cppLoop+0x950>)
 8008388:	ed93 7a00 	vldr	s14, [r3]
 800838c:	4b43      	ldr	r3, [pc, #268]	; (800849c <cppLoop+0x954>)
 800838e:	edd3 6a00 	vldr	s13, [r3]
 8008392:	eeb0 1a66 	vmov.f32	s2, s13
 8008396:	eef0 0a47 	vmov.f32	s1, s14
 800839a:	eeb0 0a67 	vmov.f32	s0, s15
 800839e:	4844      	ldr	r0, [pc, #272]	; (80084b0 <cppLoop+0x968>)
 80083a0:	f7fb fc16 	bl	8003bd0 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 80083a4:	2200      	movs	r2, #0
 80083a6:	f04f 31ff 	mov.w	r1, #4294967295
 80083aa:	4838      	ldr	r0, [pc, #224]	; (800848c <cppLoop+0x944>)
 80083ac:	f7f9 ff3e 	bl	800222c <_ZN3LED2LREaa>
		break;
 80083b0:	f001 bba2 	b.w	8009af8 <cppLoop+0x1fb0>

	case 1:
		led.fullColor('C');
 80083b4:	2143      	movs	r1, #67	; 0x43
 80083b6:	4835      	ldr	r0, [pc, #212]	; (800848c <cppLoop+0x944>)
 80083b8:	f7f9 fe7c 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80083bc:	f7f8 fe70 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083c0:	2100      	movs	r1, #0
 80083c2:	2000      	movs	r0, #0
 80083c4:	f7f8 fe7c 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80083c8:	483a      	ldr	r0, [pc, #232]	; (80084b4 <cppLoop+0x96c>)
 80083ca:	f7f8 fea3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80083ce:	2101      	movs	r1, #1
 80083d0:	2000      	movs	r0, #0
 80083d2:	f7f8 fe75 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80083d6:	4b38      	ldr	r3, [pc, #224]	; (80084b8 <cppLoop+0x970>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7f8 f8cc 	bl	8000578 <__aeabi_f2d>
 80083e0:	4603      	mov	r3, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	461a      	mov	r2, r3
 80083e6:	4623      	mov	r3, r4
 80083e8:	4834      	ldr	r0, [pc, #208]	; (80084bc <cppLoop+0x974>)
 80083ea:	f7f8 fe93 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80083ee:	4826      	ldr	r0, [pc, #152]	; (8008488 <cppLoop+0x940>)
 80083f0:	f7f9 fdfc 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	bf0c      	ite	eq
 80083fa:	2301      	moveq	r3, #1
 80083fc:	2300      	movne	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	f001 837b 	beq.w	8009afc <cppLoop+0x1fb4>
			HAL_Delay(500);
 8008406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800840a:	f001 fcbd 	bl	8009d88 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800840e:	4b2a      	ldr	r3, [pc, #168]	; (80084b8 <cppLoop+0x970>)
 8008410:	edd3 7a00 	vldr	s15, [r3]
 8008414:	eeb0 0a67 	vmov.f32	s0, s15
 8008418:	4825      	ldr	r0, [pc, #148]	; (80084b0 <cppLoop+0x968>)
 800841a:	f7fb fc2e 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800841e:	f04f 32ff 	mov.w	r2, #4294967295
 8008422:	2101      	movs	r1, #1
 8008424:	4819      	ldr	r0, [pc, #100]	; (800848c <cppLoop+0x944>)
 8008426:	f7f9 ff01 	bl	800222c <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 800842a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800842e:	f001 fcab 	bl	8009d88 <HAL_Delay>
			//logger.start();

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008432:	2100      	movs	r1, #0
 8008434:	481e      	ldr	r0, [pc, #120]	; (80084b0 <cppLoop+0x968>)
 8008436:	f7fb fe6f 	bl	8004118 <_ZN9LineTrace7setModeEs>

			logger.start();
 800843a:	4821      	ldr	r0, [pc, #132]	; (80084c0 <cppLoop+0x978>)
 800843c:	f7fc fc18 	bl	8004c70 <_ZN6Logger5startEv>

			line_trace.running();
 8008440:	481b      	ldr	r0, [pc, #108]	; (80084b0 <cppLoop+0x968>)
 8008442:	f7fb fead 	bl	80041a0 <_ZN9LineTrace7runningEv>

			logger.stop();
 8008446:	481e      	ldr	r0, [pc, #120]	; (80084c0 <cppLoop+0x978>)
 8008448:	f7fc fc31 	bl	8004cae <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800844c:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <cppLoop+0x97c>)
 800844e:	491e      	ldr	r1, [pc, #120]	; (80084c8 <cppLoop+0x980>)
 8008450:	481b      	ldr	r0, [pc, #108]	; (80084c0 <cppLoop+0x978>)
 8008452:	f7fc fb08 	bl	8004a66 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008456:	4a1d      	ldr	r2, [pc, #116]	; (80084cc <cppLoop+0x984>)
 8008458:	491b      	ldr	r1, [pc, #108]	; (80084c8 <cppLoop+0x980>)
 800845a:	4819      	ldr	r0, [pc, #100]	; (80084c0 <cppLoop+0x978>)
 800845c:	f7fc fb17 	bl	8004a8e <_ZN6Logger9saveLogs2EPKcS1_>
			// Record stop and save
			//logger.stop();
			//logger.saveLogsInt("STATELOG", "LPERIOD.txt");
			//logger.saveLogs2Int("STATELOG", "RPERIOD.txt");

			led.LR(0, -1);
 8008460:	f04f 32ff 	mov.w	r2, #4294967295
 8008464:	2100      	movs	r1, #0
 8008466:	4809      	ldr	r0, [pc, #36]	; (800848c <cppLoop+0x944>)
 8008468:	f7f9 fee0 	bl	800222c <_ZN3LED2LREaa>
		}

		break;
 800846c:	f001 bb46 	b.w	8009afc <cppLoop+0x1fb4>
 8008470:	a0b5ed8d 	.word	0xa0b5ed8d
 8008474:	3eb0c6f7 	.word	0x3eb0c6f7
 8008478:	88e368f1 	.word	0x88e368f1
 800847c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008480:	9abcaf48 	.word	0x9abcaf48
 8008484:	3e7ad7f2 	.word	0x3e7ad7f2
 8008488:	20000560 	.word	0x20000560
 800848c:	2000056c 	.word	0x2000056c
 8008490:	20048130 	.word	0x20048130
 8008494:	20048154 	.word	0x20048154
 8008498:	2004815c 	.word	0x2004815c
 800849c:	20048164 	.word	0x20048164
 80084a0:	08019e8c 	.word	0x08019e8c
 80084a4:	08019e98 	.word	0x08019e98
 80084a8:	08019ea0 	.word	0x08019ea0
 80084ac:	08019eac 	.word	0x08019eac
 80084b0:	200238bc 	.word	0x200238bc
 80084b4:	08019eb8 	.word	0x08019eb8
 80084b8:	2004816c 	.word	0x2004816c
 80084bc:	08019ec4 	.word	0x08019ec4
 80084c0:	20000590 	.word	0x20000590
 80084c4:	08019ed0 	.word	0x08019ed0
 80084c8:	08019edc 	.word	0x08019edc
 80084cc:	08019ee8 	.word	0x08019ee8

	case 2:
		led.fullColor('B');
 80084d0:	2142      	movs	r1, #66	; 0x42
 80084d2:	48c1      	ldr	r0, [pc, #772]	; (80087d8 <cppLoop+0xc90>)
 80084d4:	f7f9 fdee 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084d8:	f7f8 fde2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084dc:	2100      	movs	r1, #0
 80084de:	2000      	movs	r0, #0
 80084e0:	f7f8 fdee 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80084e4:	48bd      	ldr	r0, [pc, #756]	; (80087dc <cppLoop+0xc94>)
 80084e6:	f7f8 fe15 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084ea:	2101      	movs	r1, #1
 80084ec:	2000      	movs	r0, #0
 80084ee:	f7f8 fde7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80084f2:	4bbb      	ldr	r3, [pc, #748]	; (80087e0 <cppLoop+0xc98>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7f8 f83e 	bl	8000578 <__aeabi_f2d>
 80084fc:	4603      	mov	r3, r0
 80084fe:	460c      	mov	r4, r1
 8008500:	461a      	mov	r2, r3
 8008502:	4623      	mov	r3, r4
 8008504:	48b7      	ldr	r0, [pc, #732]	; (80087e4 <cppLoop+0xc9c>)
 8008506:	f7f8 fe05 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800850a:	48b7      	ldr	r0, [pc, #732]	; (80087e8 <cppLoop+0xca0>)
 800850c:	f7f9 fd6e 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008510:	4603      	mov	r3, r0
 8008512:	2b10      	cmp	r3, #16
 8008514:	bf0c      	ite	eq
 8008516:	2301      	moveq	r3, #1
 8008518:	2300      	movne	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d023      	beq.n	8008568 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008520:	2201      	movs	r2, #1
 8008522:	f04f 31ff 	mov.w	r1, #4294967295
 8008526:	48ac      	ldr	r0, [pc, #688]	; (80087d8 <cppLoop+0xc90>)
 8008528:	f7f9 fe80 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800852c:	2064      	movs	r0, #100	; 0x64
 800852e:	f001 fc2b 	bl	8009d88 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008532:	4bab      	ldr	r3, [pc, #684]	; (80087e0 <cppLoop+0xc98>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f7f8 f81e 	bl	8000578 <__aeabi_f2d>
 800853c:	a3a4      	add	r3, pc, #656	; (adr r3, 80087d0 <cppLoop+0xc88>)
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f7f7 febb 	bl	80002bc <__adddf3>
 8008546:	4603      	mov	r3, r0
 8008548:	460c      	mov	r4, r1
 800854a:	4618      	mov	r0, r3
 800854c:	4621      	mov	r1, r4
 800854e:	f7f8 fb63 	bl	8000c18 <__aeabi_d2f>
 8008552:	4602      	mov	r2, r0
 8008554:	4ba2      	ldr	r3, [pc, #648]	; (80087e0 <cppLoop+0xc98>)
 8008556:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008558:	2200      	movs	r2, #0
 800855a:	f04f 31ff 	mov.w	r1, #4294967295
 800855e:	489e      	ldr	r0, [pc, #632]	; (80087d8 <cppLoop+0xc90>)
 8008560:	f7f9 fe64 	bl	800222c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008564:	f001 bacc 	b.w	8009b00 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_L){
 8008568:	489f      	ldr	r0, [pc, #636]	; (80087e8 <cppLoop+0xca0>)
 800856a:	f7f9 fd3f 	bl	8001fec <_ZN8JoyStick8getValueEv>
 800856e:	4603      	mov	r3, r0
 8008570:	2b01      	cmp	r3, #1
 8008572:	bf0c      	ite	eq
 8008574:	2301      	moveq	r3, #1
 8008576:	2300      	movne	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d023      	beq.n	80085c6 <cppLoop+0xa7e>
			led.LR(-1, 1);
 800857e:	2201      	movs	r2, #1
 8008580:	f04f 31ff 	mov.w	r1, #4294967295
 8008584:	4894      	ldr	r0, [pc, #592]	; (80087d8 <cppLoop+0xc90>)
 8008586:	f7f9 fe51 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800858a:	2064      	movs	r0, #100	; 0x64
 800858c:	f001 fbfc 	bl	8009d88 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008590:	4b93      	ldr	r3, [pc, #588]	; (80087e0 <cppLoop+0xc98>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7f7 ffef 	bl	8000578 <__aeabi_f2d>
 800859a:	a38d      	add	r3, pc, #564	; (adr r3, 80087d0 <cppLoop+0xc88>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f7f7 fe8a 	bl	80002b8 <__aeabi_dsub>
 80085a4:	4603      	mov	r3, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	4618      	mov	r0, r3
 80085aa:	4621      	mov	r1, r4
 80085ac:	f7f8 fb34 	bl	8000c18 <__aeabi_d2f>
 80085b0:	4602      	mov	r2, r0
 80085b2:	4b8b      	ldr	r3, [pc, #556]	; (80087e0 <cppLoop+0xc98>)
 80085b4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80085b6:	2200      	movs	r2, #0
 80085b8:	f04f 31ff 	mov.w	r1, #4294967295
 80085bc:	4886      	ldr	r0, [pc, #536]	; (80087d8 <cppLoop+0xc90>)
 80085be:	f7f9 fe35 	bl	800222c <_ZN3LED2LREaa>
		break;
 80085c2:	f001 ba9d 	b.w	8009b00 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_C){
 80085c6:	4888      	ldr	r0, [pc, #544]	; (80087e8 <cppLoop+0xca0>)
 80085c8:	f7f9 fd10 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	bf0c      	ite	eq
 80085d2:	2301      	moveq	r3, #1
 80085d4:	2300      	movne	r3, #0
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f001 8291 	beq.w	8009b00 <cppLoop+0x1fb8>
			led.LR(-1, 1);
 80085de:	2201      	movs	r2, #1
 80085e0:	f04f 31ff 	mov.w	r1, #4294967295
 80085e4:	487c      	ldr	r0, [pc, #496]	; (80087d8 <cppLoop+0xc90>)
 80085e6:	f7f9 fe21 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085ee:	f001 fbcb 	bl	8009d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80085f2:	2300      	movs	r3, #0
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	4b7a      	ldr	r3, [pc, #488]	; (80087e0 <cppLoop+0xc98>)
 80085f8:	2201      	movs	r2, #1
 80085fa:	497c      	ldr	r1, [pc, #496]	; (80087ec <cppLoop+0xca4>)
 80085fc:	487c      	ldr	r0, [pc, #496]	; (80087f0 <cppLoop+0xca8>)
 80085fe:	f7f9 f8df 	bl	80017c0 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008602:	4b77      	ldr	r3, [pc, #476]	; (80087e0 <cppLoop+0xc98>)
 8008604:	edd3 7a00 	vldr	s15, [r3]
 8008608:	eeb0 0a67 	vmov.f32	s0, s15
 800860c:	4879      	ldr	r0, [pc, #484]	; (80087f4 <cppLoop+0xcac>)
 800860e:	f7fb fb34 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008612:	2200      	movs	r2, #0
 8008614:	f04f 31ff 	mov.w	r1, #4294967295
 8008618:	486f      	ldr	r0, [pc, #444]	; (80087d8 <cppLoop+0xc90>)
 800861a:	f7f9 fe07 	bl	800222c <_ZN3LED2LREaa>
		break;
 800861e:	f001 ba6f 	b.w	8009b00 <cppLoop+0x1fb8>

	case 3:
		led.fullColor('Y');
 8008622:	2159      	movs	r1, #89	; 0x59
 8008624:	486c      	ldr	r0, [pc, #432]	; (80087d8 <cppLoop+0xc90>)
 8008626:	f7f9 fd45 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800862a:	f7f8 fd39 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800862e:	2100      	movs	r1, #0
 8008630:	2000      	movs	r0, #0
 8008632:	f7f8 fd45 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008636:	4b70      	ldr	r3, [pc, #448]	; (80087f8 <cppLoop+0xcb0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f7f7 ff9c 	bl	8000578 <__aeabi_f2d>
 8008640:	4603      	mov	r3, r0
 8008642:	460c      	mov	r4, r1
 8008644:	461a      	mov	r2, r3
 8008646:	4623      	mov	r3, r4
 8008648:	486c      	ldr	r0, [pc, #432]	; (80087fc <cppLoop+0xcb4>)
 800864a:	f7f8 fd63 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800864e:	2101      	movs	r1, #1
 8008650:	2000      	movs	r0, #0
 8008652:	f7f8 fd35 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008656:	4b6a      	ldr	r3, [pc, #424]	; (8008800 <cppLoop+0xcb8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f7f7 ff8c 	bl	8000578 <__aeabi_f2d>
 8008660:	4603      	mov	r3, r0
 8008662:	460c      	mov	r4, r1
 8008664:	461a      	mov	r2, r3
 8008666:	4623      	mov	r3, r4
 8008668:	4866      	ldr	r0, [pc, #408]	; (8008804 <cppLoop+0xcbc>)
 800866a:	f7f8 fd53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800866e:	485e      	ldr	r0, [pc, #376]	; (80087e8 <cppLoop+0xca0>)
 8008670:	f7f9 fcbc 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008674:	4603      	mov	r3, r0
 8008676:	2b02      	cmp	r3, #2
 8008678:	bf0c      	ite	eq
 800867a:	2301      	moveq	r3, #1
 800867c:	2300      	movne	r3, #0
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	f001 823f 	beq.w	8009b04 <cppLoop+0x1fbc>
			HAL_Delay(500);
 8008686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800868a:	f001 fb7d 	bl	8009d88 <HAL_Delay>

			led.LR(1, -1);
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	2101      	movs	r1, #1
 8008694:	4850      	ldr	r0, [pc, #320]	; (80087d8 <cppLoop+0xc90>)
 8008696:	f7f9 fdc9 	bl	800222c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800869a:	2101      	movs	r1, #1
 800869c:	4855      	ldr	r0, [pc, #340]	; (80087f4 <cppLoop+0xcac>)
 800869e:	f7fb fd3b 	bl	8004118 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80086a2:	4b57      	ldr	r3, [pc, #348]	; (8008800 <cppLoop+0xcb8>)
 80086a4:	edd3 7a00 	vldr	s15, [r3]
 80086a8:	eeb0 0a67 	vmov.f32	s0, s15
 80086ac:	4851      	ldr	r0, [pc, #324]	; (80087f4 <cppLoop+0xcac>)
 80086ae:	f7fb fae4 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80086b2:	4b51      	ldr	r3, [pc, #324]	; (80087f8 <cppLoop+0xcb0>)
 80086b4:	edd3 7a00 	vldr	s15, [r3]
 80086b8:	eeb0 0a67 	vmov.f32	s0, s15
 80086bc:	484d      	ldr	r0, [pc, #308]	; (80087f4 <cppLoop+0xcac>)
 80086be:	f7fb faec 	bl	8003c9a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80086c2:	4b4f      	ldr	r3, [pc, #316]	; (8008800 <cppLoop+0xcb8>)
 80086c4:	edd3 7a00 	vldr	s15, [r3]
 80086c8:	eeb0 0a67 	vmov.f32	s0, s15
 80086cc:	4849      	ldr	r0, [pc, #292]	; (80087f4 <cppLoop+0xcac>)
 80086ce:	f7fb fb04 	bl	8003cda <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80086d2:	4848      	ldr	r0, [pc, #288]	; (80087f4 <cppLoop+0xcac>)
 80086d4:	f7fb fe60 	bl	8004398 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(1000);
 80086d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086dc:	f001 fb54 	bl	8009d88 <HAL_Delay>

			logger.start();
 80086e0:	4849      	ldr	r0, [pc, #292]	; (8008808 <cppLoop+0xcc0>)
 80086e2:	f7fc fac5 	bl	8004c70 <_ZN6Logger5startEv>

			line_trace.running();
 80086e6:	4843      	ldr	r0, [pc, #268]	; (80087f4 <cppLoop+0xcac>)
 80086e8:	f7fb fd5a 	bl	80041a0 <_ZN9LineTrace7runningEv>

			logger.stop();
 80086ec:	4846      	ldr	r0, [pc, #280]	; (8008808 <cppLoop+0xcc0>)
 80086ee:	f7fc fade 	bl	8004cae <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 80086f2:	4a46      	ldr	r2, [pc, #280]	; (800880c <cppLoop+0xcc4>)
 80086f4:	4946      	ldr	r1, [pc, #280]	; (8008810 <cppLoop+0xcc8>)
 80086f6:	4844      	ldr	r0, [pc, #272]	; (8008808 <cppLoop+0xcc0>)
 80086f8:	f7fc f9b5 	bl	8004a66 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 80086fc:	4a45      	ldr	r2, [pc, #276]	; (8008814 <cppLoop+0xccc>)
 80086fe:	4944      	ldr	r1, [pc, #272]	; (8008810 <cppLoop+0xcc8>)
 8008700:	4841      	ldr	r0, [pc, #260]	; (8008808 <cppLoop+0xcc0>)
 8008702:	f7fc f9c4 	bl	8004a8e <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8008706:	f04f 32ff 	mov.w	r2, #4294967295
 800870a:	2100      	movs	r1, #0
 800870c:	4832      	ldr	r0, [pc, #200]	; (80087d8 <cppLoop+0xc90>)
 800870e:	f7f9 fd8d 	bl	800222c <_ZN3LED2LREaa>
		}

		break;
 8008712:	f001 b9f7 	b.w	8009b04 <cppLoop+0x1fbc>

	case 4:
		led.fullColor('G');
 8008716:	2147      	movs	r1, #71	; 0x47
 8008718:	482f      	ldr	r0, [pc, #188]	; (80087d8 <cppLoop+0xc90>)
 800871a:	f7f9 fccb 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800871e:	f7f8 fcbf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008722:	2100      	movs	r1, #0
 8008724:	2000      	movs	r0, #0
 8008726:	f7f8 fccb 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800872a:	4832      	ldr	r0, [pc, #200]	; (80087f4 <cppLoop+0xcac>)
 800872c:	f7fb fb05 	bl	8003d3a <_ZN9LineTrace14getMaxVelocityEv>
 8008730:	ee10 3a10 	vmov	r3, s0
 8008734:	4618      	mov	r0, r3
 8008736:	f7f7 ff1f 	bl	8000578 <__aeabi_f2d>
 800873a:	4603      	mov	r3, r0
 800873c:	460c      	mov	r4, r1
 800873e:	461a      	mov	r2, r3
 8008740:	4623      	mov	r3, r4
 8008742:	482e      	ldr	r0, [pc, #184]	; (80087fc <cppLoop+0xcb4>)
 8008744:	f7f8 fce6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008748:	2101      	movs	r1, #1
 800874a:	2000      	movs	r0, #0
 800874c:	f7f8 fcb8 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008750:	4828      	ldr	r0, [pc, #160]	; (80087f4 <cppLoop+0xcac>)
 8008752:	f7fb fb12 	bl	8003d7a <_ZN9LineTrace14getMinVelocityEv>
 8008756:	ee10 3a10 	vmov	r3, s0
 800875a:	4618      	mov	r0, r3
 800875c:	f7f7 ff0c 	bl	8000578 <__aeabi_f2d>
 8008760:	4603      	mov	r3, r0
 8008762:	460c      	mov	r4, r1
 8008764:	461a      	mov	r2, r3
 8008766:	4623      	mov	r3, r4
 8008768:	481e      	ldr	r0, [pc, #120]	; (80087e4 <cppLoop+0xc9c>)
 800876a:	f7f8 fcd3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800876e:	481e      	ldr	r0, [pc, #120]	; (80087e8 <cppLoop+0xca0>)
 8008770:	f7f9 fc3c 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008774:	4603      	mov	r3, r0
 8008776:	2b08      	cmp	r3, #8
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d04b      	beq.n	800881c <cppLoop+0xcd4>
			led.LR(-1, 1);
 8008784:	2201      	movs	r2, #1
 8008786:	f04f 31ff 	mov.w	r1, #4294967295
 800878a:	4813      	ldr	r0, [pc, #76]	; (80087d8 <cppLoop+0xc90>)
 800878c:	f7f9 fd4e 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008790:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008794:	f001 faf8 	bl	8009d88 <HAL_Delay>

			selector_vel++;
 8008798:	4b1f      	ldr	r3, [pc, #124]	; (8008818 <cppLoop+0xcd0>)
 800879a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	3301      	adds	r3, #1
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	b21a      	sxth	r2, r3
 80087a6:	4b1c      	ldr	r3, [pc, #112]	; (8008818 <cppLoop+0xcd0>)
 80087a8:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <cppLoop+0xcd0>)
 80087ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	dd02      	ble.n	80087ba <cppLoop+0xc72>
 80087b4:	4b18      	ldr	r3, [pc, #96]	; (8008818 <cppLoop+0xcd0>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80087ba:	2200      	movs	r2, #0
 80087bc:	f04f 31ff 	mov.w	r1, #4294967295
 80087c0:	4805      	ldr	r0, [pc, #20]	; (80087d8 <cppLoop+0xc90>)
 80087c2:	f7f9 fd33 	bl	800222c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80087c6:	f001 b99f 	b.w	8009b08 <cppLoop+0x1fc0>
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w
 80087d0:	9999999a 	.word	0x9999999a
 80087d4:	3fb99999 	.word	0x3fb99999
 80087d8:	2000056c 	.word	0x2000056c
 80087dc:	08019eb8 	.word	0x08019eb8
 80087e0:	2004816c 	.word	0x2004816c
 80087e4:	08019ef4 	.word	0x08019ef4
 80087e8:	20000560 	.word	0x20000560
 80087ec:	08019f00 	.word	0x08019f00
 80087f0:	08019e98 	.word	0x08019e98
 80087f4:	200238bc 	.word	0x200238bc
 80087f8:	20048174 	.word	0x20048174
 80087fc:	08019f0c 	.word	0x08019f0c
 8008800:	20048184 	.word	0x20048184
 8008804:	08019ec4 	.word	0x08019ec4
 8008808:	20000590 	.word	0x20000590
 800880c:	08019ed0 	.word	0x08019ed0
 8008810:	08019edc 	.word	0x08019edc
 8008814:	08019ee8 	.word	0x08019ee8
 8008818:	20048136 	.word	0x20048136
		else if(joy_stick.getValue() == JOY_R){
 800881c:	48ac      	ldr	r0, [pc, #688]	; (8008ad0 <cppLoop+0xf88>)
 800881e:	f7f9 fbe5 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008822:	4603      	mov	r3, r0
 8008824:	2b10      	cmp	r3, #16
 8008826:	bf0c      	ite	eq
 8008828:	2301      	moveq	r3, #1
 800882a:	2300      	movne	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d03c      	beq.n	80088ac <cppLoop+0xd64>
			led.LR(-1, 1);
 8008832:	2201      	movs	r2, #1
 8008834:	f04f 31ff 	mov.w	r1, #4294967295
 8008838:	48a6      	ldr	r0, [pc, #664]	; (8008ad4 <cppLoop+0xf8c>)
 800883a:	f7f9 fcf7 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800883e:	2064      	movs	r0, #100	; 0x64
 8008840:	f001 faa2 	bl	8009d88 <HAL_Delay>
			if(selector_vel == 0)
 8008844:	4ba4      	ldr	r3, [pc, #656]	; (8008ad8 <cppLoop+0xf90>)
 8008846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d113      	bne.n	8008876 <cppLoop+0xd2e>
				adj_max_velocity = adj_max_velocity + 0.1;
 800884e:	4ba3      	ldr	r3, [pc, #652]	; (8008adc <cppLoop+0xf94>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f7f7 fe90 	bl	8000578 <__aeabi_f2d>
 8008858:	a39b      	add	r3, pc, #620	; (adr r3, 8008ac8 <cppLoop+0xf80>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f7 fd2d 	bl	80002bc <__adddf3>
 8008862:	4603      	mov	r3, r0
 8008864:	460c      	mov	r4, r1
 8008866:	4618      	mov	r0, r3
 8008868:	4621      	mov	r1, r4
 800886a:	f7f8 f9d5 	bl	8000c18 <__aeabi_d2f>
 800886e:	4602      	mov	r2, r0
 8008870:	4b9a      	ldr	r3, [pc, #616]	; (8008adc <cppLoop+0xf94>)
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e012      	b.n	800889c <cppLoop+0xd54>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008876:	4b9a      	ldr	r3, [pc, #616]	; (8008ae0 <cppLoop+0xf98>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f7f7 fe7c 	bl	8000578 <__aeabi_f2d>
 8008880:	a391      	add	r3, pc, #580	; (adr r3, 8008ac8 <cppLoop+0xf80>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f7f7 fd19 	bl	80002bc <__adddf3>
 800888a:	4603      	mov	r3, r0
 800888c:	460c      	mov	r4, r1
 800888e:	4618      	mov	r0, r3
 8008890:	4621      	mov	r1, r4
 8008892:	f7f8 f9c1 	bl	8000c18 <__aeabi_d2f>
 8008896:	4602      	mov	r2, r0
 8008898:	4b91      	ldr	r3, [pc, #580]	; (8008ae0 <cppLoop+0xf98>)
 800889a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800889c:	2200      	movs	r2, #0
 800889e:	f04f 31ff 	mov.w	r1, #4294967295
 80088a2:	488c      	ldr	r0, [pc, #560]	; (8008ad4 <cppLoop+0xf8c>)
 80088a4:	f7f9 fcc2 	bl	800222c <_ZN3LED2LREaa>
		break;
 80088a8:	f001 b92e 	b.w	8009b08 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_L){
 80088ac:	4888      	ldr	r0, [pc, #544]	; (8008ad0 <cppLoop+0xf88>)
 80088ae:	f7f9 fb9d 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	bf0c      	ite	eq
 80088b8:	2301      	moveq	r3, #1
 80088ba:	2300      	movne	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d03c      	beq.n	800893c <cppLoop+0xdf4>
			led.LR(-1, 1);
 80088c2:	2201      	movs	r2, #1
 80088c4:	f04f 31ff 	mov.w	r1, #4294967295
 80088c8:	4882      	ldr	r0, [pc, #520]	; (8008ad4 <cppLoop+0xf8c>)
 80088ca:	f7f9 fcaf 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80088ce:	2064      	movs	r0, #100	; 0x64
 80088d0:	f001 fa5a 	bl	8009d88 <HAL_Delay>
			if(selector_vel == 0)
 80088d4:	4b80      	ldr	r3, [pc, #512]	; (8008ad8 <cppLoop+0xf90>)
 80088d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d113      	bne.n	8008906 <cppLoop+0xdbe>
				adj_max_velocity = adj_max_velocity - 0.1;
 80088de:	4b7f      	ldr	r3, [pc, #508]	; (8008adc <cppLoop+0xf94>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7f7 fe48 	bl	8000578 <__aeabi_f2d>
 80088e8:	a377      	add	r3, pc, #476	; (adr r3, 8008ac8 <cppLoop+0xf80>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f7f7 fce3 	bl	80002b8 <__aeabi_dsub>
 80088f2:	4603      	mov	r3, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	4618      	mov	r0, r3
 80088f8:	4621      	mov	r1, r4
 80088fa:	f7f8 f98d 	bl	8000c18 <__aeabi_d2f>
 80088fe:	4602      	mov	r2, r0
 8008900:	4b76      	ldr	r3, [pc, #472]	; (8008adc <cppLoop+0xf94>)
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e012      	b.n	800892c <cppLoop+0xde4>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008906:	4b76      	ldr	r3, [pc, #472]	; (8008ae0 <cppLoop+0xf98>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f7f7 fe34 	bl	8000578 <__aeabi_f2d>
 8008910:	a36d      	add	r3, pc, #436	; (adr r3, 8008ac8 <cppLoop+0xf80>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fccf 	bl	80002b8 <__aeabi_dsub>
 800891a:	4603      	mov	r3, r0
 800891c:	460c      	mov	r4, r1
 800891e:	4618      	mov	r0, r3
 8008920:	4621      	mov	r1, r4
 8008922:	f7f8 f979 	bl	8000c18 <__aeabi_d2f>
 8008926:	4602      	mov	r2, r0
 8008928:	4b6d      	ldr	r3, [pc, #436]	; (8008ae0 <cppLoop+0xf98>)
 800892a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800892c:	2200      	movs	r2, #0
 800892e:	f04f 31ff 	mov.w	r1, #4294967295
 8008932:	4868      	ldr	r0, [pc, #416]	; (8008ad4 <cppLoop+0xf8c>)
 8008934:	f7f9 fc7a 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008938:	f001 b8e6 	b.w	8009b08 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_C){
 800893c:	4864      	ldr	r0, [pc, #400]	; (8008ad0 <cppLoop+0xf88>)
 800893e:	f7f9 fb55 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008942:	4603      	mov	r3, r0
 8008944:	2b02      	cmp	r3, #2
 8008946:	bf0c      	ite	eq
 8008948:	2301      	moveq	r3, #1
 800894a:	2300      	movne	r3, #0
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	f001 80da 	beq.w	8009b08 <cppLoop+0x1fc0>
			led.LR(-1, 1);
 8008954:	2201      	movs	r2, #1
 8008956:	f04f 31ff 	mov.w	r1, #4294967295
 800895a:	485e      	ldr	r0, [pc, #376]	; (8008ad4 <cppLoop+0xf8c>)
 800895c:	f7f9 fc66 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008960:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008964:	f001 fa10 	bl	8009d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008968:	2300      	movs	r3, #0
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4b5b      	ldr	r3, [pc, #364]	; (8008adc <cppLoop+0xf94>)
 800896e:	2201      	movs	r2, #1
 8008970:	495c      	ldr	r1, [pc, #368]	; (8008ae4 <cppLoop+0xf9c>)
 8008972:	485d      	ldr	r0, [pc, #372]	; (8008ae8 <cppLoop+0xfa0>)
 8008974:	f7f8 ff24 	bl	80017c0 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008978:	2300      	movs	r3, #0
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	4b58      	ldr	r3, [pc, #352]	; (8008ae0 <cppLoop+0xf98>)
 800897e:	2201      	movs	r2, #1
 8008980:	495a      	ldr	r1, [pc, #360]	; (8008aec <cppLoop+0xfa4>)
 8008982:	4859      	ldr	r0, [pc, #356]	; (8008ae8 <cppLoop+0xfa0>)
 8008984:	f7f8 ff1c 	bl	80017c0 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008988:	4b54      	ldr	r3, [pc, #336]	; (8008adc <cppLoop+0xf94>)
 800898a:	edd3 7a00 	vldr	s15, [r3]
 800898e:	eeb0 0a67 	vmov.f32	s0, s15
 8008992:	4857      	ldr	r0, [pc, #348]	; (8008af0 <cppLoop+0xfa8>)
 8008994:	f7fb f981 	bl	8003c9a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008998:	4b51      	ldr	r3, [pc, #324]	; (8008ae0 <cppLoop+0xf98>)
 800899a:	edd3 7a00 	vldr	s15, [r3]
 800899e:	eeb0 0a67 	vmov.f32	s0, s15
 80089a2:	4853      	ldr	r0, [pc, #332]	; (8008af0 <cppLoop+0xfa8>)
 80089a4:	f7fb f999 	bl	8003cda <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80089a8:	2200      	movs	r2, #0
 80089aa:	f04f 31ff 	mov.w	r1, #4294967295
 80089ae:	4849      	ldr	r0, [pc, #292]	; (8008ad4 <cppLoop+0xf8c>)
 80089b0:	f7f9 fc3c 	bl	800222c <_ZN3LED2LREaa>
		break;
 80089b4:	f001 b8a8 	b.w	8009b08 <cppLoop+0x1fc0>

	case 5:
		led.fullColor('M');
 80089b8:	214d      	movs	r1, #77	; 0x4d
 80089ba:	4846      	ldr	r0, [pc, #280]	; (8008ad4 <cppLoop+0xf8c>)
 80089bc:	f7f9 fb7a 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80089c0:	f7f8 fb6e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089c4:	2100      	movs	r1, #0
 80089c6:	2000      	movs	r0, #0
 80089c8:	f7f8 fb7a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80089cc:	4b49      	ldr	r3, [pc, #292]	; (8008af4 <cppLoop+0xfac>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7f7 fdd1 	bl	8000578 <__aeabi_f2d>
 80089d6:	4603      	mov	r3, r0
 80089d8:	460c      	mov	r4, r1
 80089da:	461a      	mov	r2, r3
 80089dc:	4623      	mov	r3, r4
 80089de:	4846      	ldr	r0, [pc, #280]	; (8008af8 <cppLoop+0xfb0>)
 80089e0:	f7f8 fb98 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089e4:	2101      	movs	r1, #1
 80089e6:	2000      	movs	r0, #0
 80089e8:	f7f8 fb6a 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80089ec:	4b43      	ldr	r3, [pc, #268]	; (8008afc <cppLoop+0xfb4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7f7 fdc1 	bl	8000578 <__aeabi_f2d>
 80089f6:	4603      	mov	r3, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	461a      	mov	r2, r3
 80089fc:	4623      	mov	r3, r4
 80089fe:	4840      	ldr	r0, [pc, #256]	; (8008b00 <cppLoop+0xfb8>)
 8008a00:	f7f8 fb88 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008a04:	4832      	ldr	r0, [pc, #200]	; (8008ad0 <cppLoop+0xf88>)
 8008a06:	f7f9 faf1 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	bf0c      	ite	eq
 8008a10:	2301      	moveq	r3, #1
 8008a12:	2300      	movne	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f001 8078 	beq.w	8009b0c <cppLoop+0x1fc4>
			HAL_Delay(500);
 8008a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a20:	f001 f9b2 	bl	8009d88 <HAL_Delay>

			led.LR(1, -1);
 8008a24:	f04f 32ff 	mov.w	r2, #4294967295
 8008a28:	2101      	movs	r1, #1
 8008a2a:	482a      	ldr	r0, [pc, #168]	; (8008ad4 <cppLoop+0xf8c>)
 8008a2c:	f7f9 fbfe 	bl	800222c <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008a30:	4b34      	ldr	r3, [pc, #208]	; (8008b04 <cppLoop+0xfbc>)
 8008a32:	edd3 7a00 	vldr	s15, [r3]
 8008a36:	4b34      	ldr	r3, [pc, #208]	; (8008b08 <cppLoop+0xfc0>)
 8008a38:	ed93 7a00 	vldr	s14, [r3]
 8008a3c:	4b33      	ldr	r3, [pc, #204]	; (8008b0c <cppLoop+0xfc4>)
 8008a3e:	edd3 6a00 	vldr	s13, [r3]
 8008a42:	eeb0 1a66 	vmov.f32	s2, s13
 8008a46:	eef0 0a47 	vmov.f32	s1, s14
 8008a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a4e:	4828      	ldr	r0, [pc, #160]	; (8008af0 <cppLoop+0xfa8>)
 8008a50:	f7fb f878 	bl	8003b44 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008a54:	2102      	movs	r1, #2
 8008a56:	4826      	ldr	r0, [pc, #152]	; (8008af0 <cppLoop+0xfa8>)
 8008a58:	f7fb fb5e 	bl	8004118 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008a5c:	4b27      	ldr	r3, [pc, #156]	; (8008afc <cppLoop+0xfb4>)
 8008a5e:	edd3 7a00 	vldr	s15, [r3]
 8008a62:	eeb0 0a67 	vmov.f32	s0, s15
 8008a66:	4822      	ldr	r0, [pc, #136]	; (8008af0 <cppLoop+0xfa8>)
 8008a68:	f7fb f907 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008a6c:	4b21      	ldr	r3, [pc, #132]	; (8008af4 <cppLoop+0xfac>)
 8008a6e:	edd3 7a00 	vldr	s15, [r3]
 8008a72:	eeb0 0a67 	vmov.f32	s0, s15
 8008a76:	481e      	ldr	r0, [pc, #120]	; (8008af0 <cppLoop+0xfa8>)
 8008a78:	f7fb f91f 	bl	8003cba <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008a7c:	4b1f      	ldr	r3, [pc, #124]	; (8008afc <cppLoop+0xfb4>)
 8008a7e:	edd3 7a00 	vldr	s15, [r3]
 8008a82:	eeb0 0a67 	vmov.f32	s0, s15
 8008a86:	481a      	ldr	r0, [pc, #104]	; (8008af0 <cppLoop+0xfa8>)
 8008a88:	f7fb f937 	bl	8003cfa <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008a8c:	4818      	ldr	r0, [pc, #96]	; (8008af0 <cppLoop+0xfa8>)
 8008a8e:	f7fb fc83 	bl	8004398 <_ZN9LineTrace20createVelocityTabeleEv>

			logger.start();
 8008a92:	481f      	ldr	r0, [pc, #124]	; (8008b10 <cppLoop+0xfc8>)
 8008a94:	f7fc f8ec 	bl	8004c70 <_ZN6Logger5startEv>

			line_trace.running();
 8008a98:	4815      	ldr	r0, [pc, #84]	; (8008af0 <cppLoop+0xfa8>)
 8008a9a:	f7fb fb81 	bl	80041a0 <_ZN9LineTrace7runningEv>

			logger.stop();
 8008a9e:	481c      	ldr	r0, [pc, #112]	; (8008b10 <cppLoop+0xfc8>)
 8008aa0:	f7fc f905 	bl	8004cae <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8008aa4:	4a1b      	ldr	r2, [pc, #108]	; (8008b14 <cppLoop+0xfcc>)
 8008aa6:	491c      	ldr	r1, [pc, #112]	; (8008b18 <cppLoop+0xfd0>)
 8008aa8:	4819      	ldr	r0, [pc, #100]	; (8008b10 <cppLoop+0xfc8>)
 8008aaa:	f7fb ffdc 	bl	8004a66 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008aae:	4a1b      	ldr	r2, [pc, #108]	; (8008b1c <cppLoop+0xfd4>)
 8008ab0:	4919      	ldr	r1, [pc, #100]	; (8008b18 <cppLoop+0xfd0>)
 8008ab2:	4817      	ldr	r0, [pc, #92]	; (8008b10 <cppLoop+0xfc8>)
 8008ab4:	f7fb ffeb 	bl	8004a8e <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8008ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8008abc:	2100      	movs	r1, #0
 8008abe:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <cppLoop+0xf8c>)
 8008ac0:	f7f9 fbb4 	bl	800222c <_ZN3LED2LREaa>
		}

		break;
 8008ac4:	f001 b822 	b.w	8009b0c <cppLoop+0x1fc4>
 8008ac8:	9999999a 	.word	0x9999999a
 8008acc:	3fb99999 	.word	0x3fb99999
 8008ad0:	20000560 	.word	0x20000560
 8008ad4:	2000056c 	.word	0x2000056c
 8008ad8:	20048136 	.word	0x20048136
 8008adc:	20048174 	.word	0x20048174
 8008ae0:	20048184 	.word	0x20048184
 8008ae4:	08019f18 	.word	0x08019f18
 8008ae8:	08019e98 	.word	0x08019e98
 8008aec:	08019f24 	.word	0x08019f24
 8008af0:	200238bc 	.word	0x200238bc
 8008af4:	2004817c 	.word	0x2004817c
 8008af8:	08019f30 	.word	0x08019f30
 8008afc:	2004818c 	.word	0x2004818c
 8008b00:	08019ec4 	.word	0x08019ec4
 8008b04:	2004813c 	.word	0x2004813c
 8008b08:	20048144 	.word	0x20048144
 8008b0c:	2004814c 	.word	0x2004814c
 8008b10:	20000590 	.word	0x20000590
 8008b14:	08019ed0 	.word	0x08019ed0
 8008b18:	08019edc 	.word	0x08019edc
 8008b1c:	08019ee8 	.word	0x08019ee8

	case 6:
		led.fullColor('R');
 8008b20:	2152      	movs	r1, #82	; 0x52
 8008b22:	4895      	ldr	r0, [pc, #596]	; (8008d78 <cppLoop+0x1230>)
 8008b24:	f7f9 fac6 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b28:	f7f8 faba 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	2000      	movs	r0, #0
 8008b30:	f7f8 fac6 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008b34:	4891      	ldr	r0, [pc, #580]	; (8008d7c <cppLoop+0x1234>)
 8008b36:	f7fb f910 	bl	8003d5a <_ZN9LineTrace15getMaxVelocity2Ev>
 8008b3a:	ee10 3a10 	vmov	r3, s0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7f7 fd1a 	bl	8000578 <__aeabi_f2d>
 8008b44:	4603      	mov	r3, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4623      	mov	r3, r4
 8008b4c:	488c      	ldr	r0, [pc, #560]	; (8008d80 <cppLoop+0x1238>)
 8008b4e:	f7f8 fae1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b52:	2101      	movs	r1, #1
 8008b54:	2000      	movs	r0, #0
 8008b56:	f7f8 fab3 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008b5a:	4888      	ldr	r0, [pc, #544]	; (8008d7c <cppLoop+0x1234>)
 8008b5c:	f7fb f91d 	bl	8003d9a <_ZN9LineTrace15getMinVelocity2Ev>
 8008b60:	ee10 3a10 	vmov	r3, s0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7f7 fd07 	bl	8000578 <__aeabi_f2d>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4623      	mov	r3, r4
 8008b72:	4884      	ldr	r0, [pc, #528]	; (8008d84 <cppLoop+0x123c>)
 8008b74:	f7f8 face 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b78:	4883      	ldr	r0, [pc, #524]	; (8008d88 <cppLoop+0x1240>)
 8008b7a:	f7f9 fa37 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d022      	beq.n	8008bd4 <cppLoop+0x108c>
			led.LR(-1, 1);
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f04f 31ff 	mov.w	r1, #4294967295
 8008b94:	4878      	ldr	r0, [pc, #480]	; (8008d78 <cppLoop+0x1230>)
 8008b96:	f7f9 fb49 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b9e:	f001 f8f3 	bl	8009d88 <HAL_Delay>

			selector_vel2++;
 8008ba2:	4b7a      	ldr	r3, [pc, #488]	; (8008d8c <cppLoop+0x1244>)
 8008ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3301      	adds	r3, #1
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	b21a      	sxth	r2, r3
 8008bb0:	4b76      	ldr	r3, [pc, #472]	; (8008d8c <cppLoop+0x1244>)
 8008bb2:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008bb4:	4b75      	ldr	r3, [pc, #468]	; (8008d8c <cppLoop+0x1244>)
 8008bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	dd02      	ble.n	8008bc4 <cppLoop+0x107c>
 8008bbe:	4b73      	ldr	r3, [pc, #460]	; (8008d8c <cppLoop+0x1244>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8008bca:	486b      	ldr	r0, [pc, #428]	; (8008d78 <cppLoop+0x1230>)
 8008bcc:	f7f9 fb2e 	bl	800222c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008bd0:	f000 bf9e 	b.w	8009b10 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_R){
 8008bd4:	486c      	ldr	r0, [pc, #432]	; (8008d88 <cppLoop+0x1240>)
 8008bd6:	f7f9 fa09 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b10      	cmp	r3, #16
 8008bde:	bf0c      	ite	eq
 8008be0:	2301      	moveq	r3, #1
 8008be2:	2300      	movne	r3, #0
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d03c      	beq.n	8008c64 <cppLoop+0x111c>
			led.LR(-1, 1);
 8008bea:	2201      	movs	r2, #1
 8008bec:	f04f 31ff 	mov.w	r1, #4294967295
 8008bf0:	4861      	ldr	r0, [pc, #388]	; (8008d78 <cppLoop+0x1230>)
 8008bf2:	f7f9 fb1b 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008bf6:	2064      	movs	r0, #100	; 0x64
 8008bf8:	f001 f8c6 	bl	8009d88 <HAL_Delay>
			if(selector_vel2 == 0)
 8008bfc:	4b63      	ldr	r3, [pc, #396]	; (8008d8c <cppLoop+0x1244>)
 8008bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d113      	bne.n	8008c2e <cppLoop+0x10e6>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008c06:	4b62      	ldr	r3, [pc, #392]	; (8008d90 <cppLoop+0x1248>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7f7 fcb4 	bl	8000578 <__aeabi_f2d>
 8008c10:	a357      	add	r3, pc, #348	; (adr r3, 8008d70 <cppLoop+0x1228>)
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f7f7 fb51 	bl	80002bc <__adddf3>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	4621      	mov	r1, r4
 8008c22:	f7f7 fff9 	bl	8000c18 <__aeabi_d2f>
 8008c26:	4602      	mov	r2, r0
 8008c28:	4b59      	ldr	r3, [pc, #356]	; (8008d90 <cppLoop+0x1248>)
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	e012      	b.n	8008c54 <cppLoop+0x110c>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008c2e:	4b59      	ldr	r3, [pc, #356]	; (8008d94 <cppLoop+0x124c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7f7 fca0 	bl	8000578 <__aeabi_f2d>
 8008c38:	a34d      	add	r3, pc, #308	; (adr r3, 8008d70 <cppLoop+0x1228>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f7f7 fb3d 	bl	80002bc <__adddf3>
 8008c42:	4603      	mov	r3, r0
 8008c44:	460c      	mov	r4, r1
 8008c46:	4618      	mov	r0, r3
 8008c48:	4621      	mov	r1, r4
 8008c4a:	f7f7 ffe5 	bl	8000c18 <__aeabi_d2f>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	4b50      	ldr	r3, [pc, #320]	; (8008d94 <cppLoop+0x124c>)
 8008c52:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c54:	2200      	movs	r2, #0
 8008c56:	f04f 31ff 	mov.w	r1, #4294967295
 8008c5a:	4847      	ldr	r0, [pc, #284]	; (8008d78 <cppLoop+0x1230>)
 8008c5c:	f7f9 fae6 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008c60:	f000 bf56 	b.w	8009b10 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_L){
 8008c64:	4848      	ldr	r0, [pc, #288]	; (8008d88 <cppLoop+0x1240>)
 8008c66:	f7f9 f9c1 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	bf0c      	ite	eq
 8008c70:	2301      	moveq	r3, #1
 8008c72:	2300      	movne	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d03c      	beq.n	8008cf4 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c80:	483d      	ldr	r0, [pc, #244]	; (8008d78 <cppLoop+0x1230>)
 8008c82:	f7f9 fad3 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c86:	2064      	movs	r0, #100	; 0x64
 8008c88:	f001 f87e 	bl	8009d88 <HAL_Delay>
			if(selector_vel2 == 0)
 8008c8c:	4b3f      	ldr	r3, [pc, #252]	; (8008d8c <cppLoop+0x1244>)
 8008c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d113      	bne.n	8008cbe <cppLoop+0x1176>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008c96:	4b3e      	ldr	r3, [pc, #248]	; (8008d90 <cppLoop+0x1248>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7f7 fc6c 	bl	8000578 <__aeabi_f2d>
 8008ca0:	a333      	add	r3, pc, #204	; (adr r3, 8008d70 <cppLoop+0x1228>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fb07 	bl	80002b8 <__aeabi_dsub>
 8008caa:	4603      	mov	r3, r0
 8008cac:	460c      	mov	r4, r1
 8008cae:	4618      	mov	r0, r3
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	f7f7 ffb1 	bl	8000c18 <__aeabi_d2f>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	4b35      	ldr	r3, [pc, #212]	; (8008d90 <cppLoop+0x1248>)
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	e012      	b.n	8008ce4 <cppLoop+0x119c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008cbe:	4b35      	ldr	r3, [pc, #212]	; (8008d94 <cppLoop+0x124c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f7 fc58 	bl	8000578 <__aeabi_f2d>
 8008cc8:	a329      	add	r3, pc, #164	; (adr r3, 8008d70 <cppLoop+0x1228>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 faf3 	bl	80002b8 <__aeabi_dsub>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	4621      	mov	r1, r4
 8008cda:	f7f7 ff9d 	bl	8000c18 <__aeabi_d2f>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	4b2c      	ldr	r3, [pc, #176]	; (8008d94 <cppLoop+0x124c>)
 8008ce2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8008cea:	4823      	ldr	r0, [pc, #140]	; (8008d78 <cppLoop+0x1230>)
 8008cec:	f7f9 fa9e 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008cf0:	f000 bf0e 	b.w	8009b10 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_C){
 8008cf4:	4824      	ldr	r0, [pc, #144]	; (8008d88 <cppLoop+0x1240>)
 8008cf6:	f7f9 f979 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	bf0c      	ite	eq
 8008d00:	2301      	moveq	r3, #1
 8008d02:	2300      	movne	r3, #0
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 8702 	beq.w	8009b10 <cppLoop+0x1fc8>
			led.LR(-1, 1);
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d12:	4819      	ldr	r0, [pc, #100]	; (8008d78 <cppLoop+0x1230>)
 8008d14:	f7f9 fa8a 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d1c:	f001 f834 	bl	8009d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008d20:	2300      	movs	r3, #0
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <cppLoop+0x1248>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	491b      	ldr	r1, [pc, #108]	; (8008d98 <cppLoop+0x1250>)
 8008d2a:	481c      	ldr	r0, [pc, #112]	; (8008d9c <cppLoop+0x1254>)
 8008d2c:	f7f8 fd48 	bl	80017c0 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008d30:	2300      	movs	r3, #0
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4b17      	ldr	r3, [pc, #92]	; (8008d94 <cppLoop+0x124c>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	4919      	ldr	r1, [pc, #100]	; (8008da0 <cppLoop+0x1258>)
 8008d3a:	4818      	ldr	r0, [pc, #96]	; (8008d9c <cppLoop+0x1254>)
 8008d3c:	f7f8 fd40 	bl	80017c0 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008d40:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <cppLoop+0x1248>)
 8008d42:	edd3 7a00 	vldr	s15, [r3]
 8008d46:	eeb0 0a67 	vmov.f32	s0, s15
 8008d4a:	480c      	ldr	r0, [pc, #48]	; (8008d7c <cppLoop+0x1234>)
 8008d4c:	f7fa ffb5 	bl	8003cba <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008d50:	4b10      	ldr	r3, [pc, #64]	; (8008d94 <cppLoop+0x124c>)
 8008d52:	edd3 7a00 	vldr	s15, [r3]
 8008d56:	eeb0 0a67 	vmov.f32	s0, s15
 8008d5a:	4808      	ldr	r0, [pc, #32]	; (8008d7c <cppLoop+0x1234>)
 8008d5c:	f7fa ffcd 	bl	8003cfa <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008d60:	2200      	movs	r2, #0
 8008d62:	f04f 31ff 	mov.w	r1, #4294967295
 8008d66:	4804      	ldr	r0, [pc, #16]	; (8008d78 <cppLoop+0x1230>)
 8008d68:	f7f9 fa60 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008d6c:	f000 bed0 	b.w	8009b10 <cppLoop+0x1fc8>
 8008d70:	9999999a 	.word	0x9999999a
 8008d74:	3fb99999 	.word	0x3fb99999
 8008d78:	2000056c 	.word	0x2000056c
 8008d7c:	200238bc 	.word	0x200238bc
 8008d80:	08019f30 	.word	0x08019f30
 8008d84:	08019ef4 	.word	0x08019ef4
 8008d88:	20000560 	.word	0x20000560
 8008d8c:	20048138 	.word	0x20048138
 8008d90:	2004817c 	.word	0x2004817c
 8008d94:	2004818c 	.word	0x2004818c
 8008d98:	08019f3c 	.word	0x08019f3c
 8008d9c:	08019e98 	.word	0x08019e98
 8008da0:	08019f48 	.word	0x08019f48

	case 7:
		led.fullColor('W');
 8008da4:	2157      	movs	r1, #87	; 0x57
 8008da6:	48c2      	ldr	r0, [pc, #776]	; (80090b0 <cppLoop+0x1568>)
 8008da8:	f7f9 f984 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008dac:	f7f8 f978 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008db0:	2100      	movs	r1, #0
 8008db2:	2000      	movs	r0, #0
 8008db4:	f7f8 f984 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008db8:	48be      	ldr	r0, [pc, #760]	; (80090b4 <cppLoop+0x156c>)
 8008dba:	f7fb f832 	bl	8003e22 <_ZN9LineTrace9getMaxAccEv>
 8008dbe:	ee10 3a10 	vmov	r3, s0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f7 fbd8 	bl	8000578 <__aeabi_f2d>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	461a      	mov	r2, r3
 8008dce:	4623      	mov	r3, r4
 8008dd0:	48b9      	ldr	r0, [pc, #740]	; (80090b8 <cppLoop+0x1570>)
 8008dd2:	f7f8 f99f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f7f8 f971 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008dde:	48b5      	ldr	r0, [pc, #724]	; (80090b4 <cppLoop+0x156c>)
 8008de0:	f7fb f855 	bl	8003e8e <_ZN9LineTrace9getMaxDecEv>
 8008de4:	ee10 3a10 	vmov	r3, s0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7f7 fbc5 	bl	8000578 <__aeabi_f2d>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	461a      	mov	r2, r3
 8008df4:	4623      	mov	r3, r4
 8008df6:	48b1      	ldr	r0, [pc, #708]	; (80090bc <cppLoop+0x1574>)
 8008df8:	f7f8 f98c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008dfc:	48b0      	ldr	r0, [pc, #704]	; (80090c0 <cppLoop+0x1578>)
 8008dfe:	f7f9 f8f5 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	bf0c      	ite	eq
 8008e08:	2301      	moveq	r3, #1
 8008e0a:	2300      	movne	r3, #0
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d022      	beq.n	8008e58 <cppLoop+0x1310>
			led.LR(-1, 1);
 8008e12:	2201      	movs	r2, #1
 8008e14:	f04f 31ff 	mov.w	r1, #4294967295
 8008e18:	48a5      	ldr	r0, [pc, #660]	; (80090b0 <cppLoop+0x1568>)
 8008e1a:	f7f9 fa07 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e22:	f000 ffb1 	bl	8009d88 <HAL_Delay>

			selector_acc++;
 8008e26:	4ba7      	ldr	r3, [pc, #668]	; (80090c4 <cppLoop+0x157c>)
 8008e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3301      	adds	r3, #1
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	b21a      	sxth	r2, r3
 8008e34:	4ba3      	ldr	r3, [pc, #652]	; (80090c4 <cppLoop+0x157c>)
 8008e36:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008e38:	4ba2      	ldr	r3, [pc, #648]	; (80090c4 <cppLoop+0x157c>)
 8008e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	dd02      	ble.n	8008e48 <cppLoop+0x1300>
 8008e42:	4ba0      	ldr	r3, [pc, #640]	; (80090c4 <cppLoop+0x157c>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e4e:	4898      	ldr	r0, [pc, #608]	; (80090b0 <cppLoop+0x1568>)
 8008e50:	f7f9 f9ec 	bl	800222c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008e54:	f000 be5e 	b.w	8009b14 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_R){
 8008e58:	4899      	ldr	r0, [pc, #612]	; (80090c0 <cppLoop+0x1578>)
 8008e5a:	f7f9 f8c7 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b10      	cmp	r3, #16
 8008e62:	bf0c      	ite	eq
 8008e64:	2301      	moveq	r3, #1
 8008e66:	2300      	movne	r3, #0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d03c      	beq.n	8008ee8 <cppLoop+0x13a0>
			led.LR(-1, 1);
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f04f 31ff 	mov.w	r1, #4294967295
 8008e74:	488e      	ldr	r0, [pc, #568]	; (80090b0 <cppLoop+0x1568>)
 8008e76:	f7f9 f9d9 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e7a:	2064      	movs	r0, #100	; 0x64
 8008e7c:	f000 ff84 	bl	8009d88 <HAL_Delay>
			if(selector_acc == 0){
 8008e80:	4b90      	ldr	r3, [pc, #576]	; (80090c4 <cppLoop+0x157c>)
 8008e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d113      	bne.n	8008eb2 <cppLoop+0x136a>
				adj_acc = adj_acc + 0.1;
 8008e8a:	4b8f      	ldr	r3, [pc, #572]	; (80090c8 <cppLoop+0x1580>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7f7 fb72 	bl	8000578 <__aeabi_f2d>
 8008e94:	a384      	add	r3, pc, #528	; (adr r3, 80090a8 <cppLoop+0x1560>)
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f7f7 fa0f 	bl	80002bc <__adddf3>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	f7f7 feb7 	bl	8000c18 <__aeabi_d2f>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	4b86      	ldr	r3, [pc, #536]	; (80090c8 <cppLoop+0x1580>)
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	e012      	b.n	8008ed8 <cppLoop+0x1390>
				adj_dec = adj_dec + 0.1;
 8008eb2:	4b86      	ldr	r3, [pc, #536]	; (80090cc <cppLoop+0x1584>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f7 fb5e 	bl	8000578 <__aeabi_f2d>
 8008ebc:	a37a      	add	r3, pc, #488	; (adr r3, 80090a8 <cppLoop+0x1560>)
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 f9fb 	bl	80002bc <__adddf3>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	460c      	mov	r4, r1
 8008eca:	4618      	mov	r0, r3
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f7f7 fea3 	bl	8000c18 <__aeabi_d2f>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	4b7d      	ldr	r3, [pc, #500]	; (80090cc <cppLoop+0x1584>)
 8008ed6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f04f 31ff 	mov.w	r1, #4294967295
 8008ede:	4874      	ldr	r0, [pc, #464]	; (80090b0 <cppLoop+0x1568>)
 8008ee0:	f7f9 f9a4 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008ee4:	f000 be16 	b.w	8009b14 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_L){
 8008ee8:	4875      	ldr	r0, [pc, #468]	; (80090c0 <cppLoop+0x1578>)
 8008eea:	f7f9 f87f 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	bf0c      	ite	eq
 8008ef4:	2301      	moveq	r3, #1
 8008ef6:	2300      	movne	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d03c      	beq.n	8008f78 <cppLoop+0x1430>
			led.LR(-1, 1);
 8008efe:	2201      	movs	r2, #1
 8008f00:	f04f 31ff 	mov.w	r1, #4294967295
 8008f04:	486a      	ldr	r0, [pc, #424]	; (80090b0 <cppLoop+0x1568>)
 8008f06:	f7f9 f991 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f0a:	2064      	movs	r0, #100	; 0x64
 8008f0c:	f000 ff3c 	bl	8009d88 <HAL_Delay>
			if(selector_acc == 0){
 8008f10:	4b6c      	ldr	r3, [pc, #432]	; (80090c4 <cppLoop+0x157c>)
 8008f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d113      	bne.n	8008f42 <cppLoop+0x13fa>
				adj_acc = adj_acc - 0.1;
 8008f1a:	4b6b      	ldr	r3, [pc, #428]	; (80090c8 <cppLoop+0x1580>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f7 fb2a 	bl	8000578 <__aeabi_f2d>
 8008f24:	a360      	add	r3, pc, #384	; (adr r3, 80090a8 <cppLoop+0x1560>)
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	f7f7 f9c5 	bl	80002b8 <__aeabi_dsub>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	460c      	mov	r4, r1
 8008f32:	4618      	mov	r0, r3
 8008f34:	4621      	mov	r1, r4
 8008f36:	f7f7 fe6f 	bl	8000c18 <__aeabi_d2f>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	4b62      	ldr	r3, [pc, #392]	; (80090c8 <cppLoop+0x1580>)
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	e012      	b.n	8008f68 <cppLoop+0x1420>
				adj_dec = adj_dec - 0.1;
 8008f42:	4b62      	ldr	r3, [pc, #392]	; (80090cc <cppLoop+0x1584>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f7 fb16 	bl	8000578 <__aeabi_f2d>
 8008f4c:	a356      	add	r3, pc, #344	; (adr r3, 80090a8 <cppLoop+0x1560>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f7f7 f9b1 	bl	80002b8 <__aeabi_dsub>
 8008f56:	4603      	mov	r3, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	f7f7 fe5b 	bl	8000c18 <__aeabi_d2f>
 8008f62:	4602      	mov	r2, r0
 8008f64:	4b59      	ldr	r3, [pc, #356]	; (80090cc <cppLoop+0x1584>)
 8008f66:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f6e:	4850      	ldr	r0, [pc, #320]	; (80090b0 <cppLoop+0x1568>)
 8008f70:	f7f9 f95c 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008f74:	f000 bdce 	b.w	8009b14 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_C){
 8008f78:	4851      	ldr	r0, [pc, #324]	; (80090c0 <cppLoop+0x1578>)
 8008f7a:	f7f9 f837 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	bf0c      	ite	eq
 8008f84:	2301      	moveq	r3, #1
 8008f86:	2300      	movne	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 85c2 	beq.w	8009b14 <cppLoop+0x1fcc>
			led.LR(-1, 1);
 8008f90:	2201      	movs	r2, #1
 8008f92:	f04f 31ff 	mov.w	r1, #4294967295
 8008f96:	4846      	ldr	r0, [pc, #280]	; (80090b0 <cppLoop+0x1568>)
 8008f98:	f7f9 f948 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fa0:	f000 fef2 	bl	8009d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	4b47      	ldr	r3, [pc, #284]	; (80090c8 <cppLoop+0x1580>)
 8008faa:	2201      	movs	r2, #1
 8008fac:	4948      	ldr	r1, [pc, #288]	; (80090d0 <cppLoop+0x1588>)
 8008fae:	4849      	ldr	r0, [pc, #292]	; (80090d4 <cppLoop+0x158c>)
 8008fb0:	f7f8 fc06 	bl	80017c0 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	4b44      	ldr	r3, [pc, #272]	; (80090cc <cppLoop+0x1584>)
 8008fba:	2201      	movs	r2, #1
 8008fbc:	4946      	ldr	r1, [pc, #280]	; (80090d8 <cppLoop+0x1590>)
 8008fbe:	4845      	ldr	r0, [pc, #276]	; (80090d4 <cppLoop+0x158c>)
 8008fc0:	f7f8 fbfe 	bl	80017c0 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008fc4:	4b40      	ldr	r3, [pc, #256]	; (80090c8 <cppLoop+0x1580>)
 8008fc6:	edd3 7a00 	vldr	s15, [r3]
 8008fca:	4b40      	ldr	r3, [pc, #256]	; (80090cc <cppLoop+0x1584>)
 8008fcc:	ed93 7a00 	vldr	s14, [r3]
 8008fd0:	eef0 0a47 	vmov.f32	s1, s14
 8008fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8008fd8:	4836      	ldr	r0, [pc, #216]	; (80090b4 <cppLoop+0x156c>)
 8008fda:	f7fa feee 	bl	8003dba <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8008fe4:	4832      	ldr	r0, [pc, #200]	; (80090b0 <cppLoop+0x1568>)
 8008fe6:	f7f9 f921 	bl	800222c <_ZN3LED2LREaa>
		break;
 8008fea:	f000 bd93 	b.w	8009b14 <cppLoop+0x1fcc>

	case 8:
		led.fullColor('W');
 8008fee:	2157      	movs	r1, #87	; 0x57
 8008ff0:	482f      	ldr	r0, [pc, #188]	; (80090b0 <cppLoop+0x1568>)
 8008ff2:	f7f9 f85f 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ff6:	f7f8 f853 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	f7f8 f85f 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8009002:	482c      	ldr	r0, [pc, #176]	; (80090b4 <cppLoop+0x156c>)
 8009004:	f7fa ff31 	bl	8003e6a <_ZN9LineTrace10getMaxAcc2Ev>
 8009008:	ee10 3a10 	vmov	r3, s0
 800900c:	4618      	mov	r0, r3
 800900e:	f7f7 fab3 	bl	8000578 <__aeabi_f2d>
 8009012:	4603      	mov	r3, r0
 8009014:	460c      	mov	r4, r1
 8009016:	461a      	mov	r2, r3
 8009018:	4623      	mov	r3, r4
 800901a:	4830      	ldr	r0, [pc, #192]	; (80090dc <cppLoop+0x1594>)
 800901c:	f7f8 f87a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009020:	2101      	movs	r1, #1
 8009022:	2000      	movs	r0, #0
 8009024:	f7f8 f84c 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8009028:	4822      	ldr	r0, [pc, #136]	; (80090b4 <cppLoop+0x156c>)
 800902a:	f7fa ff0c 	bl	8003e46 <_ZN9LineTrace10getMaxDec2Ev>
 800902e:	ee10 3a10 	vmov	r3, s0
 8009032:	4618      	mov	r0, r3
 8009034:	f7f7 faa0 	bl	8000578 <__aeabi_f2d>
 8009038:	4603      	mov	r3, r0
 800903a:	460c      	mov	r4, r1
 800903c:	461a      	mov	r2, r3
 800903e:	4623      	mov	r3, r4
 8009040:	4827      	ldr	r0, [pc, #156]	; (80090e0 <cppLoop+0x1598>)
 8009042:	f7f8 f867 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009046:	481e      	ldr	r0, [pc, #120]	; (80090c0 <cppLoop+0x1578>)
 8009048:	f7f8 ffd0 	bl	8001fec <_ZN8JoyStick8getValueEv>
 800904c:	4603      	mov	r3, r0
 800904e:	2b08      	cmp	r3, #8
 8009050:	bf0c      	ite	eq
 8009052:	2301      	moveq	r3, #1
 8009054:	2300      	movne	r3, #0
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d045      	beq.n	80090e8 <cppLoop+0x15a0>
			led.LR(-1, 1);
 800905c:	2201      	movs	r2, #1
 800905e:	f04f 31ff 	mov.w	r1, #4294967295
 8009062:	4813      	ldr	r0, [pc, #76]	; (80090b0 <cppLoop+0x1568>)
 8009064:	f7f9 f8e2 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009068:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800906c:	f000 fe8c 	bl	8009d88 <HAL_Delay>

			selector_acc2++;
 8009070:	4b1c      	ldr	r3, [pc, #112]	; (80090e4 <cppLoop+0x159c>)
 8009072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009076:	b29b      	uxth	r3, r3
 8009078:	3301      	adds	r3, #1
 800907a:	b29b      	uxth	r3, r3
 800907c:	b21a      	sxth	r2, r3
 800907e:	4b19      	ldr	r3, [pc, #100]	; (80090e4 <cppLoop+0x159c>)
 8009080:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8009082:	4b18      	ldr	r3, [pc, #96]	; (80090e4 <cppLoop+0x159c>)
 8009084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009088:	2b01      	cmp	r3, #1
 800908a:	dd02      	ble.n	8009092 <cppLoop+0x154a>
 800908c:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <cppLoop+0x159c>)
 800908e:	2200      	movs	r2, #0
 8009090:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009092:	2200      	movs	r2, #0
 8009094:	f04f 31ff 	mov.w	r1, #4294967295
 8009098:	4805      	ldr	r0, [pc, #20]	; (80090b0 <cppLoop+0x1568>)
 800909a:	f7f9 f8c7 	bl	800222c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800909e:	f000 bd3b 	b.w	8009b18 <cppLoop+0x1fd0>
 80090a2:	bf00      	nop
 80090a4:	f3af 8000 	nop.w
 80090a8:	9999999a 	.word	0x9999999a
 80090ac:	3fb99999 	.word	0x3fb99999
 80090b0:	2000056c 	.word	0x2000056c
 80090b4:	200238bc 	.word	0x200238bc
 80090b8:	08019f54 	.word	0x08019f54
 80090bc:	08019f60 	.word	0x08019f60
 80090c0:	20000560 	.word	0x20000560
 80090c4:	20048132 	.word	0x20048132
 80090c8:	20048194 	.word	0x20048194
 80090cc:	2004819c 	.word	0x2004819c
 80090d0:	08019f6c 	.word	0x08019f6c
 80090d4:	08019e98 	.word	0x08019e98
 80090d8:	08019f74 	.word	0x08019f74
 80090dc:	08019f7c 	.word	0x08019f7c
 80090e0:	08019f88 	.word	0x08019f88
 80090e4:	20048134 	.word	0x20048134
		else if(joy_stick.getValue() == JOY_R){
 80090e8:	48bf      	ldr	r0, [pc, #764]	; (80093e8 <cppLoop+0x18a0>)
 80090ea:	f7f8 ff7f 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b10      	cmp	r3, #16
 80090f2:	bf0c      	ite	eq
 80090f4:	2301      	moveq	r3, #1
 80090f6:	2300      	movne	r3, #0
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d03c      	beq.n	8009178 <cppLoop+0x1630>
			led.LR(-1, 1);
 80090fe:	2201      	movs	r2, #1
 8009100:	f04f 31ff 	mov.w	r1, #4294967295
 8009104:	48b9      	ldr	r0, [pc, #740]	; (80093ec <cppLoop+0x18a4>)
 8009106:	f7f9 f891 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800910a:	2064      	movs	r0, #100	; 0x64
 800910c:	f000 fe3c 	bl	8009d88 <HAL_Delay>
			if(selector_acc2 == 0){
 8009110:	4bb7      	ldr	r3, [pc, #732]	; (80093f0 <cppLoop+0x18a8>)
 8009112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d113      	bne.n	8009142 <cppLoop+0x15fa>
				adj_acc2 = adj_acc2 + 0.1;
 800911a:	4bb6      	ldr	r3, [pc, #728]	; (80093f4 <cppLoop+0x18ac>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f7f7 fa2a 	bl	8000578 <__aeabi_f2d>
 8009124:	a3ae      	add	r3, pc, #696	; (adr r3, 80093e0 <cppLoop+0x1898>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f8c7 	bl	80002bc <__adddf3>
 800912e:	4603      	mov	r3, r0
 8009130:	460c      	mov	r4, r1
 8009132:	4618      	mov	r0, r3
 8009134:	4621      	mov	r1, r4
 8009136:	f7f7 fd6f 	bl	8000c18 <__aeabi_d2f>
 800913a:	4602      	mov	r2, r0
 800913c:	4bad      	ldr	r3, [pc, #692]	; (80093f4 <cppLoop+0x18ac>)
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	e012      	b.n	8009168 <cppLoop+0x1620>
				adj_dec2 = adj_dec2 + 0.1;
 8009142:	4bad      	ldr	r3, [pc, #692]	; (80093f8 <cppLoop+0x18b0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f7f7 fa16 	bl	8000578 <__aeabi_f2d>
 800914c:	a3a4      	add	r3, pc, #656	; (adr r3, 80093e0 <cppLoop+0x1898>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f8b3 	bl	80002bc <__adddf3>
 8009156:	4603      	mov	r3, r0
 8009158:	460c      	mov	r4, r1
 800915a:	4618      	mov	r0, r3
 800915c:	4621      	mov	r1, r4
 800915e:	f7f7 fd5b 	bl	8000c18 <__aeabi_d2f>
 8009162:	4602      	mov	r2, r0
 8009164:	4ba4      	ldr	r3, [pc, #656]	; (80093f8 <cppLoop+0x18b0>)
 8009166:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009168:	2200      	movs	r2, #0
 800916a:	f04f 31ff 	mov.w	r1, #4294967295
 800916e:	489f      	ldr	r0, [pc, #636]	; (80093ec <cppLoop+0x18a4>)
 8009170:	f7f9 f85c 	bl	800222c <_ZN3LED2LREaa>
		break;
 8009174:	f000 bcd0 	b.w	8009b18 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_L){
 8009178:	489b      	ldr	r0, [pc, #620]	; (80093e8 <cppLoop+0x18a0>)
 800917a:	f7f8 ff37 	bl	8001fec <_ZN8JoyStick8getValueEv>
 800917e:	4603      	mov	r3, r0
 8009180:	2b01      	cmp	r3, #1
 8009182:	bf0c      	ite	eq
 8009184:	2301      	moveq	r3, #1
 8009186:	2300      	movne	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d03c      	beq.n	8009208 <cppLoop+0x16c0>
			led.LR(-1, 1);
 800918e:	2201      	movs	r2, #1
 8009190:	f04f 31ff 	mov.w	r1, #4294967295
 8009194:	4895      	ldr	r0, [pc, #596]	; (80093ec <cppLoop+0x18a4>)
 8009196:	f7f9 f849 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800919a:	2064      	movs	r0, #100	; 0x64
 800919c:	f000 fdf4 	bl	8009d88 <HAL_Delay>
			if(selector_acc2 == 0){
 80091a0:	4b93      	ldr	r3, [pc, #588]	; (80093f0 <cppLoop+0x18a8>)
 80091a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d113      	bne.n	80091d2 <cppLoop+0x168a>
				adj_acc2 = adj_acc2 - 0.1;
 80091aa:	4b92      	ldr	r3, [pc, #584]	; (80093f4 <cppLoop+0x18ac>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f7 f9e2 	bl	8000578 <__aeabi_f2d>
 80091b4:	a38a      	add	r3, pc, #552	; (adr r3, 80093e0 <cppLoop+0x1898>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f87d 	bl	80002b8 <__aeabi_dsub>
 80091be:	4603      	mov	r3, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	4618      	mov	r0, r3
 80091c4:	4621      	mov	r1, r4
 80091c6:	f7f7 fd27 	bl	8000c18 <__aeabi_d2f>
 80091ca:	4602      	mov	r2, r0
 80091cc:	4b89      	ldr	r3, [pc, #548]	; (80093f4 <cppLoop+0x18ac>)
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e012      	b.n	80091f8 <cppLoop+0x16b0>
				adj_dec2 = adj_dec2 - 0.1;
 80091d2:	4b89      	ldr	r3, [pc, #548]	; (80093f8 <cppLoop+0x18b0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f7 f9ce 	bl	8000578 <__aeabi_f2d>
 80091dc:	a380      	add	r3, pc, #512	; (adr r3, 80093e0 <cppLoop+0x1898>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f7 f869 	bl	80002b8 <__aeabi_dsub>
 80091e6:	4603      	mov	r3, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	4618      	mov	r0, r3
 80091ec:	4621      	mov	r1, r4
 80091ee:	f7f7 fd13 	bl	8000c18 <__aeabi_d2f>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4b80      	ldr	r3, [pc, #512]	; (80093f8 <cppLoop+0x18b0>)
 80091f6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80091f8:	2200      	movs	r2, #0
 80091fa:	f04f 31ff 	mov.w	r1, #4294967295
 80091fe:	487b      	ldr	r0, [pc, #492]	; (80093ec <cppLoop+0x18a4>)
 8009200:	f7f9 f814 	bl	800222c <_ZN3LED2LREaa>
		break;
 8009204:	f000 bc88 	b.w	8009b18 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_C){
 8009208:	4877      	ldr	r0, [pc, #476]	; (80093e8 <cppLoop+0x18a0>)
 800920a:	f7f8 feef 	bl	8001fec <_ZN8JoyStick8getValueEv>
 800920e:	4603      	mov	r3, r0
 8009210:	2b02      	cmp	r3, #2
 8009212:	bf0c      	ite	eq
 8009214:	2301      	moveq	r3, #1
 8009216:	2300      	movne	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 847c 	beq.w	8009b18 <cppLoop+0x1fd0>
			led.LR(-1, 1);
 8009220:	2201      	movs	r2, #1
 8009222:	f04f 31ff 	mov.w	r1, #4294967295
 8009226:	4871      	ldr	r0, [pc, #452]	; (80093ec <cppLoop+0x18a4>)
 8009228:	f7f9 f800 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800922c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009230:	f000 fdaa 	bl	8009d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8009234:	2300      	movs	r3, #0
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4b6e      	ldr	r3, [pc, #440]	; (80093f4 <cppLoop+0x18ac>)
 800923a:	2201      	movs	r2, #1
 800923c:	496f      	ldr	r1, [pc, #444]	; (80093fc <cppLoop+0x18b4>)
 800923e:	4870      	ldr	r0, [pc, #448]	; (8009400 <cppLoop+0x18b8>)
 8009240:	f7f8 fabe 	bl	80017c0 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8009244:	2300      	movs	r3, #0
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4b6b      	ldr	r3, [pc, #428]	; (80093f8 <cppLoop+0x18b0>)
 800924a:	2201      	movs	r2, #1
 800924c:	496d      	ldr	r1, [pc, #436]	; (8009404 <cppLoop+0x18bc>)
 800924e:	486c      	ldr	r0, [pc, #432]	; (8009400 <cppLoop+0x18b8>)
 8009250:	f7f8 fab6 	bl	80017c0 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8009254:	4b67      	ldr	r3, [pc, #412]	; (80093f4 <cppLoop+0x18ac>)
 8009256:	edd3 7a00 	vldr	s15, [r3]
 800925a:	4b67      	ldr	r3, [pc, #412]	; (80093f8 <cppLoop+0x18b0>)
 800925c:	ed93 7a00 	vldr	s14, [r3]
 8009260:	eef0 0a47 	vmov.f32	s1, s14
 8009264:	eeb0 0a67 	vmov.f32	s0, s15
 8009268:	4867      	ldr	r0, [pc, #412]	; (8009408 <cppLoop+0x18c0>)
 800926a:	f7fa fdc0 	bl	8003dee <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800926e:	2200      	movs	r2, #0
 8009270:	f04f 31ff 	mov.w	r1, #4294967295
 8009274:	485d      	ldr	r0, [pc, #372]	; (80093ec <cppLoop+0x18a4>)
 8009276:	f7f8 ffd9 	bl	800222c <_ZN3LED2LREaa>
		break;
 800927a:	f000 bc4d 	b.w	8009b18 <cppLoop+0x1fd0>

	case 9:
		led.fullColor('~');
 800927e:	217e      	movs	r1, #126	; 0x7e
 8009280:	485a      	ldr	r0, [pc, #360]	; (80093ec <cppLoop+0x18a4>)
 8009282:	f7f8 ff17 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009286:	f7f7 ff0b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800928a:	2100      	movs	r1, #0
 800928c:	2000      	movs	r0, #0
 800928e:	f7f7 ff17 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009292:	485e      	ldr	r0, [pc, #376]	; (800940c <cppLoop+0x18c4>)
 8009294:	f7f7 ff3e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009298:	2101      	movs	r1, #1
 800929a:	2000      	movs	r0, #0
 800929c:	f7f7 ff10 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80092a0:	485b      	ldr	r0, [pc, #364]	; (8009410 <cppLoop+0x18c8>)
 80092a2:	f7f7 ff37 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80092a6:	4850      	ldr	r0, [pc, #320]	; (80093e8 <cppLoop+0x18a0>)
 80092a8:	f7f8 fea0 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	bf0c      	ite	eq
 80092b2:	2301      	moveq	r3, #1
 80092b4:	2300      	movne	r3, #0
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 842f 	beq.w	8009b1c <cppLoop+0x1fd4>
			led.LR(-1, 1);
 80092be:	2201      	movs	r2, #1
 80092c0:	f04f 31ff 	mov.w	r1, #4294967295
 80092c4:	4849      	ldr	r0, [pc, #292]	; (80093ec <cppLoop+0x18a4>)
 80092c6:	f7f8 ffb1 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80092ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092ce:	f000 fd5b 	bl	8009d88 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80092d2:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8009414 <cppLoop+0x18cc>
 80092d6:	484c      	ldr	r0, [pc, #304]	; (8009408 <cppLoop+0x18c0>)
 80092d8:	f7fa fcc0 	bl	8003c5c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80092dc:	484a      	ldr	r0, [pc, #296]	; (8009408 <cppLoop+0x18c0>)
 80092de:	f7fa ff2d 	bl	800413c <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80092e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092e6:	f000 fd4f 	bl	8009d88 <HAL_Delay>

			led.fullColor('R');
 80092ea:	2152      	movs	r1, #82	; 0x52
 80092ec:	483f      	ldr	r0, [pc, #252]	; (80093ec <cppLoop+0x18a4>)
 80092ee:	f7f8 fee1 	bl	80020b4 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80092f2:	4849      	ldr	r0, [pc, #292]	; (8009418 <cppLoop+0x18d0>)
 80092f4:	f7f8 f9b6 	bl	8001664 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80092f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80092fc:	f000 fd44 	bl	8009d88 <HAL_Delay>

			line_trace.stop();
 8009300:	4841      	ldr	r0, [pc, #260]	; (8009408 <cppLoop+0x18c0>)
 8009302:	f7fa ffc7 	bl	8004294 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8009306:	4945      	ldr	r1, [pc, #276]	; (800941c <cppLoop+0x18d4>)
 8009308:	4845      	ldr	r0, [pc, #276]	; (8009420 <cppLoop+0x18d8>)
 800930a:	f7f8 f9e4 	bl	80016d6 <user_fopen>
			float d = encoder.getDistance();
 800930e:	4842      	ldr	r0, [pc, #264]	; (8009418 <cppLoop+0x18d0>)
 8009310:	f7f8 f96c 	bl	80015ec <_ZN7Encoder11getDistanceEv>
 8009314:	eef0 7a40 	vmov.f32	s15, s0
 8009318:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 800931c:	1d3b      	adds	r3, r7, #4
 800931e:	2201      	movs	r2, #1
 8009320:	4619      	mov	r1, r3
 8009322:	2001      	movs	r0, #1
 8009324:	f7f8 f9fa 	bl	800171c <sd_write_float>
			user_fclose();
 8009328:	f7f8 f9e8 	bl	80016fc <user_fclose>

			led.LR(-1, 0);
 800932c:	2200      	movs	r2, #0
 800932e:	f04f 31ff 	mov.w	r1, #4294967295
 8009332:	482e      	ldr	r0, [pc, #184]	; (80093ec <cppLoop+0x18a4>)
 8009334:	f7f8 ff7a 	bl	800222c <_ZN3LED2LREaa>
		}
		break;
 8009338:	e3f0      	b.n	8009b1c <cppLoop+0x1fd4>

	case 10:
		led.fullColor('~');
 800933a:	217e      	movs	r1, #126	; 0x7e
 800933c:	482b      	ldr	r0, [pc, #172]	; (80093ec <cppLoop+0x18a4>)
 800933e:	f7f8 feb9 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009342:	f7f7 fead 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009346:	2100      	movs	r1, #0
 8009348:	2000      	movs	r0, #0
 800934a:	f7f7 feb9 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800934e:	4835      	ldr	r0, [pc, #212]	; (8009424 <cppLoop+0x18dc>)
 8009350:	f7f7 fee0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009354:	2101      	movs	r1, #1
 8009356:	2000      	movs	r0, #0
 8009358:	f7f7 feb2 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800935c:	4832      	ldr	r0, [pc, #200]	; (8009428 <cppLoop+0x18e0>)
 800935e:	f7f7 fed9 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009362:	4821      	ldr	r0, [pc, #132]	; (80093e8 <cppLoop+0x18a0>)
 8009364:	f7f8 fe42 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8009368:	4603      	mov	r3, r0
 800936a:	2b02      	cmp	r3, #2
 800936c:	bf0c      	ite	eq
 800936e:	2301      	moveq	r3, #1
 8009370:	2300      	movne	r3, #0
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 83d3 	beq.w	8009b20 <cppLoop+0x1fd8>
			HAL_Delay(500);
 800937a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800937e:	f000 fd03 	bl	8009d88 <HAL_Delay>
			led.LR(-1, 1);
 8009382:	2201      	movs	r2, #1
 8009384:	f04f 31ff 	mov.w	r1, #4294967295
 8009388:	4818      	ldr	r0, [pc, #96]	; (80093ec <cppLoop+0x18a4>)
 800938a:	f7f8 ff4f 	bl	800222c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800938e:	2102      	movs	r1, #2
 8009390:	481d      	ldr	r0, [pc, #116]	; (8009408 <cppLoop+0x18c0>)
 8009392:	f7fa fec1 	bl	8004118 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009396:	4b25      	ldr	r3, [pc, #148]	; (800942c <cppLoop+0x18e4>)
 8009398:	edd3 7a00 	vldr	s15, [r3]
 800939c:	eeb0 0a67 	vmov.f32	s0, s15
 80093a0:	4819      	ldr	r0, [pc, #100]	; (8009408 <cppLoop+0x18c0>)
 80093a2:	f7fa fc6a 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80093a6:	4b21      	ldr	r3, [pc, #132]	; (800942c <cppLoop+0x18e4>)
 80093a8:	edd3 7a00 	vldr	s15, [r3]
 80093ac:	eeb0 0a67 	vmov.f32	s0, s15
 80093b0:	4815      	ldr	r0, [pc, #84]	; (8009408 <cppLoop+0x18c0>)
 80093b2:	f7fa fc72 	bl	8003c9a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80093b6:	4b1d      	ldr	r3, [pc, #116]	; (800942c <cppLoop+0x18e4>)
 80093b8:	edd3 7a00 	vldr	s15, [r3]
 80093bc:	eeb0 0a67 	vmov.f32	s0, s15
 80093c0:	4811      	ldr	r0, [pc, #68]	; (8009408 <cppLoop+0x18c0>)
 80093c2:	f7fa fc8a 	bl	8003cda <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80093c6:	4810      	ldr	r0, [pc, #64]	; (8009408 <cppLoop+0x18c0>)
 80093c8:	f7fb f8b4 	bl	8004534 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80093cc:	2200      	movs	r2, #0
 80093ce:	f04f 31ff 	mov.w	r1, #4294967295
 80093d2:	4806      	ldr	r0, [pc, #24]	; (80093ec <cppLoop+0x18a4>)
 80093d4:	f7f8 ff2a 	bl	800222c <_ZN3LED2LREaa>
		}

		break;
 80093d8:	e3a2      	b.n	8009b20 <cppLoop+0x1fd8>
 80093da:	bf00      	nop
 80093dc:	f3af 8000 	nop.w
 80093e0:	9999999a 	.word	0x9999999a
 80093e4:	3fb99999 	.word	0x3fb99999
 80093e8:	20000560 	.word	0x20000560
 80093ec:	2000056c 	.word	0x2000056c
 80093f0:	20048134 	.word	0x20048134
 80093f4:	200481a4 	.word	0x200481a4
 80093f8:	200481ac 	.word	0x200481ac
 80093fc:	08019f94 	.word	0x08019f94
 8009400:	08019e98 	.word	0x08019e98
 8009404:	08019fa0 	.word	0x08019fa0
 8009408:	200238bc 	.word	0x200238bc
 800940c:	08019fac 	.word	0x08019fac
 8009410:	08019fb4 	.word	0x08019fb4
 8009414:	00000000 	.word	0x00000000
 8009418:	2002381c 	.word	0x2002381c
 800941c:	08019fc0 	.word	0x08019fc0
 8009420:	08019fc8 	.word	0x08019fc8
 8009424:	08019fd4 	.word	0x08019fd4
 8009428:	08019fe0 	.word	0x08019fe0
 800942c:	2004817c 	.word	0x2004817c

	case 11:
		led.fullColor('~');
 8009430:	217e      	movs	r1, #126	; 0x7e
 8009432:	48bc      	ldr	r0, [pc, #752]	; (8009724 <cppLoop+0x1bdc>)
 8009434:	f7f8 fe3e 	bl	80020b4 <_ZN3LED9fullColorEc>

lcd_clear();
 8009438:	f7f7 fe32 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800943c:	2100      	movs	r1, #0
 800943e:	2000      	movs	r0, #0
 8009440:	f7f7 fe3e 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8009444:	48b8      	ldr	r0, [pc, #736]	; (8009728 <cppLoop+0x1be0>)
 8009446:	f7f7 fe65 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800944a:	2101      	movs	r1, #1
 800944c:	2000      	movs	r0, #0
 800944e:	f7f7 fe37 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009452:	48b6      	ldr	r0, [pc, #728]	; (800972c <cppLoop+0x1be4>)
 8009454:	f7f7 fe5e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009458:	48b5      	ldr	r0, [pc, #724]	; (8009730 <cppLoop+0x1be8>)
 800945a:	f7f8 fdc7 	bl	8001fec <_ZN8JoyStick8getValueEv>
 800945e:	4603      	mov	r3, r0
 8009460:	2b02      	cmp	r3, #2
 8009462:	bf0c      	ite	eq
 8009464:	2301      	moveq	r3, #1
 8009466:	2300      	movne	r3, #0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 835a 	beq.w	8009b24 <cppLoop+0x1fdc>
			HAL_Delay(1000);
 8009470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009474:	f000 fc88 	bl	8009d88 <HAL_Delay>
			led.LR(-1, 1);
 8009478:	2201      	movs	r2, #1
 800947a:	f04f 31ff 	mov.w	r1, #4294967295
 800947e:	48a9      	ldr	r0, [pc, #676]	; (8009724 <cppLoop+0x1bdc>)
 8009480:	f7f8 fed4 	bl	800222c <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009484:	eddf 1aab 	vldr	s3, [pc, #684]	; 8009734 <cppLoop+0x1bec>
 8009488:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 8009734 <cppLoop+0x1bec>
 800948c:	eddf 0aa9 	vldr	s1, [pc, #676]	; 8009734 <cppLoop+0x1bec>
 8009490:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8009734 <cppLoop+0x1bec>
 8009494:	48a8      	ldr	r0, [pc, #672]	; (8009738 <cppLoop+0x1bf0>)
 8009496:	f7f7 fedb 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800949a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800949e:	f000 fc73 	bl	8009d88 <HAL_Delay>
			esc.off();
 80094a2:	48a5      	ldr	r0, [pc, #660]	; (8009738 <cppLoop+0x1bf0>)
 80094a4:	f7f7 ff6e 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 80094a8:	2200      	movs	r2, #0
 80094aa:	f04f 31ff 	mov.w	r1, #4294967295
 80094ae:	489d      	ldr	r0, [pc, #628]	; (8009724 <cppLoop+0x1bdc>)
 80094b0:	f7f8 febc 	bl	800222c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 80094b4:	e336      	b.n	8009b24 <cppLoop+0x1fdc>

	case 12:
		led.fullColor('~');
 80094b6:	217e      	movs	r1, #126	; 0x7e
 80094b8:	489a      	ldr	r0, [pc, #616]	; (8009724 <cppLoop+0x1bdc>)
 80094ba:	f7f8 fdfb 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094be:	f7f7 fdef 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094c2:	2100      	movs	r1, #0
 80094c4:	2000      	movs	r0, #0
 80094c6:	f7f7 fdfb 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80094ca:	489c      	ldr	r0, [pc, #624]	; (800973c <cppLoop+0x1bf4>)
 80094cc:	f7f7 fe22 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094d0:	2101      	movs	r1, #1
 80094d2:	2000      	movs	r0, #0
 80094d4:	f7f7 fdf4 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80094d8:	4899      	ldr	r0, [pc, #612]	; (8009740 <cppLoop+0x1bf8>)
 80094da:	f7f7 fe1b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80094de:	4894      	ldr	r0, [pc, #592]	; (8009730 <cppLoop+0x1be8>)
 80094e0:	f7f8 fd84 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 8319 	beq.w	8009b28 <cppLoop+0x1fe0>
			HAL_Delay(1500);
 80094f6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80094fa:	f000 fc45 	bl	8009d88 <HAL_Delay>
			led.LR(-1, 1);
 80094fe:	2201      	movs	r2, #1
 8009500:	f04f 31ff 	mov.w	r1, #4294967295
 8009504:	4887      	ldr	r0, [pc, #540]	; (8009724 <cppLoop+0x1bdc>)
 8009506:	f7f8 fe91 	bl	800222c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800950a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800950e:	f000 fc3b 	bl	8009d88 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009512:	eddf 1a88 	vldr	s3, [pc, #544]	; 8009734 <cppLoop+0x1bec>
 8009516:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8009734 <cppLoop+0x1bec>
 800951a:	eddf 0a86 	vldr	s1, [pc, #536]	; 8009734 <cppLoop+0x1bec>
 800951e:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8009734 <cppLoop+0x1bec>
 8009522:	4885      	ldr	r0, [pc, #532]	; (8009738 <cppLoop+0x1bf0>)
 8009524:	f7f7 fe94 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800952c:	f000 fc2c 	bl	8009d88 <HAL_Delay>

			logger.start();
 8009530:	4884      	ldr	r0, [pc, #528]	; (8009744 <cppLoop+0x1bfc>)
 8009532:	f7fb fb9d 	bl	8004c70 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009536:	4884      	ldr	r0, [pc, #528]	; (8009748 <cppLoop+0x1c00>)
 8009538:	f7fc fc83 	bl	8005e42 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 800953c:	eddf 0a83 	vldr	s1, [pc, #524]	; 800974c <cppLoop+0x1c04>
 8009540:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009544:	4880      	ldr	r0, [pc, #512]	; (8009748 <cppLoop+0x1c00>)
 8009546:	f7fc fc0f 	bl	8005d68 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800954a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800954e:	f000 fc1b 	bl	8009d88 <HAL_Delay>

			logger.stop();
 8009552:	487c      	ldr	r0, [pc, #496]	; (8009744 <cppLoop+0x1bfc>)
 8009554:	f7fb fbab 	bl	8004cae <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009558:	487b      	ldr	r0, [pc, #492]	; (8009748 <cppLoop+0x1c00>)
 800955a:	f7fc fc85 	bl	8005e68 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 800955e:	4876      	ldr	r0, [pc, #472]	; (8009738 <cppLoop+0x1bf0>)
 8009560:	f7f7 ff10 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009564:	4a7a      	ldr	r2, [pc, #488]	; (8009750 <cppLoop+0x1c08>)
 8009566:	497b      	ldr	r1, [pc, #492]	; (8009754 <cppLoop+0x1c0c>)
 8009568:	4876      	ldr	r0, [pc, #472]	; (8009744 <cppLoop+0x1bfc>)
 800956a:	f7fb fa7c 	bl	8004a66 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800956e:	2200      	movs	r2, #0
 8009570:	f04f 31ff 	mov.w	r1, #4294967295
 8009574:	486b      	ldr	r0, [pc, #428]	; (8009724 <cppLoop+0x1bdc>)
 8009576:	f7f8 fe59 	bl	800222c <_ZN3LED2LREaa>
		}
		break;
 800957a:	e2d5      	b.n	8009b28 <cppLoop+0x1fe0>

	case 13:

		led.fullColor('W');
 800957c:	2157      	movs	r1, #87	; 0x57
 800957e:	4869      	ldr	r0, [pc, #420]	; (8009724 <cppLoop+0x1bdc>)
 8009580:	f7f8 fd98 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009584:	f7f7 fd8c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009588:	2100      	movs	r1, #0
 800958a:	2000      	movs	r0, #0
 800958c:	f7f7 fd98 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009590:	4871      	ldr	r0, [pc, #452]	; (8009758 <cppLoop+0x1c10>)
 8009592:	f7f7 fdbf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009596:	2101      	movs	r1, #1
 8009598:	2000      	movs	r0, #0
 800959a:	f7f7 fd91 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800959e:	4b6f      	ldr	r3, [pc, #444]	; (800975c <cppLoop+0x1c14>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7f6 ffe8 	bl	8000578 <__aeabi_f2d>
 80095a8:	4603      	mov	r3, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	461a      	mov	r2, r3
 80095ae:	4623      	mov	r3, r4
 80095b0:	486b      	ldr	r0, [pc, #428]	; (8009760 <cppLoop+0x1c18>)
 80095b2:	f7f7 fdaf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095b6:	485e      	ldr	r0, [pc, #376]	; (8009730 <cppLoop+0x1be8>)
 80095b8:	f7f8 fd18 	bl	8001fec <_ZN8JoyStick8getValueEv>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b02      	cmp	r3, #2
 80095c0:	bf0c      	ite	eq
 80095c2:	2301      	moveq	r3, #1
 80095c4:	2300      	movne	r3, #0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 82af 	beq.w	8009b2c <cppLoop+0x1fe4>
			HAL_Delay(500);
 80095ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095d2:	f000 fbd9 	bl	8009d88 <HAL_Delay>

			led.LR(1, -1);
 80095d6:	f04f 32ff 	mov.w	r2, #4294967295
 80095da:	2101      	movs	r1, #1
 80095dc:	4851      	ldr	r0, [pc, #324]	; (8009724 <cppLoop+0x1bdc>)
 80095de:	f7f8 fe25 	bl	800222c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80095e2:	2102      	movs	r1, #2
 80095e4:	485f      	ldr	r0, [pc, #380]	; (8009764 <cppLoop+0x1c1c>)
 80095e6:	f7fa fd97 	bl	8004118 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80095ea:	4b5f      	ldr	r3, [pc, #380]	; (8009768 <cppLoop+0x1c20>)
 80095ec:	edd3 7a00 	vldr	s15, [r3]
 80095f0:	eeb0 0a67 	vmov.f32	s0, s15
 80095f4:	485b      	ldr	r0, [pc, #364]	; (8009764 <cppLoop+0x1c1c>)
 80095f6:	f7fa fb40 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80095fa:	4b58      	ldr	r3, [pc, #352]	; (800975c <cppLoop+0x1c14>)
 80095fc:	edd3 7a00 	vldr	s15, [r3]
 8009600:	eeb0 0a67 	vmov.f32	s0, s15
 8009604:	4857      	ldr	r0, [pc, #348]	; (8009764 <cppLoop+0x1c1c>)
 8009606:	f7fa fb48 	bl	8003c9a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800960a:	4b54      	ldr	r3, [pc, #336]	; (800975c <cppLoop+0x1c14>)
 800960c:	edd3 7a00 	vldr	s15, [r3]
 8009610:	eeb0 0a67 	vmov.f32	s0, s15
 8009614:	4853      	ldr	r0, [pc, #332]	; (8009764 <cppLoop+0x1c1c>)
 8009616:	f7fa fb60 	bl	8003cda <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800961a:	4852      	ldr	r0, [pc, #328]	; (8009764 <cppLoop+0x1c1c>)
 800961c:	f7fa ff8a 	bl	8004534 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009624:	f000 fbb0 	bl	8009d88 <HAL_Delay>

			line_trace.running();
 8009628:	484e      	ldr	r0, [pc, #312]	; (8009764 <cppLoop+0x1c1c>)
 800962a:	f7fa fdb9 	bl	80041a0 <_ZN9LineTrace7runningEv>

			esc.off();
 800962e:	4842      	ldr	r0, [pc, #264]	; (8009738 <cppLoop+0x1bf0>)
 8009630:	f7f7 fea8 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8009634:	f04f 32ff 	mov.w	r2, #4294967295
 8009638:	2100      	movs	r1, #0
 800963a:	483a      	ldr	r0, [pc, #232]	; (8009724 <cppLoop+0x1bdc>)
 800963c:	f7f8 fdf6 	bl	800222c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009640:	e274      	b.n	8009b2c <cppLoop+0x1fe4>

	case 14:
		led.fullColor('W');
 8009642:	2157      	movs	r1, #87	; 0x57
 8009644:	4837      	ldr	r0, [pc, #220]	; (8009724 <cppLoop+0x1bdc>)
 8009646:	f7f8 fd35 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800964a:	f7f7 fd29 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800964e:	2100      	movs	r1, #0
 8009650:	2000      	movs	r0, #0
 8009652:	f7f7 fd35 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009656:	4845      	ldr	r0, [pc, #276]	; (800976c <cppLoop+0x1c24>)
 8009658:	f7f7 fd5c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800965c:	2101      	movs	r1, #1
 800965e:	2000      	movs	r0, #0
 8009660:	f7f7 fd2e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009664:	4b42      	ldr	r3, [pc, #264]	; (8009770 <cppLoop+0x1c28>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4618      	mov	r0, r3
 800966a:	f7f6 ff85 	bl	8000578 <__aeabi_f2d>
 800966e:	4603      	mov	r3, r0
 8009670:	460c      	mov	r4, r1
 8009672:	461a      	mov	r2, r3
 8009674:	4623      	mov	r3, r4
 8009676:	483a      	ldr	r0, [pc, #232]	; (8009760 <cppLoop+0x1c18>)
 8009678:	f7f7 fd4c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800967c:	482c      	ldr	r0, [pc, #176]	; (8009730 <cppLoop+0x1be8>)
 800967e:	f7f8 fcb5 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8009682:	4603      	mov	r3, r0
 8009684:	2b02      	cmp	r3, #2
 8009686:	bf0c      	ite	eq
 8009688:	2301      	moveq	r3, #1
 800968a:	2300      	movne	r3, #0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 824e 	beq.w	8009b30 <cppLoop+0x1fe8>
			HAL_Delay(500);
 8009694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009698:	f000 fb76 	bl	8009d88 <HAL_Delay>

			led.LR(1, -1);
 800969c:	f04f 32ff 	mov.w	r2, #4294967295
 80096a0:	2101      	movs	r1, #1
 80096a2:	4820      	ldr	r0, [pc, #128]	; (8009724 <cppLoop+0x1bdc>)
 80096a4:	f7f8 fdc2 	bl	800222c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80096a8:	2101      	movs	r1, #1
 80096aa:	482e      	ldr	r0, [pc, #184]	; (8009764 <cppLoop+0x1c1c>)
 80096ac:	f7fa fd34 	bl	8004118 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80096b0:	4b30      	ldr	r3, [pc, #192]	; (8009774 <cppLoop+0x1c2c>)
 80096b2:	edd3 7a00 	vldr	s15, [r3]
 80096b6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ba:	482a      	ldr	r0, [pc, #168]	; (8009764 <cppLoop+0x1c1c>)
 80096bc:	f7fa fadd 	bl	8003c7a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80096c0:	4b2b      	ldr	r3, [pc, #172]	; (8009770 <cppLoop+0x1c28>)
 80096c2:	edd3 7a00 	vldr	s15, [r3]
 80096c6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ca:	4826      	ldr	r0, [pc, #152]	; (8009764 <cppLoop+0x1c1c>)
 80096cc:	f7fa fae5 	bl	8003c9a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80096d0:	4b28      	ldr	r3, [pc, #160]	; (8009774 <cppLoop+0x1c2c>)
 80096d2:	edd3 7a00 	vldr	s15, [r3]
 80096d6:	eeb0 0a67 	vmov.f32	s0, s15
 80096da:	4822      	ldr	r0, [pc, #136]	; (8009764 <cppLoop+0x1c1c>)
 80096dc:	f7fa fafd 	bl	8003cda <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096e0:	4820      	ldr	r0, [pc, #128]	; (8009764 <cppLoop+0x1c1c>)
 80096e2:	f7fa ff27 	bl	8004534 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 80096e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096ea:	f000 fb4d 	bl	8009d88 <HAL_Delay>

			logger.start();
 80096ee:	4815      	ldr	r0, [pc, #84]	; (8009744 <cppLoop+0x1bfc>)
 80096f0:	f7fb fabe 	bl	8004c70 <_ZN6Logger5startEv>

			line_trace.running();
 80096f4:	481b      	ldr	r0, [pc, #108]	; (8009764 <cppLoop+0x1c1c>)
 80096f6:	f7fa fd53 	bl	80041a0 <_ZN9LineTrace7runningEv>

			logger.stop();
 80096fa:	4812      	ldr	r0, [pc, #72]	; (8009744 <cppLoop+0x1bfc>)
 80096fc:	f7fb fad7 	bl	8004cae <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "CURVEL.txt");
 8009700:	4a1d      	ldr	r2, [pc, #116]	; (8009778 <cppLoop+0x1c30>)
 8009702:	491e      	ldr	r1, [pc, #120]	; (800977c <cppLoop+0x1c34>)
 8009704:	480f      	ldr	r0, [pc, #60]	; (8009744 <cppLoop+0x1bfc>)
 8009706:	f7fb f9ae 	bl	8004a66 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TARVEL.txt");
 800970a:	4a1d      	ldr	r2, [pc, #116]	; (8009780 <cppLoop+0x1c38>)
 800970c:	491b      	ldr	r1, [pc, #108]	; (800977c <cppLoop+0x1c34>)
 800970e:	480d      	ldr	r0, [pc, #52]	; (8009744 <cppLoop+0x1bfc>)
 8009710:	f7fb f9bd 	bl	8004a8e <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 8009714:	f04f 32ff 	mov.w	r2, #4294967295
 8009718:	2100      	movs	r1, #0
 800971a:	4802      	ldr	r0, [pc, #8]	; (8009724 <cppLoop+0x1bdc>)
 800971c:	f7f8 fd86 	bl	800222c <_ZN3LED2LREaa>
		}

		break;
 8009720:	e206      	b.n	8009b30 <cppLoop+0x1fe8>
 8009722:	bf00      	nop
 8009724:	2000056c 	.word	0x2000056c
 8009728:	08019fec 	.word	0x08019fec
 800972c:	08019ff0 	.word	0x08019ff0
 8009730:	20000560 	.word	0x20000560
 8009734:	3ea3d70a 	.word	0x3ea3d70a
 8009738:	200238b8 	.word	0x200238b8
 800973c:	08019ff8 	.word	0x08019ff8
 8009740:	08019ffc 	.word	0x08019ffc
 8009744:	20000590 	.word	0x20000590
 8009748:	2002383c 	.word	0x2002383c
 800974c:	00000000 	.word	0x00000000
 8009750:	0801a008 	.word	0x0801a008
 8009754:	0801a014 	.word	0x0801a014
 8009758:	0801a020 	.word	0x0801a020
 800975c:	2004817c 	.word	0x2004817c
 8009760:	08019ec4 	.word	0x08019ec4
 8009764:	200238bc 	.word	0x200238bc
 8009768:	2004818c 	.word	0x2004818c
 800976c:	0801a02c 	.word	0x0801a02c
 8009770:	20048174 	.word	0x20048174
 8009774:	20048184 	.word	0x20048184
 8009778:	08019ee8 	.word	0x08019ee8
 800977c:	08019edc 	.word	0x08019edc
 8009780:	08019ed0 	.word	0x08019ed0

	case 15:
		led.fullColor('W');
 8009784:	2157      	movs	r1, #87	; 0x57
 8009786:	48ac      	ldr	r0, [pc, #688]	; (8009a38 <cppLoop+0x1ef0>)
 8009788:	f7f8 fc94 	bl	80020b4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800978c:	f7f7 fc88 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009790:	2100      	movs	r1, #0
 8009792:	2000      	movs	r0, #0
 8009794:	f7f7 fc94 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8009798:	48a8      	ldr	r0, [pc, #672]	; (8009a3c <cppLoop+0x1ef4>)
 800979a:	f7fa f9ec 	bl	8003b76 <_ZN9LineTrace5getKpEv>
 800979e:	eeb0 7a40 	vmov.f32	s14, s0
 80097a2:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009a40 <cppLoop+0x1ef8>
 80097a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097aa:	eeb0 0a67 	vmov.f32	s0, s15
 80097ae:	f7f9 f843 	bl	8002838 <_ZSt3absf>
 80097b2:	ee10 3a10 	vmov	r3, s0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f6 fede 	bl	8000578 <__aeabi_f2d>
 80097bc:	4603      	mov	r3, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	461a      	mov	r2, r3
 80097c2:	4623      	mov	r3, r4
 80097c4:	489f      	ldr	r0, [pc, #636]	; (8009a44 <cppLoop+0x1efc>)
 80097c6:	f7f7 fca5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80097ca:	2101      	movs	r1, #1
 80097cc:	2000      	movs	r0, #0
 80097ce:	f7f7 fc77 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*100000));
 80097d2:	489a      	ldr	r0, [pc, #616]	; (8009a3c <cppLoop+0x1ef4>)
 80097d4:	f7fa f9de 	bl	8003b94 <_ZN9LineTrace5getKiEv>
 80097d8:	eeb0 7a40 	vmov.f32	s14, s0
 80097dc:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009a48 <cppLoop+0x1f00>
 80097e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e4:	eeb0 0a67 	vmov.f32	s0, s15
 80097e8:	f7f9 f826 	bl	8002838 <_ZSt3absf>
 80097ec:	ee10 3a10 	vmov	r3, s0
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f6 fec1 	bl	8000578 <__aeabi_f2d>
 80097f6:	4605      	mov	r5, r0
 80097f8:	460e      	mov	r6, r1
 80097fa:	4890      	ldr	r0, [pc, #576]	; (8009a3c <cppLoop+0x1ef4>)
 80097fc:	f7fa f9d9 	bl	8003bb2 <_ZN9LineTrace5getKdEv>
 8009800:	eeb0 7a40 	vmov.f32	s14, s0
 8009804:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009a4c <cppLoop+0x1f04>
 8009808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800980c:	eeb0 0a67 	vmov.f32	s0, s15
 8009810:	f7f9 f812 	bl	8002838 <_ZSt3absf>
 8009814:	ee10 3a10 	vmov	r3, s0
 8009818:	4618      	mov	r0, r3
 800981a:	f7f6 fead 	bl	8000578 <__aeabi_f2d>
 800981e:	4603      	mov	r3, r0
 8009820:	460c      	mov	r4, r1
 8009822:	e9cd 3400 	strd	r3, r4, [sp]
 8009826:	462a      	mov	r2, r5
 8009828:	4633      	mov	r3, r6
 800982a:	4889      	ldr	r0, [pc, #548]	; (8009a50 <cppLoop+0x1f08>)
 800982c:	f7f7 fc72 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009830:	4888      	ldr	r0, [pc, #544]	; (8009a54 <cppLoop+0x1f0c>)
 8009832:	f7f8 fbdb 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8009836:	4603      	mov	r3, r0
 8009838:	2b08      	cmp	r3, #8
 800983a:	bf0c      	ite	eq
 800983c:	2301      	moveq	r3, #1
 800983e:	2300      	movne	r3, #0
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d021      	beq.n	800988a <cppLoop+0x1d42>
			led.LR(-1, 1);
 8009846:	2201      	movs	r2, #1
 8009848:	f04f 31ff 	mov.w	r1, #4294967295
 800984c:	487a      	ldr	r0, [pc, #488]	; (8009a38 <cppLoop+0x1ef0>)
 800984e:	f7f8 fced 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009852:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009856:	f000 fa97 	bl	8009d88 <HAL_Delay>

			selector++;
 800985a:	4b7f      	ldr	r3, [pc, #508]	; (8009a58 <cppLoop+0x1f10>)
 800985c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009860:	b29b      	uxth	r3, r3
 8009862:	3301      	adds	r3, #1
 8009864:	b29b      	uxth	r3, r3
 8009866:	b21a      	sxth	r2, r3
 8009868:	4b7b      	ldr	r3, [pc, #492]	; (8009a58 <cppLoop+0x1f10>)
 800986a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800986c:	4b7a      	ldr	r3, [pc, #488]	; (8009a58 <cppLoop+0x1f10>)
 800986e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009872:	2b02      	cmp	r3, #2
 8009874:	dd02      	ble.n	800987c <cppLoop+0x1d34>
 8009876:	4b78      	ldr	r3, [pc, #480]	; (8009a58 <cppLoop+0x1f10>)
 8009878:	2200      	movs	r2, #0
 800987a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800987c:	2200      	movs	r2, #0
 800987e:	f04f 31ff 	mov.w	r1, #4294967295
 8009882:	486d      	ldr	r0, [pc, #436]	; (8009a38 <cppLoop+0x1ef0>)
 8009884:	f7f8 fcd2 	bl	800222c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009888:	e154      	b.n	8009b34 <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_R){
 800988a:	4872      	ldr	r0, [pc, #456]	; (8009a54 <cppLoop+0x1f0c>)
 800988c:	f7f8 fbae 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8009890:	4603      	mov	r3, r0
 8009892:	2b10      	cmp	r3, #16
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d058      	beq.n	8009952 <cppLoop+0x1e0a>
			led.LR(-1, 1);
 80098a0:	2201      	movs	r2, #1
 80098a2:	f04f 31ff 	mov.w	r1, #4294967295
 80098a6:	4864      	ldr	r0, [pc, #400]	; (8009a38 <cppLoop+0x1ef0>)
 80098a8:	f7f8 fcc0 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80098ac:	2064      	movs	r0, #100	; 0x64
 80098ae:	f000 fa6b 	bl	8009d88 <HAL_Delay>
			if(selector == 0){
 80098b2:	4b69      	ldr	r3, [pc, #420]	; (8009a58 <cppLoop+0x1f10>)
 80098b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d113      	bne.n	80098e4 <cppLoop+0x1d9c>
				adj_kp = adj_kp + 0.000001;
 80098bc:	4b67      	ldr	r3, [pc, #412]	; (8009a5c <cppLoop+0x1f14>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7f6 fe59 	bl	8000578 <__aeabi_f2d>
 80098c6:	a356      	add	r3, pc, #344	; (adr r3, 8009a20 <cppLoop+0x1ed8>)
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f7f6 fcf6 	bl	80002bc <__adddf3>
 80098d0:	4603      	mov	r3, r0
 80098d2:	460c      	mov	r4, r1
 80098d4:	4618      	mov	r0, r3
 80098d6:	4621      	mov	r1, r4
 80098d8:	f7f7 f99e 	bl	8000c18 <__aeabi_d2f>
 80098dc:	4602      	mov	r2, r0
 80098de:	4b5f      	ldr	r3, [pc, #380]	; (8009a5c <cppLoop+0x1f14>)
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	e02b      	b.n	800993c <cppLoop+0x1df4>
			else if(selector == 1){
 80098e4:	4b5c      	ldr	r3, [pc, #368]	; (8009a58 <cppLoop+0x1f10>)
 80098e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d113      	bne.n	8009916 <cppLoop+0x1dce>
				adj_ki = adj_ki + 0.00001;
 80098ee:	4b5c      	ldr	r3, [pc, #368]	; (8009a60 <cppLoop+0x1f18>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7f6 fe40 	bl	8000578 <__aeabi_f2d>
 80098f8:	a34b      	add	r3, pc, #300	; (adr r3, 8009a28 <cppLoop+0x1ee0>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f7f6 fcdd 	bl	80002bc <__adddf3>
 8009902:	4603      	mov	r3, r0
 8009904:	460c      	mov	r4, r1
 8009906:	4618      	mov	r0, r3
 8009908:	4621      	mov	r1, r4
 800990a:	f7f7 f985 	bl	8000c18 <__aeabi_d2f>
 800990e:	4602      	mov	r2, r0
 8009910:	4b53      	ldr	r3, [pc, #332]	; (8009a60 <cppLoop+0x1f18>)
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	e012      	b.n	800993c <cppLoop+0x1df4>
				adj_kd = adj_kd + 0.0000001;
 8009916:	4b53      	ldr	r3, [pc, #332]	; (8009a64 <cppLoop+0x1f1c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f7f6 fe2c 	bl	8000578 <__aeabi_f2d>
 8009920:	a343      	add	r3, pc, #268	; (adr r3, 8009a30 <cppLoop+0x1ee8>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f7f6 fcc9 	bl	80002bc <__adddf3>
 800992a:	4603      	mov	r3, r0
 800992c:	460c      	mov	r4, r1
 800992e:	4618      	mov	r0, r3
 8009930:	4621      	mov	r1, r4
 8009932:	f7f7 f971 	bl	8000c18 <__aeabi_d2f>
 8009936:	4602      	mov	r2, r0
 8009938:	4b4a      	ldr	r3, [pc, #296]	; (8009a64 <cppLoop+0x1f1c>)
 800993a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800993c:	2152      	movs	r1, #82	; 0x52
 800993e:	483e      	ldr	r0, [pc, #248]	; (8009a38 <cppLoop+0x1ef0>)
 8009940:	f7f8 fbb8 	bl	80020b4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009944:	2200      	movs	r2, #0
 8009946:	f04f 31ff 	mov.w	r1, #4294967295
 800994a:	483b      	ldr	r0, [pc, #236]	; (8009a38 <cppLoop+0x1ef0>)
 800994c:	f7f8 fc6e 	bl	800222c <_ZN3LED2LREaa>
		break;
 8009950:	e0f0      	b.n	8009b34 <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_L){
 8009952:	4840      	ldr	r0, [pc, #256]	; (8009a54 <cppLoop+0x1f0c>)
 8009954:	f7f8 fb4a 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8009958:	4603      	mov	r3, r0
 800995a:	2b01      	cmp	r3, #1
 800995c:	bf0c      	ite	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	2300      	movne	r3, #0
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d07f      	beq.n	8009a68 <cppLoop+0x1f20>
			led.LR(-1, 1);
 8009968:	2201      	movs	r2, #1
 800996a:	f04f 31ff 	mov.w	r1, #4294967295
 800996e:	4832      	ldr	r0, [pc, #200]	; (8009a38 <cppLoop+0x1ef0>)
 8009970:	f7f8 fc5c 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009974:	2064      	movs	r0, #100	; 0x64
 8009976:	f000 fa07 	bl	8009d88 <HAL_Delay>
			if(selector == 0){
 800997a:	4b37      	ldr	r3, [pc, #220]	; (8009a58 <cppLoop+0x1f10>)
 800997c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d113      	bne.n	80099ac <cppLoop+0x1e64>
				adj_kp = adj_kp - 0.000001;
 8009984:	4b35      	ldr	r3, [pc, #212]	; (8009a5c <cppLoop+0x1f14>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4618      	mov	r0, r3
 800998a:	f7f6 fdf5 	bl	8000578 <__aeabi_f2d>
 800998e:	a324      	add	r3, pc, #144	; (adr r3, 8009a20 <cppLoop+0x1ed8>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fc90 	bl	80002b8 <__aeabi_dsub>
 8009998:	4603      	mov	r3, r0
 800999a:	460c      	mov	r4, r1
 800999c:	4618      	mov	r0, r3
 800999e:	4621      	mov	r1, r4
 80099a0:	f7f7 f93a 	bl	8000c18 <__aeabi_d2f>
 80099a4:	4602      	mov	r2, r0
 80099a6:	4b2d      	ldr	r3, [pc, #180]	; (8009a5c <cppLoop+0x1f14>)
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e02b      	b.n	8009a04 <cppLoop+0x1ebc>
			else if(selector == 1){
 80099ac:	4b2a      	ldr	r3, [pc, #168]	; (8009a58 <cppLoop+0x1f10>)
 80099ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d113      	bne.n	80099de <cppLoop+0x1e96>
				adj_ki = adj_ki - 0.00001;
 80099b6:	4b2a      	ldr	r3, [pc, #168]	; (8009a60 <cppLoop+0x1f18>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7f6 fddc 	bl	8000578 <__aeabi_f2d>
 80099c0:	a319      	add	r3, pc, #100	; (adr r3, 8009a28 <cppLoop+0x1ee0>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f7f6 fc77 	bl	80002b8 <__aeabi_dsub>
 80099ca:	4603      	mov	r3, r0
 80099cc:	460c      	mov	r4, r1
 80099ce:	4618      	mov	r0, r3
 80099d0:	4621      	mov	r1, r4
 80099d2:	f7f7 f921 	bl	8000c18 <__aeabi_d2f>
 80099d6:	4602      	mov	r2, r0
 80099d8:	4b21      	ldr	r3, [pc, #132]	; (8009a60 <cppLoop+0x1f18>)
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	e012      	b.n	8009a04 <cppLoop+0x1ebc>
				adj_kd = adj_kd - 0.0000001;
 80099de:	4b21      	ldr	r3, [pc, #132]	; (8009a64 <cppLoop+0x1f1c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7f6 fdc8 	bl	8000578 <__aeabi_f2d>
 80099e8:	a311      	add	r3, pc, #68	; (adr r3, 8009a30 <cppLoop+0x1ee8>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	f7f6 fc63 	bl	80002b8 <__aeabi_dsub>
 80099f2:	4603      	mov	r3, r0
 80099f4:	460c      	mov	r4, r1
 80099f6:	4618      	mov	r0, r3
 80099f8:	4621      	mov	r1, r4
 80099fa:	f7f7 f90d 	bl	8000c18 <__aeabi_d2f>
 80099fe:	4602      	mov	r2, r0
 8009a00:	4b18      	ldr	r3, [pc, #96]	; (8009a64 <cppLoop+0x1f1c>)
 8009a02:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009a04:	2152      	movs	r1, #82	; 0x52
 8009a06:	480c      	ldr	r0, [pc, #48]	; (8009a38 <cppLoop+0x1ef0>)
 8009a08:	f7f8 fb54 	bl	80020b4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8009a12:	4809      	ldr	r0, [pc, #36]	; (8009a38 <cppLoop+0x1ef0>)
 8009a14:	f7f8 fc0a 	bl	800222c <_ZN3LED2LREaa>
		break;
 8009a18:	e08c      	b.n	8009b34 <cppLoop+0x1fec>
 8009a1a:	bf00      	nop
 8009a1c:	f3af 8000 	nop.w
 8009a20:	a0b5ed8d 	.word	0xa0b5ed8d
 8009a24:	3eb0c6f7 	.word	0x3eb0c6f7
 8009a28:	88e368f1 	.word	0x88e368f1
 8009a2c:	3ee4f8b5 	.word	0x3ee4f8b5
 8009a30:	9abcaf48 	.word	0x9abcaf48
 8009a34:	3e7ad7f2 	.word	0x3e7ad7f2
 8009a38:	2000056c 	.word	0x2000056c
 8009a3c:	200238bc 	.word	0x200238bc
 8009a40:	461c4000 	.word	0x461c4000
 8009a44:	0801a038 	.word	0x0801a038
 8009a48:	447a0000 	.word	0x447a0000
 8009a4c:	47c35000 	.word	0x47c35000
 8009a50:	08019e7c 	.word	0x08019e7c
 8009a54:	20000560 	.word	0x20000560
 8009a58:	20048130 	.word	0x20048130
 8009a5c:	2004813c 	.word	0x2004813c
 8009a60:	20048144 	.word	0x20048144
 8009a64:	2004814c 	.word	0x2004814c
		else if(joy_stick.getValue() == JOY_C){
 8009a68:	4836      	ldr	r0, [pc, #216]	; (8009b44 <cppLoop+0x1ffc>)
 8009a6a:	f7f8 fabf 	bl	8001fec <_ZN8JoyStick8getValueEv>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	bf0c      	ite	eq
 8009a74:	2301      	moveq	r3, #1
 8009a76:	2300      	movne	r3, #0
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d05a      	beq.n	8009b34 <cppLoop+0x1fec>
			led.LR(-1, 1);
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f04f 31ff 	mov.w	r1, #4294967295
 8009a84:	4830      	ldr	r0, [pc, #192]	; (8009b48 <cppLoop+0x2000>)
 8009a86:	f7f8 fbd1 	bl	800222c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009a8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009a8e:	f000 f97b 	bl	8009d88 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009a92:	2300      	movs	r3, #0
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	4b2d      	ldr	r3, [pc, #180]	; (8009b4c <cppLoop+0x2004>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	492d      	ldr	r1, [pc, #180]	; (8009b50 <cppLoop+0x2008>)
 8009a9c:	482d      	ldr	r0, [pc, #180]	; (8009b54 <cppLoop+0x200c>)
 8009a9e:	f7f7 fe8f 	bl	80017c0 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	4b2c      	ldr	r3, [pc, #176]	; (8009b58 <cppLoop+0x2010>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	492c      	ldr	r1, [pc, #176]	; (8009b5c <cppLoop+0x2014>)
 8009aac:	4829      	ldr	r0, [pc, #164]	; (8009b54 <cppLoop+0x200c>)
 8009aae:	f7f7 fe87 	bl	80017c0 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	4b2a      	ldr	r3, [pc, #168]	; (8009b60 <cppLoop+0x2018>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	492a      	ldr	r1, [pc, #168]	; (8009b64 <cppLoop+0x201c>)
 8009abc:	4825      	ldr	r0, [pc, #148]	; (8009b54 <cppLoop+0x200c>)
 8009abe:	f7f7 fe7f 	bl	80017c0 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009ac2:	4b22      	ldr	r3, [pc, #136]	; (8009b4c <cppLoop+0x2004>)
 8009ac4:	edd3 7a00 	vldr	s15, [r3]
 8009ac8:	4b23      	ldr	r3, [pc, #140]	; (8009b58 <cppLoop+0x2010>)
 8009aca:	ed93 7a00 	vldr	s14, [r3]
 8009ace:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <cppLoop+0x2018>)
 8009ad0:	edd3 6a00 	vldr	s13, [r3]
 8009ad4:	eeb0 1a66 	vmov.f32	s2, s13
 8009ad8:	eef0 0a47 	vmov.f32	s1, s14
 8009adc:	eeb0 0a67 	vmov.f32	s0, s15
 8009ae0:	4821      	ldr	r0, [pc, #132]	; (8009b68 <cppLoop+0x2020>)
 8009ae2:	f7fa f82f 	bl	8003b44 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8009aec:	4816      	ldr	r0, [pc, #88]	; (8009b48 <cppLoop+0x2000>)
 8009aee:	f7f8 fb9d 	bl	800222c <_ZN3LED2LREaa>
		break;
 8009af2:	e01f      	b.n	8009b34 <cppLoop+0x1fec>

	default:
		break;
 8009af4:	bf00      	nop
 8009af6:	e01e      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009af8:	bf00      	nop
 8009afa:	e01c      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009afc:	bf00      	nop
 8009afe:	e01a      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b00:	bf00      	nop
 8009b02:	e018      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b04:	bf00      	nop
 8009b06:	e016      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b08:	bf00      	nop
 8009b0a:	e014      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b0c:	bf00      	nop
 8009b0e:	e012      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b10:	bf00      	nop
 8009b12:	e010      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b14:	bf00      	nop
 8009b16:	e00e      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b18:	bf00      	nop
 8009b1a:	e00c      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b1c:	bf00      	nop
 8009b1e:	e00a      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b20:	bf00      	nop
 8009b22:	e008      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b24:	bf00      	nop
 8009b26:	e006      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b28:	bf00      	nop
 8009b2a:	e004      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b2c:	bf00      	nop
 8009b2e:	e002      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b30:	bf00      	nop
 8009b32:	e000      	b.n	8009b36 <cppLoop+0x1fee>
		break;
 8009b34:	bf00      	nop

	}

	HAL_Delay(30);
 8009b36:	201e      	movs	r0, #30
 8009b38:	f000 f926 	bl	8009d88 <HAL_Delay>

}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b44:	20000560 	.word	0x20000560
 8009b48:	2000056c 	.word	0x2000056c
 8009b4c:	2004813c 	.word	0x2004813c
 8009b50:	0801a044 	.word	0x0801a044
 8009b54:	08019e98 	.word	0x08019e98
 8009b58:	20048144 	.word	0x20048144
 8009b5c:	0801a04c 	.word	0x0801a04c
 8009b60:	2004814c 	.word	0x2004814c
 8009b64:	0801a054 	.word	0x0801a054
 8009b68:	200238bc 	.word	0x200238bc

08009b6c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af06      	add	r7, sp, #24
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d142      	bne.n	8009c02 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d13d      	bne.n	8009c02 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009b86:	4821      	ldr	r0, [pc, #132]	; (8009c0c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009b88:	f7f8 fb88 	bl	800229c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009b8c:	4820      	ldr	r0, [pc, #128]	; (8009c10 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009b8e:	f7fb fc73 	bl	8005478 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009b92:	4820      	ldr	r0, [pc, #128]	; (8009c14 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009b94:	f7f8 fa1e 	bl	8001fd4 <_ZN8JoyStickC1Ev>
Motor motor;
 8009b98:	481f      	ldr	r0, [pc, #124]	; (8009c18 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b9a:	f7fb f899 	bl	8004cd0 <_ZN5MotorC1Ev>
IMU imu;
 8009b9e:	481f      	ldr	r0, [pc, #124]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009ba0:	f7f8 f826 	bl	8001bf0 <_ZN3IMUC1Ev>
Logger logger;
 8009ba4:	481e      	ldr	r0, [pc, #120]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009ba6:	f7fa fdb5 	bl	8004714 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009baa:	481e      	ldr	r0, [pc, #120]	; (8009c24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009bac:	f7f7 fc0e 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009bb0:	4b1a      	ldr	r3, [pc, #104]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009bb2:	4a1c      	ldr	r2, [pc, #112]	; (8009c24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009bb4:	4918      	ldr	r1, [pc, #96]	; (8009c18 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009bb6:	481c      	ldr	r0, [pc, #112]	; (8009c28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009bb8:	f7fb ffa2 	bl	8005b00 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009bbc:	4b1a      	ldr	r3, [pc, #104]	; (8009c28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009bbe:	4a17      	ldr	r2, [pc, #92]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009bc0:	4918      	ldr	r1, [pc, #96]	; (8009c24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009bc2:	481a      	ldr	r0, [pc, #104]	; (8009c2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009bc4:	f7fb f96a 	bl	8004e9c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009bc8:	4819      	ldr	r0, [pc, #100]	; (8009c30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009bca:	f7f7 fb03 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009bce:	4b18      	ldr	r3, [pc, #96]	; (8009c30 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009bd0:	9305      	str	r3, [sp, #20]
 8009bd2:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	4b12      	ldr	r3, [pc, #72]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009bd8:	9303      	str	r3, [sp, #12]
 8009bda:	4b14      	ldr	r3, [pc, #80]	; (8009c2c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	4b11      	ldr	r3, [pc, #68]	; (8009c24 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	4b10      	ldr	r3, [pc, #64]	; (8009c28 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009be8:	4a08      	ldr	r2, [pc, #32]	; (8009c0c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009bea:	490b      	ldr	r1, [pc, #44]	; (8009c18 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009bec:	4811      	ldr	r0, [pc, #68]	; (8009c34 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009bee:	f7f8 fe33 	bl	8002858 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009bf2:	4a09      	ldr	r2, [pc, #36]	; (8009c18 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009bf4:	490a      	ldr	r1, [pc, #40]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009bf6:	4810      	ldr	r0, [pc, #64]	; (8009c38 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009bf8:	f7fb fdba 	bl	8005770 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009bfc:	480f      	ldr	r0, [pc, #60]	; (8009c3c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009bfe:	f7fb facd 	bl	800519c <_ZN13PathFollowingC1Ev>
}
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	2000025c 	.word	0x2000025c
 8009c10:	20000554 	.word	0x20000554
 8009c14:	20000560 	.word	0x20000560
 8009c18:	20000568 	.word	0x20000568
 8009c1c:	2000057c 	.word	0x2000057c
 8009c20:	20000590 	.word	0x20000590
 8009c24:	2002381c 	.word	0x2002381c
 8009c28:	2002383c 	.word	0x2002383c
 8009c2c:	20023878 	.word	0x20023878
 8009c30:	200238b8 	.word	0x200238b8
 8009c34:	200238bc 	.word	0x200238bc
 8009c38:	200307fc 	.word	0x200307fc
 8009c3c:	20030a08 	.word	0x20030a08

08009c40 <_GLOBAL__sub_I_line_sensor>:
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c48:	2001      	movs	r0, #1
 8009c4a:	f7ff ff8f 	bl	8009b6c <_Z41__static_initialization_and_destruction_0ii>
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009c56:	e003      	b.n	8009c60 <LoopCopyDataInit>

08009c58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c58:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009c5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009c5e:	3104      	adds	r1, #4

08009c60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009c60:	480b      	ldr	r0, [pc, #44]	; (8009c90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009c62:	4b0c      	ldr	r3, [pc, #48]	; (8009c94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009c64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009c66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009c68:	d3f6      	bcc.n	8009c58 <CopyDataInit>
  ldr  r2, =_sbss
 8009c6a:	4a0b      	ldr	r2, [pc, #44]	; (8009c98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009c6c:	e002      	b.n	8009c74 <LoopFillZerobss>

08009c6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009c6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009c70:	f842 3b04 	str.w	r3, [r2], #4

08009c74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009c74:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009c76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009c78:	d3f9      	bcc.n	8009c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009c7a:	f7fd fe53 	bl	8007924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c7e:	f00b fdd3 	bl	8015828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c82:	f7fc f98d 	bl	8005fa0 <main>
  bx  lr    
 8009c86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009c88:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009c8c:	0801a648 	.word	0x0801a648
  ldr  r0, =_sdata
 8009c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009c94:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009c98:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009c9c:	2004cb90 	.word	0x2004cb90

08009ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ca0:	e7fe      	b.n	8009ca0 <ADC_IRQHandler>
	...

08009ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009ca8:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <HAL_Init+0x40>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a0d      	ldr	r2, [pc, #52]	; (8009ce4 <HAL_Init+0x40>)
 8009cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009cb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <HAL_Init+0x40>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a0a      	ldr	r2, [pc, #40]	; (8009ce4 <HAL_Init+0x40>)
 8009cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009cc0:	4b08      	ldr	r3, [pc, #32]	; (8009ce4 <HAL_Init+0x40>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a07      	ldr	r2, [pc, #28]	; (8009ce4 <HAL_Init+0x40>)
 8009cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ccc:	2003      	movs	r0, #3
 8009cce:	f000 fd51 	bl	800a774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	f000 f808 	bl	8009ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009cd8:	f7fd f874 	bl	8006dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	40023c00 	.word	0x40023c00

08009ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009cf0:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <HAL_InitTick+0x54>)
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	4b12      	ldr	r3, [pc, #72]	; (8009d40 <HAL_InitTick+0x58>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fd69 	bl	800a7de <HAL_SYSTICK_Config>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e00e      	b.n	8009d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b0f      	cmp	r3, #15
 8009d1a:	d80a      	bhi.n	8009d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	f000 fd31 	bl	800a78a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009d28:	4a06      	ldr	r2, [pc, #24]	; (8009d44 <HAL_InitTick+0x5c>)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e000      	b.n	8009d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000000 	.word	0x20000000
 8009d40:	20000008 	.word	0x20000008
 8009d44:	20000004 	.word	0x20000004

08009d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d4c:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <HAL_IncTick+0x20>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	461a      	mov	r2, r3
 8009d52:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <HAL_IncTick+0x24>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4413      	add	r3, r2
 8009d58:	4a04      	ldr	r2, [pc, #16]	; (8009d6c <HAL_IncTick+0x24>)
 8009d5a:	6013      	str	r3, [r2, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20000008 	.word	0x20000008
 8009d6c:	2004ab18 	.word	0x2004ab18

08009d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  return uwTick;
 8009d74:	4b03      	ldr	r3, [pc, #12]	; (8009d84 <HAL_GetTick+0x14>)
 8009d76:	681b      	ldr	r3, [r3, #0]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	2004ab18 	.word	0x2004ab18

08009d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d90:	f7ff ffee 	bl	8009d70 <HAL_GetTick>
 8009d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da0:	d005      	beq.n	8009dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009da2:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <HAL_Delay+0x40>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4413      	add	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009dae:	bf00      	nop
 8009db0:	f7ff ffde 	bl	8009d70 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d8f7      	bhi.n	8009db0 <HAL_Delay+0x28>
  {
  }
}
 8009dc0:	bf00      	nop
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20000008 	.word	0x20000008

08009dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e033      	b.n	8009e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d109      	bne.n	8009dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7fd f812 	bl	8006e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d118      	bne.n	8009e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009e12:	f023 0302 	bic.w	r3, r3, #2
 8009e16:	f043 0202 	orr.w	r2, r3, #2
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fa5a 	bl	800a2d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	f023 0303 	bic.w	r3, r3, #3
 8009e32:	f043 0201 	orr.w	r2, r3, #1
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	641a      	str	r2, [r3, #64]	; 0x40
 8009e3a:	e001      	b.n	8009e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
	...

08009e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d101      	bne.n	8009e72 <HAL_ADC_Start_DMA+0x1e>
 8009e6e:	2302      	movs	r3, #2
 8009e70:	e0cc      	b.n	800a00c <HAL_ADC_Start_DMA+0x1b8>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d018      	beq.n	8009eba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0201 	orr.w	r2, r2, #1
 8009e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009e98:	4b5e      	ldr	r3, [pc, #376]	; (800a014 <HAL_ADC_Start_DMA+0x1c0>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a5e      	ldr	r2, [pc, #376]	; (800a018 <HAL_ADC_Start_DMA+0x1c4>)
 8009e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea2:	0c9a      	lsrs	r2, r3, #18
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	4413      	add	r3, r2
 8009eaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009eac:	e002      	b.n	8009eb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f9      	bne.n	8009eae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	f040 80a0 	bne.w	800a00a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ece:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009ed2:	f023 0301 	bic.w	r3, r3, #1
 8009ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009ef4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f08:	d106      	bne.n	8009f18 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0e:	f023 0206 	bic.w	r2, r3, #6
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	645a      	str	r2, [r3, #68]	; 0x44
 8009f16:	e002      	b.n	8009f1e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009f26:	4b3d      	ldr	r3, [pc, #244]	; (800a01c <HAL_ADC_Start_DMA+0x1c8>)
 8009f28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	4a3c      	ldr	r2, [pc, #240]	; (800a020 <HAL_ADC_Start_DMA+0x1cc>)
 8009f30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	4a3b      	ldr	r2, [pc, #236]	; (800a024 <HAL_ADC_Start_DMA+0x1d0>)
 8009f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3e:	4a3a      	ldr	r2, [pc, #232]	; (800a028 <HAL_ADC_Start_DMA+0x1d4>)
 8009f40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009f4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009f5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	334c      	adds	r3, #76	; 0x4c
 8009f76:	4619      	mov	r1, r3
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f000 fcea 	bl	800a954 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f003 031f 	and.w	r3, r3, #31
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d12a      	bne.n	8009fe2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a26      	ldr	r2, [pc, #152]	; (800a02c <HAL_ADC_Start_DMA+0x1d8>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d015      	beq.n	8009fc2 <HAL_ADC_Start_DMA+0x16e>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a25      	ldr	r2, [pc, #148]	; (800a030 <HAL_ADC_Start_DMA+0x1dc>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d105      	bne.n	8009fac <HAL_ADC_Start_DMA+0x158>
 8009fa0:	4b1e      	ldr	r3, [pc, #120]	; (800a01c <HAL_ADC_Start_DMA+0x1c8>)
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f003 031f 	and.w	r3, r3, #31
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a20      	ldr	r2, [pc, #128]	; (800a034 <HAL_ADC_Start_DMA+0x1e0>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d129      	bne.n	800a00a <HAL_ADC_Start_DMA+0x1b6>
 8009fb6:	4b19      	ldr	r3, [pc, #100]	; (800a01c <HAL_ADC_Start_DMA+0x1c8>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f003 031f 	and.w	r3, r3, #31
 8009fbe:	2b0f      	cmp	r3, #15
 8009fc0:	d823      	bhi.n	800a00a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d11c      	bne.n	800a00a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009fde:	609a      	str	r2, [r3, #8]
 8009fe0:	e013      	b.n	800a00a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a11      	ldr	r2, [pc, #68]	; (800a02c <HAL_ADC_Start_DMA+0x1d8>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d10e      	bne.n	800a00a <HAL_ADC_Start_DMA+0x1b6>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d107      	bne.n	800a00a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a008:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20000000 	.word	0x20000000
 800a018:	431bde83 	.word	0x431bde83
 800a01c:	40012300 	.word	0x40012300
 800a020:	0800a4d1 	.word	0x0800a4d1
 800a024:	0800a58b 	.word	0x0800a58b
 800a028:	0800a5a7 	.word	0x0800a5a7
 800a02c:	40012000 	.word	0x40012000
 800a030:	40012100 	.word	0x40012100
 800a034:	40012200 	.word	0x40012200

0800a038 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a07e:	2300      	movs	r3, #0
 800a080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d101      	bne.n	800a090 <HAL_ADC_ConfigChannel+0x1c>
 800a08c:	2302      	movs	r3, #2
 800a08e:	e113      	b.n	800a2b8 <HAL_ADC_ConfigChannel+0x244>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b09      	cmp	r3, #9
 800a09e:	d925      	bls.n	800a0ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68d9      	ldr	r1, [r3, #12]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3b1e      	subs	r3, #30
 800a0b6:	2207      	movs	r2, #7
 800a0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0bc:	43da      	mvns	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	400a      	ands	r2, r1
 800a0c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68d9      	ldr	r1, [r3, #12]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	689a      	ldr	r2, [r3, #8]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	4603      	mov	r3, r0
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	4403      	add	r3, r0
 800a0de:	3b1e      	subs	r3, #30
 800a0e0:	409a      	lsls	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	60da      	str	r2, [r3, #12]
 800a0ea:	e022      	b.n	800a132 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6919      	ldr	r1, [r3, #16]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	4413      	add	r3, r2
 800a100:	2207      	movs	r2, #7
 800a102:	fa02 f303 	lsl.w	r3, r2, r3
 800a106:	43da      	mvns	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	400a      	ands	r2, r1
 800a10e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6919      	ldr	r1, [r3, #16]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	689a      	ldr	r2, [r3, #8]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	4618      	mov	r0, r3
 800a122:	4603      	mov	r3, r0
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	4403      	add	r3, r0
 800a128:	409a      	lsls	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2b06      	cmp	r3, #6
 800a138:	d824      	bhi.n	800a184 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	3b05      	subs	r3, #5
 800a14c:	221f      	movs	r2, #31
 800a14e:	fa02 f303 	lsl.w	r3, r2, r3
 800a152:	43da      	mvns	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	400a      	ands	r2, r1
 800a15a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	4618      	mov	r0, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	3b05      	subs	r3, #5
 800a176:	fa00 f203 	lsl.w	r2, r0, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	635a      	str	r2, [r3, #52]	; 0x34
 800a182:	e04c      	b.n	800a21e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b0c      	cmp	r3, #12
 800a18a:	d824      	bhi.n	800a1d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	3b23      	subs	r3, #35	; 0x23
 800a19e:	221f      	movs	r2, #31
 800a1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a4:	43da      	mvns	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	400a      	ands	r2, r1
 800a1ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	3b23      	subs	r3, #35	; 0x23
 800a1c8:	fa00 f203 	lsl.w	r2, r0, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	631a      	str	r2, [r3, #48]	; 0x30
 800a1d4:	e023      	b.n	800a21e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3b41      	subs	r3, #65	; 0x41
 800a1e8:	221f      	movs	r2, #31
 800a1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ee:	43da      	mvns	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	400a      	ands	r2, r1
 800a1f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	4618      	mov	r0, r3
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	3b41      	subs	r3, #65	; 0x41
 800a212:	fa00 f203 	lsl.w	r2, r0, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	430a      	orrs	r2, r1
 800a21c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a21e:	4b29      	ldr	r3, [pc, #164]	; (800a2c4 <HAL_ADC_ConfigChannel+0x250>)
 800a220:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a28      	ldr	r2, [pc, #160]	; (800a2c8 <HAL_ADC_ConfigChannel+0x254>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d10f      	bne.n	800a24c <HAL_ADC_ConfigChannel+0x1d8>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b12      	cmp	r3, #18
 800a232:	d10b      	bne.n	800a24c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1d      	ldr	r2, [pc, #116]	; (800a2c8 <HAL_ADC_ConfigChannel+0x254>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d12b      	bne.n	800a2ae <HAL_ADC_ConfigChannel+0x23a>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a1c      	ldr	r2, [pc, #112]	; (800a2cc <HAL_ADC_ConfigChannel+0x258>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d003      	beq.n	800a268 <HAL_ADC_ConfigChannel+0x1f4>
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b11      	cmp	r3, #17
 800a266:	d122      	bne.n	800a2ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a11      	ldr	r2, [pc, #68]	; (800a2cc <HAL_ADC_ConfigChannel+0x258>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d111      	bne.n	800a2ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a28a:	4b11      	ldr	r3, [pc, #68]	; (800a2d0 <HAL_ADC_ConfigChannel+0x25c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a11      	ldr	r2, [pc, #68]	; (800a2d4 <HAL_ADC_ConfigChannel+0x260>)
 800a290:	fba2 2303 	umull	r2, r3, r2, r3
 800a294:	0c9a      	lsrs	r2, r3, #18
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a2a0:	e002      	b.n	800a2a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1f9      	bne.n	800a2a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	40012300 	.word	0x40012300
 800a2c8:	40012000 	.word	0x40012000
 800a2cc:	10000012 	.word	0x10000012
 800a2d0:	20000000 	.word	0x20000000
 800a2d4:	431bde83 	.word	0x431bde83

0800a2d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a2e0:	4b79      	ldr	r3, [pc, #484]	; (800a4c8 <ADC_Init+0x1f0>)
 800a2e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a30c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	6859      	ldr	r1, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	021a      	lsls	r2, r3, #8
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6859      	ldr	r1, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689a      	ldr	r2, [r3, #8]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	689a      	ldr	r2, [r3, #8]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6899      	ldr	r1, [r3, #8]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36a:	4a58      	ldr	r2, [pc, #352]	; (800a4cc <ADC_Init+0x1f4>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d022      	beq.n	800a3b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a37e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6899      	ldr	r1, [r3, #8]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a3a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6899      	ldr	r1, [r3, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	609a      	str	r2, [r3, #8]
 800a3b4:	e00f      	b.n	800a3d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a3c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a3d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	689a      	ldr	r2, [r3, #8]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f022 0202 	bic.w	r2, r2, #2
 800a3e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6899      	ldr	r1, [r3, #8]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	7e1b      	ldrb	r3, [r3, #24]
 800a3f0:	005a      	lsls	r2, r3, #1
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d01b      	beq.n	800a43c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a412:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6859      	ldr	r1, [r3, #4]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	3b01      	subs	r3, #1
 800a430:	035a      	lsls	r2, r3, #13
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	605a      	str	r2, [r3, #4]
 800a43a:	e007      	b.n	800a44c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a44a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a45a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	3b01      	subs	r3, #1
 800a468:	051a      	lsls	r2, r3, #20
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	430a      	orrs	r2, r1
 800a470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689a      	ldr	r2, [r3, #8]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6899      	ldr	r1, [r3, #8]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a48e:	025a      	lsls	r2, r3, #9
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689a      	ldr	r2, [r3, #8]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6899      	ldr	r1, [r3, #8]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	029a      	lsls	r2, r3, #10
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	609a      	str	r2, [r3, #8]
}
 800a4bc:	bf00      	nop
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	40012300 	.word	0x40012300
 800a4cc:	0f000001 	.word	0x0f000001

0800a4d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d13c      	bne.n	800a564 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d12b      	bne.n	800a55c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d127      	bne.n	800a55c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a516:	2b00      	cmp	r3, #0
 800a518:	d006      	beq.n	800a528 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a524:	2b00      	cmp	r3, #0
 800a526:	d119      	bne.n	800a55c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 0220 	bic.w	r2, r2, #32
 800a536:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d105      	bne.n	800a55c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a554:	f043 0201 	orr.w	r2, r3, #1
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7ff fd6b 	bl	800a038 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a562:	e00e      	b.n	800a582 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	f003 0310 	and.w	r3, r3, #16
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f7ff fd75 	bl	800a060 <HAL_ADC_ErrorCallback>
}
 800a576:	e004      	b.n	800a582 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	4798      	blx	r3
}
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a596:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7ff fd57 	bl	800a04c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2240      	movs	r2, #64	; 0x40
 800a5b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5be:	f043 0204 	orr.w	r2, r3, #4
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f7ff fd4a 	bl	800a060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a5cc:	bf00      	nop
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <__NVIC_SetPriorityGrouping+0x44>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a5fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a606:	4a04      	ldr	r2, [pc, #16]	; (800a618 <__NVIC_SetPriorityGrouping+0x44>)
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	60d3      	str	r3, [r2, #12]
}
 800a60c:	bf00      	nop
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	e000ed00 	.word	0xe000ed00

0800a61c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a620:	4b04      	ldr	r3, [pc, #16]	; (800a634 <__NVIC_GetPriorityGrouping+0x18>)
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	0a1b      	lsrs	r3, r3, #8
 800a626:	f003 0307 	and.w	r3, r3, #7
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	e000ed00 	.word	0xe000ed00

0800a638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a646:	2b00      	cmp	r3, #0
 800a648:	db0b      	blt.n	800a662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	f003 021f 	and.w	r2, r3, #31
 800a650:	4907      	ldr	r1, [pc, #28]	; (800a670 <__NVIC_EnableIRQ+0x38>)
 800a652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a656:	095b      	lsrs	r3, r3, #5
 800a658:	2001      	movs	r0, #1
 800a65a:	fa00 f202 	lsl.w	r2, r0, r2
 800a65e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a662:	bf00      	nop
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	e000e100 	.word	0xe000e100

0800a674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	6039      	str	r1, [r7, #0]
 800a67e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a684:	2b00      	cmp	r3, #0
 800a686:	db0a      	blt.n	800a69e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	490c      	ldr	r1, [pc, #48]	; (800a6c0 <__NVIC_SetPriority+0x4c>)
 800a68e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a692:	0112      	lsls	r2, r2, #4
 800a694:	b2d2      	uxtb	r2, r2
 800a696:	440b      	add	r3, r1
 800a698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a69c:	e00a      	b.n	800a6b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	4908      	ldr	r1, [pc, #32]	; (800a6c4 <__NVIC_SetPriority+0x50>)
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	f003 030f 	and.w	r3, r3, #15
 800a6aa:	3b04      	subs	r3, #4
 800a6ac:	0112      	lsls	r2, r2, #4
 800a6ae:	b2d2      	uxtb	r2, r2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	761a      	strb	r2, [r3, #24]
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	e000e100 	.word	0xe000e100
 800a6c4:	e000ed00 	.word	0xe000ed00

0800a6c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b089      	sub	sp, #36	; 0x24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	f1c3 0307 	rsb	r3, r3, #7
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	bf28      	it	cs
 800a6e6:	2304      	movcs	r3, #4
 800a6e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	2b06      	cmp	r3, #6
 800a6f0:	d902      	bls.n	800a6f8 <NVIC_EncodePriority+0x30>
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	3b03      	subs	r3, #3
 800a6f6:	e000      	b.n	800a6fa <NVIC_EncodePriority+0x32>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	fa02 f303 	lsl.w	r3, r2, r3
 800a706:	43da      	mvns	r2, r3
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	401a      	ands	r2, r3
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a710:	f04f 31ff 	mov.w	r1, #4294967295
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	fa01 f303 	lsl.w	r3, r1, r3
 800a71a:	43d9      	mvns	r1, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a720:	4313      	orrs	r3, r2
         );
}
 800a722:	4618      	mov	r0, r3
 800a724:	3724      	adds	r7, #36	; 0x24
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
	...

0800a730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a740:	d301      	bcc.n	800a746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a742:	2301      	movs	r3, #1
 800a744:	e00f      	b.n	800a766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a746:	4a0a      	ldr	r2, [pc, #40]	; (800a770 <SysTick_Config+0x40>)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a74e:	210f      	movs	r1, #15
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	f7ff ff8e 	bl	800a674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a758:	4b05      	ldr	r3, [pc, #20]	; (800a770 <SysTick_Config+0x40>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a75e:	4b04      	ldr	r3, [pc, #16]	; (800a770 <SysTick_Config+0x40>)
 800a760:	2207      	movs	r2, #7
 800a762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	e000e010 	.word	0xe000e010

0800a774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff ff29 	bl	800a5d4 <__NVIC_SetPriorityGrouping>
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b086      	sub	sp, #24
 800a78e:	af00      	add	r7, sp, #0
 800a790:	4603      	mov	r3, r0
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	607a      	str	r2, [r7, #4]
 800a796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a798:	2300      	movs	r3, #0
 800a79a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a79c:	f7ff ff3e 	bl	800a61c <__NVIC_GetPriorityGrouping>
 800a7a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	68b9      	ldr	r1, [r7, #8]
 800a7a6:	6978      	ldr	r0, [r7, #20]
 800a7a8:	f7ff ff8e 	bl	800a6c8 <NVIC_EncodePriority>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff ff5d 	bl	800a674 <__NVIC_SetPriority>
}
 800a7ba:	bf00      	nop
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a7cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff ff31 	bl	800a638 <__NVIC_EnableIRQ>
}
 800a7d6:	bf00      	nop
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f7ff ffa2 	bl	800a730 <SysTick_Config>
 800a7ec:	4603      	mov	r3, r0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a804:	f7ff fab4 	bl	8009d70 <HAL_GetTick>
 800a808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e099      	b.n	800a948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2202      	movs	r2, #2
 800a820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 0201 	bic.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a834:	e00f      	b.n	800a856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a836:	f7ff fa9b 	bl	8009d70 <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	2b05      	cmp	r3, #5
 800a842:	d908      	bls.n	800a856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2220      	movs	r2, #32
 800a848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2203      	movs	r2, #3
 800a84e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e078      	b.n	800a948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1e8      	bne.n	800a836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	4b38      	ldr	r3, [pc, #224]	; (800a950 <HAL_DMA_Init+0x158>)
 800a870:	4013      	ands	r3, r2
 800a872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a88e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a89a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d107      	bne.n	800a8c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	697a      	ldr	r2, [r7, #20]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f023 0307 	bic.w	r3, r3, #7
 800a8d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	2b04      	cmp	r3, #4
 800a8e8:	d117      	bne.n	800a91a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00e      	beq.n	800a91a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fa9d 	bl	800ae3c <DMA_CheckFifoParam>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d008      	beq.n	800a91a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2240      	movs	r2, #64	; 0x40
 800a90c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a916:	2301      	movs	r3, #1
 800a918:	e016      	b.n	800a948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa54 	bl	800add0 <DMA_CalcBaseAndBitshift>
 800a928:	4603      	mov	r3, r0
 800a92a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a930:	223f      	movs	r2, #63	; 0x3f
 800a932:	409a      	lsls	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3718      	adds	r7, #24
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	f010803f 	.word	0xf010803f

0800a954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a96a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a972:	2b01      	cmp	r3, #1
 800a974:	d101      	bne.n	800a97a <HAL_DMA_Start_IT+0x26>
 800a976:	2302      	movs	r3, #2
 800a978:	e040      	b.n	800a9fc <HAL_DMA_Start_IT+0xa8>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d12f      	bne.n	800a9ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2202      	movs	r2, #2
 800a992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 f9e6 	bl	800ad74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ac:	223f      	movs	r2, #63	; 0x3f
 800a9ae:	409a      	lsls	r2, r3
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f042 0216 	orr.w	r2, r2, #22
 800a9c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d007      	beq.n	800a9dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f042 0208 	orr.w	r2, r2, #8
 800a9da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f042 0201 	orr.w	r2, r2, #1
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	e005      	b.n	800a9fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d004      	beq.n	800aa22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2280      	movs	r2, #128	; 0x80
 800aa1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e00c      	b.n	800aa3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2205      	movs	r2, #5
 800aa26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f022 0201 	bic.w	r2, r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa54:	4b92      	ldr	r3, [pc, #584]	; (800aca0 <HAL_DMA_IRQHandler+0x258>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a92      	ldr	r2, [pc, #584]	; (800aca4 <HAL_DMA_IRQHandler+0x25c>)
 800aa5a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5e:	0a9b      	lsrs	r3, r3, #10
 800aa60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa72:	2208      	movs	r2, #8
 800aa74:	409a      	lsls	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4013      	ands	r3, r2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d01a      	beq.n	800aab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d013      	beq.n	800aab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f022 0204 	bic.w	r2, r2, #4
 800aa9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	409a      	lsls	r2, r3
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaac:	f043 0201 	orr.w	r2, r3, #1
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab8:	2201      	movs	r2, #1
 800aaba:	409a      	lsls	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4013      	ands	r3, r2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d012      	beq.n	800aaea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00b      	beq.n	800aaea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad6:	2201      	movs	r2, #1
 800aad8:	409a      	lsls	r2, r3
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae2:	f043 0202 	orr.w	r2, r3, #2
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaee:	2204      	movs	r2, #4
 800aaf0:	409a      	lsls	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d012      	beq.n	800ab20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00b      	beq.n	800ab20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab0c:	2204      	movs	r2, #4
 800ab0e:	409a      	lsls	r2, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab18:	f043 0204 	orr.w	r2, r3, #4
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	2210      	movs	r2, #16
 800ab26:	409a      	lsls	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d043      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d03c      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab42:	2210      	movs	r2, #16
 800ab44:	409a      	lsls	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d018      	beq.n	800ab8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d108      	bne.n	800ab78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d024      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
 800ab76:	e01f      	b.n	800abb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01b      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	4798      	blx	r3
 800ab88:	e016      	b.n	800abb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d107      	bne.n	800aba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f022 0208 	bic.w	r2, r2, #8
 800aba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abbc:	2220      	movs	r2, #32
 800abbe:	409a      	lsls	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4013      	ands	r3, r2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 808e 	beq.w	800ace6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0310 	and.w	r3, r3, #16
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 8086 	beq.w	800ace6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abde:	2220      	movs	r2, #32
 800abe0:	409a      	lsls	r2, r3
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d136      	bne.n	800ac60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0216 	bic.w	r2, r2, #22
 800ac00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	695a      	ldr	r2, [r3, #20]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d103      	bne.n	800ac22 <HAL_DMA_IRQHandler+0x1da>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d007      	beq.n	800ac32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 0208 	bic.w	r2, r2, #8
 800ac30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac36:	223f      	movs	r2, #63	; 0x3f
 800ac38:	409a      	lsls	r2, r3
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d07d      	beq.n	800ad52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
        }
        return;
 800ac5e:	e078      	b.n	800ad52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01c      	beq.n	800aca8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d108      	bne.n	800ac8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d030      	beq.n	800ace6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	4798      	blx	r3
 800ac8c:	e02b      	b.n	800ace6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d027      	beq.n	800ace6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	4798      	blx	r3
 800ac9e:	e022      	b.n	800ace6 <HAL_DMA_IRQHandler+0x29e>
 800aca0:	20000000 	.word	0x20000000
 800aca4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10f      	bne.n	800acd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 0210 	bic.w	r2, r2, #16
 800acc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acea:	2b00      	cmp	r3, #0
 800acec:	d032      	beq.n	800ad54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d022      	beq.n	800ad40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2205      	movs	r2, #5
 800acfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f022 0201 	bic.w	r2, r2, #1
 800ad10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	3301      	adds	r3, #1
 800ad16:	60bb      	str	r3, [r7, #8]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d307      	bcc.n	800ad2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1f2      	bne.n	800ad12 <HAL_DMA_IRQHandler+0x2ca>
 800ad2c:	e000      	b.n	800ad30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ad2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d005      	beq.n	800ad54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	4798      	blx	r3
 800ad50:	e000      	b.n	800ad54 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ad52:	bf00      	nop
    }
  }
}
 800ad54:	3718      	adds	r7, #24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop

0800ad5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	2b40      	cmp	r3, #64	; 0x40
 800ada0:	d108      	bne.n	800adb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800adb2:	e007      	b.n	800adc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	60da      	str	r2, [r3, #12]
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	3b10      	subs	r3, #16
 800ade0:	4a14      	ldr	r2, [pc, #80]	; (800ae34 <DMA_CalcBaseAndBitshift+0x64>)
 800ade2:	fba2 2303 	umull	r2, r3, r2, r3
 800ade6:	091b      	lsrs	r3, r3, #4
 800ade8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800adea:	4a13      	ldr	r2, [pc, #76]	; (800ae38 <DMA_CalcBaseAndBitshift+0x68>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d909      	bls.n	800ae12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae06:	f023 0303 	bic.w	r3, r3, #3
 800ae0a:	1d1a      	adds	r2, r3, #4
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	659a      	str	r2, [r3, #88]	; 0x58
 800ae10:	e007      	b.n	800ae22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae1a:	f023 0303 	bic.w	r3, r3, #3
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	aaaaaaab 	.word	0xaaaaaaab
 800ae38:	0801a090 	.word	0x0801a090

0800ae3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d11f      	bne.n	800ae96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d855      	bhi.n	800af08 <DMA_CheckFifoParam+0xcc>
 800ae5c:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <DMA_CheckFifoParam+0x28>)
 800ae5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae62:	bf00      	nop
 800ae64:	0800ae75 	.word	0x0800ae75
 800ae68:	0800ae87 	.word	0x0800ae87
 800ae6c:	0800ae75 	.word	0x0800ae75
 800ae70:	0800af09 	.word	0x0800af09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d045      	beq.n	800af0c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae84:	e042      	b.n	800af0c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae8e:	d13f      	bne.n	800af10 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae94:	e03c      	b.n	800af10 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae9e:	d121      	bne.n	800aee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d836      	bhi.n	800af14 <DMA_CheckFifoParam+0xd8>
 800aea6:	a201      	add	r2, pc, #4	; (adr r2, 800aeac <DMA_CheckFifoParam+0x70>)
 800aea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeac:	0800aebd 	.word	0x0800aebd
 800aeb0:	0800aec3 	.word	0x0800aec3
 800aeb4:	0800aebd 	.word	0x0800aebd
 800aeb8:	0800aed5 	.word	0x0800aed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	73fb      	strb	r3, [r7, #15]
      break;
 800aec0:	e02f      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d024      	beq.n	800af18 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aed2:	e021      	b.n	800af18 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aedc:	d11e      	bne.n	800af1c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aee2:	e01b      	b.n	800af1c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d902      	bls.n	800aef0 <DMA_CheckFifoParam+0xb4>
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d003      	beq.n	800aef6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aeee:	e018      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
      break;
 800aef4:	e015      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00e      	beq.n	800af20 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	73fb      	strb	r3, [r7, #15]
      break;
 800af06:	e00b      	b.n	800af20 <DMA_CheckFifoParam+0xe4>
      break;
 800af08:	bf00      	nop
 800af0a:	e00a      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      break;
 800af0c:	bf00      	nop
 800af0e:	e008      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      break;
 800af10:	bf00      	nop
 800af12:	e006      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      break;
 800af14:	bf00      	nop
 800af16:	e004      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      break;
 800af18:	bf00      	nop
 800af1a:	e002      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      break;   
 800af1c:	bf00      	nop
 800af1e:	e000      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      break;
 800af20:	bf00      	nop
    }
  } 
  
  return status; 
 800af22:	7bfb      	ldrb	r3, [r7, #15]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af30:	b480      	push	{r7}
 800af32:	b089      	sub	sp, #36	; 0x24
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af3e:	2300      	movs	r3, #0
 800af40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af42:	2300      	movs	r3, #0
 800af44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af46:	2300      	movs	r3, #0
 800af48:	61fb      	str	r3, [r7, #28]
 800af4a:	e177      	b.n	800b23c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af4c:	2201      	movs	r2, #1
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	fa02 f303 	lsl.w	r3, r2, r3
 800af54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	4013      	ands	r3, r2
 800af5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	429a      	cmp	r2, r3
 800af66:	f040 8166 	bne.w	800b236 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d00b      	beq.n	800af8a <HAL_GPIO_Init+0x5a>
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	2b02      	cmp	r3, #2
 800af78:	d007      	beq.n	800af8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af7e:	2b11      	cmp	r3, #17
 800af80:	d003      	beq.n	800af8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	2b12      	cmp	r3, #18
 800af88:	d130      	bne.n	800afec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	2203      	movs	r2, #3
 800af96:	fa02 f303 	lsl.w	r3, r2, r3
 800af9a:	43db      	mvns	r3, r3
 800af9c:	69ba      	ldr	r2, [r7, #24]
 800af9e:	4013      	ands	r3, r2
 800afa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	68da      	ldr	r2, [r3, #12]
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	005b      	lsls	r3, r3, #1
 800afaa:	fa02 f303 	lsl.w	r3, r2, r3
 800afae:	69ba      	ldr	r2, [r7, #24]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	69ba      	ldr	r2, [r7, #24]
 800afb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afc0:	2201      	movs	r2, #1
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	fa02 f303 	lsl.w	r3, r2, r3
 800afc8:	43db      	mvns	r3, r3
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	4013      	ands	r3, r2
 800afce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	091b      	lsrs	r3, r3, #4
 800afd6:	f003 0201 	and.w	r2, r3, #1
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	fa02 f303 	lsl.w	r3, r2, r3
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	2203      	movs	r2, #3
 800aff8:	fa02 f303 	lsl.w	r3, r2, r3
 800affc:	43db      	mvns	r3, r3
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	4013      	ands	r3, r2
 800b002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	689a      	ldr	r2, [r3, #8]
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	fa02 f303 	lsl.w	r3, r2, r3
 800b010:	69ba      	ldr	r2, [r7, #24]
 800b012:	4313      	orrs	r3, r2
 800b014:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	2b02      	cmp	r3, #2
 800b022:	d003      	beq.n	800b02c <HAL_GPIO_Init+0xfc>
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	2b12      	cmp	r3, #18
 800b02a:	d123      	bne.n	800b074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	08da      	lsrs	r2, r3, #3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3208      	adds	r2, #8
 800b034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	f003 0307 	and.w	r3, r3, #7
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	220f      	movs	r2, #15
 800b044:	fa02 f303 	lsl.w	r3, r2, r3
 800b048:	43db      	mvns	r3, r3
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	4013      	ands	r3, r2
 800b04e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	fa02 f303 	lsl.w	r3, r2, r3
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	4313      	orrs	r3, r2
 800b064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	08da      	lsrs	r2, r3, #3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3208      	adds	r2, #8
 800b06e:	69b9      	ldr	r1, [r7, #24]
 800b070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	005b      	lsls	r3, r3, #1
 800b07e:	2203      	movs	r2, #3
 800b080:	fa02 f303 	lsl.w	r3, r2, r3
 800b084:	43db      	mvns	r3, r3
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	4013      	ands	r3, r2
 800b08a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	f003 0203 	and.w	r2, r3, #3
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	fa02 f303 	lsl.w	r3, r2, r3
 800b09c:	69ba      	ldr	r2, [r7, #24]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69ba      	ldr	r2, [r7, #24]
 800b0a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 80c0 	beq.w	800b236 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	4b65      	ldr	r3, [pc, #404]	; (800b250 <HAL_GPIO_Init+0x320>)
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0be:	4a64      	ldr	r2, [pc, #400]	; (800b250 <HAL_GPIO_Init+0x320>)
 800b0c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0c4:	6453      	str	r3, [r2, #68]	; 0x44
 800b0c6:	4b62      	ldr	r3, [pc, #392]	; (800b250 <HAL_GPIO_Init+0x320>)
 800b0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0ce:	60fb      	str	r3, [r7, #12]
 800b0d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0d2:	4a60      	ldr	r2, [pc, #384]	; (800b254 <HAL_GPIO_Init+0x324>)
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	089b      	lsrs	r3, r3, #2
 800b0d8:	3302      	adds	r3, #2
 800b0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	220f      	movs	r2, #15
 800b0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ee:	43db      	mvns	r3, r3
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a57      	ldr	r2, [pc, #348]	; (800b258 <HAL_GPIO_Init+0x328>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d037      	beq.n	800b16e <HAL_GPIO_Init+0x23e>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a56      	ldr	r2, [pc, #344]	; (800b25c <HAL_GPIO_Init+0x32c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d031      	beq.n	800b16a <HAL_GPIO_Init+0x23a>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a55      	ldr	r2, [pc, #340]	; (800b260 <HAL_GPIO_Init+0x330>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d02b      	beq.n	800b166 <HAL_GPIO_Init+0x236>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a54      	ldr	r2, [pc, #336]	; (800b264 <HAL_GPIO_Init+0x334>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d025      	beq.n	800b162 <HAL_GPIO_Init+0x232>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a53      	ldr	r2, [pc, #332]	; (800b268 <HAL_GPIO_Init+0x338>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d01f      	beq.n	800b15e <HAL_GPIO_Init+0x22e>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a52      	ldr	r2, [pc, #328]	; (800b26c <HAL_GPIO_Init+0x33c>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d019      	beq.n	800b15a <HAL_GPIO_Init+0x22a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a51      	ldr	r2, [pc, #324]	; (800b270 <HAL_GPIO_Init+0x340>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d013      	beq.n	800b156 <HAL_GPIO_Init+0x226>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a50      	ldr	r2, [pc, #320]	; (800b274 <HAL_GPIO_Init+0x344>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d00d      	beq.n	800b152 <HAL_GPIO_Init+0x222>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a4f      	ldr	r2, [pc, #316]	; (800b278 <HAL_GPIO_Init+0x348>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d007      	beq.n	800b14e <HAL_GPIO_Init+0x21e>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a4e      	ldr	r2, [pc, #312]	; (800b27c <HAL_GPIO_Init+0x34c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d101      	bne.n	800b14a <HAL_GPIO_Init+0x21a>
 800b146:	2309      	movs	r3, #9
 800b148:	e012      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b14a:	230a      	movs	r3, #10
 800b14c:	e010      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b14e:	2308      	movs	r3, #8
 800b150:	e00e      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b152:	2307      	movs	r3, #7
 800b154:	e00c      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b156:	2306      	movs	r3, #6
 800b158:	e00a      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b15a:	2305      	movs	r3, #5
 800b15c:	e008      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b15e:	2304      	movs	r3, #4
 800b160:	e006      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b162:	2303      	movs	r3, #3
 800b164:	e004      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b166:	2302      	movs	r3, #2
 800b168:	e002      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e000      	b.n	800b170 <HAL_GPIO_Init+0x240>
 800b16e:	2300      	movs	r3, #0
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	f002 0203 	and.w	r2, r2, #3
 800b176:	0092      	lsls	r2, r2, #2
 800b178:	4093      	lsls	r3, r2
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b180:	4934      	ldr	r1, [pc, #208]	; (800b254 <HAL_GPIO_Init+0x324>)
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	089b      	lsrs	r3, r3, #2
 800b186:	3302      	adds	r3, #2
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b18e:	4b3c      	ldr	r3, [pc, #240]	; (800b280 <HAL_GPIO_Init+0x350>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	43db      	mvns	r3, r3
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	4013      	ands	r3, r2
 800b19c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b1b2:	4a33      	ldr	r2, [pc, #204]	; (800b280 <HAL_GPIO_Init+0x350>)
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b1b8:	4b31      	ldr	r3, [pc, #196]	; (800b280 <HAL_GPIO_Init+0x350>)
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	43db      	mvns	r3, r3
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d003      	beq.n	800b1dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b1dc:	4a28      	ldr	r2, [pc, #160]	; (800b280 <HAL_GPIO_Init+0x350>)
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b1e2:	4b27      	ldr	r3, [pc, #156]	; (800b280 <HAL_GPIO_Init+0x350>)
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	43db      	mvns	r3, r3
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	4313      	orrs	r3, r2
 800b204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b206:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <HAL_GPIO_Init+0x350>)
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b20c:	4b1c      	ldr	r3, [pc, #112]	; (800b280 <HAL_GPIO_Init+0x350>)
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	43db      	mvns	r3, r3
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	4013      	ands	r3, r2
 800b21a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b230:	4a13      	ldr	r2, [pc, #76]	; (800b280 <HAL_GPIO_Init+0x350>)
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	3301      	adds	r3, #1
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	2b0f      	cmp	r3, #15
 800b240:	f67f ae84 	bls.w	800af4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b244:	bf00      	nop
 800b246:	3724      	adds	r7, #36	; 0x24
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	40023800 	.word	0x40023800
 800b254:	40013800 	.word	0x40013800
 800b258:	40020000 	.word	0x40020000
 800b25c:	40020400 	.word	0x40020400
 800b260:	40020800 	.word	0x40020800
 800b264:	40020c00 	.word	0x40020c00
 800b268:	40021000 	.word	0x40021000
 800b26c:	40021400 	.word	0x40021400
 800b270:	40021800 	.word	0x40021800
 800b274:	40021c00 	.word	0x40021c00
 800b278:	40022000 	.word	0x40022000
 800b27c:	40022400 	.word	0x40022400
 800b280:	40013c00 	.word	0x40013c00

0800b284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	460b      	mov	r3, r1
 800b28e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	691a      	ldr	r2, [r3, #16]
 800b294:	887b      	ldrh	r3, [r7, #2]
 800b296:	4013      	ands	r3, r2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b29c:	2301      	movs	r3, #1
 800b29e:	73fb      	strb	r3, [r7, #15]
 800b2a0:	e001      	b.n	800b2a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	807b      	strh	r3, [r7, #2]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b2c4:	787b      	ldrb	r3, [r7, #1]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b2ca:	887a      	ldrh	r2, [r7, #2]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b2d0:	e003      	b.n	800b2da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b2d2:	887b      	ldrh	r3, [r7, #2]
 800b2d4:	041a      	lsls	r2, r3, #16
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	619a      	str	r2, [r3, #24]
}
 800b2da:	bf00      	nop
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
	...

0800b2e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e11f      	b.n	800b53a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7fb fe32 	bl	8006f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2224      	movs	r2, #36	; 0x24
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f022 0201 	bic.w	r2, r2, #1
 800b32a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b33a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b34a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b34c:	f001 f96e 	bl	800c62c <HAL_RCC_GetPCLK1Freq>
 800b350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	4a7b      	ldr	r2, [pc, #492]	; (800b544 <HAL_I2C_Init+0x25c>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d807      	bhi.n	800b36c <HAL_I2C_Init+0x84>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4a7a      	ldr	r2, [pc, #488]	; (800b548 <HAL_I2C_Init+0x260>)
 800b360:	4293      	cmp	r3, r2
 800b362:	bf94      	ite	ls
 800b364:	2301      	movls	r3, #1
 800b366:	2300      	movhi	r3, #0
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	e006      	b.n	800b37a <HAL_I2C_Init+0x92>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	4a77      	ldr	r2, [pc, #476]	; (800b54c <HAL_I2C_Init+0x264>)
 800b370:	4293      	cmp	r3, r2
 800b372:	bf94      	ite	ls
 800b374:	2301      	movls	r3, #1
 800b376:	2300      	movhi	r3, #0
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e0db      	b.n	800b53a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	4a72      	ldr	r2, [pc, #456]	; (800b550 <HAL_I2C_Init+0x268>)
 800b386:	fba2 2303 	umull	r2, r3, r2, r3
 800b38a:	0c9b      	lsrs	r3, r3, #18
 800b38c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	430a      	orrs	r2, r1
 800b3a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	4a64      	ldr	r2, [pc, #400]	; (800b544 <HAL_I2C_Init+0x25c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d802      	bhi.n	800b3bc <HAL_I2C_Init+0xd4>
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	e009      	b.n	800b3d0 <HAL_I2C_Init+0xe8>
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b3c2:	fb02 f303 	mul.w	r3, r2, r3
 800b3c6:	4a63      	ldr	r2, [pc, #396]	; (800b554 <HAL_I2C_Init+0x26c>)
 800b3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3cc:	099b      	lsrs	r3, r3, #6
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	6812      	ldr	r2, [r2, #0]
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	69db      	ldr	r3, [r3, #28]
 800b3de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b3e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	4956      	ldr	r1, [pc, #344]	; (800b544 <HAL_I2C_Init+0x25c>)
 800b3ec:	428b      	cmp	r3, r1
 800b3ee:	d80d      	bhi.n	800b40c <HAL_I2C_Init+0x124>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	1e59      	subs	r1, r3, #1
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3fe:	3301      	adds	r3, #1
 800b400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b404:	2b04      	cmp	r3, #4
 800b406:	bf38      	it	cc
 800b408:	2304      	movcc	r3, #4
 800b40a:	e04f      	b.n	800b4ac <HAL_I2C_Init+0x1c4>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d111      	bne.n	800b438 <HAL_I2C_Init+0x150>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	1e58      	subs	r0, r3, #1
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6859      	ldr	r1, [r3, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	440b      	add	r3, r1
 800b422:	fbb0 f3f3 	udiv	r3, r0, r3
 800b426:	3301      	adds	r3, #1
 800b428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	bf0c      	ite	eq
 800b430:	2301      	moveq	r3, #1
 800b432:	2300      	movne	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	e012      	b.n	800b45e <HAL_I2C_Init+0x176>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	1e58      	subs	r0, r3, #1
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6859      	ldr	r1, [r3, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	0099      	lsls	r1, r3, #2
 800b448:	440b      	add	r3, r1
 800b44a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b44e:	3301      	adds	r3, #1
 800b450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b454:	2b00      	cmp	r3, #0
 800b456:	bf0c      	ite	eq
 800b458:	2301      	moveq	r3, #1
 800b45a:	2300      	movne	r3, #0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <HAL_I2C_Init+0x17e>
 800b462:	2301      	movs	r3, #1
 800b464:	e022      	b.n	800b4ac <HAL_I2C_Init+0x1c4>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10e      	bne.n	800b48c <HAL_I2C_Init+0x1a4>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	1e58      	subs	r0, r3, #1
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6859      	ldr	r1, [r3, #4]
 800b476:	460b      	mov	r3, r1
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	440b      	add	r3, r1
 800b47c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b480:	3301      	adds	r3, #1
 800b482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b48a:	e00f      	b.n	800b4ac <HAL_I2C_Init+0x1c4>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	1e58      	subs	r0, r3, #1
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6859      	ldr	r1, [r3, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	440b      	add	r3, r1
 800b49a:	0099      	lsls	r1, r3, #2
 800b49c:	440b      	add	r3, r1
 800b49e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	6809      	ldr	r1, [r1, #0]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69da      	ldr	r2, [r3, #28]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	430a      	orrs	r2, r1
 800b4ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b4da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	6911      	ldr	r1, [r2, #16]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	68d2      	ldr	r2, [r2, #12]
 800b4e6:	4311      	orrs	r1, r2
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	6812      	ldr	r2, [r2, #0]
 800b4ec:	430b      	orrs	r3, r1
 800b4ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	695a      	ldr	r2, [r3, #20]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	431a      	orrs	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	430a      	orrs	r2, r1
 800b50a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0201 	orr.w	r2, r2, #1
 800b51a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	000186a0 	.word	0x000186a0
 800b548:	001e847f 	.word	0x001e847f
 800b54c:	003d08ff 	.word	0x003d08ff
 800b550:	431bde83 	.word	0x431bde83
 800b554:	10624dd3 	.word	0x10624dd3

0800b558 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b088      	sub	sp, #32
 800b55c:	af02      	add	r7, sp, #8
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	607a      	str	r2, [r7, #4]
 800b562:	461a      	mov	r2, r3
 800b564:	460b      	mov	r3, r1
 800b566:	817b      	strh	r3, [r7, #10]
 800b568:	4613      	mov	r3, r2
 800b56a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b56c:	f7fe fc00 	bl	8009d70 <HAL_GetTick>
 800b570:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b20      	cmp	r3, #32
 800b57c:	f040 80e0 	bne.w	800b740 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	2319      	movs	r3, #25
 800b586:	2201      	movs	r2, #1
 800b588:	4970      	ldr	r1, [pc, #448]	; (800b74c <HAL_I2C_Master_Transmit+0x1f4>)
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f000 fc58 	bl	800be40 <I2C_WaitOnFlagUntilTimeout>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b596:	2302      	movs	r3, #2
 800b598:	e0d3      	b.n	800b742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d101      	bne.n	800b5a8 <HAL_I2C_Master_Transmit+0x50>
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	e0cc      	b.n	800b742 <HAL_I2C_Master_Transmit+0x1ea>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d007      	beq.n	800b5ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f042 0201 	orr.w	r2, r2, #1
 800b5cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2221      	movs	r2, #33	; 0x21
 800b5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2210      	movs	r2, #16
 800b5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	893a      	ldrh	r2, [r7, #8]
 800b5fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b604:	b29a      	uxth	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	4a50      	ldr	r2, [pc, #320]	; (800b750 <HAL_I2C_Master_Transmit+0x1f8>)
 800b60e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b610:	8979      	ldrh	r1, [r7, #10]
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	6a3a      	ldr	r2, [r7, #32]
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f000 fac2 	bl	800bba0 <I2C_MasterRequestWrite>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e08d      	b.n	800b742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b626:	2300      	movs	r3, #0
 800b628:	613b      	str	r3, [r7, #16]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	613b      	str	r3, [r7, #16]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	613b      	str	r3, [r7, #16]
 800b63a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b63c:	e066      	b.n	800b70c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	6a39      	ldr	r1, [r7, #32]
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 fcd2 	bl	800bfec <I2C_WaitOnTXEFlagUntilTimeout>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00d      	beq.n	800b66a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	2b04      	cmp	r3, #4
 800b654:	d107      	bne.n	800b666 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e06b      	b.n	800b742 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	781a      	ldrb	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b684:	b29b      	uxth	r3, r3
 800b686:	3b01      	subs	r3, #1
 800b688:	b29a      	uxth	r2, r3
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b692:	3b01      	subs	r3, #1
 800b694:	b29a      	uxth	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	f003 0304 	and.w	r3, r3, #4
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	d11b      	bne.n	800b6e0 <HAL_I2C_Master_Transmit+0x188>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d017      	beq.n	800b6e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	781a      	ldrb	r2, [r3, #0]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	6a39      	ldr	r1, [r7, #32]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 fcc2 	bl	800c06e <I2C_WaitOnBTFFlagUntilTimeout>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00d      	beq.n	800b70c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	d107      	bne.n	800b708 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b706:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e01a      	b.n	800b742 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b710:	2b00      	cmp	r3, #0
 800b712:	d194      	bne.n	800b63e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2220      	movs	r2, #32
 800b728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	e000      	b.n	800b742 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b740:	2302      	movs	r3, #2
  }
}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	00100002 	.word	0x00100002
 800b750:	ffff0000 	.word	0xffff0000

0800b754 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08c      	sub	sp, #48	; 0x30
 800b758:	af02      	add	r7, sp, #8
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	607a      	str	r2, [r7, #4]
 800b75e:	461a      	mov	r2, r3
 800b760:	460b      	mov	r3, r1
 800b762:	817b      	strh	r3, [r7, #10]
 800b764:	4613      	mov	r3, r2
 800b766:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b768:	f7fe fb02 	bl	8009d70 <HAL_GetTick>
 800b76c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b20      	cmp	r3, #32
 800b778:	f040 820b 	bne.w	800bb92 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	2319      	movs	r3, #25
 800b782:	2201      	movs	r2, #1
 800b784:	497c      	ldr	r1, [pc, #496]	; (800b978 <HAL_I2C_Master_Receive+0x224>)
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f000 fb5a 	bl	800be40 <I2C_WaitOnFlagUntilTimeout>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b792:	2302      	movs	r3, #2
 800b794:	e1fe      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d101      	bne.n	800b7a4 <HAL_I2C_Master_Receive+0x50>
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	e1f7      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d007      	beq.n	800b7ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f042 0201 	orr.w	r2, r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2222      	movs	r2, #34	; 0x22
 800b7de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2210      	movs	r2, #16
 800b7e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	893a      	ldrh	r2, [r7, #8]
 800b7fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4a5c      	ldr	r2, [pc, #368]	; (800b97c <HAL_I2C_Master_Receive+0x228>)
 800b80a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b80c:	8979      	ldrh	r1, [r7, #10]
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f000 fa46 	bl	800bca4 <I2C_MasterRequestRead>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e1b8      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b826:	2b00      	cmp	r3, #0
 800b828:	d113      	bne.n	800b852 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b82a:	2300      	movs	r3, #0
 800b82c:	623b      	str	r3, [r7, #32]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	695b      	ldr	r3, [r3, #20]
 800b834:	623b      	str	r3, [r7, #32]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	699b      	ldr	r3, [r3, #24]
 800b83c:	623b      	str	r3, [r7, #32]
 800b83e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	e18c      	b.n	800bb6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b856:	2b01      	cmp	r3, #1
 800b858:	d11b      	bne.n	800b892 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b86a:	2300      	movs	r3, #0
 800b86c:	61fb      	str	r3, [r7, #28]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	61fb      	str	r3, [r7, #28]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	61fb      	str	r3, [r7, #28]
 800b87e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	e16c      	b.n	800bb6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b896:	2b02      	cmp	r3, #2
 800b898:	d11b      	bne.n	800b8d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	61bb      	str	r3, [r7, #24]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	61bb      	str	r3, [r7, #24]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	61bb      	str	r3, [r7, #24]
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	e14c      	b.n	800bb6c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	617b      	str	r3, [r7, #20]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	617b      	str	r3, [r7, #20]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	617b      	str	r3, [r7, #20]
 800b8f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b8f8:	e138      	b.n	800bb6c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	f200 80f1 	bhi.w	800bae6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d123      	bne.n	800b954 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b90e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 fbed 	bl	800c0f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e139      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	691a      	ldr	r2, [r3, #16]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92a:	b2d2      	uxtb	r2, r2
 800b92c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b93c:	3b01      	subs	r3, #1
 800b93e:	b29a      	uxth	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b948:	b29b      	uxth	r3, r3
 800b94a:	3b01      	subs	r3, #1
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b952:	e10b      	b.n	800bb6c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d14e      	bne.n	800b9fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b962:	2200      	movs	r2, #0
 800b964:	4906      	ldr	r1, [pc, #24]	; (800b980 <HAL_I2C_Master_Receive+0x22c>)
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 fa6a 	bl	800be40 <I2C_WaitOnFlagUntilTimeout>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d008      	beq.n	800b984 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e10e      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
 800b976:	bf00      	nop
 800b978:	00100002 	.word	0x00100002
 800b97c:	ffff0000 	.word	0xffff0000
 800b980:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691a      	ldr	r2, [r3, #16]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	b2d2      	uxtb	r2, r2
 800b9a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	691a      	ldr	r2, [r3, #16]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	b2d2      	uxtb	r2, r2
 800b9d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9f8:	e0b8      	b.n	800bb6c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	2200      	movs	r2, #0
 800ba02:	4966      	ldr	r1, [pc, #408]	; (800bb9c <HAL_I2C_Master_Receive+0x448>)
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 fa1b 	bl	800be40 <I2C_WaitOnFlagUntilTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e0bf      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	691a      	ldr	r2, [r3, #16]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2e:	b2d2      	uxtb	r2, r2
 800ba30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba40:	3b01      	subs	r3, #1
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	494f      	ldr	r1, [pc, #316]	; (800bb9c <HAL_I2C_Master_Receive+0x448>)
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f000 f9ed 	bl	800be40 <I2C_WaitOnFlagUntilTimeout>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e091      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	691a      	ldr	r2, [r3, #16]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	b2d2      	uxtb	r2, r2
 800ba8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	3b01      	subs	r3, #1
 800baac:	b29a      	uxth	r2, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	691a      	ldr	r2, [r3, #16]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bace:	3b01      	subs	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bada:	b29b      	uxth	r3, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	b29a      	uxth	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bae4:	e042      	b.n	800bb6c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f000 fb00 	bl	800c0f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e04c      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	691a      	ldr	r2, [r3, #16]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	b2d2      	uxtb	r2, r2
 800bb06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb16:	3b01      	subs	r3, #1
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	3b01      	subs	r3, #1
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	f003 0304 	and.w	r3, r3, #4
 800bb36:	2b04      	cmp	r3, #4
 800bb38:	d118      	bne.n	800bb6c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	691a      	ldr	r2, [r3, #16]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	b2d2      	uxtb	r2, r2
 800bb46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb56:	3b01      	subs	r3, #1
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	3b01      	subs	r3, #1
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f47f aec2 	bne.w	800b8fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e000      	b.n	800bb94 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bb92:	2302      	movs	r3, #2
  }
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3728      	adds	r7, #40	; 0x28
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	00010004 	.word	0x00010004

0800bba0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af02      	add	r7, sp, #8
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	607a      	str	r2, [r7, #4]
 800bbaa:	603b      	str	r3, [r7, #0]
 800bbac:	460b      	mov	r3, r1
 800bbae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	2b08      	cmp	r3, #8
 800bbba:	d006      	beq.n	800bbca <I2C_MasterRequestWrite+0x2a>
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d003      	beq.n	800bbca <I2C_MasterRequestWrite+0x2a>
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bbc8:	d108      	bne.n	800bbdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	e00b      	b.n	800bbf4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe0:	2b12      	cmp	r3, #18
 800bbe2:	d107      	bne.n	800bbf4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f000 f91d 	bl	800be40 <I2C_WaitOnFlagUntilTimeout>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00d      	beq.n	800bc28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc1a:	d103      	bne.n	800bc24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e035      	b.n	800bc94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc30:	d108      	bne.n	800bc44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bc32:	897b      	ldrh	r3, [r7, #10]
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	461a      	mov	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bc40:	611a      	str	r2, [r3, #16]
 800bc42:	e01b      	b.n	800bc7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bc44:	897b      	ldrh	r3, [r7, #10]
 800bc46:	11db      	asrs	r3, r3, #7
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	f003 0306 	and.w	r3, r3, #6
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	f063 030f 	orn	r3, r3, #15
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	490e      	ldr	r1, [pc, #56]	; (800bc9c <I2C_MasterRequestWrite+0xfc>)
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 f943 	bl	800beee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d001      	beq.n	800bc72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e010      	b.n	800bc94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bc72:	897b      	ldrh	r3, [r7, #10]
 800bc74:	b2da      	uxtb	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	4907      	ldr	r1, [pc, #28]	; (800bca0 <I2C_MasterRequestWrite+0x100>)
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 f933 	bl	800beee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e000      	b.n	800bc94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	00010008 	.word	0x00010008
 800bca0:	00010002 	.word	0x00010002

0800bca4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af02      	add	r7, sp, #8
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	607a      	str	r2, [r7, #4]
 800bcae:	603b      	str	r3, [r7, #0]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bcc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2b08      	cmp	r3, #8
 800bcce:	d006      	beq.n	800bcde <I2C_MasterRequestRead+0x3a>
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d003      	beq.n	800bcde <I2C_MasterRequestRead+0x3a>
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bcdc:	d108      	bne.n	800bcf0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	e00b      	b.n	800bd08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf4:	2b11      	cmp	r3, #17
 800bcf6:	d107      	bne.n	800bd08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f000 f893 	bl	800be40 <I2C_WaitOnFlagUntilTimeout>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00d      	beq.n	800bd3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd2e:	d103      	bne.n	800bd38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e079      	b.n	800be30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd44:	d108      	bne.n	800bd58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bd46:	897b      	ldrh	r3, [r7, #10]
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	f043 0301 	orr.w	r3, r3, #1
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	611a      	str	r2, [r3, #16]
 800bd56:	e05f      	b.n	800be18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bd58:	897b      	ldrh	r3, [r7, #10]
 800bd5a:	11db      	asrs	r3, r3, #7
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0306 	and.w	r3, r3, #6
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	f063 030f 	orn	r3, r3, #15
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	4930      	ldr	r1, [pc, #192]	; (800be38 <I2C_MasterRequestRead+0x194>)
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 f8b9 	bl	800beee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e054      	b.n	800be30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bd86:	897b      	ldrh	r3, [r7, #10]
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	4929      	ldr	r1, [pc, #164]	; (800be3c <I2C_MasterRequestRead+0x198>)
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f000 f8a9 	bl	800beee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e044      	b.n	800be30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bda6:	2300      	movs	r3, #0
 800bda8:	613b      	str	r3, [r7, #16]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	695b      	ldr	r3, [r3, #20]
 800bdb0:	613b      	str	r3, [r7, #16]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	613b      	str	r3, [r7, #16]
 800bdba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f000 f831 	bl	800be40 <I2C_WaitOnFlagUntilTimeout>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00d      	beq.n	800be00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf2:	d103      	bne.n	800bdfc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdfa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e017      	b.n	800be30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800be00:	897b      	ldrh	r3, [r7, #10]
 800be02:	11db      	asrs	r3, r3, #7
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 0306 	and.w	r3, r3, #6
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	f063 030e 	orn	r3, r3, #14
 800be10:	b2da      	uxtb	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	4907      	ldr	r1, [pc, #28]	; (800be3c <I2C_MasterRequestRead+0x198>)
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f000 f865 	bl	800beee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e000      	b.n	800be30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3718      	adds	r7, #24
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	00010008 	.word	0x00010008
 800be3c:	00010002 	.word	0x00010002

0800be40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	603b      	str	r3, [r7, #0]
 800be4c:	4613      	mov	r3, r2
 800be4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be50:	e025      	b.n	800be9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be58:	d021      	beq.n	800be9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be5a:	f7fd ff89 	bl	8009d70 <HAL_GetTick>
 800be5e:	4602      	mov	r2, r0
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d302      	bcc.n	800be70 <I2C_WaitOnFlagUntilTimeout+0x30>
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d116      	bne.n	800be9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2220      	movs	r2, #32
 800be7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8a:	f043 0220 	orr.w	r2, r3, #32
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e023      	b.n	800bee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	0c1b      	lsrs	r3, r3, #16
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d10d      	bne.n	800bec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	43da      	mvns	r2, r3
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	4013      	ands	r3, r2
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	bf0c      	ite	eq
 800beba:	2301      	moveq	r3, #1
 800bebc:	2300      	movne	r3, #0
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	461a      	mov	r2, r3
 800bec2:	e00c      	b.n	800bede <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	43da      	mvns	r2, r3
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	4013      	ands	r3, r2
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	bf0c      	ite	eq
 800bed6:	2301      	moveq	r3, #1
 800bed8:	2300      	movne	r3, #0
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	461a      	mov	r2, r3
 800bede:	79fb      	ldrb	r3, [r7, #7]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d0b6      	beq.n	800be52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	607a      	str	r2, [r7, #4]
 800befa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800befc:	e051      	b.n	800bfa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	695b      	ldr	r3, [r3, #20]
 800bf04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf0c:	d123      	bne.n	800bf56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bf26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2220      	movs	r2, #32
 800bf32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	f043 0204 	orr.w	r2, r3, #4
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	e046      	b.n	800bfe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5c:	d021      	beq.n	800bfa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf5e:	f7fd ff07 	bl	8009d70 <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d302      	bcc.n	800bf74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d116      	bne.n	800bfa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8e:	f043 0220 	orr.w	r2, r3, #32
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e020      	b.n	800bfe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	0c1b      	lsrs	r3, r3, #16
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d10c      	bne.n	800bfc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	43da      	mvns	r2, r3
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	bf14      	ite	ne
 800bfbe:	2301      	movne	r3, #1
 800bfc0:	2300      	moveq	r3, #0
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	e00b      	b.n	800bfde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	43da      	mvns	r2, r3
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	bf14      	ite	ne
 800bfd8:	2301      	movne	r3, #1
 800bfda:	2300      	moveq	r3, #0
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d18d      	bne.n	800befe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bff8:	e02d      	b.n	800c056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 f8ce 	bl	800c19c <I2C_IsAcknowledgeFailed>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d001      	beq.n	800c00a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	e02d      	b.n	800c066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c010:	d021      	beq.n	800c056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c012:	f7fd fead 	bl	8009d70 <HAL_GetTick>
 800c016:	4602      	mov	r2, r0
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d302      	bcc.n	800c028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d116      	bne.n	800c056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2220      	movs	r2, #32
 800c032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c042:	f043 0220 	orr.w	r2, r3, #32
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e007      	b.n	800c066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	695b      	ldr	r3, [r3, #20]
 800c05c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c060:	2b80      	cmp	r3, #128	; 0x80
 800c062:	d1ca      	bne.n	800bffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c07a:	e02d      	b.n	800c0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f000 f88d 	bl	800c19c <I2C_IsAcknowledgeFailed>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e02d      	b.n	800c0e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c092:	d021      	beq.n	800c0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c094:	f7fd fe6c 	bl	8009d70 <HAL_GetTick>
 800c098:	4602      	mov	r2, r0
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d302      	bcc.n	800c0aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d116      	bne.n	800c0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c4:	f043 0220 	orr.w	r2, r3, #32
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e007      	b.n	800c0e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	f003 0304 	and.w	r3, r3, #4
 800c0e2:	2b04      	cmp	r3, #4
 800c0e4:	d1ca      	bne.n	800c07c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0fc:	e042      	b.n	800c184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	f003 0310 	and.w	r3, r3, #16
 800c108:	2b10      	cmp	r3, #16
 800c10a:	d119      	bne.n	800c140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f06f 0210 	mvn.w	r2, #16
 800c114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2220      	movs	r2, #32
 800c120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	e029      	b.n	800c194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c140:	f7fd fe16 	bl	8009d70 <HAL_GetTick>
 800c144:	4602      	mov	r2, r0
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d302      	bcc.n	800c156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d116      	bne.n	800c184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2220      	movs	r2, #32
 800c160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c170:	f043 0220 	orr.w	r2, r3, #32
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e007      	b.n	800c194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c18e:	2b40      	cmp	r3, #64	; 0x40
 800c190:	d1b5      	bne.n	800c0fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1b2:	d11b      	bne.n	800c1ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c1bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2220      	movs	r2, #32
 800c1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d8:	f043 0204 	orr.w	r2, r3, #4
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e000      	b.n	800c1ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
	...

0800c1fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c202:	2300      	movs	r3, #0
 800c204:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c206:	2300      	movs	r3, #0
 800c208:	603b      	str	r3, [r7, #0]
 800c20a:	4b20      	ldr	r3, [pc, #128]	; (800c28c <HAL_PWREx_EnableOverDrive+0x90>)
 800c20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20e:	4a1f      	ldr	r2, [pc, #124]	; (800c28c <HAL_PWREx_EnableOverDrive+0x90>)
 800c210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c214:	6413      	str	r3, [r2, #64]	; 0x40
 800c216:	4b1d      	ldr	r3, [pc, #116]	; (800c28c <HAL_PWREx_EnableOverDrive+0x90>)
 800c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c222:	4b1b      	ldr	r3, [pc, #108]	; (800c290 <HAL_PWREx_EnableOverDrive+0x94>)
 800c224:	2201      	movs	r2, #1
 800c226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c228:	f7fd fda2 	bl	8009d70 <HAL_GetTick>
 800c22c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c22e:	e009      	b.n	800c244 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c230:	f7fd fd9e 	bl	8009d70 <HAL_GetTick>
 800c234:	4602      	mov	r2, r0
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c23e:	d901      	bls.n	800c244 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e01f      	b.n	800c284 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c244:	4b13      	ldr	r3, [pc, #76]	; (800c294 <HAL_PWREx_EnableOverDrive+0x98>)
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c250:	d1ee      	bne.n	800c230 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c252:	4b11      	ldr	r3, [pc, #68]	; (800c298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c254:	2201      	movs	r2, #1
 800c256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c258:	f7fd fd8a 	bl	8009d70 <HAL_GetTick>
 800c25c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c25e:	e009      	b.n	800c274 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c260:	f7fd fd86 	bl	8009d70 <HAL_GetTick>
 800c264:	4602      	mov	r2, r0
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c26e:	d901      	bls.n	800c274 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c270:	2303      	movs	r3, #3
 800c272:	e007      	b.n	800c284 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c274:	4b07      	ldr	r3, [pc, #28]	; (800c294 <HAL_PWREx_EnableOverDrive+0x98>)
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c27c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c280:	d1ee      	bne.n	800c260 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	40023800 	.word	0x40023800
 800c290:	420e0040 	.word	0x420e0040
 800c294:	40007000 	.word	0x40007000
 800c298:	420e0044 	.word	0x420e0044

0800c29c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e0cc      	b.n	800c44a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c2b0:	4b68      	ldr	r3, [pc, #416]	; (800c454 <HAL_RCC_ClockConfig+0x1b8>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 030f 	and.w	r3, r3, #15
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d90c      	bls.n	800c2d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2be:	4b65      	ldr	r3, [pc, #404]	; (800c454 <HAL_RCC_ClockConfig+0x1b8>)
 800c2c0:	683a      	ldr	r2, [r7, #0]
 800c2c2:	b2d2      	uxtb	r2, r2
 800c2c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2c6:	4b63      	ldr	r3, [pc, #396]	; (800c454 <HAL_RCC_ClockConfig+0x1b8>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 030f 	and.w	r3, r3, #15
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d001      	beq.n	800c2d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e0b8      	b.n	800c44a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 0302 	and.w	r3, r3, #2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d020      	beq.n	800c326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0304 	and.w	r3, r3, #4
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d005      	beq.n	800c2fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2f0:	4b59      	ldr	r3, [pc, #356]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	4a58      	ldr	r2, [pc, #352]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c2f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c2fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 0308 	and.w	r3, r3, #8
 800c304:	2b00      	cmp	r3, #0
 800c306:	d005      	beq.n	800c314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c308:	4b53      	ldr	r3, [pc, #332]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	4a52      	ldr	r2, [pc, #328]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c30e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c314:	4b50      	ldr	r3, [pc, #320]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	494d      	ldr	r1, [pc, #308]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c322:	4313      	orrs	r3, r2
 800c324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d044      	beq.n	800c3bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d107      	bne.n	800c34a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c33a:	4b47      	ldr	r3, [pc, #284]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d119      	bne.n	800c37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e07f      	b.n	800c44a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d003      	beq.n	800c35a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c356:	2b03      	cmp	r3, #3
 800c358:	d107      	bne.n	800c36a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c35a:	4b3f      	ldr	r3, [pc, #252]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e06f      	b.n	800c44a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c36a:	4b3b      	ldr	r3, [pc, #236]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0302 	and.w	r3, r3, #2
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e067      	b.n	800c44a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c37a:	4b37      	ldr	r3, [pc, #220]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	f023 0203 	bic.w	r2, r3, #3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	4934      	ldr	r1, [pc, #208]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c388:	4313      	orrs	r3, r2
 800c38a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c38c:	f7fd fcf0 	bl	8009d70 <HAL_GetTick>
 800c390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c392:	e00a      	b.n	800c3aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c394:	f7fd fcec 	bl	8009d70 <HAL_GetTick>
 800c398:	4602      	mov	r2, r0
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d901      	bls.n	800c3aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e04f      	b.n	800c44a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3aa:	4b2b      	ldr	r3, [pc, #172]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	f003 020c 	and.w	r2, r3, #12
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d1eb      	bne.n	800c394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c3bc:	4b25      	ldr	r3, [pc, #148]	; (800c454 <HAL_RCC_ClockConfig+0x1b8>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 030f 	and.w	r3, r3, #15
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d20c      	bcs.n	800c3e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3ca:	4b22      	ldr	r3, [pc, #136]	; (800c454 <HAL_RCC_ClockConfig+0x1b8>)
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	b2d2      	uxtb	r2, r2
 800c3d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3d2:	4b20      	ldr	r3, [pc, #128]	; (800c454 <HAL_RCC_ClockConfig+0x1b8>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 030f 	and.w	r3, r3, #15
 800c3da:	683a      	ldr	r2, [r7, #0]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d001      	beq.n	800c3e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e032      	b.n	800c44a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 0304 	and.w	r3, r3, #4
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d008      	beq.n	800c402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3f0:	4b19      	ldr	r3, [pc, #100]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	4916      	ldr	r1, [pc, #88]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c3fe:	4313      	orrs	r3, r2
 800c400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0308 	and.w	r3, r3, #8
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d009      	beq.n	800c422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c40e:	4b12      	ldr	r3, [pc, #72]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	490e      	ldr	r1, [pc, #56]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c41e:	4313      	orrs	r3, r2
 800c420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c422:	f000 f821 	bl	800c468 <HAL_RCC_GetSysClockFreq>
 800c426:	4601      	mov	r1, r0
 800c428:	4b0b      	ldr	r3, [pc, #44]	; (800c458 <HAL_RCC_ClockConfig+0x1bc>)
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	091b      	lsrs	r3, r3, #4
 800c42e:	f003 030f 	and.w	r3, r3, #15
 800c432:	4a0a      	ldr	r2, [pc, #40]	; (800c45c <HAL_RCC_ClockConfig+0x1c0>)
 800c434:	5cd3      	ldrb	r3, [r2, r3]
 800c436:	fa21 f303 	lsr.w	r3, r1, r3
 800c43a:	4a09      	ldr	r2, [pc, #36]	; (800c460 <HAL_RCC_ClockConfig+0x1c4>)
 800c43c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c43e:	4b09      	ldr	r3, [pc, #36]	; (800c464 <HAL_RCC_ClockConfig+0x1c8>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4618      	mov	r0, r3
 800c444:	f7fd fc50 	bl	8009ce8 <HAL_InitTick>

  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	40023c00 	.word	0x40023c00
 800c458:	40023800 	.word	0x40023800
 800c45c:	0801a078 	.word	0x0801a078
 800c460:	20000000 	.word	0x20000000
 800c464:	20000004 	.word	0x20000004

0800c468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c46e:	2300      	movs	r3, #0
 800c470:	607b      	str	r3, [r7, #4]
 800c472:	2300      	movs	r3, #0
 800c474:	60fb      	str	r3, [r7, #12]
 800c476:	2300      	movs	r3, #0
 800c478:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c47e:	4b63      	ldr	r3, [pc, #396]	; (800c60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	f003 030c 	and.w	r3, r3, #12
 800c486:	2b04      	cmp	r3, #4
 800c488:	d007      	beq.n	800c49a <HAL_RCC_GetSysClockFreq+0x32>
 800c48a:	2b08      	cmp	r3, #8
 800c48c:	d008      	beq.n	800c4a0 <HAL_RCC_GetSysClockFreq+0x38>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f040 80b4 	bne.w	800c5fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c494:	4b5e      	ldr	r3, [pc, #376]	; (800c610 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c496:	60bb      	str	r3, [r7, #8]
       break;
 800c498:	e0b3      	b.n	800c602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c49a:	4b5d      	ldr	r3, [pc, #372]	; (800c610 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c49c:	60bb      	str	r3, [r7, #8]
      break;
 800c49e:	e0b0      	b.n	800c602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c4a0:	4b5a      	ldr	r3, [pc, #360]	; (800c60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c4aa:	4b58      	ldr	r3, [pc, #352]	; (800c60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d04a      	beq.n	800c54c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4b6:	4b55      	ldr	r3, [pc, #340]	; (800c60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	099b      	lsrs	r3, r3, #6
 800c4bc:	f04f 0400 	mov.w	r4, #0
 800c4c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c4c4:	f04f 0200 	mov.w	r2, #0
 800c4c8:	ea03 0501 	and.w	r5, r3, r1
 800c4cc:	ea04 0602 	and.w	r6, r4, r2
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4632      	mov	r2, r6
 800c4d4:	f04f 0300 	mov.w	r3, #0
 800c4d8:	f04f 0400 	mov.w	r4, #0
 800c4dc:	0154      	lsls	r4, r2, #5
 800c4de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c4e2:	014b      	lsls	r3, r1, #5
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	1b49      	subs	r1, r1, r5
 800c4ea:	eb62 0206 	sbc.w	r2, r2, r6
 800c4ee:	f04f 0300 	mov.w	r3, #0
 800c4f2:	f04f 0400 	mov.w	r4, #0
 800c4f6:	0194      	lsls	r4, r2, #6
 800c4f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c4fc:	018b      	lsls	r3, r1, #6
 800c4fe:	1a5b      	subs	r3, r3, r1
 800c500:	eb64 0402 	sbc.w	r4, r4, r2
 800c504:	f04f 0100 	mov.w	r1, #0
 800c508:	f04f 0200 	mov.w	r2, #0
 800c50c:	00e2      	lsls	r2, r4, #3
 800c50e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c512:	00d9      	lsls	r1, r3, #3
 800c514:	460b      	mov	r3, r1
 800c516:	4614      	mov	r4, r2
 800c518:	195b      	adds	r3, r3, r5
 800c51a:	eb44 0406 	adc.w	r4, r4, r6
 800c51e:	f04f 0100 	mov.w	r1, #0
 800c522:	f04f 0200 	mov.w	r2, #0
 800c526:	02a2      	lsls	r2, r4, #10
 800c528:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c52c:	0299      	lsls	r1, r3, #10
 800c52e:	460b      	mov	r3, r1
 800c530:	4614      	mov	r4, r2
 800c532:	4618      	mov	r0, r3
 800c534:	4621      	mov	r1, r4
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f04f 0400 	mov.w	r4, #0
 800c53c:	461a      	mov	r2, r3
 800c53e:	4623      	mov	r3, r4
 800c540:	f7f4 fbba 	bl	8000cb8 <__aeabi_uldivmod>
 800c544:	4603      	mov	r3, r0
 800c546:	460c      	mov	r4, r1
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	e049      	b.n	800c5e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c54c:	4b2f      	ldr	r3, [pc, #188]	; (800c60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	099b      	lsrs	r3, r3, #6
 800c552:	f04f 0400 	mov.w	r4, #0
 800c556:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c55a:	f04f 0200 	mov.w	r2, #0
 800c55e:	ea03 0501 	and.w	r5, r3, r1
 800c562:	ea04 0602 	and.w	r6, r4, r2
 800c566:	4629      	mov	r1, r5
 800c568:	4632      	mov	r2, r6
 800c56a:	f04f 0300 	mov.w	r3, #0
 800c56e:	f04f 0400 	mov.w	r4, #0
 800c572:	0154      	lsls	r4, r2, #5
 800c574:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c578:	014b      	lsls	r3, r1, #5
 800c57a:	4619      	mov	r1, r3
 800c57c:	4622      	mov	r2, r4
 800c57e:	1b49      	subs	r1, r1, r5
 800c580:	eb62 0206 	sbc.w	r2, r2, r6
 800c584:	f04f 0300 	mov.w	r3, #0
 800c588:	f04f 0400 	mov.w	r4, #0
 800c58c:	0194      	lsls	r4, r2, #6
 800c58e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c592:	018b      	lsls	r3, r1, #6
 800c594:	1a5b      	subs	r3, r3, r1
 800c596:	eb64 0402 	sbc.w	r4, r4, r2
 800c59a:	f04f 0100 	mov.w	r1, #0
 800c59e:	f04f 0200 	mov.w	r2, #0
 800c5a2:	00e2      	lsls	r2, r4, #3
 800c5a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c5a8:	00d9      	lsls	r1, r3, #3
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	195b      	adds	r3, r3, r5
 800c5b0:	eb44 0406 	adc.w	r4, r4, r6
 800c5b4:	f04f 0100 	mov.w	r1, #0
 800c5b8:	f04f 0200 	mov.w	r2, #0
 800c5bc:	02a2      	lsls	r2, r4, #10
 800c5be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c5c2:	0299      	lsls	r1, r3, #10
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4614      	mov	r4, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f04f 0400 	mov.w	r4, #0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	4623      	mov	r3, r4
 800c5d6:	f7f4 fb6f 	bl	8000cb8 <__aeabi_uldivmod>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	460c      	mov	r4, r1
 800c5de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c5e0:	4b0a      	ldr	r3, [pc, #40]	; (800c60c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	0c1b      	lsrs	r3, r3, #16
 800c5e6:	f003 0303 	and.w	r3, r3, #3
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5f8:	60bb      	str	r3, [r7, #8]
      break;
 800c5fa:	e002      	b.n	800c602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c5fc:	4b04      	ldr	r3, [pc, #16]	; (800c610 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c5fe:	60bb      	str	r3, [r7, #8]
      break;
 800c600:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c602:	68bb      	ldr	r3, [r7, #8]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3714      	adds	r7, #20
 800c608:	46bd      	mov	sp, r7
 800c60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c60c:	40023800 	.word	0x40023800
 800c610:	00f42400 	.word	0x00f42400

0800c614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c614:	b480      	push	{r7}
 800c616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c618:	4b03      	ldr	r3, [pc, #12]	; (800c628 <HAL_RCC_GetHCLKFreq+0x14>)
 800c61a:	681b      	ldr	r3, [r3, #0]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	20000000 	.word	0x20000000

0800c62c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c630:	f7ff fff0 	bl	800c614 <HAL_RCC_GetHCLKFreq>
 800c634:	4601      	mov	r1, r0
 800c636:	4b05      	ldr	r3, [pc, #20]	; (800c64c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	0a9b      	lsrs	r3, r3, #10
 800c63c:	f003 0307 	and.w	r3, r3, #7
 800c640:	4a03      	ldr	r2, [pc, #12]	; (800c650 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c642:	5cd3      	ldrb	r3, [r2, r3]
 800c644:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c648:	4618      	mov	r0, r3
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	40023800 	.word	0x40023800
 800c650:	0801a088 	.word	0x0801a088

0800c654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c658:	f7ff ffdc 	bl	800c614 <HAL_RCC_GetHCLKFreq>
 800c65c:	4601      	mov	r1, r0
 800c65e:	4b05      	ldr	r3, [pc, #20]	; (800c674 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	0b5b      	lsrs	r3, r3, #13
 800c664:	f003 0307 	and.w	r3, r3, #7
 800c668:	4a03      	ldr	r2, [pc, #12]	; (800c678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c66a:	5cd3      	ldrb	r3, [r2, r3]
 800c66c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c670:	4618      	mov	r0, r3
 800c672:	bd80      	pop	{r7, pc}
 800c674:	40023800 	.word	0x40023800
 800c678:	0801a088 	.word	0x0801a088

0800c67c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c68c:	2300      	movs	r3, #0
 800c68e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c690:	2300      	movs	r3, #0
 800c692:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c694:	2300      	movs	r3, #0
 800c696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00a      	beq.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c6a4:	4b66      	ldr	r3, [pc, #408]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b2:	4963      	ldr	r1, [pc, #396]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00a      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c6c6:	4b5e      	ldr	r3, [pc, #376]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d4:	495a      	ldr	r1, [pc, #360]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10b      	bne.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d105      	bne.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d075      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c700:	4b50      	ldr	r3, [pc, #320]	; (800c844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c706:	f7fd fb33 	bl	8009d70 <HAL_GetTick>
 800c70a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c70c:	e008      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c70e:	f7fd fb2f 	bl	8009d70 <HAL_GetTick>
 800c712:	4602      	mov	r2, r0
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d901      	bls.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e1dc      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c720:	4b47      	ldr	r3, [pc, #284]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1f0      	bne.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d009      	beq.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	019a      	lsls	r2, r3, #6
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	071b      	lsls	r3, r3, #28
 800c744:	493e      	ldr	r1, [pc, #248]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c746:	4313      	orrs	r3, r2
 800c748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 0302 	and.w	r3, r3, #2
 800c754:	2b00      	cmp	r3, #0
 800c756:	d01f      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c758:	4b39      	ldr	r3, [pc, #228]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c75e:	0f1b      	lsrs	r3, r3, #28
 800c760:	f003 0307 	and.w	r3, r3, #7
 800c764:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	019a      	lsls	r2, r3, #6
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	061b      	lsls	r3, r3, #24
 800c772:	431a      	orrs	r2, r3
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	071b      	lsls	r3, r3, #28
 800c778:	4931      	ldr	r1, [pc, #196]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c77a:	4313      	orrs	r3, r2
 800c77c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c780:	4b2f      	ldr	r3, [pc, #188]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c786:	f023 021f 	bic.w	r2, r3, #31
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a1b      	ldr	r3, [r3, #32]
 800c78e:	3b01      	subs	r3, #1
 800c790:	492b      	ldr	r1, [pc, #172]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c792:	4313      	orrs	r3, r2
 800c794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00d      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	019a      	lsls	r2, r3, #6
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	061b      	lsls	r3, r3, #24
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	071b      	lsls	r3, r3, #28
 800c7b8:	4921      	ldr	r1, [pc, #132]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c7c0:	4b20      	ldr	r3, [pc, #128]	; (800c844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c7c6:	f7fd fad3 	bl	8009d70 <HAL_GetTick>
 800c7ca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7cc:	e008      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c7ce:	f7fd facf 	bl	8009d70 <HAL_GetTick>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d901      	bls.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e17c      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7e0:	4b17      	ldr	r3, [pc, #92]	; (800c840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0f0      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d112      	bne.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10c      	bne.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 80ce 	beq.w	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c81a:	f040 80c8 	bne.w	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c81e:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c820:	2200      	movs	r2, #0
 800c822:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c824:	f7fd faa4 	bl	8009d70 <HAL_GetTick>
 800c828:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c82a:	e00f      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c82c:	f7fd faa0 	bl	8009d70 <HAL_GetTick>
 800c830:	4602      	mov	r2, r0
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	2b02      	cmp	r3, #2
 800c838:	d908      	bls.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c83a:	2303      	movs	r3, #3
 800c83c:	e14d      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c83e:	bf00      	nop
 800c840:	40023800 	.word	0x40023800
 800c844:	42470068 	.word	0x42470068
 800c848:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c84c:	4ba5      	ldr	r3, [pc, #660]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c858:	d0e8      	beq.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	d02e      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c866:	4b9f      	ldr	r3, [pc, #636]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c86c:	0c1b      	lsrs	r3, r3, #16
 800c86e:	f003 0303 	and.w	r3, r3, #3
 800c872:	3301      	adds	r3, #1
 800c874:	005b      	lsls	r3, r3, #1
 800c876:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c878:	4b9a      	ldr	r3, [pc, #616]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c87e:	0f1b      	lsrs	r3, r3, #28
 800c880:	f003 0307 	and.w	r3, r3, #7
 800c884:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	019a      	lsls	r2, r3, #6
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	085b      	lsrs	r3, r3, #1
 800c890:	3b01      	subs	r3, #1
 800c892:	041b      	lsls	r3, r3, #16
 800c894:	431a      	orrs	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	061b      	lsls	r3, r3, #24
 800c89c:	431a      	orrs	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	071b      	lsls	r3, r3, #28
 800c8a2:	4990      	ldr	r1, [pc, #576]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c8aa:	4b8e      	ldr	r3, [pc, #568]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	021b      	lsls	r3, r3, #8
 800c8bc:	4989      	ldr	r1, [pc, #548]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 0308 	and.w	r3, r3, #8
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d02c      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c8d0:	4b84      	ldr	r3, [pc, #528]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d6:	0c1b      	lsrs	r3, r3, #16
 800c8d8:	f003 0303 	and.w	r3, r3, #3
 800c8dc:	3301      	adds	r3, #1
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8e2:	4b80      	ldr	r3, [pc, #512]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8e8:	0e1b      	lsrs	r3, r3, #24
 800c8ea:	f003 030f 	and.w	r3, r3, #15
 800c8ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	019a      	lsls	r2, r3, #6
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	085b      	lsrs	r3, r3, #1
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	041b      	lsls	r3, r3, #16
 800c8fe:	431a      	orrs	r2, r3
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	061b      	lsls	r3, r3, #24
 800c904:	431a      	orrs	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	071b      	lsls	r3, r3, #28
 800c90c:	4975      	ldr	r1, [pc, #468]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c90e:	4313      	orrs	r3, r2
 800c910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c914:	4b73      	ldr	r3, [pc, #460]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c91a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c922:	4970      	ldr	r1, [pc, #448]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c924:	4313      	orrs	r3, r2
 800c926:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c932:	2b00      	cmp	r3, #0
 800c934:	d024      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c93a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c93e:	d11f      	bne.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c940:	4b68      	ldr	r3, [pc, #416]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c946:	0e1b      	lsrs	r3, r3, #24
 800c948:	f003 030f 	and.w	r3, r3, #15
 800c94c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c94e:	4b65      	ldr	r3, [pc, #404]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c954:	0f1b      	lsrs	r3, r3, #28
 800c956:	f003 0307 	and.w	r3, r3, #7
 800c95a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	019a      	lsls	r2, r3, #6
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	695b      	ldr	r3, [r3, #20]
 800c966:	085b      	lsrs	r3, r3, #1
 800c968:	3b01      	subs	r3, #1
 800c96a:	041b      	lsls	r3, r3, #16
 800c96c:	431a      	orrs	r2, r3
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	061b      	lsls	r3, r3, #24
 800c972:	431a      	orrs	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	071b      	lsls	r3, r3, #28
 800c978:	495a      	ldr	r1, [pc, #360]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c97a:	4313      	orrs	r3, r2
 800c97c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c980:	4b59      	ldr	r3, [pc, #356]	; (800cae8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c982:	2201      	movs	r2, #1
 800c984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c986:	f7fd f9f3 	bl	8009d70 <HAL_GetTick>
 800c98a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c98c:	e008      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c98e:	f7fd f9ef 	bl	8009d70 <HAL_GetTick>
 800c992:	4602      	mov	r2, r0
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d901      	bls.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c99c:	2303      	movs	r3, #3
 800c99e:	e09c      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c9a0:	4b50      	ldr	r3, [pc, #320]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ac:	d1ef      	bne.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 0320 	and.w	r3, r3, #32
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 8083 	beq.w	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c9bc:	2300      	movs	r3, #0
 800c9be:	60bb      	str	r3, [r7, #8]
 800c9c0:	4b48      	ldr	r3, [pc, #288]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c4:	4a47      	ldr	r2, [pc, #284]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9ca:	6413      	str	r3, [r2, #64]	; 0x40
 800c9cc:	4b45      	ldr	r3, [pc, #276]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9d4:	60bb      	str	r3, [r7, #8]
 800c9d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c9d8:	4b44      	ldr	r3, [pc, #272]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a43      	ldr	r2, [pc, #268]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9e2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c9e4:	f7fd f9c4 	bl	8009d70 <HAL_GetTick>
 800c9e8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9ea:	e008      	b.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c9ec:	f7fd f9c0 	bl	8009d70 <HAL_GetTick>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d901      	bls.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e06d      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9fe:	4b3b      	ldr	r3, [pc, #236]	; (800caec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0f0      	beq.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ca0a:	4b36      	ldr	r3, [pc, #216]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca12:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d02f      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca22:	69ba      	ldr	r2, [r7, #24]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d028      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca28:	4b2e      	ldr	r3, [pc, #184]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca30:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ca32:	4b2f      	ldr	r3, [pc, #188]	; (800caf0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ca38:	4b2d      	ldr	r3, [pc, #180]	; (800caf0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ca3e:	4a29      	ldr	r2, [pc, #164]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ca44:	4b27      	ldr	r3, [pc, #156]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca48:	f003 0301 	and.w	r3, r3, #1
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d114      	bne.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ca50:	f7fd f98e 	bl	8009d70 <HAL_GetTick>
 800ca54:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca56:	e00a      	b.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca58:	f7fd f98a 	bl	8009d70 <HAL_GetTick>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d901      	bls.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	e035      	b.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca6e:	4b1d      	ldr	r3, [pc, #116]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0ee      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca86:	d10d      	bne.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ca88:	4b16      	ldr	r3, [pc, #88]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca9c:	4911      	ldr	r1, [pc, #68]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	608b      	str	r3, [r1, #8]
 800caa2:	e005      	b.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800caa4:	4b0f      	ldr	r3, [pc, #60]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	4a0e      	ldr	r2, [pc, #56]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800caae:	6093      	str	r3, [r2, #8]
 800cab0:	4b0c      	ldr	r3, [pc, #48]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cab2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cabc:	4909      	ldr	r1, [pc, #36]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cabe:	4313      	orrs	r3, r2
 800cac0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 0310 	and.w	r3, r3, #16
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d004      	beq.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cad4:	4b07      	ldr	r3, [pc, #28]	; (800caf4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cad6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3720      	adds	r7, #32
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	40023800 	.word	0x40023800
 800cae8:	42470070 	.word	0x42470070
 800caec:	40007000 	.word	0x40007000
 800caf0:	42470e40 	.word	0x42470e40
 800caf4:	424711e0 	.word	0x424711e0

0800caf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb00:	2300      	movs	r3, #0
 800cb02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d075      	beq.n	800cbfc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cb10:	4ba2      	ldr	r3, [pc, #648]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	f003 030c 	and.w	r3, r3, #12
 800cb18:	2b04      	cmp	r3, #4
 800cb1a:	d00c      	beq.n	800cb36 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb1c:	4b9f      	ldr	r3, [pc, #636]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	d112      	bne.n	800cb4e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb28:	4b9c      	ldr	r3, [pc, #624]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb34:	d10b      	bne.n	800cb4e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb36:	4b99      	ldr	r3, [pc, #612]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d05b      	beq.n	800cbfa <HAL_RCC_OscConfig+0x102>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d157      	bne.n	800cbfa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e20b      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb56:	d106      	bne.n	800cb66 <HAL_RCC_OscConfig+0x6e>
 800cb58:	4b90      	ldr	r3, [pc, #576]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a8f      	ldr	r2, [pc, #572]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb62:	6013      	str	r3, [r2, #0]
 800cb64:	e01d      	b.n	800cba2 <HAL_RCC_OscConfig+0xaa>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb6e:	d10c      	bne.n	800cb8a <HAL_RCC_OscConfig+0x92>
 800cb70:	4b8a      	ldr	r3, [pc, #552]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a89      	ldr	r2, [pc, #548]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cb7a:	6013      	str	r3, [r2, #0]
 800cb7c:	4b87      	ldr	r3, [pc, #540]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a86      	ldr	r2, [pc, #536]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb86:	6013      	str	r3, [r2, #0]
 800cb88:	e00b      	b.n	800cba2 <HAL_RCC_OscConfig+0xaa>
 800cb8a:	4b84      	ldr	r3, [pc, #528]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a83      	ldr	r2, [pc, #524]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	4b81      	ldr	r3, [pc, #516]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a80      	ldr	r2, [pc, #512]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cb9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cba0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d013      	beq.n	800cbd2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbaa:	f7fd f8e1 	bl	8009d70 <HAL_GetTick>
 800cbae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbb0:	e008      	b.n	800cbc4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cbb2:	f7fd f8dd 	bl	8009d70 <HAL_GetTick>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	2b64      	cmp	r3, #100	; 0x64
 800cbbe:	d901      	bls.n	800cbc4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	e1d0      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbc4:	4b75      	ldr	r3, [pc, #468]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d0f0      	beq.n	800cbb2 <HAL_RCC_OscConfig+0xba>
 800cbd0:	e014      	b.n	800cbfc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd2:	f7fd f8cd 	bl	8009d70 <HAL_GetTick>
 800cbd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cbd8:	e008      	b.n	800cbec <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cbda:	f7fd f8c9 	bl	8009d70 <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	2b64      	cmp	r3, #100	; 0x64
 800cbe6:	d901      	bls.n	800cbec <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e1bc      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cbec:	4b6b      	ldr	r3, [pc, #428]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1f0      	bne.n	800cbda <HAL_RCC_OscConfig+0xe2>
 800cbf8:	e000      	b.n	800cbfc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbfa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 0302 	and.w	r3, r3, #2
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d063      	beq.n	800ccd0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cc08:	4b64      	ldr	r3, [pc, #400]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	f003 030c 	and.w	r3, r3, #12
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00b      	beq.n	800cc2c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc14:	4b61      	ldr	r3, [pc, #388]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cc1c:	2b08      	cmp	r3, #8
 800cc1e:	d11c      	bne.n	800cc5a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc20:	4b5e      	ldr	r3, [pc, #376]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d116      	bne.n	800cc5a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc2c:	4b5b      	ldr	r3, [pc, #364]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 0302 	and.w	r3, r3, #2
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d005      	beq.n	800cc44 <HAL_RCC_OscConfig+0x14c>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d001      	beq.n	800cc44 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e190      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc44:	4b55      	ldr	r3, [pc, #340]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	4952      	ldr	r1, [pc, #328]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc54:	4313      	orrs	r3, r2
 800cc56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc58:	e03a      	b.n	800ccd0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d020      	beq.n	800cca4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cc62:	4b4f      	ldr	r3, [pc, #316]	; (800cda0 <HAL_RCC_OscConfig+0x2a8>)
 800cc64:	2201      	movs	r2, #1
 800cc66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc68:	f7fd f882 	bl	8009d70 <HAL_GetTick>
 800cc6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc6e:	e008      	b.n	800cc82 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc70:	f7fd f87e 	bl	8009d70 <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d901      	bls.n	800cc82 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e171      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc82:	4b46      	ldr	r3, [pc, #280]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0f0      	beq.n	800cc70 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc8e:	4b43      	ldr	r3, [pc, #268]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	493f      	ldr	r1, [pc, #252]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	600b      	str	r3, [r1, #0]
 800cca2:	e015      	b.n	800ccd0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cca4:	4b3e      	ldr	r3, [pc, #248]	; (800cda0 <HAL_RCC_OscConfig+0x2a8>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccaa:	f7fd f861 	bl	8009d70 <HAL_GetTick>
 800ccae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ccb0:	e008      	b.n	800ccc4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ccb2:	f7fd f85d 	bl	8009d70 <HAL_GetTick>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d901      	bls.n	800ccc4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	e150      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ccc4:	4b35      	ldr	r3, [pc, #212]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 0302 	and.w	r3, r3, #2
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1f0      	bne.n	800ccb2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 0308 	and.w	r3, r3, #8
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d030      	beq.n	800cd3e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	695b      	ldr	r3, [r3, #20]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d016      	beq.n	800cd12 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cce4:	4b2f      	ldr	r3, [pc, #188]	; (800cda4 <HAL_RCC_OscConfig+0x2ac>)
 800cce6:	2201      	movs	r2, #1
 800cce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccea:	f7fd f841 	bl	8009d70 <HAL_GetTick>
 800ccee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ccf0:	e008      	b.n	800cd04 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ccf2:	f7fd f83d 	bl	8009d70 <HAL_GetTick>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	d901      	bls.n	800cd04 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e130      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd04:	4b25      	ldr	r3, [pc, #148]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cd06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd08:	f003 0302 	and.w	r3, r3, #2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d0f0      	beq.n	800ccf2 <HAL_RCC_OscConfig+0x1fa>
 800cd10:	e015      	b.n	800cd3e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd12:	4b24      	ldr	r3, [pc, #144]	; (800cda4 <HAL_RCC_OscConfig+0x2ac>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd18:	f7fd f82a 	bl	8009d70 <HAL_GetTick>
 800cd1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cd1e:	e008      	b.n	800cd32 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd20:	f7fd f826 	bl	8009d70 <HAL_GetTick>
 800cd24:	4602      	mov	r2, r0
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	d901      	bls.n	800cd32 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e119      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cd32:	4b1a      	ldr	r3, [pc, #104]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd36:	f003 0302 	and.w	r3, r3, #2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1f0      	bne.n	800cd20 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0304 	and.w	r3, r3, #4
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f000 809f 	beq.w	800ce8a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd50:	4b12      	ldr	r3, [pc, #72]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10f      	bne.n	800cd7c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	4b0e      	ldr	r3, [pc, #56]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd64:	4a0d      	ldr	r2, [pc, #52]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cd66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd6a:	6413      	str	r3, [r2, #64]	; 0x40
 800cd6c:	4b0b      	ldr	r3, [pc, #44]	; (800cd9c <HAL_RCC_OscConfig+0x2a4>)
 800cd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <HAL_RCC_OscConfig+0x2b0>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d120      	bne.n	800cdca <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cd88:	4b07      	ldr	r3, [pc, #28]	; (800cda8 <HAL_RCC_OscConfig+0x2b0>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a06      	ldr	r2, [pc, #24]	; (800cda8 <HAL_RCC_OscConfig+0x2b0>)
 800cd8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd94:	f7fc ffec 	bl	8009d70 <HAL_GetTick>
 800cd98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd9a:	e010      	b.n	800cdbe <HAL_RCC_OscConfig+0x2c6>
 800cd9c:	40023800 	.word	0x40023800
 800cda0:	42470000 	.word	0x42470000
 800cda4:	42470e80 	.word	0x42470e80
 800cda8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdac:	f7fc ffe0 	bl	8009d70 <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d901      	bls.n	800cdbe <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e0d3      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cdbe:	4b6c      	ldr	r3, [pc, #432]	; (800cf70 <HAL_RCC_OscConfig+0x478>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d0f0      	beq.n	800cdac <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d106      	bne.n	800cde0 <HAL_RCC_OscConfig+0x2e8>
 800cdd2:	4b68      	ldr	r3, [pc, #416]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cdd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdd6:	4a67      	ldr	r2, [pc, #412]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cdd8:	f043 0301 	orr.w	r3, r3, #1
 800cddc:	6713      	str	r3, [r2, #112]	; 0x70
 800cdde:	e01c      	b.n	800ce1a <HAL_RCC_OscConfig+0x322>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	2b05      	cmp	r3, #5
 800cde6:	d10c      	bne.n	800ce02 <HAL_RCC_OscConfig+0x30a>
 800cde8:	4b62      	ldr	r3, [pc, #392]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cdea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdec:	4a61      	ldr	r2, [pc, #388]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cdee:	f043 0304 	orr.w	r3, r3, #4
 800cdf2:	6713      	str	r3, [r2, #112]	; 0x70
 800cdf4:	4b5f      	ldr	r3, [pc, #380]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cdf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdf8:	4a5e      	ldr	r2, [pc, #376]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cdfa:	f043 0301 	orr.w	r3, r3, #1
 800cdfe:	6713      	str	r3, [r2, #112]	; 0x70
 800ce00:	e00b      	b.n	800ce1a <HAL_RCC_OscConfig+0x322>
 800ce02:	4b5c      	ldr	r3, [pc, #368]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce06:	4a5b      	ldr	r2, [pc, #364]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce08:	f023 0301 	bic.w	r3, r3, #1
 800ce0c:	6713      	str	r3, [r2, #112]	; 0x70
 800ce0e:	4b59      	ldr	r3, [pc, #356]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce12:	4a58      	ldr	r2, [pc, #352]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce14:	f023 0304 	bic.w	r3, r3, #4
 800ce18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d015      	beq.n	800ce4e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce22:	f7fc ffa5 	bl	8009d70 <HAL_GetTick>
 800ce26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce28:	e00a      	b.n	800ce40 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce2a:	f7fc ffa1 	bl	8009d70 <HAL_GetTick>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d901      	bls.n	800ce40 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	e092      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce40:	4b4c      	ldr	r3, [pc, #304]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce44:	f003 0302 	and.w	r3, r3, #2
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d0ee      	beq.n	800ce2a <HAL_RCC_OscConfig+0x332>
 800ce4c:	e014      	b.n	800ce78 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce4e:	f7fc ff8f 	bl	8009d70 <HAL_GetTick>
 800ce52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce54:	e00a      	b.n	800ce6c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce56:	f7fc ff8b 	bl	8009d70 <HAL_GetTick>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d901      	bls.n	800ce6c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	e07c      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce6c:	4b41      	ldr	r3, [pc, #260]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce70:	f003 0302 	and.w	r3, r3, #2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1ee      	bne.n	800ce56 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce78:	7dfb      	ldrb	r3, [r7, #23]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d105      	bne.n	800ce8a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce7e:	4b3d      	ldr	r3, [pc, #244]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce82:	4a3c      	ldr	r2, [pc, #240]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	699b      	ldr	r3, [r3, #24]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d068      	beq.n	800cf64 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ce92:	4b38      	ldr	r3, [pc, #224]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	f003 030c 	and.w	r3, r3, #12
 800ce9a:	2b08      	cmp	r3, #8
 800ce9c:	d060      	beq.n	800cf60 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d145      	bne.n	800cf32 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cea6:	4b34      	ldr	r3, [pc, #208]	; (800cf78 <HAL_RCC_OscConfig+0x480>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ceac:	f7fc ff60 	bl	8009d70 <HAL_GetTick>
 800ceb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ceb2:	e008      	b.n	800cec6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ceb4:	f7fc ff5c 	bl	8009d70 <HAL_GetTick>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d901      	bls.n	800cec6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cec2:	2303      	movs	r3, #3
 800cec4:	e04f      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cec6:	4b2b      	ldr	r3, [pc, #172]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1f0      	bne.n	800ceb4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	69da      	ldr	r2, [r3, #28]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a1b      	ldr	r3, [r3, #32]
 800ceda:	431a      	orrs	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee0:	019b      	lsls	r3, r3, #6
 800cee2:	431a      	orrs	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee8:	085b      	lsrs	r3, r3, #1
 800ceea:	3b01      	subs	r3, #1
 800ceec:	041b      	lsls	r3, r3, #16
 800ceee:	431a      	orrs	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef4:	061b      	lsls	r3, r3, #24
 800cef6:	431a      	orrs	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefc:	071b      	lsls	r3, r3, #28
 800cefe:	491d      	ldr	r1, [pc, #116]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cf00:	4313      	orrs	r3, r2
 800cf02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cf04:	4b1c      	ldr	r3, [pc, #112]	; (800cf78 <HAL_RCC_OscConfig+0x480>)
 800cf06:	2201      	movs	r2, #1
 800cf08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf0a:	f7fc ff31 	bl	8009d70 <HAL_GetTick>
 800cf0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf10:	e008      	b.n	800cf24 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf12:	f7fc ff2d 	bl	8009d70 <HAL_GetTick>
 800cf16:	4602      	mov	r2, r0
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d901      	bls.n	800cf24 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cf20:	2303      	movs	r3, #3
 800cf22:	e020      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf24:	4b13      	ldr	r3, [pc, #76]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0f0      	beq.n	800cf12 <HAL_RCC_OscConfig+0x41a>
 800cf30:	e018      	b.n	800cf64 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf32:	4b11      	ldr	r3, [pc, #68]	; (800cf78 <HAL_RCC_OscConfig+0x480>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf38:	f7fc ff1a 	bl	8009d70 <HAL_GetTick>
 800cf3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf3e:	e008      	b.n	800cf52 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf40:	f7fc ff16 	bl	8009d70 <HAL_GetTick>
 800cf44:	4602      	mov	r2, r0
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d901      	bls.n	800cf52 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	e009      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf52:	4b08      	ldr	r3, [pc, #32]	; (800cf74 <HAL_RCC_OscConfig+0x47c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d1f0      	bne.n	800cf40 <HAL_RCC_OscConfig+0x448>
 800cf5e:	e001      	b.n	800cf64 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e000      	b.n	800cf66 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3718      	adds	r7, #24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	40007000 	.word	0x40007000
 800cf74:	40023800 	.word	0x40023800
 800cf78:	42470060 	.word	0x42470060

0800cf7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d101      	bne.n	800cf8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e022      	b.n	800cfd4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d105      	bne.n	800cfa6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7fa f865 	bl	8007070 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2203      	movs	r2, #3
 800cfaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 f814 	bl	800cfdc <HAL_SD_InitCard>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e00a      	b.n	800cfd4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cfdc:	b5b0      	push	{r4, r5, r7, lr}
 800cfde:	b08e      	sub	sp, #56	; 0x38
 800cfe0:	af04      	add	r7, sp, #16
 800cfe2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cfec:	2300      	movs	r3, #0
 800cfee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cff0:	2300      	movs	r3, #0
 800cff2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cff4:	2300      	movs	r3, #0
 800cff6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cff8:	2376      	movs	r3, #118	; 0x76
 800cffa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681d      	ldr	r5, [r3, #0]
 800d000:	466c      	mov	r4, sp
 800d002:	f107 0314 	add.w	r3, r7, #20
 800d006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d00a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d00e:	f107 0308 	add.w	r3, r7, #8
 800d012:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d014:	4628      	mov	r0, r5
 800d016:	f003 fa87 	bl	8010528 <SDIO_Init>
 800d01a:	4603      	mov	r3, r0
 800d01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e031      	b.n	800d090 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d02c:	4b1a      	ldr	r3, [pc, #104]	; (800d098 <HAL_SD_InitCard+0xbc>)
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4618      	mov	r0, r3
 800d038:	f003 fabf 	bl	80105ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d03c:	4b16      	ldr	r3, [pc, #88]	; (800d098 <HAL_SD_InitCard+0xbc>)
 800d03e:	2201      	movs	r2, #1
 800d040:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 ffc6 	bl	800dfd4 <SD_PowerON>
 800d048:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d04a:	6a3b      	ldr	r3, [r7, #32]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00b      	beq.n	800d068 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d05c:	6a3b      	ldr	r3, [r7, #32]
 800d05e:	431a      	orrs	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e013      	b.n	800d090 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 fee5 	bl	800de38 <SD_InitCard>
 800d06e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00b      	beq.n	800d08e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2201      	movs	r2, #1
 800d07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	431a      	orrs	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d08a:	2301      	movs	r3, #1
 800d08c:	e000      	b.n	800d090 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3728      	adds	r7, #40	; 0x28
 800d094:	46bd      	mov	sp, r7
 800d096:	bdb0      	pop	{r4, r5, r7, pc}
 800d098:	422580a0 	.word	0x422580a0

0800d09c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b08c      	sub	sp, #48	; 0x30
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
 800d0a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d107      	bne.n	800d0c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e0c7      	b.n	800d254 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	f040 80c0 	bne.w	800d252 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d0d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	441a      	add	r2, r3
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d907      	bls.n	800d0f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e0ae      	b.n	800d254 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2203      	movs	r2, #3
 800d0fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d114:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11a:	4a50      	ldr	r2, [pc, #320]	; (800d25c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d11c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d122:	4a4f      	ldr	r2, [pc, #316]	; (800d260 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d124:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12a:	2200      	movs	r2, #0
 800d12c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3380      	adds	r3, #128	; 0x80
 800d138:	4619      	mov	r1, r3
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	025b      	lsls	r3, r3, #9
 800d140:	089b      	lsrs	r3, r3, #2
 800d142:	f7fd fc07 	bl	800a954 <HAL_DMA_Start_IT>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d017      	beq.n	800d17c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d15a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a40      	ldr	r2, [pc, #256]	; (800d264 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d168:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	e06b      	b.n	800d254 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d17c:	4b3a      	ldr	r3, [pc, #232]	; (800d268 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d17e:	2201      	movs	r2, #1
 800d180:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d186:	2b01      	cmp	r3, #1
 800d188:	d002      	beq.n	800d190 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	025b      	lsls	r3, r3, #9
 800d18e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d198:	4618      	mov	r0, r3
 800d19a:	f003 faa1 	bl	80106e0 <SDMMC_CmdBlockLength>
 800d19e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00f      	beq.n	800d1c6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a2e      	ldr	r2, [pc, #184]	; (800d264 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d1ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b4:	431a      	orrs	r2, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e046      	b.n	800d254 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	025b      	lsls	r3, r3, #9
 800d1d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d1d2:	2390      	movs	r3, #144	; 0x90
 800d1d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d1d6:	2302      	movs	r3, #2
 800d1d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f107 0210 	add.w	r2, r7, #16
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f003 fa4b 	bl	8010688 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d90a      	bls.n	800d20e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2282      	movs	r2, #130	; 0x82
 800d1fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d204:	4618      	mov	r0, r3
 800d206:	f003 faaf 	bl	8010768 <SDMMC_CmdReadMultiBlock>
 800d20a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d20c:	e009      	b.n	800d222 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2281      	movs	r2, #129	; 0x81
 800d212:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d21a:	4618      	mov	r0, r3
 800d21c:	f003 fa82 	bl	8010724 <SDMMC_CmdReadSingleBlock>
 800d220:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d012      	beq.n	800d24e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a0d      	ldr	r2, [pc, #52]	; (800d264 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	431a      	orrs	r2, r3
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2200      	movs	r2, #0
 800d248:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e002      	b.n	800d254 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	e000      	b.n	800d254 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d252:	2302      	movs	r3, #2
  }
}
 800d254:	4618      	mov	r0, r3
 800d256:	3730      	adds	r7, #48	; 0x30
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	0800dc47 	.word	0x0800dc47
 800d260:	0800dcb9 	.word	0x0800dcb9
 800d264:	004005ff 	.word	0x004005ff
 800d268:	4225858c 	.word	0x4225858c

0800d26c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b08c      	sub	sp, #48	; 0x30
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d107      	bne.n	800d294 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d288:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	e0ca      	b.n	800d42a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	f040 80c3 	bne.w	800d428 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	441a      	add	r2, r3
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d907      	bls.n	800d2c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e0b1      	b.n	800d42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2203      	movs	r2, #3
 800d2ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f042 021a 	orr.w	r2, r2, #26
 800d2e4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ea:	4a52      	ldr	r2, [pc, #328]	; (800d434 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d2ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f2:	4a51      	ldr	r2, [pc, #324]	; (800d438 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d2f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d302:	2b01      	cmp	r3, #1
 800d304:	d002      	beq.n	800d30c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d308:	025b      	lsls	r3, r3, #9
 800d30a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d314:	4618      	mov	r0, r3
 800d316:	f003 f9e3 	bl	80106e0 <SDMMC_CmdBlockLength>
 800d31a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00f      	beq.n	800d342 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a45      	ldr	r2, [pc, #276]	; (800d43c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d328:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	431a      	orrs	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e073      	b.n	800d42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d90a      	bls.n	800d35e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	22a0      	movs	r2, #160	; 0xa0
 800d34c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d354:	4618      	mov	r0, r3
 800d356:	f003 fa4b 	bl	80107f0 <SDMMC_CmdWriteMultiBlock>
 800d35a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d35c:	e009      	b.n	800d372 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2290      	movs	r2, #144	; 0x90
 800d362:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d36a:	4618      	mov	r0, r3
 800d36c:	f003 fa1e 	bl	80107ac <SDMMC_CmdWriteSingleBlock>
 800d370:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	2b00      	cmp	r3, #0
 800d376:	d012      	beq.n	800d39e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a2f      	ldr	r2, [pc, #188]	; (800d43c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d37e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	431a      	orrs	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2200      	movs	r2, #0
 800d398:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e045      	b.n	800d42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d39e:	4b28      	ldr	r3, [pc, #160]	; (800d440 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3380      	adds	r3, #128	; 0x80
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	025b      	lsls	r3, r3, #9
 800d3b6:	089b      	lsrs	r3, r3, #2
 800d3b8:	f7fd facc 	bl	800a954 <HAL_DMA_Start_IT>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d01a      	beq.n	800d3f8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f022 021a 	bic.w	r2, r2, #26
 800d3d0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a19      	ldr	r2, [pc, #100]	; (800d43c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d3d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e018      	b.n	800d42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3fc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	025b      	lsls	r3, r3, #9
 800d402:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d404:	2390      	movs	r3, #144	; 0x90
 800d406:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d408:	2300      	movs	r3, #0
 800d40a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d410:	2301      	movs	r3, #1
 800d412:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f107 0210 	add.w	r2, r7, #16
 800d41c:	4611      	mov	r1, r2
 800d41e:	4618      	mov	r0, r3
 800d420:	f003 f932 	bl	8010688 <SDIO_ConfigData>

      return HAL_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	e000      	b.n	800d42a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d428:	2302      	movs	r3, #2
  }
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3730      	adds	r7, #48	; 0x30
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	0800dc1d 	.word	0x0800dc1d
 800d438:	0800dcb9 	.word	0x0800dcb9
 800d43c:	004005ff 	.word	0x004005ff
 800d440:	4225858c 	.word	0x4225858c

0800d444 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d450:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d008      	beq.n	800d472 <HAL_SD_IRQHandler+0x2e>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f003 0308 	and.w	r3, r3, #8
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 ffc8 	bl	800e400 <SD_Read_IT>
 800d470:	e155      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 808f 	beq.w	800d5a0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d48a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	6812      	ldr	r2, [r2, #0]
 800d496:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d49a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d49e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f022 0201 	bic.w	r2, r2, #1
 800d4ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f003 0308 	and.w	r3, r3, #8
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d039      	beq.n	800d52e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f003 0302 	and.w	r3, r3, #2
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d104      	bne.n	800d4ce <HAL_SD_IRQHandler+0x8a>
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f003 0320 	and.w	r3, r3, #32
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d011      	beq.n	800d4f2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f003 f9ae 	bl	8010834 <SDMMC_CmdStopTransfer>
 800d4d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d008      	beq.n	800d4f2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	431a      	orrs	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f91f 	bl	800d730 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4fa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d104      	bne.n	800d51e <HAL_SD_IRQHandler+0xda>
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f003 0302 	and.w	r3, r3, #2
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d003      	beq.n	800d526 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f003 fe04 	bl	801112c <HAL_SD_RxCpltCallback>
 800d524:	e0fb      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f003 fdf6 	bl	8011118 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d52c:	e0f7      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d534:	2b00      	cmp	r3, #0
 800d536:	f000 80f2 	beq.w	800d71e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f003 0320 	and.w	r3, r3, #32
 800d540:	2b00      	cmp	r3, #0
 800d542:	d011      	beq.n	800d568 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4618      	mov	r0, r3
 800d54a:	f003 f973 	bl	8010834 <SDMMC_CmdStopTransfer>
 800d54e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d008      	beq.n	800d568 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	431a      	orrs	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f8e4 	bl	800d730 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f040 80d5 	bne.w	800d71e <HAL_SD_IRQHandler+0x2da>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f003 0302 	and.w	r3, r3, #2
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f040 80cf 	bne.w	800d71e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f022 0208 	bic.w	r2, r2, #8
 800d58e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f003 fdbd 	bl	8011118 <HAL_SD_TxCpltCallback>
}
 800d59e:	e0be      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d008      	beq.n	800d5c0 <HAL_SD_IRQHandler+0x17c>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f003 0308 	and.w	r3, r3, #8
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d003      	beq.n	800d5c0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 ff72 	bl	800e4a2 <SD_Write_IT>
 800d5be:	e0ae      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f000 80a7 	beq.w	800d71e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d6:	f003 0302 	and.w	r3, r3, #2
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d005      	beq.n	800d5ea <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e2:	f043 0202 	orr.w	r2, r3, #2
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f0:	f003 0308 	and.w	r3, r3, #8
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d005      	beq.n	800d604 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fc:	f043 0208 	orr.w	r2, r3, #8
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60a:	f003 0320 	and.w	r3, r3, #32
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d005      	beq.n	800d61e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d616:	f043 0220 	orr.w	r2, r3, #32
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d624:	f003 0310 	and.w	r3, r3, #16
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d005      	beq.n	800d638 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d630:	f043 0210 	orr.w	r2, r3, #16
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d640:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d650:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4618      	mov	r0, r3
 800d658:	f003 f8ec 	bl	8010834 <SDMMC_CmdStopTransfer>
 800d65c:	4602      	mov	r2, r0
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	431a      	orrs	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f003 0308 	and.w	r3, r3, #8
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00a      	beq.n	800d688 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f855 	bl	800d730 <HAL_SD_ErrorCallback>
}
 800d686:	e04a      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d045      	beq.n	800d71e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f003 0310 	and.w	r3, r3, #16
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d104      	bne.n	800d6a6 <HAL_SD_IRQHandler+0x262>
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f003 0320 	and.w	r3, r3, #32
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d011      	beq.n	800d6ca <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6aa:	4a1f      	ldr	r2, [pc, #124]	; (800d728 <HAL_SD_IRQHandler+0x2e4>)
 800d6ac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fd f9a6 	bl	800aa04 <HAL_DMA_Abort_IT>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d02f      	beq.n	800d71e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 fb4a 	bl	800dd5c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d6c8:	e029      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f003 0301 	and.w	r3, r3, #1
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d104      	bne.n	800d6de <HAL_SD_IRQHandler+0x29a>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f003 0302 	and.w	r3, r3, #2
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d011      	beq.n	800d702 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e2:	4a12      	ldr	r2, [pc, #72]	; (800d72c <HAL_SD_IRQHandler+0x2e8>)
 800d6e4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fd f98a 	bl	800aa04 <HAL_DMA_Abort_IT>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d013      	beq.n	800d71e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f000 fb65 	bl	800ddca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d700:	e00d      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f003 fcf4 	bl	8011104 <HAL_SD_AbortCallback>
}
 800d71c:	e7ff      	b.n	800d71e <HAL_SD_IRQHandler+0x2da>
 800d71e:	bf00      	nop
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	0800dd5d 	.word	0x0800dd5d
 800d72c:	0800ddcb 	.word	0x0800ddcb

0800d730 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d738:	bf00      	nop
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d752:	0f9b      	lsrs	r3, r3, #30
 800d754:	b2da      	uxtb	r2, r3
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d75e:	0e9b      	lsrs	r3, r3, #26
 800d760:	b2db      	uxtb	r3, r3
 800d762:	f003 030f 	and.w	r3, r3, #15
 800d766:	b2da      	uxtb	r2, r3
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d770:	0e1b      	lsrs	r3, r3, #24
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f003 0303 	and.w	r3, r3, #3
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d782:	0c1b      	lsrs	r3, r3, #16
 800d784:	b2da      	uxtb	r2, r3
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d78e:	0a1b      	lsrs	r3, r3, #8
 800d790:	b2da      	uxtb	r2, r3
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7a4:	0d1b      	lsrs	r3, r3, #20
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7b0:	0c1b      	lsrs	r3, r3, #16
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	f003 030f 	and.w	r3, r3, #15
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7c2:	0bdb      	lsrs	r3, r3, #15
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7d4:	0b9b      	lsrs	r3, r3, #14
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	f003 0301 	and.w	r3, r3, #1
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e6:	0b5b      	lsrs	r3, r3, #13
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7f8:	0b1b      	lsrs	r3, r3, #12
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	b2da      	uxtb	r2, r3
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	2200      	movs	r2, #0
 800d80a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d810:	2b00      	cmp	r3, #0
 800d812:	d163      	bne.n	800d8dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d818:	009a      	lsls	r2, r3, #2
 800d81a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d81e:	4013      	ands	r3, r2
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d824:	0f92      	lsrs	r2, r2, #30
 800d826:	431a      	orrs	r2, r3
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d830:	0edb      	lsrs	r3, r3, #27
 800d832:	b2db      	uxtb	r3, r3
 800d834:	f003 0307 	and.w	r3, r3, #7
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d842:	0e1b      	lsrs	r3, r3, #24
 800d844:	b2db      	uxtb	r3, r3
 800d846:	f003 0307 	and.w	r3, r3, #7
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d854:	0d5b      	lsrs	r3, r3, #21
 800d856:	b2db      	uxtb	r3, r3
 800d858:	f003 0307 	and.w	r3, r3, #7
 800d85c:	b2da      	uxtb	r2, r3
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d866:	0c9b      	lsrs	r3, r3, #18
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	f003 0307 	and.w	r3, r3, #7
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d878:	0bdb      	lsrs	r3, r3, #15
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 0307 	and.w	r3, r3, #7
 800d880:	b2da      	uxtb	r2, r3
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	1c5a      	adds	r2, r3, #1
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	7e1b      	ldrb	r3, [r3, #24]
 800d894:	b2db      	uxtb	r3, r3
 800d896:	f003 0307 	and.w	r3, r3, #7
 800d89a:	3302      	adds	r3, #2
 800d89c:	2201      	movs	r2, #1
 800d89e:	fa02 f303 	lsl.w	r3, r2, r3
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d8a6:	fb02 f203 	mul.w	r2, r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	7a1b      	ldrb	r3, [r3, #8]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	f003 030f 	and.w	r3, r3, #15
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	409a      	lsls	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d8c8:	0a52      	lsrs	r2, r2, #9
 800d8ca:	fb02 f203 	mul.w	r2, r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8d8:	661a      	str	r2, [r3, #96]	; 0x60
 800d8da:	e031      	b.n	800d940 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d11d      	bne.n	800d920 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8e8:	041b      	lsls	r3, r3, #16
 800d8ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f2:	0c1b      	lsrs	r3, r3, #16
 800d8f4:	431a      	orrs	r2, r3
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	3301      	adds	r3, #1
 800d900:	029a      	lsls	r2, r3, #10
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d914:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	661a      	str	r2, [r3, #96]	; 0x60
 800d91e:	e00f      	b.n	800d940 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a58      	ldr	r2, [pc, #352]	; (800da88 <HAL_SD_GetCardCSD+0x344>)
 800d926:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d93c:	2301      	movs	r3, #1
 800d93e:	e09d      	b.n	800da7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d944:	0b9b      	lsrs	r3, r3, #14
 800d946:	b2db      	uxtb	r3, r3
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d956:	09db      	lsrs	r3, r3, #7
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d978:	0fdb      	lsrs	r3, r3, #31
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d984:	0f5b      	lsrs	r3, r3, #29
 800d986:	b2db      	uxtb	r3, r3
 800d988:	f003 0303 	and.w	r3, r3, #3
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d996:	0e9b      	lsrs	r3, r3, #26
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	f003 0307 	and.w	r3, r3, #7
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a8:	0d9b      	lsrs	r3, r3, #22
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 030f 	and.w	r3, r3, #15
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ba:	0d5b      	lsrs	r3, r3, #21
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9d6:	0c1b      	lsrs	r3, r3, #16
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ea:	0bdb      	lsrs	r3, r3, #15
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9fe:	0b9b      	lsrs	r3, r3, #14
 800da00:	b2db      	uxtb	r3, r3
 800da02:	f003 0301 	and.w	r3, r3, #1
 800da06:	b2da      	uxtb	r2, r3
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da12:	0b5b      	lsrs	r3, r3, #13
 800da14:	b2db      	uxtb	r3, r3
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da26:	0b1b      	lsrs	r3, r3, #12
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	f003 0301 	and.w	r3, r3, #1
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da3a:	0a9b      	lsrs	r3, r3, #10
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 0303 	and.w	r3, r3, #3
 800da42:	b2da      	uxtb	r2, r3
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da4e:	0a1b      	lsrs	r3, r3, #8
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f003 0303 	and.w	r3, r3, #3
 800da56:	b2da      	uxtb	r2, r3
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da62:	085b      	lsrs	r3, r3, #1
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	2201      	movs	r2, #1
 800da76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr
 800da88:	004005ff 	.word	0x004005ff

0800da8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dae4:	b5b0      	push	{r4, r5, r7, lr}
 800dae6:	b08e      	sub	sp, #56	; 0x38
 800dae8:	af04      	add	r7, sp, #16
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2203      	movs	r2, #3
 800daf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d02e      	beq.n	800db5c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db04:	d106      	bne.n	800db14 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	639a      	str	r2, [r3, #56]	; 0x38
 800db12:	e029      	b.n	800db68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db1a:	d10a      	bne.n	800db32 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fb0f 	bl	800e140 <SD_WideBus_Enable>
 800db22:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	431a      	orrs	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	639a      	str	r2, [r3, #56]	; 0x38
 800db30:	e01a      	b.n	800db68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10a      	bne.n	800db4e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fb4c 	bl	800e1d6 <SD_WideBus_Disable>
 800db3e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	431a      	orrs	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	639a      	str	r2, [r3, #56]	; 0x38
 800db4c:	e00c      	b.n	800db68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	639a      	str	r2, [r3, #56]	; 0x38
 800db5a:	e005      	b.n	800db68 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d009      	beq.n	800db84 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a18      	ldr	r2, [pc, #96]	; (800dbd8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800db76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	e024      	b.n	800dbce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	695b      	ldr	r3, [r3, #20]
 800db9e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	699b      	ldr	r3, [r3, #24]
 800dba4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681d      	ldr	r5, [r3, #0]
 800dbaa:	466c      	mov	r4, sp
 800dbac:	f107 0318 	add.w	r3, r7, #24
 800dbb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dbb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dbb8:	f107 030c 	add.w	r3, r7, #12
 800dbbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	f002 fcb2 	bl	8010528 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3728      	adds	r7, #40	; 0x28
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bdb0      	pop	{r4, r5, r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	004005ff 	.word	0x004005ff

0800dbdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dbe8:	f107 030c 	add.w	r3, r7, #12
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fa7e 	bl	800e0f0 <SD_SendStatus>
 800dbf4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d005      	beq.n	800dc08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	431a      	orrs	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	0a5b      	lsrs	r3, r3, #9
 800dc0c:	f003 030f 	and.w	r3, r3, #15
 800dc10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dc12:	693b      	ldr	r3, [r7, #16]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc28:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dc3a:	bf00      	nop
 800dc3c:	3714      	adds	r7, #20
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr

0800dc46 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b084      	sub	sp, #16
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc52:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc58:	2b82      	cmp	r3, #130	; 0x82
 800dc5a:	d111      	bne.n	800dc80 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f002 fde7 	bl	8010834 <SDMMC_CmdStopTransfer>
 800dc66:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d008      	beq.n	800dc80 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	431a      	orrs	r2, r3
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f7ff fd58 	bl	800d730 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f022 0208 	bic.w	r2, r2, #8
 800dc8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc98:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f003 fa3f 	bl	801112c <HAL_SD_RxCpltCallback>
#endif
}
 800dcae:	bf00      	nop
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
	...

0800dcb8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7fd f848 	bl	800ad5c <HAL_DMA_GetError>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d03e      	beq.n	800dd50 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dce0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d002      	beq.n	800dcee <SD_DMAError+0x36>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d12d      	bne.n	800dd4a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a19      	ldr	r2, [pc, #100]	; (800dd58 <SD_DMAError+0xa0>)
 800dcf4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dd04:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dd12:	6978      	ldr	r0, [r7, #20]
 800dd14:	f7ff ff62 	bl	800dbdc <HAL_SD_GetCardState>
 800dd18:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2b06      	cmp	r3, #6
 800dd1e:	d002      	beq.n	800dd26 <SD_DMAError+0x6e>
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	2b05      	cmp	r3, #5
 800dd24:	d10a      	bne.n	800dd3c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f002 fd82 	bl	8010834 <SDMMC_CmdStopTransfer>
 800dd30:	4602      	mov	r2, r0
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd36:	431a      	orrs	r2, r3
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	2200      	movs	r2, #0
 800dd48:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dd4a:	6978      	ldr	r0, [r7, #20]
 800dd4c:	f7ff fcf0 	bl	800d730 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dd50:	bf00      	nop
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	004005ff 	.word	0x004005ff

0800dd5c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd68:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd72:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f7ff ff31 	bl	800dbdc <HAL_SD_GetCardState>
 800dd7a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b06      	cmp	r3, #6
 800dd8e:	d002      	beq.n	800dd96 <SD_DMATxAbort+0x3a>
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	2b05      	cmp	r3, #5
 800dd94:	d10a      	bne.n	800ddac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f002 fd4a 	bl	8010834 <SDMMC_CmdStopTransfer>
 800dda0:	4602      	mov	r2, r0
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda6:	431a      	orrs	r2, r3
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d103      	bne.n	800ddbc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f003 f9a5 	bl	8011104 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ddba:	e002      	b.n	800ddc2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f7ff fcb7 	bl	800d730 <HAL_SD_ErrorCallback>
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b084      	sub	sp, #16
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f240 523a 	movw	r2, #1338	; 0x53a
 800dde0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f7ff fefa 	bl	800dbdc <HAL_SD_GetCardState>
 800dde8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	2b06      	cmp	r3, #6
 800ddfc:	d002      	beq.n	800de04 <SD_DMARxAbort+0x3a>
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2b05      	cmp	r3, #5
 800de02:	d10a      	bne.n	800de1a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4618      	mov	r0, r3
 800de0a:	f002 fd13 	bl	8010834 <SDMMC_CmdStopTransfer>
 800de0e:	4602      	mov	r2, r0
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de14:	431a      	orrs	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d103      	bne.n	800de2a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f003 f96e 	bl	8011104 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800de28:	e002      	b.n	800de30 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f7ff fc80 	bl	800d730 <HAL_SD_ErrorCallback>
}
 800de30:	bf00      	nop
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800de38:	b5b0      	push	{r4, r5, r7, lr}
 800de3a:	b094      	sub	sp, #80	; 0x50
 800de3c:	af04      	add	r7, sp, #16
 800de3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800de40:	2301      	movs	r3, #1
 800de42:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4618      	mov	r0, r3
 800de4a:	f002 fbc5 	bl	80105d8 <SDIO_GetPowerState>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d102      	bne.n	800de5a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800de58:	e0b7      	b.n	800dfca <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de5e:	2b03      	cmp	r3, #3
 800de60:	d02f      	beq.n	800dec2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4618      	mov	r0, r3
 800de68:	f002 fdee 	bl	8010a48 <SDMMC_CmdSendCID>
 800de6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <SD_InitCard+0x40>
    {
      return errorstate;
 800de74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de76:	e0a8      	b.n	800dfca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2100      	movs	r1, #0
 800de7e:	4618      	mov	r0, r3
 800de80:	f002 fbef 	bl	8010662 <SDIO_GetResponse>
 800de84:	4602      	mov	r2, r0
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2104      	movs	r1, #4
 800de90:	4618      	mov	r0, r3
 800de92:	f002 fbe6 	bl	8010662 <SDIO_GetResponse>
 800de96:	4602      	mov	r2, r0
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2108      	movs	r1, #8
 800dea2:	4618      	mov	r0, r3
 800dea4:	f002 fbdd 	bl	8010662 <SDIO_GetResponse>
 800dea8:	4602      	mov	r2, r0
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	210c      	movs	r1, #12
 800deb4:	4618      	mov	r0, r3
 800deb6:	f002 fbd4 	bl	8010662 <SDIO_GetResponse>
 800deba:	4602      	mov	r2, r0
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d00d      	beq.n	800dee6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f107 020e 	add.w	r2, r7, #14
 800ded2:	4611      	mov	r1, r2
 800ded4:	4618      	mov	r0, r3
 800ded6:	f002 fdf4 	bl	8010ac2 <SDMMC_CmdSetRelAdd>
 800deda:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <SD_InitCard+0xae>
    {
      return errorstate;
 800dee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee4:	e071      	b.n	800dfca <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deea:	2b03      	cmp	r3, #3
 800deec:	d036      	beq.n	800df5c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800deee:	89fb      	ldrh	r3, [r7, #14]
 800def0:	461a      	mov	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800defe:	041b      	lsls	r3, r3, #16
 800df00:	4619      	mov	r1, r3
 800df02:	4610      	mov	r0, r2
 800df04:	f002 fdbe 	bl	8010a84 <SDMMC_CmdSendCSD>
 800df08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800df0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <SD_InitCard+0xdc>
    {
      return errorstate;
 800df10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df12:	e05a      	b.n	800dfca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2100      	movs	r1, #0
 800df1a:	4618      	mov	r0, r3
 800df1c:	f002 fba1 	bl	8010662 <SDIO_GetResponse>
 800df20:	4602      	mov	r2, r0
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2104      	movs	r1, #4
 800df2c:	4618      	mov	r0, r3
 800df2e:	f002 fb98 	bl	8010662 <SDIO_GetResponse>
 800df32:	4602      	mov	r2, r0
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2108      	movs	r1, #8
 800df3e:	4618      	mov	r0, r3
 800df40:	f002 fb8f 	bl	8010662 <SDIO_GetResponse>
 800df44:	4602      	mov	r2, r0
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	210c      	movs	r1, #12
 800df50:	4618      	mov	r0, r3
 800df52:	f002 fb86 	bl	8010662 <SDIO_GetResponse>
 800df56:	4602      	mov	r2, r0
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2104      	movs	r1, #4
 800df62:	4618      	mov	r0, r3
 800df64:	f002 fb7d 	bl	8010662 <SDIO_GetResponse>
 800df68:	4603      	mov	r3, r0
 800df6a:	0d1a      	lsrs	r2, r3, #20
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800df70:	f107 0310 	add.w	r3, r7, #16
 800df74:	4619      	mov	r1, r3
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7ff fbe4 	bl	800d744 <HAL_SD_GetCardCSD>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d002      	beq.n	800df88 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df86:	e020      	b.n	800dfca <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6819      	ldr	r1, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df90:	041b      	lsls	r3, r3, #16
 800df92:	f04f 0400 	mov.w	r4, #0
 800df96:	461a      	mov	r2, r3
 800df98:	4623      	mov	r3, r4
 800df9a:	4608      	mov	r0, r1
 800df9c:	f002 fc6c 	bl	8010878 <SDMMC_CmdSelDesel>
 800dfa0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d001      	beq.n	800dfac <SD_InitCard+0x174>
  {
    return errorstate;
 800dfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfaa:	e00e      	b.n	800dfca <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681d      	ldr	r5, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	466c      	mov	r4, sp
 800dfb4:	f103 0210 	add.w	r2, r3, #16
 800dfb8:	ca07      	ldmia	r2, {r0, r1, r2}
 800dfba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	f002 fab0 	bl	8010528 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3740      	adds	r7, #64	; 0x40
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dfd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b086      	sub	sp, #24
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	617b      	str	r3, [r7, #20]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f002 fc66 	bl	80108be <SDMMC_CmdGoIdleState>
 800dff2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <SD_PowerON+0x2a>
  {
    return errorstate;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	e072      	b.n	800e0e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4618      	mov	r0, r3
 800e004:	f002 fc79 	bl	80108fa <SDMMC_CmdOperCond>
 800e008:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00d      	beq.n	800e02c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f002 fc4f 	bl	80108be <SDMMC_CmdGoIdleState>
 800e020:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d004      	beq.n	800e032 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	e05b      	b.n	800e0e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e036:	2b01      	cmp	r3, #1
 800e038:	d137      	bne.n	800e0aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2100      	movs	r1, #0
 800e040:	4618      	mov	r0, r3
 800e042:	f002 fc79 	bl	8010938 <SDMMC_CmdAppCommand>
 800e046:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d02d      	beq.n	800e0aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e04e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e052:	e047      	b.n	800e0e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2100      	movs	r1, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f002 fc6c 	bl	8010938 <SDMMC_CmdAppCommand>
 800e060:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d001      	beq.n	800e06c <SD_PowerON+0x98>
    {
      return errorstate;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	e03b      	b.n	800e0e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	491e      	ldr	r1, [pc, #120]	; (800e0ec <SD_PowerON+0x118>)
 800e072:	4618      	mov	r0, r3
 800e074:	f002 fc82 	bl	801097c <SDMMC_CmdAppOperCommand>
 800e078:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e084:	e02e      	b.n	800e0e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2100      	movs	r1, #0
 800e08c:	4618      	mov	r0, r3
 800e08e:	f002 fae8 	bl	8010662 <SDIO_GetResponse>
 800e092:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	0fdb      	lsrs	r3, r3, #31
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d101      	bne.n	800e0a0 <SD_PowerON+0xcc>
 800e09c:	2301      	movs	r3, #1
 800e09e:	e000      	b.n	800e0a2 <SD_PowerON+0xce>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	613b      	str	r3, [r7, #16]

    count++;
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d802      	bhi.n	800e0ba <SD_PowerON+0xe6>
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0cc      	beq.n	800e054 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d902      	bls.n	800e0ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e0c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0c8:	e00c      	b.n	800e0e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d003      	beq.n	800e0dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	645a      	str	r2, [r3, #68]	; 0x44
 800e0da:	e002      	b.n	800e0e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3718      	adds	r7, #24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	c1100000 	.word	0xc1100000

0800e0f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d102      	bne.n	800e106 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e104:	e018      	b.n	800e138 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e10e:	041b      	lsls	r3, r3, #16
 800e110:	4619      	mov	r1, r3
 800e112:	4610      	mov	r0, r2
 800e114:	f002 fcf6 	bl	8010b04 <SDMMC_CmdSendStatus>
 800e118:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	e009      	b.n	800e138 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2100      	movs	r1, #0
 800e12a:	4618      	mov	r0, r3
 800e12c:	f002 fa99 	bl	8010662 <SDIO_GetResponse>
 800e130:	4602      	mov	r2, r0
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3710      	adds	r7, #16
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b086      	sub	sp, #24
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e148:	2300      	movs	r3, #0
 800e14a:	60fb      	str	r3, [r7, #12]
 800e14c:	2300      	movs	r3, #0
 800e14e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2100      	movs	r1, #0
 800e156:	4618      	mov	r0, r3
 800e158:	f002 fa83 	bl	8010662 <SDIO_GetResponse>
 800e15c:	4603      	mov	r3, r0
 800e15e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e166:	d102      	bne.n	800e16e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e16c:	e02f      	b.n	800e1ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e16e:	f107 030c 	add.w	r3, r7, #12
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 f879 	bl	800e26c <SD_FindSCR>
 800e17a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	e023      	b.n	800e1ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d01c      	beq.n	800e1ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e198:	041b      	lsls	r3, r3, #16
 800e19a:	4619      	mov	r1, r3
 800e19c:	4610      	mov	r0, r2
 800e19e:	f002 fbcb 	bl	8010938 <SDMMC_CmdAppCommand>
 800e1a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	e00f      	b.n	800e1ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2102      	movs	r1, #2
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f002 fc04 	bl	80109c2 <SDMMC_CmdBusWidth>
 800e1ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	e003      	b.n	800e1ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	e001      	b.n	800e1ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e1ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3718      	adds	r7, #24
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b086      	sub	sp, #24
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f002 fa38 	bl	8010662 <SDIO_GetResponse>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1fc:	d102      	bne.n	800e204 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e202:	e02f      	b.n	800e264 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e204:	f107 030c 	add.w	r3, r7, #12
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f82e 	bl	800e26c <SD_FindSCR>
 800e210:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	e023      	b.n	800e264 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e222:	2b00      	cmp	r3, #0
 800e224:	d01c      	beq.n	800e260 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e22e:	041b      	lsls	r3, r3, #16
 800e230:	4619      	mov	r1, r3
 800e232:	4610      	mov	r0, r2
 800e234:	f002 fb80 	bl	8010938 <SDMMC_CmdAppCommand>
 800e238:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	e00f      	b.n	800e264 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2100      	movs	r1, #0
 800e24a:	4618      	mov	r0, r3
 800e24c:	f002 fbb9 	bl	80109c2 <SDMMC_CmdBusWidth>
 800e250:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d001      	beq.n	800e25c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	e003      	b.n	800e264 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e25c:	2300      	movs	r3, #0
 800e25e:	e001      	b.n	800e264 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e260:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e264:	4618      	mov	r0, r3
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e26c:	b590      	push	{r4, r7, lr}
 800e26e:	b08f      	sub	sp, #60	; 0x3c
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e276:	f7fb fd7b 	bl	8009d70 <HAL_GetTick>
 800e27a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e27c:	2300      	movs	r3, #0
 800e27e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e280:	2300      	movs	r3, #0
 800e282:	60bb      	str	r3, [r7, #8]
 800e284:	2300      	movs	r3, #0
 800e286:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2108      	movs	r1, #8
 800e292:	4618      	mov	r0, r3
 800e294:	f002 fa24 	bl	80106e0 <SDMMC_CmdBlockLength>
 800e298:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	e0a9      	b.n	800e3f8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2ac:	041b      	lsls	r3, r3, #16
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	f002 fb41 	bl	8010938 <SDMMC_CmdAppCommand>
 800e2b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d001      	beq.n	800e2c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	e09a      	b.n	800e3f8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e2c8:	2308      	movs	r3, #8
 800e2ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e2cc:	2330      	movs	r3, #48	; 0x30
 800e2ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f107 0210 	add.w	r2, r7, #16
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f002 f9ce 	bl	8010688 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f002 fb88 	bl	8010a06 <SDMMC_CmdSendSCR>
 800e2f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d022      	beq.n	800e344 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e300:	e07a      	b.n	800e3f8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00e      	beq.n	800e32e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6819      	ldr	r1, [r3, #0]
 800e314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	f107 0208 	add.w	r2, r7, #8
 800e31c:	18d4      	adds	r4, r2, r3
 800e31e:	4608      	mov	r0, r1
 800e320:	f002 f92d 	bl	801057e <SDIO_ReadFIFO>
 800e324:	4603      	mov	r3, r0
 800e326:	6023      	str	r3, [r4, #0]
      index++;
 800e328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e32a:	3301      	adds	r3, #1
 800e32c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e32e:	f7fb fd1f 	bl	8009d70 <HAL_GetTick>
 800e332:	4602      	mov	r2, r0
 800e334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33c:	d102      	bne.n	800e344 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e33e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e342:	e059      	b.n	800e3f8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e34a:	f240 432a 	movw	r3, #1066	; 0x42a
 800e34e:	4013      	ands	r3, r2
 800e350:	2b00      	cmp	r3, #0
 800e352:	d0d6      	beq.n	800e302 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e35a:	f003 0308 	and.w	r3, r3, #8
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d005      	beq.n	800e36e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2208      	movs	r2, #8
 800e368:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e36a:	2308      	movs	r3, #8
 800e36c:	e044      	b.n	800e3f8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e374:	f003 0302 	and.w	r3, r3, #2
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d005      	beq.n	800e388 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2202      	movs	r2, #2
 800e382:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e384:	2302      	movs	r3, #2
 800e386:	e037      	b.n	800e3f8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38e:	f003 0320 	and.w	r3, r3, #32
 800e392:	2b00      	cmp	r3, #0
 800e394:	d005      	beq.n	800e3a2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2220      	movs	r2, #32
 800e39c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e39e:	2320      	movs	r3, #32
 800e3a0:	e02a      	b.n	800e3f8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f240 523a 	movw	r2, #1338	; 0x53a
 800e3aa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	061a      	lsls	r2, r3, #24
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	021b      	lsls	r3, r3, #8
 800e3b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	0a1b      	lsrs	r3, r3, #8
 800e3be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e3c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	0e1b      	lsrs	r3, r3, #24
 800e3c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3cc:	601a      	str	r2, [r3, #0]
    scr++;
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	061a      	lsls	r2, r3, #24
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	021b      	lsls	r3, r3, #8
 800e3dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	0a1b      	lsrs	r3, r3, #8
 800e3e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	0e1b      	lsrs	r3, r3, #24
 800e3f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	373c      	adds	r7, #60	; 0x3c
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd90      	pop	{r4, r7, pc}

0800e400 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e40c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e412:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d03f      	beq.n	800e49a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e41a:	2300      	movs	r3, #0
 800e41c:	617b      	str	r3, [r7, #20]
 800e41e:	e033      	b.n	800e488 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4618      	mov	r0, r3
 800e426:	f002 f8aa 	bl	801057e <SDIO_ReadFIFO>
 800e42a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3301      	adds	r3, #1
 800e438:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	3b01      	subs	r3, #1
 800e43e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	0a1b      	lsrs	r3, r3, #8
 800e444:	b2da      	uxtb	r2, r3
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	3301      	adds	r3, #1
 800e44e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	3b01      	subs	r3, #1
 800e454:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	0c1b      	lsrs	r3, r3, #16
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	3301      	adds	r3, #1
 800e464:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	3b01      	subs	r3, #1
 800e46a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	0e1b      	lsrs	r3, r3, #24
 800e470:	b2da      	uxtb	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3301      	adds	r3, #1
 800e47a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	3b01      	subs	r3, #1
 800e480:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	3301      	adds	r3, #1
 800e486:	617b      	str	r3, [r7, #20]
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	2b07      	cmp	r3, #7
 800e48c:	d9c8      	bls.n	800e420 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	693a      	ldr	r2, [r7, #16]
 800e498:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e49a:	bf00      	nop
 800e49c:	3718      	adds	r7, #24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b086      	sub	sp, #24
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a1b      	ldr	r3, [r3, #32]
 800e4ae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d043      	beq.n	800e544 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e4bc:	2300      	movs	r3, #0
 800e4be:	617b      	str	r3, [r7, #20]
 800e4c0:	e037      	b.n	800e532 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	3b01      	subs	r3, #1
 800e4d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	021a      	lsls	r2, r3, #8
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	041a      	lsls	r2, r3, #16
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	4313      	orrs	r3, r2
 800e4f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	3b01      	subs	r3, #1
 800e502:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	061a      	lsls	r2, r3, #24
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	4313      	orrs	r3, r2
 800e50e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	3301      	adds	r3, #1
 800e514:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	3b01      	subs	r3, #1
 800e51a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f107 0208 	add.w	r2, r7, #8
 800e524:	4611      	mov	r1, r2
 800e526:	4618      	mov	r0, r3
 800e528:	f002 f836 	bl	8010598 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	3301      	adds	r3, #1
 800e530:	617b      	str	r3, [r7, #20]
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2b07      	cmp	r3, #7
 800e536:	d9c4      	bls.n	800e4c2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	693a      	ldr	r2, [r7, #16]
 800e542:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e544:	bf00      	nop
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d101      	bne.n	800e55e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e55a:	2301      	movs	r3, #1
 800e55c:	e056      	b.n	800e60c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2200      	movs	r2, #0
 800e562:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d106      	bne.n	800e57e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7f8 fe6b 	bl	8007254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2202      	movs	r2, #2
 800e582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e594:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685a      	ldr	r2, [r3, #4]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	431a      	orrs	r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	431a      	orrs	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	431a      	orrs	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	695b      	ldr	r3, [r3, #20]
 800e5b0:	431a      	orrs	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5ba:	431a      	orrs	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	69db      	ldr	r3, [r3, #28]
 800e5c0:	431a      	orrs	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a1b      	ldr	r3, [r3, #32]
 800e5c6:	ea42 0103 	orr.w	r1, r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	430a      	orrs	r2, r1
 800e5d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	0c1b      	lsrs	r3, r3, #16
 800e5dc:	f003 0104 	and.w	r1, r3, #4
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	430a      	orrs	r2, r1
 800e5ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	69da      	ldr	r2, [r3, #28]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b088      	sub	sp, #32
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	4613      	mov	r3, r2
 800e622:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e624:	2300      	movs	r3, #0
 800e626:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d101      	bne.n	800e636 <HAL_SPI_Transmit+0x22>
 800e632:	2302      	movs	r3, #2
 800e634:	e11e      	b.n	800e874 <HAL_SPI_Transmit+0x260>
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e63e:	f7fb fb97 	bl	8009d70 <HAL_GetTick>
 800e642:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e644:	88fb      	ldrh	r3, [r7, #6]
 800e646:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	2b01      	cmp	r3, #1
 800e652:	d002      	beq.n	800e65a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e654:	2302      	movs	r3, #2
 800e656:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e658:	e103      	b.n	800e862 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d002      	beq.n	800e666 <HAL_SPI_Transmit+0x52>
 800e660:	88fb      	ldrh	r3, [r7, #6]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d102      	bne.n	800e66c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e66a:	e0fa      	b.n	800e862 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2203      	movs	r2, #3
 800e670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2200      	movs	r2, #0
 800e678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	88fa      	ldrh	r2, [r7, #6]
 800e684:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	88fa      	ldrh	r2, [r7, #6]
 800e68a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2200      	movs	r2, #0
 800e690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2200      	movs	r2, #0
 800e696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2200      	movs	r2, #0
 800e69c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	689b      	ldr	r3, [r3, #8]
 800e6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6b2:	d107      	bne.n	800e6c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e6c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ce:	2b40      	cmp	r3, #64	; 0x40
 800e6d0:	d007      	beq.n	800e6e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6ea:	d14b      	bne.n	800e784 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <HAL_SPI_Transmit+0xe6>
 800e6f4:	8afb      	ldrh	r3, [r7, #22]
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d13e      	bne.n	800e778 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fe:	881a      	ldrh	r2, [r3, #0]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e70a:	1c9a      	adds	r2, r3, #2
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e714:	b29b      	uxth	r3, r3
 800e716:	3b01      	subs	r3, #1
 800e718:	b29a      	uxth	r2, r3
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e71e:	e02b      	b.n	800e778 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	f003 0302 	and.w	r3, r3, #2
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	d112      	bne.n	800e754 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e732:	881a      	ldrh	r2, [r3, #0]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e73e:	1c9a      	adds	r2, r3, #2
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e748:	b29b      	uxth	r3, r3
 800e74a:	3b01      	subs	r3, #1
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	86da      	strh	r2, [r3, #54]	; 0x36
 800e752:	e011      	b.n	800e778 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e754:	f7fb fb0c 	bl	8009d70 <HAL_GetTick>
 800e758:	4602      	mov	r2, r0
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	683a      	ldr	r2, [r7, #0]
 800e760:	429a      	cmp	r2, r3
 800e762:	d803      	bhi.n	800e76c <HAL_SPI_Transmit+0x158>
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76a:	d102      	bne.n	800e772 <HAL_SPI_Transmit+0x15e>
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d102      	bne.n	800e778 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e772:	2303      	movs	r3, #3
 800e774:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e776:	e074      	b.n	800e862 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1ce      	bne.n	800e720 <HAL_SPI_Transmit+0x10c>
 800e782:	e04c      	b.n	800e81e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <HAL_SPI_Transmit+0x17e>
 800e78c:	8afb      	ldrh	r3, [r7, #22]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d140      	bne.n	800e814 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	330c      	adds	r3, #12
 800e79c:	7812      	ldrb	r2, [r2, #0]
 800e79e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e7b8:	e02c      	b.n	800e814 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	f003 0302 	and.w	r3, r3, #2
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d113      	bne.n	800e7f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	330c      	adds	r3, #12
 800e7d2:	7812      	ldrb	r2, [r2, #0]
 800e7d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	86da      	strh	r2, [r3, #54]	; 0x36
 800e7ee:	e011      	b.n	800e814 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7f0:	f7fb fabe 	bl	8009d70 <HAL_GetTick>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d803      	bhi.n	800e808 <HAL_SPI_Transmit+0x1f4>
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e806:	d102      	bne.n	800e80e <HAL_SPI_Transmit+0x1fa>
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d102      	bne.n	800e814 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e80e:	2303      	movs	r3, #3
 800e810:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e812:	e026      	b.n	800e862 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e818:	b29b      	uxth	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1cd      	bne.n	800e7ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e81e:	69ba      	ldr	r2, [r7, #24]
 800e820:	6839      	ldr	r1, [r7, #0]
 800e822:	68f8      	ldr	r0, [r7, #12]
 800e824:	f000 fba4 	bl	800ef70 <SPI_EndRxTxTransaction>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d002      	beq.n	800e834 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2220      	movs	r2, #32
 800e832:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10a      	bne.n	800e852 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e83c:	2300      	movs	r3, #0
 800e83e:	613b      	str	r3, [r7, #16]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	613b      	str	r3, [r7, #16]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	613b      	str	r3, [r7, #16]
 800e850:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e85a:	2301      	movs	r3, #1
 800e85c:	77fb      	strb	r3, [r7, #31]
 800e85e:	e000      	b.n	800e862 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2201      	movs	r2, #1
 800e866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e872:	7ffb      	ldrb	r3, [r7, #31]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3720      	adds	r7, #32
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b088      	sub	sp, #32
 800e880:	af02      	add	r7, sp, #8
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	603b      	str	r3, [r7, #0]
 800e888:	4613      	mov	r3, r2
 800e88a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e88c:	2300      	movs	r3, #0
 800e88e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e898:	d112      	bne.n	800e8c0 <HAL_SPI_Receive+0x44>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10e      	bne.n	800e8c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2204      	movs	r2, #4
 800e8a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e8aa:	88fa      	ldrh	r2, [r7, #6]
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	4613      	mov	r3, r2
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	68b9      	ldr	r1, [r7, #8]
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	f000 f8e9 	bl	800ea8e <HAL_SPI_TransmitReceive>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	e0e2      	b.n	800ea86 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d101      	bne.n	800e8ce <HAL_SPI_Receive+0x52>
 800e8ca:	2302      	movs	r3, #2
 800e8cc:	e0db      	b.n	800ea86 <HAL_SPI_Receive+0x20a>
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8d6:	f7fb fa4b 	bl	8009d70 <HAL_GetTick>
 800e8da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d002      	beq.n	800e8ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8ec:	e0c2      	b.n	800ea74 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d002      	beq.n	800e8fa <HAL_SPI_Receive+0x7e>
 800e8f4:	88fb      	ldrh	r3, [r7, #6]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d102      	bne.n	800e900 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8fe:	e0b9      	b.n	800ea74 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2204      	movs	r2, #4
 800e904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	88fa      	ldrh	r2, [r7, #6]
 800e918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	88fa      	ldrh	r2, [r7, #6]
 800e91e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2200      	movs	r2, #0
 800e924:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2200      	movs	r2, #0
 800e930:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2200      	movs	r2, #0
 800e936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2200      	movs	r2, #0
 800e93c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e946:	d107      	bne.n	800e958 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e956:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e962:	2b40      	cmp	r3, #64	; 0x40
 800e964:	d007      	beq.n	800e976 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e974:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d162      	bne.n	800ea44 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e97e:	e02e      	b.n	800e9de <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	f003 0301 	and.w	r3, r3, #1
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d115      	bne.n	800e9ba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f103 020c 	add.w	r2, r3, #12
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e99a:	7812      	ldrb	r2, [r2, #0]
 800e99c:	b2d2      	uxtb	r2, r2
 800e99e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a4:	1c5a      	adds	r2, r3, #1
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9b8:	e011      	b.n	800e9de <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9ba:	f7fb f9d9 	bl	8009d70 <HAL_GetTick>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	683a      	ldr	r2, [r7, #0]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d803      	bhi.n	800e9d2 <HAL_SPI_Receive+0x156>
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d0:	d102      	bne.n	800e9d8 <HAL_SPI_Receive+0x15c>
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d102      	bne.n	800e9de <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e9dc:	e04a      	b.n	800ea74 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1cb      	bne.n	800e980 <HAL_SPI_Receive+0x104>
 800e9e8:	e031      	b.n	800ea4e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	f003 0301 	and.w	r3, r3, #1
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d113      	bne.n	800ea20 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea02:	b292      	uxth	r2, r2
 800ea04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea0a:	1c9a      	adds	r2, r3, #2
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	3b01      	subs	r3, #1
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ea1e:	e011      	b.n	800ea44 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea20:	f7fb f9a6 	bl	8009d70 <HAL_GetTick>
 800ea24:	4602      	mov	r2, r0
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	683a      	ldr	r2, [r7, #0]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d803      	bhi.n	800ea38 <HAL_SPI_Receive+0x1bc>
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea36:	d102      	bne.n	800ea3e <HAL_SPI_Receive+0x1c2>
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d102      	bne.n	800ea44 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ea42:	e017      	b.n	800ea74 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1cd      	bne.n	800e9ea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea4e:	693a      	ldr	r2, [r7, #16]
 800ea50:	6839      	ldr	r1, [r7, #0]
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f000 fa27 	bl	800eea6 <SPI_EndRxTransaction>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d002      	beq.n	800ea64 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2220      	movs	r2, #32
 800ea62:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	75fb      	strb	r3, [r7, #23]
 800ea70:	e000      	b.n	800ea74 <HAL_SPI_Receive+0x1f8>
  }

error :
 800ea72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b08c      	sub	sp, #48	; 0x30
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	60f8      	str	r0, [r7, #12]
 800ea96:	60b9      	str	r1, [r7, #8]
 800ea98:	607a      	str	r2, [r7, #4]
 800ea9a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d101      	bne.n	800eab4 <HAL_SPI_TransmitReceive+0x26>
 800eab0:	2302      	movs	r3, #2
 800eab2:	e18a      	b.n	800edca <HAL_SPI_TransmitReceive+0x33c>
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2201      	movs	r2, #1
 800eab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eabc:	f7fb f958 	bl	8009d70 <HAL_GetTick>
 800eac0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ead2:	887b      	ldrh	r3, [r7, #2]
 800ead4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ead6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d00f      	beq.n	800eafe <HAL_SPI_TransmitReceive+0x70>
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eae4:	d107      	bne.n	800eaf6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d103      	bne.n	800eaf6 <HAL_SPI_TransmitReceive+0x68>
 800eaee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eaf2:	2b04      	cmp	r3, #4
 800eaf4:	d003      	beq.n	800eafe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eaf6:	2302      	movs	r3, #2
 800eaf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eafc:	e15b      	b.n	800edb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d005      	beq.n	800eb10 <HAL_SPI_TransmitReceive+0x82>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <HAL_SPI_TransmitReceive+0x82>
 800eb0a:	887b      	ldrh	r3, [r7, #2]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d103      	bne.n	800eb18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eb16:	e14e      	b.n	800edb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	2b04      	cmp	r3, #4
 800eb22:	d003      	beq.n	800eb2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2205      	movs	r2, #5
 800eb28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	887a      	ldrh	r2, [r7, #2]
 800eb3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	887a      	ldrh	r2, [r7, #2]
 800eb42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	887a      	ldrh	r2, [r7, #2]
 800eb4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	887a      	ldrh	r2, [r7, #2]
 800eb54:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb6c:	2b40      	cmp	r3, #64	; 0x40
 800eb6e:	d007      	beq.n	800eb80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb88:	d178      	bne.n	800ec7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <HAL_SPI_TransmitReceive+0x10a>
 800eb92:	8b7b      	ldrh	r3, [r7, #26]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d166      	bne.n	800ec66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9c:	881a      	ldrh	r2, [r3, #0]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba8:	1c9a      	adds	r2, r3, #2
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	3b01      	subs	r3, #1
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ebbc:	e053      	b.n	800ec66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	f003 0302 	and.w	r3, r3, #2
 800ebc8:	2b02      	cmp	r3, #2
 800ebca:	d11b      	bne.n	800ec04 <HAL_SPI_TransmitReceive+0x176>
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d016      	beq.n	800ec04 <HAL_SPI_TransmitReceive+0x176>
 800ebd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d113      	bne.n	800ec04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe0:	881a      	ldrh	r2, [r3, #0]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebec:	1c9a      	adds	r2, r3, #2
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ec00:	2300      	movs	r3, #0
 800ec02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	689b      	ldr	r3, [r3, #8]
 800ec0a:	f003 0301 	and.w	r3, r3, #1
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d119      	bne.n	800ec46 <HAL_SPI_TransmitReceive+0x1b8>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d014      	beq.n	800ec46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68da      	ldr	r2, [r3, #12]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec26:	b292      	uxth	r2, r2
 800ec28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec2e:	1c9a      	adds	r2, r3, #2
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ec42:	2301      	movs	r3, #1
 800ec44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ec46:	f7fb f893 	bl	8009d70 <HAL_GetTick>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d807      	bhi.n	800ec66 <HAL_SPI_TransmitReceive+0x1d8>
 800ec56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5c:	d003      	beq.n	800ec66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec64:	e0a7      	b.n	800edb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1a6      	bne.n	800ebbe <HAL_SPI_TransmitReceive+0x130>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1a1      	bne.n	800ebbe <HAL_SPI_TransmitReceive+0x130>
 800ec7a:	e07c      	b.n	800ed76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d002      	beq.n	800ec8a <HAL_SPI_TransmitReceive+0x1fc>
 800ec84:	8b7b      	ldrh	r3, [r7, #26]
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d16b      	bne.n	800ed62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	330c      	adds	r3, #12
 800ec94:	7812      	ldrb	r2, [r2, #0]
 800ec96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec9c:	1c5a      	adds	r2, r3, #1
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ecb0:	e057      	b.n	800ed62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	f003 0302 	and.w	r3, r3, #2
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d11c      	bne.n	800ecfa <HAL_SPI_TransmitReceive+0x26c>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d017      	beq.n	800ecfa <HAL_SPI_TransmitReceive+0x26c>
 800ecca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d114      	bne.n	800ecfa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	330c      	adds	r3, #12
 800ecda:	7812      	ldrb	r2, [r2, #0]
 800ecdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece2:	1c5a      	adds	r2, r3, #1
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	f003 0301 	and.w	r3, r3, #1
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d119      	bne.n	800ed3c <HAL_SPI_TransmitReceive+0x2ae>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d014      	beq.n	800ed3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	68da      	ldr	r2, [r3, #12]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed1c:	b2d2      	uxtb	r2, r2
 800ed1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed24:	1c5a      	adds	r2, r3, #1
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	3b01      	subs	r3, #1
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ed3c:	f7fb f818 	bl	8009d70 <HAL_GetTick>
 800ed40:	4602      	mov	r2, r0
 800ed42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d803      	bhi.n	800ed54 <HAL_SPI_TransmitReceive+0x2c6>
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed52:	d102      	bne.n	800ed5a <HAL_SPI_TransmitReceive+0x2cc>
 800ed54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d103      	bne.n	800ed62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed60:	e029      	b.n	800edb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1a2      	bne.n	800ecb2 <HAL_SPI_TransmitReceive+0x224>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d19d      	bne.n	800ecb2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f000 f8f8 	bl	800ef70 <SPI_EndRxTxTransaction>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d006      	beq.n	800ed94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2220      	movs	r2, #32
 800ed90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ed92:	e010      	b.n	800edb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d10b      	bne.n	800edb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	617b      	str	r3, [r7, #20]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68db      	ldr	r3, [r3, #12]
 800eda6:	617b      	str	r3, [r7, #20]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	617b      	str	r3, [r7, #20]
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	e000      	b.n	800edb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800edb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2201      	movs	r2, #1
 800edba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800edc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3730      	adds	r7, #48	; 0x30
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b084      	sub	sp, #16
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	60f8      	str	r0, [r7, #12]
 800edda:	60b9      	str	r1, [r7, #8]
 800eddc:	603b      	str	r3, [r7, #0]
 800edde:	4613      	mov	r3, r2
 800ede0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ede2:	e04c      	b.n	800ee7e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edea:	d048      	beq.n	800ee7e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800edec:	f7fa ffc0 	bl	8009d70 <HAL_GetTick>
 800edf0:	4602      	mov	r2, r0
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	1ad3      	subs	r3, r2, r3
 800edf6:	683a      	ldr	r2, [r7, #0]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d902      	bls.n	800ee02 <SPI_WaitFlagStateUntilTimeout+0x30>
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d13d      	bne.n	800ee7e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	685a      	ldr	r2, [r3, #4]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ee10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee1a:	d111      	bne.n	800ee40 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee24:	d004      	beq.n	800ee30 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee2e:	d107      	bne.n	800ee40 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee48:	d10f      	bne.n	800ee6a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee58:	601a      	str	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	e00f      	b.n	800ee9e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	689a      	ldr	r2, [r3, #8]
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	4013      	ands	r3, r2
 800ee88:	68ba      	ldr	r2, [r7, #8]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	bf0c      	ite	eq
 800ee8e:	2301      	moveq	r3, #1
 800ee90:	2300      	movne	r3, #0
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	461a      	mov	r2, r3
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d1a3      	bne.n	800ede4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b086      	sub	sp, #24
 800eeaa:	af02      	add	r7, sp, #8
 800eeac:	60f8      	str	r0, [r7, #12]
 800eeae:	60b9      	str	r1, [r7, #8]
 800eeb0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eeba:	d111      	bne.n	800eee0 <SPI_EndRxTransaction+0x3a>
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eec4:	d004      	beq.n	800eed0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eece:	d107      	bne.n	800eee0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eede:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eee8:	d12a      	bne.n	800ef40 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eef2:	d012      	beq.n	800ef1a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	2200      	movs	r2, #0
 800eefc:	2180      	movs	r1, #128	; 0x80
 800eefe:	68f8      	ldr	r0, [r7, #12]
 800ef00:	f7ff ff67 	bl	800edd2 <SPI_WaitFlagStateUntilTimeout>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d02d      	beq.n	800ef66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef0e:	f043 0220 	orr.w	r2, r3, #32
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ef16:	2303      	movs	r3, #3
 800ef18:	e026      	b.n	800ef68 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	2200      	movs	r2, #0
 800ef22:	2101      	movs	r1, #1
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f7ff ff54 	bl	800edd2 <SPI_WaitFlagStateUntilTimeout>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d01a      	beq.n	800ef66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef34:	f043 0220 	orr.w	r2, r3, #32
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ef3c:	2303      	movs	r3, #3
 800ef3e:	e013      	b.n	800ef68 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	9300      	str	r3, [sp, #0]
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2200      	movs	r2, #0
 800ef48:	2101      	movs	r1, #1
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f7ff ff41 	bl	800edd2 <SPI_WaitFlagStateUntilTimeout>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d007      	beq.n	800ef66 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef5a:	f043 0220 	orr.w	r2, r3, #32
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ef62:	2303      	movs	r3, #3
 800ef64:	e000      	b.n	800ef68 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ef66:	2300      	movs	r3, #0
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b088      	sub	sp, #32
 800ef74:	af02      	add	r7, sp, #8
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ef7c:	4b1b      	ldr	r3, [pc, #108]	; (800efec <SPI_EndRxTxTransaction+0x7c>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a1b      	ldr	r2, [pc, #108]	; (800eff0 <SPI_EndRxTxTransaction+0x80>)
 800ef82:	fba2 2303 	umull	r2, r3, r2, r3
 800ef86:	0d5b      	lsrs	r3, r3, #21
 800ef88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef8c:	fb02 f303 	mul.w	r3, r2, r3
 800ef90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef9a:	d112      	bne.n	800efc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	2200      	movs	r2, #0
 800efa4:	2180      	movs	r1, #128	; 0x80
 800efa6:	68f8      	ldr	r0, [r7, #12]
 800efa8:	f7ff ff13 	bl	800edd2 <SPI_WaitFlagStateUntilTimeout>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d016      	beq.n	800efe0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb6:	f043 0220 	orr.w	r2, r3, #32
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800efbe:	2303      	movs	r3, #3
 800efc0:	e00f      	b.n	800efe2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00a      	beq.n	800efde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	3b01      	subs	r3, #1
 800efcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efd8:	2b80      	cmp	r3, #128	; 0x80
 800efda:	d0f2      	beq.n	800efc2 <SPI_EndRxTxTransaction+0x52>
 800efdc:	e000      	b.n	800efe0 <SPI_EndRxTxTransaction+0x70>
        break;
 800efde:	bf00      	nop
  }

  return HAL_OK;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3718      	adds	r7, #24
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	20000000 	.word	0x20000000
 800eff0:	165e9f81 	.word	0x165e9f81

0800eff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d101      	bne.n	800f006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f002:	2301      	movs	r3, #1
 800f004:	e01d      	b.n	800f042 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d106      	bne.n	800f020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7f8 f9d6 	bl	80073cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2202      	movs	r2, #2
 800f024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3304      	adds	r3, #4
 800f030:	4619      	mov	r1, r3
 800f032:	4610      	mov	r0, r2
 800f034:	f000 fb56 	bl	800f6e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3708      	adds	r7, #8
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}

0800f04a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f04a:	b480      	push	{r7}
 800f04c:	b085      	sub	sp, #20
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	68da      	ldr	r2, [r3, #12]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f042 0201 	orr.w	r2, r2, #1
 800f060:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	f003 0307 	and.w	r3, r3, #7
 800f06c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2b06      	cmp	r3, #6
 800f072:	d007      	beq.n	800f084 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f042 0201 	orr.w	r2, r2, #1
 800f082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f092:	b580      	push	{r7, lr}
 800f094:	b082      	sub	sp, #8
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e01d      	b.n	800f0e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d106      	bne.n	800f0be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7f8 f913 	bl	80072e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2202      	movs	r2, #2
 800f0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	3304      	adds	r3, #4
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	f000 fb07 	bl	800f6e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2201      	movs	r2, #1
 800f0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	6839      	ldr	r1, [r7, #0]
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f000 fd42 	bl	800fb84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a15      	ldr	r2, [pc, #84]	; (800f15c <HAL_TIM_PWM_Start+0x74>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d004      	beq.n	800f114 <HAL_TIM_PWM_Start+0x2c>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4a14      	ldr	r2, [pc, #80]	; (800f160 <HAL_TIM_PWM_Start+0x78>)
 800f110:	4293      	cmp	r3, r2
 800f112:	d101      	bne.n	800f118 <HAL_TIM_PWM_Start+0x30>
 800f114:	2301      	movs	r3, #1
 800f116:	e000      	b.n	800f11a <HAL_TIM_PWM_Start+0x32>
 800f118:	2300      	movs	r3, #0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d007      	beq.n	800f12e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f12c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	f003 0307 	and.w	r3, r3, #7
 800f138:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b06      	cmp	r3, #6
 800f13e:	d007      	beq.n	800f150 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f042 0201 	orr.w	r2, r2, #1
 800f14e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f150:	2300      	movs	r3, #0
}
 800f152:	4618      	mov	r0, r3
 800f154:	3710      	adds	r7, #16
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	40010000 	.word	0x40010000
 800f160:	40010400 	.word	0x40010400

0800f164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b086      	sub	sp, #24
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d101      	bne.n	800f178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	e083      	b.n	800f280 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b00      	cmp	r3, #0
 800f182:	d106      	bne.n	800f192 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f7f8 f9ad 	bl	80074ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2202      	movs	r2, #2
 800f196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	6812      	ldr	r2, [r2, #0]
 800f1a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1a8:	f023 0307 	bic.w	r3, r3, #7
 800f1ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	3304      	adds	r3, #4
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	4610      	mov	r0, r2
 800f1ba:	f000 fa93 	bl	800f6e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	699b      	ldr	r3, [r3, #24]
 800f1cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	6a1b      	ldr	r3, [r3, #32]
 800f1d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1e6:	f023 0303 	bic.w	r3, r3, #3
 800f1ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	689a      	ldr	r2, [r3, #8]
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	021b      	lsls	r3, r3, #8
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	693a      	ldr	r2, [r7, #16]
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f204:	f023 030c 	bic.w	r3, r3, #12
 800f208:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	68da      	ldr	r2, [r3, #12]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	69db      	ldr	r3, [r3, #28]
 800f21e:	021b      	lsls	r3, r3, #8
 800f220:	4313      	orrs	r3, r2
 800f222:	693a      	ldr	r2, [r7, #16]
 800f224:	4313      	orrs	r3, r2
 800f226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	011a      	lsls	r2, r3, #4
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	6a1b      	ldr	r3, [r3, #32]
 800f232:	031b      	lsls	r3, r3, #12
 800f234:	4313      	orrs	r3, r2
 800f236:	693a      	ldr	r2, [r7, #16]
 800f238:	4313      	orrs	r3, r2
 800f23a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f242:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f24a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	695b      	ldr	r3, [r3, #20]
 800f254:	011b      	lsls	r3, r3, #4
 800f256:	4313      	orrs	r3, r2
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	4313      	orrs	r3, r2
 800f25c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	693a      	ldr	r2, [r7, #16]
 800f26c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2201      	movs	r2, #1
 800f27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3718      	adds	r7, #24
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <HAL_TIM_Encoder_Start+0x16>
 800f298:	2b04      	cmp	r3, #4
 800f29a:	d008      	beq.n	800f2ae <HAL_TIM_Encoder_Start+0x26>
 800f29c:	e00f      	b.n	800f2be <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	2100      	movs	r1, #0
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 fc6c 	bl	800fb84 <TIM_CCxChannelCmd>
      break;
 800f2ac:	e016      	b.n	800f2dc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	2104      	movs	r1, #4
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f000 fc64 	bl	800fb84 <TIM_CCxChannelCmd>
      break;
 800f2bc:	e00e      	b.n	800f2dc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 fc5c 	bl	800fb84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	2104      	movs	r1, #4
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f000 fc55 	bl	800fb84 <TIM_CCxChannelCmd>
      break;
 800f2da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f042 0201 	orr.w	r2, r2, #1
 800f2ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b082      	sub	sp, #8
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	f003 0302 	and.w	r3, r3, #2
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d122      	bne.n	800f352 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	f003 0302 	and.w	r3, r3, #2
 800f316:	2b02      	cmp	r3, #2
 800f318:	d11b      	bne.n	800f352 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f06f 0202 	mvn.w	r2, #2
 800f322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	f003 0303 	and.w	r3, r3, #3
 800f334:	2b00      	cmp	r3, #0
 800f336:	d003      	beq.n	800f340 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 f9b5 	bl	800f6a8 <HAL_TIM_IC_CaptureCallback>
 800f33e:	e005      	b.n	800f34c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 f9a7 	bl	800f694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 f9b8 	bl	800f6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	691b      	ldr	r3, [r3, #16]
 800f358:	f003 0304 	and.w	r3, r3, #4
 800f35c:	2b04      	cmp	r3, #4
 800f35e:	d122      	bne.n	800f3a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	f003 0304 	and.w	r3, r3, #4
 800f36a:	2b04      	cmp	r3, #4
 800f36c:	d11b      	bne.n	800f3a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f06f 0204 	mvn.w	r2, #4
 800f376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2202      	movs	r2, #2
 800f37c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d003      	beq.n	800f394 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 f98b 	bl	800f6a8 <HAL_TIM_IC_CaptureCallback>
 800f392:	e005      	b.n	800f3a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 f97d 	bl	800f694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f98e 	bl	800f6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	f003 0308 	and.w	r3, r3, #8
 800f3b0:	2b08      	cmp	r3, #8
 800f3b2:	d122      	bne.n	800f3fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	f003 0308 	and.w	r3, r3, #8
 800f3be:	2b08      	cmp	r3, #8
 800f3c0:	d11b      	bne.n	800f3fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f06f 0208 	mvn.w	r2, #8
 800f3ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2204      	movs	r2, #4
 800f3d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	69db      	ldr	r3, [r3, #28]
 800f3d8:	f003 0303 	and.w	r3, r3, #3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d003      	beq.n	800f3e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 f961 	bl	800f6a8 <HAL_TIM_IC_CaptureCallback>
 800f3e6:	e005      	b.n	800f3f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 f953 	bl	800f694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 f964 	bl	800f6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	f003 0310 	and.w	r3, r3, #16
 800f404:	2b10      	cmp	r3, #16
 800f406:	d122      	bne.n	800f44e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	f003 0310 	and.w	r3, r3, #16
 800f412:	2b10      	cmp	r3, #16
 800f414:	d11b      	bne.n	800f44e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f06f 0210 	mvn.w	r2, #16
 800f41e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2208      	movs	r2, #8
 800f424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	69db      	ldr	r3, [r3, #28]
 800f42c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f430:	2b00      	cmp	r3, #0
 800f432:	d003      	beq.n	800f43c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f937 	bl	800f6a8 <HAL_TIM_IC_CaptureCallback>
 800f43a:	e005      	b.n	800f448 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f929 	bl	800f694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 f93a 	bl	800f6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d10e      	bne.n	800f47a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	f003 0301 	and.w	r3, r3, #1
 800f466:	2b01      	cmp	r3, #1
 800f468:	d107      	bne.n	800f47a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f06f 0201 	mvn.w	r2, #1
 800f472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7f6 fd23 	bl	8005ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	691b      	ldr	r3, [r3, #16]
 800f480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f484:	2b80      	cmp	r3, #128	; 0x80
 800f486:	d10e      	bne.n	800f4a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f492:	2b80      	cmp	r3, #128	; 0x80
 800f494:	d107      	bne.n	800f4a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fc6d 	bl	800fd80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	691b      	ldr	r3, [r3, #16]
 800f4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4b0:	2b40      	cmp	r3, #64	; 0x40
 800f4b2:	d10e      	bne.n	800f4d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4be:	2b40      	cmp	r3, #64	; 0x40
 800f4c0:	d107      	bne.n	800f4d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f4ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 f8ff 	bl	800f6d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	f003 0320 	and.w	r3, r3, #32
 800f4dc:	2b20      	cmp	r3, #32
 800f4de:	d10e      	bne.n	800f4fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	f003 0320 	and.w	r3, r3, #32
 800f4ea:	2b20      	cmp	r3, #32
 800f4ec:	d107      	bne.n	800f4fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f06f 0220 	mvn.w	r2, #32
 800f4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 fc37 	bl	800fd6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f4fe:	bf00      	nop
 800f500:	3708      	adds	r7, #8
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
	...

0800f508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d101      	bne.n	800f522 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f51e:	2302      	movs	r3, #2
 800f520:	e0b4      	b.n	800f68c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2201      	movs	r2, #1
 800f526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2202      	movs	r2, #2
 800f52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b0c      	cmp	r3, #12
 800f536:	f200 809f 	bhi.w	800f678 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f53a:	a201      	add	r2, pc, #4	; (adr r2, 800f540 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f540:	0800f575 	.word	0x0800f575
 800f544:	0800f679 	.word	0x0800f679
 800f548:	0800f679 	.word	0x0800f679
 800f54c:	0800f679 	.word	0x0800f679
 800f550:	0800f5b5 	.word	0x0800f5b5
 800f554:	0800f679 	.word	0x0800f679
 800f558:	0800f679 	.word	0x0800f679
 800f55c:	0800f679 	.word	0x0800f679
 800f560:	0800f5f7 	.word	0x0800f5f7
 800f564:	0800f679 	.word	0x0800f679
 800f568:	0800f679 	.word	0x0800f679
 800f56c:	0800f679 	.word	0x0800f679
 800f570:	0800f637 	.word	0x0800f637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68b9      	ldr	r1, [r7, #8]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f000 f952 	bl	800f824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	699a      	ldr	r2, [r3, #24]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f042 0208 	orr.w	r2, r2, #8
 800f58e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	699a      	ldr	r2, [r3, #24]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f022 0204 	bic.w	r2, r2, #4
 800f59e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	6999      	ldr	r1, [r3, #24]
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	691a      	ldr	r2, [r3, #16]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	430a      	orrs	r2, r1
 800f5b0:	619a      	str	r2, [r3, #24]
      break;
 800f5b2:	e062      	b.n	800f67a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68b9      	ldr	r1, [r7, #8]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f000 f9a2 	bl	800f904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	699a      	ldr	r2, [r3, #24]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	699a      	ldr	r2, [r3, #24]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	6999      	ldr	r1, [r3, #24]
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	691b      	ldr	r3, [r3, #16]
 800f5ea:	021a      	lsls	r2, r3, #8
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	430a      	orrs	r2, r1
 800f5f2:	619a      	str	r2, [r3, #24]
      break;
 800f5f4:	e041      	b.n	800f67a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	68b9      	ldr	r1, [r7, #8]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f000 f9f7 	bl	800f9f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	69da      	ldr	r2, [r3, #28]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f042 0208 	orr.w	r2, r2, #8
 800f610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	69da      	ldr	r2, [r3, #28]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f022 0204 	bic.w	r2, r2, #4
 800f620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	69d9      	ldr	r1, [r3, #28]
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	691a      	ldr	r2, [r3, #16]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	430a      	orrs	r2, r1
 800f632:	61da      	str	r2, [r3, #28]
      break;
 800f634:	e021      	b.n	800f67a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68b9      	ldr	r1, [r7, #8]
 800f63c:	4618      	mov	r0, r3
 800f63e:	f000 fa4b 	bl	800fad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	69da      	ldr	r2, [r3, #28]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	69da      	ldr	r2, [r3, #28]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	69d9      	ldr	r1, [r3, #28]
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	691b      	ldr	r3, [r3, #16]
 800f66c:	021a      	lsls	r2, r3, #8
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	430a      	orrs	r2, r1
 800f674:	61da      	str	r2, [r3, #28]
      break;
 800f676:	e000      	b.n	800f67a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f678:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2201      	movs	r2, #1
 800f67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2200      	movs	r2, #0
 800f686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3710      	adds	r7, #16
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f69c:	bf00      	nop
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6b0:	bf00      	nop
 800f6b2:	370c      	adds	r7, #12
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a40      	ldr	r2, [pc, #256]	; (800f7f8 <TIM_Base_SetConfig+0x114>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d013      	beq.n	800f724 <TIM_Base_SetConfig+0x40>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f702:	d00f      	beq.n	800f724 <TIM_Base_SetConfig+0x40>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a3d      	ldr	r2, [pc, #244]	; (800f7fc <TIM_Base_SetConfig+0x118>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d00b      	beq.n	800f724 <TIM_Base_SetConfig+0x40>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a3c      	ldr	r2, [pc, #240]	; (800f800 <TIM_Base_SetConfig+0x11c>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d007      	beq.n	800f724 <TIM_Base_SetConfig+0x40>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a3b      	ldr	r2, [pc, #236]	; (800f804 <TIM_Base_SetConfig+0x120>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d003      	beq.n	800f724 <TIM_Base_SetConfig+0x40>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a3a      	ldr	r2, [pc, #232]	; (800f808 <TIM_Base_SetConfig+0x124>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d108      	bne.n	800f736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f72a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	4313      	orrs	r3, r2
 800f734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a2f      	ldr	r2, [pc, #188]	; (800f7f8 <TIM_Base_SetConfig+0x114>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d02b      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f744:	d027      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a2c      	ldr	r2, [pc, #176]	; (800f7fc <TIM_Base_SetConfig+0x118>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d023      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a2b      	ldr	r2, [pc, #172]	; (800f800 <TIM_Base_SetConfig+0x11c>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d01f      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a2a      	ldr	r2, [pc, #168]	; (800f804 <TIM_Base_SetConfig+0x120>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d01b      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4a29      	ldr	r2, [pc, #164]	; (800f808 <TIM_Base_SetConfig+0x124>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d017      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4a28      	ldr	r2, [pc, #160]	; (800f80c <TIM_Base_SetConfig+0x128>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d013      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4a27      	ldr	r2, [pc, #156]	; (800f810 <TIM_Base_SetConfig+0x12c>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d00f      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4a26      	ldr	r2, [pc, #152]	; (800f814 <TIM_Base_SetConfig+0x130>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d00b      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4a25      	ldr	r2, [pc, #148]	; (800f818 <TIM_Base_SetConfig+0x134>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d007      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4a24      	ldr	r2, [pc, #144]	; (800f81c <TIM_Base_SetConfig+0x138>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d003      	beq.n	800f796 <TIM_Base_SetConfig+0xb2>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	4a23      	ldr	r2, [pc, #140]	; (800f820 <TIM_Base_SetConfig+0x13c>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d108      	bne.n	800f7a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f79c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	68fa      	ldr	r2, [r7, #12]
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	695b      	ldr	r3, [r3, #20]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	689a      	ldr	r2, [r3, #8]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a0a      	ldr	r2, [pc, #40]	; (800f7f8 <TIM_Base_SetConfig+0x114>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d003      	beq.n	800f7dc <TIM_Base_SetConfig+0xf8>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4a0c      	ldr	r2, [pc, #48]	; (800f808 <TIM_Base_SetConfig+0x124>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d103      	bne.n	800f7e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	691a      	ldr	r2, [r3, #16]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	615a      	str	r2, [r3, #20]
}
 800f7ea:	bf00      	nop
 800f7ec:	3714      	adds	r7, #20
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr
 800f7f6:	bf00      	nop
 800f7f8:	40010000 	.word	0x40010000
 800f7fc:	40000400 	.word	0x40000400
 800f800:	40000800 	.word	0x40000800
 800f804:	40000c00 	.word	0x40000c00
 800f808:	40010400 	.word	0x40010400
 800f80c:	40014000 	.word	0x40014000
 800f810:	40014400 	.word	0x40014400
 800f814:	40014800 	.word	0x40014800
 800f818:	40001800 	.word	0x40001800
 800f81c:	40001c00 	.word	0x40001c00
 800f820:	40002000 	.word	0x40002000

0800f824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a1b      	ldr	r3, [r3, #32]
 800f832:	f023 0201 	bic.w	r2, r3, #1
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f023 0303 	bic.w	r3, r3, #3
 800f85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	4313      	orrs	r3, r2
 800f864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	f023 0302 	bic.w	r3, r3, #2
 800f86c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	697a      	ldr	r2, [r7, #20]
 800f874:	4313      	orrs	r3, r2
 800f876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4a20      	ldr	r2, [pc, #128]	; (800f8fc <TIM_OC1_SetConfig+0xd8>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d003      	beq.n	800f888 <TIM_OC1_SetConfig+0x64>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a1f      	ldr	r2, [pc, #124]	; (800f900 <TIM_OC1_SetConfig+0xdc>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d10c      	bne.n	800f8a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	f023 0308 	bic.w	r3, r3, #8
 800f88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	697a      	ldr	r2, [r7, #20]
 800f896:	4313      	orrs	r3, r2
 800f898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	f023 0304 	bic.w	r3, r3, #4
 800f8a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4a15      	ldr	r2, [pc, #84]	; (800f8fc <TIM_OC1_SetConfig+0xd8>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d003      	beq.n	800f8b2 <TIM_OC1_SetConfig+0x8e>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4a14      	ldr	r2, [pc, #80]	; (800f900 <TIM_OC1_SetConfig+0xdc>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d111      	bne.n	800f8d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	695b      	ldr	r3, [r3, #20]
 800f8c6:	693a      	ldr	r2, [r7, #16]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	699b      	ldr	r3, [r3, #24]
 800f8d0:	693a      	ldr	r2, [r7, #16]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	693a      	ldr	r2, [r7, #16]
 800f8da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	685a      	ldr	r2, [r3, #4]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	697a      	ldr	r2, [r7, #20]
 800f8ee:	621a      	str	r2, [r3, #32]
}
 800f8f0:	bf00      	nop
 800f8f2:	371c      	adds	r7, #28
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr
 800f8fc:	40010000 	.word	0x40010000
 800f900:	40010400 	.word	0x40010400

0800f904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f904:	b480      	push	{r7}
 800f906:	b087      	sub	sp, #28
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6a1b      	ldr	r3, [r3, #32]
 800f912:	f023 0210 	bic.w	r2, r3, #16
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a1b      	ldr	r3, [r3, #32]
 800f91e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	699b      	ldr	r3, [r3, #24]
 800f92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f93a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	021b      	lsls	r3, r3, #8
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	4313      	orrs	r3, r2
 800f946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	f023 0320 	bic.w	r3, r3, #32
 800f94e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	011b      	lsls	r3, r3, #4
 800f956:	697a      	ldr	r2, [r7, #20]
 800f958:	4313      	orrs	r3, r2
 800f95a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a22      	ldr	r2, [pc, #136]	; (800f9e8 <TIM_OC2_SetConfig+0xe4>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d003      	beq.n	800f96c <TIM_OC2_SetConfig+0x68>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a21      	ldr	r2, [pc, #132]	; (800f9ec <TIM_OC2_SetConfig+0xe8>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d10d      	bne.n	800f988 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	011b      	lsls	r3, r3, #4
 800f97a:	697a      	ldr	r2, [r7, #20]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a17      	ldr	r2, [pc, #92]	; (800f9e8 <TIM_OC2_SetConfig+0xe4>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d003      	beq.n	800f998 <TIM_OC2_SetConfig+0x94>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a16      	ldr	r2, [pc, #88]	; (800f9ec <TIM_OC2_SetConfig+0xe8>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d113      	bne.n	800f9c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f99e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	695b      	ldr	r3, [r3, #20]
 800f9ac:	009b      	lsls	r3, r3, #2
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	4313      	orrs	r3, r2
 800f9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	699b      	ldr	r3, [r3, #24]
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	693a      	ldr	r2, [r7, #16]
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	693a      	ldr	r2, [r7, #16]
 800f9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68fa      	ldr	r2, [r7, #12]
 800f9ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	685a      	ldr	r2, [r3, #4]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	621a      	str	r2, [r3, #32]
}
 800f9da:	bf00      	nop
 800f9dc:	371c      	adds	r7, #28
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	40010000 	.word	0x40010000
 800f9ec:	40010400 	.word	0x40010400

0800f9f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b087      	sub	sp, #28
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	69db      	ldr	r3, [r3, #28]
 800fa16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f023 0303 	bic.w	r3, r3, #3
 800fa26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	689b      	ldr	r3, [r3, #8]
 800fa3e:	021b      	lsls	r3, r3, #8
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4a21      	ldr	r2, [pc, #132]	; (800fad0 <TIM_OC3_SetConfig+0xe0>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d003      	beq.n	800fa56 <TIM_OC3_SetConfig+0x66>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4a20      	ldr	r2, [pc, #128]	; (800fad4 <TIM_OC3_SetConfig+0xe4>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d10d      	bne.n	800fa72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	68db      	ldr	r3, [r3, #12]
 800fa62:	021b      	lsls	r3, r3, #8
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	4313      	orrs	r3, r2
 800fa68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4a16      	ldr	r2, [pc, #88]	; (800fad0 <TIM_OC3_SetConfig+0xe0>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d003      	beq.n	800fa82 <TIM_OC3_SetConfig+0x92>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4a15      	ldr	r2, [pc, #84]	; (800fad4 <TIM_OC3_SetConfig+0xe4>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d113      	bne.n	800faaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	695b      	ldr	r3, [r3, #20]
 800fa96:	011b      	lsls	r3, r3, #4
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	011b      	lsls	r3, r3, #4
 800faa4:	693a      	ldr	r2, [r7, #16]
 800faa6:	4313      	orrs	r3, r2
 800faa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	693a      	ldr	r2, [r7, #16]
 800faae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	685a      	ldr	r2, [r3, #4]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	697a      	ldr	r2, [r7, #20]
 800fac2:	621a      	str	r2, [r3, #32]
}
 800fac4:	bf00      	nop
 800fac6:	371c      	adds	r7, #28
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr
 800fad0:	40010000 	.word	0x40010000
 800fad4:	40010400 	.word	0x40010400

0800fad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fad8:	b480      	push	{r7}
 800fada:	b087      	sub	sp, #28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6a1b      	ldr	r3, [r3, #32]
 800faf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	69db      	ldr	r3, [r3, #28]
 800fafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	021b      	lsls	r3, r3, #8
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	031b      	lsls	r3, r3, #12
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a12      	ldr	r2, [pc, #72]	; (800fb7c <TIM_OC4_SetConfig+0xa4>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d003      	beq.n	800fb40 <TIM_OC4_SetConfig+0x68>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a11      	ldr	r2, [pc, #68]	; (800fb80 <TIM_OC4_SetConfig+0xa8>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d109      	bne.n	800fb54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	695b      	ldr	r3, [r3, #20]
 800fb4c:	019b      	lsls	r3, r3, #6
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	4313      	orrs	r3, r2
 800fb52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	693a      	ldr	r2, [r7, #16]
 800fb6c:	621a      	str	r2, [r3, #32]
}
 800fb6e:	bf00      	nop
 800fb70:	371c      	adds	r7, #28
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	40010000 	.word	0x40010000
 800fb80:	40010400 	.word	0x40010400

0800fb84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	f003 031f 	and.w	r3, r3, #31
 800fb96:	2201      	movs	r2, #1
 800fb98:	fa02 f303 	lsl.w	r3, r2, r3
 800fb9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	6a1a      	ldr	r2, [r3, #32]
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	43db      	mvns	r3, r3
 800fba6:	401a      	ands	r2, r3
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	6a1a      	ldr	r2, [r3, #32]
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	f003 031f 	and.w	r3, r3, #31
 800fbb6:	6879      	ldr	r1, [r7, #4]
 800fbb8:	fa01 f303 	lsl.w	r3, r1, r3
 800fbbc:	431a      	orrs	r2, r3
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	621a      	str	r2, [r3, #32]
}
 800fbc2:	bf00      	nop
 800fbc4:	371c      	adds	r7, #28
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
	...

0800fbd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d101      	bne.n	800fbe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbe4:	2302      	movs	r3, #2
 800fbe6:	e05a      	b.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2202      	movs	r2, #2
 800fbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	68fa      	ldr	r2, [r7, #12]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	68fa      	ldr	r2, [r7, #12]
 800fc20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4a21      	ldr	r2, [pc, #132]	; (800fcac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d022      	beq.n	800fc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc34:	d01d      	beq.n	800fc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a1d      	ldr	r2, [pc, #116]	; (800fcb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d018      	beq.n	800fc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4a1b      	ldr	r2, [pc, #108]	; (800fcb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d013      	beq.n	800fc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4a1a      	ldr	r2, [pc, #104]	; (800fcb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d00e      	beq.n	800fc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4a18      	ldr	r2, [pc, #96]	; (800fcbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d009      	beq.n	800fc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4a17      	ldr	r2, [pc, #92]	; (800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d004      	beq.n	800fc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a15      	ldr	r2, [pc, #84]	; (800fcc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d10c      	bne.n	800fc8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	68ba      	ldr	r2, [r7, #8]
 800fc80:	4313      	orrs	r3, r2
 800fc82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	68ba      	ldr	r2, [r7, #8]
 800fc8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3714      	adds	r7, #20
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	40010000 	.word	0x40010000
 800fcb0:	40000400 	.word	0x40000400
 800fcb4:	40000800 	.word	0x40000800
 800fcb8:	40000c00 	.word	0x40000c00
 800fcbc:	40010400 	.word	0x40010400
 800fcc0:	40014000 	.word	0x40014000
 800fcc4:	40001800 	.word	0x40001800

0800fcc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b085      	sub	sp, #20
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d101      	bne.n	800fce4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fce0:	2302      	movs	r3, #2
 800fce2:	e03d      	b.n	800fd60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2201      	movs	r2, #1
 800fce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	4313      	orrs	r3, r2
 800fd06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4313      	orrs	r3, r2
 800fd22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	691b      	ldr	r3, [r3, #16]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	695b      	ldr	r3, [r3, #20]
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	69db      	ldr	r3, [r3, #28]
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3714      	adds	r7, #20
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd74:	bf00      	nop
 800fd76:	370c      	adds	r7, #12
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd88:	bf00      	nop
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d101      	bne.n	800fda6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fda2:	2301      	movs	r3, #1
 800fda4:	e03f      	b.n	800fe26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d106      	bne.n	800fdc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7f7 fcc0 	bl	8007740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2224      	movs	r2, #36	; 0x24
 800fdc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	68da      	ldr	r2, [r3, #12]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fdd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 f829 	bl	800fe30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	691a      	ldr	r2, [r3, #16]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fdec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	695a      	ldr	r2, [r3, #20]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fdfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	68da      	ldr	r2, [r3, #12]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fe0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2220      	movs	r2, #32
 800fe18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2220      	movs	r2, #32
 800fe20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3708      	adds	r7, #8
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
	...

0800fe30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe34:	b085      	sub	sp, #20
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	691b      	ldr	r3, [r3, #16]
 800fe40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68da      	ldr	r2, [r3, #12]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	430a      	orrs	r2, r1
 800fe4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	689a      	ldr	r2, [r3, #8]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	431a      	orrs	r2, r3
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	695b      	ldr	r3, [r3, #20]
 800fe5e:	431a      	orrs	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	69db      	ldr	r3, [r3, #28]
 800fe64:	4313      	orrs	r3, r2
 800fe66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fe72:	f023 030c 	bic.w	r3, r3, #12
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	6812      	ldr	r2, [r2, #0]
 800fe7a:	68f9      	ldr	r1, [r7, #12]
 800fe7c:	430b      	orrs	r3, r1
 800fe7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	695b      	ldr	r3, [r3, #20]
 800fe86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	699a      	ldr	r2, [r3, #24]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	430a      	orrs	r2, r1
 800fe94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	69db      	ldr	r3, [r3, #28]
 800fe9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe9e:	f040 818b 	bne.w	80101b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4ac1      	ldr	r2, [pc, #772]	; (80101ac <UART_SetConfig+0x37c>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d005      	beq.n	800feb8 <UART_SetConfig+0x88>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4abf      	ldr	r2, [pc, #764]	; (80101b0 <UART_SetConfig+0x380>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	f040 80bd 	bne.w	8010032 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800feb8:	f7fc fbcc 	bl	800c654 <HAL_RCC_GetPCLK2Freq>
 800febc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	461d      	mov	r5, r3
 800fec2:	f04f 0600 	mov.w	r6, #0
 800fec6:	46a8      	mov	r8, r5
 800fec8:	46b1      	mov	r9, r6
 800feca:	eb18 0308 	adds.w	r3, r8, r8
 800fece:	eb49 0409 	adc.w	r4, r9, r9
 800fed2:	4698      	mov	r8, r3
 800fed4:	46a1      	mov	r9, r4
 800fed6:	eb18 0805 	adds.w	r8, r8, r5
 800feda:	eb49 0906 	adc.w	r9, r9, r6
 800fede:	f04f 0100 	mov.w	r1, #0
 800fee2:	f04f 0200 	mov.w	r2, #0
 800fee6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800feea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800feee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fef2:	4688      	mov	r8, r1
 800fef4:	4691      	mov	r9, r2
 800fef6:	eb18 0005 	adds.w	r0, r8, r5
 800fefa:	eb49 0106 	adc.w	r1, r9, r6
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	461d      	mov	r5, r3
 800ff04:	f04f 0600 	mov.w	r6, #0
 800ff08:	196b      	adds	r3, r5, r5
 800ff0a:	eb46 0406 	adc.w	r4, r6, r6
 800ff0e:	461a      	mov	r2, r3
 800ff10:	4623      	mov	r3, r4
 800ff12:	f7f0 fed1 	bl	8000cb8 <__aeabi_uldivmod>
 800ff16:	4603      	mov	r3, r0
 800ff18:	460c      	mov	r4, r1
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	4ba5      	ldr	r3, [pc, #660]	; (80101b4 <UART_SetConfig+0x384>)
 800ff1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ff22:	095b      	lsrs	r3, r3, #5
 800ff24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	461d      	mov	r5, r3
 800ff2c:	f04f 0600 	mov.w	r6, #0
 800ff30:	46a9      	mov	r9, r5
 800ff32:	46b2      	mov	sl, r6
 800ff34:	eb19 0309 	adds.w	r3, r9, r9
 800ff38:	eb4a 040a 	adc.w	r4, sl, sl
 800ff3c:	4699      	mov	r9, r3
 800ff3e:	46a2      	mov	sl, r4
 800ff40:	eb19 0905 	adds.w	r9, r9, r5
 800ff44:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff48:	f04f 0100 	mov.w	r1, #0
 800ff4c:	f04f 0200 	mov.w	r2, #0
 800ff50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff5c:	4689      	mov	r9, r1
 800ff5e:	4692      	mov	sl, r2
 800ff60:	eb19 0005 	adds.w	r0, r9, r5
 800ff64:	eb4a 0106 	adc.w	r1, sl, r6
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	461d      	mov	r5, r3
 800ff6e:	f04f 0600 	mov.w	r6, #0
 800ff72:	196b      	adds	r3, r5, r5
 800ff74:	eb46 0406 	adc.w	r4, r6, r6
 800ff78:	461a      	mov	r2, r3
 800ff7a:	4623      	mov	r3, r4
 800ff7c:	f7f0 fe9c 	bl	8000cb8 <__aeabi_uldivmod>
 800ff80:	4603      	mov	r3, r0
 800ff82:	460c      	mov	r4, r1
 800ff84:	461a      	mov	r2, r3
 800ff86:	4b8b      	ldr	r3, [pc, #556]	; (80101b4 <UART_SetConfig+0x384>)
 800ff88:	fba3 1302 	umull	r1, r3, r3, r2
 800ff8c:	095b      	lsrs	r3, r3, #5
 800ff8e:	2164      	movs	r1, #100	; 0x64
 800ff90:	fb01 f303 	mul.w	r3, r1, r3
 800ff94:	1ad3      	subs	r3, r2, r3
 800ff96:	00db      	lsls	r3, r3, #3
 800ff98:	3332      	adds	r3, #50	; 0x32
 800ff9a:	4a86      	ldr	r2, [pc, #536]	; (80101b4 <UART_SetConfig+0x384>)
 800ff9c:	fba2 2303 	umull	r2, r3, r2, r3
 800ffa0:	095b      	lsrs	r3, r3, #5
 800ffa2:	005b      	lsls	r3, r3, #1
 800ffa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ffa8:	4498      	add	r8, r3
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	461d      	mov	r5, r3
 800ffae:	f04f 0600 	mov.w	r6, #0
 800ffb2:	46a9      	mov	r9, r5
 800ffb4:	46b2      	mov	sl, r6
 800ffb6:	eb19 0309 	adds.w	r3, r9, r9
 800ffba:	eb4a 040a 	adc.w	r4, sl, sl
 800ffbe:	4699      	mov	r9, r3
 800ffc0:	46a2      	mov	sl, r4
 800ffc2:	eb19 0905 	adds.w	r9, r9, r5
 800ffc6:	eb4a 0a06 	adc.w	sl, sl, r6
 800ffca:	f04f 0100 	mov.w	r1, #0
 800ffce:	f04f 0200 	mov.w	r2, #0
 800ffd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ffd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffde:	4689      	mov	r9, r1
 800ffe0:	4692      	mov	sl, r2
 800ffe2:	eb19 0005 	adds.w	r0, r9, r5
 800ffe6:	eb4a 0106 	adc.w	r1, sl, r6
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	461d      	mov	r5, r3
 800fff0:	f04f 0600 	mov.w	r6, #0
 800fff4:	196b      	adds	r3, r5, r5
 800fff6:	eb46 0406 	adc.w	r4, r6, r6
 800fffa:	461a      	mov	r2, r3
 800fffc:	4623      	mov	r3, r4
 800fffe:	f7f0 fe5b 	bl	8000cb8 <__aeabi_uldivmod>
 8010002:	4603      	mov	r3, r0
 8010004:	460c      	mov	r4, r1
 8010006:	461a      	mov	r2, r3
 8010008:	4b6a      	ldr	r3, [pc, #424]	; (80101b4 <UART_SetConfig+0x384>)
 801000a:	fba3 1302 	umull	r1, r3, r3, r2
 801000e:	095b      	lsrs	r3, r3, #5
 8010010:	2164      	movs	r1, #100	; 0x64
 8010012:	fb01 f303 	mul.w	r3, r1, r3
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	00db      	lsls	r3, r3, #3
 801001a:	3332      	adds	r3, #50	; 0x32
 801001c:	4a65      	ldr	r2, [pc, #404]	; (80101b4 <UART_SetConfig+0x384>)
 801001e:	fba2 2303 	umull	r2, r3, r2, r3
 8010022:	095b      	lsrs	r3, r3, #5
 8010024:	f003 0207 	and.w	r2, r3, #7
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4442      	add	r2, r8
 801002e:	609a      	str	r2, [r3, #8]
 8010030:	e26f      	b.n	8010512 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010032:	f7fc fafb 	bl	800c62c <HAL_RCC_GetPCLK1Freq>
 8010036:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	461d      	mov	r5, r3
 801003c:	f04f 0600 	mov.w	r6, #0
 8010040:	46a8      	mov	r8, r5
 8010042:	46b1      	mov	r9, r6
 8010044:	eb18 0308 	adds.w	r3, r8, r8
 8010048:	eb49 0409 	adc.w	r4, r9, r9
 801004c:	4698      	mov	r8, r3
 801004e:	46a1      	mov	r9, r4
 8010050:	eb18 0805 	adds.w	r8, r8, r5
 8010054:	eb49 0906 	adc.w	r9, r9, r6
 8010058:	f04f 0100 	mov.w	r1, #0
 801005c:	f04f 0200 	mov.w	r2, #0
 8010060:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010064:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010068:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801006c:	4688      	mov	r8, r1
 801006e:	4691      	mov	r9, r2
 8010070:	eb18 0005 	adds.w	r0, r8, r5
 8010074:	eb49 0106 	adc.w	r1, r9, r6
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	461d      	mov	r5, r3
 801007e:	f04f 0600 	mov.w	r6, #0
 8010082:	196b      	adds	r3, r5, r5
 8010084:	eb46 0406 	adc.w	r4, r6, r6
 8010088:	461a      	mov	r2, r3
 801008a:	4623      	mov	r3, r4
 801008c:	f7f0 fe14 	bl	8000cb8 <__aeabi_uldivmod>
 8010090:	4603      	mov	r3, r0
 8010092:	460c      	mov	r4, r1
 8010094:	461a      	mov	r2, r3
 8010096:	4b47      	ldr	r3, [pc, #284]	; (80101b4 <UART_SetConfig+0x384>)
 8010098:	fba3 2302 	umull	r2, r3, r3, r2
 801009c:	095b      	lsrs	r3, r3, #5
 801009e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	461d      	mov	r5, r3
 80100a6:	f04f 0600 	mov.w	r6, #0
 80100aa:	46a9      	mov	r9, r5
 80100ac:	46b2      	mov	sl, r6
 80100ae:	eb19 0309 	adds.w	r3, r9, r9
 80100b2:	eb4a 040a 	adc.w	r4, sl, sl
 80100b6:	4699      	mov	r9, r3
 80100b8:	46a2      	mov	sl, r4
 80100ba:	eb19 0905 	adds.w	r9, r9, r5
 80100be:	eb4a 0a06 	adc.w	sl, sl, r6
 80100c2:	f04f 0100 	mov.w	r1, #0
 80100c6:	f04f 0200 	mov.w	r2, #0
 80100ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100d6:	4689      	mov	r9, r1
 80100d8:	4692      	mov	sl, r2
 80100da:	eb19 0005 	adds.w	r0, r9, r5
 80100de:	eb4a 0106 	adc.w	r1, sl, r6
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	461d      	mov	r5, r3
 80100e8:	f04f 0600 	mov.w	r6, #0
 80100ec:	196b      	adds	r3, r5, r5
 80100ee:	eb46 0406 	adc.w	r4, r6, r6
 80100f2:	461a      	mov	r2, r3
 80100f4:	4623      	mov	r3, r4
 80100f6:	f7f0 fddf 	bl	8000cb8 <__aeabi_uldivmod>
 80100fa:	4603      	mov	r3, r0
 80100fc:	460c      	mov	r4, r1
 80100fe:	461a      	mov	r2, r3
 8010100:	4b2c      	ldr	r3, [pc, #176]	; (80101b4 <UART_SetConfig+0x384>)
 8010102:	fba3 1302 	umull	r1, r3, r3, r2
 8010106:	095b      	lsrs	r3, r3, #5
 8010108:	2164      	movs	r1, #100	; 0x64
 801010a:	fb01 f303 	mul.w	r3, r1, r3
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	00db      	lsls	r3, r3, #3
 8010112:	3332      	adds	r3, #50	; 0x32
 8010114:	4a27      	ldr	r2, [pc, #156]	; (80101b4 <UART_SetConfig+0x384>)
 8010116:	fba2 2303 	umull	r2, r3, r2, r3
 801011a:	095b      	lsrs	r3, r3, #5
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010122:	4498      	add	r8, r3
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	461d      	mov	r5, r3
 8010128:	f04f 0600 	mov.w	r6, #0
 801012c:	46a9      	mov	r9, r5
 801012e:	46b2      	mov	sl, r6
 8010130:	eb19 0309 	adds.w	r3, r9, r9
 8010134:	eb4a 040a 	adc.w	r4, sl, sl
 8010138:	4699      	mov	r9, r3
 801013a:	46a2      	mov	sl, r4
 801013c:	eb19 0905 	adds.w	r9, r9, r5
 8010140:	eb4a 0a06 	adc.w	sl, sl, r6
 8010144:	f04f 0100 	mov.w	r1, #0
 8010148:	f04f 0200 	mov.w	r2, #0
 801014c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010150:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010154:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010158:	4689      	mov	r9, r1
 801015a:	4692      	mov	sl, r2
 801015c:	eb19 0005 	adds.w	r0, r9, r5
 8010160:	eb4a 0106 	adc.w	r1, sl, r6
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	461d      	mov	r5, r3
 801016a:	f04f 0600 	mov.w	r6, #0
 801016e:	196b      	adds	r3, r5, r5
 8010170:	eb46 0406 	adc.w	r4, r6, r6
 8010174:	461a      	mov	r2, r3
 8010176:	4623      	mov	r3, r4
 8010178:	f7f0 fd9e 	bl	8000cb8 <__aeabi_uldivmod>
 801017c:	4603      	mov	r3, r0
 801017e:	460c      	mov	r4, r1
 8010180:	461a      	mov	r2, r3
 8010182:	4b0c      	ldr	r3, [pc, #48]	; (80101b4 <UART_SetConfig+0x384>)
 8010184:	fba3 1302 	umull	r1, r3, r3, r2
 8010188:	095b      	lsrs	r3, r3, #5
 801018a:	2164      	movs	r1, #100	; 0x64
 801018c:	fb01 f303 	mul.w	r3, r1, r3
 8010190:	1ad3      	subs	r3, r2, r3
 8010192:	00db      	lsls	r3, r3, #3
 8010194:	3332      	adds	r3, #50	; 0x32
 8010196:	4a07      	ldr	r2, [pc, #28]	; (80101b4 <UART_SetConfig+0x384>)
 8010198:	fba2 2303 	umull	r2, r3, r2, r3
 801019c:	095b      	lsrs	r3, r3, #5
 801019e:	f003 0207 	and.w	r2, r3, #7
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4442      	add	r2, r8
 80101a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80101aa:	e1b2      	b.n	8010512 <UART_SetConfig+0x6e2>
 80101ac:	40011000 	.word	0x40011000
 80101b0:	40011400 	.word	0x40011400
 80101b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4ad7      	ldr	r2, [pc, #860]	; (801051c <UART_SetConfig+0x6ec>)
 80101be:	4293      	cmp	r3, r2
 80101c0:	d005      	beq.n	80101ce <UART_SetConfig+0x39e>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4ad6      	ldr	r2, [pc, #856]	; (8010520 <UART_SetConfig+0x6f0>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	f040 80d1 	bne.w	8010370 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80101ce:	f7fc fa41 	bl	800c654 <HAL_RCC_GetPCLK2Freq>
 80101d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	469a      	mov	sl, r3
 80101d8:	f04f 0b00 	mov.w	fp, #0
 80101dc:	46d0      	mov	r8, sl
 80101de:	46d9      	mov	r9, fp
 80101e0:	eb18 0308 	adds.w	r3, r8, r8
 80101e4:	eb49 0409 	adc.w	r4, r9, r9
 80101e8:	4698      	mov	r8, r3
 80101ea:	46a1      	mov	r9, r4
 80101ec:	eb18 080a 	adds.w	r8, r8, sl
 80101f0:	eb49 090b 	adc.w	r9, r9, fp
 80101f4:	f04f 0100 	mov.w	r1, #0
 80101f8:	f04f 0200 	mov.w	r2, #0
 80101fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010200:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010204:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010208:	4688      	mov	r8, r1
 801020a:	4691      	mov	r9, r2
 801020c:	eb1a 0508 	adds.w	r5, sl, r8
 8010210:	eb4b 0609 	adc.w	r6, fp, r9
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	4619      	mov	r1, r3
 801021a:	f04f 0200 	mov.w	r2, #0
 801021e:	f04f 0300 	mov.w	r3, #0
 8010222:	f04f 0400 	mov.w	r4, #0
 8010226:	0094      	lsls	r4, r2, #2
 8010228:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801022c:	008b      	lsls	r3, r1, #2
 801022e:	461a      	mov	r2, r3
 8010230:	4623      	mov	r3, r4
 8010232:	4628      	mov	r0, r5
 8010234:	4631      	mov	r1, r6
 8010236:	f7f0 fd3f 	bl	8000cb8 <__aeabi_uldivmod>
 801023a:	4603      	mov	r3, r0
 801023c:	460c      	mov	r4, r1
 801023e:	461a      	mov	r2, r3
 8010240:	4bb8      	ldr	r3, [pc, #736]	; (8010524 <UART_SetConfig+0x6f4>)
 8010242:	fba3 2302 	umull	r2, r3, r3, r2
 8010246:	095b      	lsrs	r3, r3, #5
 8010248:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	469b      	mov	fp, r3
 8010250:	f04f 0c00 	mov.w	ip, #0
 8010254:	46d9      	mov	r9, fp
 8010256:	46e2      	mov	sl, ip
 8010258:	eb19 0309 	adds.w	r3, r9, r9
 801025c:	eb4a 040a 	adc.w	r4, sl, sl
 8010260:	4699      	mov	r9, r3
 8010262:	46a2      	mov	sl, r4
 8010264:	eb19 090b 	adds.w	r9, r9, fp
 8010268:	eb4a 0a0c 	adc.w	sl, sl, ip
 801026c:	f04f 0100 	mov.w	r1, #0
 8010270:	f04f 0200 	mov.w	r2, #0
 8010274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010278:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801027c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010280:	4689      	mov	r9, r1
 8010282:	4692      	mov	sl, r2
 8010284:	eb1b 0509 	adds.w	r5, fp, r9
 8010288:	eb4c 060a 	adc.w	r6, ip, sl
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	4619      	mov	r1, r3
 8010292:	f04f 0200 	mov.w	r2, #0
 8010296:	f04f 0300 	mov.w	r3, #0
 801029a:	f04f 0400 	mov.w	r4, #0
 801029e:	0094      	lsls	r4, r2, #2
 80102a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102a4:	008b      	lsls	r3, r1, #2
 80102a6:	461a      	mov	r2, r3
 80102a8:	4623      	mov	r3, r4
 80102aa:	4628      	mov	r0, r5
 80102ac:	4631      	mov	r1, r6
 80102ae:	f7f0 fd03 	bl	8000cb8 <__aeabi_uldivmod>
 80102b2:	4603      	mov	r3, r0
 80102b4:	460c      	mov	r4, r1
 80102b6:	461a      	mov	r2, r3
 80102b8:	4b9a      	ldr	r3, [pc, #616]	; (8010524 <UART_SetConfig+0x6f4>)
 80102ba:	fba3 1302 	umull	r1, r3, r3, r2
 80102be:	095b      	lsrs	r3, r3, #5
 80102c0:	2164      	movs	r1, #100	; 0x64
 80102c2:	fb01 f303 	mul.w	r3, r1, r3
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	011b      	lsls	r3, r3, #4
 80102ca:	3332      	adds	r3, #50	; 0x32
 80102cc:	4a95      	ldr	r2, [pc, #596]	; (8010524 <UART_SetConfig+0x6f4>)
 80102ce:	fba2 2303 	umull	r2, r3, r2, r3
 80102d2:	095b      	lsrs	r3, r3, #5
 80102d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102d8:	4498      	add	r8, r3
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	469b      	mov	fp, r3
 80102de:	f04f 0c00 	mov.w	ip, #0
 80102e2:	46d9      	mov	r9, fp
 80102e4:	46e2      	mov	sl, ip
 80102e6:	eb19 0309 	adds.w	r3, r9, r9
 80102ea:	eb4a 040a 	adc.w	r4, sl, sl
 80102ee:	4699      	mov	r9, r3
 80102f0:	46a2      	mov	sl, r4
 80102f2:	eb19 090b 	adds.w	r9, r9, fp
 80102f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80102fa:	f04f 0100 	mov.w	r1, #0
 80102fe:	f04f 0200 	mov.w	r2, #0
 8010302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010306:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801030a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801030e:	4689      	mov	r9, r1
 8010310:	4692      	mov	sl, r2
 8010312:	eb1b 0509 	adds.w	r5, fp, r9
 8010316:	eb4c 060a 	adc.w	r6, ip, sl
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	4619      	mov	r1, r3
 8010320:	f04f 0200 	mov.w	r2, #0
 8010324:	f04f 0300 	mov.w	r3, #0
 8010328:	f04f 0400 	mov.w	r4, #0
 801032c:	0094      	lsls	r4, r2, #2
 801032e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010332:	008b      	lsls	r3, r1, #2
 8010334:	461a      	mov	r2, r3
 8010336:	4623      	mov	r3, r4
 8010338:	4628      	mov	r0, r5
 801033a:	4631      	mov	r1, r6
 801033c:	f7f0 fcbc 	bl	8000cb8 <__aeabi_uldivmod>
 8010340:	4603      	mov	r3, r0
 8010342:	460c      	mov	r4, r1
 8010344:	461a      	mov	r2, r3
 8010346:	4b77      	ldr	r3, [pc, #476]	; (8010524 <UART_SetConfig+0x6f4>)
 8010348:	fba3 1302 	umull	r1, r3, r3, r2
 801034c:	095b      	lsrs	r3, r3, #5
 801034e:	2164      	movs	r1, #100	; 0x64
 8010350:	fb01 f303 	mul.w	r3, r1, r3
 8010354:	1ad3      	subs	r3, r2, r3
 8010356:	011b      	lsls	r3, r3, #4
 8010358:	3332      	adds	r3, #50	; 0x32
 801035a:	4a72      	ldr	r2, [pc, #456]	; (8010524 <UART_SetConfig+0x6f4>)
 801035c:	fba2 2303 	umull	r2, r3, r2, r3
 8010360:	095b      	lsrs	r3, r3, #5
 8010362:	f003 020f 	and.w	r2, r3, #15
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4442      	add	r2, r8
 801036c:	609a      	str	r2, [r3, #8]
 801036e:	e0d0      	b.n	8010512 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010370:	f7fc f95c 	bl	800c62c <HAL_RCC_GetPCLK1Freq>
 8010374:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	469a      	mov	sl, r3
 801037a:	f04f 0b00 	mov.w	fp, #0
 801037e:	46d0      	mov	r8, sl
 8010380:	46d9      	mov	r9, fp
 8010382:	eb18 0308 	adds.w	r3, r8, r8
 8010386:	eb49 0409 	adc.w	r4, r9, r9
 801038a:	4698      	mov	r8, r3
 801038c:	46a1      	mov	r9, r4
 801038e:	eb18 080a 	adds.w	r8, r8, sl
 8010392:	eb49 090b 	adc.w	r9, r9, fp
 8010396:	f04f 0100 	mov.w	r1, #0
 801039a:	f04f 0200 	mov.w	r2, #0
 801039e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80103a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80103a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80103aa:	4688      	mov	r8, r1
 80103ac:	4691      	mov	r9, r2
 80103ae:	eb1a 0508 	adds.w	r5, sl, r8
 80103b2:	eb4b 0609 	adc.w	r6, fp, r9
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	4619      	mov	r1, r3
 80103bc:	f04f 0200 	mov.w	r2, #0
 80103c0:	f04f 0300 	mov.w	r3, #0
 80103c4:	f04f 0400 	mov.w	r4, #0
 80103c8:	0094      	lsls	r4, r2, #2
 80103ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103ce:	008b      	lsls	r3, r1, #2
 80103d0:	461a      	mov	r2, r3
 80103d2:	4623      	mov	r3, r4
 80103d4:	4628      	mov	r0, r5
 80103d6:	4631      	mov	r1, r6
 80103d8:	f7f0 fc6e 	bl	8000cb8 <__aeabi_uldivmod>
 80103dc:	4603      	mov	r3, r0
 80103de:	460c      	mov	r4, r1
 80103e0:	461a      	mov	r2, r3
 80103e2:	4b50      	ldr	r3, [pc, #320]	; (8010524 <UART_SetConfig+0x6f4>)
 80103e4:	fba3 2302 	umull	r2, r3, r3, r2
 80103e8:	095b      	lsrs	r3, r3, #5
 80103ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	469b      	mov	fp, r3
 80103f2:	f04f 0c00 	mov.w	ip, #0
 80103f6:	46d9      	mov	r9, fp
 80103f8:	46e2      	mov	sl, ip
 80103fa:	eb19 0309 	adds.w	r3, r9, r9
 80103fe:	eb4a 040a 	adc.w	r4, sl, sl
 8010402:	4699      	mov	r9, r3
 8010404:	46a2      	mov	sl, r4
 8010406:	eb19 090b 	adds.w	r9, r9, fp
 801040a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801040e:	f04f 0100 	mov.w	r1, #0
 8010412:	f04f 0200 	mov.w	r2, #0
 8010416:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801041a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801041e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010422:	4689      	mov	r9, r1
 8010424:	4692      	mov	sl, r2
 8010426:	eb1b 0509 	adds.w	r5, fp, r9
 801042a:	eb4c 060a 	adc.w	r6, ip, sl
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	4619      	mov	r1, r3
 8010434:	f04f 0200 	mov.w	r2, #0
 8010438:	f04f 0300 	mov.w	r3, #0
 801043c:	f04f 0400 	mov.w	r4, #0
 8010440:	0094      	lsls	r4, r2, #2
 8010442:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010446:	008b      	lsls	r3, r1, #2
 8010448:	461a      	mov	r2, r3
 801044a:	4623      	mov	r3, r4
 801044c:	4628      	mov	r0, r5
 801044e:	4631      	mov	r1, r6
 8010450:	f7f0 fc32 	bl	8000cb8 <__aeabi_uldivmod>
 8010454:	4603      	mov	r3, r0
 8010456:	460c      	mov	r4, r1
 8010458:	461a      	mov	r2, r3
 801045a:	4b32      	ldr	r3, [pc, #200]	; (8010524 <UART_SetConfig+0x6f4>)
 801045c:	fba3 1302 	umull	r1, r3, r3, r2
 8010460:	095b      	lsrs	r3, r3, #5
 8010462:	2164      	movs	r1, #100	; 0x64
 8010464:	fb01 f303 	mul.w	r3, r1, r3
 8010468:	1ad3      	subs	r3, r2, r3
 801046a:	011b      	lsls	r3, r3, #4
 801046c:	3332      	adds	r3, #50	; 0x32
 801046e:	4a2d      	ldr	r2, [pc, #180]	; (8010524 <UART_SetConfig+0x6f4>)
 8010470:	fba2 2303 	umull	r2, r3, r2, r3
 8010474:	095b      	lsrs	r3, r3, #5
 8010476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801047a:	4498      	add	r8, r3
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	469b      	mov	fp, r3
 8010480:	f04f 0c00 	mov.w	ip, #0
 8010484:	46d9      	mov	r9, fp
 8010486:	46e2      	mov	sl, ip
 8010488:	eb19 0309 	adds.w	r3, r9, r9
 801048c:	eb4a 040a 	adc.w	r4, sl, sl
 8010490:	4699      	mov	r9, r3
 8010492:	46a2      	mov	sl, r4
 8010494:	eb19 090b 	adds.w	r9, r9, fp
 8010498:	eb4a 0a0c 	adc.w	sl, sl, ip
 801049c:	f04f 0100 	mov.w	r1, #0
 80104a0:	f04f 0200 	mov.w	r2, #0
 80104a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104b0:	4689      	mov	r9, r1
 80104b2:	4692      	mov	sl, r2
 80104b4:	eb1b 0509 	adds.w	r5, fp, r9
 80104b8:	eb4c 060a 	adc.w	r6, ip, sl
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	4619      	mov	r1, r3
 80104c2:	f04f 0200 	mov.w	r2, #0
 80104c6:	f04f 0300 	mov.w	r3, #0
 80104ca:	f04f 0400 	mov.w	r4, #0
 80104ce:	0094      	lsls	r4, r2, #2
 80104d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104d4:	008b      	lsls	r3, r1, #2
 80104d6:	461a      	mov	r2, r3
 80104d8:	4623      	mov	r3, r4
 80104da:	4628      	mov	r0, r5
 80104dc:	4631      	mov	r1, r6
 80104de:	f7f0 fbeb 	bl	8000cb8 <__aeabi_uldivmod>
 80104e2:	4603      	mov	r3, r0
 80104e4:	460c      	mov	r4, r1
 80104e6:	461a      	mov	r2, r3
 80104e8:	4b0e      	ldr	r3, [pc, #56]	; (8010524 <UART_SetConfig+0x6f4>)
 80104ea:	fba3 1302 	umull	r1, r3, r3, r2
 80104ee:	095b      	lsrs	r3, r3, #5
 80104f0:	2164      	movs	r1, #100	; 0x64
 80104f2:	fb01 f303 	mul.w	r3, r1, r3
 80104f6:	1ad3      	subs	r3, r2, r3
 80104f8:	011b      	lsls	r3, r3, #4
 80104fa:	3332      	adds	r3, #50	; 0x32
 80104fc:	4a09      	ldr	r2, [pc, #36]	; (8010524 <UART_SetConfig+0x6f4>)
 80104fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010502:	095b      	lsrs	r3, r3, #5
 8010504:	f003 020f 	and.w	r2, r3, #15
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4442      	add	r2, r8
 801050e:	609a      	str	r2, [r3, #8]
}
 8010510:	e7ff      	b.n	8010512 <UART_SetConfig+0x6e2>
 8010512:	bf00      	nop
 8010514:	3714      	adds	r7, #20
 8010516:	46bd      	mov	sp, r7
 8010518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801051c:	40011000 	.word	0x40011000
 8010520:	40011400 	.word	0x40011400
 8010524:	51eb851f 	.word	0x51eb851f

08010528 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010528:	b084      	sub	sp, #16
 801052a:	b480      	push	{r7}
 801052c:	b085      	sub	sp, #20
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	f107 001c 	add.w	r0, r7, #28
 8010536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801053a:	2300      	movs	r3, #0
 801053c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801053e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010540:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010542:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010546:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010548:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801054a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801054c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801054e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010552:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	4313      	orrs	r3, r2
 8010558:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	431a      	orrs	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801056e:	2300      	movs	r3, #0
}
 8010570:	4618      	mov	r0, r3
 8010572:	3714      	adds	r7, #20
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	b004      	add	sp, #16
 801057c:	4770      	bx	lr

0801057e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801057e:	b480      	push	{r7}
 8010580:	b083      	sub	sp, #12
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801058c:	4618      	mov	r0, r3
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010598:	b480      	push	{r7}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b082      	sub	sp, #8
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2203      	movs	r2, #3
 80105c6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80105c8:	2002      	movs	r0, #2
 80105ca:	f7f9 fbdd 	bl	8009d88 <HAL_Delay>
  
  return HAL_OK;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f003 0303 	and.w	r3, r3, #3
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	370c      	adds	r7, #12
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr

080105f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010612:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010618:	431a      	orrs	r2, r3
                       Command->CPSM);
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801061e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	4313      	orrs	r3, r2
 8010624:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801062e:	f023 030f 	bic.w	r3, r3, #15
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	431a      	orrs	r2, r3
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801063a:	2300      	movs	r3, #0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	691b      	ldr	r3, [r3, #16]
 8010654:	b2db      	uxtb	r3, r3
}
 8010656:	4618      	mov	r0, r3
 8010658:	370c      	adds	r7, #12
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr

08010662 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010662:	b480      	push	{r7}
 8010664:	b085      	sub	sp, #20
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	3314      	adds	r3, #20
 8010670:	461a      	mov	r2, r3
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	4413      	add	r3, r2
 8010676:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
}  
 801067c:	4618      	mov	r0, r3
 801067e:	3714      	adds	r7, #20
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010692:	2300      	movs	r3, #0
 8010694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	685a      	ldr	r2, [r3, #4]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80106ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80106b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80106ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80106bc:	68fa      	ldr	r2, [r7, #12]
 80106be:	4313      	orrs	r3, r2
 80106c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	431a      	orrs	r2, r3
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80106d2:	2300      	movs	r3, #0

}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr

080106e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b088      	sub	sp, #32
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80106ee:	2310      	movs	r3, #16
 80106f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106f2:	2340      	movs	r3, #64	; 0x40
 80106f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106f6:	2300      	movs	r3, #0
 80106f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010700:	f107 0308 	add.w	r3, r7, #8
 8010704:	4619      	mov	r1, r3
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7ff ff74 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801070c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010710:	2110      	movs	r1, #16
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 fa40 	bl	8010b98 <SDMMC_GetCmdResp1>
 8010718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801071a:	69fb      	ldr	r3, [r7, #28]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3720      	adds	r7, #32
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010732:	2311      	movs	r3, #17
 8010734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010736:	2340      	movs	r3, #64	; 0x40
 8010738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801073a:	2300      	movs	r3, #0
 801073c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801073e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010744:	f107 0308 	add.w	r3, r7, #8
 8010748:	4619      	mov	r1, r3
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f7ff ff52 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010750:	f241 3288 	movw	r2, #5000	; 0x1388
 8010754:	2111      	movs	r1, #17
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 fa1e 	bl	8010b98 <SDMMC_GetCmdResp1>
 801075c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801075e:	69fb      	ldr	r3, [r7, #28]
}
 8010760:	4618      	mov	r0, r3
 8010762:	3720      	adds	r7, #32
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b088      	sub	sp, #32
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010776:	2312      	movs	r3, #18
 8010778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801077a:	2340      	movs	r3, #64	; 0x40
 801077c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801077e:	2300      	movs	r3, #0
 8010780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010788:	f107 0308 	add.w	r3, r7, #8
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f7ff ff30 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010794:	f241 3288 	movw	r2, #5000	; 0x1388
 8010798:	2112      	movs	r1, #18
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 f9fc 	bl	8010b98 <SDMMC_GetCmdResp1>
 80107a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107a2:	69fb      	ldr	r3, [r7, #28]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3720      	adds	r7, #32
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b088      	sub	sp, #32
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80107ba:	2318      	movs	r3, #24
 80107bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107be:	2340      	movs	r3, #64	; 0x40
 80107c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107c2:	2300      	movs	r3, #0
 80107c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107cc:	f107 0308 	add.w	r3, r7, #8
 80107d0:	4619      	mov	r1, r3
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff ff0e 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80107d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80107dc:	2118      	movs	r1, #24
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f9da 	bl	8010b98 <SDMMC_GetCmdResp1>
 80107e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107e6:	69fb      	ldr	r3, [r7, #28]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3720      	adds	r7, #32
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b088      	sub	sp, #32
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80107fe:	2319      	movs	r3, #25
 8010800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010802:	2340      	movs	r3, #64	; 0x40
 8010804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010806:	2300      	movs	r3, #0
 8010808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801080e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010810:	f107 0308 	add.w	r3, r7, #8
 8010814:	4619      	mov	r1, r3
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7ff feec 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801081c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010820:	2119      	movs	r1, #25
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 f9b8 	bl	8010b98 <SDMMC_GetCmdResp1>
 8010828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801082a:	69fb      	ldr	r3, [r7, #28]
}
 801082c:	4618      	mov	r0, r3
 801082e:	3720      	adds	r7, #32
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b088      	sub	sp, #32
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801083c:	2300      	movs	r3, #0
 801083e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010840:	230c      	movs	r3, #12
 8010842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010844:	2340      	movs	r3, #64	; 0x40
 8010846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010848:	2300      	movs	r3, #0
 801084a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010850:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010852:	f107 0308 	add.w	r3, r7, #8
 8010856:	4619      	mov	r1, r3
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7ff fecb 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801085e:	4a05      	ldr	r2, [pc, #20]	; (8010874 <SDMMC_CmdStopTransfer+0x40>)
 8010860:	210c      	movs	r1, #12
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 f998 	bl	8010b98 <SDMMC_GetCmdResp1>
 8010868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801086a:	69fb      	ldr	r3, [r7, #28]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3720      	adds	r7, #32
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	05f5e100 	.word	0x05f5e100

08010878 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b08a      	sub	sp, #40	; 0x28
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010888:	2307      	movs	r3, #7
 801088a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801088c:	2340      	movs	r3, #64	; 0x40
 801088e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010890:	2300      	movs	r3, #0
 8010892:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010898:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801089a:	f107 0310 	add.w	r3, r7, #16
 801089e:	4619      	mov	r1, r3
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f7ff fea7 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80108a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80108aa:	2107      	movs	r1, #7
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f000 f973 	bl	8010b98 <SDMMC_GetCmdResp1>
 80108b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80108b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3728      	adds	r7, #40	; 0x28
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80108be:	b580      	push	{r7, lr}
 80108c0:	b088      	sub	sp, #32
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80108c6:	2300      	movs	r3, #0
 80108c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80108ca:	2300      	movs	r3, #0
 80108cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80108ce:	2300      	movs	r3, #0
 80108d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108d2:	2300      	movs	r3, #0
 80108d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108dc:	f107 0308 	add.w	r3, r7, #8
 80108e0:	4619      	mov	r1, r3
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7ff fe86 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f000 f92d 	bl	8010b48 <SDMMC_GetCmdError>
 80108ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108f0:	69fb      	ldr	r3, [r7, #28]
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3720      	adds	r7, #32
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b088      	sub	sp, #32
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010902:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010908:	2308      	movs	r3, #8
 801090a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801090c:	2340      	movs	r3, #64	; 0x40
 801090e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010910:	2300      	movs	r3, #0
 8010912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801091a:	f107 0308 	add.w	r3, r7, #8
 801091e:	4619      	mov	r1, r3
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7ff fe67 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 fb16 	bl	8010f58 <SDMMC_GetCmdResp7>
 801092c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801092e:	69fb      	ldr	r3, [r7, #28]
}
 8010930:	4618      	mov	r0, r3
 8010932:	3720      	adds	r7, #32
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b088      	sub	sp, #32
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010946:	2337      	movs	r3, #55	; 0x37
 8010948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801094a:	2340      	movs	r3, #64	; 0x40
 801094c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801094e:	2300      	movs	r3, #0
 8010950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010958:	f107 0308 	add.w	r3, r7, #8
 801095c:	4619      	mov	r1, r3
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f7ff fe48 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010964:	f241 3288 	movw	r2, #5000	; 0x1388
 8010968:	2137      	movs	r1, #55	; 0x37
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 f914 	bl	8010b98 <SDMMC_GetCmdResp1>
 8010970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010972:	69fb      	ldr	r3, [r7, #28]
}
 8010974:	4618      	mov	r0, r3
 8010976:	3720      	adds	r7, #32
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b088      	sub	sp, #32
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801098c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010990:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010992:	2329      	movs	r3, #41	; 0x29
 8010994:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010996:	2340      	movs	r3, #64	; 0x40
 8010998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801099a:	2300      	movs	r3, #0
 801099c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109a4:	f107 0308 	add.w	r3, r7, #8
 80109a8:	4619      	mov	r1, r3
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f7ff fe22 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fa23 	bl	8010dfc <SDMMC_GetCmdResp3>
 80109b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109b8:	69fb      	ldr	r3, [r7, #28]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3720      	adds	r7, #32
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}

080109c2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80109c2:	b580      	push	{r7, lr}
 80109c4:	b088      	sub	sp, #32
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
 80109ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80109d0:	2306      	movs	r3, #6
 80109d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109d4:	2340      	movs	r3, #64	; 0x40
 80109d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109d8:	2300      	movs	r3, #0
 80109da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109e2:	f107 0308 	add.w	r3, r7, #8
 80109e6:	4619      	mov	r1, r3
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7ff fe03 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80109ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80109f2:	2106      	movs	r1, #6
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 f8cf 	bl	8010b98 <SDMMC_GetCmdResp1>
 80109fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109fc:	69fb      	ldr	r3, [r7, #28]
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3720      	adds	r7, #32
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b088      	sub	sp, #32
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010a12:	2333      	movs	r3, #51	; 0x33
 8010a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a16:	2340      	movs	r3, #64	; 0x40
 8010a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a24:	f107 0308 	add.w	r3, r7, #8
 8010a28:	4619      	mov	r1, r3
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff fde2 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a34:	2133      	movs	r1, #51	; 0x33
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f000 f8ae 	bl	8010b98 <SDMMC_GetCmdResp1>
 8010a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a3e:	69fb      	ldr	r3, [r7, #28]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3720      	adds	r7, #32
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b088      	sub	sp, #32
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010a50:	2300      	movs	r3, #0
 8010a52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010a54:	2302      	movs	r3, #2
 8010a56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010a58:	23c0      	movs	r3, #192	; 0xc0
 8010a5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a66:	f107 0308 	add.w	r3, r7, #8
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7ff fdc1 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 f97c 	bl	8010d70 <SDMMC_GetCmdResp2>
 8010a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a7a:	69fb      	ldr	r3, [r7, #28]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3720      	adds	r7, #32
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b088      	sub	sp, #32
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010a92:	2309      	movs	r3, #9
 8010a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010a96:	23c0      	movs	r3, #192	; 0xc0
 8010a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010aa4:	f107 0308 	add.w	r3, r7, #8
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff fda2 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 f95d 	bl	8010d70 <SDMMC_GetCmdResp2>
 8010ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ab8:	69fb      	ldr	r3, [r7, #28]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3720      	adds	r7, #32
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b088      	sub	sp, #32
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
 8010aca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010acc:	2300      	movs	r3, #0
 8010ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010ad0:	2303      	movs	r3, #3
 8010ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ad4:	2340      	movs	r3, #64	; 0x40
 8010ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ae0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ae2:	f107 0308 	add.w	r3, r7, #8
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7ff fd83 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010aee:	683a      	ldr	r2, [r7, #0]
 8010af0:	2103      	movs	r1, #3
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 f9bc 	bl	8010e70 <SDMMC_GetCmdResp6>
 8010af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010afa:	69fb      	ldr	r3, [r7, #28]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3720      	adds	r7, #32
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b088      	sub	sp, #32
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010b12:	230d      	movs	r3, #13
 8010b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b16:	2340      	movs	r3, #64	; 0x40
 8010b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b24:	f107 0308 	add.w	r3, r7, #8
 8010b28:	4619      	mov	r1, r3
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f7ff fd62 	bl	80105f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b34:	210d      	movs	r1, #13
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 f82e 	bl	8010b98 <SDMMC_GetCmdResp1>
 8010b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b3e:	69fb      	ldr	r3, [r7, #28]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3720      	adds	r7, #32
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010b48:	b490      	push	{r4, r7}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b50:	4b0f      	ldr	r3, [pc, #60]	; (8010b90 <SDMMC_GetCmdError+0x48>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4a0f      	ldr	r2, [pc, #60]	; (8010b94 <SDMMC_GetCmdError+0x4c>)
 8010b56:	fba2 2303 	umull	r2, r3, r2, r3
 8010b5a:	0a5b      	lsrs	r3, r3, #9
 8010b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b64:	4623      	mov	r3, r4
 8010b66:	1e5c      	subs	r4, r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d102      	bne.n	8010b72 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b70:	e009      	b.n	8010b86 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d0f2      	beq.n	8010b64 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	22c5      	movs	r2, #197	; 0xc5
 8010b82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010b84:	2300      	movs	r3, #0
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bc90      	pop	{r4, r7}
 8010b8e:	4770      	bx	lr
 8010b90:	20000000 	.word	0x20000000
 8010b94:	10624dd3 	.word	0x10624dd3

08010b98 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010b98:	b590      	push	{r4, r7, lr}
 8010b9a:	b087      	sub	sp, #28
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	607a      	str	r2, [r7, #4]
 8010ba4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010ba6:	4b6f      	ldr	r3, [pc, #444]	; (8010d64 <SDMMC_GetCmdResp1+0x1cc>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4a6f      	ldr	r2, [pc, #444]	; (8010d68 <SDMMC_GetCmdResp1+0x1d0>)
 8010bac:	fba2 2303 	umull	r2, r3, r2, r3
 8010bb0:	0a5b      	lsrs	r3, r3, #9
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010bb8:	4623      	mov	r3, r4
 8010bba:	1e5c      	subs	r4, r3, #1
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d102      	bne.n	8010bc6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bc4:	e0c9      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bca:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d0f0      	beq.n	8010bb8 <SDMMC_GetCmdResp1+0x20>
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d1eb      	bne.n	8010bb8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be4:	f003 0304 	and.w	r3, r3, #4
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d004      	beq.n	8010bf6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2204      	movs	r2, #4
 8010bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bf2:	2304      	movs	r3, #4
 8010bf4:	e0b1      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfa:	f003 0301 	and.w	r3, r3, #1
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d004      	beq.n	8010c0c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2201      	movs	r2, #1
 8010c06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e0a6      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	22c5      	movs	r2, #197	; 0xc5
 8010c10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f7ff fd18 	bl	8010648 <SDIO_GetCommandResponse>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	7afb      	ldrb	r3, [r7, #11]
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d001      	beq.n	8010c26 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c22:	2301      	movs	r3, #1
 8010c24:	e099      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010c26:	2100      	movs	r1, #0
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7ff fd1a 	bl	8010662 <SDIO_GetResponse>
 8010c2e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010c30:	693a      	ldr	r2, [r7, #16]
 8010c32:	4b4e      	ldr	r3, [pc, #312]	; (8010d6c <SDMMC_GetCmdResp1+0x1d4>)
 8010c34:	4013      	ands	r3, r2
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	e08d      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	da02      	bge.n	8010c4a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010c44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010c48:	e087      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d001      	beq.n	8010c58 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010c54:	2340      	movs	r3, #64	; 0x40
 8010c56:	e080      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010c62:	2380      	movs	r3, #128	; 0x80
 8010c64:	e079      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d002      	beq.n	8010c76 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c74:	e071      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c84:	e069      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d002      	beq.n	8010c96 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c94:	e061      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d002      	beq.n	8010ca6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ca4:	e059      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cb4:	e051      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d002      	beq.n	8010cc6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010cc4:	e049      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d002      	beq.n	8010cd6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010cd4:	e041      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ce4:	e039      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d002      	beq.n	8010cf6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010cf4:	e031      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010d00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010d04:	e029      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010d10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010d14:	e021      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010d20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010d24:	e019      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010d30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010d34:	e011      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d002      	beq.n	8010d46 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010d40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010d44:	e009      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	f003 0308 	and.w	r3, r3, #8
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d002      	beq.n	8010d56 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010d50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010d54:	e001      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	371c      	adds	r7, #28
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd90      	pop	{r4, r7, pc}
 8010d62:	bf00      	nop
 8010d64:	20000000 	.word	0x20000000
 8010d68:	10624dd3 	.word	0x10624dd3
 8010d6c:	fdffe008 	.word	0xfdffe008

08010d70 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010d70:	b490      	push	{r4, r7}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d78:	4b1e      	ldr	r3, [pc, #120]	; (8010df4 <SDMMC_GetCmdResp2+0x84>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a1e      	ldr	r2, [pc, #120]	; (8010df8 <SDMMC_GetCmdResp2+0x88>)
 8010d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8010d82:	0a5b      	lsrs	r3, r3, #9
 8010d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d8c:	4623      	mov	r3, r4
 8010d8e:	1e5c      	subs	r4, r3, #1
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d102      	bne.n	8010d9a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d98:	e026      	b.n	8010de8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d9e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d0f0      	beq.n	8010d8c <SDMMC_GetCmdResp2+0x1c>
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d1eb      	bne.n	8010d8c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010db8:	f003 0304 	and.w	r3, r3, #4
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d004      	beq.n	8010dca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2204      	movs	r2, #4
 8010dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010dc6:	2304      	movs	r3, #4
 8010dc8:	e00e      	b.n	8010de8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dce:	f003 0301 	and.w	r3, r3, #1
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d004      	beq.n	8010de0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e003      	b.n	8010de8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	22c5      	movs	r2, #197	; 0xc5
 8010de4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010de6:	2300      	movs	r3, #0
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3710      	adds	r7, #16
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bc90      	pop	{r4, r7}
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	20000000 	.word	0x20000000
 8010df8:	10624dd3 	.word	0x10624dd3

08010dfc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010dfc:	b490      	push	{r4, r7}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e04:	4b18      	ldr	r3, [pc, #96]	; (8010e68 <SDMMC_GetCmdResp3+0x6c>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	4a18      	ldr	r2, [pc, #96]	; (8010e6c <SDMMC_GetCmdResp3+0x70>)
 8010e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8010e0e:	0a5b      	lsrs	r3, r3, #9
 8010e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e18:	4623      	mov	r3, r4
 8010e1a:	1e5c      	subs	r4, r3, #1
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d102      	bne.n	8010e26 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e24:	e01b      	b.n	8010e5e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d0f0      	beq.n	8010e18 <SDMMC_GetCmdResp3+0x1c>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d1eb      	bne.n	8010e18 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e44:	f003 0304 	and.w	r3, r3, #4
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d004      	beq.n	8010e56 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2204      	movs	r2, #4
 8010e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e52:	2304      	movs	r3, #4
 8010e54:	e003      	b.n	8010e5e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	22c5      	movs	r2, #197	; 0xc5
 8010e5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bc90      	pop	{r4, r7}
 8010e66:	4770      	bx	lr
 8010e68:	20000000 	.word	0x20000000
 8010e6c:	10624dd3 	.word	0x10624dd3

08010e70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010e70:	b590      	push	{r4, r7, lr}
 8010e72:	b087      	sub	sp, #28
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	460b      	mov	r3, r1
 8010e7a:	607a      	str	r2, [r7, #4]
 8010e7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e7e:	4b34      	ldr	r3, [pc, #208]	; (8010f50 <SDMMC_GetCmdResp6+0xe0>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4a34      	ldr	r2, [pc, #208]	; (8010f54 <SDMMC_GetCmdResp6+0xe4>)
 8010e84:	fba2 2303 	umull	r2, r3, r2, r3
 8010e88:	0a5b      	lsrs	r3, r3, #9
 8010e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e8e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e92:	4623      	mov	r3, r4
 8010e94:	1e5c      	subs	r4, r3, #1
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d102      	bne.n	8010ea0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e9e:	e052      	b.n	8010f46 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ea4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d0f0      	beq.n	8010e92 <SDMMC_GetCmdResp6+0x22>
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d1eb      	bne.n	8010e92 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ebe:	f003 0304 	and.w	r3, r3, #4
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d004      	beq.n	8010ed0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2204      	movs	r2, #4
 8010eca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ecc:	2304      	movs	r3, #4
 8010ece:	e03a      	b.n	8010f46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed4:	f003 0301 	and.w	r3, r3, #1
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d004      	beq.n	8010ee6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e02f      	b.n	8010f46 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f7ff fbae 	bl	8010648 <SDIO_GetCommandResponse>
 8010eec:	4603      	mov	r3, r0
 8010eee:	461a      	mov	r2, r3
 8010ef0:	7afb      	ldrb	r3, [r7, #11]
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d001      	beq.n	8010efa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	e025      	b.n	8010f46 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	22c5      	movs	r2, #197	; 0xc5
 8010efe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010f00:	2100      	movs	r1, #0
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f7ff fbad 	bl	8010662 <SDIO_GetResponse>
 8010f08:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d106      	bne.n	8010f22 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	0c1b      	lsrs	r3, r3, #16
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	e011      	b.n	8010f46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d002      	beq.n	8010f32 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f30:	e009      	b.n	8010f46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d002      	beq.n	8010f42 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f40:	e001      	b.n	8010f46 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	371c      	adds	r7, #28
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd90      	pop	{r4, r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	20000000 	.word	0x20000000
 8010f54:	10624dd3 	.word	0x10624dd3

08010f58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010f58:	b490      	push	{r4, r7}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f60:	4b21      	ldr	r3, [pc, #132]	; (8010fe8 <SDMMC_GetCmdResp7+0x90>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4a21      	ldr	r2, [pc, #132]	; (8010fec <SDMMC_GetCmdResp7+0x94>)
 8010f66:	fba2 2303 	umull	r2, r3, r2, r3
 8010f6a:	0a5b      	lsrs	r3, r3, #9
 8010f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f74:	4623      	mov	r3, r4
 8010f76:	1e5c      	subs	r4, r3, #1
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d102      	bne.n	8010f82 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f80:	e02c      	b.n	8010fdc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d0f0      	beq.n	8010f74 <SDMMC_GetCmdResp7+0x1c>
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1eb      	bne.n	8010f74 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fa0:	f003 0304 	and.w	r3, r3, #4
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d004      	beq.n	8010fb2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2204      	movs	r2, #4
 8010fac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fae:	2304      	movs	r3, #4
 8010fb0:	e014      	b.n	8010fdc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d004      	beq.n	8010fc8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	e009      	b.n	8010fdc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d002      	beq.n	8010fda <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2240      	movs	r2, #64	; 0x40
 8010fd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010fda:	2300      	movs	r3, #0
  
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bc90      	pop	{r4, r7}
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop
 8010fe8:	20000000 	.word	0x20000000
 8010fec:	10624dd3 	.word	0x10624dd3

08010ff0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010ff4:	4904      	ldr	r1, [pc, #16]	; (8011008 <MX_FATFS_Init+0x18>)
 8010ff6:	4805      	ldr	r0, [pc, #20]	; (801100c <MX_FATFS_Init+0x1c>)
 8010ff8:	f003 fb9c 	bl	8014734 <FATFS_LinkDriver>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	461a      	mov	r2, r3
 8011000:	4b03      	ldr	r3, [pc, #12]	; (8011010 <MX_FATFS_Init+0x20>)
 8011002:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011004:	bf00      	nop
 8011006:	bd80      	pop	{r7, pc}
 8011008:	2004ab20 	.word	0x2004ab20
 801100c:	0801a098 	.word	0x0801a098
 8011010:	2004ab1c 	.word	0x2004ab1c

08011014 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801101a:	2300      	movs	r3, #0
 801101c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801101e:	f000 f896 	bl	801114e <BSP_SD_IsDetected>
 8011022:	4603      	mov	r3, r0
 8011024:	2b01      	cmp	r3, #1
 8011026:	d001      	beq.n	801102c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011028:	2301      	movs	r3, #1
 801102a:	e012      	b.n	8011052 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801102c:	480b      	ldr	r0, [pc, #44]	; (801105c <BSP_SD_Init+0x48>)
 801102e:	f7fb ffa5 	bl	800cf7c <HAL_SD_Init>
 8011032:	4603      	mov	r3, r0
 8011034:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011036:	79fb      	ldrb	r3, [r7, #7]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d109      	bne.n	8011050 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011040:	4806      	ldr	r0, [pc, #24]	; (801105c <BSP_SD_Init+0x48>)
 8011042:	f7fc fd4f 	bl	800dae4 <HAL_SD_ConfigWideBusOperation>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d001      	beq.n	8011050 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801104c:	2301      	movs	r3, #1
 801104e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011050:	79fb      	ldrb	r3, [r7, #7]
}
 8011052:	4618      	mov	r0, r3
 8011054:	3708      	adds	r7, #8
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
 801105a:	bf00      	nop
 801105c:	2004a91c 	.word	0x2004a91c

08011060 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b086      	sub	sp, #24
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801106c:	2300      	movs	r3, #0
 801106e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	68ba      	ldr	r2, [r7, #8]
 8011074:	68f9      	ldr	r1, [r7, #12]
 8011076:	4806      	ldr	r0, [pc, #24]	; (8011090 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011078:	f7fc f810 	bl	800d09c <HAL_SD_ReadBlocks_DMA>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d001      	beq.n	8011086 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011082:	2301      	movs	r3, #1
 8011084:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011086:	7dfb      	ldrb	r3, [r7, #23]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3718      	adds	r7, #24
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	2004a91c 	.word	0x2004a91c

08011094 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b086      	sub	sp, #24
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80110a0:	2300      	movs	r3, #0
 80110a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	68ba      	ldr	r2, [r7, #8]
 80110a8:	68f9      	ldr	r1, [r7, #12]
 80110aa:	4806      	ldr	r0, [pc, #24]	; (80110c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80110ac:	f7fc f8de 	bl	800d26c <HAL_SD_WriteBlocks_DMA>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d001      	beq.n	80110ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80110b6:	2301      	movs	r3, #1
 80110b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80110ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3718      	adds	r7, #24
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	2004a91c 	.word	0x2004a91c

080110c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80110cc:	4805      	ldr	r0, [pc, #20]	; (80110e4 <BSP_SD_GetCardState+0x1c>)
 80110ce:	f7fc fd85 	bl	800dbdc <HAL_SD_GetCardState>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b04      	cmp	r3, #4
 80110d6:	bf14      	ite	ne
 80110d8:	2301      	movne	r3, #1
 80110da:	2300      	moveq	r3, #0
 80110dc:	b2db      	uxtb	r3, r3
}
 80110de:	4618      	mov	r0, r3
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	2004a91c 	.word	0x2004a91c

080110e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80110f0:	6879      	ldr	r1, [r7, #4]
 80110f2:	4803      	ldr	r0, [pc, #12]	; (8011100 <BSP_SD_GetCardInfo+0x18>)
 80110f4:	f7fc fcca 	bl	800da8c <HAL_SD_GetCardInfo>
}
 80110f8:	bf00      	nop
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}
 8011100:	2004a91c 	.word	0x2004a91c

08011104 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801110c:	f000 f818 	bl	8011140 <BSP_SD_AbortCallback>
}
 8011110:	bf00      	nop
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011120:	f000 f9a8 	bl	8011474 <BSP_SD_WriteCpltCallback>
}
 8011124:	bf00      	nop
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011134:	f000 f9aa 	bl	801148c <BSP_SD_ReadCpltCallback>
}
 8011138:	bf00      	nop
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011140:	b480      	push	{r7}
 8011142:	af00      	add	r7, sp, #0

}
 8011144:	bf00      	nop
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr

0801114e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b082      	sub	sp, #8
 8011152:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011154:	2301      	movs	r3, #1
 8011156:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011158:	f000 f80c 	bl	8011174 <BSP_PlatformIsDetected>
 801115c:	4603      	mov	r3, r0
 801115e:	2b00      	cmp	r3, #0
 8011160:	d101      	bne.n	8011166 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011162:	2300      	movs	r3, #0
 8011164:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011166:	79fb      	ldrb	r3, [r7, #7]
 8011168:	b2db      	uxtb	r3, r3
}
 801116a:	4618      	mov	r0, r3
 801116c:	3708      	adds	r7, #8
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
	...

08011174 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801117a:	2301      	movs	r3, #1
 801117c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801117e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011182:	4806      	ldr	r0, [pc, #24]	; (801119c <BSP_PlatformIsDetected+0x28>)
 8011184:	f7fa f87e 	bl	800b284 <HAL_GPIO_ReadPin>
 8011188:	4603      	mov	r3, r0
 801118a:	2b00      	cmp	r3, #0
 801118c:	d001      	beq.n	8011192 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801118e:	2300      	movs	r3, #0
 8011190:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011192:	79fb      	ldrb	r3, [r7, #7]
}
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	40020000 	.word	0x40020000

080111a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80111a8:	f7f8 fde2 	bl	8009d70 <HAL_GetTick>
 80111ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80111ae:	e006      	b.n	80111be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80111b0:	f7ff ff8a 	bl	80110c8 <BSP_SD_GetCardState>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d101      	bne.n	80111be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	e009      	b.n	80111d2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80111be:	f7f8 fdd7 	bl	8009d70 <HAL_GetTick>
 80111c2:	4602      	mov	r2, r0
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d8f0      	bhi.n	80111b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80111ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3710      	adds	r7, #16
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
	...

080111dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	4603      	mov	r3, r0
 80111e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80111e6:	4b0b      	ldr	r3, [pc, #44]	; (8011214 <SD_CheckStatus+0x38>)
 80111e8:	2201      	movs	r2, #1
 80111ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80111ec:	f7ff ff6c 	bl	80110c8 <BSP_SD_GetCardState>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d107      	bne.n	8011206 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80111f6:	4b07      	ldr	r3, [pc, #28]	; (8011214 <SD_CheckStatus+0x38>)
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	f023 0301 	bic.w	r3, r3, #1
 8011200:	b2da      	uxtb	r2, r3
 8011202:	4b04      	ldr	r3, [pc, #16]	; (8011214 <SD_CheckStatus+0x38>)
 8011204:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011206:	4b03      	ldr	r3, [pc, #12]	; (8011214 <SD_CheckStatus+0x38>)
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	b2db      	uxtb	r3, r3
}
 801120c:	4618      	mov	r0, r3
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	20000009 	.word	0x20000009

08011218 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	4603      	mov	r3, r0
 8011220:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011222:	f7ff fef7 	bl	8011014 <BSP_SD_Init>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d107      	bne.n	801123c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801122c:	79fb      	ldrb	r3, [r7, #7]
 801122e:	4618      	mov	r0, r3
 8011230:	f7ff ffd4 	bl	80111dc <SD_CheckStatus>
 8011234:	4603      	mov	r3, r0
 8011236:	461a      	mov	r2, r3
 8011238:	4b04      	ldr	r3, [pc, #16]	; (801124c <SD_initialize+0x34>)
 801123a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801123c:	4b03      	ldr	r3, [pc, #12]	; (801124c <SD_initialize+0x34>)
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	b2db      	uxtb	r3, r3
}
 8011242:	4618      	mov	r0, r3
 8011244:	3708      	adds	r7, #8
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	20000009 	.word	0x20000009

08011250 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	4603      	mov	r3, r0
 8011258:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801125a:	79fb      	ldrb	r3, [r7, #7]
 801125c:	4618      	mov	r0, r3
 801125e:	f7ff ffbd 	bl	80111dc <SD_CheckStatus>
 8011262:	4603      	mov	r3, r0
}
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b086      	sub	sp, #24
 8011270:	af00      	add	r7, sp, #0
 8011272:	60b9      	str	r1, [r7, #8]
 8011274:	607a      	str	r2, [r7, #4]
 8011276:	603b      	str	r3, [r7, #0]
 8011278:	4603      	mov	r3, r0
 801127a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801127c:	2301      	movs	r3, #1
 801127e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011280:	f247 5030 	movw	r0, #30000	; 0x7530
 8011284:	f7ff ff8c 	bl	80111a0 <SD_CheckStatusWithTimeout>
 8011288:	4603      	mov	r3, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	da01      	bge.n	8011292 <SD_read+0x26>
  {
    return res;
 801128e:	7dfb      	ldrb	r3, [r7, #23]
 8011290:	e03b      	b.n	801130a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011292:	683a      	ldr	r2, [r7, #0]
 8011294:	6879      	ldr	r1, [r7, #4]
 8011296:	68b8      	ldr	r0, [r7, #8]
 8011298:	f7ff fee2 	bl	8011060 <BSP_SD_ReadBlocks_DMA>
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d132      	bne.n	8011308 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80112a2:	4b1c      	ldr	r3, [pc, #112]	; (8011314 <SD_read+0xa8>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80112a8:	f7f8 fd62 	bl	8009d70 <HAL_GetTick>
 80112ac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80112ae:	bf00      	nop
 80112b0:	4b18      	ldr	r3, [pc, #96]	; (8011314 <SD_read+0xa8>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d108      	bne.n	80112ca <SD_read+0x5e>
 80112b8:	f7f8 fd5a 	bl	8009d70 <HAL_GetTick>
 80112bc:	4602      	mov	r2, r0
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	f247 522f 	movw	r2, #29999	; 0x752f
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d9f2      	bls.n	80112b0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80112ca:	4b12      	ldr	r3, [pc, #72]	; (8011314 <SD_read+0xa8>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d102      	bne.n	80112d8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80112d2:	2301      	movs	r3, #1
 80112d4:	75fb      	strb	r3, [r7, #23]
 80112d6:	e017      	b.n	8011308 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80112d8:	4b0e      	ldr	r3, [pc, #56]	; (8011314 <SD_read+0xa8>)
 80112da:	2200      	movs	r2, #0
 80112dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80112de:	f7f8 fd47 	bl	8009d70 <HAL_GetTick>
 80112e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112e4:	e007      	b.n	80112f6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80112e6:	f7ff feef 	bl	80110c8 <BSP_SD_GetCardState>
 80112ea:	4603      	mov	r3, r0
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d102      	bne.n	80112f6 <SD_read+0x8a>
          {
            res = RES_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80112f4:	e008      	b.n	8011308 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112f6:	f7f8 fd3b 	bl	8009d70 <HAL_GetTick>
 80112fa:	4602      	mov	r2, r0
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	1ad3      	subs	r3, r2, r3
 8011300:	f247 522f 	movw	r2, #29999	; 0x752f
 8011304:	4293      	cmp	r3, r2
 8011306:	d9ee      	bls.n	80112e6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011308:	7dfb      	ldrb	r3, [r7, #23]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3718      	adds	r7, #24
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	200481b8 	.word	0x200481b8

08011318 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	60b9      	str	r1, [r7, #8]
 8011320:	607a      	str	r2, [r7, #4]
 8011322:	603b      	str	r3, [r7, #0]
 8011324:	4603      	mov	r3, r0
 8011326:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011328:	2301      	movs	r3, #1
 801132a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801132c:	4b24      	ldr	r3, [pc, #144]	; (80113c0 <SD_write+0xa8>)
 801132e:	2200      	movs	r2, #0
 8011330:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011332:	f247 5030 	movw	r0, #30000	; 0x7530
 8011336:	f7ff ff33 	bl	80111a0 <SD_CheckStatusWithTimeout>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	da01      	bge.n	8011344 <SD_write+0x2c>
  {
    return res;
 8011340:	7dfb      	ldrb	r3, [r7, #23]
 8011342:	e038      	b.n	80113b6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	6879      	ldr	r1, [r7, #4]
 8011348:	68b8      	ldr	r0, [r7, #8]
 801134a:	f7ff fea3 	bl	8011094 <BSP_SD_WriteBlocks_DMA>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d12f      	bne.n	80113b4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011354:	f7f8 fd0c 	bl	8009d70 <HAL_GetTick>
 8011358:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801135a:	bf00      	nop
 801135c:	4b18      	ldr	r3, [pc, #96]	; (80113c0 <SD_write+0xa8>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d108      	bne.n	8011376 <SD_write+0x5e>
 8011364:	f7f8 fd04 	bl	8009d70 <HAL_GetTick>
 8011368:	4602      	mov	r2, r0
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	1ad3      	subs	r3, r2, r3
 801136e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011372:	4293      	cmp	r3, r2
 8011374:	d9f2      	bls.n	801135c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011376:	4b12      	ldr	r3, [pc, #72]	; (80113c0 <SD_write+0xa8>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d102      	bne.n	8011384 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801137e:	2301      	movs	r3, #1
 8011380:	75fb      	strb	r3, [r7, #23]
 8011382:	e017      	b.n	80113b4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011384:	4b0e      	ldr	r3, [pc, #56]	; (80113c0 <SD_write+0xa8>)
 8011386:	2200      	movs	r2, #0
 8011388:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801138a:	f7f8 fcf1 	bl	8009d70 <HAL_GetTick>
 801138e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011390:	e007      	b.n	80113a2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011392:	f7ff fe99 	bl	80110c8 <BSP_SD_GetCardState>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d102      	bne.n	80113a2 <SD_write+0x8a>
          {
            res = RES_OK;
 801139c:	2300      	movs	r3, #0
 801139e:	75fb      	strb	r3, [r7, #23]
            break;
 80113a0:	e008      	b.n	80113b4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80113a2:	f7f8 fce5 	bl	8009d70 <HAL_GetTick>
 80113a6:	4602      	mov	r2, r0
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	1ad3      	subs	r3, r2, r3
 80113ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d9ee      	bls.n	8011392 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80113b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3718      	adds	r7, #24
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	200481b4 	.word	0x200481b4

080113c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08c      	sub	sp, #48	; 0x30
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	4603      	mov	r3, r0
 80113cc:	603a      	str	r2, [r7, #0]
 80113ce:	71fb      	strb	r3, [r7, #7]
 80113d0:	460b      	mov	r3, r1
 80113d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80113d4:	2301      	movs	r3, #1
 80113d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80113da:	4b25      	ldr	r3, [pc, #148]	; (8011470 <SD_ioctl+0xac>)
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	b2db      	uxtb	r3, r3
 80113e0:	f003 0301 	and.w	r3, r3, #1
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d001      	beq.n	80113ec <SD_ioctl+0x28>
 80113e8:	2303      	movs	r3, #3
 80113ea:	e03c      	b.n	8011466 <SD_ioctl+0xa2>

  switch (cmd)
 80113ec:	79bb      	ldrb	r3, [r7, #6]
 80113ee:	2b03      	cmp	r3, #3
 80113f0:	d834      	bhi.n	801145c <SD_ioctl+0x98>
 80113f2:	a201      	add	r2, pc, #4	; (adr r2, 80113f8 <SD_ioctl+0x34>)
 80113f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f8:	08011409 	.word	0x08011409
 80113fc:	08011411 	.word	0x08011411
 8011400:	08011429 	.word	0x08011429
 8011404:	08011443 	.word	0x08011443
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011408:	2300      	movs	r3, #0
 801140a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801140e:	e028      	b.n	8011462 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011410:	f107 030c 	add.w	r3, r7, #12
 8011414:	4618      	mov	r0, r3
 8011416:	f7ff fe67 	bl	80110e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011420:	2300      	movs	r3, #0
 8011422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011426:	e01c      	b.n	8011462 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011428:	f107 030c 	add.w	r3, r7, #12
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff fe5b 	bl	80110e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011434:	b29a      	uxth	r2, r3
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801143a:	2300      	movs	r3, #0
 801143c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011440:	e00f      	b.n	8011462 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011442:	f107 030c 	add.w	r3, r7, #12
 8011446:	4618      	mov	r0, r3
 8011448:	f7ff fe4e 	bl	80110e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144e:	0a5a      	lsrs	r2, r3, #9
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011454:	2300      	movs	r3, #0
 8011456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801145a:	e002      	b.n	8011462 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801145c:	2304      	movs	r3, #4
 801145e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011466:	4618      	mov	r0, r3
 8011468:	3730      	adds	r7, #48	; 0x30
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	20000009 	.word	0x20000009

08011474 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011474:	b480      	push	{r7}
 8011476:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011478:	4b03      	ldr	r3, [pc, #12]	; (8011488 <BSP_SD_WriteCpltCallback+0x14>)
 801147a:	2201      	movs	r2, #1
 801147c:	601a      	str	r2, [r3, #0]
}
 801147e:	bf00      	nop
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr
 8011488:	200481b4 	.word	0x200481b4

0801148c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801148c:	b480      	push	{r7}
 801148e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011490:	4b03      	ldr	r3, [pc, #12]	; (80114a0 <BSP_SD_ReadCpltCallback+0x14>)
 8011492:	2201      	movs	r2, #1
 8011494:	601a      	str	r2, [r3, #0]
}
 8011496:	bf00      	nop
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr
 80114a0:	200481b8 	.word	0x200481b8

080114a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b084      	sub	sp, #16
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	4603      	mov	r3, r0
 80114ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80114ae:	79fb      	ldrb	r3, [r7, #7]
 80114b0:	4a08      	ldr	r2, [pc, #32]	; (80114d4 <disk_status+0x30>)
 80114b2:	009b      	lsls	r3, r3, #2
 80114b4:	4413      	add	r3, r2
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	79fa      	ldrb	r2, [r7, #7]
 80114bc:	4905      	ldr	r1, [pc, #20]	; (80114d4 <disk_status+0x30>)
 80114be:	440a      	add	r2, r1
 80114c0:	7a12      	ldrb	r2, [r2, #8]
 80114c2:	4610      	mov	r0, r2
 80114c4:	4798      	blx	r3
 80114c6:	4603      	mov	r3, r0
 80114c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3710      	adds	r7, #16
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	200481e4 	.word	0x200481e4

080114d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	4603      	mov	r3, r0
 80114e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80114e6:	79fb      	ldrb	r3, [r7, #7]
 80114e8:	4a0d      	ldr	r2, [pc, #52]	; (8011520 <disk_initialize+0x48>)
 80114ea:	5cd3      	ldrb	r3, [r2, r3]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d111      	bne.n	8011514 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80114f0:	79fb      	ldrb	r3, [r7, #7]
 80114f2:	4a0b      	ldr	r2, [pc, #44]	; (8011520 <disk_initialize+0x48>)
 80114f4:	2101      	movs	r1, #1
 80114f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80114f8:	79fb      	ldrb	r3, [r7, #7]
 80114fa:	4a09      	ldr	r2, [pc, #36]	; (8011520 <disk_initialize+0x48>)
 80114fc:	009b      	lsls	r3, r3, #2
 80114fe:	4413      	add	r3, r2
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	79fa      	ldrb	r2, [r7, #7]
 8011506:	4906      	ldr	r1, [pc, #24]	; (8011520 <disk_initialize+0x48>)
 8011508:	440a      	add	r2, r1
 801150a:	7a12      	ldrb	r2, [r2, #8]
 801150c:	4610      	mov	r0, r2
 801150e:	4798      	blx	r3
 8011510:	4603      	mov	r3, r0
 8011512:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011514:	7bfb      	ldrb	r3, [r7, #15]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	200481e4 	.word	0x200481e4

08011524 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011524:	b590      	push	{r4, r7, lr}
 8011526:	b087      	sub	sp, #28
 8011528:	af00      	add	r7, sp, #0
 801152a:	60b9      	str	r1, [r7, #8]
 801152c:	607a      	str	r2, [r7, #4]
 801152e:	603b      	str	r3, [r7, #0]
 8011530:	4603      	mov	r3, r0
 8011532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011534:	7bfb      	ldrb	r3, [r7, #15]
 8011536:	4a0a      	ldr	r2, [pc, #40]	; (8011560 <disk_read+0x3c>)
 8011538:	009b      	lsls	r3, r3, #2
 801153a:	4413      	add	r3, r2
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	689c      	ldr	r4, [r3, #8]
 8011540:	7bfb      	ldrb	r3, [r7, #15]
 8011542:	4a07      	ldr	r2, [pc, #28]	; (8011560 <disk_read+0x3c>)
 8011544:	4413      	add	r3, r2
 8011546:	7a18      	ldrb	r0, [r3, #8]
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	68b9      	ldr	r1, [r7, #8]
 801154e:	47a0      	blx	r4
 8011550:	4603      	mov	r3, r0
 8011552:	75fb      	strb	r3, [r7, #23]
  return res;
 8011554:	7dfb      	ldrb	r3, [r7, #23]
}
 8011556:	4618      	mov	r0, r3
 8011558:	371c      	adds	r7, #28
 801155a:	46bd      	mov	sp, r7
 801155c:	bd90      	pop	{r4, r7, pc}
 801155e:	bf00      	nop
 8011560:	200481e4 	.word	0x200481e4

08011564 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011564:	b590      	push	{r4, r7, lr}
 8011566:	b087      	sub	sp, #28
 8011568:	af00      	add	r7, sp, #0
 801156a:	60b9      	str	r1, [r7, #8]
 801156c:	607a      	str	r2, [r7, #4]
 801156e:	603b      	str	r3, [r7, #0]
 8011570:	4603      	mov	r3, r0
 8011572:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011574:	7bfb      	ldrb	r3, [r7, #15]
 8011576:	4a0a      	ldr	r2, [pc, #40]	; (80115a0 <disk_write+0x3c>)
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	4413      	add	r3, r2
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	68dc      	ldr	r4, [r3, #12]
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	4a07      	ldr	r2, [pc, #28]	; (80115a0 <disk_write+0x3c>)
 8011584:	4413      	add	r3, r2
 8011586:	7a18      	ldrb	r0, [r3, #8]
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	68b9      	ldr	r1, [r7, #8]
 801158e:	47a0      	blx	r4
 8011590:	4603      	mov	r3, r0
 8011592:	75fb      	strb	r3, [r7, #23]
  return res;
 8011594:	7dfb      	ldrb	r3, [r7, #23]
}
 8011596:	4618      	mov	r0, r3
 8011598:	371c      	adds	r7, #28
 801159a:	46bd      	mov	sp, r7
 801159c:	bd90      	pop	{r4, r7, pc}
 801159e:	bf00      	nop
 80115a0:	200481e4 	.word	0x200481e4

080115a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	4603      	mov	r3, r0
 80115ac:	603a      	str	r2, [r7, #0]
 80115ae:	71fb      	strb	r3, [r7, #7]
 80115b0:	460b      	mov	r3, r1
 80115b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80115b4:	79fb      	ldrb	r3, [r7, #7]
 80115b6:	4a09      	ldr	r2, [pc, #36]	; (80115dc <disk_ioctl+0x38>)
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	4413      	add	r3, r2
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	691b      	ldr	r3, [r3, #16]
 80115c0:	79fa      	ldrb	r2, [r7, #7]
 80115c2:	4906      	ldr	r1, [pc, #24]	; (80115dc <disk_ioctl+0x38>)
 80115c4:	440a      	add	r2, r1
 80115c6:	7a10      	ldrb	r0, [r2, #8]
 80115c8:	79b9      	ldrb	r1, [r7, #6]
 80115ca:	683a      	ldr	r2, [r7, #0]
 80115cc:	4798      	blx	r3
 80115ce:	4603      	mov	r3, r0
 80115d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80115d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3710      	adds	r7, #16
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	200481e4 	.word	0x200481e4

080115e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80115e0:	b480      	push	{r7}
 80115e2:	b085      	sub	sp, #20
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	3301      	adds	r3, #1
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80115f0:	89fb      	ldrh	r3, [r7, #14]
 80115f2:	021b      	lsls	r3, r3, #8
 80115f4:	b21a      	sxth	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	b21b      	sxth	r3, r3
 80115fc:	4313      	orrs	r3, r2
 80115fe:	b21b      	sxth	r3, r3
 8011600:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011602:	89fb      	ldrh	r3, [r7, #14]
}
 8011604:	4618      	mov	r0, r3
 8011606:	3714      	adds	r7, #20
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr

08011610 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011610:	b480      	push	{r7}
 8011612:	b085      	sub	sp, #20
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	3303      	adds	r3, #3
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	021b      	lsls	r3, r3, #8
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	3202      	adds	r2, #2
 8011628:	7812      	ldrb	r2, [r2, #0]
 801162a:	4313      	orrs	r3, r2
 801162c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	021b      	lsls	r3, r3, #8
 8011632:	687a      	ldr	r2, [r7, #4]
 8011634:	3201      	adds	r2, #1
 8011636:	7812      	ldrb	r2, [r2, #0]
 8011638:	4313      	orrs	r3, r2
 801163a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	021b      	lsls	r3, r3, #8
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	7812      	ldrb	r2, [r2, #0]
 8011644:	4313      	orrs	r3, r2
 8011646:	60fb      	str	r3, [r7, #12]
	return rv;
 8011648:	68fb      	ldr	r3, [r7, #12]
}
 801164a:	4618      	mov	r0, r3
 801164c:	3714      	adds	r7, #20
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr

08011656 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011656:	b480      	push	{r7}
 8011658:	b083      	sub	sp, #12
 801165a:	af00      	add	r7, sp, #0
 801165c:	6078      	str	r0, [r7, #4]
 801165e:	460b      	mov	r3, r1
 8011660:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	1c5a      	adds	r2, r3, #1
 8011666:	607a      	str	r2, [r7, #4]
 8011668:	887a      	ldrh	r2, [r7, #2]
 801166a:	b2d2      	uxtb	r2, r2
 801166c:	701a      	strb	r2, [r3, #0]
 801166e:	887b      	ldrh	r3, [r7, #2]
 8011670:	0a1b      	lsrs	r3, r3, #8
 8011672:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	1c5a      	adds	r2, r3, #1
 8011678:	607a      	str	r2, [r7, #4]
 801167a:	887a      	ldrh	r2, [r7, #2]
 801167c:	b2d2      	uxtb	r2, r2
 801167e:	701a      	strb	r2, [r3, #0]
}
 8011680:	bf00      	nop
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801168c:	b480      	push	{r7}
 801168e:	b083      	sub	sp, #12
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	1c5a      	adds	r2, r3, #1
 801169a:	607a      	str	r2, [r7, #4]
 801169c:	683a      	ldr	r2, [r7, #0]
 801169e:	b2d2      	uxtb	r2, r2
 80116a0:	701a      	strb	r2, [r3, #0]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	0a1b      	lsrs	r3, r3, #8
 80116a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	1c5a      	adds	r2, r3, #1
 80116ac:	607a      	str	r2, [r7, #4]
 80116ae:	683a      	ldr	r2, [r7, #0]
 80116b0:	b2d2      	uxtb	r2, r2
 80116b2:	701a      	strb	r2, [r3, #0]
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	0a1b      	lsrs	r3, r3, #8
 80116b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	1c5a      	adds	r2, r3, #1
 80116be:	607a      	str	r2, [r7, #4]
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	b2d2      	uxtb	r2, r2
 80116c4:	701a      	strb	r2, [r3, #0]
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	0a1b      	lsrs	r3, r3, #8
 80116ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	1c5a      	adds	r2, r3, #1
 80116d0:	607a      	str	r2, [r7, #4]
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	b2d2      	uxtb	r2, r2
 80116d6:	701a      	strb	r2, [r3, #0]
}
 80116d8:	bf00      	nop
 80116da:	370c      	adds	r7, #12
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr

080116e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80116e4:	b480      	push	{r7}
 80116e6:	b087      	sub	sp, #28
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00d      	beq.n	801171a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80116fe:	693a      	ldr	r2, [r7, #16]
 8011700:	1c53      	adds	r3, r2, #1
 8011702:	613b      	str	r3, [r7, #16]
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	1c59      	adds	r1, r3, #1
 8011708:	6179      	str	r1, [r7, #20]
 801170a:	7812      	ldrb	r2, [r2, #0]
 801170c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	3b01      	subs	r3, #1
 8011712:	607b      	str	r3, [r7, #4]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d1f1      	bne.n	80116fe <mem_cpy+0x1a>
	}
}
 801171a:	bf00      	nop
 801171c:	371c      	adds	r7, #28
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr

08011726 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011726:	b480      	push	{r7}
 8011728:	b087      	sub	sp, #28
 801172a:	af00      	add	r7, sp, #0
 801172c:	60f8      	str	r0, [r7, #12]
 801172e:	60b9      	str	r1, [r7, #8]
 8011730:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	1c5a      	adds	r2, r3, #1
 801173a:	617a      	str	r2, [r7, #20]
 801173c:	68ba      	ldr	r2, [r7, #8]
 801173e:	b2d2      	uxtb	r2, r2
 8011740:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	3b01      	subs	r3, #1
 8011746:	607b      	str	r3, [r7, #4]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1f3      	bne.n	8011736 <mem_set+0x10>
}
 801174e:	bf00      	nop
 8011750:	371c      	adds	r7, #28
 8011752:	46bd      	mov	sp, r7
 8011754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011758:	4770      	bx	lr

0801175a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801175a:	b480      	push	{r7}
 801175c:	b089      	sub	sp, #36	; 0x24
 801175e:	af00      	add	r7, sp, #0
 8011760:	60f8      	str	r0, [r7, #12]
 8011762:	60b9      	str	r1, [r7, #8]
 8011764:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	61fb      	str	r3, [r7, #28]
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	1c5a      	adds	r2, r3, #1
 8011776:	61fa      	str	r2, [r7, #28]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	4619      	mov	r1, r3
 801177c:	69bb      	ldr	r3, [r7, #24]
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	61ba      	str	r2, [r7, #24]
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	1acb      	subs	r3, r1, r3
 8011786:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	3b01      	subs	r3, #1
 801178c:	607b      	str	r3, [r7, #4]
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <mem_cmp+0x40>
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d0eb      	beq.n	8011772 <mem_cmp+0x18>

	return r;
 801179a:	697b      	ldr	r3, [r7, #20]
}
 801179c:	4618      	mov	r0, r3
 801179e:	3724      	adds	r7, #36	; 0x24
 80117a0:	46bd      	mov	sp, r7
 80117a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a6:	4770      	bx	lr

080117a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80117b2:	e002      	b.n	80117ba <chk_chr+0x12>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	3301      	adds	r3, #1
 80117b8:	607b      	str	r3, [r7, #4]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d005      	beq.n	80117ce <chk_chr+0x26>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	461a      	mov	r2, r3
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d1f2      	bne.n	80117b4 <chk_chr+0xc>
	return *str;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	781b      	ldrb	r3, [r3, #0]
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	370c      	adds	r7, #12
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr
	...

080117e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b085      	sub	sp, #20
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80117ea:	2300      	movs	r3, #0
 80117ec:	60bb      	str	r3, [r7, #8]
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	60fb      	str	r3, [r7, #12]
 80117f2:	e029      	b.n	8011848 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80117f4:	4a27      	ldr	r2, [pc, #156]	; (8011894 <chk_lock+0xb4>)
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	011b      	lsls	r3, r3, #4
 80117fa:	4413      	add	r3, r2
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d01d      	beq.n	801183e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011802:	4a24      	ldr	r2, [pc, #144]	; (8011894 <chk_lock+0xb4>)
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	011b      	lsls	r3, r3, #4
 8011808:	4413      	add	r3, r2
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	429a      	cmp	r2, r3
 8011812:	d116      	bne.n	8011842 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011814:	4a1f      	ldr	r2, [pc, #124]	; (8011894 <chk_lock+0xb4>)
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	011b      	lsls	r3, r3, #4
 801181a:	4413      	add	r3, r2
 801181c:	3304      	adds	r3, #4
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011824:	429a      	cmp	r2, r3
 8011826:	d10c      	bne.n	8011842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011828:	4a1a      	ldr	r2, [pc, #104]	; (8011894 <chk_lock+0xb4>)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	011b      	lsls	r3, r3, #4
 801182e:	4413      	add	r3, r2
 8011830:	3308      	adds	r3, #8
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011838:	429a      	cmp	r2, r3
 801183a:	d102      	bne.n	8011842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801183c:	e007      	b.n	801184e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801183e:	2301      	movs	r3, #1
 8011840:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	3301      	adds	r3, #1
 8011846:	60fb      	str	r3, [r7, #12]
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	2b01      	cmp	r3, #1
 801184c:	d9d2      	bls.n	80117f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	2b02      	cmp	r3, #2
 8011852:	d109      	bne.n	8011868 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d102      	bne.n	8011860 <chk_lock+0x80>
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	2b02      	cmp	r3, #2
 801185e:	d101      	bne.n	8011864 <chk_lock+0x84>
 8011860:	2300      	movs	r3, #0
 8011862:	e010      	b.n	8011886 <chk_lock+0xa6>
 8011864:	2312      	movs	r3, #18
 8011866:	e00e      	b.n	8011886 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d108      	bne.n	8011880 <chk_lock+0xa0>
 801186e:	4a09      	ldr	r2, [pc, #36]	; (8011894 <chk_lock+0xb4>)
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	011b      	lsls	r3, r3, #4
 8011874:	4413      	add	r3, r2
 8011876:	330c      	adds	r3, #12
 8011878:	881b      	ldrh	r3, [r3, #0]
 801187a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801187e:	d101      	bne.n	8011884 <chk_lock+0xa4>
 8011880:	2310      	movs	r3, #16
 8011882:	e000      	b.n	8011886 <chk_lock+0xa6>
 8011884:	2300      	movs	r3, #0
}
 8011886:	4618      	mov	r0, r3
 8011888:	3714      	adds	r7, #20
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop
 8011894:	200481c4 	.word	0x200481c4

08011898 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011898:	b480      	push	{r7}
 801189a:	b083      	sub	sp, #12
 801189c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801189e:	2300      	movs	r3, #0
 80118a0:	607b      	str	r3, [r7, #4]
 80118a2:	e002      	b.n	80118aa <enq_lock+0x12>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3301      	adds	r3, #1
 80118a8:	607b      	str	r3, [r7, #4]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d806      	bhi.n	80118be <enq_lock+0x26>
 80118b0:	4a09      	ldr	r2, [pc, #36]	; (80118d8 <enq_lock+0x40>)
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	011b      	lsls	r3, r3, #4
 80118b6:	4413      	add	r3, r2
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d1f2      	bne.n	80118a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2b02      	cmp	r3, #2
 80118c2:	bf14      	ite	ne
 80118c4:	2301      	movne	r3, #1
 80118c6:	2300      	moveq	r3, #0
 80118c8:	b2db      	uxtb	r3, r3
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr
 80118d6:	bf00      	nop
 80118d8:	200481c4 	.word	0x200481c4

080118dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80118dc:	b480      	push	{r7}
 80118de:	b085      	sub	sp, #20
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80118e6:	2300      	movs	r3, #0
 80118e8:	60fb      	str	r3, [r7, #12]
 80118ea:	e01f      	b.n	801192c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80118ec:	4a41      	ldr	r2, [pc, #260]	; (80119f4 <inc_lock+0x118>)
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	011b      	lsls	r3, r3, #4
 80118f2:	4413      	add	r3, r2
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d113      	bne.n	8011926 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80118fe:	4a3d      	ldr	r2, [pc, #244]	; (80119f4 <inc_lock+0x118>)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	011b      	lsls	r3, r3, #4
 8011904:	4413      	add	r3, r2
 8011906:	3304      	adds	r3, #4
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801190e:	429a      	cmp	r2, r3
 8011910:	d109      	bne.n	8011926 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011912:	4a38      	ldr	r2, [pc, #224]	; (80119f4 <inc_lock+0x118>)
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	011b      	lsls	r3, r3, #4
 8011918:	4413      	add	r3, r2
 801191a:	3308      	adds	r3, #8
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011922:	429a      	cmp	r2, r3
 8011924:	d006      	beq.n	8011934 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	3301      	adds	r3, #1
 801192a:	60fb      	str	r3, [r7, #12]
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	2b01      	cmp	r3, #1
 8011930:	d9dc      	bls.n	80118ec <inc_lock+0x10>
 8011932:	e000      	b.n	8011936 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011934:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2b02      	cmp	r3, #2
 801193a:	d132      	bne.n	80119a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801193c:	2300      	movs	r3, #0
 801193e:	60fb      	str	r3, [r7, #12]
 8011940:	e002      	b.n	8011948 <inc_lock+0x6c>
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	3301      	adds	r3, #1
 8011946:	60fb      	str	r3, [r7, #12]
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b01      	cmp	r3, #1
 801194c:	d806      	bhi.n	801195c <inc_lock+0x80>
 801194e:	4a29      	ldr	r2, [pc, #164]	; (80119f4 <inc_lock+0x118>)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	011b      	lsls	r3, r3, #4
 8011954:	4413      	add	r3, r2
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d1f2      	bne.n	8011942 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b02      	cmp	r3, #2
 8011960:	d101      	bne.n	8011966 <inc_lock+0x8a>
 8011962:	2300      	movs	r3, #0
 8011964:	e040      	b.n	80119e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	4922      	ldr	r1, [pc, #136]	; (80119f4 <inc_lock+0x118>)
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	011b      	lsls	r3, r3, #4
 8011970:	440b      	add	r3, r1
 8011972:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	689a      	ldr	r2, [r3, #8]
 8011978:	491e      	ldr	r1, [pc, #120]	; (80119f4 <inc_lock+0x118>)
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	011b      	lsls	r3, r3, #4
 801197e:	440b      	add	r3, r1
 8011980:	3304      	adds	r3, #4
 8011982:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	695a      	ldr	r2, [r3, #20]
 8011988:	491a      	ldr	r1, [pc, #104]	; (80119f4 <inc_lock+0x118>)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	011b      	lsls	r3, r3, #4
 801198e:	440b      	add	r3, r1
 8011990:	3308      	adds	r3, #8
 8011992:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011994:	4a17      	ldr	r2, [pc, #92]	; (80119f4 <inc_lock+0x118>)
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	011b      	lsls	r3, r3, #4
 801199a:	4413      	add	r3, r2
 801199c:	330c      	adds	r3, #12
 801199e:	2200      	movs	r2, #0
 80119a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d009      	beq.n	80119bc <inc_lock+0xe0>
 80119a8:	4a12      	ldr	r2, [pc, #72]	; (80119f4 <inc_lock+0x118>)
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	011b      	lsls	r3, r3, #4
 80119ae:	4413      	add	r3, r2
 80119b0:	330c      	adds	r3, #12
 80119b2:	881b      	ldrh	r3, [r3, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d001      	beq.n	80119bc <inc_lock+0xe0>
 80119b8:	2300      	movs	r3, #0
 80119ba:	e015      	b.n	80119e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d108      	bne.n	80119d4 <inc_lock+0xf8>
 80119c2:	4a0c      	ldr	r2, [pc, #48]	; (80119f4 <inc_lock+0x118>)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	011b      	lsls	r3, r3, #4
 80119c8:	4413      	add	r3, r2
 80119ca:	330c      	adds	r3, #12
 80119cc:	881b      	ldrh	r3, [r3, #0]
 80119ce:	3301      	adds	r3, #1
 80119d0:	b29a      	uxth	r2, r3
 80119d2:	e001      	b.n	80119d8 <inc_lock+0xfc>
 80119d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80119d8:	4906      	ldr	r1, [pc, #24]	; (80119f4 <inc_lock+0x118>)
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	011b      	lsls	r3, r3, #4
 80119de:	440b      	add	r3, r1
 80119e0:	330c      	adds	r3, #12
 80119e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	3301      	adds	r3, #1
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3714      	adds	r7, #20
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	200481c4 	.word	0x200481c4

080119f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b085      	sub	sp, #20
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	3b01      	subs	r3, #1
 8011a04:	607b      	str	r3, [r7, #4]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d825      	bhi.n	8011a58 <dec_lock+0x60>
		n = Files[i].ctr;
 8011a0c:	4a17      	ldr	r2, [pc, #92]	; (8011a6c <dec_lock+0x74>)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	011b      	lsls	r3, r3, #4
 8011a12:	4413      	add	r3, r2
 8011a14:	330c      	adds	r3, #12
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011a1a:	89fb      	ldrh	r3, [r7, #14]
 8011a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a20:	d101      	bne.n	8011a26 <dec_lock+0x2e>
 8011a22:	2300      	movs	r3, #0
 8011a24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011a26:	89fb      	ldrh	r3, [r7, #14]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d002      	beq.n	8011a32 <dec_lock+0x3a>
 8011a2c:	89fb      	ldrh	r3, [r7, #14]
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011a32:	4a0e      	ldr	r2, [pc, #56]	; (8011a6c <dec_lock+0x74>)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	011b      	lsls	r3, r3, #4
 8011a38:	4413      	add	r3, r2
 8011a3a:	330c      	adds	r3, #12
 8011a3c:	89fa      	ldrh	r2, [r7, #14]
 8011a3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a40:	89fb      	ldrh	r3, [r7, #14]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d105      	bne.n	8011a52 <dec_lock+0x5a>
 8011a46:	4a09      	ldr	r2, [pc, #36]	; (8011a6c <dec_lock+0x74>)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	011b      	lsls	r3, r3, #4
 8011a4c:	4413      	add	r3, r2
 8011a4e:	2200      	movs	r2, #0
 8011a50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011a52:	2300      	movs	r3, #0
 8011a54:	737b      	strb	r3, [r7, #13]
 8011a56:	e001      	b.n	8011a5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a58:	2302      	movs	r3, #2
 8011a5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011a5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3714      	adds	r7, #20
 8011a62:	46bd      	mov	sp, r7
 8011a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop
 8011a6c:	200481c4 	.word	0x200481c4

08011a70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b085      	sub	sp, #20
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011a78:	2300      	movs	r3, #0
 8011a7a:	60fb      	str	r3, [r7, #12]
 8011a7c:	e010      	b.n	8011aa0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a7e:	4a0d      	ldr	r2, [pc, #52]	; (8011ab4 <clear_lock+0x44>)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	011b      	lsls	r3, r3, #4
 8011a84:	4413      	add	r3, r2
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d105      	bne.n	8011a9a <clear_lock+0x2a>
 8011a8e:	4a09      	ldr	r2, [pc, #36]	; (8011ab4 <clear_lock+0x44>)
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	011b      	lsls	r3, r3, #4
 8011a94:	4413      	add	r3, r2
 8011a96:	2200      	movs	r2, #0
 8011a98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	60fb      	str	r3, [r7, #12]
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d9eb      	bls.n	8011a7e <clear_lock+0xe>
	}
}
 8011aa6:	bf00      	nop
 8011aa8:	3714      	adds	r7, #20
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	200481c4 	.word	0x200481c4

08011ab8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b086      	sub	sp, #24
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	78db      	ldrb	r3, [r3, #3]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d034      	beq.n	8011b36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	7858      	ldrb	r0, [r3, #1]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011adc:	2301      	movs	r3, #1
 8011ade:	697a      	ldr	r2, [r7, #20]
 8011ae0:	f7ff fd40 	bl	8011564 <disk_write>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d002      	beq.n	8011af0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011aea:	2301      	movs	r3, #1
 8011aec:	73fb      	strb	r3, [r7, #15]
 8011aee:	e022      	b.n	8011b36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011afa:	697a      	ldr	r2, [r7, #20]
 8011afc:	1ad2      	subs	r2, r2, r3
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6a1b      	ldr	r3, [r3, #32]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d217      	bcs.n	8011b36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	789b      	ldrb	r3, [r3, #2]
 8011b0a:	613b      	str	r3, [r7, #16]
 8011b0c:	e010      	b.n	8011b30 <sync_window+0x78>
					wsect += fs->fsize;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6a1b      	ldr	r3, [r3, #32]
 8011b12:	697a      	ldr	r2, [r7, #20]
 8011b14:	4413      	add	r3, r2
 8011b16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	7858      	ldrb	r0, [r3, #1]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b22:	2301      	movs	r3, #1
 8011b24:	697a      	ldr	r2, [r7, #20]
 8011b26:	f7ff fd1d 	bl	8011564 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	3b01      	subs	r3, #1
 8011b2e:	613b      	str	r3, [r7, #16]
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d8eb      	bhi.n	8011b0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3718      	adds	r7, #24
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b52:	683a      	ldr	r2, [r7, #0]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d01b      	beq.n	8011b90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f7ff ffad 	bl	8011ab8 <sync_window>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011b62:	7bfb      	ldrb	r3, [r7, #15]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d113      	bne.n	8011b90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	7858      	ldrb	r0, [r3, #1]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b72:	2301      	movs	r3, #1
 8011b74:	683a      	ldr	r2, [r7, #0]
 8011b76:	f7ff fcd5 	bl	8011524 <disk_read>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d004      	beq.n	8011b8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011b80:	f04f 33ff 	mov.w	r3, #4294967295
 8011b84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011b86:	2301      	movs	r3, #1
 8011b88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
	...

08011b9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f7ff ff87 	bl	8011ab8 <sync_window>
 8011baa:	4603      	mov	r3, r0
 8011bac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011bae:	7bfb      	ldrb	r3, [r7, #15]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d159      	bne.n	8011c68 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	2b03      	cmp	r3, #3
 8011bba:	d149      	bne.n	8011c50 <sync_fs+0xb4>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	791b      	ldrb	r3, [r3, #4]
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d145      	bne.n	8011c50 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	899b      	ldrh	r3, [r3, #12]
 8011bce:	461a      	mov	r2, r3
 8011bd0:	2100      	movs	r1, #0
 8011bd2:	f7ff fda8 	bl	8011726 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	3338      	adds	r3, #56	; 0x38
 8011bda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bde:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff fd37 	bl	8011656 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	3338      	adds	r3, #56	; 0x38
 8011bec:	4921      	ldr	r1, [pc, #132]	; (8011c74 <sync_fs+0xd8>)
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7ff fd4c 	bl	801168c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	3338      	adds	r3, #56	; 0x38
 8011bf8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011bfc:	491e      	ldr	r1, [pc, #120]	; (8011c78 <sync_fs+0xdc>)
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7ff fd44 	bl	801168c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	3338      	adds	r3, #56	; 0x38
 8011c08:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	695b      	ldr	r3, [r3, #20]
 8011c10:	4619      	mov	r1, r3
 8011c12:	4610      	mov	r0, r2
 8011c14:	f7ff fd3a 	bl	801168c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	3338      	adds	r3, #56	; 0x38
 8011c1c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	691b      	ldr	r3, [r3, #16]
 8011c24:	4619      	mov	r1, r3
 8011c26:	4610      	mov	r0, r2
 8011c28:	f7ff fd30 	bl	801168c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c30:	1c5a      	adds	r2, r3, #1
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	7858      	ldrb	r0, [r3, #1]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c44:	2301      	movs	r3, #1
 8011c46:	f7ff fc8d 	bl	8011564 <disk_write>
			fs->fsi_flag = 0;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	785b      	ldrb	r3, [r3, #1]
 8011c54:	2200      	movs	r2, #0
 8011c56:	2100      	movs	r1, #0
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7ff fca3 	bl	80115a4 <disk_ioctl>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d001      	beq.n	8011c68 <sync_fs+0xcc>
 8011c64:	2301      	movs	r3, #1
 8011c66:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	41615252 	.word	0x41615252
 8011c78:	61417272 	.word	0x61417272

08011c7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	3b02      	subs	r3, #2
 8011c8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	69db      	ldr	r3, [r3, #28]
 8011c90:	3b02      	subs	r3, #2
 8011c92:	683a      	ldr	r2, [r7, #0]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d301      	bcc.n	8011c9c <clust2sect+0x20>
 8011c98:	2300      	movs	r3, #0
 8011c9a:	e008      	b.n	8011cae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	895b      	ldrh	r3, [r3, #10]
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	fb03 f202 	mul.w	r2, r3, r2
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cac:	4413      	add	r3, r2
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	370c      	adds	r7, #12
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b086      	sub	sp, #24
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	2b01      	cmp	r3, #1
 8011cce:	d904      	bls.n	8011cda <get_fat+0x20>
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	69db      	ldr	r3, [r3, #28]
 8011cd4:	683a      	ldr	r2, [r7, #0]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d302      	bcc.n	8011ce0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011cda:	2301      	movs	r3, #1
 8011cdc:	617b      	str	r3, [r7, #20]
 8011cde:	e0b7      	b.n	8011e50 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	2b02      	cmp	r3, #2
 8011cec:	d05a      	beq.n	8011da4 <get_fat+0xea>
 8011cee:	2b03      	cmp	r3, #3
 8011cf0:	d07d      	beq.n	8011dee <get_fat+0x134>
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	f040 80a2 	bne.w	8011e3c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	60fb      	str	r3, [r7, #12]
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	085b      	lsrs	r3, r3, #1
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	4413      	add	r3, r2
 8011d04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	899b      	ldrh	r3, [r3, #12]
 8011d0e:	4619      	mov	r1, r3
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d16:	4413      	add	r3, r2
 8011d18:	4619      	mov	r1, r3
 8011d1a:	6938      	ldr	r0, [r7, #16]
 8011d1c:	f7ff ff10 	bl	8011b40 <move_window>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	f040 808d 	bne.w	8011e42 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	1c5a      	adds	r2, r3, #1
 8011d2c:	60fa      	str	r2, [r7, #12]
 8011d2e:	693a      	ldr	r2, [r7, #16]
 8011d30:	8992      	ldrh	r2, [r2, #12]
 8011d32:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d36:	fb02 f201 	mul.w	r2, r2, r1
 8011d3a:	1a9b      	subs	r3, r3, r2
 8011d3c:	693a      	ldr	r2, [r7, #16]
 8011d3e:	4413      	add	r3, r2
 8011d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	899b      	ldrh	r3, [r3, #12]
 8011d4e:	4619      	mov	r1, r3
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d56:	4413      	add	r3, r2
 8011d58:	4619      	mov	r1, r3
 8011d5a:	6938      	ldr	r0, [r7, #16]
 8011d5c:	f7ff fef0 	bl	8011b40 <move_window>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d16f      	bne.n	8011e46 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	899b      	ldrh	r3, [r3, #12]
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d72:	fb02 f201 	mul.w	r2, r2, r1
 8011d76:	1a9b      	subs	r3, r3, r2
 8011d78:	693a      	ldr	r2, [r7, #16]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d80:	021b      	lsls	r3, r3, #8
 8011d82:	461a      	mov	r2, r3
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	4313      	orrs	r3, r2
 8011d88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	f003 0301 	and.w	r3, r3, #1
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d002      	beq.n	8011d9a <get_fat+0xe0>
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	091b      	lsrs	r3, r3, #4
 8011d98:	e002      	b.n	8011da0 <get_fat+0xe6>
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011da0:	617b      	str	r3, [r7, #20]
			break;
 8011da2:	e055      	b.n	8011e50 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	899b      	ldrh	r3, [r3, #12]
 8011dac:	085b      	lsrs	r3, r3, #1
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	4619      	mov	r1, r3
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	fbb3 f3f1 	udiv	r3, r3, r1
 8011db8:	4413      	add	r3, r2
 8011dba:	4619      	mov	r1, r3
 8011dbc:	6938      	ldr	r0, [r7, #16]
 8011dbe:	f7ff febf 	bl	8011b40 <move_window>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d140      	bne.n	8011e4a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	005b      	lsls	r3, r3, #1
 8011dd2:	693a      	ldr	r2, [r7, #16]
 8011dd4:	8992      	ldrh	r2, [r2, #12]
 8011dd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dda:	fb02 f200 	mul.w	r2, r2, r0
 8011dde:	1a9b      	subs	r3, r3, r2
 8011de0:	440b      	add	r3, r1
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7ff fbfc 	bl	80115e0 <ld_word>
 8011de8:	4603      	mov	r3, r0
 8011dea:	617b      	str	r3, [r7, #20]
			break;
 8011dec:	e030      	b.n	8011e50 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	899b      	ldrh	r3, [r3, #12]
 8011df6:	089b      	lsrs	r3, r3, #2
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e02:	4413      	add	r3, r2
 8011e04:	4619      	mov	r1, r3
 8011e06:	6938      	ldr	r0, [r7, #16]
 8011e08:	f7ff fe9a 	bl	8011b40 <move_window>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d11d      	bne.n	8011e4e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	693a      	ldr	r2, [r7, #16]
 8011e1e:	8992      	ldrh	r2, [r2, #12]
 8011e20:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e24:	fb02 f200 	mul.w	r2, r2, r0
 8011e28:	1a9b      	subs	r3, r3, r2
 8011e2a:	440b      	add	r3, r1
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7ff fbef 	bl	8011610 <ld_dword>
 8011e32:	4603      	mov	r3, r0
 8011e34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011e38:	617b      	str	r3, [r7, #20]
			break;
 8011e3a:	e009      	b.n	8011e50 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	617b      	str	r3, [r7, #20]
 8011e40:	e006      	b.n	8011e50 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e42:	bf00      	nop
 8011e44:	e004      	b.n	8011e50 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e46:	bf00      	nop
 8011e48:	e002      	b.n	8011e50 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e4a:	bf00      	nop
 8011e4c:	e000      	b.n	8011e50 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e4e:	bf00      	nop
		}
	}

	return val;
 8011e50:	697b      	ldr	r3, [r7, #20]
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3718      	adds	r7, #24
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e5a:	b590      	push	{r4, r7, lr}
 8011e5c:	b089      	sub	sp, #36	; 0x24
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	60f8      	str	r0, [r7, #12]
 8011e62:	60b9      	str	r1, [r7, #8]
 8011e64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e66:	2302      	movs	r3, #2
 8011e68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	f240 8106 	bls.w	801207e <put_fat+0x224>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	69db      	ldr	r3, [r3, #28]
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	f080 8100 	bcs.w	801207e <put_fat+0x224>
		switch (fs->fs_type) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	2b02      	cmp	r3, #2
 8011e84:	f000 8088 	beq.w	8011f98 <put_fat+0x13e>
 8011e88:	2b03      	cmp	r3, #3
 8011e8a:	f000 80b0 	beq.w	8011fee <put_fat+0x194>
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	f040 80f5 	bne.w	801207e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	61bb      	str	r3, [r7, #24]
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	085b      	lsrs	r3, r3, #1
 8011e9c:	69ba      	ldr	r2, [r7, #24]
 8011e9e:	4413      	add	r3, r2
 8011ea0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	899b      	ldrh	r3, [r3, #12]
 8011eaa:	4619      	mov	r1, r3
 8011eac:	69bb      	ldr	r3, [r7, #24]
 8011eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8011eb2:	4413      	add	r3, r2
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f7ff fe42 	bl	8011b40 <move_window>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ec0:	7ffb      	ldrb	r3, [r7, #31]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f040 80d4 	bne.w	8012070 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	1c5a      	adds	r2, r3, #1
 8011ed2:	61ba      	str	r2, [r7, #24]
 8011ed4:	68fa      	ldr	r2, [r7, #12]
 8011ed6:	8992      	ldrh	r2, [r2, #12]
 8011ed8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011edc:	fb02 f200 	mul.w	r2, r2, r0
 8011ee0:	1a9b      	subs	r3, r3, r2
 8011ee2:	440b      	add	r3, r1
 8011ee4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	f003 0301 	and.w	r3, r3, #1
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d00d      	beq.n	8011f0c <put_fat+0xb2>
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	b25b      	sxtb	r3, r3
 8011ef6:	f003 030f 	and.w	r3, r3, #15
 8011efa:	b25a      	sxtb	r2, r3
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	011b      	lsls	r3, r3, #4
 8011f02:	b25b      	sxtb	r3, r3
 8011f04:	4313      	orrs	r3, r2
 8011f06:	b25b      	sxtb	r3, r3
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	e001      	b.n	8011f10 <put_fat+0xb6>
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	697a      	ldr	r2, [r7, #20]
 8011f12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2201      	movs	r2, #1
 8011f18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	899b      	ldrh	r3, [r3, #12]
 8011f22:	4619      	mov	r1, r3
 8011f24:	69bb      	ldr	r3, [r7, #24]
 8011f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f2a:	4413      	add	r3, r2
 8011f2c:	4619      	mov	r1, r3
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	f7ff fe06 	bl	8011b40 <move_window>
 8011f34:	4603      	mov	r3, r0
 8011f36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f38:	7ffb      	ldrb	r3, [r7, #31]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f040 809a 	bne.w	8012074 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	899b      	ldrh	r3, [r3, #12]
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	69bb      	ldr	r3, [r7, #24]
 8011f4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f52:	fb02 f200 	mul.w	r2, r2, r0
 8011f56:	1a9b      	subs	r3, r3, r2
 8011f58:	440b      	add	r3, r1
 8011f5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	f003 0301 	and.w	r3, r3, #1
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d003      	beq.n	8011f6e <put_fat+0x114>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	091b      	lsrs	r3, r3, #4
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	e00e      	b.n	8011f8c <put_fat+0x132>
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	b25b      	sxtb	r3, r3
 8011f74:	f023 030f 	bic.w	r3, r3, #15
 8011f78:	b25a      	sxtb	r2, r3
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	0a1b      	lsrs	r3, r3, #8
 8011f7e:	b25b      	sxtb	r3, r3
 8011f80:	f003 030f 	and.w	r3, r3, #15
 8011f84:	b25b      	sxtb	r3, r3
 8011f86:	4313      	orrs	r3, r2
 8011f88:	b25b      	sxtb	r3, r3
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	697a      	ldr	r2, [r7, #20]
 8011f8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2201      	movs	r2, #1
 8011f94:	70da      	strb	r2, [r3, #3]
			break;
 8011f96:	e072      	b.n	801207e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	899b      	ldrh	r3, [r3, #12]
 8011fa0:	085b      	lsrs	r3, r3, #1
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fac:	4413      	add	r3, r2
 8011fae:	4619      	mov	r1, r3
 8011fb0:	68f8      	ldr	r0, [r7, #12]
 8011fb2:	f7ff fdc5 	bl	8011b40 <move_window>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fba:	7ffb      	ldrb	r3, [r7, #31]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d15b      	bne.n	8012078 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	005b      	lsls	r3, r3, #1
 8011fca:	68fa      	ldr	r2, [r7, #12]
 8011fcc:	8992      	ldrh	r2, [r2, #12]
 8011fce:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fd2:	fb02 f200 	mul.w	r2, r2, r0
 8011fd6:	1a9b      	subs	r3, r3, r2
 8011fd8:	440b      	add	r3, r1
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	b292      	uxth	r2, r2
 8011fde:	4611      	mov	r1, r2
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7ff fb38 	bl	8011656 <st_word>
			fs->wflag = 1;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2201      	movs	r2, #1
 8011fea:	70da      	strb	r2, [r3, #3]
			break;
 8011fec:	e047      	b.n	801207e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	899b      	ldrh	r3, [r3, #12]
 8011ff6:	089b      	lsrs	r3, r3, #2
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8012002:	4413      	add	r3, r2
 8012004:	4619      	mov	r1, r3
 8012006:	68f8      	ldr	r0, [r7, #12]
 8012008:	f7ff fd9a 	bl	8011b40 <move_window>
 801200c:	4603      	mov	r3, r0
 801200e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012010:	7ffb      	ldrb	r3, [r7, #31]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d132      	bne.n	801207c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	68fa      	ldr	r2, [r7, #12]
 8012028:	8992      	ldrh	r2, [r2, #12]
 801202a:	fbb3 f0f2 	udiv	r0, r3, r2
 801202e:	fb02 f200 	mul.w	r2, r2, r0
 8012032:	1a9b      	subs	r3, r3, r2
 8012034:	440b      	add	r3, r1
 8012036:	4618      	mov	r0, r3
 8012038:	f7ff faea 	bl	8011610 <ld_dword>
 801203c:	4603      	mov	r3, r0
 801203e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012042:	4323      	orrs	r3, r4
 8012044:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	68fa      	ldr	r2, [r7, #12]
 8012052:	8992      	ldrh	r2, [r2, #12]
 8012054:	fbb3 f0f2 	udiv	r0, r3, r2
 8012058:	fb02 f200 	mul.w	r2, r2, r0
 801205c:	1a9b      	subs	r3, r3, r2
 801205e:	440b      	add	r3, r1
 8012060:	6879      	ldr	r1, [r7, #4]
 8012062:	4618      	mov	r0, r3
 8012064:	f7ff fb12 	bl	801168c <st_dword>
			fs->wflag = 1;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2201      	movs	r2, #1
 801206c:	70da      	strb	r2, [r3, #3]
			break;
 801206e:	e006      	b.n	801207e <put_fat+0x224>
			if (res != FR_OK) break;
 8012070:	bf00      	nop
 8012072:	e004      	b.n	801207e <put_fat+0x224>
			if (res != FR_OK) break;
 8012074:	bf00      	nop
 8012076:	e002      	b.n	801207e <put_fat+0x224>
			if (res != FR_OK) break;
 8012078:	bf00      	nop
 801207a:	e000      	b.n	801207e <put_fat+0x224>
			if (res != FR_OK) break;
 801207c:	bf00      	nop
		}
	}
	return res;
 801207e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012080:	4618      	mov	r0, r3
 8012082:	3724      	adds	r7, #36	; 0x24
 8012084:	46bd      	mov	sp, r7
 8012086:	bd90      	pop	{r4, r7, pc}

08012088 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b088      	sub	sp, #32
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012094:	2300      	movs	r3, #0
 8012096:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d904      	bls.n	80120ae <remove_chain+0x26>
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	69db      	ldr	r3, [r3, #28]
 80120a8:	68ba      	ldr	r2, [r7, #8]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d301      	bcc.n	80120b2 <remove_chain+0x2a>
 80120ae:	2302      	movs	r3, #2
 80120b0:	e04b      	b.n	801214a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d00c      	beq.n	80120d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80120b8:	f04f 32ff 	mov.w	r2, #4294967295
 80120bc:	6879      	ldr	r1, [r7, #4]
 80120be:	69b8      	ldr	r0, [r7, #24]
 80120c0:	f7ff fecb 	bl	8011e5a <put_fat>
 80120c4:	4603      	mov	r3, r0
 80120c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80120c8:	7ffb      	ldrb	r3, [r7, #31]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d001      	beq.n	80120d2 <remove_chain+0x4a>
 80120ce:	7ffb      	ldrb	r3, [r7, #31]
 80120d0:	e03b      	b.n	801214a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80120d2:	68b9      	ldr	r1, [r7, #8]
 80120d4:	68f8      	ldr	r0, [r7, #12]
 80120d6:	f7ff fdf0 	bl	8011cba <get_fat>
 80120da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d031      	beq.n	8012146 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d101      	bne.n	80120ec <remove_chain+0x64>
 80120e8:	2302      	movs	r3, #2
 80120ea:	e02e      	b.n	801214a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f2:	d101      	bne.n	80120f8 <remove_chain+0x70>
 80120f4:	2301      	movs	r3, #1
 80120f6:	e028      	b.n	801214a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80120f8:	2200      	movs	r2, #0
 80120fa:	68b9      	ldr	r1, [r7, #8]
 80120fc:	69b8      	ldr	r0, [r7, #24]
 80120fe:	f7ff feac 	bl	8011e5a <put_fat>
 8012102:	4603      	mov	r3, r0
 8012104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012106:	7ffb      	ldrb	r3, [r7, #31]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d001      	beq.n	8012110 <remove_chain+0x88>
 801210c:	7ffb      	ldrb	r3, [r7, #31]
 801210e:	e01c      	b.n	801214a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012110:	69bb      	ldr	r3, [r7, #24]
 8012112:	695a      	ldr	r2, [r3, #20]
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	69db      	ldr	r3, [r3, #28]
 8012118:	3b02      	subs	r3, #2
 801211a:	429a      	cmp	r2, r3
 801211c:	d20b      	bcs.n	8012136 <remove_chain+0xae>
			fs->free_clst++;
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	695b      	ldr	r3, [r3, #20]
 8012122:	1c5a      	adds	r2, r3, #1
 8012124:	69bb      	ldr	r3, [r7, #24]
 8012126:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	791b      	ldrb	r3, [r3, #4]
 801212c:	f043 0301 	orr.w	r3, r3, #1
 8012130:	b2da      	uxtb	r2, r3
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	69db      	ldr	r3, [r3, #28]
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	429a      	cmp	r2, r3
 8012142:	d3c6      	bcc.n	80120d2 <remove_chain+0x4a>
 8012144:	e000      	b.n	8012148 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012146:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012148:	2300      	movs	r3, #0
}
 801214a:	4618      	mov	r0, r3
 801214c:	3720      	adds	r7, #32
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b088      	sub	sp, #32
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d10d      	bne.n	8012184 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	691b      	ldr	r3, [r3, #16]
 801216c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d004      	beq.n	801217e <create_chain+0x2c>
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	69db      	ldr	r3, [r3, #28]
 8012178:	69ba      	ldr	r2, [r7, #24]
 801217a:	429a      	cmp	r2, r3
 801217c:	d31b      	bcc.n	80121b6 <create_chain+0x64>
 801217e:	2301      	movs	r3, #1
 8012180:	61bb      	str	r3, [r7, #24]
 8012182:	e018      	b.n	80121b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012184:	6839      	ldr	r1, [r7, #0]
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7ff fd97 	bl	8011cba <get_fat>
 801218c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d801      	bhi.n	8012198 <create_chain+0x46>
 8012194:	2301      	movs	r3, #1
 8012196:	e070      	b.n	801227a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801219e:	d101      	bne.n	80121a4 <create_chain+0x52>
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	e06a      	b.n	801227a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	69db      	ldr	r3, [r3, #28]
 80121a8:	68fa      	ldr	r2, [r7, #12]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d201      	bcs.n	80121b2 <create_chain+0x60>
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	e063      	b.n	801227a <create_chain+0x128>
		scl = clst;
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80121ba:	69fb      	ldr	r3, [r7, #28]
 80121bc:	3301      	adds	r3, #1
 80121be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	69db      	ldr	r3, [r3, #28]
 80121c4:	69fa      	ldr	r2, [r7, #28]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d307      	bcc.n	80121da <create_chain+0x88>
				ncl = 2;
 80121ca:	2302      	movs	r3, #2
 80121cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80121ce:	69fa      	ldr	r2, [r7, #28]
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d901      	bls.n	80121da <create_chain+0x88>
 80121d6:	2300      	movs	r3, #0
 80121d8:	e04f      	b.n	801227a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121da:	69f9      	ldr	r1, [r7, #28]
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7ff fd6c 	bl	8011cba <get_fat>
 80121e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d00e      	beq.n	8012208 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d003      	beq.n	80121f8 <create_chain+0xa6>
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121f6:	d101      	bne.n	80121fc <create_chain+0xaa>
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	e03e      	b.n	801227a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80121fc:	69fa      	ldr	r2, [r7, #28]
 80121fe:	69bb      	ldr	r3, [r7, #24]
 8012200:	429a      	cmp	r2, r3
 8012202:	d1da      	bne.n	80121ba <create_chain+0x68>
 8012204:	2300      	movs	r3, #0
 8012206:	e038      	b.n	801227a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012208:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801220a:	f04f 32ff 	mov.w	r2, #4294967295
 801220e:	69f9      	ldr	r1, [r7, #28]
 8012210:	6938      	ldr	r0, [r7, #16]
 8012212:	f7ff fe22 	bl	8011e5a <put_fat>
 8012216:	4603      	mov	r3, r0
 8012218:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801221a:	7dfb      	ldrb	r3, [r7, #23]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d109      	bne.n	8012234 <create_chain+0xe2>
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d006      	beq.n	8012234 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012226:	69fa      	ldr	r2, [r7, #28]
 8012228:	6839      	ldr	r1, [r7, #0]
 801222a:	6938      	ldr	r0, [r7, #16]
 801222c:	f7ff fe15 	bl	8011e5a <put_fat>
 8012230:	4603      	mov	r3, r0
 8012232:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012234:	7dfb      	ldrb	r3, [r7, #23]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d116      	bne.n	8012268 <create_chain+0x116>
		fs->last_clst = ncl;
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	69fa      	ldr	r2, [r7, #28]
 801223e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	695a      	ldr	r2, [r3, #20]
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	69db      	ldr	r3, [r3, #28]
 8012248:	3b02      	subs	r3, #2
 801224a:	429a      	cmp	r2, r3
 801224c:	d804      	bhi.n	8012258 <create_chain+0x106>
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	695b      	ldr	r3, [r3, #20]
 8012252:	1e5a      	subs	r2, r3, #1
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	791b      	ldrb	r3, [r3, #4]
 801225c:	f043 0301 	orr.w	r3, r3, #1
 8012260:	b2da      	uxtb	r2, r3
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	711a      	strb	r2, [r3, #4]
 8012266:	e007      	b.n	8012278 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012268:	7dfb      	ldrb	r3, [r7, #23]
 801226a:	2b01      	cmp	r3, #1
 801226c:	d102      	bne.n	8012274 <create_chain+0x122>
 801226e:	f04f 33ff 	mov.w	r3, #4294967295
 8012272:	e000      	b.n	8012276 <create_chain+0x124>
 8012274:	2301      	movs	r3, #1
 8012276:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012278:	69fb      	ldr	r3, [r7, #28]
}
 801227a:	4618      	mov	r0, r3
 801227c:	3720      	adds	r7, #32
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}

08012282 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012282:	b480      	push	{r7}
 8012284:	b087      	sub	sp, #28
 8012286:	af00      	add	r7, sp, #0
 8012288:	6078      	str	r0, [r7, #4]
 801228a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012296:	3304      	adds	r3, #4
 8012298:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	899b      	ldrh	r3, [r3, #12]
 801229e:	461a      	mov	r2, r3
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80122a6:	68fa      	ldr	r2, [r7, #12]
 80122a8:	8952      	ldrh	r2, [r2, #10]
 80122aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80122ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122b0:	693b      	ldr	r3, [r7, #16]
 80122b2:	1d1a      	adds	r2, r3, #4
 80122b4:	613a      	str	r2, [r7, #16]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d101      	bne.n	80122c4 <clmt_clust+0x42>
 80122c0:	2300      	movs	r3, #0
 80122c2:	e010      	b.n	80122e6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80122c4:	697a      	ldr	r2, [r7, #20]
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d307      	bcc.n	80122dc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80122cc:	697a      	ldr	r2, [r7, #20]
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	617b      	str	r3, [r7, #20]
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	3304      	adds	r3, #4
 80122d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122da:	e7e9      	b.n	80122b0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80122dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	681a      	ldr	r2, [r3, #0]
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	4413      	add	r3, r2
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	371c      	adds	r7, #28
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b086      	sub	sp, #24
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012308:	d204      	bcs.n	8012314 <dir_sdi+0x22>
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	f003 031f 	and.w	r3, r3, #31
 8012310:	2b00      	cmp	r3, #0
 8012312:	d001      	beq.n	8012318 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012314:	2302      	movs	r3, #2
 8012316:	e071      	b.n	80123fc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	683a      	ldr	r2, [r7, #0]
 801231c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	689b      	ldr	r3, [r3, #8]
 8012322:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <dir_sdi+0x46>
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	2b02      	cmp	r3, #2
 8012330:	d902      	bls.n	8012338 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012336:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d10c      	bne.n	8012358 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	095b      	lsrs	r3, r3, #5
 8012342:	693a      	ldr	r2, [r7, #16]
 8012344:	8912      	ldrh	r2, [r2, #8]
 8012346:	4293      	cmp	r3, r2
 8012348:	d301      	bcc.n	801234e <dir_sdi+0x5c>
 801234a:	2302      	movs	r3, #2
 801234c:	e056      	b.n	80123fc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	61da      	str	r2, [r3, #28]
 8012356:	e02d      	b.n	80123b4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	895b      	ldrh	r3, [r3, #10]
 801235c:	461a      	mov	r2, r3
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	899b      	ldrh	r3, [r3, #12]
 8012362:	fb03 f302 	mul.w	r3, r3, r2
 8012366:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012368:	e019      	b.n	801239e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6979      	ldr	r1, [r7, #20]
 801236e:	4618      	mov	r0, r3
 8012370:	f7ff fca3 	bl	8011cba <get_fat>
 8012374:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801237c:	d101      	bne.n	8012382 <dir_sdi+0x90>
 801237e:	2301      	movs	r3, #1
 8012380:	e03c      	b.n	80123fc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	2b01      	cmp	r3, #1
 8012386:	d904      	bls.n	8012392 <dir_sdi+0xa0>
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	69db      	ldr	r3, [r3, #28]
 801238c:	697a      	ldr	r2, [r7, #20]
 801238e:	429a      	cmp	r2, r3
 8012390:	d301      	bcc.n	8012396 <dir_sdi+0xa4>
 8012392:	2302      	movs	r3, #2
 8012394:	e032      	b.n	80123fc <dir_sdi+0x10a>
			ofs -= csz;
 8012396:	683a      	ldr	r2, [r7, #0]
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	1ad3      	subs	r3, r2, r3
 801239c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801239e:	683a      	ldr	r2, [r7, #0]
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d2e1      	bcs.n	801236a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80123a6:	6979      	ldr	r1, [r7, #20]
 80123a8:	6938      	ldr	r0, [r7, #16]
 80123aa:	f7ff fc67 	bl	8011c7c <clust2sect>
 80123ae:	4602      	mov	r2, r0
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	697a      	ldr	r2, [r7, #20]
 80123b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	69db      	ldr	r3, [r3, #28]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d101      	bne.n	80123c6 <dir_sdi+0xd4>
 80123c2:	2302      	movs	r3, #2
 80123c4:	e01a      	b.n	80123fc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	69da      	ldr	r2, [r3, #28]
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	899b      	ldrh	r3, [r3, #12]
 80123ce:	4619      	mov	r1, r3
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80123d6:	441a      	add	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	899b      	ldrh	r3, [r3, #12]
 80123e6:	461a      	mov	r2, r3
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80123ee:	fb02 f200 	mul.w	r2, r2, r0
 80123f2:	1a9b      	subs	r3, r3, r2
 80123f4:	18ca      	adds	r2, r1, r3
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123fa:	2300      	movs	r3, #0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b086      	sub	sp, #24
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	695b      	ldr	r3, [r3, #20]
 8012418:	3320      	adds	r3, #32
 801241a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	69db      	ldr	r3, [r3, #28]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d003      	beq.n	801242c <dir_next+0x28>
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801242a:	d301      	bcc.n	8012430 <dir_next+0x2c>
 801242c:	2304      	movs	r3, #4
 801242e:	e0bb      	b.n	80125a8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	899b      	ldrh	r3, [r3, #12]
 8012434:	461a      	mov	r2, r3
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	fbb3 f1f2 	udiv	r1, r3, r2
 801243c:	fb02 f201 	mul.w	r2, r2, r1
 8012440:	1a9b      	subs	r3, r3, r2
 8012442:	2b00      	cmp	r3, #0
 8012444:	f040 809d 	bne.w	8012582 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	69db      	ldr	r3, [r3, #28]
 801244c:	1c5a      	adds	r2, r3, #1
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	699b      	ldr	r3, [r3, #24]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d10b      	bne.n	8012472 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	095b      	lsrs	r3, r3, #5
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	8912      	ldrh	r2, [r2, #8]
 8012462:	4293      	cmp	r3, r2
 8012464:	f0c0 808d 	bcc.w	8012582 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	61da      	str	r2, [r3, #28]
 801246e:	2304      	movs	r3, #4
 8012470:	e09a      	b.n	80125a8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	899b      	ldrh	r3, [r3, #12]
 8012476:	461a      	mov	r2, r3
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	fbb3 f3f2 	udiv	r3, r3, r2
 801247e:	68fa      	ldr	r2, [r7, #12]
 8012480:	8952      	ldrh	r2, [r2, #10]
 8012482:	3a01      	subs	r2, #1
 8012484:	4013      	ands	r3, r2
 8012486:	2b00      	cmp	r3, #0
 8012488:	d17b      	bne.n	8012582 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801248a:	687a      	ldr	r2, [r7, #4]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	699b      	ldr	r3, [r3, #24]
 8012490:	4619      	mov	r1, r3
 8012492:	4610      	mov	r0, r2
 8012494:	f7ff fc11 	bl	8011cba <get_fat>
 8012498:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	2b01      	cmp	r3, #1
 801249e:	d801      	bhi.n	80124a4 <dir_next+0xa0>
 80124a0:	2302      	movs	r3, #2
 80124a2:	e081      	b.n	80125a8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124aa:	d101      	bne.n	80124b0 <dir_next+0xac>
 80124ac:	2301      	movs	r3, #1
 80124ae:	e07b      	b.n	80125a8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	69db      	ldr	r3, [r3, #28]
 80124b4:	697a      	ldr	r2, [r7, #20]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d359      	bcc.n	801256e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d104      	bne.n	80124ca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2200      	movs	r2, #0
 80124c4:	61da      	str	r2, [r3, #28]
 80124c6:	2304      	movs	r3, #4
 80124c8:	e06e      	b.n	80125a8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	699b      	ldr	r3, [r3, #24]
 80124d0:	4619      	mov	r1, r3
 80124d2:	4610      	mov	r0, r2
 80124d4:	f7ff fe3d 	bl	8012152 <create_chain>
 80124d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d101      	bne.n	80124e4 <dir_next+0xe0>
 80124e0:	2307      	movs	r3, #7
 80124e2:	e061      	b.n	80125a8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d101      	bne.n	80124ee <dir_next+0xea>
 80124ea:	2302      	movs	r3, #2
 80124ec:	e05c      	b.n	80125a8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f4:	d101      	bne.n	80124fa <dir_next+0xf6>
 80124f6:	2301      	movs	r3, #1
 80124f8:	e056      	b.n	80125a8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7ff fadc 	bl	8011ab8 <sync_window>
 8012500:	4603      	mov	r3, r0
 8012502:	2b00      	cmp	r3, #0
 8012504:	d001      	beq.n	801250a <dir_next+0x106>
 8012506:	2301      	movs	r3, #1
 8012508:	e04e      	b.n	80125a8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	899b      	ldrh	r3, [r3, #12]
 8012514:	461a      	mov	r2, r3
 8012516:	2100      	movs	r1, #0
 8012518:	f7ff f905 	bl	8011726 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801251c:	2300      	movs	r3, #0
 801251e:	613b      	str	r3, [r7, #16]
 8012520:	6979      	ldr	r1, [r7, #20]
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7ff fbaa 	bl	8011c7c <clust2sect>
 8012528:	4602      	mov	r2, r0
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	635a      	str	r2, [r3, #52]	; 0x34
 801252e:	e012      	b.n	8012556 <dir_next+0x152>
						fs->wflag = 1;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2201      	movs	r2, #1
 8012534:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f7ff fabe 	bl	8011ab8 <sync_window>
 801253c:	4603      	mov	r3, r0
 801253e:	2b00      	cmp	r3, #0
 8012540:	d001      	beq.n	8012546 <dir_next+0x142>
 8012542:	2301      	movs	r3, #1
 8012544:	e030      	b.n	80125a8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	3301      	adds	r3, #1
 801254a:	613b      	str	r3, [r7, #16]
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012550:	1c5a      	adds	r2, r3, #1
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	635a      	str	r2, [r3, #52]	; 0x34
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	895b      	ldrh	r3, [r3, #10]
 801255a:	461a      	mov	r2, r3
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	4293      	cmp	r3, r2
 8012560:	d3e6      	bcc.n	8012530 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	1ad2      	subs	r2, r2, r3
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	697a      	ldr	r2, [r7, #20]
 8012572:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012574:	6979      	ldr	r1, [r7, #20]
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	f7ff fb80 	bl	8011c7c <clust2sect>
 801257c:	4602      	mov	r2, r0
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	899b      	ldrh	r3, [r3, #12]
 8012592:	461a      	mov	r2, r3
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	fbb3 f0f2 	udiv	r0, r3, r2
 801259a:	fb02 f200 	mul.w	r2, r2, r0
 801259e:	1a9b      	subs	r3, r3, r2
 80125a0:	18ca      	adds	r2, r1, r3
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80125a6:	2300      	movs	r3, #0
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3718      	adds	r7, #24
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80125c0:	2100      	movs	r1, #0
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7ff fe95 	bl	80122f2 <dir_sdi>
 80125c8:	4603      	mov	r3, r0
 80125ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80125cc:	7dfb      	ldrb	r3, [r7, #23]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d12b      	bne.n	801262a <dir_alloc+0x7a>
		n = 0;
 80125d2:	2300      	movs	r3, #0
 80125d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	69db      	ldr	r3, [r3, #28]
 80125da:	4619      	mov	r1, r3
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f7ff faaf 	bl	8011b40 <move_window>
 80125e2:	4603      	mov	r3, r0
 80125e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80125e6:	7dfb      	ldrb	r3, [r7, #23]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d11d      	bne.n	8012628 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a1b      	ldr	r3, [r3, #32]
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	2be5      	cmp	r3, #229	; 0xe5
 80125f4:	d004      	beq.n	8012600 <dir_alloc+0x50>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6a1b      	ldr	r3, [r3, #32]
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d107      	bne.n	8012610 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	3301      	adds	r3, #1
 8012604:	613b      	str	r3, [r7, #16]
 8012606:	693a      	ldr	r2, [r7, #16]
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	429a      	cmp	r2, r3
 801260c:	d102      	bne.n	8012614 <dir_alloc+0x64>
 801260e:	e00c      	b.n	801262a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012610:	2300      	movs	r3, #0
 8012612:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012614:	2101      	movs	r1, #1
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f7ff fef4 	bl	8012404 <dir_next>
 801261c:	4603      	mov	r3, r0
 801261e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012620:	7dfb      	ldrb	r3, [r7, #23]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d0d7      	beq.n	80125d6 <dir_alloc+0x26>
 8012626:	e000      	b.n	801262a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012628:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801262a:	7dfb      	ldrb	r3, [r7, #23]
 801262c:	2b04      	cmp	r3, #4
 801262e:	d101      	bne.n	8012634 <dir_alloc+0x84>
 8012630:	2307      	movs	r3, #7
 8012632:	75fb      	strb	r3, [r7, #23]
	return res;
 8012634:	7dfb      	ldrb	r3, [r7, #23]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3718      	adds	r7, #24
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}

0801263e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801263e:	b580      	push	{r7, lr}
 8012640:	b084      	sub	sp, #16
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]
 8012646:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	331a      	adds	r3, #26
 801264c:	4618      	mov	r0, r3
 801264e:	f7fe ffc7 	bl	80115e0 <ld_word>
 8012652:	4603      	mov	r3, r0
 8012654:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	2b03      	cmp	r3, #3
 801265c:	d109      	bne.n	8012672 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	3314      	adds	r3, #20
 8012662:	4618      	mov	r0, r3
 8012664:	f7fe ffbc 	bl	80115e0 <ld_word>
 8012668:	4603      	mov	r3, r0
 801266a:	041b      	lsls	r3, r3, #16
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	4313      	orrs	r3, r2
 8012670:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012672:	68fb      	ldr	r3, [r7, #12]
}
 8012674:	4618      	mov	r0, r3
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	331a      	adds	r3, #26
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	b292      	uxth	r2, r2
 8012690:	4611      	mov	r1, r2
 8012692:	4618      	mov	r0, r3
 8012694:	f7fe ffdf 	bl	8011656 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	2b03      	cmp	r3, #3
 801269e:	d109      	bne.n	80126b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	f103 0214 	add.w	r2, r3, #20
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	0c1b      	lsrs	r3, r3, #16
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	4619      	mov	r1, r3
 80126ae:	4610      	mov	r0, r2
 80126b0:	f7fe ffd1 	bl	8011656 <st_word>
	}
}
 80126b4:	bf00      	nop
 80126b6:	3710      	adds	r7, #16
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b086      	sub	sp, #24
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80126c6:	2304      	movs	r3, #4
 80126c8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80126d0:	e03c      	b.n	801274c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	69db      	ldr	r3, [r3, #28]
 80126d6:	4619      	mov	r1, r3
 80126d8:	6938      	ldr	r0, [r7, #16]
 80126da:	f7ff fa31 	bl	8011b40 <move_window>
 80126de:	4603      	mov	r3, r0
 80126e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126e2:	7dfb      	ldrb	r3, [r7, #23]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d136      	bne.n	8012756 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6a1b      	ldr	r3, [r3, #32]
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80126f0:	7bfb      	ldrb	r3, [r7, #15]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d102      	bne.n	80126fc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80126f6:	2304      	movs	r3, #4
 80126f8:	75fb      	strb	r3, [r7, #23]
 80126fa:	e031      	b.n	8012760 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6a1b      	ldr	r3, [r3, #32]
 8012700:	330b      	adds	r3, #11
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012708:	73bb      	strb	r3, [r7, #14]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	7bba      	ldrb	r2, [r7, #14]
 801270e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012710:	7bfb      	ldrb	r3, [r7, #15]
 8012712:	2be5      	cmp	r3, #229	; 0xe5
 8012714:	d011      	beq.n	801273a <dir_read+0x7e>
 8012716:	7bfb      	ldrb	r3, [r7, #15]
 8012718:	2b2e      	cmp	r3, #46	; 0x2e
 801271a:	d00e      	beq.n	801273a <dir_read+0x7e>
 801271c:	7bbb      	ldrb	r3, [r7, #14]
 801271e:	2b0f      	cmp	r3, #15
 8012720:	d00b      	beq.n	801273a <dir_read+0x7e>
 8012722:	7bbb      	ldrb	r3, [r7, #14]
 8012724:	f023 0320 	bic.w	r3, r3, #32
 8012728:	2b08      	cmp	r3, #8
 801272a:	bf0c      	ite	eq
 801272c:	2301      	moveq	r3, #1
 801272e:	2300      	movne	r3, #0
 8012730:	b2db      	uxtb	r3, r3
 8012732:	461a      	mov	r2, r3
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	4293      	cmp	r3, r2
 8012738:	d00f      	beq.n	801275a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801273a:	2100      	movs	r1, #0
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7ff fe61 	bl	8012404 <dir_next>
 8012742:	4603      	mov	r3, r0
 8012744:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012746:	7dfb      	ldrb	r3, [r7, #23]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d108      	bne.n	801275e <dir_read+0xa2>
	while (dp->sect) {
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	69db      	ldr	r3, [r3, #28]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d1be      	bne.n	80126d2 <dir_read+0x16>
 8012754:	e004      	b.n	8012760 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012756:	bf00      	nop
 8012758:	e002      	b.n	8012760 <dir_read+0xa4>
				break;
 801275a:	bf00      	nop
 801275c:	e000      	b.n	8012760 <dir_read+0xa4>
		if (res != FR_OK) break;
 801275e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012760:	7dfb      	ldrb	r3, [r7, #23]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d002      	beq.n	801276c <dir_read+0xb0>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2200      	movs	r2, #0
 801276a:	61da      	str	r2, [r3, #28]
	return res;
 801276c:	7dfb      	ldrb	r3, [r7, #23]
}
 801276e:	4618      	mov	r0, r3
 8012770:	3718      	adds	r7, #24
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}

08012776 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012776:	b580      	push	{r7, lr}
 8012778:	b086      	sub	sp, #24
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012784:	2100      	movs	r1, #0
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f7ff fdb3 	bl	80122f2 <dir_sdi>
 801278c:	4603      	mov	r3, r0
 801278e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012790:	7dfb      	ldrb	r3, [r7, #23]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d001      	beq.n	801279a <dir_find+0x24>
 8012796:	7dfb      	ldrb	r3, [r7, #23]
 8012798:	e03e      	b.n	8012818 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	69db      	ldr	r3, [r3, #28]
 801279e:	4619      	mov	r1, r3
 80127a0:	6938      	ldr	r0, [r7, #16]
 80127a2:	f7ff f9cd 	bl	8011b40 <move_window>
 80127a6:	4603      	mov	r3, r0
 80127a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80127aa:	7dfb      	ldrb	r3, [r7, #23]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d12f      	bne.n	8012810 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6a1b      	ldr	r3, [r3, #32]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d102      	bne.n	80127c4 <dir_find+0x4e>
 80127be:	2304      	movs	r3, #4
 80127c0:	75fb      	strb	r3, [r7, #23]
 80127c2:	e028      	b.n	8012816 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6a1b      	ldr	r3, [r3, #32]
 80127c8:	330b      	adds	r3, #11
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127d0:	b2da      	uxtb	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6a1b      	ldr	r3, [r3, #32]
 80127da:	330b      	adds	r3, #11
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	f003 0308 	and.w	r3, r3, #8
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d10a      	bne.n	80127fc <dir_find+0x86>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6a18      	ldr	r0, [r3, #32]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	3324      	adds	r3, #36	; 0x24
 80127ee:	220b      	movs	r2, #11
 80127f0:	4619      	mov	r1, r3
 80127f2:	f7fe ffb2 	bl	801175a <mem_cmp>
 80127f6:	4603      	mov	r3, r0
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d00b      	beq.n	8012814 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80127fc:	2100      	movs	r1, #0
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f7ff fe00 	bl	8012404 <dir_next>
 8012804:	4603      	mov	r3, r0
 8012806:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012808:	7dfb      	ldrb	r3, [r7, #23]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d0c5      	beq.n	801279a <dir_find+0x24>
 801280e:	e002      	b.n	8012816 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012810:	bf00      	nop
 8012812:	e000      	b.n	8012816 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012814:	bf00      	nop

	return res;
 8012816:	7dfb      	ldrb	r3, [r7, #23]
}
 8012818:	4618      	mov	r0, r3
 801281a:	3718      	adds	r7, #24
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b084      	sub	sp, #16
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801282e:	2101      	movs	r1, #1
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f7ff febd 	bl	80125b0 <dir_alloc>
 8012836:	4603      	mov	r3, r0
 8012838:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801283a:	7bfb      	ldrb	r3, [r7, #15]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d11c      	bne.n	801287a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	69db      	ldr	r3, [r3, #28]
 8012844:	4619      	mov	r1, r3
 8012846:	68b8      	ldr	r0, [r7, #8]
 8012848:	f7ff f97a 	bl	8011b40 <move_window>
 801284c:	4603      	mov	r3, r0
 801284e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012850:	7bfb      	ldrb	r3, [r7, #15]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d111      	bne.n	801287a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6a1b      	ldr	r3, [r3, #32]
 801285a:	2220      	movs	r2, #32
 801285c:	2100      	movs	r1, #0
 801285e:	4618      	mov	r0, r3
 8012860:	f7fe ff61 	bl	8011726 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6a18      	ldr	r0, [r3, #32]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	3324      	adds	r3, #36	; 0x24
 801286c:	220b      	movs	r2, #11
 801286e:	4619      	mov	r1, r3
 8012870:	f7fe ff38 	bl	80116e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	2201      	movs	r2, #1
 8012878:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801287a:	7bfb      	ldrb	r3, [r7, #15]
}
 801287c:	4618      	mov	r0, r3
 801287e:	3710      	adds	r7, #16
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	69db      	ldr	r3, [r3, #28]
 8012896:	4619      	mov	r1, r3
 8012898:	68f8      	ldr	r0, [r7, #12]
 801289a:	f7ff f951 	bl	8011b40 <move_window>
 801289e:	4603      	mov	r3, r0
 80128a0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80128a2:	7afb      	ldrb	r3, [r7, #11]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d106      	bne.n	80128b6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6a1b      	ldr	r3, [r3, #32]
 80128ac:	22e5      	movs	r2, #229	; 0xe5
 80128ae:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	2201      	movs	r2, #1
 80128b4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80128b6:	7afb      	ldrb	r3, [r7, #11]
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3710      	adds	r7, #16
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}

080128c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b088      	sub	sp, #32
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	60fb      	str	r3, [r7, #12]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	3324      	adds	r3, #36	; 0x24
 80128d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80128d6:	220b      	movs	r2, #11
 80128d8:	2120      	movs	r1, #32
 80128da:	68b8      	ldr	r0, [r7, #8]
 80128dc:	f7fe ff23 	bl	8011726 <mem_set>
	si = i = 0; ni = 8;
 80128e0:	2300      	movs	r3, #0
 80128e2:	613b      	str	r3, [r7, #16]
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	617b      	str	r3, [r7, #20]
 80128e8:	2308      	movs	r3, #8
 80128ea:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	4413      	add	r3, r2
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b2e      	cmp	r3, #46	; 0x2e
 80128f6:	d12f      	bne.n	8012958 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	1c5a      	adds	r2, r3, #1
 80128fc:	617a      	str	r2, [r7, #20]
 80128fe:	68fa      	ldr	r2, [r7, #12]
 8012900:	4413      	add	r3, r2
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012906:	7ffb      	ldrb	r3, [r7, #31]
 8012908:	2b2e      	cmp	r3, #46	; 0x2e
 801290a:	d10a      	bne.n	8012922 <create_name+0x62>
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	2b02      	cmp	r3, #2
 8012910:	d807      	bhi.n	8012922 <create_name+0x62>
			sfn[i++] = c;
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	1c5a      	adds	r2, r3, #1
 8012916:	613a      	str	r2, [r7, #16]
 8012918:	68ba      	ldr	r2, [r7, #8]
 801291a:	4413      	add	r3, r2
 801291c:	7ffa      	ldrb	r2, [r7, #31]
 801291e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012920:	e7ea      	b.n	80128f8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012922:	7ffb      	ldrb	r3, [r7, #31]
 8012924:	2b2f      	cmp	r3, #47	; 0x2f
 8012926:	d007      	beq.n	8012938 <create_name+0x78>
 8012928:	7ffb      	ldrb	r3, [r7, #31]
 801292a:	2b5c      	cmp	r3, #92	; 0x5c
 801292c:	d004      	beq.n	8012938 <create_name+0x78>
 801292e:	7ffb      	ldrb	r3, [r7, #31]
 8012930:	2b20      	cmp	r3, #32
 8012932:	d901      	bls.n	8012938 <create_name+0x78>
 8012934:	2306      	movs	r3, #6
 8012936:	e084      	b.n	8012a42 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012938:	68fa      	ldr	r2, [r7, #12]
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	441a      	add	r2, r3
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012942:	7ffb      	ldrb	r3, [r7, #31]
 8012944:	2b20      	cmp	r3, #32
 8012946:	d801      	bhi.n	801294c <create_name+0x8c>
 8012948:	2224      	movs	r2, #36	; 0x24
 801294a:	e000      	b.n	801294e <create_name+0x8e>
 801294c:	2220      	movs	r2, #32
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	330b      	adds	r3, #11
 8012952:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012954:	2300      	movs	r3, #0
 8012956:	e074      	b.n	8012a42 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	1c5a      	adds	r2, r3, #1
 801295c:	617a      	str	r2, [r7, #20]
 801295e:	68fa      	ldr	r2, [r7, #12]
 8012960:	4413      	add	r3, r2
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012966:	7ffb      	ldrb	r3, [r7, #31]
 8012968:	2b20      	cmp	r3, #32
 801296a:	d94e      	bls.n	8012a0a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801296c:	7ffb      	ldrb	r3, [r7, #31]
 801296e:	2b2f      	cmp	r3, #47	; 0x2f
 8012970:	d006      	beq.n	8012980 <create_name+0xc0>
 8012972:	7ffb      	ldrb	r3, [r7, #31]
 8012974:	2b5c      	cmp	r3, #92	; 0x5c
 8012976:	d110      	bne.n	801299a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012978:	e002      	b.n	8012980 <create_name+0xc0>
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	3301      	adds	r3, #1
 801297e:	617b      	str	r3, [r7, #20]
 8012980:	68fa      	ldr	r2, [r7, #12]
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	4413      	add	r3, r2
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	2b2f      	cmp	r3, #47	; 0x2f
 801298a:	d0f6      	beq.n	801297a <create_name+0xba>
 801298c:	68fa      	ldr	r2, [r7, #12]
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	4413      	add	r3, r2
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	2b5c      	cmp	r3, #92	; 0x5c
 8012996:	d0f0      	beq.n	801297a <create_name+0xba>
			break;
 8012998:	e038      	b.n	8012a0c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801299a:	7ffb      	ldrb	r3, [r7, #31]
 801299c:	2b2e      	cmp	r3, #46	; 0x2e
 801299e:	d003      	beq.n	80129a8 <create_name+0xe8>
 80129a0:	693a      	ldr	r2, [r7, #16]
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d30c      	bcc.n	80129c2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80129a8:	69bb      	ldr	r3, [r7, #24]
 80129aa:	2b0b      	cmp	r3, #11
 80129ac:	d002      	beq.n	80129b4 <create_name+0xf4>
 80129ae:	7ffb      	ldrb	r3, [r7, #31]
 80129b0:	2b2e      	cmp	r3, #46	; 0x2e
 80129b2:	d001      	beq.n	80129b8 <create_name+0xf8>
 80129b4:	2306      	movs	r3, #6
 80129b6:	e044      	b.n	8012a42 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80129b8:	2308      	movs	r3, #8
 80129ba:	613b      	str	r3, [r7, #16]
 80129bc:	230b      	movs	r3, #11
 80129be:	61bb      	str	r3, [r7, #24]
			continue;
 80129c0:	e022      	b.n	8012a08 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80129c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	da04      	bge.n	80129d4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80129ca:	7ffb      	ldrb	r3, [r7, #31]
 80129cc:	3b80      	subs	r3, #128	; 0x80
 80129ce:	4a1f      	ldr	r2, [pc, #124]	; (8012a4c <create_name+0x18c>)
 80129d0:	5cd3      	ldrb	r3, [r2, r3]
 80129d2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80129d4:	7ffb      	ldrb	r3, [r7, #31]
 80129d6:	4619      	mov	r1, r3
 80129d8:	481d      	ldr	r0, [pc, #116]	; (8012a50 <create_name+0x190>)
 80129da:	f7fe fee5 	bl	80117a8 <chk_chr>
 80129de:	4603      	mov	r3, r0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d001      	beq.n	80129e8 <create_name+0x128>
 80129e4:	2306      	movs	r3, #6
 80129e6:	e02c      	b.n	8012a42 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80129e8:	7ffb      	ldrb	r3, [r7, #31]
 80129ea:	2b60      	cmp	r3, #96	; 0x60
 80129ec:	d905      	bls.n	80129fa <create_name+0x13a>
 80129ee:	7ffb      	ldrb	r3, [r7, #31]
 80129f0:	2b7a      	cmp	r3, #122	; 0x7a
 80129f2:	d802      	bhi.n	80129fa <create_name+0x13a>
 80129f4:	7ffb      	ldrb	r3, [r7, #31]
 80129f6:	3b20      	subs	r3, #32
 80129f8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	1c5a      	adds	r2, r3, #1
 80129fe:	613a      	str	r2, [r7, #16]
 8012a00:	68ba      	ldr	r2, [r7, #8]
 8012a02:	4413      	add	r3, r2
 8012a04:	7ffa      	ldrb	r2, [r7, #31]
 8012a06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012a08:	e7a6      	b.n	8012958 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012a0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012a0c:	68fa      	ldr	r2, [r7, #12]
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	441a      	add	r2, r3
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d101      	bne.n	8012a20 <create_name+0x160>
 8012a1c:	2306      	movs	r3, #6
 8012a1e:	e010      	b.n	8012a42 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	2be5      	cmp	r3, #229	; 0xe5
 8012a26:	d102      	bne.n	8012a2e <create_name+0x16e>
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	2205      	movs	r2, #5
 8012a2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012a2e:	7ffb      	ldrb	r3, [r7, #31]
 8012a30:	2b20      	cmp	r3, #32
 8012a32:	d801      	bhi.n	8012a38 <create_name+0x178>
 8012a34:	2204      	movs	r2, #4
 8012a36:	e000      	b.n	8012a3a <create_name+0x17a>
 8012a38:	2200      	movs	r2, #0
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	330b      	adds	r3, #11
 8012a3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012a40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3720      	adds	r7, #32
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	0801a0ac 	.word	0x0801a0ac
 8012a50:	0801a05c 	.word	0x0801a05c

08012a54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b086      	sub	sp, #24
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	2b2f      	cmp	r3, #47	; 0x2f
 8012a6e:	d00b      	beq.n	8012a88 <follow_path+0x34>
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	2b5c      	cmp	r3, #92	; 0x5c
 8012a76:	d007      	beq.n	8012a88 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	699a      	ldr	r2, [r3, #24]
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	609a      	str	r2, [r3, #8]
 8012a80:	e00d      	b.n	8012a9e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	3301      	adds	r3, #1
 8012a86:	603b      	str	r3, [r7, #0]
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	2b2f      	cmp	r3, #47	; 0x2f
 8012a8e:	d0f8      	beq.n	8012a82 <follow_path+0x2e>
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	2b5c      	cmp	r3, #92	; 0x5c
 8012a96:	d0f4      	beq.n	8012a82 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	2b1f      	cmp	r3, #31
 8012aa4:	d80a      	bhi.n	8012abc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2280      	movs	r2, #128	; 0x80
 8012aaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012aae:	2100      	movs	r1, #0
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f7ff fc1e 	bl	80122f2 <dir_sdi>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	75fb      	strb	r3, [r7, #23]
 8012aba:	e05b      	b.n	8012b74 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012abc:	463b      	mov	r3, r7
 8012abe:	4619      	mov	r1, r3
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff fefd 	bl	80128c0 <create_name>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012aca:	7dfb      	ldrb	r3, [r7, #23]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d14c      	bne.n	8012b6a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f7ff fe50 	bl	8012776 <dir_find>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ae0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012ae2:	7dfb      	ldrb	r3, [r7, #23]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d01b      	beq.n	8012b20 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012ae8:	7dfb      	ldrb	r3, [r7, #23]
 8012aea:	2b04      	cmp	r3, #4
 8012aec:	d13f      	bne.n	8012b6e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012aee:	7afb      	ldrb	r3, [r7, #11]
 8012af0:	f003 0320 	and.w	r3, r3, #32
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d00b      	beq.n	8012b10 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012af8:	7afb      	ldrb	r3, [r7, #11]
 8012afa:	f003 0304 	and.w	r3, r3, #4
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d031      	beq.n	8012b66 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2280      	movs	r2, #128	; 0x80
 8012b06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012b0e:	e02e      	b.n	8012b6e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012b10:	7afb      	ldrb	r3, [r7, #11]
 8012b12:	f003 0304 	and.w	r3, r3, #4
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d129      	bne.n	8012b6e <follow_path+0x11a>
 8012b1a:	2305      	movs	r3, #5
 8012b1c:	75fb      	strb	r3, [r7, #23]
				break;
 8012b1e:	e026      	b.n	8012b6e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b20:	7afb      	ldrb	r3, [r7, #11]
 8012b22:	f003 0304 	and.w	r3, r3, #4
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d123      	bne.n	8012b72 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	799b      	ldrb	r3, [r3, #6]
 8012b2e:	f003 0310 	and.w	r3, r3, #16
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d102      	bne.n	8012b3c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012b36:	2305      	movs	r3, #5
 8012b38:	75fb      	strb	r3, [r7, #23]
 8012b3a:	e01b      	b.n	8012b74 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	695b      	ldr	r3, [r3, #20]
 8012b46:	68fa      	ldr	r2, [r7, #12]
 8012b48:	8992      	ldrh	r2, [r2, #12]
 8012b4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8012b4e:	fb02 f200 	mul.w	r2, r2, r0
 8012b52:	1a9b      	subs	r3, r3, r2
 8012b54:	440b      	add	r3, r1
 8012b56:	4619      	mov	r1, r3
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	f7ff fd70 	bl	801263e <ld_clust>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	609a      	str	r2, [r3, #8]
 8012b64:	e7aa      	b.n	8012abc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012b66:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b68:	e7a8      	b.n	8012abc <follow_path+0x68>
			if (res != FR_OK) break;
 8012b6a:	bf00      	nop
 8012b6c:	e002      	b.n	8012b74 <follow_path+0x120>
				break;
 8012b6e:	bf00      	nop
 8012b70:	e000      	b.n	8012b74 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b72:	bf00      	nop
			}
		}
	}

	return res;
 8012b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3718      	adds	r7, #24
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}

08012b7e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012b7e:	b480      	push	{r7}
 8012b80:	b087      	sub	sp, #28
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012b86:	f04f 33ff 	mov.w	r3, #4294967295
 8012b8a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d031      	beq.n	8012bf8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	617b      	str	r3, [r7, #20]
 8012b9a:	e002      	b.n	8012ba2 <get_ldnumber+0x24>
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	617b      	str	r3, [r7, #20]
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	2b20      	cmp	r3, #32
 8012ba8:	d903      	bls.n	8012bb2 <get_ldnumber+0x34>
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	2b3a      	cmp	r3, #58	; 0x3a
 8012bb0:	d1f4      	bne.n	8012b9c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	2b3a      	cmp	r3, #58	; 0x3a
 8012bb8:	d11c      	bne.n	8012bf4 <get_ldnumber+0x76>
			tp = *path;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	1c5a      	adds	r2, r3, #1
 8012bc4:	60fa      	str	r2, [r7, #12]
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	3b30      	subs	r3, #48	; 0x30
 8012bca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	2b09      	cmp	r3, #9
 8012bd0:	d80e      	bhi.n	8012bf0 <get_ldnumber+0x72>
 8012bd2:	68fa      	ldr	r2, [r7, #12]
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d10a      	bne.n	8012bf0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d107      	bne.n	8012bf0 <get_ldnumber+0x72>
					vol = (int)i;
 8012be0:	68bb      	ldr	r3, [r7, #8]
 8012be2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	3301      	adds	r3, #1
 8012be8:	617b      	str	r3, [r7, #20]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	697a      	ldr	r2, [r7, #20]
 8012bee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	e002      	b.n	8012bfa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012bf8:	693b      	ldr	r3, [r7, #16]
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	371c      	adds	r7, #28
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr
	...

08012c08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2200      	movs	r2, #0
 8012c16:	70da      	strb	r2, [r3, #3]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c1e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012c20:	6839      	ldr	r1, [r7, #0]
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7fe ff8c 	bl	8011b40 <move_window>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d001      	beq.n	8012c32 <check_fs+0x2a>
 8012c2e:	2304      	movs	r3, #4
 8012c30:	e038      	b.n	8012ca4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	3338      	adds	r3, #56	; 0x38
 8012c36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fe fcd0 	bl	80115e0 <ld_word>
 8012c40:	4603      	mov	r3, r0
 8012c42:	461a      	mov	r2, r3
 8012c44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d001      	beq.n	8012c50 <check_fs+0x48>
 8012c4c:	2303      	movs	r3, #3
 8012c4e:	e029      	b.n	8012ca4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012c56:	2be9      	cmp	r3, #233	; 0xe9
 8012c58:	d009      	beq.n	8012c6e <check_fs+0x66>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012c60:	2beb      	cmp	r3, #235	; 0xeb
 8012c62:	d11e      	bne.n	8012ca2 <check_fs+0x9a>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012c6a:	2b90      	cmp	r3, #144	; 0x90
 8012c6c:	d119      	bne.n	8012ca2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	3338      	adds	r3, #56	; 0x38
 8012c72:	3336      	adds	r3, #54	; 0x36
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7fe fccb 	bl	8011610 <ld_dword>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012c80:	4a0a      	ldr	r2, [pc, #40]	; (8012cac <check_fs+0xa4>)
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d101      	bne.n	8012c8a <check_fs+0x82>
 8012c86:	2300      	movs	r3, #0
 8012c88:	e00c      	b.n	8012ca4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	3338      	adds	r3, #56	; 0x38
 8012c8e:	3352      	adds	r3, #82	; 0x52
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7fe fcbd 	bl	8011610 <ld_dword>
 8012c96:	4602      	mov	r2, r0
 8012c98:	4b05      	ldr	r3, [pc, #20]	; (8012cb0 <check_fs+0xa8>)
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d101      	bne.n	8012ca2 <check_fs+0x9a>
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	e000      	b.n	8012ca4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012ca2:	2302      	movs	r3, #2
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3708      	adds	r7, #8
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	00544146 	.word	0x00544146
 8012cb0:	33544146 	.word	0x33544146

08012cb4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b096      	sub	sp, #88	; 0x58
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	60f8      	str	r0, [r7, #12]
 8012cbc:	60b9      	str	r1, [r7, #8]
 8012cbe:	4613      	mov	r3, r2
 8012cc0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012cc8:	68f8      	ldr	r0, [r7, #12]
 8012cca:	f7ff ff58 	bl	8012b7e <get_ldnumber>
 8012cce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	da01      	bge.n	8012cda <find_volume+0x26>
 8012cd6:	230b      	movs	r3, #11
 8012cd8:	e268      	b.n	80131ac <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012cda:	4ab0      	ldr	r2, [pc, #704]	; (8012f9c <find_volume+0x2e8>)
 8012cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ce2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d101      	bne.n	8012cee <find_volume+0x3a>
 8012cea:	230c      	movs	r3, #12
 8012cec:	e25e      	b.n	80131ac <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cf2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012cf4:	79fb      	ldrb	r3, [r7, #7]
 8012cf6:	f023 0301 	bic.w	r3, r3, #1
 8012cfa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d01a      	beq.n	8012d3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	785b      	ldrb	r3, [r3, #1]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7fe fbcb 	bl	80114a4 <disk_status>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012d14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d18:	f003 0301 	and.w	r3, r3, #1
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d10c      	bne.n	8012d3a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012d20:	79fb      	ldrb	r3, [r7, #7]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d007      	beq.n	8012d36 <find_volume+0x82>
 8012d26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d2a:	f003 0304 	and.w	r3, r3, #4
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d001      	beq.n	8012d36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012d32:	230a      	movs	r3, #10
 8012d34:	e23a      	b.n	80131ac <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012d36:	2300      	movs	r3, #0
 8012d38:	e238      	b.n	80131ac <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d42:	b2da      	uxtb	r2, r3
 8012d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4a:	785b      	ldrb	r3, [r3, #1]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fe fbc3 	bl	80114d8 <disk_initialize>
 8012d52:	4603      	mov	r3, r0
 8012d54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012d58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d5c:	f003 0301 	and.w	r3, r3, #1
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d001      	beq.n	8012d68 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012d64:	2303      	movs	r3, #3
 8012d66:	e221      	b.n	80131ac <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012d68:	79fb      	ldrb	r3, [r7, #7]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d007      	beq.n	8012d7e <find_volume+0xca>
 8012d6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d72:	f003 0304 	and.w	r3, r3, #4
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d001      	beq.n	8012d7e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012d7a:	230a      	movs	r3, #10
 8012d7c:	e216      	b.n	80131ac <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d80:	7858      	ldrb	r0, [r3, #1]
 8012d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d84:	330c      	adds	r3, #12
 8012d86:	461a      	mov	r2, r3
 8012d88:	2102      	movs	r1, #2
 8012d8a:	f7fe fc0b 	bl	80115a4 <disk_ioctl>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d001      	beq.n	8012d98 <find_volume+0xe4>
 8012d94:	2301      	movs	r3, #1
 8012d96:	e209      	b.n	80131ac <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d9a:	899b      	ldrh	r3, [r3, #12]
 8012d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012da0:	d80d      	bhi.n	8012dbe <find_volume+0x10a>
 8012da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da4:	899b      	ldrh	r3, [r3, #12]
 8012da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012daa:	d308      	bcc.n	8012dbe <find_volume+0x10a>
 8012dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dae:	899b      	ldrh	r3, [r3, #12]
 8012db0:	461a      	mov	r2, r3
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	899b      	ldrh	r3, [r3, #12]
 8012db6:	3b01      	subs	r3, #1
 8012db8:	4013      	ands	r3, r2
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d001      	beq.n	8012dc2 <find_volume+0x10e>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	e1f4      	b.n	80131ac <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dca:	f7ff ff1d 	bl	8012c08 <check_fs>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012dd8:	2b02      	cmp	r3, #2
 8012dda:	d14b      	bne.n	8012e74 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ddc:	2300      	movs	r3, #0
 8012dde:	643b      	str	r3, [r7, #64]	; 0x40
 8012de0:	e01f      	b.n	8012e22 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dea:	011b      	lsls	r3, r3, #4
 8012dec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012df0:	4413      	add	r3, r2
 8012df2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df6:	3304      	adds	r3, #4
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d006      	beq.n	8012e0c <find_volume+0x158>
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e00:	3308      	adds	r3, #8
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fe fc04 	bl	8011610 <ld_dword>
 8012e08:	4602      	mov	r2, r0
 8012e0a:	e000      	b.n	8012e0e <find_volume+0x15a>
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012e16:	440b      	add	r3, r1
 8012e18:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e1e:	3301      	adds	r3, #1
 8012e20:	643b      	str	r3, [r7, #64]	; 0x40
 8012e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e24:	2b03      	cmp	r3, #3
 8012e26:	d9dc      	bls.n	8012de2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012e28:	2300      	movs	r3, #0
 8012e2a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d002      	beq.n	8012e38 <find_volume+0x184>
 8012e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e34:	3b01      	subs	r3, #1
 8012e36:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012e40:	4413      	add	r3, r2
 8012e42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012e46:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d005      	beq.n	8012e5a <find_volume+0x1a6>
 8012e4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e52:	f7ff fed9 	bl	8012c08 <check_fs>
 8012e56:	4603      	mov	r3, r0
 8012e58:	e000      	b.n	8012e5c <find_volume+0x1a8>
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d905      	bls.n	8012e74 <find_volume+0x1c0>
 8012e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8012e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e70:	2b03      	cmp	r3, #3
 8012e72:	d9e1      	bls.n	8012e38 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e78:	2b04      	cmp	r3, #4
 8012e7a:	d101      	bne.n	8012e80 <find_volume+0x1cc>
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	e195      	b.n	80131ac <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d901      	bls.n	8012e8c <find_volume+0x1d8>
 8012e88:	230d      	movs	r3, #13
 8012e8a:	e18f      	b.n	80131ac <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8e:	3338      	adds	r3, #56	; 0x38
 8012e90:	330b      	adds	r3, #11
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fe fba4 	bl	80115e0 <ld_word>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9e:	899b      	ldrh	r3, [r3, #12]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d001      	beq.n	8012ea8 <find_volume+0x1f4>
 8012ea4:	230d      	movs	r3, #13
 8012ea6:	e181      	b.n	80131ac <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eaa:	3338      	adds	r3, #56	; 0x38
 8012eac:	3316      	adds	r3, #22
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7fe fb96 	bl	80115e0 <ld_word>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d106      	bne.n	8012ecc <find_volume+0x218>
 8012ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec0:	3338      	adds	r3, #56	; 0x38
 8012ec2:	3324      	adds	r3, #36	; 0x24
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fe fba3 	bl	8011610 <ld_dword>
 8012eca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ed0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eda:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ede:	789b      	ldrb	r3, [r3, #2]
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d005      	beq.n	8012ef0 <find_volume+0x23c>
 8012ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee6:	789b      	ldrb	r3, [r3, #2]
 8012ee8:	2b02      	cmp	r3, #2
 8012eea:	d001      	beq.n	8012ef0 <find_volume+0x23c>
 8012eec:	230d      	movs	r3, #13
 8012eee:	e15d      	b.n	80131ac <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef2:	789b      	ldrb	r3, [r3, #2]
 8012ef4:	461a      	mov	r2, r3
 8012ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ef8:	fb02 f303 	mul.w	r3, r2, r3
 8012efc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f04:	b29a      	uxth	r2, r3
 8012f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f0c:	895b      	ldrh	r3, [r3, #10]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d008      	beq.n	8012f24 <find_volume+0x270>
 8012f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f14:	895b      	ldrh	r3, [r3, #10]
 8012f16:	461a      	mov	r2, r3
 8012f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1a:	895b      	ldrh	r3, [r3, #10]
 8012f1c:	3b01      	subs	r3, #1
 8012f1e:	4013      	ands	r3, r2
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d001      	beq.n	8012f28 <find_volume+0x274>
 8012f24:	230d      	movs	r3, #13
 8012f26:	e141      	b.n	80131ac <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2a:	3338      	adds	r3, #56	; 0x38
 8012f2c:	3311      	adds	r3, #17
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fe fb56 	bl	80115e0 <ld_word>
 8012f34:	4603      	mov	r3, r0
 8012f36:	461a      	mov	r2, r3
 8012f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3e:	891b      	ldrh	r3, [r3, #8]
 8012f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f42:	8992      	ldrh	r2, [r2, #12]
 8012f44:	0952      	lsrs	r2, r2, #5
 8012f46:	b292      	uxth	r2, r2
 8012f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f4c:	fb02 f201 	mul.w	r2, r2, r1
 8012f50:	1a9b      	subs	r3, r3, r2
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d001      	beq.n	8012f5c <find_volume+0x2a8>
 8012f58:	230d      	movs	r3, #13
 8012f5a:	e127      	b.n	80131ac <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5e:	3338      	adds	r3, #56	; 0x38
 8012f60:	3313      	adds	r3, #19
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fe fb3c 	bl	80115e0 <ld_word>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d106      	bne.n	8012f80 <find_volume+0x2cc>
 8012f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f74:	3338      	adds	r3, #56	; 0x38
 8012f76:	3320      	adds	r3, #32
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fe fb49 	bl	8011610 <ld_dword>
 8012f7e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f82:	3338      	adds	r3, #56	; 0x38
 8012f84:	330e      	adds	r3, #14
 8012f86:	4618      	mov	r0, r3
 8012f88:	f7fe fb2a 	bl	80115e0 <ld_word>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012f90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d104      	bne.n	8012fa0 <find_volume+0x2ec>
 8012f96:	230d      	movs	r3, #13
 8012f98:	e108      	b.n	80131ac <find_volume+0x4f8>
 8012f9a:	bf00      	nop
 8012f9c:	200481bc 	.word	0x200481bc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012fa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fa4:	4413      	add	r3, r2
 8012fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fa8:	8911      	ldrh	r1, [r2, #8]
 8012faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fac:	8992      	ldrh	r2, [r2, #12]
 8012fae:	0952      	lsrs	r2, r2, #5
 8012fb0:	b292      	uxth	r2, r2
 8012fb2:	fbb1 f2f2 	udiv	r2, r1, r2
 8012fb6:	b292      	uxth	r2, r2
 8012fb8:	4413      	add	r3, r2
 8012fba:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d201      	bcs.n	8012fc8 <find_volume+0x314>
 8012fc4:	230d      	movs	r3, #13
 8012fc6:	e0f1      	b.n	80131ac <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fcc:	1ad3      	subs	r3, r2, r3
 8012fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fd0:	8952      	ldrh	r2, [r2, #10]
 8012fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fd6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d101      	bne.n	8012fe2 <find_volume+0x32e>
 8012fde:	230d      	movs	r3, #13
 8012fe0:	e0e4      	b.n	80131ac <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012fe2:	2303      	movs	r3, #3
 8012fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d802      	bhi.n	8012ff8 <find_volume+0x344>
 8012ff2:	2302      	movs	r3, #2
 8012ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffa:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d802      	bhi.n	8013008 <find_volume+0x354>
 8013002:	2301      	movs	r3, #1
 8013004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300a:	1c9a      	adds	r2, r3, #2
 801300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013014:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013016:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801301a:	441a      	add	r2, r3
 801301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013020:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013024:	441a      	add	r2, r3
 8013026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013028:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801302a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801302e:	2b03      	cmp	r3, #3
 8013030:	d11e      	bne.n	8013070 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013034:	3338      	adds	r3, #56	; 0x38
 8013036:	332a      	adds	r3, #42	; 0x2a
 8013038:	4618      	mov	r0, r3
 801303a:	f7fe fad1 	bl	80115e0 <ld_word>
 801303e:	4603      	mov	r3, r0
 8013040:	2b00      	cmp	r3, #0
 8013042:	d001      	beq.n	8013048 <find_volume+0x394>
 8013044:	230d      	movs	r3, #13
 8013046:	e0b1      	b.n	80131ac <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304a:	891b      	ldrh	r3, [r3, #8]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d001      	beq.n	8013054 <find_volume+0x3a0>
 8013050:	230d      	movs	r3, #13
 8013052:	e0ab      	b.n	80131ac <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013056:	3338      	adds	r3, #56	; 0x38
 8013058:	332c      	adds	r3, #44	; 0x2c
 801305a:	4618      	mov	r0, r3
 801305c:	f7fe fad8 	bl	8011610 <ld_dword>
 8013060:	4602      	mov	r2, r0
 8013062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013064:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013068:	69db      	ldr	r3, [r3, #28]
 801306a:	009b      	lsls	r3, r3, #2
 801306c:	647b      	str	r3, [r7, #68]	; 0x44
 801306e:	e01f      	b.n	80130b0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013072:	891b      	ldrh	r3, [r3, #8]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d101      	bne.n	801307c <find_volume+0x3c8>
 8013078:	230d      	movs	r3, #13
 801307a:	e097      	b.n	80131ac <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013082:	441a      	add	r2, r3
 8013084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013086:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801308c:	2b02      	cmp	r3, #2
 801308e:	d103      	bne.n	8013098 <find_volume+0x3e4>
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	69db      	ldr	r3, [r3, #28]
 8013094:	005b      	lsls	r3, r3, #1
 8013096:	e00a      	b.n	80130ae <find_volume+0x3fa>
 8013098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309a:	69da      	ldr	r2, [r3, #28]
 801309c:	4613      	mov	r3, r2
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	4413      	add	r3, r2
 80130a2:	085a      	lsrs	r2, r3, #1
 80130a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a6:	69db      	ldr	r3, [r3, #28]
 80130a8:	f003 0301 	and.w	r3, r3, #1
 80130ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80130ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80130b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b2:	6a1a      	ldr	r2, [r3, #32]
 80130b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b6:	899b      	ldrh	r3, [r3, #12]
 80130b8:	4619      	mov	r1, r3
 80130ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130bc:	440b      	add	r3, r1
 80130be:	3b01      	subs	r3, #1
 80130c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80130c2:	8989      	ldrh	r1, [r1, #12]
 80130c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d201      	bcs.n	80130d0 <find_volume+0x41c>
 80130cc:	230d      	movs	r3, #13
 80130ce:	e06d      	b.n	80131ac <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80130d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d2:	f04f 32ff 	mov.w	r2, #4294967295
 80130d6:	615a      	str	r2, [r3, #20]
 80130d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130da:	695a      	ldr	r2, [r3, #20]
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80130e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e2:	2280      	movs	r2, #128	; 0x80
 80130e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80130e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130ea:	2b03      	cmp	r3, #3
 80130ec:	d149      	bne.n	8013182 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80130ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f0:	3338      	adds	r3, #56	; 0x38
 80130f2:	3330      	adds	r3, #48	; 0x30
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fe fa73 	bl	80115e0 <ld_word>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d140      	bne.n	8013182 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013102:	3301      	adds	r3, #1
 8013104:	4619      	mov	r1, r3
 8013106:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013108:	f7fe fd1a 	bl	8011b40 <move_window>
 801310c:	4603      	mov	r3, r0
 801310e:	2b00      	cmp	r3, #0
 8013110:	d137      	bne.n	8013182 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8013112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013114:	2200      	movs	r2, #0
 8013116:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311a:	3338      	adds	r3, #56	; 0x38
 801311c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013120:	4618      	mov	r0, r3
 8013122:	f7fe fa5d 	bl	80115e0 <ld_word>
 8013126:	4603      	mov	r3, r0
 8013128:	461a      	mov	r2, r3
 801312a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801312e:	429a      	cmp	r2, r3
 8013130:	d127      	bne.n	8013182 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013134:	3338      	adds	r3, #56	; 0x38
 8013136:	4618      	mov	r0, r3
 8013138:	f7fe fa6a 	bl	8011610 <ld_dword>
 801313c:	4602      	mov	r2, r0
 801313e:	4b1d      	ldr	r3, [pc, #116]	; (80131b4 <find_volume+0x500>)
 8013140:	429a      	cmp	r2, r3
 8013142:	d11e      	bne.n	8013182 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013146:	3338      	adds	r3, #56	; 0x38
 8013148:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801314c:	4618      	mov	r0, r3
 801314e:	f7fe fa5f 	bl	8011610 <ld_dword>
 8013152:	4602      	mov	r2, r0
 8013154:	4b18      	ldr	r3, [pc, #96]	; (80131b8 <find_volume+0x504>)
 8013156:	429a      	cmp	r2, r3
 8013158:	d113      	bne.n	8013182 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315c:	3338      	adds	r3, #56	; 0x38
 801315e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013162:	4618      	mov	r0, r3
 8013164:	f7fe fa54 	bl	8011610 <ld_dword>
 8013168:	4602      	mov	r2, r0
 801316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013170:	3338      	adds	r3, #56	; 0x38
 8013172:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013176:	4618      	mov	r0, r3
 8013178:	f7fe fa4a 	bl	8011610 <ld_dword>
 801317c:	4602      	mov	r2, r0
 801317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013180:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013184:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013188:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801318a:	4b0c      	ldr	r3, [pc, #48]	; (80131bc <find_volume+0x508>)
 801318c:	881b      	ldrh	r3, [r3, #0]
 801318e:	3301      	adds	r3, #1
 8013190:	b29a      	uxth	r2, r3
 8013192:	4b0a      	ldr	r3, [pc, #40]	; (80131bc <find_volume+0x508>)
 8013194:	801a      	strh	r2, [r3, #0]
 8013196:	4b09      	ldr	r3, [pc, #36]	; (80131bc <find_volume+0x508>)
 8013198:	881a      	ldrh	r2, [r3, #0]
 801319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801319c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a0:	2200      	movs	r2, #0
 80131a2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80131a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80131a6:	f7fe fc63 	bl	8011a70 <clear_lock>
#endif
	return FR_OK;
 80131aa:	2300      	movs	r3, #0
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3758      	adds	r7, #88	; 0x58
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	41615252 	.word	0x41615252
 80131b8:	61417272 	.word	0x61417272
 80131bc:	200481c0 	.word	0x200481c0

080131c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80131ca:	2309      	movs	r3, #9
 80131cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d01c      	beq.n	801320e <validate+0x4e>
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d018      	beq.n	801320e <validate+0x4e>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d013      	beq.n	801320e <validate+0x4e>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	889a      	ldrh	r2, [r3, #4]
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	88db      	ldrh	r3, [r3, #6]
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d10c      	bne.n	801320e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	785b      	ldrb	r3, [r3, #1]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fe f952 	bl	80114a4 <disk_status>
 8013200:	4603      	mov	r3, r0
 8013202:	f003 0301 	and.w	r3, r3, #1
 8013206:	2b00      	cmp	r3, #0
 8013208:	d101      	bne.n	801320e <validate+0x4e>
			res = FR_OK;
 801320a:	2300      	movs	r3, #0
 801320c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801320e:	7bfb      	ldrb	r3, [r7, #15]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d102      	bne.n	801321a <validate+0x5a>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	e000      	b.n	801321c <validate+0x5c>
 801321a:	2300      	movs	r3, #0
 801321c:	683a      	ldr	r2, [r7, #0]
 801321e:	6013      	str	r3, [r2, #0]
	return res;
 8013220:	7bfb      	ldrb	r3, [r7, #15]
}
 8013222:	4618      	mov	r0, r3
 8013224:	3710      	adds	r7, #16
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
	...

0801322c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b088      	sub	sp, #32
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	4613      	mov	r3, r2
 8013238:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801323e:	f107 0310 	add.w	r3, r7, #16
 8013242:	4618      	mov	r0, r3
 8013244:	f7ff fc9b 	bl	8012b7e <get_ldnumber>
 8013248:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801324a:	69fb      	ldr	r3, [r7, #28]
 801324c:	2b00      	cmp	r3, #0
 801324e:	da01      	bge.n	8013254 <f_mount+0x28>
 8013250:	230b      	movs	r3, #11
 8013252:	e02b      	b.n	80132ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013254:	4a17      	ldr	r2, [pc, #92]	; (80132b4 <f_mount+0x88>)
 8013256:	69fb      	ldr	r3, [r7, #28]
 8013258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801325c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d005      	beq.n	8013270 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013264:	69b8      	ldr	r0, [r7, #24]
 8013266:	f7fe fc03 	bl	8011a70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801326a:	69bb      	ldr	r3, [r7, #24]
 801326c:	2200      	movs	r2, #0
 801326e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d002      	beq.n	801327c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2200      	movs	r2, #0
 801327a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801327c:	68fa      	ldr	r2, [r7, #12]
 801327e:	490d      	ldr	r1, [pc, #52]	; (80132b4 <f_mount+0x88>)
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d002      	beq.n	8013292 <f_mount+0x66>
 801328c:	79fb      	ldrb	r3, [r7, #7]
 801328e:	2b01      	cmp	r3, #1
 8013290:	d001      	beq.n	8013296 <f_mount+0x6a>
 8013292:	2300      	movs	r3, #0
 8013294:	e00a      	b.n	80132ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013296:	f107 010c 	add.w	r1, r7, #12
 801329a:	f107 0308 	add.w	r3, r7, #8
 801329e:	2200      	movs	r2, #0
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7ff fd07 	bl	8012cb4 <find_volume>
 80132a6:	4603      	mov	r3, r0
 80132a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80132aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3720      	adds	r7, #32
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	200481bc 	.word	0x200481bc

080132b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b098      	sub	sp, #96	; 0x60
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	4613      	mov	r3, r2
 80132c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d101      	bne.n	80132d0 <f_open+0x18>
 80132cc:	2309      	movs	r3, #9
 80132ce:	e1ba      	b.n	8013646 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80132d0:	79fb      	ldrb	r3, [r7, #7]
 80132d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80132d8:	79fa      	ldrb	r2, [r7, #7]
 80132da:	f107 0110 	add.w	r1, r7, #16
 80132de:	f107 0308 	add.w	r3, r7, #8
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7ff fce6 	bl	8012cb4 <find_volume>
 80132e8:	4603      	mov	r3, r0
 80132ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80132ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	f040 819e 	bne.w	8013634 <f_open+0x37c>
		dj.obj.fs = fs;
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80132fc:	68ba      	ldr	r2, [r7, #8]
 80132fe:	f107 0314 	add.w	r3, r7, #20
 8013302:	4611      	mov	r1, r2
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff fba5 	bl	8012a54 <follow_path>
 801330a:	4603      	mov	r3, r0
 801330c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013314:	2b00      	cmp	r3, #0
 8013316:	d11a      	bne.n	801334e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013318:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801331c:	b25b      	sxtb	r3, r3
 801331e:	2b00      	cmp	r3, #0
 8013320:	da03      	bge.n	801332a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013322:	2306      	movs	r3, #6
 8013324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013328:	e011      	b.n	801334e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801332a:	79fb      	ldrb	r3, [r7, #7]
 801332c:	f023 0301 	bic.w	r3, r3, #1
 8013330:	2b00      	cmp	r3, #0
 8013332:	bf14      	ite	ne
 8013334:	2301      	movne	r3, #1
 8013336:	2300      	moveq	r3, #0
 8013338:	b2db      	uxtb	r3, r3
 801333a:	461a      	mov	r2, r3
 801333c:	f107 0314 	add.w	r3, r7, #20
 8013340:	4611      	mov	r1, r2
 8013342:	4618      	mov	r0, r3
 8013344:	f7fe fa4c 	bl	80117e0 <chk_lock>
 8013348:	4603      	mov	r3, r0
 801334a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801334e:	79fb      	ldrb	r3, [r7, #7]
 8013350:	f003 031c 	and.w	r3, r3, #28
 8013354:	2b00      	cmp	r3, #0
 8013356:	d07e      	beq.n	8013456 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013358:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801335c:	2b00      	cmp	r3, #0
 801335e:	d017      	beq.n	8013390 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013364:	2b04      	cmp	r3, #4
 8013366:	d10e      	bne.n	8013386 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013368:	f7fe fa96 	bl	8011898 <enq_lock>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d006      	beq.n	8013380 <f_open+0xc8>
 8013372:	f107 0314 	add.w	r3, r7, #20
 8013376:	4618      	mov	r0, r3
 8013378:	f7ff fa52 	bl	8012820 <dir_register>
 801337c:	4603      	mov	r3, r0
 801337e:	e000      	b.n	8013382 <f_open+0xca>
 8013380:	2312      	movs	r3, #18
 8013382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013386:	79fb      	ldrb	r3, [r7, #7]
 8013388:	f043 0308 	orr.w	r3, r3, #8
 801338c:	71fb      	strb	r3, [r7, #7]
 801338e:	e010      	b.n	80133b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013390:	7ebb      	ldrb	r3, [r7, #26]
 8013392:	f003 0311 	and.w	r3, r3, #17
 8013396:	2b00      	cmp	r3, #0
 8013398:	d003      	beq.n	80133a2 <f_open+0xea>
					res = FR_DENIED;
 801339a:	2307      	movs	r3, #7
 801339c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80133a0:	e007      	b.n	80133b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80133a2:	79fb      	ldrb	r3, [r7, #7]
 80133a4:	f003 0304 	and.w	r3, r3, #4
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d002      	beq.n	80133b2 <f_open+0xfa>
 80133ac:	2308      	movs	r3, #8
 80133ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80133b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d167      	bne.n	801348a <f_open+0x1d2>
 80133ba:	79fb      	ldrb	r3, [r7, #7]
 80133bc:	f003 0308 	and.w	r3, r3, #8
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d062      	beq.n	801348a <f_open+0x1d2>
				dw = GET_FATTIME();
 80133c4:	4ba2      	ldr	r3, [pc, #648]	; (8013650 <f_open+0x398>)
 80133c6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80133c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ca:	330e      	adds	r3, #14
 80133cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fe f95c 	bl	801168c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80133d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133d6:	3316      	adds	r3, #22
 80133d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fe f956 	bl	801168c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80133e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133e2:	330b      	adds	r3, #11
 80133e4:	2220      	movs	r2, #32
 80133e6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133ec:	4611      	mov	r1, r2
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7ff f925 	bl	801263e <ld_clust>
 80133f4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133fa:	2200      	movs	r2, #0
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7ff f93d 	bl	801267c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013404:	331c      	adds	r3, #28
 8013406:	2100      	movs	r1, #0
 8013408:	4618      	mov	r0, r3
 801340a:	f7fe f93f 	bl	801168c <st_dword>
					fs->wflag = 1;
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	2201      	movs	r2, #1
 8013412:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013416:	2b00      	cmp	r3, #0
 8013418:	d037      	beq.n	801348a <f_open+0x1d2>
						dw = fs->winsect;
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801341e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013420:	f107 0314 	add.w	r3, r7, #20
 8013424:	2200      	movs	r2, #0
 8013426:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013428:	4618      	mov	r0, r3
 801342a:	f7fe fe2d 	bl	8012088 <remove_chain>
 801342e:	4603      	mov	r3, r0
 8013430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013438:	2b00      	cmp	r3, #0
 801343a:	d126      	bne.n	801348a <f_open+0x1d2>
							res = move_window(fs, dw);
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013440:	4618      	mov	r0, r3
 8013442:	f7fe fb7d 	bl	8011b40 <move_window>
 8013446:	4603      	mov	r3, r0
 8013448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013450:	3a01      	subs	r2, #1
 8013452:	611a      	str	r2, [r3, #16]
 8013454:	e019      	b.n	801348a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801345a:	2b00      	cmp	r3, #0
 801345c:	d115      	bne.n	801348a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801345e:	7ebb      	ldrb	r3, [r7, #26]
 8013460:	f003 0310 	and.w	r3, r3, #16
 8013464:	2b00      	cmp	r3, #0
 8013466:	d003      	beq.n	8013470 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013468:	2304      	movs	r3, #4
 801346a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801346e:	e00c      	b.n	801348a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013470:	79fb      	ldrb	r3, [r7, #7]
 8013472:	f003 0302 	and.w	r3, r3, #2
 8013476:	2b00      	cmp	r3, #0
 8013478:	d007      	beq.n	801348a <f_open+0x1d2>
 801347a:	7ebb      	ldrb	r3, [r7, #26]
 801347c:	f003 0301 	and.w	r3, r3, #1
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <f_open+0x1d2>
						res = FR_DENIED;
 8013484:	2307      	movs	r3, #7
 8013486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801348a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801348e:	2b00      	cmp	r3, #0
 8013490:	d128      	bne.n	80134e4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013492:	79fb      	ldrb	r3, [r7, #7]
 8013494:	f003 0308 	and.w	r3, r3, #8
 8013498:	2b00      	cmp	r3, #0
 801349a:	d003      	beq.n	80134a4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801349c:	79fb      	ldrb	r3, [r7, #7]
 801349e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134a2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80134ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80134b2:	79fb      	ldrb	r3, [r7, #7]
 80134b4:	f023 0301 	bic.w	r3, r3, #1
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	bf14      	ite	ne
 80134bc:	2301      	movne	r3, #1
 80134be:	2300      	moveq	r3, #0
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	461a      	mov	r2, r3
 80134c4:	f107 0314 	add.w	r3, r7, #20
 80134c8:	4611      	mov	r1, r2
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7fe fa06 	bl	80118dc <inc_lock>
 80134d0:	4602      	mov	r2, r0
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	691b      	ldr	r3, [r3, #16]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d102      	bne.n	80134e4 <f_open+0x22c>
 80134de:	2302      	movs	r3, #2
 80134e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80134e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	f040 80a3 	bne.w	8013634 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134f2:	4611      	mov	r1, r2
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7ff f8a2 	bl	801263e <ld_clust>
 80134fa:	4602      	mov	r2, r0
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013502:	331c      	adds	r3, #28
 8013504:	4618      	mov	r0, r3
 8013506:	f7fe f883 	bl	8011610 <ld_dword>
 801350a:	4602      	mov	r2, r0
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	2200      	movs	r2, #0
 8013514:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013516:	693a      	ldr	r2, [r7, #16]
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	88da      	ldrh	r2, [r3, #6]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	79fa      	ldrb	r2, [r7, #7]
 8013528:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2200      	movs	r2, #0
 801352e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2200      	movs	r2, #0
 8013534:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2200      	movs	r2, #0
 801353a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	3330      	adds	r3, #48	; 0x30
 8013540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013544:	2100      	movs	r1, #0
 8013546:	4618      	mov	r0, r3
 8013548:	f7fe f8ed 	bl	8011726 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801354c:	79fb      	ldrb	r3, [r7, #7]
 801354e:	f003 0320 	and.w	r3, r3, #32
 8013552:	2b00      	cmp	r3, #0
 8013554:	d06e      	beq.n	8013634 <f_open+0x37c>
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d06a      	beq.n	8013634 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	68da      	ldr	r2, [r3, #12]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	895b      	ldrh	r3, [r3, #10]
 801356a:	461a      	mov	r2, r3
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	899b      	ldrh	r3, [r3, #12]
 8013570:	fb03 f302 	mul.w	r3, r3, r2
 8013574:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	689b      	ldr	r3, [r3, #8]
 801357a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	657b      	str	r3, [r7, #84]	; 0x54
 8013582:	e016      	b.n	80135b2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013588:	4618      	mov	r0, r3
 801358a:	f7fe fb96 	bl	8011cba <get_fat>
 801358e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013592:	2b01      	cmp	r3, #1
 8013594:	d802      	bhi.n	801359c <f_open+0x2e4>
 8013596:	2302      	movs	r3, #2
 8013598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801359c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135a2:	d102      	bne.n	80135aa <f_open+0x2f2>
 80135a4:	2301      	movs	r3, #1
 80135a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80135aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80135ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135ae:	1ad3      	subs	r3, r2, r3
 80135b0:	657b      	str	r3, [r7, #84]	; 0x54
 80135b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d103      	bne.n	80135c2 <f_open+0x30a>
 80135ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80135bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135be:	429a      	cmp	r2, r3
 80135c0:	d8e0      	bhi.n	8013584 <f_open+0x2cc>
				}
				fp->clust = clst;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80135c6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80135c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d131      	bne.n	8013634 <f_open+0x37c>
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	899b      	ldrh	r3, [r3, #12]
 80135d4:	461a      	mov	r2, r3
 80135d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80135dc:	fb02 f201 	mul.w	r2, r2, r1
 80135e0:	1a9b      	subs	r3, r3, r2
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d026      	beq.n	8013634 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fe fb46 	bl	8011c7c <clust2sect>
 80135f0:	6478      	str	r0, [r7, #68]	; 0x44
 80135f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d103      	bne.n	8013600 <f_open+0x348>
						res = FR_INT_ERR;
 80135f8:	2302      	movs	r3, #2
 80135fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135fe:	e019      	b.n	8013634 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	899b      	ldrh	r3, [r3, #12]
 8013604:	461a      	mov	r2, r3
 8013606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013608:	fbb3 f2f2 	udiv	r2, r3, r2
 801360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801360e:	441a      	add	r2, r3
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	7858      	ldrb	r0, [r3, #1]
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	6a1a      	ldr	r2, [r3, #32]
 8013622:	2301      	movs	r3, #1
 8013624:	f7fd ff7e 	bl	8011524 <disk_read>
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	d002      	beq.n	8013634 <f_open+0x37c>
 801362e:	2301      	movs	r3, #1
 8013630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013638:	2b00      	cmp	r3, #0
 801363a:	d002      	beq.n	8013642 <f_open+0x38a>
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	2200      	movs	r2, #0
 8013640:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013646:	4618      	mov	r0, r3
 8013648:	3760      	adds	r7, #96	; 0x60
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	274a0000 	.word	0x274a0000

08013654 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b08e      	sub	sp, #56	; 0x38
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
 8013660:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	2200      	movs	r2, #0
 801366a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f107 0214 	add.w	r2, r7, #20
 8013672:	4611      	mov	r1, r2
 8013674:	4618      	mov	r0, r3
 8013676:	f7ff fda3 	bl	80131c0 <validate>
 801367a:	4603      	mov	r3, r0
 801367c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013684:	2b00      	cmp	r3, #0
 8013686:	d107      	bne.n	8013698 <f_read+0x44>
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	7d5b      	ldrb	r3, [r3, #21]
 801368c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013690:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013694:	2b00      	cmp	r3, #0
 8013696:	d002      	beq.n	801369e <f_read+0x4a>
 8013698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801369c:	e135      	b.n	801390a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	7d1b      	ldrb	r3, [r3, #20]
 80136a2:	f003 0301 	and.w	r3, r3, #1
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d101      	bne.n	80136ae <f_read+0x5a>
 80136aa:	2307      	movs	r3, #7
 80136ac:	e12d      	b.n	801390a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	68da      	ldr	r2, [r3, #12]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	699b      	ldr	r3, [r3, #24]
 80136b6:	1ad3      	subs	r3, r2, r3
 80136b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80136ba:	687a      	ldr	r2, [r7, #4]
 80136bc:	6a3b      	ldr	r3, [r7, #32]
 80136be:	429a      	cmp	r2, r3
 80136c0:	f240 811e 	bls.w	8013900 <f_read+0x2ac>
 80136c4:	6a3b      	ldr	r3, [r7, #32]
 80136c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80136c8:	e11a      	b.n	8013900 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	699b      	ldr	r3, [r3, #24]
 80136ce:	697a      	ldr	r2, [r7, #20]
 80136d0:	8992      	ldrh	r2, [r2, #12]
 80136d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80136d6:	fb02 f201 	mul.w	r2, r2, r1
 80136da:	1a9b      	subs	r3, r3, r2
 80136dc:	2b00      	cmp	r3, #0
 80136de:	f040 80d5 	bne.w	801388c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	699b      	ldr	r3, [r3, #24]
 80136e6:	697a      	ldr	r2, [r7, #20]
 80136e8:	8992      	ldrh	r2, [r2, #12]
 80136ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80136ee:	697a      	ldr	r2, [r7, #20]
 80136f0:	8952      	ldrh	r2, [r2, #10]
 80136f2:	3a01      	subs	r2, #1
 80136f4:	4013      	ands	r3, r2
 80136f6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80136f8:	69fb      	ldr	r3, [r7, #28]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d12f      	bne.n	801375e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	699b      	ldr	r3, [r3, #24]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d103      	bne.n	801370e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	689b      	ldr	r3, [r3, #8]
 801370a:	633b      	str	r3, [r7, #48]	; 0x30
 801370c:	e013      	b.n	8013736 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013712:	2b00      	cmp	r3, #0
 8013714:	d007      	beq.n	8013726 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	699b      	ldr	r3, [r3, #24]
 801371a:	4619      	mov	r1, r3
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	f7fe fdb0 	bl	8012282 <clmt_clust>
 8013722:	6338      	str	r0, [r7, #48]	; 0x30
 8013724:	e007      	b.n	8013736 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013726:	68fa      	ldr	r2, [r7, #12]
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	69db      	ldr	r3, [r3, #28]
 801372c:	4619      	mov	r1, r3
 801372e:	4610      	mov	r0, r2
 8013730:	f7fe fac3 	bl	8011cba <get_fat>
 8013734:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013738:	2b01      	cmp	r3, #1
 801373a:	d804      	bhi.n	8013746 <f_read+0xf2>
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2202      	movs	r2, #2
 8013740:	755a      	strb	r2, [r3, #21]
 8013742:	2302      	movs	r3, #2
 8013744:	e0e1      	b.n	801390a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801374c:	d104      	bne.n	8013758 <f_read+0x104>
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2201      	movs	r2, #1
 8013752:	755a      	strb	r2, [r3, #21]
 8013754:	2301      	movs	r3, #1
 8013756:	e0d8      	b.n	801390a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801375c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801375e:	697a      	ldr	r2, [r7, #20]
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	69db      	ldr	r3, [r3, #28]
 8013764:	4619      	mov	r1, r3
 8013766:	4610      	mov	r0, r2
 8013768:	f7fe fa88 	bl	8011c7c <clust2sect>
 801376c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801376e:	69bb      	ldr	r3, [r7, #24]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d104      	bne.n	801377e <f_read+0x12a>
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	2202      	movs	r2, #2
 8013778:	755a      	strb	r2, [r3, #21]
 801377a:	2302      	movs	r3, #2
 801377c:	e0c5      	b.n	801390a <f_read+0x2b6>
			sect += csect;
 801377e:	69ba      	ldr	r2, [r7, #24]
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	4413      	add	r3, r2
 8013784:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	899b      	ldrh	r3, [r3, #12]
 801378a:	461a      	mov	r2, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013792:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013796:	2b00      	cmp	r3, #0
 8013798:	d041      	beq.n	801381e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801379a:	69fa      	ldr	r2, [r7, #28]
 801379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379e:	4413      	add	r3, r2
 80137a0:	697a      	ldr	r2, [r7, #20]
 80137a2:	8952      	ldrh	r2, [r2, #10]
 80137a4:	4293      	cmp	r3, r2
 80137a6:	d905      	bls.n	80137b4 <f_read+0x160>
					cc = fs->csize - csect;
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	895b      	ldrh	r3, [r3, #10]
 80137ac:	461a      	mov	r2, r3
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	1ad3      	subs	r3, r2, r3
 80137b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	7858      	ldrb	r0, [r3, #1]
 80137b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ba:	69ba      	ldr	r2, [r7, #24]
 80137bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137be:	f7fd feb1 	bl	8011524 <disk_read>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d004      	beq.n	80137d2 <f_read+0x17e>
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	2201      	movs	r2, #1
 80137cc:	755a      	strb	r2, [r3, #21]
 80137ce:	2301      	movs	r3, #1
 80137d0:	e09b      	b.n	801390a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	7d1b      	ldrb	r3, [r3, #20]
 80137d6:	b25b      	sxtb	r3, r3
 80137d8:	2b00      	cmp	r3, #0
 80137da:	da18      	bge.n	801380e <f_read+0x1ba>
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	6a1a      	ldr	r2, [r3, #32]
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	1ad3      	subs	r3, r2, r3
 80137e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d911      	bls.n	801380e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	6a1a      	ldr	r2, [r3, #32]
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	1ad3      	subs	r3, r2, r3
 80137f2:	697a      	ldr	r2, [r7, #20]
 80137f4:	8992      	ldrh	r2, [r2, #12]
 80137f6:	fb02 f303 	mul.w	r3, r2, r3
 80137fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137fc:	18d0      	adds	r0, r2, r3
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	899b      	ldrh	r3, [r3, #12]
 8013808:	461a      	mov	r2, r3
 801380a:	f7fd ff6b 	bl	80116e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	899b      	ldrh	r3, [r3, #12]
 8013812:	461a      	mov	r2, r3
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	fb02 f303 	mul.w	r3, r2, r3
 801381a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801381c:	e05c      	b.n	80138d8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	6a1b      	ldr	r3, [r3, #32]
 8013822:	69ba      	ldr	r2, [r7, #24]
 8013824:	429a      	cmp	r2, r3
 8013826:	d02e      	beq.n	8013886 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	7d1b      	ldrb	r3, [r3, #20]
 801382c:	b25b      	sxtb	r3, r3
 801382e:	2b00      	cmp	r3, #0
 8013830:	da18      	bge.n	8013864 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	7858      	ldrb	r0, [r3, #1]
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	6a1a      	ldr	r2, [r3, #32]
 8013840:	2301      	movs	r3, #1
 8013842:	f7fd fe8f 	bl	8011564 <disk_write>
 8013846:	4603      	mov	r3, r0
 8013848:	2b00      	cmp	r3, #0
 801384a:	d004      	beq.n	8013856 <f_read+0x202>
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2201      	movs	r2, #1
 8013850:	755a      	strb	r2, [r3, #21]
 8013852:	2301      	movs	r3, #1
 8013854:	e059      	b.n	801390a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	7d1b      	ldrb	r3, [r3, #20]
 801385a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801385e:	b2da      	uxtb	r2, r3
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	7858      	ldrb	r0, [r3, #1]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801386e:	2301      	movs	r3, #1
 8013870:	69ba      	ldr	r2, [r7, #24]
 8013872:	f7fd fe57 	bl	8011524 <disk_read>
 8013876:	4603      	mov	r3, r0
 8013878:	2b00      	cmp	r3, #0
 801387a:	d004      	beq.n	8013886 <f_read+0x232>
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2201      	movs	r2, #1
 8013880:	755a      	strb	r2, [r3, #21]
 8013882:	2301      	movs	r3, #1
 8013884:	e041      	b.n	801390a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	69ba      	ldr	r2, [r7, #24]
 801388a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	899b      	ldrh	r3, [r3, #12]
 8013890:	4618      	mov	r0, r3
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	699b      	ldr	r3, [r3, #24]
 8013896:	697a      	ldr	r2, [r7, #20]
 8013898:	8992      	ldrh	r2, [r2, #12]
 801389a:	fbb3 f1f2 	udiv	r1, r3, r2
 801389e:	fb02 f201 	mul.w	r2, r2, r1
 80138a2:	1a9b      	subs	r3, r3, r2
 80138a4:	1ac3      	subs	r3, r0, r3
 80138a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80138a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d901      	bls.n	80138b4 <f_read+0x260>
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	699b      	ldr	r3, [r3, #24]
 80138be:	697a      	ldr	r2, [r7, #20]
 80138c0:	8992      	ldrh	r2, [r2, #12]
 80138c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80138c6:	fb02 f200 	mul.w	r2, r2, r0
 80138ca:	1a9b      	subs	r3, r3, r2
 80138cc:	440b      	add	r3, r1
 80138ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138d0:	4619      	mov	r1, r3
 80138d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138d4:	f7fd ff06 	bl	80116e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80138d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138dc:	4413      	add	r3, r2
 80138de:	627b      	str	r3, [r7, #36]	; 0x24
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	699a      	ldr	r2, [r3, #24]
 80138e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e6:	441a      	add	r2, r3
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	619a      	str	r2, [r3, #24]
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f2:	441a      	add	r2, r3
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	601a      	str	r2, [r3, #0]
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138fc:	1ad3      	subs	r3, r2, r3
 80138fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	f47f aee1 	bne.w	80136ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013908:	2300      	movs	r3, #0
}
 801390a:	4618      	mov	r0, r3
 801390c:	3738      	adds	r7, #56	; 0x38
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b08c      	sub	sp, #48	; 0x30
 8013916:	af00      	add	r7, sp, #0
 8013918:	60f8      	str	r0, [r7, #12]
 801391a:	60b9      	str	r1, [r7, #8]
 801391c:	607a      	str	r2, [r7, #4]
 801391e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	2200      	movs	r2, #0
 8013928:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	f107 0210 	add.w	r2, r7, #16
 8013930:	4611      	mov	r1, r2
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff fc44 	bl	80131c0 <validate>
 8013938:	4603      	mov	r3, r0
 801393a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801393e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013942:	2b00      	cmp	r3, #0
 8013944:	d107      	bne.n	8013956 <f_write+0x44>
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	7d5b      	ldrb	r3, [r3, #21]
 801394a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801394e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013952:	2b00      	cmp	r3, #0
 8013954:	d002      	beq.n	801395c <f_write+0x4a>
 8013956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801395a:	e16a      	b.n	8013c32 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	7d1b      	ldrb	r3, [r3, #20]
 8013960:	f003 0302 	and.w	r3, r3, #2
 8013964:	2b00      	cmp	r3, #0
 8013966:	d101      	bne.n	801396c <f_write+0x5a>
 8013968:	2307      	movs	r3, #7
 801396a:	e162      	b.n	8013c32 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	699a      	ldr	r2, [r3, #24]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	441a      	add	r2, r3
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	699b      	ldr	r3, [r3, #24]
 8013978:	429a      	cmp	r2, r3
 801397a:	f080 814c 	bcs.w	8013c16 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	699b      	ldr	r3, [r3, #24]
 8013982:	43db      	mvns	r3, r3
 8013984:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013986:	e146      	b.n	8013c16 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	699b      	ldr	r3, [r3, #24]
 801398c:	693a      	ldr	r2, [r7, #16]
 801398e:	8992      	ldrh	r2, [r2, #12]
 8013990:	fbb3 f1f2 	udiv	r1, r3, r2
 8013994:	fb02 f201 	mul.w	r2, r2, r1
 8013998:	1a9b      	subs	r3, r3, r2
 801399a:	2b00      	cmp	r3, #0
 801399c:	f040 80f1 	bne.w	8013b82 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	699b      	ldr	r3, [r3, #24]
 80139a4:	693a      	ldr	r2, [r7, #16]
 80139a6:	8992      	ldrh	r2, [r2, #12]
 80139a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80139ac:	693a      	ldr	r2, [r7, #16]
 80139ae:	8952      	ldrh	r2, [r2, #10]
 80139b0:	3a01      	subs	r2, #1
 80139b2:	4013      	ands	r3, r2
 80139b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d143      	bne.n	8013a44 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	699b      	ldr	r3, [r3, #24]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d10c      	bne.n	80139de <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	689b      	ldr	r3, [r3, #8]
 80139c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80139ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d11a      	bne.n	8013a06 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	2100      	movs	r1, #0
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7fe fbbc 	bl	8012152 <create_chain>
 80139da:	62b8      	str	r0, [r7, #40]	; 0x28
 80139dc:	e013      	b.n	8013a06 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d007      	beq.n	80139f6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	699b      	ldr	r3, [r3, #24]
 80139ea:	4619      	mov	r1, r3
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	f7fe fc48 	bl	8012282 <clmt_clust>
 80139f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80139f4:	e007      	b.n	8013a06 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80139f6:	68fa      	ldr	r2, [r7, #12]
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	69db      	ldr	r3, [r3, #28]
 80139fc:	4619      	mov	r1, r3
 80139fe:	4610      	mov	r0, r2
 8013a00:	f7fe fba7 	bl	8012152 <create_chain>
 8013a04:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f000 8109 	beq.w	8013c20 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a10:	2b01      	cmp	r3, #1
 8013a12:	d104      	bne.n	8013a1e <f_write+0x10c>
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2202      	movs	r2, #2
 8013a18:	755a      	strb	r2, [r3, #21]
 8013a1a:	2302      	movs	r3, #2
 8013a1c:	e109      	b.n	8013c32 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a24:	d104      	bne.n	8013a30 <f_write+0x11e>
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	2201      	movs	r2, #1
 8013a2a:	755a      	strb	r2, [r3, #21]
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	e100      	b.n	8013c32 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a34:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d102      	bne.n	8013a44 <f_write+0x132>
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a42:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	7d1b      	ldrb	r3, [r3, #20]
 8013a48:	b25b      	sxtb	r3, r3
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	da18      	bge.n	8013a80 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	7858      	ldrb	r0, [r3, #1]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	6a1a      	ldr	r2, [r3, #32]
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	f7fd fd81 	bl	8011564 <disk_write>
 8013a62:	4603      	mov	r3, r0
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d004      	beq.n	8013a72 <f_write+0x160>
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	755a      	strb	r2, [r3, #21]
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e0df      	b.n	8013c32 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	7d1b      	ldrb	r3, [r3, #20]
 8013a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a7a:	b2da      	uxtb	r2, r3
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013a80:	693a      	ldr	r2, [r7, #16]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	69db      	ldr	r3, [r3, #28]
 8013a86:	4619      	mov	r1, r3
 8013a88:	4610      	mov	r0, r2
 8013a8a:	f7fe f8f7 	bl	8011c7c <clust2sect>
 8013a8e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d104      	bne.n	8013aa0 <f_write+0x18e>
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	2202      	movs	r2, #2
 8013a9a:	755a      	strb	r2, [r3, #21]
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	e0c8      	b.n	8013c32 <f_write+0x320>
			sect += csect;
 8013aa0:	697a      	ldr	r2, [r7, #20]
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	899b      	ldrh	r3, [r3, #12]
 8013aac:	461a      	mov	r2, r3
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ab4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013ab6:	6a3b      	ldr	r3, [r7, #32]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d043      	beq.n	8013b44 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013abc:	69ba      	ldr	r2, [r7, #24]
 8013abe:	6a3b      	ldr	r3, [r7, #32]
 8013ac0:	4413      	add	r3, r2
 8013ac2:	693a      	ldr	r2, [r7, #16]
 8013ac4:	8952      	ldrh	r2, [r2, #10]
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d905      	bls.n	8013ad6 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	895b      	ldrh	r3, [r3, #10]
 8013ace:	461a      	mov	r2, r3
 8013ad0:	69bb      	ldr	r3, [r7, #24]
 8013ad2:	1ad3      	subs	r3, r2, r3
 8013ad4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	7858      	ldrb	r0, [r3, #1]
 8013ada:	6a3b      	ldr	r3, [r7, #32]
 8013adc:	697a      	ldr	r2, [r7, #20]
 8013ade:	69f9      	ldr	r1, [r7, #28]
 8013ae0:	f7fd fd40 	bl	8011564 <disk_write>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d004      	beq.n	8013af4 <f_write+0x1e2>
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2201      	movs	r2, #1
 8013aee:	755a      	strb	r2, [r3, #21]
 8013af0:	2301      	movs	r3, #1
 8013af2:	e09e      	b.n	8013c32 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	6a1a      	ldr	r2, [r3, #32]
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	1ad3      	subs	r3, r2, r3
 8013afc:	6a3a      	ldr	r2, [r7, #32]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d918      	bls.n	8013b34 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	6a1a      	ldr	r2, [r3, #32]
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	1ad3      	subs	r3, r2, r3
 8013b10:	693a      	ldr	r2, [r7, #16]
 8013b12:	8992      	ldrh	r2, [r2, #12]
 8013b14:	fb02 f303 	mul.w	r3, r2, r3
 8013b18:	69fa      	ldr	r2, [r7, #28]
 8013b1a:	18d1      	adds	r1, r2, r3
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	899b      	ldrh	r3, [r3, #12]
 8013b20:	461a      	mov	r2, r3
 8013b22:	f7fd fddf 	bl	80116e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	7d1b      	ldrb	r3, [r3, #20]
 8013b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b2e:	b2da      	uxtb	r2, r3
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	899b      	ldrh	r3, [r3, #12]
 8013b38:	461a      	mov	r2, r3
 8013b3a:	6a3b      	ldr	r3, [r7, #32]
 8013b3c:	fb02 f303 	mul.w	r3, r2, r3
 8013b40:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013b42:	e04b      	b.n	8013bdc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	6a1b      	ldr	r3, [r3, #32]
 8013b48:	697a      	ldr	r2, [r7, #20]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d016      	beq.n	8013b7c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	699a      	ldr	r2, [r3, #24]
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d210      	bcs.n	8013b7c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	7858      	ldrb	r0, [r3, #1]
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b64:	2301      	movs	r3, #1
 8013b66:	697a      	ldr	r2, [r7, #20]
 8013b68:	f7fd fcdc 	bl	8011524 <disk_read>
 8013b6c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d004      	beq.n	8013b7c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2201      	movs	r2, #1
 8013b76:	755a      	strb	r2, [r3, #21]
 8013b78:	2301      	movs	r3, #1
 8013b7a:	e05a      	b.n	8013c32 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	697a      	ldr	r2, [r7, #20]
 8013b80:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	899b      	ldrh	r3, [r3, #12]
 8013b86:	4618      	mov	r0, r3
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	699b      	ldr	r3, [r3, #24]
 8013b8c:	693a      	ldr	r2, [r7, #16]
 8013b8e:	8992      	ldrh	r2, [r2, #12]
 8013b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b94:	fb02 f201 	mul.w	r2, r2, r1
 8013b98:	1a9b      	subs	r3, r3, r2
 8013b9a:	1ac3      	subs	r3, r0, r3
 8013b9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d901      	bls.n	8013baa <f_write+0x298>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	699b      	ldr	r3, [r3, #24]
 8013bb4:	693a      	ldr	r2, [r7, #16]
 8013bb6:	8992      	ldrh	r2, [r2, #12]
 8013bb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bbc:	fb02 f200 	mul.w	r2, r2, r0
 8013bc0:	1a9b      	subs	r3, r3, r2
 8013bc2:	440b      	add	r3, r1
 8013bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bc6:	69f9      	ldr	r1, [r7, #28]
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fd fd8b 	bl	80116e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	7d1b      	ldrb	r3, [r3, #20]
 8013bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013bd6:	b2da      	uxtb	r2, r3
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013bdc:	69fa      	ldr	r2, [r7, #28]
 8013bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be0:	4413      	add	r3, r2
 8013be2:	61fb      	str	r3, [r7, #28]
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	699a      	ldr	r2, [r3, #24]
 8013be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bea:	441a      	add	r2, r3
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	619a      	str	r2, [r3, #24]
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	68da      	ldr	r2, [r3, #12]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	699b      	ldr	r3, [r3, #24]
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	bf38      	it	cc
 8013bfc:	461a      	movcc	r2, r3
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	60da      	str	r2, [r3, #12]
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c08:	441a      	add	r2, r3
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	601a      	str	r2, [r3, #0]
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c12:	1ad3      	subs	r3, r2, r3
 8013c14:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f47f aeb5 	bne.w	8013988 <f_write+0x76>
 8013c1e:	e000      	b.n	8013c22 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c20:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	7d1b      	ldrb	r3, [r3, #20]
 8013c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c2a:	b2da      	uxtb	r2, r3
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013c30:	2300      	movs	r3, #0
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3730      	adds	r7, #48	; 0x30
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
	...

08013c3c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b086      	sub	sp, #24
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f107 0208 	add.w	r2, r7, #8
 8013c4a:	4611      	mov	r1, r2
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7ff fab7 	bl	80131c0 <validate>
 8013c52:	4603      	mov	r3, r0
 8013c54:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c56:	7dfb      	ldrb	r3, [r7, #23]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d167      	bne.n	8013d2c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	7d1b      	ldrb	r3, [r3, #20]
 8013c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d061      	beq.n	8013d2c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	7d1b      	ldrb	r3, [r3, #20]
 8013c6c:	b25b      	sxtb	r3, r3
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	da15      	bge.n	8013c9e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	7858      	ldrb	r0, [r3, #1]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6a1a      	ldr	r2, [r3, #32]
 8013c80:	2301      	movs	r3, #1
 8013c82:	f7fd fc6f 	bl	8011564 <disk_write>
 8013c86:	4603      	mov	r3, r0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d001      	beq.n	8013c90 <f_sync+0x54>
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	e04e      	b.n	8013d2e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	7d1b      	ldrb	r3, [r3, #20]
 8013c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c98:	b2da      	uxtb	r2, r3
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013c9e:	4b26      	ldr	r3, [pc, #152]	; (8013d38 <f_sync+0xfc>)
 8013ca0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013ca2:	68ba      	ldr	r2, [r7, #8]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ca8:	4619      	mov	r1, r3
 8013caa:	4610      	mov	r0, r2
 8013cac:	f7fd ff48 	bl	8011b40 <move_window>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013cb4:	7dfb      	ldrb	r3, [r7, #23]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d138      	bne.n	8013d2c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cbe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	330b      	adds	r3, #11
 8013cc4:	781a      	ldrb	r2, [r3, #0]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	330b      	adds	r3, #11
 8013cca:	f042 0220 	orr.w	r2, r2, #32
 8013cce:	b2d2      	uxtb	r2, r2
 8013cd0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6818      	ldr	r0, [r3, #0]
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	689b      	ldr	r3, [r3, #8]
 8013cda:	461a      	mov	r2, r3
 8013cdc:	68f9      	ldr	r1, [r7, #12]
 8013cde:	f7fe fccd 	bl	801267c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	f103 021c 	add.w	r2, r3, #28
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	4619      	mov	r1, r3
 8013cee:	4610      	mov	r0, r2
 8013cf0:	f7fd fccc 	bl	801168c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	3316      	adds	r3, #22
 8013cf8:	6939      	ldr	r1, [r7, #16]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fd fcc6 	bl	801168c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	3312      	adds	r3, #18
 8013d04:	2100      	movs	r1, #0
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7fd fca5 	bl	8011656 <st_word>
					fs->wflag = 1;
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	2201      	movs	r2, #1
 8013d10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7fd ff41 	bl	8011b9c <sync_fs>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	7d1b      	ldrb	r3, [r3, #20]
 8013d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013d26:	b2da      	uxtb	r2, r3
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3718      	adds	r7, #24
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	274a0000 	.word	0x274a0000

08013d3c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b084      	sub	sp, #16
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7ff ff79 	bl	8013c3c <f_sync>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013d4e:	7bfb      	ldrb	r3, [r7, #15]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d118      	bne.n	8013d86 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f107 0208 	add.w	r2, r7, #8
 8013d5a:	4611      	mov	r1, r2
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7ff fa2f 	bl	80131c0 <validate>
 8013d62:	4603      	mov	r3, r0
 8013d64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013d66:	7bfb      	ldrb	r3, [r7, #15]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10c      	bne.n	8013d86 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	691b      	ldr	r3, [r3, #16]
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7fd fe41 	bl	80119f8 <dec_lock>
 8013d76:	4603      	mov	r3, r0
 8013d78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013d7a:	7bfb      	ldrb	r3, [r7, #15]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d102      	bne.n	8013d86 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2200      	movs	r2, #0
 8013d84:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3710      	adds	r7, #16
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013d90:	b590      	push	{r4, r7, lr}
 8013d92:	b091      	sub	sp, #68	; 0x44
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013d98:	f107 0108 	add.w	r1, r7, #8
 8013d9c:	1d3b      	adds	r3, r7, #4
 8013d9e:	2200      	movs	r2, #0
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fe ff87 	bl	8012cb4 <find_volume>
 8013da6:	4603      	mov	r3, r0
 8013da8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013dac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d131      	bne.n	8013e18 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	f107 030c 	add.w	r3, r7, #12
 8013dbe:	4611      	mov	r1, r2
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7fe fe47 	bl	8012a54 <follow_path>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013dcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d11a      	bne.n	8013e0a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013dd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013dd8:	b25b      	sxtb	r3, r3
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	da03      	bge.n	8013de6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	697a      	ldr	r2, [r7, #20]
 8013de2:	619a      	str	r2, [r3, #24]
 8013de4:	e011      	b.n	8013e0a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013de6:	7cbb      	ldrb	r3, [r7, #18]
 8013de8:	f003 0310 	and.w	r3, r3, #16
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d009      	beq.n	8013e04 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013df4:	68bc      	ldr	r4, [r7, #8]
 8013df6:	4611      	mov	r1, r2
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7fe fc20 	bl	801263e <ld_clust>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	61a3      	str	r3, [r4, #24]
 8013e02:	e002      	b.n	8013e0a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013e04:	2305      	movs	r3, #5
 8013e06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e0e:	2b04      	cmp	r3, #4
 8013e10:	d102      	bne.n	8013e18 <f_chdir+0x88>
 8013e12:	2305      	movs	r3, #5
 8013e14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013e18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3744      	adds	r7, #68	; 0x44
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd90      	pop	{r4, r7, pc}

08013e24 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b090      	sub	sp, #64	; 0x40
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f107 0208 	add.w	r2, r7, #8
 8013e34:	4611      	mov	r1, r2
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7ff f9c2 	bl	80131c0 <validate>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013e42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d103      	bne.n	8013e52 <f_lseek+0x2e>
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	7d5b      	ldrb	r3, [r3, #21]
 8013e4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013e52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d002      	beq.n	8013e60 <f_lseek+0x3c>
 8013e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e5e:	e201      	b.n	8014264 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	f000 80d9 	beq.w	801401c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e70:	d15a      	bne.n	8013f28 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e76:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7a:	1d1a      	adds	r2, r3, #4
 8013e7c:	627a      	str	r2, [r7, #36]	; 0x24
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	617b      	str	r3, [r7, #20]
 8013e82:	2302      	movs	r3, #2
 8013e84:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	689b      	ldr	r3, [r3, #8]
 8013e8a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d03a      	beq.n	8013f08 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e94:	613b      	str	r3, [r7, #16]
 8013e96:	2300      	movs	r3, #0
 8013e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9c:	3302      	adds	r3, #2
 8013e9e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea2:	60fb      	str	r3, [r7, #12]
 8013ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fd ff03 	bl	8011cba <get_fat>
 8013eb4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d804      	bhi.n	8013ec6 <f_lseek+0xa2>
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2202      	movs	r2, #2
 8013ec0:	755a      	strb	r2, [r3, #21]
 8013ec2:	2302      	movs	r3, #2
 8013ec4:	e1ce      	b.n	8014264 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ecc:	d104      	bne.n	8013ed8 <f_lseek+0xb4>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2201      	movs	r2, #1
 8013ed2:	755a      	strb	r2, [r3, #21]
 8013ed4:	2301      	movs	r3, #1
 8013ed6:	e1c5      	b.n	8014264 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	3301      	adds	r3, #1
 8013edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d0de      	beq.n	8013ea0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d809      	bhi.n	8013efe <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	1d1a      	adds	r2, r3, #4
 8013eee:	627a      	str	r2, [r7, #36]	; 0x24
 8013ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ef2:	601a      	str	r2, [r3, #0]
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	1d1a      	adds	r2, r3, #4
 8013ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8013efa:	693a      	ldr	r2, [r7, #16]
 8013efc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	69db      	ldr	r3, [r3, #28]
 8013f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d3c4      	bcc.n	8013e92 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f0e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d803      	bhi.n	8013f20 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	601a      	str	r2, [r3, #0]
 8013f1e:	e19f      	b.n	8014260 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013f20:	2311      	movs	r3, #17
 8013f22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013f26:	e19b      	b.n	8014260 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	68db      	ldr	r3, [r3, #12]
 8013f2c:	683a      	ldr	r2, [r7, #0]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d902      	bls.n	8013f38 <f_lseek+0x114>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	683a      	ldr	r2, [r7, #0]
 8013f3c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f000 818d 	beq.w	8014260 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	3b01      	subs	r3, #1
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f7fe f998 	bl	8012282 <clmt_clust>
 8013f52:	4602      	mov	r2, r0
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013f58:	68ba      	ldr	r2, [r7, #8]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	69db      	ldr	r3, [r3, #28]
 8013f5e:	4619      	mov	r1, r3
 8013f60:	4610      	mov	r0, r2
 8013f62:	f7fd fe8b 	bl	8011c7c <clust2sect>
 8013f66:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013f68:	69bb      	ldr	r3, [r7, #24]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d104      	bne.n	8013f78 <f_lseek+0x154>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2202      	movs	r2, #2
 8013f72:	755a      	strb	r2, [r3, #21]
 8013f74:	2302      	movs	r3, #2
 8013f76:	e175      	b.n	8014264 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	3b01      	subs	r3, #1
 8013f7c:	68ba      	ldr	r2, [r7, #8]
 8013f7e:	8992      	ldrh	r2, [r2, #12]
 8013f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f84:	68ba      	ldr	r2, [r7, #8]
 8013f86:	8952      	ldrh	r2, [r2, #10]
 8013f88:	3a01      	subs	r2, #1
 8013f8a:	4013      	ands	r3, r2
 8013f8c:	69ba      	ldr	r2, [r7, #24]
 8013f8e:	4413      	add	r3, r2
 8013f90:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	699b      	ldr	r3, [r3, #24]
 8013f96:	68ba      	ldr	r2, [r7, #8]
 8013f98:	8992      	ldrh	r2, [r2, #12]
 8013f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f9e:	fb02 f201 	mul.w	r2, r2, r1
 8013fa2:	1a9b      	subs	r3, r3, r2
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	f000 815b 	beq.w	8014260 <f_lseek+0x43c>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6a1b      	ldr	r3, [r3, #32]
 8013fae:	69ba      	ldr	r2, [r7, #24]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	f000 8155 	beq.w	8014260 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	7d1b      	ldrb	r3, [r3, #20]
 8013fba:	b25b      	sxtb	r3, r3
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	da18      	bge.n	8013ff2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	7858      	ldrb	r0, [r3, #1]
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6a1a      	ldr	r2, [r3, #32]
 8013fce:	2301      	movs	r3, #1
 8013fd0:	f7fd fac8 	bl	8011564 <disk_write>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d004      	beq.n	8013fe4 <f_lseek+0x1c0>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2201      	movs	r2, #1
 8013fde:	755a      	strb	r2, [r3, #21]
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	e13f      	b.n	8014264 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	7d1b      	ldrb	r3, [r3, #20]
 8013fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	7858      	ldrb	r0, [r3, #1]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	69ba      	ldr	r2, [r7, #24]
 8014000:	f7fd fa90 	bl	8011524 <disk_read>
 8014004:	4603      	mov	r3, r0
 8014006:	2b00      	cmp	r3, #0
 8014008:	d004      	beq.n	8014014 <f_lseek+0x1f0>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2201      	movs	r2, #1
 801400e:	755a      	strb	r2, [r3, #21]
 8014010:	2301      	movs	r3, #1
 8014012:	e127      	b.n	8014264 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	69ba      	ldr	r2, [r7, #24]
 8014018:	621a      	str	r2, [r3, #32]
 801401a:	e121      	b.n	8014260 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	68db      	ldr	r3, [r3, #12]
 8014020:	683a      	ldr	r2, [r7, #0]
 8014022:	429a      	cmp	r2, r3
 8014024:	d908      	bls.n	8014038 <f_lseek+0x214>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	7d1b      	ldrb	r3, [r3, #20]
 801402a:	f003 0302 	and.w	r3, r3, #2
 801402e:	2b00      	cmp	r3, #0
 8014030:	d102      	bne.n	8014038 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	68db      	ldr	r3, [r3, #12]
 8014036:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	699b      	ldr	r3, [r3, #24]
 801403c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801403e:	2300      	movs	r3, #0
 8014040:	637b      	str	r3, [r7, #52]	; 0x34
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014046:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	f000 80b5 	beq.w	80141ba <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	895b      	ldrh	r3, [r3, #10]
 8014054:	461a      	mov	r2, r3
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	899b      	ldrh	r3, [r3, #12]
 801405a:	fb03 f302 	mul.w	r3, r3, r2
 801405e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014060:	6a3b      	ldr	r3, [r7, #32]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d01b      	beq.n	801409e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	1e5a      	subs	r2, r3, #1
 801406a:	69fb      	ldr	r3, [r7, #28]
 801406c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014070:	6a3b      	ldr	r3, [r7, #32]
 8014072:	1e59      	subs	r1, r3, #1
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801407a:	429a      	cmp	r2, r3
 801407c:	d30f      	bcc.n	801409e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801407e:	6a3b      	ldr	r3, [r7, #32]
 8014080:	1e5a      	subs	r2, r3, #1
 8014082:	69fb      	ldr	r3, [r7, #28]
 8014084:	425b      	negs	r3, r3
 8014086:	401a      	ands	r2, r3
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	699b      	ldr	r3, [r3, #24]
 8014090:	683a      	ldr	r2, [r7, #0]
 8014092:	1ad3      	subs	r3, r2, r3
 8014094:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	69db      	ldr	r3, [r3, #28]
 801409a:	63bb      	str	r3, [r7, #56]	; 0x38
 801409c:	e022      	b.n	80140e4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80140a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d119      	bne.n	80140de <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2100      	movs	r1, #0
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7fe f84f 	bl	8012152 <create_chain>
 80140b4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80140b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d104      	bne.n	80140c6 <f_lseek+0x2a2>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2202      	movs	r2, #2
 80140c0:	755a      	strb	r2, [r3, #21]
 80140c2:	2302      	movs	r3, #2
 80140c4:	e0ce      	b.n	8014264 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80140c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140cc:	d104      	bne.n	80140d8 <f_lseek+0x2b4>
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2201      	movs	r2, #1
 80140d2:	755a      	strb	r2, [r3, #21]
 80140d4:	2301      	movs	r3, #1
 80140d6:	e0c5      	b.n	8014264 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140dc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140e2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80140e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d067      	beq.n	80141ba <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80140ea:	e03a      	b.n	8014162 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80140ec:	683a      	ldr	r2, [r7, #0]
 80140ee:	69fb      	ldr	r3, [r7, #28]
 80140f0:	1ad3      	subs	r3, r2, r3
 80140f2:	603b      	str	r3, [r7, #0]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	699a      	ldr	r2, [r3, #24]
 80140f8:	69fb      	ldr	r3, [r7, #28]
 80140fa:	441a      	add	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	7d1b      	ldrb	r3, [r3, #20]
 8014104:	f003 0302 	and.w	r3, r3, #2
 8014108:	2b00      	cmp	r3, #0
 801410a:	d00b      	beq.n	8014124 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014110:	4618      	mov	r0, r3
 8014112:	f7fe f81e 	bl	8012152 <create_chain>
 8014116:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411a:	2b00      	cmp	r3, #0
 801411c:	d108      	bne.n	8014130 <f_lseek+0x30c>
							ofs = 0; break;
 801411e:	2300      	movs	r3, #0
 8014120:	603b      	str	r3, [r7, #0]
 8014122:	e022      	b.n	801416a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014128:	4618      	mov	r0, r3
 801412a:	f7fd fdc6 	bl	8011cba <get_fat>
 801412e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014136:	d104      	bne.n	8014142 <f_lseek+0x31e>
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2201      	movs	r2, #1
 801413c:	755a      	strb	r2, [r3, #21]
 801413e:	2301      	movs	r3, #1
 8014140:	e090      	b.n	8014264 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014144:	2b01      	cmp	r3, #1
 8014146:	d904      	bls.n	8014152 <f_lseek+0x32e>
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	69db      	ldr	r3, [r3, #28]
 801414c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801414e:	429a      	cmp	r2, r3
 8014150:	d304      	bcc.n	801415c <f_lseek+0x338>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2202      	movs	r2, #2
 8014156:	755a      	strb	r2, [r3, #21]
 8014158:	2302      	movs	r3, #2
 801415a:	e083      	b.n	8014264 <f_lseek+0x440>
					fp->clust = clst;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014160:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014162:	683a      	ldr	r2, [r7, #0]
 8014164:	69fb      	ldr	r3, [r7, #28]
 8014166:	429a      	cmp	r2, r3
 8014168:	d8c0      	bhi.n	80140ec <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	699a      	ldr	r2, [r3, #24]
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	441a      	add	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	899b      	ldrh	r3, [r3, #12]
 801417a:	461a      	mov	r2, r3
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014182:	fb02 f201 	mul.w	r2, r2, r1
 8014186:	1a9b      	subs	r3, r3, r2
 8014188:	2b00      	cmp	r3, #0
 801418a:	d016      	beq.n	80141ba <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014190:	4618      	mov	r0, r3
 8014192:	f7fd fd73 	bl	8011c7c <clust2sect>
 8014196:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801419a:	2b00      	cmp	r3, #0
 801419c:	d104      	bne.n	80141a8 <f_lseek+0x384>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2202      	movs	r2, #2
 80141a2:	755a      	strb	r2, [r3, #21]
 80141a4:	2302      	movs	r3, #2
 80141a6:	e05d      	b.n	8014264 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	899b      	ldrh	r3, [r3, #12]
 80141ac:	461a      	mov	r2, r3
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80141b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141b6:	4413      	add	r3, r2
 80141b8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	699a      	ldr	r2, [r3, #24]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d90a      	bls.n	80141dc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	699a      	ldr	r2, [r3, #24]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	7d1b      	ldrb	r3, [r3, #20]
 80141d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141d6:	b2da      	uxtb	r2, r3
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	699b      	ldr	r3, [r3, #24]
 80141e0:	68ba      	ldr	r2, [r7, #8]
 80141e2:	8992      	ldrh	r2, [r2, #12]
 80141e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80141e8:	fb02 f201 	mul.w	r2, r2, r1
 80141ec:	1a9b      	subs	r3, r3, r2
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d036      	beq.n	8014260 <f_lseek+0x43c>
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6a1b      	ldr	r3, [r3, #32]
 80141f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d031      	beq.n	8014260 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	7d1b      	ldrb	r3, [r3, #20]
 8014200:	b25b      	sxtb	r3, r3
 8014202:	2b00      	cmp	r3, #0
 8014204:	da18      	bge.n	8014238 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	7858      	ldrb	r0, [r3, #1]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6a1a      	ldr	r2, [r3, #32]
 8014214:	2301      	movs	r3, #1
 8014216:	f7fd f9a5 	bl	8011564 <disk_write>
 801421a:	4603      	mov	r3, r0
 801421c:	2b00      	cmp	r3, #0
 801421e:	d004      	beq.n	801422a <f_lseek+0x406>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2201      	movs	r2, #1
 8014224:	755a      	strb	r2, [r3, #21]
 8014226:	2301      	movs	r3, #1
 8014228:	e01c      	b.n	8014264 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	7d1b      	ldrb	r3, [r3, #20]
 801422e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014232:	b2da      	uxtb	r2, r3
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	7858      	ldrb	r0, [r3, #1]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014242:	2301      	movs	r3, #1
 8014244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014246:	f7fd f96d 	bl	8011524 <disk_read>
 801424a:	4603      	mov	r3, r0
 801424c:	2b00      	cmp	r3, #0
 801424e:	d004      	beq.n	801425a <f_lseek+0x436>
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2201      	movs	r2, #1
 8014254:	755a      	strb	r2, [r3, #21]
 8014256:	2301      	movs	r3, #1
 8014258:	e004      	b.n	8014264 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801425e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014260:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014264:	4618      	mov	r0, r3
 8014266:	3740      	adds	r7, #64	; 0x40
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b09e      	sub	sp, #120	; 0x78
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014274:	2300      	movs	r3, #0
 8014276:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014278:	f107 010c 	add.w	r1, r7, #12
 801427c:	1d3b      	adds	r3, r7, #4
 801427e:	2202      	movs	r2, #2
 8014280:	4618      	mov	r0, r3
 8014282:	f7fe fd17 	bl	8012cb4 <find_volume>
 8014286:	4603      	mov	r3, r0
 8014288:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014290:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014294:	2b00      	cmp	r3, #0
 8014296:	f040 80a4 	bne.w	80143e2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80142a0:	4611      	mov	r1, r2
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7fe fbd6 	bl	8012a54 <follow_path>
 80142a8:	4603      	mov	r3, r0
 80142aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80142ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d108      	bne.n	80142c8 <f_unlink+0x5c>
 80142b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142ba:	f003 0320 	and.w	r3, r3, #32
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d002      	beq.n	80142c8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80142c2:	2306      	movs	r3, #6
 80142c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80142c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d108      	bne.n	80142e2 <f_unlink+0x76>
 80142d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80142d4:	2102      	movs	r1, #2
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7fd fa82 	bl	80117e0 <chk_lock>
 80142dc:	4603      	mov	r3, r0
 80142de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80142e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d17b      	bne.n	80143e2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80142ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142ee:	b25b      	sxtb	r3, r3
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	da03      	bge.n	80142fc <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80142f4:	2306      	movs	r3, #6
 80142f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80142fa:	e008      	b.n	801430e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80142fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014300:	f003 0301 	and.w	r3, r3, #1
 8014304:	2b00      	cmp	r3, #0
 8014306:	d002      	beq.n	801430e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014308:	2307      	movs	r3, #7
 801430a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801430e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014312:	2b00      	cmp	r3, #0
 8014314:	d13d      	bne.n	8014392 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801431a:	4611      	mov	r1, r2
 801431c:	4618      	mov	r0, r3
 801431e:	f7fe f98e 	bl	801263e <ld_clust>
 8014322:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014324:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014328:	f003 0310 	and.w	r3, r3, #16
 801432c:	2b00      	cmp	r3, #0
 801432e:	d030      	beq.n	8014392 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	699b      	ldr	r3, [r3, #24]
 8014334:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014336:	429a      	cmp	r2, r3
 8014338:	d103      	bne.n	8014342 <f_unlink+0xd6>
						res = FR_DENIED;
 801433a:	2307      	movs	r3, #7
 801433c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014340:	e027      	b.n	8014392 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8014346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014348:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801434a:	f107 0310 	add.w	r3, r7, #16
 801434e:	2100      	movs	r1, #0
 8014350:	4618      	mov	r0, r3
 8014352:	f7fd ffce 	bl	80122f2 <dir_sdi>
 8014356:	4603      	mov	r3, r0
 8014358:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801435c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014360:	2b00      	cmp	r3, #0
 8014362:	d116      	bne.n	8014392 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014364:	f107 0310 	add.w	r3, r7, #16
 8014368:	2100      	movs	r1, #0
 801436a:	4618      	mov	r0, r3
 801436c:	f7fe f9a6 	bl	80126bc <dir_read>
 8014370:	4603      	mov	r3, r0
 8014372:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014376:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801437a:	2b00      	cmp	r3, #0
 801437c:	d102      	bne.n	8014384 <f_unlink+0x118>
 801437e:	2307      	movs	r3, #7
 8014380:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014384:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014388:	2b04      	cmp	r3, #4
 801438a:	d102      	bne.n	8014392 <f_unlink+0x126>
 801438c:	2300      	movs	r3, #0
 801438e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014392:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014396:	2b00      	cmp	r3, #0
 8014398:	d123      	bne.n	80143e2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801439a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fe fa70 	bl	8012884 <dir_remove>
 80143a4:	4603      	mov	r3, r0
 80143a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80143aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d10c      	bne.n	80143cc <f_unlink+0x160>
 80143b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d009      	beq.n	80143cc <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80143b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80143bc:	2200      	movs	r2, #0
 80143be:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7fd fe61 	bl	8012088 <remove_chain>
 80143c6:	4603      	mov	r3, r0
 80143c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80143cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d106      	bne.n	80143e2 <f_unlink+0x176>
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7fd fbe0 	bl	8011b9c <sync_fs>
 80143dc:	4603      	mov	r3, r0
 80143de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80143e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3778      	adds	r7, #120	; 0x78
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
	...

080143f0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b096      	sub	sp, #88	; 0x58
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80143f8:	f107 0108 	add.w	r1, r7, #8
 80143fc:	1d3b      	adds	r3, r7, #4
 80143fe:	2202      	movs	r2, #2
 8014400:	4618      	mov	r0, r3
 8014402:	f7fe fc57 	bl	8012cb4 <find_volume>
 8014406:	4603      	mov	r3, r0
 8014408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014414:	2b00      	cmp	r3, #0
 8014416:	f040 80fe 	bne.w	8014616 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	f107 030c 	add.w	r3, r7, #12
 8014420:	4611      	mov	r1, r2
 8014422:	4618      	mov	r0, r3
 8014424:	f7fe fb16 	bl	8012a54 <follow_path>
 8014428:	4603      	mov	r3, r0
 801442a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801442e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014432:	2b00      	cmp	r3, #0
 8014434:	d102      	bne.n	801443c <f_mkdir+0x4c>
 8014436:	2308      	movs	r3, #8
 8014438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801443c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014440:	2b04      	cmp	r3, #4
 8014442:	d108      	bne.n	8014456 <f_mkdir+0x66>
 8014444:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014448:	f003 0320 	and.w	r3, r3, #32
 801444c:	2b00      	cmp	r3, #0
 801444e:	d002      	beq.n	8014456 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014450:	2306      	movs	r3, #6
 8014452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801445a:	2b04      	cmp	r3, #4
 801445c:	f040 80db 	bne.w	8014616 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014460:	f107 030c 	add.w	r3, r7, #12
 8014464:	2100      	movs	r1, #0
 8014466:	4618      	mov	r0, r3
 8014468:	f7fd fe73 	bl	8012152 <create_chain>
 801446c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	895b      	ldrh	r3, [r3, #10]
 8014472:	461a      	mov	r2, r3
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	899b      	ldrh	r3, [r3, #12]
 8014478:	fb03 f302 	mul.w	r3, r3, r2
 801447c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801447e:	2300      	movs	r3, #0
 8014480:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014486:	2b00      	cmp	r3, #0
 8014488:	d102      	bne.n	8014490 <f_mkdir+0xa0>
 801448a:	2307      	movs	r3, #7
 801448c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014492:	2b01      	cmp	r3, #1
 8014494:	d102      	bne.n	801449c <f_mkdir+0xac>
 8014496:	2302      	movs	r3, #2
 8014498:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144a2:	d102      	bne.n	80144aa <f_mkdir+0xba>
 80144a4:	2301      	movs	r3, #1
 80144a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80144aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d106      	bne.n	80144c0 <f_mkdir+0xd0>
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fd faff 	bl	8011ab8 <sync_window>
 80144ba:	4603      	mov	r3, r0
 80144bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80144c0:	4b58      	ldr	r3, [pc, #352]	; (8014624 <f_mkdir+0x234>)
 80144c2:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80144c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d16c      	bne.n	80145a6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7fd fbd3 	bl	8011c7c <clust2sect>
 80144d6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	3338      	adds	r3, #56	; 0x38
 80144dc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	899b      	ldrh	r3, [r3, #12]
 80144e2:	461a      	mov	r2, r3
 80144e4:	2100      	movs	r1, #0
 80144e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144e8:	f7fd f91d 	bl	8011726 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80144ec:	220b      	movs	r2, #11
 80144ee:	2120      	movs	r1, #32
 80144f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144f2:	f7fd f918 	bl	8011726 <mem_set>
					dir[DIR_Name] = '.';
 80144f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144f8:	222e      	movs	r2, #46	; 0x2e
 80144fa:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80144fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144fe:	330b      	adds	r3, #11
 8014500:	2210      	movs	r2, #16
 8014502:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014506:	3316      	adds	r3, #22
 8014508:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801450a:	4618      	mov	r0, r3
 801450c:	f7fd f8be 	bl	801168c <st_dword>
					st_clust(fs, dir, dcl);
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014516:	4618      	mov	r0, r3
 8014518:	f7fe f8b0 	bl	801267c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801451c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801451e:	3320      	adds	r3, #32
 8014520:	2220      	movs	r2, #32
 8014522:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014524:	4618      	mov	r0, r3
 8014526:	f7fd f8dd 	bl	80116e4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801452a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801452c:	3321      	adds	r3, #33	; 0x21
 801452e:	222e      	movs	r2, #46	; 0x2e
 8014530:	701a      	strb	r2, [r3, #0]
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	2b03      	cmp	r3, #3
 801453c:	d106      	bne.n	801454c <f_mkdir+0x15c>
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014544:	429a      	cmp	r2, r3
 8014546:	d101      	bne.n	801454c <f_mkdir+0x15c>
 8014548:	2300      	movs	r3, #0
 801454a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801454c:	68b8      	ldr	r0, [r7, #8]
 801454e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014550:	3320      	adds	r3, #32
 8014552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014554:	4619      	mov	r1, r3
 8014556:	f7fe f891 	bl	801267c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	895b      	ldrh	r3, [r3, #10]
 801455e:	653b      	str	r3, [r7, #80]	; 0x50
 8014560:	e01c      	b.n	801459c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014564:	1c5a      	adds	r2, r3, #1
 8014566:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014568:	68ba      	ldr	r2, [r7, #8]
 801456a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	2201      	movs	r2, #1
 8014570:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	4618      	mov	r0, r3
 8014576:	f7fd fa9f 	bl	8011ab8 <sync_window>
 801457a:	4603      	mov	r3, r0
 801457c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014584:	2b00      	cmp	r3, #0
 8014586:	d10d      	bne.n	80145a4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	899b      	ldrh	r3, [r3, #12]
 801458c:	461a      	mov	r2, r3
 801458e:	2100      	movs	r1, #0
 8014590:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014592:	f7fd f8c8 	bl	8011726 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014598:	3b01      	subs	r3, #1
 801459a:	653b      	str	r3, [r7, #80]	; 0x50
 801459c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d1df      	bne.n	8014562 <f_mkdir+0x172>
 80145a2:	e000      	b.n	80145a6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80145a4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80145a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d107      	bne.n	80145be <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80145ae:	f107 030c 	add.w	r3, r7, #12
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fe f934 	bl	8012820 <dir_register>
 80145b8:	4603      	mov	r3, r0
 80145ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80145be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d120      	bne.n	8014608 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80145c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145c8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80145ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145cc:	3316      	adds	r3, #22
 80145ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7fd f85b 	bl	801168c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145dc:	4618      	mov	r0, r3
 80145de:	f7fe f84d 	bl	801267c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80145e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145e4:	330b      	adds	r3, #11
 80145e6:	2210      	movs	r2, #16
 80145e8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	2201      	movs	r2, #1
 80145ee:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80145f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10e      	bne.n	8014616 <f_mkdir+0x226>
					res = sync_fs(fs);
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fd face 	bl	8011b9c <sync_fs>
 8014600:	4603      	mov	r3, r0
 8014602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014606:	e006      	b.n	8014616 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014608:	f107 030c 	add.w	r3, r7, #12
 801460c:	2200      	movs	r2, #0
 801460e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014610:	4618      	mov	r0, r3
 8014612:	f7fd fd39 	bl	8012088 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014616:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801461a:	4618      	mov	r0, r3
 801461c:	3758      	adds	r7, #88	; 0x58
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	274a0000 	.word	0x274a0000

08014628 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b088      	sub	sp, #32
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	60b9      	str	r1, [r7, #8]
 8014632:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014634:	2300      	movs	r3, #0
 8014636:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801463c:	e017      	b.n	801466e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801463e:	f107 0310 	add.w	r3, r7, #16
 8014642:	f107 0114 	add.w	r1, r7, #20
 8014646:	2201      	movs	r2, #1
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7ff f803 	bl	8013654 <f_read>
		if (rc != 1) break;
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	2b01      	cmp	r3, #1
 8014652:	d112      	bne.n	801467a <f_gets+0x52>
		c = s[0];
 8014654:	7d3b      	ldrb	r3, [r7, #20]
 8014656:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014658:	69bb      	ldr	r3, [r7, #24]
 801465a:	1c5a      	adds	r2, r3, #1
 801465c:	61ba      	str	r2, [r7, #24]
 801465e:	7dfa      	ldrb	r2, [r7, #23]
 8014660:	701a      	strb	r2, [r3, #0]
		n++;
 8014662:	69fb      	ldr	r3, [r7, #28]
 8014664:	3301      	adds	r3, #1
 8014666:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014668:	7dfb      	ldrb	r3, [r7, #23]
 801466a:	2b0a      	cmp	r3, #10
 801466c:	d007      	beq.n	801467e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	3b01      	subs	r3, #1
 8014672:	69fa      	ldr	r2, [r7, #28]
 8014674:	429a      	cmp	r2, r3
 8014676:	dbe2      	blt.n	801463e <f_gets+0x16>
 8014678:	e002      	b.n	8014680 <f_gets+0x58>
		if (rc != 1) break;
 801467a:	bf00      	nop
 801467c:	e000      	b.n	8014680 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801467e:	bf00      	nop
	}
	*p = 0;
 8014680:	69bb      	ldr	r3, [r7, #24]
 8014682:	2200      	movs	r2, #0
 8014684:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d001      	beq.n	8014690 <f_gets+0x68>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	e000      	b.n	8014692 <f_gets+0x6a>
 8014690:	2300      	movs	r3, #0
}
 8014692:	4618      	mov	r0, r3
 8014694:	3720      	adds	r7, #32
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}
	...

0801469c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801469c:	b480      	push	{r7}
 801469e:	b087      	sub	sp, #28
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	60b9      	str	r1, [r7, #8]
 80146a6:	4613      	mov	r3, r2
 80146a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80146aa:	2301      	movs	r3, #1
 80146ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80146ae:	2300      	movs	r3, #0
 80146b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80146b2:	4b1f      	ldr	r3, [pc, #124]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146b4:	7a5b      	ldrb	r3, [r3, #9]
 80146b6:	b2db      	uxtb	r3, r3
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d131      	bne.n	8014720 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80146bc:	4b1c      	ldr	r3, [pc, #112]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146be:	7a5b      	ldrb	r3, [r3, #9]
 80146c0:	b2db      	uxtb	r3, r3
 80146c2:	461a      	mov	r2, r3
 80146c4:	4b1a      	ldr	r3, [pc, #104]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146c6:	2100      	movs	r1, #0
 80146c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80146ca:	4b19      	ldr	r3, [pc, #100]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146cc:	7a5b      	ldrb	r3, [r3, #9]
 80146ce:	b2db      	uxtb	r3, r3
 80146d0:	4a17      	ldr	r2, [pc, #92]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146d2:	009b      	lsls	r3, r3, #2
 80146d4:	4413      	add	r3, r2
 80146d6:	68fa      	ldr	r2, [r7, #12]
 80146d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80146da:	4b15      	ldr	r3, [pc, #84]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146dc:	7a5b      	ldrb	r3, [r3, #9]
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	461a      	mov	r2, r3
 80146e2:	4b13      	ldr	r3, [pc, #76]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146e4:	4413      	add	r3, r2
 80146e6:	79fa      	ldrb	r2, [r7, #7]
 80146e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80146ea:	4b11      	ldr	r3, [pc, #68]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146ec:	7a5b      	ldrb	r3, [r3, #9]
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	1c5a      	adds	r2, r3, #1
 80146f2:	b2d1      	uxtb	r1, r2
 80146f4:	4a0e      	ldr	r2, [pc, #56]	; (8014730 <FATFS_LinkDriverEx+0x94>)
 80146f6:	7251      	strb	r1, [r2, #9]
 80146f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80146fa:	7dbb      	ldrb	r3, [r7, #22]
 80146fc:	3330      	adds	r3, #48	; 0x30
 80146fe:	b2da      	uxtb	r2, r3
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	3301      	adds	r3, #1
 8014708:	223a      	movs	r2, #58	; 0x3a
 801470a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	3302      	adds	r3, #2
 8014710:	222f      	movs	r2, #47	; 0x2f
 8014712:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	3303      	adds	r3, #3
 8014718:	2200      	movs	r2, #0
 801471a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801471c:	2300      	movs	r3, #0
 801471e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014720:	7dfb      	ldrb	r3, [r7, #23]
}
 8014722:	4618      	mov	r0, r3
 8014724:	371c      	adds	r7, #28
 8014726:	46bd      	mov	sp, r7
 8014728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472c:	4770      	bx	lr
 801472e:	bf00      	nop
 8014730:	200481e4 	.word	0x200481e4

08014734 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801473e:	2200      	movs	r2, #0
 8014740:	6839      	ldr	r1, [r7, #0]
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f7ff ffaa 	bl	801469c <FATFS_LinkDriverEx>
 8014748:	4603      	mov	r3, r0
}
 801474a:	4618      	mov	r0, r3
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <__cxa_guard_acquire>:
 8014752:	6803      	ldr	r3, [r0, #0]
 8014754:	07db      	lsls	r3, r3, #31
 8014756:	d406      	bmi.n	8014766 <__cxa_guard_acquire+0x14>
 8014758:	7843      	ldrb	r3, [r0, #1]
 801475a:	b103      	cbz	r3, 801475e <__cxa_guard_acquire+0xc>
 801475c:	deff      	udf	#255	; 0xff
 801475e:	2301      	movs	r3, #1
 8014760:	7043      	strb	r3, [r0, #1]
 8014762:	4618      	mov	r0, r3
 8014764:	4770      	bx	lr
 8014766:	2000      	movs	r0, #0
 8014768:	4770      	bx	lr

0801476a <__cxa_guard_release>:
 801476a:	2301      	movs	r3, #1
 801476c:	6003      	str	r3, [r0, #0]
 801476e:	4770      	bx	lr

08014770 <cos>:
 8014770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014772:	ec51 0b10 	vmov	r0, r1, d0
 8014776:	4a1e      	ldr	r2, [pc, #120]	; (80147f0 <cos+0x80>)
 8014778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801477c:	4293      	cmp	r3, r2
 801477e:	dc06      	bgt.n	801478e <cos+0x1e>
 8014780:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80147e8 <cos+0x78>
 8014784:	f000 fa74 	bl	8014c70 <__kernel_cos>
 8014788:	ec51 0b10 	vmov	r0, r1, d0
 801478c:	e007      	b.n	801479e <cos+0x2e>
 801478e:	4a19      	ldr	r2, [pc, #100]	; (80147f4 <cos+0x84>)
 8014790:	4293      	cmp	r3, r2
 8014792:	dd09      	ble.n	80147a8 <cos+0x38>
 8014794:	ee10 2a10 	vmov	r2, s0
 8014798:	460b      	mov	r3, r1
 801479a:	f7eb fd8d 	bl	80002b8 <__aeabi_dsub>
 801479e:	ec41 0b10 	vmov	d0, r0, r1
 80147a2:	b005      	add	sp, #20
 80147a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80147a8:	4668      	mov	r0, sp
 80147aa:	f000 f86d 	bl	8014888 <__ieee754_rem_pio2>
 80147ae:	f000 0003 	and.w	r0, r0, #3
 80147b2:	2801      	cmp	r0, #1
 80147b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80147b8:	ed9d 0b00 	vldr	d0, [sp]
 80147bc:	d007      	beq.n	80147ce <cos+0x5e>
 80147be:	2802      	cmp	r0, #2
 80147c0:	d00e      	beq.n	80147e0 <cos+0x70>
 80147c2:	2800      	cmp	r0, #0
 80147c4:	d0de      	beq.n	8014784 <cos+0x14>
 80147c6:	2001      	movs	r0, #1
 80147c8:	f000 fe5a 	bl	8015480 <__kernel_sin>
 80147cc:	e7dc      	b.n	8014788 <cos+0x18>
 80147ce:	f000 fe57 	bl	8015480 <__kernel_sin>
 80147d2:	ec53 2b10 	vmov	r2, r3, d0
 80147d6:	ee10 0a10 	vmov	r0, s0
 80147da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147de:	e7de      	b.n	801479e <cos+0x2e>
 80147e0:	f000 fa46 	bl	8014c70 <__kernel_cos>
 80147e4:	e7f5      	b.n	80147d2 <cos+0x62>
 80147e6:	bf00      	nop
	...
 80147f0:	3fe921fb 	.word	0x3fe921fb
 80147f4:	7fefffff 	.word	0x7fefffff

080147f8 <sin>:
 80147f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147fa:	ec51 0b10 	vmov	r0, r1, d0
 80147fe:	4a20      	ldr	r2, [pc, #128]	; (8014880 <sin+0x88>)
 8014800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014804:	4293      	cmp	r3, r2
 8014806:	dc07      	bgt.n	8014818 <sin+0x20>
 8014808:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014878 <sin+0x80>
 801480c:	2000      	movs	r0, #0
 801480e:	f000 fe37 	bl	8015480 <__kernel_sin>
 8014812:	ec51 0b10 	vmov	r0, r1, d0
 8014816:	e007      	b.n	8014828 <sin+0x30>
 8014818:	4a1a      	ldr	r2, [pc, #104]	; (8014884 <sin+0x8c>)
 801481a:	4293      	cmp	r3, r2
 801481c:	dd09      	ble.n	8014832 <sin+0x3a>
 801481e:	ee10 2a10 	vmov	r2, s0
 8014822:	460b      	mov	r3, r1
 8014824:	f7eb fd48 	bl	80002b8 <__aeabi_dsub>
 8014828:	ec41 0b10 	vmov	d0, r0, r1
 801482c:	b005      	add	sp, #20
 801482e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014832:	4668      	mov	r0, sp
 8014834:	f000 f828 	bl	8014888 <__ieee754_rem_pio2>
 8014838:	f000 0003 	and.w	r0, r0, #3
 801483c:	2801      	cmp	r0, #1
 801483e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014842:	ed9d 0b00 	vldr	d0, [sp]
 8014846:	d004      	beq.n	8014852 <sin+0x5a>
 8014848:	2802      	cmp	r0, #2
 801484a:	d005      	beq.n	8014858 <sin+0x60>
 801484c:	b970      	cbnz	r0, 801486c <sin+0x74>
 801484e:	2001      	movs	r0, #1
 8014850:	e7dd      	b.n	801480e <sin+0x16>
 8014852:	f000 fa0d 	bl	8014c70 <__kernel_cos>
 8014856:	e7dc      	b.n	8014812 <sin+0x1a>
 8014858:	2001      	movs	r0, #1
 801485a:	f000 fe11 	bl	8015480 <__kernel_sin>
 801485e:	ec53 2b10 	vmov	r2, r3, d0
 8014862:	ee10 0a10 	vmov	r0, s0
 8014866:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801486a:	e7dd      	b.n	8014828 <sin+0x30>
 801486c:	f000 fa00 	bl	8014c70 <__kernel_cos>
 8014870:	e7f5      	b.n	801485e <sin+0x66>
 8014872:	bf00      	nop
 8014874:	f3af 8000 	nop.w
	...
 8014880:	3fe921fb 	.word	0x3fe921fb
 8014884:	7fefffff 	.word	0x7fefffff

08014888 <__ieee754_rem_pio2>:
 8014888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801488c:	ec57 6b10 	vmov	r6, r7, d0
 8014890:	4bc3      	ldr	r3, [pc, #780]	; (8014ba0 <__ieee754_rem_pio2+0x318>)
 8014892:	b08d      	sub	sp, #52	; 0x34
 8014894:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014898:	4598      	cmp	r8, r3
 801489a:	4604      	mov	r4, r0
 801489c:	9704      	str	r7, [sp, #16]
 801489e:	dc07      	bgt.n	80148b0 <__ieee754_rem_pio2+0x28>
 80148a0:	2200      	movs	r2, #0
 80148a2:	2300      	movs	r3, #0
 80148a4:	ed84 0b00 	vstr	d0, [r4]
 80148a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80148ac:	2500      	movs	r5, #0
 80148ae:	e027      	b.n	8014900 <__ieee754_rem_pio2+0x78>
 80148b0:	4bbc      	ldr	r3, [pc, #752]	; (8014ba4 <__ieee754_rem_pio2+0x31c>)
 80148b2:	4598      	cmp	r8, r3
 80148b4:	dc75      	bgt.n	80149a2 <__ieee754_rem_pio2+0x11a>
 80148b6:	9b04      	ldr	r3, [sp, #16]
 80148b8:	4dbb      	ldr	r5, [pc, #748]	; (8014ba8 <__ieee754_rem_pio2+0x320>)
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	ee10 0a10 	vmov	r0, s0
 80148c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8014b68 <__ieee754_rem_pio2+0x2e0>)
 80148c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c6:	4639      	mov	r1, r7
 80148c8:	dd36      	ble.n	8014938 <__ieee754_rem_pio2+0xb0>
 80148ca:	f7eb fcf5 	bl	80002b8 <__aeabi_dsub>
 80148ce:	45a8      	cmp	r8, r5
 80148d0:	4606      	mov	r6, r0
 80148d2:	460f      	mov	r7, r1
 80148d4:	d018      	beq.n	8014908 <__ieee754_rem_pio2+0x80>
 80148d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2e8>)
 80148d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148dc:	f7eb fcec 	bl	80002b8 <__aeabi_dsub>
 80148e0:	4602      	mov	r2, r0
 80148e2:	460b      	mov	r3, r1
 80148e4:	e9c4 2300 	strd	r2, r3, [r4]
 80148e8:	4630      	mov	r0, r6
 80148ea:	4639      	mov	r1, r7
 80148ec:	f7eb fce4 	bl	80002b8 <__aeabi_dsub>
 80148f0:	a39f      	add	r3, pc, #636	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2e8>)
 80148f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f6:	f7eb fcdf 	bl	80002b8 <__aeabi_dsub>
 80148fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148fe:	2501      	movs	r5, #1
 8014900:	4628      	mov	r0, r5
 8014902:	b00d      	add	sp, #52	; 0x34
 8014904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014908:	a39b      	add	r3, pc, #620	; (adr r3, 8014b78 <__ieee754_rem_pio2+0x2f0>)
 801490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490e:	f7eb fcd3 	bl	80002b8 <__aeabi_dsub>
 8014912:	a39b      	add	r3, pc, #620	; (adr r3, 8014b80 <__ieee754_rem_pio2+0x2f8>)
 8014914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014918:	4606      	mov	r6, r0
 801491a:	460f      	mov	r7, r1
 801491c:	f7eb fccc 	bl	80002b8 <__aeabi_dsub>
 8014920:	4602      	mov	r2, r0
 8014922:	460b      	mov	r3, r1
 8014924:	e9c4 2300 	strd	r2, r3, [r4]
 8014928:	4630      	mov	r0, r6
 801492a:	4639      	mov	r1, r7
 801492c:	f7eb fcc4 	bl	80002b8 <__aeabi_dsub>
 8014930:	a393      	add	r3, pc, #588	; (adr r3, 8014b80 <__ieee754_rem_pio2+0x2f8>)
 8014932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014936:	e7de      	b.n	80148f6 <__ieee754_rem_pio2+0x6e>
 8014938:	f7eb fcc0 	bl	80002bc <__adddf3>
 801493c:	45a8      	cmp	r8, r5
 801493e:	4606      	mov	r6, r0
 8014940:	460f      	mov	r7, r1
 8014942:	d016      	beq.n	8014972 <__ieee754_rem_pio2+0xea>
 8014944:	a38a      	add	r3, pc, #552	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2e8>)
 8014946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494a:	f7eb fcb7 	bl	80002bc <__adddf3>
 801494e:	4602      	mov	r2, r0
 8014950:	460b      	mov	r3, r1
 8014952:	e9c4 2300 	strd	r2, r3, [r4]
 8014956:	4630      	mov	r0, r6
 8014958:	4639      	mov	r1, r7
 801495a:	f7eb fcad 	bl	80002b8 <__aeabi_dsub>
 801495e:	a384      	add	r3, pc, #528	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2e8>)
 8014960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014964:	f7eb fcaa 	bl	80002bc <__adddf3>
 8014968:	f04f 35ff 	mov.w	r5, #4294967295
 801496c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014970:	e7c6      	b.n	8014900 <__ieee754_rem_pio2+0x78>
 8014972:	a381      	add	r3, pc, #516	; (adr r3, 8014b78 <__ieee754_rem_pio2+0x2f0>)
 8014974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014978:	f7eb fca0 	bl	80002bc <__adddf3>
 801497c:	a380      	add	r3, pc, #512	; (adr r3, 8014b80 <__ieee754_rem_pio2+0x2f8>)
 801497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014982:	4606      	mov	r6, r0
 8014984:	460f      	mov	r7, r1
 8014986:	f7eb fc99 	bl	80002bc <__adddf3>
 801498a:	4602      	mov	r2, r0
 801498c:	460b      	mov	r3, r1
 801498e:	e9c4 2300 	strd	r2, r3, [r4]
 8014992:	4630      	mov	r0, r6
 8014994:	4639      	mov	r1, r7
 8014996:	f7eb fc8f 	bl	80002b8 <__aeabi_dsub>
 801499a:	a379      	add	r3, pc, #484	; (adr r3, 8014b80 <__ieee754_rem_pio2+0x2f8>)
 801499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a0:	e7e0      	b.n	8014964 <__ieee754_rem_pio2+0xdc>
 80149a2:	4b82      	ldr	r3, [pc, #520]	; (8014bac <__ieee754_rem_pio2+0x324>)
 80149a4:	4598      	cmp	r8, r3
 80149a6:	f300 80d0 	bgt.w	8014b4a <__ieee754_rem_pio2+0x2c2>
 80149aa:	f000 fe23 	bl	80155f4 <fabs>
 80149ae:	ec57 6b10 	vmov	r6, r7, d0
 80149b2:	ee10 0a10 	vmov	r0, s0
 80149b6:	a374      	add	r3, pc, #464	; (adr r3, 8014b88 <__ieee754_rem_pio2+0x300>)
 80149b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149bc:	4639      	mov	r1, r7
 80149be:	f7eb fe33 	bl	8000628 <__aeabi_dmul>
 80149c2:	2200      	movs	r2, #0
 80149c4:	4b7a      	ldr	r3, [pc, #488]	; (8014bb0 <__ieee754_rem_pio2+0x328>)
 80149c6:	f7eb fc79 	bl	80002bc <__adddf3>
 80149ca:	f7ec f8dd 	bl	8000b88 <__aeabi_d2iz>
 80149ce:	4605      	mov	r5, r0
 80149d0:	f7eb fdc0 	bl	8000554 <__aeabi_i2d>
 80149d4:	a364      	add	r3, pc, #400	; (adr r3, 8014b68 <__ieee754_rem_pio2+0x2e0>)
 80149d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149de:	f7eb fe23 	bl	8000628 <__aeabi_dmul>
 80149e2:	4602      	mov	r2, r0
 80149e4:	460b      	mov	r3, r1
 80149e6:	4630      	mov	r0, r6
 80149e8:	4639      	mov	r1, r7
 80149ea:	f7eb fc65 	bl	80002b8 <__aeabi_dsub>
 80149ee:	a360      	add	r3, pc, #384	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2e8>)
 80149f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f4:	4682      	mov	sl, r0
 80149f6:	468b      	mov	fp, r1
 80149f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149fc:	f7eb fe14 	bl	8000628 <__aeabi_dmul>
 8014a00:	2d1f      	cmp	r5, #31
 8014a02:	4606      	mov	r6, r0
 8014a04:	460f      	mov	r7, r1
 8014a06:	dc0c      	bgt.n	8014a22 <__ieee754_rem_pio2+0x19a>
 8014a08:	1e6a      	subs	r2, r5, #1
 8014a0a:	4b6a      	ldr	r3, [pc, #424]	; (8014bb4 <__ieee754_rem_pio2+0x32c>)
 8014a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a10:	4543      	cmp	r3, r8
 8014a12:	d006      	beq.n	8014a22 <__ieee754_rem_pio2+0x19a>
 8014a14:	4632      	mov	r2, r6
 8014a16:	463b      	mov	r3, r7
 8014a18:	4650      	mov	r0, sl
 8014a1a:	4659      	mov	r1, fp
 8014a1c:	f7eb fc4c 	bl	80002b8 <__aeabi_dsub>
 8014a20:	e00e      	b.n	8014a40 <__ieee754_rem_pio2+0x1b8>
 8014a22:	4632      	mov	r2, r6
 8014a24:	463b      	mov	r3, r7
 8014a26:	4650      	mov	r0, sl
 8014a28:	4659      	mov	r1, fp
 8014a2a:	f7eb fc45 	bl	80002b8 <__aeabi_dsub>
 8014a2e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014a32:	9305      	str	r3, [sp, #20]
 8014a34:	9a05      	ldr	r2, [sp, #20]
 8014a36:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a3a:	1ad3      	subs	r3, r2, r3
 8014a3c:	2b10      	cmp	r3, #16
 8014a3e:	dc02      	bgt.n	8014a46 <__ieee754_rem_pio2+0x1be>
 8014a40:	e9c4 0100 	strd	r0, r1, [r4]
 8014a44:	e039      	b.n	8014aba <__ieee754_rem_pio2+0x232>
 8014a46:	a34c      	add	r3, pc, #304	; (adr r3, 8014b78 <__ieee754_rem_pio2+0x2f0>)
 8014a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a50:	f7eb fdea 	bl	8000628 <__aeabi_dmul>
 8014a54:	4606      	mov	r6, r0
 8014a56:	460f      	mov	r7, r1
 8014a58:	4602      	mov	r2, r0
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	4650      	mov	r0, sl
 8014a5e:	4659      	mov	r1, fp
 8014a60:	f7eb fc2a 	bl	80002b8 <__aeabi_dsub>
 8014a64:	4602      	mov	r2, r0
 8014a66:	460b      	mov	r3, r1
 8014a68:	4680      	mov	r8, r0
 8014a6a:	4689      	mov	r9, r1
 8014a6c:	4650      	mov	r0, sl
 8014a6e:	4659      	mov	r1, fp
 8014a70:	f7eb fc22 	bl	80002b8 <__aeabi_dsub>
 8014a74:	4632      	mov	r2, r6
 8014a76:	463b      	mov	r3, r7
 8014a78:	f7eb fc1e 	bl	80002b8 <__aeabi_dsub>
 8014a7c:	a340      	add	r3, pc, #256	; (adr r3, 8014b80 <__ieee754_rem_pio2+0x2f8>)
 8014a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a82:	4606      	mov	r6, r0
 8014a84:	460f      	mov	r7, r1
 8014a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a8a:	f7eb fdcd 	bl	8000628 <__aeabi_dmul>
 8014a8e:	4632      	mov	r2, r6
 8014a90:	463b      	mov	r3, r7
 8014a92:	f7eb fc11 	bl	80002b8 <__aeabi_dsub>
 8014a96:	4602      	mov	r2, r0
 8014a98:	460b      	mov	r3, r1
 8014a9a:	4606      	mov	r6, r0
 8014a9c:	460f      	mov	r7, r1
 8014a9e:	4640      	mov	r0, r8
 8014aa0:	4649      	mov	r1, r9
 8014aa2:	f7eb fc09 	bl	80002b8 <__aeabi_dsub>
 8014aa6:	9a05      	ldr	r2, [sp, #20]
 8014aa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014aac:	1ad3      	subs	r3, r2, r3
 8014aae:	2b31      	cmp	r3, #49	; 0x31
 8014ab0:	dc20      	bgt.n	8014af4 <__ieee754_rem_pio2+0x26c>
 8014ab2:	e9c4 0100 	strd	r0, r1, [r4]
 8014ab6:	46c2      	mov	sl, r8
 8014ab8:	46cb      	mov	fp, r9
 8014aba:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014abe:	4650      	mov	r0, sl
 8014ac0:	4642      	mov	r2, r8
 8014ac2:	464b      	mov	r3, r9
 8014ac4:	4659      	mov	r1, fp
 8014ac6:	f7eb fbf7 	bl	80002b8 <__aeabi_dsub>
 8014aca:	463b      	mov	r3, r7
 8014acc:	4632      	mov	r2, r6
 8014ace:	f7eb fbf3 	bl	80002b8 <__aeabi_dsub>
 8014ad2:	9b04      	ldr	r3, [sp, #16]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014ada:	f6bf af11 	bge.w	8014900 <__ieee754_rem_pio2+0x78>
 8014ade:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014ae2:	6063      	str	r3, [r4, #4]
 8014ae4:	f8c4 8000 	str.w	r8, [r4]
 8014ae8:	60a0      	str	r0, [r4, #8]
 8014aea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014aee:	60e3      	str	r3, [r4, #12]
 8014af0:	426d      	negs	r5, r5
 8014af2:	e705      	b.n	8014900 <__ieee754_rem_pio2+0x78>
 8014af4:	a326      	add	r3, pc, #152	; (adr r3, 8014b90 <__ieee754_rem_pio2+0x308>)
 8014af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014afe:	f7eb fd93 	bl	8000628 <__aeabi_dmul>
 8014b02:	4606      	mov	r6, r0
 8014b04:	460f      	mov	r7, r1
 8014b06:	4602      	mov	r2, r0
 8014b08:	460b      	mov	r3, r1
 8014b0a:	4640      	mov	r0, r8
 8014b0c:	4649      	mov	r1, r9
 8014b0e:	f7eb fbd3 	bl	80002b8 <__aeabi_dsub>
 8014b12:	4602      	mov	r2, r0
 8014b14:	460b      	mov	r3, r1
 8014b16:	4682      	mov	sl, r0
 8014b18:	468b      	mov	fp, r1
 8014b1a:	4640      	mov	r0, r8
 8014b1c:	4649      	mov	r1, r9
 8014b1e:	f7eb fbcb 	bl	80002b8 <__aeabi_dsub>
 8014b22:	4632      	mov	r2, r6
 8014b24:	463b      	mov	r3, r7
 8014b26:	f7eb fbc7 	bl	80002b8 <__aeabi_dsub>
 8014b2a:	a31b      	add	r3, pc, #108	; (adr r3, 8014b98 <__ieee754_rem_pio2+0x310>)
 8014b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b30:	4606      	mov	r6, r0
 8014b32:	460f      	mov	r7, r1
 8014b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b38:	f7eb fd76 	bl	8000628 <__aeabi_dmul>
 8014b3c:	4632      	mov	r2, r6
 8014b3e:	463b      	mov	r3, r7
 8014b40:	f7eb fbba 	bl	80002b8 <__aeabi_dsub>
 8014b44:	4606      	mov	r6, r0
 8014b46:	460f      	mov	r7, r1
 8014b48:	e764      	b.n	8014a14 <__ieee754_rem_pio2+0x18c>
 8014b4a:	4b1b      	ldr	r3, [pc, #108]	; (8014bb8 <__ieee754_rem_pio2+0x330>)
 8014b4c:	4598      	cmp	r8, r3
 8014b4e:	dd35      	ble.n	8014bbc <__ieee754_rem_pio2+0x334>
 8014b50:	ee10 2a10 	vmov	r2, s0
 8014b54:	463b      	mov	r3, r7
 8014b56:	4630      	mov	r0, r6
 8014b58:	4639      	mov	r1, r7
 8014b5a:	f7eb fbad 	bl	80002b8 <__aeabi_dsub>
 8014b5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b62:	e9c4 0100 	strd	r0, r1, [r4]
 8014b66:	e6a1      	b.n	80148ac <__ieee754_rem_pio2+0x24>
 8014b68:	54400000 	.word	0x54400000
 8014b6c:	3ff921fb 	.word	0x3ff921fb
 8014b70:	1a626331 	.word	0x1a626331
 8014b74:	3dd0b461 	.word	0x3dd0b461
 8014b78:	1a600000 	.word	0x1a600000
 8014b7c:	3dd0b461 	.word	0x3dd0b461
 8014b80:	2e037073 	.word	0x2e037073
 8014b84:	3ba3198a 	.word	0x3ba3198a
 8014b88:	6dc9c883 	.word	0x6dc9c883
 8014b8c:	3fe45f30 	.word	0x3fe45f30
 8014b90:	2e000000 	.word	0x2e000000
 8014b94:	3ba3198a 	.word	0x3ba3198a
 8014b98:	252049c1 	.word	0x252049c1
 8014b9c:	397b839a 	.word	0x397b839a
 8014ba0:	3fe921fb 	.word	0x3fe921fb
 8014ba4:	4002d97b 	.word	0x4002d97b
 8014ba8:	3ff921fb 	.word	0x3ff921fb
 8014bac:	413921fb 	.word	0x413921fb
 8014bb0:	3fe00000 	.word	0x3fe00000
 8014bb4:	0801a12c 	.word	0x0801a12c
 8014bb8:	7fefffff 	.word	0x7fefffff
 8014bbc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014bc0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014bc4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014bc8:	4630      	mov	r0, r6
 8014bca:	460f      	mov	r7, r1
 8014bcc:	f7eb ffdc 	bl	8000b88 <__aeabi_d2iz>
 8014bd0:	f7eb fcc0 	bl	8000554 <__aeabi_i2d>
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	460b      	mov	r3, r1
 8014bd8:	4630      	mov	r0, r6
 8014bda:	4639      	mov	r1, r7
 8014bdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014be0:	f7eb fb6a 	bl	80002b8 <__aeabi_dsub>
 8014be4:	2200      	movs	r2, #0
 8014be6:	4b1f      	ldr	r3, [pc, #124]	; (8014c64 <__ieee754_rem_pio2+0x3dc>)
 8014be8:	f7eb fd1e 	bl	8000628 <__aeabi_dmul>
 8014bec:	460f      	mov	r7, r1
 8014bee:	4606      	mov	r6, r0
 8014bf0:	f7eb ffca 	bl	8000b88 <__aeabi_d2iz>
 8014bf4:	f7eb fcae 	bl	8000554 <__aeabi_i2d>
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	460b      	mov	r3, r1
 8014bfc:	4630      	mov	r0, r6
 8014bfe:	4639      	mov	r1, r7
 8014c00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c04:	f7eb fb58 	bl	80002b8 <__aeabi_dsub>
 8014c08:	2200      	movs	r2, #0
 8014c0a:	4b16      	ldr	r3, [pc, #88]	; (8014c64 <__ieee754_rem_pio2+0x3dc>)
 8014c0c:	f7eb fd0c 	bl	8000628 <__aeabi_dmul>
 8014c10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c14:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014c18:	f04f 0803 	mov.w	r8, #3
 8014c1c:	2600      	movs	r6, #0
 8014c1e:	2700      	movs	r7, #0
 8014c20:	4632      	mov	r2, r6
 8014c22:	463b      	mov	r3, r7
 8014c24:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8014c2c:	f7eb ff64 	bl	8000af8 <__aeabi_dcmpeq>
 8014c30:	b9b0      	cbnz	r0, 8014c60 <__ieee754_rem_pio2+0x3d8>
 8014c32:	4b0d      	ldr	r3, [pc, #52]	; (8014c68 <__ieee754_rem_pio2+0x3e0>)
 8014c34:	9301      	str	r3, [sp, #4]
 8014c36:	2302      	movs	r3, #2
 8014c38:	9300      	str	r3, [sp, #0]
 8014c3a:	462a      	mov	r2, r5
 8014c3c:	4643      	mov	r3, r8
 8014c3e:	4621      	mov	r1, r4
 8014c40:	a806      	add	r0, sp, #24
 8014c42:	f000 f8dd 	bl	8014e00 <__kernel_rem_pio2>
 8014c46:	9b04      	ldr	r3, [sp, #16]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	4605      	mov	r5, r0
 8014c4c:	f6bf ae58 	bge.w	8014900 <__ieee754_rem_pio2+0x78>
 8014c50:	6863      	ldr	r3, [r4, #4]
 8014c52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c56:	6063      	str	r3, [r4, #4]
 8014c58:	68e3      	ldr	r3, [r4, #12]
 8014c5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c5e:	e746      	b.n	8014aee <__ieee754_rem_pio2+0x266>
 8014c60:	46d0      	mov	r8, sl
 8014c62:	e7dd      	b.n	8014c20 <__ieee754_rem_pio2+0x398>
 8014c64:	41700000 	.word	0x41700000
 8014c68:	0801a1ac 	.word	0x0801a1ac
 8014c6c:	00000000 	.word	0x00000000

08014c70 <__kernel_cos>:
 8014c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c74:	ec59 8b10 	vmov	r8, r9, d0
 8014c78:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014c7c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014c80:	ed2d 8b02 	vpush	{d8}
 8014c84:	eeb0 8a41 	vmov.f32	s16, s2
 8014c88:	eef0 8a61 	vmov.f32	s17, s3
 8014c8c:	da07      	bge.n	8014c9e <__kernel_cos+0x2e>
 8014c8e:	ee10 0a10 	vmov	r0, s0
 8014c92:	4649      	mov	r1, r9
 8014c94:	f7eb ff78 	bl	8000b88 <__aeabi_d2iz>
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	f000 8089 	beq.w	8014db0 <__kernel_cos+0x140>
 8014c9e:	4642      	mov	r2, r8
 8014ca0:	464b      	mov	r3, r9
 8014ca2:	4640      	mov	r0, r8
 8014ca4:	4649      	mov	r1, r9
 8014ca6:	f7eb fcbf 	bl	8000628 <__aeabi_dmul>
 8014caa:	2200      	movs	r2, #0
 8014cac:	4b4e      	ldr	r3, [pc, #312]	; (8014de8 <__kernel_cos+0x178>)
 8014cae:	4604      	mov	r4, r0
 8014cb0:	460d      	mov	r5, r1
 8014cb2:	f7eb fcb9 	bl	8000628 <__aeabi_dmul>
 8014cb6:	a340      	add	r3, pc, #256	; (adr r3, 8014db8 <__kernel_cos+0x148>)
 8014cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbc:	4682      	mov	sl, r0
 8014cbe:	468b      	mov	fp, r1
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	4629      	mov	r1, r5
 8014cc4:	f7eb fcb0 	bl	8000628 <__aeabi_dmul>
 8014cc8:	a33d      	add	r3, pc, #244	; (adr r3, 8014dc0 <__kernel_cos+0x150>)
 8014cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cce:	f7eb faf5 	bl	80002bc <__adddf3>
 8014cd2:	4622      	mov	r2, r4
 8014cd4:	462b      	mov	r3, r5
 8014cd6:	f7eb fca7 	bl	8000628 <__aeabi_dmul>
 8014cda:	a33b      	add	r3, pc, #236	; (adr r3, 8014dc8 <__kernel_cos+0x158>)
 8014cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce0:	f7eb faea 	bl	80002b8 <__aeabi_dsub>
 8014ce4:	4622      	mov	r2, r4
 8014ce6:	462b      	mov	r3, r5
 8014ce8:	f7eb fc9e 	bl	8000628 <__aeabi_dmul>
 8014cec:	a338      	add	r3, pc, #224	; (adr r3, 8014dd0 <__kernel_cos+0x160>)
 8014cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf2:	f7eb fae3 	bl	80002bc <__adddf3>
 8014cf6:	4622      	mov	r2, r4
 8014cf8:	462b      	mov	r3, r5
 8014cfa:	f7eb fc95 	bl	8000628 <__aeabi_dmul>
 8014cfe:	a336      	add	r3, pc, #216	; (adr r3, 8014dd8 <__kernel_cos+0x168>)
 8014d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d04:	f7eb fad8 	bl	80002b8 <__aeabi_dsub>
 8014d08:	4622      	mov	r2, r4
 8014d0a:	462b      	mov	r3, r5
 8014d0c:	f7eb fc8c 	bl	8000628 <__aeabi_dmul>
 8014d10:	a333      	add	r3, pc, #204	; (adr r3, 8014de0 <__kernel_cos+0x170>)
 8014d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d16:	f7eb fad1 	bl	80002bc <__adddf3>
 8014d1a:	4622      	mov	r2, r4
 8014d1c:	462b      	mov	r3, r5
 8014d1e:	f7eb fc83 	bl	8000628 <__aeabi_dmul>
 8014d22:	4622      	mov	r2, r4
 8014d24:	462b      	mov	r3, r5
 8014d26:	f7eb fc7f 	bl	8000628 <__aeabi_dmul>
 8014d2a:	ec53 2b18 	vmov	r2, r3, d8
 8014d2e:	4604      	mov	r4, r0
 8014d30:	460d      	mov	r5, r1
 8014d32:	4640      	mov	r0, r8
 8014d34:	4649      	mov	r1, r9
 8014d36:	f7eb fc77 	bl	8000628 <__aeabi_dmul>
 8014d3a:	460b      	mov	r3, r1
 8014d3c:	4602      	mov	r2, r0
 8014d3e:	4629      	mov	r1, r5
 8014d40:	4620      	mov	r0, r4
 8014d42:	f7eb fab9 	bl	80002b8 <__aeabi_dsub>
 8014d46:	4b29      	ldr	r3, [pc, #164]	; (8014dec <__kernel_cos+0x17c>)
 8014d48:	429e      	cmp	r6, r3
 8014d4a:	4680      	mov	r8, r0
 8014d4c:	4689      	mov	r9, r1
 8014d4e:	dc11      	bgt.n	8014d74 <__kernel_cos+0x104>
 8014d50:	4602      	mov	r2, r0
 8014d52:	460b      	mov	r3, r1
 8014d54:	4650      	mov	r0, sl
 8014d56:	4659      	mov	r1, fp
 8014d58:	f7eb faae 	bl	80002b8 <__aeabi_dsub>
 8014d5c:	460b      	mov	r3, r1
 8014d5e:	4924      	ldr	r1, [pc, #144]	; (8014df0 <__kernel_cos+0x180>)
 8014d60:	4602      	mov	r2, r0
 8014d62:	2000      	movs	r0, #0
 8014d64:	f7eb faa8 	bl	80002b8 <__aeabi_dsub>
 8014d68:	ecbd 8b02 	vpop	{d8}
 8014d6c:	ec41 0b10 	vmov	d0, r0, r1
 8014d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d74:	4b1f      	ldr	r3, [pc, #124]	; (8014df4 <__kernel_cos+0x184>)
 8014d76:	491e      	ldr	r1, [pc, #120]	; (8014df0 <__kernel_cos+0x180>)
 8014d78:	429e      	cmp	r6, r3
 8014d7a:	bfcc      	ite	gt
 8014d7c:	4d1e      	ldrgt	r5, [pc, #120]	; (8014df8 <__kernel_cos+0x188>)
 8014d7e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014d82:	2400      	movs	r4, #0
 8014d84:	4622      	mov	r2, r4
 8014d86:	462b      	mov	r3, r5
 8014d88:	2000      	movs	r0, #0
 8014d8a:	f7eb fa95 	bl	80002b8 <__aeabi_dsub>
 8014d8e:	4622      	mov	r2, r4
 8014d90:	4606      	mov	r6, r0
 8014d92:	460f      	mov	r7, r1
 8014d94:	462b      	mov	r3, r5
 8014d96:	4650      	mov	r0, sl
 8014d98:	4659      	mov	r1, fp
 8014d9a:	f7eb fa8d 	bl	80002b8 <__aeabi_dsub>
 8014d9e:	4642      	mov	r2, r8
 8014da0:	464b      	mov	r3, r9
 8014da2:	f7eb fa89 	bl	80002b8 <__aeabi_dsub>
 8014da6:	4602      	mov	r2, r0
 8014da8:	460b      	mov	r3, r1
 8014daa:	4630      	mov	r0, r6
 8014dac:	4639      	mov	r1, r7
 8014dae:	e7d9      	b.n	8014d64 <__kernel_cos+0xf4>
 8014db0:	2000      	movs	r0, #0
 8014db2:	490f      	ldr	r1, [pc, #60]	; (8014df0 <__kernel_cos+0x180>)
 8014db4:	e7d8      	b.n	8014d68 <__kernel_cos+0xf8>
 8014db6:	bf00      	nop
 8014db8:	be8838d4 	.word	0xbe8838d4
 8014dbc:	bda8fae9 	.word	0xbda8fae9
 8014dc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8014dc4:	3e21ee9e 	.word	0x3e21ee9e
 8014dc8:	809c52ad 	.word	0x809c52ad
 8014dcc:	3e927e4f 	.word	0x3e927e4f
 8014dd0:	19cb1590 	.word	0x19cb1590
 8014dd4:	3efa01a0 	.word	0x3efa01a0
 8014dd8:	16c15177 	.word	0x16c15177
 8014ddc:	3f56c16c 	.word	0x3f56c16c
 8014de0:	5555554c 	.word	0x5555554c
 8014de4:	3fa55555 	.word	0x3fa55555
 8014de8:	3fe00000 	.word	0x3fe00000
 8014dec:	3fd33332 	.word	0x3fd33332
 8014df0:	3ff00000 	.word	0x3ff00000
 8014df4:	3fe90000 	.word	0x3fe90000
 8014df8:	3fd20000 	.word	0x3fd20000
 8014dfc:	00000000 	.word	0x00000000

08014e00 <__kernel_rem_pio2>:
 8014e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	ed2d 8b02 	vpush	{d8}
 8014e08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014e0c:	1ed4      	subs	r4, r2, #3
 8014e0e:	9308      	str	r3, [sp, #32]
 8014e10:	9101      	str	r1, [sp, #4]
 8014e12:	4bc5      	ldr	r3, [pc, #788]	; (8015128 <__kernel_rem_pio2+0x328>)
 8014e14:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014e16:	9009      	str	r0, [sp, #36]	; 0x24
 8014e18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014e1c:	9304      	str	r3, [sp, #16]
 8014e1e:	9b08      	ldr	r3, [sp, #32]
 8014e20:	3b01      	subs	r3, #1
 8014e22:	9307      	str	r3, [sp, #28]
 8014e24:	2318      	movs	r3, #24
 8014e26:	fb94 f4f3 	sdiv	r4, r4, r3
 8014e2a:	f06f 0317 	mvn.w	r3, #23
 8014e2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014e32:	fb04 3303 	mla	r3, r4, r3, r3
 8014e36:	eb03 0a02 	add.w	sl, r3, r2
 8014e3a:	9b04      	ldr	r3, [sp, #16]
 8014e3c:	9a07      	ldr	r2, [sp, #28]
 8014e3e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015118 <__kernel_rem_pio2+0x318>
 8014e42:	eb03 0802 	add.w	r8, r3, r2
 8014e46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014e48:	1aa7      	subs	r7, r4, r2
 8014e4a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014e4e:	ae22      	add	r6, sp, #136	; 0x88
 8014e50:	2500      	movs	r5, #0
 8014e52:	4545      	cmp	r5, r8
 8014e54:	dd13      	ble.n	8014e7e <__kernel_rem_pio2+0x7e>
 8014e56:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015118 <__kernel_rem_pio2+0x318>
 8014e5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014e5e:	2600      	movs	r6, #0
 8014e60:	9b04      	ldr	r3, [sp, #16]
 8014e62:	429e      	cmp	r6, r3
 8014e64:	dc32      	bgt.n	8014ecc <__kernel_rem_pio2+0xcc>
 8014e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e68:	9302      	str	r3, [sp, #8]
 8014e6a:	9b08      	ldr	r3, [sp, #32]
 8014e6c:	199d      	adds	r5, r3, r6
 8014e6e:	ab22      	add	r3, sp, #136	; 0x88
 8014e70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e74:	9306      	str	r3, [sp, #24]
 8014e76:	ec59 8b18 	vmov	r8, r9, d8
 8014e7a:	2700      	movs	r7, #0
 8014e7c:	e01f      	b.n	8014ebe <__kernel_rem_pio2+0xbe>
 8014e7e:	42ef      	cmn	r7, r5
 8014e80:	d407      	bmi.n	8014e92 <__kernel_rem_pio2+0x92>
 8014e82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014e86:	f7eb fb65 	bl	8000554 <__aeabi_i2d>
 8014e8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e8e:	3501      	adds	r5, #1
 8014e90:	e7df      	b.n	8014e52 <__kernel_rem_pio2+0x52>
 8014e92:	ec51 0b18 	vmov	r0, r1, d8
 8014e96:	e7f8      	b.n	8014e8a <__kernel_rem_pio2+0x8a>
 8014e98:	9906      	ldr	r1, [sp, #24]
 8014e9a:	9d02      	ldr	r5, [sp, #8]
 8014e9c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014ea0:	9106      	str	r1, [sp, #24]
 8014ea2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014ea6:	9502      	str	r5, [sp, #8]
 8014ea8:	f7eb fbbe 	bl	8000628 <__aeabi_dmul>
 8014eac:	4602      	mov	r2, r0
 8014eae:	460b      	mov	r3, r1
 8014eb0:	4640      	mov	r0, r8
 8014eb2:	4649      	mov	r1, r9
 8014eb4:	f7eb fa02 	bl	80002bc <__adddf3>
 8014eb8:	3701      	adds	r7, #1
 8014eba:	4680      	mov	r8, r0
 8014ebc:	4689      	mov	r9, r1
 8014ebe:	9b07      	ldr	r3, [sp, #28]
 8014ec0:	429f      	cmp	r7, r3
 8014ec2:	dde9      	ble.n	8014e98 <__kernel_rem_pio2+0x98>
 8014ec4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014ec8:	3601      	adds	r6, #1
 8014eca:	e7c9      	b.n	8014e60 <__kernel_rem_pio2+0x60>
 8014ecc:	9b04      	ldr	r3, [sp, #16]
 8014ece:	aa0e      	add	r2, sp, #56	; 0x38
 8014ed0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014ed4:	930c      	str	r3, [sp, #48]	; 0x30
 8014ed6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014ed8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014edc:	9c04      	ldr	r4, [sp, #16]
 8014ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ee0:	ab9a      	add	r3, sp, #616	; 0x268
 8014ee2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014ee6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014eea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014eee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014ef2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014ef6:	ab9a      	add	r3, sp, #616	; 0x268
 8014ef8:	445b      	add	r3, fp
 8014efa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014efe:	2500      	movs	r5, #0
 8014f00:	1b63      	subs	r3, r4, r5
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	dc78      	bgt.n	8014ff8 <__kernel_rem_pio2+0x1f8>
 8014f06:	4650      	mov	r0, sl
 8014f08:	ec49 8b10 	vmov	d0, r8, r9
 8014f0c:	f000 fc00 	bl	8015710 <scalbn>
 8014f10:	ec57 6b10 	vmov	r6, r7, d0
 8014f14:	2200      	movs	r2, #0
 8014f16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014f1a:	ee10 0a10 	vmov	r0, s0
 8014f1e:	4639      	mov	r1, r7
 8014f20:	f7eb fb82 	bl	8000628 <__aeabi_dmul>
 8014f24:	ec41 0b10 	vmov	d0, r0, r1
 8014f28:	f000 fb6e 	bl	8015608 <floor>
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	ec51 0b10 	vmov	r0, r1, d0
 8014f32:	4b7e      	ldr	r3, [pc, #504]	; (801512c <__kernel_rem_pio2+0x32c>)
 8014f34:	f7eb fb78 	bl	8000628 <__aeabi_dmul>
 8014f38:	4602      	mov	r2, r0
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	4639      	mov	r1, r7
 8014f40:	f7eb f9ba 	bl	80002b8 <__aeabi_dsub>
 8014f44:	460f      	mov	r7, r1
 8014f46:	4606      	mov	r6, r0
 8014f48:	f7eb fe1e 	bl	8000b88 <__aeabi_d2iz>
 8014f4c:	9006      	str	r0, [sp, #24]
 8014f4e:	f7eb fb01 	bl	8000554 <__aeabi_i2d>
 8014f52:	4602      	mov	r2, r0
 8014f54:	460b      	mov	r3, r1
 8014f56:	4630      	mov	r0, r6
 8014f58:	4639      	mov	r1, r7
 8014f5a:	f7eb f9ad 	bl	80002b8 <__aeabi_dsub>
 8014f5e:	f1ba 0f00 	cmp.w	sl, #0
 8014f62:	4606      	mov	r6, r0
 8014f64:	460f      	mov	r7, r1
 8014f66:	dd6c      	ble.n	8015042 <__kernel_rem_pio2+0x242>
 8014f68:	1e62      	subs	r2, r4, #1
 8014f6a:	ab0e      	add	r3, sp, #56	; 0x38
 8014f6c:	f1ca 0118 	rsb	r1, sl, #24
 8014f70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014f74:	9d06      	ldr	r5, [sp, #24]
 8014f76:	fa40 f301 	asr.w	r3, r0, r1
 8014f7a:	441d      	add	r5, r3
 8014f7c:	408b      	lsls	r3, r1
 8014f7e:	1ac0      	subs	r0, r0, r3
 8014f80:	ab0e      	add	r3, sp, #56	; 0x38
 8014f82:	9506      	str	r5, [sp, #24]
 8014f84:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014f88:	f1ca 0317 	rsb	r3, sl, #23
 8014f8c:	fa40 f303 	asr.w	r3, r0, r3
 8014f90:	9302      	str	r3, [sp, #8]
 8014f92:	9b02      	ldr	r3, [sp, #8]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	dd62      	ble.n	801505e <__kernel_rem_pio2+0x25e>
 8014f98:	9b06      	ldr	r3, [sp, #24]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	3301      	adds	r3, #1
 8014f9e:	9306      	str	r3, [sp, #24]
 8014fa0:	4615      	mov	r5, r2
 8014fa2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014fa6:	4294      	cmp	r4, r2
 8014fa8:	f300 8095 	bgt.w	80150d6 <__kernel_rem_pio2+0x2d6>
 8014fac:	f1ba 0f00 	cmp.w	sl, #0
 8014fb0:	dd07      	ble.n	8014fc2 <__kernel_rem_pio2+0x1c2>
 8014fb2:	f1ba 0f01 	cmp.w	sl, #1
 8014fb6:	f000 80a2 	beq.w	80150fe <__kernel_rem_pio2+0x2fe>
 8014fba:	f1ba 0f02 	cmp.w	sl, #2
 8014fbe:	f000 80c1 	beq.w	8015144 <__kernel_rem_pio2+0x344>
 8014fc2:	9b02      	ldr	r3, [sp, #8]
 8014fc4:	2b02      	cmp	r3, #2
 8014fc6:	d14a      	bne.n	801505e <__kernel_rem_pio2+0x25e>
 8014fc8:	4632      	mov	r2, r6
 8014fca:	463b      	mov	r3, r7
 8014fcc:	2000      	movs	r0, #0
 8014fce:	4958      	ldr	r1, [pc, #352]	; (8015130 <__kernel_rem_pio2+0x330>)
 8014fd0:	f7eb f972 	bl	80002b8 <__aeabi_dsub>
 8014fd4:	4606      	mov	r6, r0
 8014fd6:	460f      	mov	r7, r1
 8014fd8:	2d00      	cmp	r5, #0
 8014fda:	d040      	beq.n	801505e <__kernel_rem_pio2+0x25e>
 8014fdc:	4650      	mov	r0, sl
 8014fde:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015120 <__kernel_rem_pio2+0x320>
 8014fe2:	f000 fb95 	bl	8015710 <scalbn>
 8014fe6:	4630      	mov	r0, r6
 8014fe8:	4639      	mov	r1, r7
 8014fea:	ec53 2b10 	vmov	r2, r3, d0
 8014fee:	f7eb f963 	bl	80002b8 <__aeabi_dsub>
 8014ff2:	4606      	mov	r6, r0
 8014ff4:	460f      	mov	r7, r1
 8014ff6:	e032      	b.n	801505e <__kernel_rem_pio2+0x25e>
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	4b4e      	ldr	r3, [pc, #312]	; (8015134 <__kernel_rem_pio2+0x334>)
 8014ffc:	4640      	mov	r0, r8
 8014ffe:	4649      	mov	r1, r9
 8015000:	f7eb fb12 	bl	8000628 <__aeabi_dmul>
 8015004:	f7eb fdc0 	bl	8000b88 <__aeabi_d2iz>
 8015008:	f7eb faa4 	bl	8000554 <__aeabi_i2d>
 801500c:	2200      	movs	r2, #0
 801500e:	4b4a      	ldr	r3, [pc, #296]	; (8015138 <__kernel_rem_pio2+0x338>)
 8015010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015014:	f7eb fb08 	bl	8000628 <__aeabi_dmul>
 8015018:	4602      	mov	r2, r0
 801501a:	460b      	mov	r3, r1
 801501c:	4640      	mov	r0, r8
 801501e:	4649      	mov	r1, r9
 8015020:	f7eb f94a 	bl	80002b8 <__aeabi_dsub>
 8015024:	f7eb fdb0 	bl	8000b88 <__aeabi_d2iz>
 8015028:	ab0e      	add	r3, sp, #56	; 0x38
 801502a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801502e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8015032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015036:	f7eb f941 	bl	80002bc <__adddf3>
 801503a:	3501      	adds	r5, #1
 801503c:	4680      	mov	r8, r0
 801503e:	4689      	mov	r9, r1
 8015040:	e75e      	b.n	8014f00 <__kernel_rem_pio2+0x100>
 8015042:	d105      	bne.n	8015050 <__kernel_rem_pio2+0x250>
 8015044:	1e63      	subs	r3, r4, #1
 8015046:	aa0e      	add	r2, sp, #56	; 0x38
 8015048:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801504c:	15c3      	asrs	r3, r0, #23
 801504e:	e79f      	b.n	8014f90 <__kernel_rem_pio2+0x190>
 8015050:	2200      	movs	r2, #0
 8015052:	4b3a      	ldr	r3, [pc, #232]	; (801513c <__kernel_rem_pio2+0x33c>)
 8015054:	f7eb fd6e 	bl	8000b34 <__aeabi_dcmpge>
 8015058:	2800      	cmp	r0, #0
 801505a:	d139      	bne.n	80150d0 <__kernel_rem_pio2+0x2d0>
 801505c:	9002      	str	r0, [sp, #8]
 801505e:	2200      	movs	r2, #0
 8015060:	2300      	movs	r3, #0
 8015062:	4630      	mov	r0, r6
 8015064:	4639      	mov	r1, r7
 8015066:	f7eb fd47 	bl	8000af8 <__aeabi_dcmpeq>
 801506a:	2800      	cmp	r0, #0
 801506c:	f000 80c7 	beq.w	80151fe <__kernel_rem_pio2+0x3fe>
 8015070:	1e65      	subs	r5, r4, #1
 8015072:	462b      	mov	r3, r5
 8015074:	2200      	movs	r2, #0
 8015076:	9904      	ldr	r1, [sp, #16]
 8015078:	428b      	cmp	r3, r1
 801507a:	da6a      	bge.n	8015152 <__kernel_rem_pio2+0x352>
 801507c:	2a00      	cmp	r2, #0
 801507e:	f000 8088 	beq.w	8015192 <__kernel_rem_pio2+0x392>
 8015082:	ab0e      	add	r3, sp, #56	; 0x38
 8015084:	f1aa 0a18 	sub.w	sl, sl, #24
 8015088:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801508c:	2b00      	cmp	r3, #0
 801508e:	f000 80b4 	beq.w	80151fa <__kernel_rem_pio2+0x3fa>
 8015092:	4650      	mov	r0, sl
 8015094:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015120 <__kernel_rem_pio2+0x320>
 8015098:	f000 fb3a 	bl	8015710 <scalbn>
 801509c:	00ec      	lsls	r4, r5, #3
 801509e:	ab72      	add	r3, sp, #456	; 0x1c8
 80150a0:	191e      	adds	r6, r3, r4
 80150a2:	ec59 8b10 	vmov	r8, r9, d0
 80150a6:	f106 0a08 	add.w	sl, r6, #8
 80150aa:	462f      	mov	r7, r5
 80150ac:	2f00      	cmp	r7, #0
 80150ae:	f280 80df 	bge.w	8015270 <__kernel_rem_pio2+0x470>
 80150b2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015118 <__kernel_rem_pio2+0x318>
 80150b6:	f04f 0a00 	mov.w	sl, #0
 80150ba:	eba5 030a 	sub.w	r3, r5, sl
 80150be:	2b00      	cmp	r3, #0
 80150c0:	f2c0 810a 	blt.w	80152d8 <__kernel_rem_pio2+0x4d8>
 80150c4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8015140 <__kernel_rem_pio2+0x340>
 80150c8:	ec59 8b18 	vmov	r8, r9, d8
 80150cc:	2700      	movs	r7, #0
 80150ce:	e0f5      	b.n	80152bc <__kernel_rem_pio2+0x4bc>
 80150d0:	2302      	movs	r3, #2
 80150d2:	9302      	str	r3, [sp, #8]
 80150d4:	e760      	b.n	8014f98 <__kernel_rem_pio2+0x198>
 80150d6:	ab0e      	add	r3, sp, #56	; 0x38
 80150d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150dc:	b94d      	cbnz	r5, 80150f2 <__kernel_rem_pio2+0x2f2>
 80150de:	b12b      	cbz	r3, 80150ec <__kernel_rem_pio2+0x2ec>
 80150e0:	a80e      	add	r0, sp, #56	; 0x38
 80150e2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80150e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80150ea:	2301      	movs	r3, #1
 80150ec:	3201      	adds	r2, #1
 80150ee:	461d      	mov	r5, r3
 80150f0:	e759      	b.n	8014fa6 <__kernel_rem_pio2+0x1a6>
 80150f2:	a80e      	add	r0, sp, #56	; 0x38
 80150f4:	1acb      	subs	r3, r1, r3
 80150f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80150fa:	462b      	mov	r3, r5
 80150fc:	e7f6      	b.n	80150ec <__kernel_rem_pio2+0x2ec>
 80150fe:	1e62      	subs	r2, r4, #1
 8015100:	ab0e      	add	r3, sp, #56	; 0x38
 8015102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015106:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801510a:	a90e      	add	r1, sp, #56	; 0x38
 801510c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015110:	e757      	b.n	8014fc2 <__kernel_rem_pio2+0x1c2>
 8015112:	bf00      	nop
 8015114:	f3af 8000 	nop.w
	...
 8015124:	3ff00000 	.word	0x3ff00000
 8015128:	0801a2f8 	.word	0x0801a2f8
 801512c:	40200000 	.word	0x40200000
 8015130:	3ff00000 	.word	0x3ff00000
 8015134:	3e700000 	.word	0x3e700000
 8015138:	41700000 	.word	0x41700000
 801513c:	3fe00000 	.word	0x3fe00000
 8015140:	0801a2b8 	.word	0x0801a2b8
 8015144:	1e62      	subs	r2, r4, #1
 8015146:	ab0e      	add	r3, sp, #56	; 0x38
 8015148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801514c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015150:	e7db      	b.n	801510a <__kernel_rem_pio2+0x30a>
 8015152:	a90e      	add	r1, sp, #56	; 0x38
 8015154:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015158:	3b01      	subs	r3, #1
 801515a:	430a      	orrs	r2, r1
 801515c:	e78b      	b.n	8015076 <__kernel_rem_pio2+0x276>
 801515e:	3301      	adds	r3, #1
 8015160:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015164:	2900      	cmp	r1, #0
 8015166:	d0fa      	beq.n	801515e <__kernel_rem_pio2+0x35e>
 8015168:	9a08      	ldr	r2, [sp, #32]
 801516a:	4422      	add	r2, r4
 801516c:	00d2      	lsls	r2, r2, #3
 801516e:	a922      	add	r1, sp, #136	; 0x88
 8015170:	18e3      	adds	r3, r4, r3
 8015172:	9206      	str	r2, [sp, #24]
 8015174:	440a      	add	r2, r1
 8015176:	9302      	str	r3, [sp, #8]
 8015178:	f10b 0108 	add.w	r1, fp, #8
 801517c:	f102 0308 	add.w	r3, r2, #8
 8015180:	1c66      	adds	r6, r4, #1
 8015182:	910a      	str	r1, [sp, #40]	; 0x28
 8015184:	2500      	movs	r5, #0
 8015186:	930d      	str	r3, [sp, #52]	; 0x34
 8015188:	9b02      	ldr	r3, [sp, #8]
 801518a:	42b3      	cmp	r3, r6
 801518c:	da04      	bge.n	8015198 <__kernel_rem_pio2+0x398>
 801518e:	461c      	mov	r4, r3
 8015190:	e6a6      	b.n	8014ee0 <__kernel_rem_pio2+0xe0>
 8015192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015194:	2301      	movs	r3, #1
 8015196:	e7e3      	b.n	8015160 <__kernel_rem_pio2+0x360>
 8015198:	9b06      	ldr	r3, [sp, #24]
 801519a:	18ef      	adds	r7, r5, r3
 801519c:	ab22      	add	r3, sp, #136	; 0x88
 801519e:	441f      	add	r7, r3
 80151a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80151a6:	f7eb f9d5 	bl	8000554 <__aeabi_i2d>
 80151aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151ac:	461c      	mov	r4, r3
 80151ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151b0:	e9c7 0100 	strd	r0, r1, [r7]
 80151b4:	eb03 0b05 	add.w	fp, r3, r5
 80151b8:	2700      	movs	r7, #0
 80151ba:	f04f 0800 	mov.w	r8, #0
 80151be:	f04f 0900 	mov.w	r9, #0
 80151c2:	9b07      	ldr	r3, [sp, #28]
 80151c4:	429f      	cmp	r7, r3
 80151c6:	dd08      	ble.n	80151da <__kernel_rem_pio2+0x3da>
 80151c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151ca:	aa72      	add	r2, sp, #456	; 0x1c8
 80151cc:	18eb      	adds	r3, r5, r3
 80151ce:	4413      	add	r3, r2
 80151d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80151d4:	3601      	adds	r6, #1
 80151d6:	3508      	adds	r5, #8
 80151d8:	e7d6      	b.n	8015188 <__kernel_rem_pio2+0x388>
 80151da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80151de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80151e2:	f7eb fa21 	bl	8000628 <__aeabi_dmul>
 80151e6:	4602      	mov	r2, r0
 80151e8:	460b      	mov	r3, r1
 80151ea:	4640      	mov	r0, r8
 80151ec:	4649      	mov	r1, r9
 80151ee:	f7eb f865 	bl	80002bc <__adddf3>
 80151f2:	3701      	adds	r7, #1
 80151f4:	4680      	mov	r8, r0
 80151f6:	4689      	mov	r9, r1
 80151f8:	e7e3      	b.n	80151c2 <__kernel_rem_pio2+0x3c2>
 80151fa:	3d01      	subs	r5, #1
 80151fc:	e741      	b.n	8015082 <__kernel_rem_pio2+0x282>
 80151fe:	f1ca 0000 	rsb	r0, sl, #0
 8015202:	ec47 6b10 	vmov	d0, r6, r7
 8015206:	f000 fa83 	bl	8015710 <scalbn>
 801520a:	ec57 6b10 	vmov	r6, r7, d0
 801520e:	2200      	movs	r2, #0
 8015210:	4b99      	ldr	r3, [pc, #612]	; (8015478 <__kernel_rem_pio2+0x678>)
 8015212:	ee10 0a10 	vmov	r0, s0
 8015216:	4639      	mov	r1, r7
 8015218:	f7eb fc8c 	bl	8000b34 <__aeabi_dcmpge>
 801521c:	b1f8      	cbz	r0, 801525e <__kernel_rem_pio2+0x45e>
 801521e:	2200      	movs	r2, #0
 8015220:	4b96      	ldr	r3, [pc, #600]	; (801547c <__kernel_rem_pio2+0x67c>)
 8015222:	4630      	mov	r0, r6
 8015224:	4639      	mov	r1, r7
 8015226:	f7eb f9ff 	bl	8000628 <__aeabi_dmul>
 801522a:	f7eb fcad 	bl	8000b88 <__aeabi_d2iz>
 801522e:	4680      	mov	r8, r0
 8015230:	f7eb f990 	bl	8000554 <__aeabi_i2d>
 8015234:	2200      	movs	r2, #0
 8015236:	4b90      	ldr	r3, [pc, #576]	; (8015478 <__kernel_rem_pio2+0x678>)
 8015238:	f7eb f9f6 	bl	8000628 <__aeabi_dmul>
 801523c:	460b      	mov	r3, r1
 801523e:	4602      	mov	r2, r0
 8015240:	4639      	mov	r1, r7
 8015242:	4630      	mov	r0, r6
 8015244:	f7eb f838 	bl	80002b8 <__aeabi_dsub>
 8015248:	f7eb fc9e 	bl	8000b88 <__aeabi_d2iz>
 801524c:	1c65      	adds	r5, r4, #1
 801524e:	ab0e      	add	r3, sp, #56	; 0x38
 8015250:	f10a 0a18 	add.w	sl, sl, #24
 8015254:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015258:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801525c:	e719      	b.n	8015092 <__kernel_rem_pio2+0x292>
 801525e:	4630      	mov	r0, r6
 8015260:	4639      	mov	r1, r7
 8015262:	f7eb fc91 	bl	8000b88 <__aeabi_d2iz>
 8015266:	ab0e      	add	r3, sp, #56	; 0x38
 8015268:	4625      	mov	r5, r4
 801526a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801526e:	e710      	b.n	8015092 <__kernel_rem_pio2+0x292>
 8015270:	ab0e      	add	r3, sp, #56	; 0x38
 8015272:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8015276:	f7eb f96d 	bl	8000554 <__aeabi_i2d>
 801527a:	4642      	mov	r2, r8
 801527c:	464b      	mov	r3, r9
 801527e:	f7eb f9d3 	bl	8000628 <__aeabi_dmul>
 8015282:	2200      	movs	r2, #0
 8015284:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015288:	4b7c      	ldr	r3, [pc, #496]	; (801547c <__kernel_rem_pio2+0x67c>)
 801528a:	4640      	mov	r0, r8
 801528c:	4649      	mov	r1, r9
 801528e:	f7eb f9cb 	bl	8000628 <__aeabi_dmul>
 8015292:	3f01      	subs	r7, #1
 8015294:	4680      	mov	r8, r0
 8015296:	4689      	mov	r9, r1
 8015298:	e708      	b.n	80150ac <__kernel_rem_pio2+0x2ac>
 801529a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80152a6:	f7eb f9bf 	bl	8000628 <__aeabi_dmul>
 80152aa:	4602      	mov	r2, r0
 80152ac:	460b      	mov	r3, r1
 80152ae:	4640      	mov	r0, r8
 80152b0:	4649      	mov	r1, r9
 80152b2:	f7eb f803 	bl	80002bc <__adddf3>
 80152b6:	3701      	adds	r7, #1
 80152b8:	4680      	mov	r8, r0
 80152ba:	4689      	mov	r9, r1
 80152bc:	9b04      	ldr	r3, [sp, #16]
 80152be:	429f      	cmp	r7, r3
 80152c0:	dc01      	bgt.n	80152c6 <__kernel_rem_pio2+0x4c6>
 80152c2:	45ba      	cmp	sl, r7
 80152c4:	dae9      	bge.n	801529a <__kernel_rem_pio2+0x49a>
 80152c6:	ab4a      	add	r3, sp, #296	; 0x128
 80152c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80152cc:	e9c3 8900 	strd	r8, r9, [r3]
 80152d0:	f10a 0a01 	add.w	sl, sl, #1
 80152d4:	3e08      	subs	r6, #8
 80152d6:	e6f0      	b.n	80150ba <__kernel_rem_pio2+0x2ba>
 80152d8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80152da:	2b03      	cmp	r3, #3
 80152dc:	d85b      	bhi.n	8015396 <__kernel_rem_pio2+0x596>
 80152de:	e8df f003 	tbb	[pc, r3]
 80152e2:	264a      	.short	0x264a
 80152e4:	0226      	.short	0x0226
 80152e6:	ab9a      	add	r3, sp, #616	; 0x268
 80152e8:	441c      	add	r4, r3
 80152ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80152ee:	46a2      	mov	sl, r4
 80152f0:	46ab      	mov	fp, r5
 80152f2:	f1bb 0f00 	cmp.w	fp, #0
 80152f6:	dc6c      	bgt.n	80153d2 <__kernel_rem_pio2+0x5d2>
 80152f8:	46a2      	mov	sl, r4
 80152fa:	46ab      	mov	fp, r5
 80152fc:	f1bb 0f01 	cmp.w	fp, #1
 8015300:	f300 8086 	bgt.w	8015410 <__kernel_rem_pio2+0x610>
 8015304:	2000      	movs	r0, #0
 8015306:	2100      	movs	r1, #0
 8015308:	2d01      	cmp	r5, #1
 801530a:	f300 80a0 	bgt.w	801544e <__kernel_rem_pio2+0x64e>
 801530e:	9b02      	ldr	r3, [sp, #8]
 8015310:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015314:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015318:	2b00      	cmp	r3, #0
 801531a:	f040 809e 	bne.w	801545a <__kernel_rem_pio2+0x65a>
 801531e:	9b01      	ldr	r3, [sp, #4]
 8015320:	e9c3 7800 	strd	r7, r8, [r3]
 8015324:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015328:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801532c:	e033      	b.n	8015396 <__kernel_rem_pio2+0x596>
 801532e:	3408      	adds	r4, #8
 8015330:	ab4a      	add	r3, sp, #296	; 0x128
 8015332:	441c      	add	r4, r3
 8015334:	462e      	mov	r6, r5
 8015336:	2000      	movs	r0, #0
 8015338:	2100      	movs	r1, #0
 801533a:	2e00      	cmp	r6, #0
 801533c:	da3a      	bge.n	80153b4 <__kernel_rem_pio2+0x5b4>
 801533e:	9b02      	ldr	r3, [sp, #8]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d03d      	beq.n	80153c0 <__kernel_rem_pio2+0x5c0>
 8015344:	4602      	mov	r2, r0
 8015346:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801534a:	9c01      	ldr	r4, [sp, #4]
 801534c:	e9c4 2300 	strd	r2, r3, [r4]
 8015350:	4602      	mov	r2, r0
 8015352:	460b      	mov	r3, r1
 8015354:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015358:	f7ea ffae 	bl	80002b8 <__aeabi_dsub>
 801535c:	ae4c      	add	r6, sp, #304	; 0x130
 801535e:	2401      	movs	r4, #1
 8015360:	42a5      	cmp	r5, r4
 8015362:	da30      	bge.n	80153c6 <__kernel_rem_pio2+0x5c6>
 8015364:	9b02      	ldr	r3, [sp, #8]
 8015366:	b113      	cbz	r3, 801536e <__kernel_rem_pio2+0x56e>
 8015368:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801536c:	4619      	mov	r1, r3
 801536e:	9b01      	ldr	r3, [sp, #4]
 8015370:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015374:	e00f      	b.n	8015396 <__kernel_rem_pio2+0x596>
 8015376:	ab9a      	add	r3, sp, #616	; 0x268
 8015378:	441c      	add	r4, r3
 801537a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801537e:	2000      	movs	r0, #0
 8015380:	2100      	movs	r1, #0
 8015382:	2d00      	cmp	r5, #0
 8015384:	da10      	bge.n	80153a8 <__kernel_rem_pio2+0x5a8>
 8015386:	9b02      	ldr	r3, [sp, #8]
 8015388:	b113      	cbz	r3, 8015390 <__kernel_rem_pio2+0x590>
 801538a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801538e:	4619      	mov	r1, r3
 8015390:	9b01      	ldr	r3, [sp, #4]
 8015392:	e9c3 0100 	strd	r0, r1, [r3]
 8015396:	9b06      	ldr	r3, [sp, #24]
 8015398:	f003 0007 	and.w	r0, r3, #7
 801539c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80153a0:	ecbd 8b02 	vpop	{d8}
 80153a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153a8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80153ac:	f7ea ff86 	bl	80002bc <__adddf3>
 80153b0:	3d01      	subs	r5, #1
 80153b2:	e7e6      	b.n	8015382 <__kernel_rem_pio2+0x582>
 80153b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80153b8:	f7ea ff80 	bl	80002bc <__adddf3>
 80153bc:	3e01      	subs	r6, #1
 80153be:	e7bc      	b.n	801533a <__kernel_rem_pio2+0x53a>
 80153c0:	4602      	mov	r2, r0
 80153c2:	460b      	mov	r3, r1
 80153c4:	e7c1      	b.n	801534a <__kernel_rem_pio2+0x54a>
 80153c6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80153ca:	f7ea ff77 	bl	80002bc <__adddf3>
 80153ce:	3401      	adds	r4, #1
 80153d0:	e7c6      	b.n	8015360 <__kernel_rem_pio2+0x560>
 80153d2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80153d6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80153da:	4640      	mov	r0, r8
 80153dc:	ec53 2b17 	vmov	r2, r3, d7
 80153e0:	4649      	mov	r1, r9
 80153e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80153e6:	f7ea ff69 	bl	80002bc <__adddf3>
 80153ea:	4602      	mov	r2, r0
 80153ec:	460b      	mov	r3, r1
 80153ee:	4606      	mov	r6, r0
 80153f0:	460f      	mov	r7, r1
 80153f2:	4640      	mov	r0, r8
 80153f4:	4649      	mov	r1, r9
 80153f6:	f7ea ff5f 	bl	80002b8 <__aeabi_dsub>
 80153fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153fe:	f7ea ff5d 	bl	80002bc <__adddf3>
 8015402:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015406:	e9ca 0100 	strd	r0, r1, [sl]
 801540a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801540e:	e770      	b.n	80152f2 <__kernel_rem_pio2+0x4f2>
 8015410:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8015414:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015418:	4630      	mov	r0, r6
 801541a:	ec53 2b17 	vmov	r2, r3, d7
 801541e:	4639      	mov	r1, r7
 8015420:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015424:	f7ea ff4a 	bl	80002bc <__adddf3>
 8015428:	4602      	mov	r2, r0
 801542a:	460b      	mov	r3, r1
 801542c:	4680      	mov	r8, r0
 801542e:	4689      	mov	r9, r1
 8015430:	4630      	mov	r0, r6
 8015432:	4639      	mov	r1, r7
 8015434:	f7ea ff40 	bl	80002b8 <__aeabi_dsub>
 8015438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801543c:	f7ea ff3e 	bl	80002bc <__adddf3>
 8015440:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015444:	e9ca 0100 	strd	r0, r1, [sl]
 8015448:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801544c:	e756      	b.n	80152fc <__kernel_rem_pio2+0x4fc>
 801544e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015452:	f7ea ff33 	bl	80002bc <__adddf3>
 8015456:	3d01      	subs	r5, #1
 8015458:	e756      	b.n	8015308 <__kernel_rem_pio2+0x508>
 801545a:	9b01      	ldr	r3, [sp, #4]
 801545c:	9a01      	ldr	r2, [sp, #4]
 801545e:	601f      	str	r7, [r3, #0]
 8015460:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8015464:	605c      	str	r4, [r3, #4]
 8015466:	609d      	str	r5, [r3, #8]
 8015468:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801546c:	60d3      	str	r3, [r2, #12]
 801546e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015472:	6110      	str	r0, [r2, #16]
 8015474:	6153      	str	r3, [r2, #20]
 8015476:	e78e      	b.n	8015396 <__kernel_rem_pio2+0x596>
 8015478:	41700000 	.word	0x41700000
 801547c:	3e700000 	.word	0x3e700000

08015480 <__kernel_sin>:
 8015480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015484:	ec55 4b10 	vmov	r4, r5, d0
 8015488:	b085      	sub	sp, #20
 801548a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801548e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015492:	ed8d 1b00 	vstr	d1, [sp]
 8015496:	9002      	str	r0, [sp, #8]
 8015498:	da06      	bge.n	80154a8 <__kernel_sin+0x28>
 801549a:	ee10 0a10 	vmov	r0, s0
 801549e:	4629      	mov	r1, r5
 80154a0:	f7eb fb72 	bl	8000b88 <__aeabi_d2iz>
 80154a4:	2800      	cmp	r0, #0
 80154a6:	d051      	beq.n	801554c <__kernel_sin+0xcc>
 80154a8:	4622      	mov	r2, r4
 80154aa:	462b      	mov	r3, r5
 80154ac:	4620      	mov	r0, r4
 80154ae:	4629      	mov	r1, r5
 80154b0:	f7eb f8ba 	bl	8000628 <__aeabi_dmul>
 80154b4:	4682      	mov	sl, r0
 80154b6:	468b      	mov	fp, r1
 80154b8:	4602      	mov	r2, r0
 80154ba:	460b      	mov	r3, r1
 80154bc:	4620      	mov	r0, r4
 80154be:	4629      	mov	r1, r5
 80154c0:	f7eb f8b2 	bl	8000628 <__aeabi_dmul>
 80154c4:	a341      	add	r3, pc, #260	; (adr r3, 80155cc <__kernel_sin+0x14c>)
 80154c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ca:	4680      	mov	r8, r0
 80154cc:	4689      	mov	r9, r1
 80154ce:	4650      	mov	r0, sl
 80154d0:	4659      	mov	r1, fp
 80154d2:	f7eb f8a9 	bl	8000628 <__aeabi_dmul>
 80154d6:	a33f      	add	r3, pc, #252	; (adr r3, 80155d4 <__kernel_sin+0x154>)
 80154d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154dc:	f7ea feec 	bl	80002b8 <__aeabi_dsub>
 80154e0:	4652      	mov	r2, sl
 80154e2:	465b      	mov	r3, fp
 80154e4:	f7eb f8a0 	bl	8000628 <__aeabi_dmul>
 80154e8:	a33c      	add	r3, pc, #240	; (adr r3, 80155dc <__kernel_sin+0x15c>)
 80154ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ee:	f7ea fee5 	bl	80002bc <__adddf3>
 80154f2:	4652      	mov	r2, sl
 80154f4:	465b      	mov	r3, fp
 80154f6:	f7eb f897 	bl	8000628 <__aeabi_dmul>
 80154fa:	a33a      	add	r3, pc, #232	; (adr r3, 80155e4 <__kernel_sin+0x164>)
 80154fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015500:	f7ea feda 	bl	80002b8 <__aeabi_dsub>
 8015504:	4652      	mov	r2, sl
 8015506:	465b      	mov	r3, fp
 8015508:	f7eb f88e 	bl	8000628 <__aeabi_dmul>
 801550c:	a337      	add	r3, pc, #220	; (adr r3, 80155ec <__kernel_sin+0x16c>)
 801550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015512:	f7ea fed3 	bl	80002bc <__adddf3>
 8015516:	9b02      	ldr	r3, [sp, #8]
 8015518:	4606      	mov	r6, r0
 801551a:	460f      	mov	r7, r1
 801551c:	b9db      	cbnz	r3, 8015556 <__kernel_sin+0xd6>
 801551e:	4602      	mov	r2, r0
 8015520:	460b      	mov	r3, r1
 8015522:	4650      	mov	r0, sl
 8015524:	4659      	mov	r1, fp
 8015526:	f7eb f87f 	bl	8000628 <__aeabi_dmul>
 801552a:	a325      	add	r3, pc, #148	; (adr r3, 80155c0 <__kernel_sin+0x140>)
 801552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015530:	f7ea fec2 	bl	80002b8 <__aeabi_dsub>
 8015534:	4642      	mov	r2, r8
 8015536:	464b      	mov	r3, r9
 8015538:	f7eb f876 	bl	8000628 <__aeabi_dmul>
 801553c:	4602      	mov	r2, r0
 801553e:	460b      	mov	r3, r1
 8015540:	4620      	mov	r0, r4
 8015542:	4629      	mov	r1, r5
 8015544:	f7ea feba 	bl	80002bc <__adddf3>
 8015548:	4604      	mov	r4, r0
 801554a:	460d      	mov	r5, r1
 801554c:	ec45 4b10 	vmov	d0, r4, r5
 8015550:	b005      	add	sp, #20
 8015552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015556:	2200      	movs	r2, #0
 8015558:	4b1b      	ldr	r3, [pc, #108]	; (80155c8 <__kernel_sin+0x148>)
 801555a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801555e:	f7eb f863 	bl	8000628 <__aeabi_dmul>
 8015562:	4632      	mov	r2, r6
 8015564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015568:	463b      	mov	r3, r7
 801556a:	4640      	mov	r0, r8
 801556c:	4649      	mov	r1, r9
 801556e:	f7eb f85b 	bl	8000628 <__aeabi_dmul>
 8015572:	4602      	mov	r2, r0
 8015574:	460b      	mov	r3, r1
 8015576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801557a:	f7ea fe9d 	bl	80002b8 <__aeabi_dsub>
 801557e:	4652      	mov	r2, sl
 8015580:	465b      	mov	r3, fp
 8015582:	f7eb f851 	bl	8000628 <__aeabi_dmul>
 8015586:	e9dd 2300 	ldrd	r2, r3, [sp]
 801558a:	f7ea fe95 	bl	80002b8 <__aeabi_dsub>
 801558e:	a30c      	add	r3, pc, #48	; (adr r3, 80155c0 <__kernel_sin+0x140>)
 8015590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015594:	4606      	mov	r6, r0
 8015596:	460f      	mov	r7, r1
 8015598:	4640      	mov	r0, r8
 801559a:	4649      	mov	r1, r9
 801559c:	f7eb f844 	bl	8000628 <__aeabi_dmul>
 80155a0:	4602      	mov	r2, r0
 80155a2:	460b      	mov	r3, r1
 80155a4:	4630      	mov	r0, r6
 80155a6:	4639      	mov	r1, r7
 80155a8:	f7ea fe88 	bl	80002bc <__adddf3>
 80155ac:	4602      	mov	r2, r0
 80155ae:	460b      	mov	r3, r1
 80155b0:	4620      	mov	r0, r4
 80155b2:	4629      	mov	r1, r5
 80155b4:	f7ea fe80 	bl	80002b8 <__aeabi_dsub>
 80155b8:	e7c6      	b.n	8015548 <__kernel_sin+0xc8>
 80155ba:	bf00      	nop
 80155bc:	f3af 8000 	nop.w
 80155c0:	55555549 	.word	0x55555549
 80155c4:	3fc55555 	.word	0x3fc55555
 80155c8:	3fe00000 	.word	0x3fe00000
 80155cc:	5acfd57c 	.word	0x5acfd57c
 80155d0:	3de5d93a 	.word	0x3de5d93a
 80155d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80155d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80155dc:	57b1fe7d 	.word	0x57b1fe7d
 80155e0:	3ec71de3 	.word	0x3ec71de3
 80155e4:	19c161d5 	.word	0x19c161d5
 80155e8:	3f2a01a0 	.word	0x3f2a01a0
 80155ec:	1110f8a6 	.word	0x1110f8a6
 80155f0:	3f811111 	.word	0x3f811111

080155f4 <fabs>:
 80155f4:	ec51 0b10 	vmov	r0, r1, d0
 80155f8:	ee10 2a10 	vmov	r2, s0
 80155fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015600:	ec43 2b10 	vmov	d0, r2, r3
 8015604:	4770      	bx	lr
	...

08015608 <floor>:
 8015608:	ec51 0b10 	vmov	r0, r1, d0
 801560c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015610:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015614:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015618:	2e13      	cmp	r6, #19
 801561a:	460c      	mov	r4, r1
 801561c:	ee10 5a10 	vmov	r5, s0
 8015620:	4680      	mov	r8, r0
 8015622:	dc34      	bgt.n	801568e <floor+0x86>
 8015624:	2e00      	cmp	r6, #0
 8015626:	da16      	bge.n	8015656 <floor+0x4e>
 8015628:	a335      	add	r3, pc, #212	; (adr r3, 8015700 <floor+0xf8>)
 801562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801562e:	f7ea fe45 	bl	80002bc <__adddf3>
 8015632:	2200      	movs	r2, #0
 8015634:	2300      	movs	r3, #0
 8015636:	f7eb fa87 	bl	8000b48 <__aeabi_dcmpgt>
 801563a:	b148      	cbz	r0, 8015650 <floor+0x48>
 801563c:	2c00      	cmp	r4, #0
 801563e:	da59      	bge.n	80156f4 <floor+0xec>
 8015640:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015644:	4a30      	ldr	r2, [pc, #192]	; (8015708 <floor+0x100>)
 8015646:	432b      	orrs	r3, r5
 8015648:	2500      	movs	r5, #0
 801564a:	42ab      	cmp	r3, r5
 801564c:	bf18      	it	ne
 801564e:	4614      	movne	r4, r2
 8015650:	4621      	mov	r1, r4
 8015652:	4628      	mov	r0, r5
 8015654:	e025      	b.n	80156a2 <floor+0x9a>
 8015656:	4f2d      	ldr	r7, [pc, #180]	; (801570c <floor+0x104>)
 8015658:	4137      	asrs	r7, r6
 801565a:	ea01 0307 	and.w	r3, r1, r7
 801565e:	4303      	orrs	r3, r0
 8015660:	d01f      	beq.n	80156a2 <floor+0x9a>
 8015662:	a327      	add	r3, pc, #156	; (adr r3, 8015700 <floor+0xf8>)
 8015664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015668:	f7ea fe28 	bl	80002bc <__adddf3>
 801566c:	2200      	movs	r2, #0
 801566e:	2300      	movs	r3, #0
 8015670:	f7eb fa6a 	bl	8000b48 <__aeabi_dcmpgt>
 8015674:	2800      	cmp	r0, #0
 8015676:	d0eb      	beq.n	8015650 <floor+0x48>
 8015678:	2c00      	cmp	r4, #0
 801567a:	bfbe      	ittt	lt
 801567c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015680:	fa43 f606 	asrlt.w	r6, r3, r6
 8015684:	19a4      	addlt	r4, r4, r6
 8015686:	ea24 0407 	bic.w	r4, r4, r7
 801568a:	2500      	movs	r5, #0
 801568c:	e7e0      	b.n	8015650 <floor+0x48>
 801568e:	2e33      	cmp	r6, #51	; 0x33
 8015690:	dd0b      	ble.n	80156aa <floor+0xa2>
 8015692:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015696:	d104      	bne.n	80156a2 <floor+0x9a>
 8015698:	ee10 2a10 	vmov	r2, s0
 801569c:	460b      	mov	r3, r1
 801569e:	f7ea fe0d 	bl	80002bc <__adddf3>
 80156a2:	ec41 0b10 	vmov	d0, r0, r1
 80156a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156aa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80156ae:	f04f 33ff 	mov.w	r3, #4294967295
 80156b2:	fa23 f707 	lsr.w	r7, r3, r7
 80156b6:	4207      	tst	r7, r0
 80156b8:	d0f3      	beq.n	80156a2 <floor+0x9a>
 80156ba:	a311      	add	r3, pc, #68	; (adr r3, 8015700 <floor+0xf8>)
 80156bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c0:	f7ea fdfc 	bl	80002bc <__adddf3>
 80156c4:	2200      	movs	r2, #0
 80156c6:	2300      	movs	r3, #0
 80156c8:	f7eb fa3e 	bl	8000b48 <__aeabi_dcmpgt>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	d0bf      	beq.n	8015650 <floor+0x48>
 80156d0:	2c00      	cmp	r4, #0
 80156d2:	da02      	bge.n	80156da <floor+0xd2>
 80156d4:	2e14      	cmp	r6, #20
 80156d6:	d103      	bne.n	80156e0 <floor+0xd8>
 80156d8:	3401      	adds	r4, #1
 80156da:	ea25 0507 	bic.w	r5, r5, r7
 80156de:	e7b7      	b.n	8015650 <floor+0x48>
 80156e0:	2301      	movs	r3, #1
 80156e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80156e6:	fa03 f606 	lsl.w	r6, r3, r6
 80156ea:	4435      	add	r5, r6
 80156ec:	4545      	cmp	r5, r8
 80156ee:	bf38      	it	cc
 80156f0:	18e4      	addcc	r4, r4, r3
 80156f2:	e7f2      	b.n	80156da <floor+0xd2>
 80156f4:	2500      	movs	r5, #0
 80156f6:	462c      	mov	r4, r5
 80156f8:	e7aa      	b.n	8015650 <floor+0x48>
 80156fa:	bf00      	nop
 80156fc:	f3af 8000 	nop.w
 8015700:	8800759c 	.word	0x8800759c
 8015704:	7e37e43c 	.word	0x7e37e43c
 8015708:	bff00000 	.word	0xbff00000
 801570c:	000fffff 	.word	0x000fffff

08015710 <scalbn>:
 8015710:	b570      	push	{r4, r5, r6, lr}
 8015712:	ec55 4b10 	vmov	r4, r5, d0
 8015716:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801571a:	4606      	mov	r6, r0
 801571c:	462b      	mov	r3, r5
 801571e:	b9aa      	cbnz	r2, 801574c <scalbn+0x3c>
 8015720:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015724:	4323      	orrs	r3, r4
 8015726:	d03b      	beq.n	80157a0 <scalbn+0x90>
 8015728:	4b31      	ldr	r3, [pc, #196]	; (80157f0 <scalbn+0xe0>)
 801572a:	4629      	mov	r1, r5
 801572c:	2200      	movs	r2, #0
 801572e:	ee10 0a10 	vmov	r0, s0
 8015732:	f7ea ff79 	bl	8000628 <__aeabi_dmul>
 8015736:	4b2f      	ldr	r3, [pc, #188]	; (80157f4 <scalbn+0xe4>)
 8015738:	429e      	cmp	r6, r3
 801573a:	4604      	mov	r4, r0
 801573c:	460d      	mov	r5, r1
 801573e:	da12      	bge.n	8015766 <scalbn+0x56>
 8015740:	a327      	add	r3, pc, #156	; (adr r3, 80157e0 <scalbn+0xd0>)
 8015742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015746:	f7ea ff6f 	bl	8000628 <__aeabi_dmul>
 801574a:	e009      	b.n	8015760 <scalbn+0x50>
 801574c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015750:	428a      	cmp	r2, r1
 8015752:	d10c      	bne.n	801576e <scalbn+0x5e>
 8015754:	ee10 2a10 	vmov	r2, s0
 8015758:	4620      	mov	r0, r4
 801575a:	4629      	mov	r1, r5
 801575c:	f7ea fdae 	bl	80002bc <__adddf3>
 8015760:	4604      	mov	r4, r0
 8015762:	460d      	mov	r5, r1
 8015764:	e01c      	b.n	80157a0 <scalbn+0x90>
 8015766:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801576a:	460b      	mov	r3, r1
 801576c:	3a36      	subs	r2, #54	; 0x36
 801576e:	4432      	add	r2, r6
 8015770:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015774:	428a      	cmp	r2, r1
 8015776:	dd0b      	ble.n	8015790 <scalbn+0x80>
 8015778:	ec45 4b11 	vmov	d1, r4, r5
 801577c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80157e8 <scalbn+0xd8>
 8015780:	f000 f83c 	bl	80157fc <copysign>
 8015784:	a318      	add	r3, pc, #96	; (adr r3, 80157e8 <scalbn+0xd8>)
 8015786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801578a:	ec51 0b10 	vmov	r0, r1, d0
 801578e:	e7da      	b.n	8015746 <scalbn+0x36>
 8015790:	2a00      	cmp	r2, #0
 8015792:	dd08      	ble.n	80157a6 <scalbn+0x96>
 8015794:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015798:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801579c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80157a0:	ec45 4b10 	vmov	d0, r4, r5
 80157a4:	bd70      	pop	{r4, r5, r6, pc}
 80157a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80157aa:	da0d      	bge.n	80157c8 <scalbn+0xb8>
 80157ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80157b0:	429e      	cmp	r6, r3
 80157b2:	ec45 4b11 	vmov	d1, r4, r5
 80157b6:	dce1      	bgt.n	801577c <scalbn+0x6c>
 80157b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80157e0 <scalbn+0xd0>
 80157bc:	f000 f81e 	bl	80157fc <copysign>
 80157c0:	a307      	add	r3, pc, #28	; (adr r3, 80157e0 <scalbn+0xd0>)
 80157c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c6:	e7e0      	b.n	801578a <scalbn+0x7a>
 80157c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80157cc:	3236      	adds	r2, #54	; 0x36
 80157ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80157d6:	4620      	mov	r0, r4
 80157d8:	4629      	mov	r1, r5
 80157da:	2200      	movs	r2, #0
 80157dc:	4b06      	ldr	r3, [pc, #24]	; (80157f8 <scalbn+0xe8>)
 80157de:	e7b2      	b.n	8015746 <scalbn+0x36>
 80157e0:	c2f8f359 	.word	0xc2f8f359
 80157e4:	01a56e1f 	.word	0x01a56e1f
 80157e8:	8800759c 	.word	0x8800759c
 80157ec:	7e37e43c 	.word	0x7e37e43c
 80157f0:	43500000 	.word	0x43500000
 80157f4:	ffff3cb0 	.word	0xffff3cb0
 80157f8:	3c900000 	.word	0x3c900000

080157fc <copysign>:
 80157fc:	ec51 0b10 	vmov	r0, r1, d0
 8015800:	ee11 0a90 	vmov	r0, s3
 8015804:	ee10 2a10 	vmov	r2, s0
 8015808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801580c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015810:	ea41 0300 	orr.w	r3, r1, r0
 8015814:	ec43 2b10 	vmov	d0, r2, r3
 8015818:	4770      	bx	lr
	...

0801581c <__errno>:
 801581c:	4b01      	ldr	r3, [pc, #4]	; (8015824 <__errno+0x8>)
 801581e:	6818      	ldr	r0, [r3, #0]
 8015820:	4770      	bx	lr
 8015822:	bf00      	nop
 8015824:	2000000c 	.word	0x2000000c

08015828 <__libc_init_array>:
 8015828:	b570      	push	{r4, r5, r6, lr}
 801582a:	4e0d      	ldr	r6, [pc, #52]	; (8015860 <__libc_init_array+0x38>)
 801582c:	4c0d      	ldr	r4, [pc, #52]	; (8015864 <__libc_init_array+0x3c>)
 801582e:	1ba4      	subs	r4, r4, r6
 8015830:	10a4      	asrs	r4, r4, #2
 8015832:	2500      	movs	r5, #0
 8015834:	42a5      	cmp	r5, r4
 8015836:	d109      	bne.n	801584c <__libc_init_array+0x24>
 8015838:	4e0b      	ldr	r6, [pc, #44]	; (8015868 <__libc_init_array+0x40>)
 801583a:	4c0c      	ldr	r4, [pc, #48]	; (801586c <__libc_init_array+0x44>)
 801583c:	f004 f9e6 	bl	8019c0c <_init>
 8015840:	1ba4      	subs	r4, r4, r6
 8015842:	10a4      	asrs	r4, r4, #2
 8015844:	2500      	movs	r5, #0
 8015846:	42a5      	cmp	r5, r4
 8015848:	d105      	bne.n	8015856 <__libc_init_array+0x2e>
 801584a:	bd70      	pop	{r4, r5, r6, pc}
 801584c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015850:	4798      	blx	r3
 8015852:	3501      	adds	r5, #1
 8015854:	e7ee      	b.n	8015834 <__libc_init_array+0xc>
 8015856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801585a:	4798      	blx	r3
 801585c:	3501      	adds	r5, #1
 801585e:	e7f2      	b.n	8015846 <__libc_init_array+0x1e>
 8015860:	0801a63c 	.word	0x0801a63c
 8015864:	0801a63c 	.word	0x0801a63c
 8015868:	0801a63c 	.word	0x0801a63c
 801586c:	0801a644 	.word	0x0801a644

08015870 <memset>:
 8015870:	4402      	add	r2, r0
 8015872:	4603      	mov	r3, r0
 8015874:	4293      	cmp	r3, r2
 8015876:	d100      	bne.n	801587a <memset+0xa>
 8015878:	4770      	bx	lr
 801587a:	f803 1b01 	strb.w	r1, [r3], #1
 801587e:	e7f9      	b.n	8015874 <memset+0x4>

08015880 <__cvt>:
 8015880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015884:	ec55 4b10 	vmov	r4, r5, d0
 8015888:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801588a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801588e:	2d00      	cmp	r5, #0
 8015890:	460e      	mov	r6, r1
 8015892:	4691      	mov	r9, r2
 8015894:	4619      	mov	r1, r3
 8015896:	bfb8      	it	lt
 8015898:	4622      	movlt	r2, r4
 801589a:	462b      	mov	r3, r5
 801589c:	f027 0720 	bic.w	r7, r7, #32
 80158a0:	bfbb      	ittet	lt
 80158a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80158a6:	461d      	movlt	r5, r3
 80158a8:	2300      	movge	r3, #0
 80158aa:	232d      	movlt	r3, #45	; 0x2d
 80158ac:	bfb8      	it	lt
 80158ae:	4614      	movlt	r4, r2
 80158b0:	2f46      	cmp	r7, #70	; 0x46
 80158b2:	700b      	strb	r3, [r1, #0]
 80158b4:	d004      	beq.n	80158c0 <__cvt+0x40>
 80158b6:	2f45      	cmp	r7, #69	; 0x45
 80158b8:	d100      	bne.n	80158bc <__cvt+0x3c>
 80158ba:	3601      	adds	r6, #1
 80158bc:	2102      	movs	r1, #2
 80158be:	e000      	b.n	80158c2 <__cvt+0x42>
 80158c0:	2103      	movs	r1, #3
 80158c2:	ab03      	add	r3, sp, #12
 80158c4:	9301      	str	r3, [sp, #4]
 80158c6:	ab02      	add	r3, sp, #8
 80158c8:	9300      	str	r3, [sp, #0]
 80158ca:	4632      	mov	r2, r6
 80158cc:	4653      	mov	r3, sl
 80158ce:	ec45 4b10 	vmov	d0, r4, r5
 80158d2:	f001 fdfd 	bl	80174d0 <_dtoa_r>
 80158d6:	2f47      	cmp	r7, #71	; 0x47
 80158d8:	4680      	mov	r8, r0
 80158da:	d102      	bne.n	80158e2 <__cvt+0x62>
 80158dc:	f019 0f01 	tst.w	r9, #1
 80158e0:	d026      	beq.n	8015930 <__cvt+0xb0>
 80158e2:	2f46      	cmp	r7, #70	; 0x46
 80158e4:	eb08 0906 	add.w	r9, r8, r6
 80158e8:	d111      	bne.n	801590e <__cvt+0x8e>
 80158ea:	f898 3000 	ldrb.w	r3, [r8]
 80158ee:	2b30      	cmp	r3, #48	; 0x30
 80158f0:	d10a      	bne.n	8015908 <__cvt+0x88>
 80158f2:	2200      	movs	r2, #0
 80158f4:	2300      	movs	r3, #0
 80158f6:	4620      	mov	r0, r4
 80158f8:	4629      	mov	r1, r5
 80158fa:	f7eb f8fd 	bl	8000af8 <__aeabi_dcmpeq>
 80158fe:	b918      	cbnz	r0, 8015908 <__cvt+0x88>
 8015900:	f1c6 0601 	rsb	r6, r6, #1
 8015904:	f8ca 6000 	str.w	r6, [sl]
 8015908:	f8da 3000 	ldr.w	r3, [sl]
 801590c:	4499      	add	r9, r3
 801590e:	2200      	movs	r2, #0
 8015910:	2300      	movs	r3, #0
 8015912:	4620      	mov	r0, r4
 8015914:	4629      	mov	r1, r5
 8015916:	f7eb f8ef 	bl	8000af8 <__aeabi_dcmpeq>
 801591a:	b938      	cbnz	r0, 801592c <__cvt+0xac>
 801591c:	2230      	movs	r2, #48	; 0x30
 801591e:	9b03      	ldr	r3, [sp, #12]
 8015920:	454b      	cmp	r3, r9
 8015922:	d205      	bcs.n	8015930 <__cvt+0xb0>
 8015924:	1c59      	adds	r1, r3, #1
 8015926:	9103      	str	r1, [sp, #12]
 8015928:	701a      	strb	r2, [r3, #0]
 801592a:	e7f8      	b.n	801591e <__cvt+0x9e>
 801592c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015930:	9b03      	ldr	r3, [sp, #12]
 8015932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015934:	eba3 0308 	sub.w	r3, r3, r8
 8015938:	4640      	mov	r0, r8
 801593a:	6013      	str	r3, [r2, #0]
 801593c:	b004      	add	sp, #16
 801593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015942 <__exponent>:
 8015942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015944:	2900      	cmp	r1, #0
 8015946:	4604      	mov	r4, r0
 8015948:	bfba      	itte	lt
 801594a:	4249      	neglt	r1, r1
 801594c:	232d      	movlt	r3, #45	; 0x2d
 801594e:	232b      	movge	r3, #43	; 0x2b
 8015950:	2909      	cmp	r1, #9
 8015952:	f804 2b02 	strb.w	r2, [r4], #2
 8015956:	7043      	strb	r3, [r0, #1]
 8015958:	dd20      	ble.n	801599c <__exponent+0x5a>
 801595a:	f10d 0307 	add.w	r3, sp, #7
 801595e:	461f      	mov	r7, r3
 8015960:	260a      	movs	r6, #10
 8015962:	fb91 f5f6 	sdiv	r5, r1, r6
 8015966:	fb06 1115 	mls	r1, r6, r5, r1
 801596a:	3130      	adds	r1, #48	; 0x30
 801596c:	2d09      	cmp	r5, #9
 801596e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015972:	f103 32ff 	add.w	r2, r3, #4294967295
 8015976:	4629      	mov	r1, r5
 8015978:	dc09      	bgt.n	801598e <__exponent+0x4c>
 801597a:	3130      	adds	r1, #48	; 0x30
 801597c:	3b02      	subs	r3, #2
 801597e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015982:	42bb      	cmp	r3, r7
 8015984:	4622      	mov	r2, r4
 8015986:	d304      	bcc.n	8015992 <__exponent+0x50>
 8015988:	1a10      	subs	r0, r2, r0
 801598a:	b003      	add	sp, #12
 801598c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801598e:	4613      	mov	r3, r2
 8015990:	e7e7      	b.n	8015962 <__exponent+0x20>
 8015992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015996:	f804 2b01 	strb.w	r2, [r4], #1
 801599a:	e7f2      	b.n	8015982 <__exponent+0x40>
 801599c:	2330      	movs	r3, #48	; 0x30
 801599e:	4419      	add	r1, r3
 80159a0:	7083      	strb	r3, [r0, #2]
 80159a2:	1d02      	adds	r2, r0, #4
 80159a4:	70c1      	strb	r1, [r0, #3]
 80159a6:	e7ef      	b.n	8015988 <__exponent+0x46>

080159a8 <_printf_float>:
 80159a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ac:	b08d      	sub	sp, #52	; 0x34
 80159ae:	460c      	mov	r4, r1
 80159b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80159b4:	4616      	mov	r6, r2
 80159b6:	461f      	mov	r7, r3
 80159b8:	4605      	mov	r5, r0
 80159ba:	f002 fe7b 	bl	80186b4 <_localeconv_r>
 80159be:	6803      	ldr	r3, [r0, #0]
 80159c0:	9304      	str	r3, [sp, #16]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7ea fc1c 	bl	8000200 <strlen>
 80159c8:	2300      	movs	r3, #0
 80159ca:	930a      	str	r3, [sp, #40]	; 0x28
 80159cc:	f8d8 3000 	ldr.w	r3, [r8]
 80159d0:	9005      	str	r0, [sp, #20]
 80159d2:	3307      	adds	r3, #7
 80159d4:	f023 0307 	bic.w	r3, r3, #7
 80159d8:	f103 0208 	add.w	r2, r3, #8
 80159dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80159e0:	f8d4 b000 	ldr.w	fp, [r4]
 80159e4:	f8c8 2000 	str.w	r2, [r8]
 80159e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80159f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80159f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159f8:	9307      	str	r3, [sp, #28]
 80159fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80159fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015a02:	4ba7      	ldr	r3, [pc, #668]	; (8015ca0 <_printf_float+0x2f8>)
 8015a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a08:	f7eb f8a8 	bl	8000b5c <__aeabi_dcmpun>
 8015a0c:	bb70      	cbnz	r0, 8015a6c <_printf_float+0xc4>
 8015a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a12:	4ba3      	ldr	r3, [pc, #652]	; (8015ca0 <_printf_float+0x2f8>)
 8015a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a18:	f7eb f882 	bl	8000b20 <__aeabi_dcmple>
 8015a1c:	bb30      	cbnz	r0, 8015a6c <_printf_float+0xc4>
 8015a1e:	2200      	movs	r2, #0
 8015a20:	2300      	movs	r3, #0
 8015a22:	4640      	mov	r0, r8
 8015a24:	4649      	mov	r1, r9
 8015a26:	f7eb f871 	bl	8000b0c <__aeabi_dcmplt>
 8015a2a:	b110      	cbz	r0, 8015a32 <_printf_float+0x8a>
 8015a2c:	232d      	movs	r3, #45	; 0x2d
 8015a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a32:	4a9c      	ldr	r2, [pc, #624]	; (8015ca4 <_printf_float+0x2fc>)
 8015a34:	4b9c      	ldr	r3, [pc, #624]	; (8015ca8 <_printf_float+0x300>)
 8015a36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015a3a:	bf8c      	ite	hi
 8015a3c:	4690      	movhi	r8, r2
 8015a3e:	4698      	movls	r8, r3
 8015a40:	2303      	movs	r3, #3
 8015a42:	f02b 0204 	bic.w	r2, fp, #4
 8015a46:	6123      	str	r3, [r4, #16]
 8015a48:	6022      	str	r2, [r4, #0]
 8015a4a:	f04f 0900 	mov.w	r9, #0
 8015a4e:	9700      	str	r7, [sp, #0]
 8015a50:	4633      	mov	r3, r6
 8015a52:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a54:	4621      	mov	r1, r4
 8015a56:	4628      	mov	r0, r5
 8015a58:	f000 f9e6 	bl	8015e28 <_printf_common>
 8015a5c:	3001      	adds	r0, #1
 8015a5e:	f040 808d 	bne.w	8015b7c <_printf_float+0x1d4>
 8015a62:	f04f 30ff 	mov.w	r0, #4294967295
 8015a66:	b00d      	add	sp, #52	; 0x34
 8015a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a6c:	4642      	mov	r2, r8
 8015a6e:	464b      	mov	r3, r9
 8015a70:	4640      	mov	r0, r8
 8015a72:	4649      	mov	r1, r9
 8015a74:	f7eb f872 	bl	8000b5c <__aeabi_dcmpun>
 8015a78:	b110      	cbz	r0, 8015a80 <_printf_float+0xd8>
 8015a7a:	4a8c      	ldr	r2, [pc, #560]	; (8015cac <_printf_float+0x304>)
 8015a7c:	4b8c      	ldr	r3, [pc, #560]	; (8015cb0 <_printf_float+0x308>)
 8015a7e:	e7da      	b.n	8015a36 <_printf_float+0x8e>
 8015a80:	6861      	ldr	r1, [r4, #4]
 8015a82:	1c4b      	adds	r3, r1, #1
 8015a84:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015a88:	a80a      	add	r0, sp, #40	; 0x28
 8015a8a:	d13e      	bne.n	8015b0a <_printf_float+0x162>
 8015a8c:	2306      	movs	r3, #6
 8015a8e:	6063      	str	r3, [r4, #4]
 8015a90:	2300      	movs	r3, #0
 8015a92:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015a96:	ab09      	add	r3, sp, #36	; 0x24
 8015a98:	9300      	str	r3, [sp, #0]
 8015a9a:	ec49 8b10 	vmov	d0, r8, r9
 8015a9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015aa2:	6022      	str	r2, [r4, #0]
 8015aa4:	f8cd a004 	str.w	sl, [sp, #4]
 8015aa8:	6861      	ldr	r1, [r4, #4]
 8015aaa:	4628      	mov	r0, r5
 8015aac:	f7ff fee8 	bl	8015880 <__cvt>
 8015ab0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015ab4:	2b47      	cmp	r3, #71	; 0x47
 8015ab6:	4680      	mov	r8, r0
 8015ab8:	d109      	bne.n	8015ace <_printf_float+0x126>
 8015aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015abc:	1cd8      	adds	r0, r3, #3
 8015abe:	db02      	blt.n	8015ac6 <_printf_float+0x11e>
 8015ac0:	6862      	ldr	r2, [r4, #4]
 8015ac2:	4293      	cmp	r3, r2
 8015ac4:	dd47      	ble.n	8015b56 <_printf_float+0x1ae>
 8015ac6:	f1aa 0a02 	sub.w	sl, sl, #2
 8015aca:	fa5f fa8a 	uxtb.w	sl, sl
 8015ace:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ad4:	d824      	bhi.n	8015b20 <_printf_float+0x178>
 8015ad6:	3901      	subs	r1, #1
 8015ad8:	4652      	mov	r2, sl
 8015ada:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015ade:	9109      	str	r1, [sp, #36]	; 0x24
 8015ae0:	f7ff ff2f 	bl	8015942 <__exponent>
 8015ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ae6:	1813      	adds	r3, r2, r0
 8015ae8:	2a01      	cmp	r2, #1
 8015aea:	4681      	mov	r9, r0
 8015aec:	6123      	str	r3, [r4, #16]
 8015aee:	dc02      	bgt.n	8015af6 <_printf_float+0x14e>
 8015af0:	6822      	ldr	r2, [r4, #0]
 8015af2:	07d1      	lsls	r1, r2, #31
 8015af4:	d501      	bpl.n	8015afa <_printf_float+0x152>
 8015af6:	3301      	adds	r3, #1
 8015af8:	6123      	str	r3, [r4, #16]
 8015afa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d0a5      	beq.n	8015a4e <_printf_float+0xa6>
 8015b02:	232d      	movs	r3, #45	; 0x2d
 8015b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b08:	e7a1      	b.n	8015a4e <_printf_float+0xa6>
 8015b0a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015b0e:	f000 8177 	beq.w	8015e00 <_printf_float+0x458>
 8015b12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015b16:	d1bb      	bne.n	8015a90 <_printf_float+0xe8>
 8015b18:	2900      	cmp	r1, #0
 8015b1a:	d1b9      	bne.n	8015a90 <_printf_float+0xe8>
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	e7b6      	b.n	8015a8e <_printf_float+0xe6>
 8015b20:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015b24:	d119      	bne.n	8015b5a <_printf_float+0x1b2>
 8015b26:	2900      	cmp	r1, #0
 8015b28:	6863      	ldr	r3, [r4, #4]
 8015b2a:	dd0c      	ble.n	8015b46 <_printf_float+0x19e>
 8015b2c:	6121      	str	r1, [r4, #16]
 8015b2e:	b913      	cbnz	r3, 8015b36 <_printf_float+0x18e>
 8015b30:	6822      	ldr	r2, [r4, #0]
 8015b32:	07d2      	lsls	r2, r2, #31
 8015b34:	d502      	bpl.n	8015b3c <_printf_float+0x194>
 8015b36:	3301      	adds	r3, #1
 8015b38:	440b      	add	r3, r1
 8015b3a:	6123      	str	r3, [r4, #16]
 8015b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b3e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015b40:	f04f 0900 	mov.w	r9, #0
 8015b44:	e7d9      	b.n	8015afa <_printf_float+0x152>
 8015b46:	b913      	cbnz	r3, 8015b4e <_printf_float+0x1a6>
 8015b48:	6822      	ldr	r2, [r4, #0]
 8015b4a:	07d0      	lsls	r0, r2, #31
 8015b4c:	d501      	bpl.n	8015b52 <_printf_float+0x1aa>
 8015b4e:	3302      	adds	r3, #2
 8015b50:	e7f3      	b.n	8015b3a <_printf_float+0x192>
 8015b52:	2301      	movs	r3, #1
 8015b54:	e7f1      	b.n	8015b3a <_printf_float+0x192>
 8015b56:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015b5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b5e:	4293      	cmp	r3, r2
 8015b60:	db05      	blt.n	8015b6e <_printf_float+0x1c6>
 8015b62:	6822      	ldr	r2, [r4, #0]
 8015b64:	6123      	str	r3, [r4, #16]
 8015b66:	07d1      	lsls	r1, r2, #31
 8015b68:	d5e8      	bpl.n	8015b3c <_printf_float+0x194>
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	e7e5      	b.n	8015b3a <_printf_float+0x192>
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	bfd4      	ite	le
 8015b72:	f1c3 0302 	rsble	r3, r3, #2
 8015b76:	2301      	movgt	r3, #1
 8015b78:	4413      	add	r3, r2
 8015b7a:	e7de      	b.n	8015b3a <_printf_float+0x192>
 8015b7c:	6823      	ldr	r3, [r4, #0]
 8015b7e:	055a      	lsls	r2, r3, #21
 8015b80:	d407      	bmi.n	8015b92 <_printf_float+0x1ea>
 8015b82:	6923      	ldr	r3, [r4, #16]
 8015b84:	4642      	mov	r2, r8
 8015b86:	4631      	mov	r1, r6
 8015b88:	4628      	mov	r0, r5
 8015b8a:	47b8      	blx	r7
 8015b8c:	3001      	adds	r0, #1
 8015b8e:	d12b      	bne.n	8015be8 <_printf_float+0x240>
 8015b90:	e767      	b.n	8015a62 <_printf_float+0xba>
 8015b92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b96:	f240 80dc 	bls.w	8015d52 <_printf_float+0x3aa>
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015ba2:	f7ea ffa9 	bl	8000af8 <__aeabi_dcmpeq>
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	d033      	beq.n	8015c12 <_printf_float+0x26a>
 8015baa:	2301      	movs	r3, #1
 8015bac:	4a41      	ldr	r2, [pc, #260]	; (8015cb4 <_printf_float+0x30c>)
 8015bae:	4631      	mov	r1, r6
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	47b8      	blx	r7
 8015bb4:	3001      	adds	r0, #1
 8015bb6:	f43f af54 	beq.w	8015a62 <_printf_float+0xba>
 8015bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	db02      	blt.n	8015bc8 <_printf_float+0x220>
 8015bc2:	6823      	ldr	r3, [r4, #0]
 8015bc4:	07d8      	lsls	r0, r3, #31
 8015bc6:	d50f      	bpl.n	8015be8 <_printf_float+0x240>
 8015bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015bcc:	4631      	mov	r1, r6
 8015bce:	4628      	mov	r0, r5
 8015bd0:	47b8      	blx	r7
 8015bd2:	3001      	adds	r0, #1
 8015bd4:	f43f af45 	beq.w	8015a62 <_printf_float+0xba>
 8015bd8:	f04f 0800 	mov.w	r8, #0
 8015bdc:	f104 091a 	add.w	r9, r4, #26
 8015be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015be2:	3b01      	subs	r3, #1
 8015be4:	4543      	cmp	r3, r8
 8015be6:	dc09      	bgt.n	8015bfc <_printf_float+0x254>
 8015be8:	6823      	ldr	r3, [r4, #0]
 8015bea:	079b      	lsls	r3, r3, #30
 8015bec:	f100 8103 	bmi.w	8015df6 <_printf_float+0x44e>
 8015bf0:	68e0      	ldr	r0, [r4, #12]
 8015bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bf4:	4298      	cmp	r0, r3
 8015bf6:	bfb8      	it	lt
 8015bf8:	4618      	movlt	r0, r3
 8015bfa:	e734      	b.n	8015a66 <_printf_float+0xbe>
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	464a      	mov	r2, r9
 8015c00:	4631      	mov	r1, r6
 8015c02:	4628      	mov	r0, r5
 8015c04:	47b8      	blx	r7
 8015c06:	3001      	adds	r0, #1
 8015c08:	f43f af2b 	beq.w	8015a62 <_printf_float+0xba>
 8015c0c:	f108 0801 	add.w	r8, r8, #1
 8015c10:	e7e6      	b.n	8015be0 <_printf_float+0x238>
 8015c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	dc2b      	bgt.n	8015c70 <_printf_float+0x2c8>
 8015c18:	2301      	movs	r3, #1
 8015c1a:	4a26      	ldr	r2, [pc, #152]	; (8015cb4 <_printf_float+0x30c>)
 8015c1c:	4631      	mov	r1, r6
 8015c1e:	4628      	mov	r0, r5
 8015c20:	47b8      	blx	r7
 8015c22:	3001      	adds	r0, #1
 8015c24:	f43f af1d 	beq.w	8015a62 <_printf_float+0xba>
 8015c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c2a:	b923      	cbnz	r3, 8015c36 <_printf_float+0x28e>
 8015c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c2e:	b913      	cbnz	r3, 8015c36 <_printf_float+0x28e>
 8015c30:	6823      	ldr	r3, [r4, #0]
 8015c32:	07d9      	lsls	r1, r3, #31
 8015c34:	d5d8      	bpl.n	8015be8 <_printf_float+0x240>
 8015c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c3a:	4631      	mov	r1, r6
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	47b8      	blx	r7
 8015c40:	3001      	adds	r0, #1
 8015c42:	f43f af0e 	beq.w	8015a62 <_printf_float+0xba>
 8015c46:	f04f 0900 	mov.w	r9, #0
 8015c4a:	f104 0a1a 	add.w	sl, r4, #26
 8015c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c50:	425b      	negs	r3, r3
 8015c52:	454b      	cmp	r3, r9
 8015c54:	dc01      	bgt.n	8015c5a <_printf_float+0x2b2>
 8015c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c58:	e794      	b.n	8015b84 <_printf_float+0x1dc>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	4652      	mov	r2, sl
 8015c5e:	4631      	mov	r1, r6
 8015c60:	4628      	mov	r0, r5
 8015c62:	47b8      	blx	r7
 8015c64:	3001      	adds	r0, #1
 8015c66:	f43f aefc 	beq.w	8015a62 <_printf_float+0xba>
 8015c6a:	f109 0901 	add.w	r9, r9, #1
 8015c6e:	e7ee      	b.n	8015c4e <_printf_float+0x2a6>
 8015c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c74:	429a      	cmp	r2, r3
 8015c76:	bfa8      	it	ge
 8015c78:	461a      	movge	r2, r3
 8015c7a:	2a00      	cmp	r2, #0
 8015c7c:	4691      	mov	r9, r2
 8015c7e:	dd07      	ble.n	8015c90 <_printf_float+0x2e8>
 8015c80:	4613      	mov	r3, r2
 8015c82:	4631      	mov	r1, r6
 8015c84:	4642      	mov	r2, r8
 8015c86:	4628      	mov	r0, r5
 8015c88:	47b8      	blx	r7
 8015c8a:	3001      	adds	r0, #1
 8015c8c:	f43f aee9 	beq.w	8015a62 <_printf_float+0xba>
 8015c90:	f104 031a 	add.w	r3, r4, #26
 8015c94:	f04f 0b00 	mov.w	fp, #0
 8015c98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c9c:	9306      	str	r3, [sp, #24]
 8015c9e:	e015      	b.n	8015ccc <_printf_float+0x324>
 8015ca0:	7fefffff 	.word	0x7fefffff
 8015ca4:	0801a30c 	.word	0x0801a30c
 8015ca8:	0801a308 	.word	0x0801a308
 8015cac:	0801a314 	.word	0x0801a314
 8015cb0:	0801a310 	.word	0x0801a310
 8015cb4:	0801a4cb 	.word	0x0801a4cb
 8015cb8:	2301      	movs	r3, #1
 8015cba:	9a06      	ldr	r2, [sp, #24]
 8015cbc:	4631      	mov	r1, r6
 8015cbe:	4628      	mov	r0, r5
 8015cc0:	47b8      	blx	r7
 8015cc2:	3001      	adds	r0, #1
 8015cc4:	f43f aecd 	beq.w	8015a62 <_printf_float+0xba>
 8015cc8:	f10b 0b01 	add.w	fp, fp, #1
 8015ccc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015cd0:	ebaa 0309 	sub.w	r3, sl, r9
 8015cd4:	455b      	cmp	r3, fp
 8015cd6:	dcef      	bgt.n	8015cb8 <_printf_float+0x310>
 8015cd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	44d0      	add	r8, sl
 8015ce0:	db15      	blt.n	8015d0e <_printf_float+0x366>
 8015ce2:	6823      	ldr	r3, [r4, #0]
 8015ce4:	07da      	lsls	r2, r3, #31
 8015ce6:	d412      	bmi.n	8015d0e <_printf_float+0x366>
 8015ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015cec:	eba3 020a 	sub.w	r2, r3, sl
 8015cf0:	eba3 0a01 	sub.w	sl, r3, r1
 8015cf4:	4592      	cmp	sl, r2
 8015cf6:	bfa8      	it	ge
 8015cf8:	4692      	movge	sl, r2
 8015cfa:	f1ba 0f00 	cmp.w	sl, #0
 8015cfe:	dc0e      	bgt.n	8015d1e <_printf_float+0x376>
 8015d00:	f04f 0800 	mov.w	r8, #0
 8015d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d08:	f104 091a 	add.w	r9, r4, #26
 8015d0c:	e019      	b.n	8015d42 <_printf_float+0x39a>
 8015d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d12:	4631      	mov	r1, r6
 8015d14:	4628      	mov	r0, r5
 8015d16:	47b8      	blx	r7
 8015d18:	3001      	adds	r0, #1
 8015d1a:	d1e5      	bne.n	8015ce8 <_printf_float+0x340>
 8015d1c:	e6a1      	b.n	8015a62 <_printf_float+0xba>
 8015d1e:	4653      	mov	r3, sl
 8015d20:	4642      	mov	r2, r8
 8015d22:	4631      	mov	r1, r6
 8015d24:	4628      	mov	r0, r5
 8015d26:	47b8      	blx	r7
 8015d28:	3001      	adds	r0, #1
 8015d2a:	d1e9      	bne.n	8015d00 <_printf_float+0x358>
 8015d2c:	e699      	b.n	8015a62 <_printf_float+0xba>
 8015d2e:	2301      	movs	r3, #1
 8015d30:	464a      	mov	r2, r9
 8015d32:	4631      	mov	r1, r6
 8015d34:	4628      	mov	r0, r5
 8015d36:	47b8      	blx	r7
 8015d38:	3001      	adds	r0, #1
 8015d3a:	f43f ae92 	beq.w	8015a62 <_printf_float+0xba>
 8015d3e:	f108 0801 	add.w	r8, r8, #1
 8015d42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d46:	1a9b      	subs	r3, r3, r2
 8015d48:	eba3 030a 	sub.w	r3, r3, sl
 8015d4c:	4543      	cmp	r3, r8
 8015d4e:	dcee      	bgt.n	8015d2e <_printf_float+0x386>
 8015d50:	e74a      	b.n	8015be8 <_printf_float+0x240>
 8015d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d54:	2a01      	cmp	r2, #1
 8015d56:	dc01      	bgt.n	8015d5c <_printf_float+0x3b4>
 8015d58:	07db      	lsls	r3, r3, #31
 8015d5a:	d53a      	bpl.n	8015dd2 <_printf_float+0x42a>
 8015d5c:	2301      	movs	r3, #1
 8015d5e:	4642      	mov	r2, r8
 8015d60:	4631      	mov	r1, r6
 8015d62:	4628      	mov	r0, r5
 8015d64:	47b8      	blx	r7
 8015d66:	3001      	adds	r0, #1
 8015d68:	f43f ae7b 	beq.w	8015a62 <_printf_float+0xba>
 8015d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d70:	4631      	mov	r1, r6
 8015d72:	4628      	mov	r0, r5
 8015d74:	47b8      	blx	r7
 8015d76:	3001      	adds	r0, #1
 8015d78:	f108 0801 	add.w	r8, r8, #1
 8015d7c:	f43f ae71 	beq.w	8015a62 <_printf_float+0xba>
 8015d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d82:	2200      	movs	r2, #0
 8015d84:	f103 3aff 	add.w	sl, r3, #4294967295
 8015d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	f7ea feb3 	bl	8000af8 <__aeabi_dcmpeq>
 8015d92:	b9c8      	cbnz	r0, 8015dc8 <_printf_float+0x420>
 8015d94:	4653      	mov	r3, sl
 8015d96:	4642      	mov	r2, r8
 8015d98:	4631      	mov	r1, r6
 8015d9a:	4628      	mov	r0, r5
 8015d9c:	47b8      	blx	r7
 8015d9e:	3001      	adds	r0, #1
 8015da0:	d10e      	bne.n	8015dc0 <_printf_float+0x418>
 8015da2:	e65e      	b.n	8015a62 <_printf_float+0xba>
 8015da4:	2301      	movs	r3, #1
 8015da6:	4652      	mov	r2, sl
 8015da8:	4631      	mov	r1, r6
 8015daa:	4628      	mov	r0, r5
 8015dac:	47b8      	blx	r7
 8015dae:	3001      	adds	r0, #1
 8015db0:	f43f ae57 	beq.w	8015a62 <_printf_float+0xba>
 8015db4:	f108 0801 	add.w	r8, r8, #1
 8015db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dba:	3b01      	subs	r3, #1
 8015dbc:	4543      	cmp	r3, r8
 8015dbe:	dcf1      	bgt.n	8015da4 <_printf_float+0x3fc>
 8015dc0:	464b      	mov	r3, r9
 8015dc2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015dc6:	e6de      	b.n	8015b86 <_printf_float+0x1de>
 8015dc8:	f04f 0800 	mov.w	r8, #0
 8015dcc:	f104 0a1a 	add.w	sl, r4, #26
 8015dd0:	e7f2      	b.n	8015db8 <_printf_float+0x410>
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	e7df      	b.n	8015d96 <_printf_float+0x3ee>
 8015dd6:	2301      	movs	r3, #1
 8015dd8:	464a      	mov	r2, r9
 8015dda:	4631      	mov	r1, r6
 8015ddc:	4628      	mov	r0, r5
 8015dde:	47b8      	blx	r7
 8015de0:	3001      	adds	r0, #1
 8015de2:	f43f ae3e 	beq.w	8015a62 <_printf_float+0xba>
 8015de6:	f108 0801 	add.w	r8, r8, #1
 8015dea:	68e3      	ldr	r3, [r4, #12]
 8015dec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015dee:	1a9b      	subs	r3, r3, r2
 8015df0:	4543      	cmp	r3, r8
 8015df2:	dcf0      	bgt.n	8015dd6 <_printf_float+0x42e>
 8015df4:	e6fc      	b.n	8015bf0 <_printf_float+0x248>
 8015df6:	f04f 0800 	mov.w	r8, #0
 8015dfa:	f104 0919 	add.w	r9, r4, #25
 8015dfe:	e7f4      	b.n	8015dea <_printf_float+0x442>
 8015e00:	2900      	cmp	r1, #0
 8015e02:	f43f ae8b 	beq.w	8015b1c <_printf_float+0x174>
 8015e06:	2300      	movs	r3, #0
 8015e08:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015e0c:	ab09      	add	r3, sp, #36	; 0x24
 8015e0e:	9300      	str	r3, [sp, #0]
 8015e10:	ec49 8b10 	vmov	d0, r8, r9
 8015e14:	6022      	str	r2, [r4, #0]
 8015e16:	f8cd a004 	str.w	sl, [sp, #4]
 8015e1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015e1e:	4628      	mov	r0, r5
 8015e20:	f7ff fd2e 	bl	8015880 <__cvt>
 8015e24:	4680      	mov	r8, r0
 8015e26:	e648      	b.n	8015aba <_printf_float+0x112>

08015e28 <_printf_common>:
 8015e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e2c:	4691      	mov	r9, r2
 8015e2e:	461f      	mov	r7, r3
 8015e30:	688a      	ldr	r2, [r1, #8]
 8015e32:	690b      	ldr	r3, [r1, #16]
 8015e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e38:	4293      	cmp	r3, r2
 8015e3a:	bfb8      	it	lt
 8015e3c:	4613      	movlt	r3, r2
 8015e3e:	f8c9 3000 	str.w	r3, [r9]
 8015e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e46:	4606      	mov	r6, r0
 8015e48:	460c      	mov	r4, r1
 8015e4a:	b112      	cbz	r2, 8015e52 <_printf_common+0x2a>
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	f8c9 3000 	str.w	r3, [r9]
 8015e52:	6823      	ldr	r3, [r4, #0]
 8015e54:	0699      	lsls	r1, r3, #26
 8015e56:	bf42      	ittt	mi
 8015e58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015e5c:	3302      	addmi	r3, #2
 8015e5e:	f8c9 3000 	strmi.w	r3, [r9]
 8015e62:	6825      	ldr	r5, [r4, #0]
 8015e64:	f015 0506 	ands.w	r5, r5, #6
 8015e68:	d107      	bne.n	8015e7a <_printf_common+0x52>
 8015e6a:	f104 0a19 	add.w	sl, r4, #25
 8015e6e:	68e3      	ldr	r3, [r4, #12]
 8015e70:	f8d9 2000 	ldr.w	r2, [r9]
 8015e74:	1a9b      	subs	r3, r3, r2
 8015e76:	42ab      	cmp	r3, r5
 8015e78:	dc28      	bgt.n	8015ecc <_printf_common+0xa4>
 8015e7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015e7e:	6822      	ldr	r2, [r4, #0]
 8015e80:	3300      	adds	r3, #0
 8015e82:	bf18      	it	ne
 8015e84:	2301      	movne	r3, #1
 8015e86:	0692      	lsls	r2, r2, #26
 8015e88:	d42d      	bmi.n	8015ee6 <_printf_common+0xbe>
 8015e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e8e:	4639      	mov	r1, r7
 8015e90:	4630      	mov	r0, r6
 8015e92:	47c0      	blx	r8
 8015e94:	3001      	adds	r0, #1
 8015e96:	d020      	beq.n	8015eda <_printf_common+0xb2>
 8015e98:	6823      	ldr	r3, [r4, #0]
 8015e9a:	68e5      	ldr	r5, [r4, #12]
 8015e9c:	f8d9 2000 	ldr.w	r2, [r9]
 8015ea0:	f003 0306 	and.w	r3, r3, #6
 8015ea4:	2b04      	cmp	r3, #4
 8015ea6:	bf08      	it	eq
 8015ea8:	1aad      	subeq	r5, r5, r2
 8015eaa:	68a3      	ldr	r3, [r4, #8]
 8015eac:	6922      	ldr	r2, [r4, #16]
 8015eae:	bf0c      	ite	eq
 8015eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015eb4:	2500      	movne	r5, #0
 8015eb6:	4293      	cmp	r3, r2
 8015eb8:	bfc4      	itt	gt
 8015eba:	1a9b      	subgt	r3, r3, r2
 8015ebc:	18ed      	addgt	r5, r5, r3
 8015ebe:	f04f 0900 	mov.w	r9, #0
 8015ec2:	341a      	adds	r4, #26
 8015ec4:	454d      	cmp	r5, r9
 8015ec6:	d11a      	bne.n	8015efe <_printf_common+0xd6>
 8015ec8:	2000      	movs	r0, #0
 8015eca:	e008      	b.n	8015ede <_printf_common+0xb6>
 8015ecc:	2301      	movs	r3, #1
 8015ece:	4652      	mov	r2, sl
 8015ed0:	4639      	mov	r1, r7
 8015ed2:	4630      	mov	r0, r6
 8015ed4:	47c0      	blx	r8
 8015ed6:	3001      	adds	r0, #1
 8015ed8:	d103      	bne.n	8015ee2 <_printf_common+0xba>
 8015eda:	f04f 30ff 	mov.w	r0, #4294967295
 8015ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ee2:	3501      	adds	r5, #1
 8015ee4:	e7c3      	b.n	8015e6e <_printf_common+0x46>
 8015ee6:	18e1      	adds	r1, r4, r3
 8015ee8:	1c5a      	adds	r2, r3, #1
 8015eea:	2030      	movs	r0, #48	; 0x30
 8015eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015ef0:	4422      	add	r2, r4
 8015ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ef6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015efa:	3302      	adds	r3, #2
 8015efc:	e7c5      	b.n	8015e8a <_printf_common+0x62>
 8015efe:	2301      	movs	r3, #1
 8015f00:	4622      	mov	r2, r4
 8015f02:	4639      	mov	r1, r7
 8015f04:	4630      	mov	r0, r6
 8015f06:	47c0      	blx	r8
 8015f08:	3001      	adds	r0, #1
 8015f0a:	d0e6      	beq.n	8015eda <_printf_common+0xb2>
 8015f0c:	f109 0901 	add.w	r9, r9, #1
 8015f10:	e7d8      	b.n	8015ec4 <_printf_common+0x9c>
	...

08015f14 <_printf_i>:
 8015f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015f1c:	460c      	mov	r4, r1
 8015f1e:	7e09      	ldrb	r1, [r1, #24]
 8015f20:	b085      	sub	sp, #20
 8015f22:	296e      	cmp	r1, #110	; 0x6e
 8015f24:	4617      	mov	r7, r2
 8015f26:	4606      	mov	r6, r0
 8015f28:	4698      	mov	r8, r3
 8015f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f2c:	f000 80b3 	beq.w	8016096 <_printf_i+0x182>
 8015f30:	d822      	bhi.n	8015f78 <_printf_i+0x64>
 8015f32:	2963      	cmp	r1, #99	; 0x63
 8015f34:	d036      	beq.n	8015fa4 <_printf_i+0x90>
 8015f36:	d80a      	bhi.n	8015f4e <_printf_i+0x3a>
 8015f38:	2900      	cmp	r1, #0
 8015f3a:	f000 80b9 	beq.w	80160b0 <_printf_i+0x19c>
 8015f3e:	2958      	cmp	r1, #88	; 0x58
 8015f40:	f000 8083 	beq.w	801604a <_printf_i+0x136>
 8015f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015f4c:	e032      	b.n	8015fb4 <_printf_i+0xa0>
 8015f4e:	2964      	cmp	r1, #100	; 0x64
 8015f50:	d001      	beq.n	8015f56 <_printf_i+0x42>
 8015f52:	2969      	cmp	r1, #105	; 0x69
 8015f54:	d1f6      	bne.n	8015f44 <_printf_i+0x30>
 8015f56:	6820      	ldr	r0, [r4, #0]
 8015f58:	6813      	ldr	r3, [r2, #0]
 8015f5a:	0605      	lsls	r5, r0, #24
 8015f5c:	f103 0104 	add.w	r1, r3, #4
 8015f60:	d52a      	bpl.n	8015fb8 <_printf_i+0xa4>
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	6011      	str	r1, [r2, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	da03      	bge.n	8015f72 <_printf_i+0x5e>
 8015f6a:	222d      	movs	r2, #45	; 0x2d
 8015f6c:	425b      	negs	r3, r3
 8015f6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015f72:	486f      	ldr	r0, [pc, #444]	; (8016130 <_printf_i+0x21c>)
 8015f74:	220a      	movs	r2, #10
 8015f76:	e039      	b.n	8015fec <_printf_i+0xd8>
 8015f78:	2973      	cmp	r1, #115	; 0x73
 8015f7a:	f000 809d 	beq.w	80160b8 <_printf_i+0x1a4>
 8015f7e:	d808      	bhi.n	8015f92 <_printf_i+0x7e>
 8015f80:	296f      	cmp	r1, #111	; 0x6f
 8015f82:	d020      	beq.n	8015fc6 <_printf_i+0xb2>
 8015f84:	2970      	cmp	r1, #112	; 0x70
 8015f86:	d1dd      	bne.n	8015f44 <_printf_i+0x30>
 8015f88:	6823      	ldr	r3, [r4, #0]
 8015f8a:	f043 0320 	orr.w	r3, r3, #32
 8015f8e:	6023      	str	r3, [r4, #0]
 8015f90:	e003      	b.n	8015f9a <_printf_i+0x86>
 8015f92:	2975      	cmp	r1, #117	; 0x75
 8015f94:	d017      	beq.n	8015fc6 <_printf_i+0xb2>
 8015f96:	2978      	cmp	r1, #120	; 0x78
 8015f98:	d1d4      	bne.n	8015f44 <_printf_i+0x30>
 8015f9a:	2378      	movs	r3, #120	; 0x78
 8015f9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015fa0:	4864      	ldr	r0, [pc, #400]	; (8016134 <_printf_i+0x220>)
 8015fa2:	e055      	b.n	8016050 <_printf_i+0x13c>
 8015fa4:	6813      	ldr	r3, [r2, #0]
 8015fa6:	1d19      	adds	r1, r3, #4
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	6011      	str	r1, [r2, #0]
 8015fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	e08c      	b.n	80160d2 <_printf_i+0x1be>
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	6011      	str	r1, [r2, #0]
 8015fbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015fc0:	bf18      	it	ne
 8015fc2:	b21b      	sxthne	r3, r3
 8015fc4:	e7cf      	b.n	8015f66 <_printf_i+0x52>
 8015fc6:	6813      	ldr	r3, [r2, #0]
 8015fc8:	6825      	ldr	r5, [r4, #0]
 8015fca:	1d18      	adds	r0, r3, #4
 8015fcc:	6010      	str	r0, [r2, #0]
 8015fce:	0628      	lsls	r0, r5, #24
 8015fd0:	d501      	bpl.n	8015fd6 <_printf_i+0xc2>
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	e002      	b.n	8015fdc <_printf_i+0xc8>
 8015fd6:	0668      	lsls	r0, r5, #25
 8015fd8:	d5fb      	bpl.n	8015fd2 <_printf_i+0xbe>
 8015fda:	881b      	ldrh	r3, [r3, #0]
 8015fdc:	4854      	ldr	r0, [pc, #336]	; (8016130 <_printf_i+0x21c>)
 8015fde:	296f      	cmp	r1, #111	; 0x6f
 8015fe0:	bf14      	ite	ne
 8015fe2:	220a      	movne	r2, #10
 8015fe4:	2208      	moveq	r2, #8
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015fec:	6865      	ldr	r5, [r4, #4]
 8015fee:	60a5      	str	r5, [r4, #8]
 8015ff0:	2d00      	cmp	r5, #0
 8015ff2:	f2c0 8095 	blt.w	8016120 <_printf_i+0x20c>
 8015ff6:	6821      	ldr	r1, [r4, #0]
 8015ff8:	f021 0104 	bic.w	r1, r1, #4
 8015ffc:	6021      	str	r1, [r4, #0]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d13d      	bne.n	801607e <_printf_i+0x16a>
 8016002:	2d00      	cmp	r5, #0
 8016004:	f040 808e 	bne.w	8016124 <_printf_i+0x210>
 8016008:	4665      	mov	r5, ip
 801600a:	2a08      	cmp	r2, #8
 801600c:	d10b      	bne.n	8016026 <_printf_i+0x112>
 801600e:	6823      	ldr	r3, [r4, #0]
 8016010:	07db      	lsls	r3, r3, #31
 8016012:	d508      	bpl.n	8016026 <_printf_i+0x112>
 8016014:	6923      	ldr	r3, [r4, #16]
 8016016:	6862      	ldr	r2, [r4, #4]
 8016018:	429a      	cmp	r2, r3
 801601a:	bfde      	ittt	le
 801601c:	2330      	movle	r3, #48	; 0x30
 801601e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016022:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016026:	ebac 0305 	sub.w	r3, ip, r5
 801602a:	6123      	str	r3, [r4, #16]
 801602c:	f8cd 8000 	str.w	r8, [sp]
 8016030:	463b      	mov	r3, r7
 8016032:	aa03      	add	r2, sp, #12
 8016034:	4621      	mov	r1, r4
 8016036:	4630      	mov	r0, r6
 8016038:	f7ff fef6 	bl	8015e28 <_printf_common>
 801603c:	3001      	adds	r0, #1
 801603e:	d14d      	bne.n	80160dc <_printf_i+0x1c8>
 8016040:	f04f 30ff 	mov.w	r0, #4294967295
 8016044:	b005      	add	sp, #20
 8016046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801604a:	4839      	ldr	r0, [pc, #228]	; (8016130 <_printf_i+0x21c>)
 801604c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016050:	6813      	ldr	r3, [r2, #0]
 8016052:	6821      	ldr	r1, [r4, #0]
 8016054:	1d1d      	adds	r5, r3, #4
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	6015      	str	r5, [r2, #0]
 801605a:	060a      	lsls	r2, r1, #24
 801605c:	d50b      	bpl.n	8016076 <_printf_i+0x162>
 801605e:	07ca      	lsls	r2, r1, #31
 8016060:	bf44      	itt	mi
 8016062:	f041 0120 	orrmi.w	r1, r1, #32
 8016066:	6021      	strmi	r1, [r4, #0]
 8016068:	b91b      	cbnz	r3, 8016072 <_printf_i+0x15e>
 801606a:	6822      	ldr	r2, [r4, #0]
 801606c:	f022 0220 	bic.w	r2, r2, #32
 8016070:	6022      	str	r2, [r4, #0]
 8016072:	2210      	movs	r2, #16
 8016074:	e7b7      	b.n	8015fe6 <_printf_i+0xd2>
 8016076:	064d      	lsls	r5, r1, #25
 8016078:	bf48      	it	mi
 801607a:	b29b      	uxthmi	r3, r3
 801607c:	e7ef      	b.n	801605e <_printf_i+0x14a>
 801607e:	4665      	mov	r5, ip
 8016080:	fbb3 f1f2 	udiv	r1, r3, r2
 8016084:	fb02 3311 	mls	r3, r2, r1, r3
 8016088:	5cc3      	ldrb	r3, [r0, r3]
 801608a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801608e:	460b      	mov	r3, r1
 8016090:	2900      	cmp	r1, #0
 8016092:	d1f5      	bne.n	8016080 <_printf_i+0x16c>
 8016094:	e7b9      	b.n	801600a <_printf_i+0xf6>
 8016096:	6813      	ldr	r3, [r2, #0]
 8016098:	6825      	ldr	r5, [r4, #0]
 801609a:	6961      	ldr	r1, [r4, #20]
 801609c:	1d18      	adds	r0, r3, #4
 801609e:	6010      	str	r0, [r2, #0]
 80160a0:	0628      	lsls	r0, r5, #24
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	d501      	bpl.n	80160aa <_printf_i+0x196>
 80160a6:	6019      	str	r1, [r3, #0]
 80160a8:	e002      	b.n	80160b0 <_printf_i+0x19c>
 80160aa:	066a      	lsls	r2, r5, #25
 80160ac:	d5fb      	bpl.n	80160a6 <_printf_i+0x192>
 80160ae:	8019      	strh	r1, [r3, #0]
 80160b0:	2300      	movs	r3, #0
 80160b2:	6123      	str	r3, [r4, #16]
 80160b4:	4665      	mov	r5, ip
 80160b6:	e7b9      	b.n	801602c <_printf_i+0x118>
 80160b8:	6813      	ldr	r3, [r2, #0]
 80160ba:	1d19      	adds	r1, r3, #4
 80160bc:	6011      	str	r1, [r2, #0]
 80160be:	681d      	ldr	r5, [r3, #0]
 80160c0:	6862      	ldr	r2, [r4, #4]
 80160c2:	2100      	movs	r1, #0
 80160c4:	4628      	mov	r0, r5
 80160c6:	f7ea f8a3 	bl	8000210 <memchr>
 80160ca:	b108      	cbz	r0, 80160d0 <_printf_i+0x1bc>
 80160cc:	1b40      	subs	r0, r0, r5
 80160ce:	6060      	str	r0, [r4, #4]
 80160d0:	6863      	ldr	r3, [r4, #4]
 80160d2:	6123      	str	r3, [r4, #16]
 80160d4:	2300      	movs	r3, #0
 80160d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160da:	e7a7      	b.n	801602c <_printf_i+0x118>
 80160dc:	6923      	ldr	r3, [r4, #16]
 80160de:	462a      	mov	r2, r5
 80160e0:	4639      	mov	r1, r7
 80160e2:	4630      	mov	r0, r6
 80160e4:	47c0      	blx	r8
 80160e6:	3001      	adds	r0, #1
 80160e8:	d0aa      	beq.n	8016040 <_printf_i+0x12c>
 80160ea:	6823      	ldr	r3, [r4, #0]
 80160ec:	079b      	lsls	r3, r3, #30
 80160ee:	d413      	bmi.n	8016118 <_printf_i+0x204>
 80160f0:	68e0      	ldr	r0, [r4, #12]
 80160f2:	9b03      	ldr	r3, [sp, #12]
 80160f4:	4298      	cmp	r0, r3
 80160f6:	bfb8      	it	lt
 80160f8:	4618      	movlt	r0, r3
 80160fa:	e7a3      	b.n	8016044 <_printf_i+0x130>
 80160fc:	2301      	movs	r3, #1
 80160fe:	464a      	mov	r2, r9
 8016100:	4639      	mov	r1, r7
 8016102:	4630      	mov	r0, r6
 8016104:	47c0      	blx	r8
 8016106:	3001      	adds	r0, #1
 8016108:	d09a      	beq.n	8016040 <_printf_i+0x12c>
 801610a:	3501      	adds	r5, #1
 801610c:	68e3      	ldr	r3, [r4, #12]
 801610e:	9a03      	ldr	r2, [sp, #12]
 8016110:	1a9b      	subs	r3, r3, r2
 8016112:	42ab      	cmp	r3, r5
 8016114:	dcf2      	bgt.n	80160fc <_printf_i+0x1e8>
 8016116:	e7eb      	b.n	80160f0 <_printf_i+0x1dc>
 8016118:	2500      	movs	r5, #0
 801611a:	f104 0919 	add.w	r9, r4, #25
 801611e:	e7f5      	b.n	801610c <_printf_i+0x1f8>
 8016120:	2b00      	cmp	r3, #0
 8016122:	d1ac      	bne.n	801607e <_printf_i+0x16a>
 8016124:	7803      	ldrb	r3, [r0, #0]
 8016126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801612a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801612e:	e76c      	b.n	801600a <_printf_i+0xf6>
 8016130:	0801a318 	.word	0x0801a318
 8016134:	0801a329 	.word	0x0801a329

08016138 <_scanf_float>:
 8016138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613c:	469a      	mov	sl, r3
 801613e:	688b      	ldr	r3, [r1, #8]
 8016140:	4616      	mov	r6, r2
 8016142:	1e5a      	subs	r2, r3, #1
 8016144:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016148:	b087      	sub	sp, #28
 801614a:	bf83      	ittte	hi
 801614c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016150:	189b      	addhi	r3, r3, r2
 8016152:	9301      	strhi	r3, [sp, #4]
 8016154:	2300      	movls	r3, #0
 8016156:	bf86      	itte	hi
 8016158:	f240 135d 	movwhi	r3, #349	; 0x15d
 801615c:	608b      	strhi	r3, [r1, #8]
 801615e:	9301      	strls	r3, [sp, #4]
 8016160:	680b      	ldr	r3, [r1, #0]
 8016162:	4688      	mov	r8, r1
 8016164:	f04f 0b00 	mov.w	fp, #0
 8016168:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801616c:	f848 3b1c 	str.w	r3, [r8], #28
 8016170:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016174:	4607      	mov	r7, r0
 8016176:	460c      	mov	r4, r1
 8016178:	4645      	mov	r5, r8
 801617a:	465a      	mov	r2, fp
 801617c:	46d9      	mov	r9, fp
 801617e:	f8cd b008 	str.w	fp, [sp, #8]
 8016182:	68a1      	ldr	r1, [r4, #8]
 8016184:	b181      	cbz	r1, 80161a8 <_scanf_float+0x70>
 8016186:	6833      	ldr	r3, [r6, #0]
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	2b49      	cmp	r3, #73	; 0x49
 801618c:	d071      	beq.n	8016272 <_scanf_float+0x13a>
 801618e:	d84d      	bhi.n	801622c <_scanf_float+0xf4>
 8016190:	2b39      	cmp	r3, #57	; 0x39
 8016192:	d840      	bhi.n	8016216 <_scanf_float+0xde>
 8016194:	2b31      	cmp	r3, #49	; 0x31
 8016196:	f080 8088 	bcs.w	80162aa <_scanf_float+0x172>
 801619a:	2b2d      	cmp	r3, #45	; 0x2d
 801619c:	f000 8090 	beq.w	80162c0 <_scanf_float+0x188>
 80161a0:	d815      	bhi.n	80161ce <_scanf_float+0x96>
 80161a2:	2b2b      	cmp	r3, #43	; 0x2b
 80161a4:	f000 808c 	beq.w	80162c0 <_scanf_float+0x188>
 80161a8:	f1b9 0f00 	cmp.w	r9, #0
 80161ac:	d003      	beq.n	80161b6 <_scanf_float+0x7e>
 80161ae:	6823      	ldr	r3, [r4, #0]
 80161b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80161b4:	6023      	str	r3, [r4, #0]
 80161b6:	3a01      	subs	r2, #1
 80161b8:	2a01      	cmp	r2, #1
 80161ba:	f200 80ea 	bhi.w	8016392 <_scanf_float+0x25a>
 80161be:	4545      	cmp	r5, r8
 80161c0:	f200 80dc 	bhi.w	801637c <_scanf_float+0x244>
 80161c4:	2601      	movs	r6, #1
 80161c6:	4630      	mov	r0, r6
 80161c8:	b007      	add	sp, #28
 80161ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ce:	2b2e      	cmp	r3, #46	; 0x2e
 80161d0:	f000 809f 	beq.w	8016312 <_scanf_float+0x1da>
 80161d4:	2b30      	cmp	r3, #48	; 0x30
 80161d6:	d1e7      	bne.n	80161a8 <_scanf_float+0x70>
 80161d8:	6820      	ldr	r0, [r4, #0]
 80161da:	f410 7f80 	tst.w	r0, #256	; 0x100
 80161de:	d064      	beq.n	80162aa <_scanf_float+0x172>
 80161e0:	9b01      	ldr	r3, [sp, #4]
 80161e2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80161e6:	6020      	str	r0, [r4, #0]
 80161e8:	f109 0901 	add.w	r9, r9, #1
 80161ec:	b11b      	cbz	r3, 80161f6 <_scanf_float+0xbe>
 80161ee:	3b01      	subs	r3, #1
 80161f0:	3101      	adds	r1, #1
 80161f2:	9301      	str	r3, [sp, #4]
 80161f4:	60a1      	str	r1, [r4, #8]
 80161f6:	68a3      	ldr	r3, [r4, #8]
 80161f8:	3b01      	subs	r3, #1
 80161fa:	60a3      	str	r3, [r4, #8]
 80161fc:	6923      	ldr	r3, [r4, #16]
 80161fe:	3301      	adds	r3, #1
 8016200:	6123      	str	r3, [r4, #16]
 8016202:	6873      	ldr	r3, [r6, #4]
 8016204:	3b01      	subs	r3, #1
 8016206:	2b00      	cmp	r3, #0
 8016208:	6073      	str	r3, [r6, #4]
 801620a:	f340 80ac 	ble.w	8016366 <_scanf_float+0x22e>
 801620e:	6833      	ldr	r3, [r6, #0]
 8016210:	3301      	adds	r3, #1
 8016212:	6033      	str	r3, [r6, #0]
 8016214:	e7b5      	b.n	8016182 <_scanf_float+0x4a>
 8016216:	2b45      	cmp	r3, #69	; 0x45
 8016218:	f000 8085 	beq.w	8016326 <_scanf_float+0x1ee>
 801621c:	2b46      	cmp	r3, #70	; 0x46
 801621e:	d06a      	beq.n	80162f6 <_scanf_float+0x1be>
 8016220:	2b41      	cmp	r3, #65	; 0x41
 8016222:	d1c1      	bne.n	80161a8 <_scanf_float+0x70>
 8016224:	2a01      	cmp	r2, #1
 8016226:	d1bf      	bne.n	80161a8 <_scanf_float+0x70>
 8016228:	2202      	movs	r2, #2
 801622a:	e046      	b.n	80162ba <_scanf_float+0x182>
 801622c:	2b65      	cmp	r3, #101	; 0x65
 801622e:	d07a      	beq.n	8016326 <_scanf_float+0x1ee>
 8016230:	d818      	bhi.n	8016264 <_scanf_float+0x12c>
 8016232:	2b54      	cmp	r3, #84	; 0x54
 8016234:	d066      	beq.n	8016304 <_scanf_float+0x1cc>
 8016236:	d811      	bhi.n	801625c <_scanf_float+0x124>
 8016238:	2b4e      	cmp	r3, #78	; 0x4e
 801623a:	d1b5      	bne.n	80161a8 <_scanf_float+0x70>
 801623c:	2a00      	cmp	r2, #0
 801623e:	d146      	bne.n	80162ce <_scanf_float+0x196>
 8016240:	f1b9 0f00 	cmp.w	r9, #0
 8016244:	d145      	bne.n	80162d2 <_scanf_float+0x19a>
 8016246:	6821      	ldr	r1, [r4, #0]
 8016248:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801624c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016250:	d13f      	bne.n	80162d2 <_scanf_float+0x19a>
 8016252:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016256:	6021      	str	r1, [r4, #0]
 8016258:	2201      	movs	r2, #1
 801625a:	e02e      	b.n	80162ba <_scanf_float+0x182>
 801625c:	2b59      	cmp	r3, #89	; 0x59
 801625e:	d01e      	beq.n	801629e <_scanf_float+0x166>
 8016260:	2b61      	cmp	r3, #97	; 0x61
 8016262:	e7de      	b.n	8016222 <_scanf_float+0xea>
 8016264:	2b6e      	cmp	r3, #110	; 0x6e
 8016266:	d0e9      	beq.n	801623c <_scanf_float+0x104>
 8016268:	d815      	bhi.n	8016296 <_scanf_float+0x15e>
 801626a:	2b66      	cmp	r3, #102	; 0x66
 801626c:	d043      	beq.n	80162f6 <_scanf_float+0x1be>
 801626e:	2b69      	cmp	r3, #105	; 0x69
 8016270:	d19a      	bne.n	80161a8 <_scanf_float+0x70>
 8016272:	f1bb 0f00 	cmp.w	fp, #0
 8016276:	d138      	bne.n	80162ea <_scanf_float+0x1b2>
 8016278:	f1b9 0f00 	cmp.w	r9, #0
 801627c:	d197      	bne.n	80161ae <_scanf_float+0x76>
 801627e:	6821      	ldr	r1, [r4, #0]
 8016280:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016284:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016288:	d195      	bne.n	80161b6 <_scanf_float+0x7e>
 801628a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801628e:	6021      	str	r1, [r4, #0]
 8016290:	f04f 0b01 	mov.w	fp, #1
 8016294:	e011      	b.n	80162ba <_scanf_float+0x182>
 8016296:	2b74      	cmp	r3, #116	; 0x74
 8016298:	d034      	beq.n	8016304 <_scanf_float+0x1cc>
 801629a:	2b79      	cmp	r3, #121	; 0x79
 801629c:	d184      	bne.n	80161a8 <_scanf_float+0x70>
 801629e:	f1bb 0f07 	cmp.w	fp, #7
 80162a2:	d181      	bne.n	80161a8 <_scanf_float+0x70>
 80162a4:	f04f 0b08 	mov.w	fp, #8
 80162a8:	e007      	b.n	80162ba <_scanf_float+0x182>
 80162aa:	eb12 0f0b 	cmn.w	r2, fp
 80162ae:	f47f af7b 	bne.w	80161a8 <_scanf_float+0x70>
 80162b2:	6821      	ldr	r1, [r4, #0]
 80162b4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80162b8:	6021      	str	r1, [r4, #0]
 80162ba:	702b      	strb	r3, [r5, #0]
 80162bc:	3501      	adds	r5, #1
 80162be:	e79a      	b.n	80161f6 <_scanf_float+0xbe>
 80162c0:	6821      	ldr	r1, [r4, #0]
 80162c2:	0608      	lsls	r0, r1, #24
 80162c4:	f57f af70 	bpl.w	80161a8 <_scanf_float+0x70>
 80162c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80162cc:	e7f4      	b.n	80162b8 <_scanf_float+0x180>
 80162ce:	2a02      	cmp	r2, #2
 80162d0:	d047      	beq.n	8016362 <_scanf_float+0x22a>
 80162d2:	f1bb 0f01 	cmp.w	fp, #1
 80162d6:	d003      	beq.n	80162e0 <_scanf_float+0x1a8>
 80162d8:	f1bb 0f04 	cmp.w	fp, #4
 80162dc:	f47f af64 	bne.w	80161a8 <_scanf_float+0x70>
 80162e0:	f10b 0b01 	add.w	fp, fp, #1
 80162e4:	fa5f fb8b 	uxtb.w	fp, fp
 80162e8:	e7e7      	b.n	80162ba <_scanf_float+0x182>
 80162ea:	f1bb 0f03 	cmp.w	fp, #3
 80162ee:	d0f7      	beq.n	80162e0 <_scanf_float+0x1a8>
 80162f0:	f1bb 0f05 	cmp.w	fp, #5
 80162f4:	e7f2      	b.n	80162dc <_scanf_float+0x1a4>
 80162f6:	f1bb 0f02 	cmp.w	fp, #2
 80162fa:	f47f af55 	bne.w	80161a8 <_scanf_float+0x70>
 80162fe:	f04f 0b03 	mov.w	fp, #3
 8016302:	e7da      	b.n	80162ba <_scanf_float+0x182>
 8016304:	f1bb 0f06 	cmp.w	fp, #6
 8016308:	f47f af4e 	bne.w	80161a8 <_scanf_float+0x70>
 801630c:	f04f 0b07 	mov.w	fp, #7
 8016310:	e7d3      	b.n	80162ba <_scanf_float+0x182>
 8016312:	6821      	ldr	r1, [r4, #0]
 8016314:	0588      	lsls	r0, r1, #22
 8016316:	f57f af47 	bpl.w	80161a8 <_scanf_float+0x70>
 801631a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801631e:	6021      	str	r1, [r4, #0]
 8016320:	f8cd 9008 	str.w	r9, [sp, #8]
 8016324:	e7c9      	b.n	80162ba <_scanf_float+0x182>
 8016326:	6821      	ldr	r1, [r4, #0]
 8016328:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801632c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016330:	d006      	beq.n	8016340 <_scanf_float+0x208>
 8016332:	0548      	lsls	r0, r1, #21
 8016334:	f57f af38 	bpl.w	80161a8 <_scanf_float+0x70>
 8016338:	f1b9 0f00 	cmp.w	r9, #0
 801633c:	f43f af3b 	beq.w	80161b6 <_scanf_float+0x7e>
 8016340:	0588      	lsls	r0, r1, #22
 8016342:	bf58      	it	pl
 8016344:	9802      	ldrpl	r0, [sp, #8]
 8016346:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801634a:	bf58      	it	pl
 801634c:	eba9 0000 	subpl.w	r0, r9, r0
 8016350:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016354:	bf58      	it	pl
 8016356:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801635a:	6021      	str	r1, [r4, #0]
 801635c:	f04f 0900 	mov.w	r9, #0
 8016360:	e7ab      	b.n	80162ba <_scanf_float+0x182>
 8016362:	2203      	movs	r2, #3
 8016364:	e7a9      	b.n	80162ba <_scanf_float+0x182>
 8016366:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801636a:	9205      	str	r2, [sp, #20]
 801636c:	4631      	mov	r1, r6
 801636e:	4638      	mov	r0, r7
 8016370:	4798      	blx	r3
 8016372:	9a05      	ldr	r2, [sp, #20]
 8016374:	2800      	cmp	r0, #0
 8016376:	f43f af04 	beq.w	8016182 <_scanf_float+0x4a>
 801637a:	e715      	b.n	80161a8 <_scanf_float+0x70>
 801637c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016380:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016384:	4632      	mov	r2, r6
 8016386:	4638      	mov	r0, r7
 8016388:	4798      	blx	r3
 801638a:	6923      	ldr	r3, [r4, #16]
 801638c:	3b01      	subs	r3, #1
 801638e:	6123      	str	r3, [r4, #16]
 8016390:	e715      	b.n	80161be <_scanf_float+0x86>
 8016392:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016396:	2b06      	cmp	r3, #6
 8016398:	d80a      	bhi.n	80163b0 <_scanf_float+0x278>
 801639a:	f1bb 0f02 	cmp.w	fp, #2
 801639e:	d968      	bls.n	8016472 <_scanf_float+0x33a>
 80163a0:	f1ab 0b03 	sub.w	fp, fp, #3
 80163a4:	fa5f fb8b 	uxtb.w	fp, fp
 80163a8:	eba5 0b0b 	sub.w	fp, r5, fp
 80163ac:	455d      	cmp	r5, fp
 80163ae:	d14b      	bne.n	8016448 <_scanf_float+0x310>
 80163b0:	6823      	ldr	r3, [r4, #0]
 80163b2:	05da      	lsls	r2, r3, #23
 80163b4:	d51f      	bpl.n	80163f6 <_scanf_float+0x2be>
 80163b6:	055b      	lsls	r3, r3, #21
 80163b8:	d468      	bmi.n	801648c <_scanf_float+0x354>
 80163ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80163be:	6923      	ldr	r3, [r4, #16]
 80163c0:	2965      	cmp	r1, #101	; 0x65
 80163c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80163c6:	f105 3bff 	add.w	fp, r5, #4294967295
 80163ca:	6123      	str	r3, [r4, #16]
 80163cc:	d00d      	beq.n	80163ea <_scanf_float+0x2b2>
 80163ce:	2945      	cmp	r1, #69	; 0x45
 80163d0:	d00b      	beq.n	80163ea <_scanf_float+0x2b2>
 80163d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163d6:	4632      	mov	r2, r6
 80163d8:	4638      	mov	r0, r7
 80163da:	4798      	blx	r3
 80163dc:	6923      	ldr	r3, [r4, #16]
 80163de:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80163e2:	3b01      	subs	r3, #1
 80163e4:	f1a5 0b02 	sub.w	fp, r5, #2
 80163e8:	6123      	str	r3, [r4, #16]
 80163ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163ee:	4632      	mov	r2, r6
 80163f0:	4638      	mov	r0, r7
 80163f2:	4798      	blx	r3
 80163f4:	465d      	mov	r5, fp
 80163f6:	6826      	ldr	r6, [r4, #0]
 80163f8:	f016 0610 	ands.w	r6, r6, #16
 80163fc:	d17a      	bne.n	80164f4 <_scanf_float+0x3bc>
 80163fe:	702e      	strb	r6, [r5, #0]
 8016400:	6823      	ldr	r3, [r4, #0]
 8016402:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801640a:	d142      	bne.n	8016492 <_scanf_float+0x35a>
 801640c:	9b02      	ldr	r3, [sp, #8]
 801640e:	eba9 0303 	sub.w	r3, r9, r3
 8016412:	425a      	negs	r2, r3
 8016414:	2b00      	cmp	r3, #0
 8016416:	d149      	bne.n	80164ac <_scanf_float+0x374>
 8016418:	2200      	movs	r2, #0
 801641a:	4641      	mov	r1, r8
 801641c:	4638      	mov	r0, r7
 801641e:	f000 ff0b 	bl	8017238 <_strtod_r>
 8016422:	6825      	ldr	r5, [r4, #0]
 8016424:	f8da 3000 	ldr.w	r3, [sl]
 8016428:	f015 0f02 	tst.w	r5, #2
 801642c:	f103 0204 	add.w	r2, r3, #4
 8016430:	ec59 8b10 	vmov	r8, r9, d0
 8016434:	f8ca 2000 	str.w	r2, [sl]
 8016438:	d043      	beq.n	80164c2 <_scanf_float+0x38a>
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	e9c3 8900 	strd	r8, r9, [r3]
 8016440:	68e3      	ldr	r3, [r4, #12]
 8016442:	3301      	adds	r3, #1
 8016444:	60e3      	str	r3, [r4, #12]
 8016446:	e6be      	b.n	80161c6 <_scanf_float+0x8e>
 8016448:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801644c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016450:	4632      	mov	r2, r6
 8016452:	4638      	mov	r0, r7
 8016454:	4798      	blx	r3
 8016456:	6923      	ldr	r3, [r4, #16]
 8016458:	3b01      	subs	r3, #1
 801645a:	6123      	str	r3, [r4, #16]
 801645c:	e7a6      	b.n	80163ac <_scanf_float+0x274>
 801645e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016462:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016466:	4632      	mov	r2, r6
 8016468:	4638      	mov	r0, r7
 801646a:	4798      	blx	r3
 801646c:	6923      	ldr	r3, [r4, #16]
 801646e:	3b01      	subs	r3, #1
 8016470:	6123      	str	r3, [r4, #16]
 8016472:	4545      	cmp	r5, r8
 8016474:	d8f3      	bhi.n	801645e <_scanf_float+0x326>
 8016476:	e6a5      	b.n	80161c4 <_scanf_float+0x8c>
 8016478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801647c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016480:	4632      	mov	r2, r6
 8016482:	4638      	mov	r0, r7
 8016484:	4798      	blx	r3
 8016486:	6923      	ldr	r3, [r4, #16]
 8016488:	3b01      	subs	r3, #1
 801648a:	6123      	str	r3, [r4, #16]
 801648c:	4545      	cmp	r5, r8
 801648e:	d8f3      	bhi.n	8016478 <_scanf_float+0x340>
 8016490:	e698      	b.n	80161c4 <_scanf_float+0x8c>
 8016492:	9b03      	ldr	r3, [sp, #12]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d0bf      	beq.n	8016418 <_scanf_float+0x2e0>
 8016498:	9904      	ldr	r1, [sp, #16]
 801649a:	230a      	movs	r3, #10
 801649c:	4632      	mov	r2, r6
 801649e:	3101      	adds	r1, #1
 80164a0:	4638      	mov	r0, r7
 80164a2:	f000 ff55 	bl	8017350 <_strtol_r>
 80164a6:	9b03      	ldr	r3, [sp, #12]
 80164a8:	9d04      	ldr	r5, [sp, #16]
 80164aa:	1ac2      	subs	r2, r0, r3
 80164ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80164b0:	429d      	cmp	r5, r3
 80164b2:	bf28      	it	cs
 80164b4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80164b8:	490f      	ldr	r1, [pc, #60]	; (80164f8 <_scanf_float+0x3c0>)
 80164ba:	4628      	mov	r0, r5
 80164bc:	f000 f858 	bl	8016570 <siprintf>
 80164c0:	e7aa      	b.n	8016418 <_scanf_float+0x2e0>
 80164c2:	f015 0504 	ands.w	r5, r5, #4
 80164c6:	d1b8      	bne.n	801643a <_scanf_float+0x302>
 80164c8:	681f      	ldr	r7, [r3, #0]
 80164ca:	ee10 2a10 	vmov	r2, s0
 80164ce:	464b      	mov	r3, r9
 80164d0:	ee10 0a10 	vmov	r0, s0
 80164d4:	4649      	mov	r1, r9
 80164d6:	f7ea fb41 	bl	8000b5c <__aeabi_dcmpun>
 80164da:	b128      	cbz	r0, 80164e8 <_scanf_float+0x3b0>
 80164dc:	4628      	mov	r0, r5
 80164de:	f000 f80d 	bl	80164fc <nanf>
 80164e2:	ed87 0a00 	vstr	s0, [r7]
 80164e6:	e7ab      	b.n	8016440 <_scanf_float+0x308>
 80164e8:	4640      	mov	r0, r8
 80164ea:	4649      	mov	r1, r9
 80164ec:	f7ea fb94 	bl	8000c18 <__aeabi_d2f>
 80164f0:	6038      	str	r0, [r7, #0]
 80164f2:	e7a5      	b.n	8016440 <_scanf_float+0x308>
 80164f4:	2600      	movs	r6, #0
 80164f6:	e666      	b.n	80161c6 <_scanf_float+0x8e>
 80164f8:	0801a33a 	.word	0x0801a33a

080164fc <nanf>:
 80164fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016504 <nanf+0x8>
 8016500:	4770      	bx	lr
 8016502:	bf00      	nop
 8016504:	7fc00000 	.word	0x7fc00000

08016508 <sniprintf>:
 8016508:	b40c      	push	{r2, r3}
 801650a:	b530      	push	{r4, r5, lr}
 801650c:	4b17      	ldr	r3, [pc, #92]	; (801656c <sniprintf+0x64>)
 801650e:	1e0c      	subs	r4, r1, #0
 8016510:	b09d      	sub	sp, #116	; 0x74
 8016512:	681d      	ldr	r5, [r3, #0]
 8016514:	da08      	bge.n	8016528 <sniprintf+0x20>
 8016516:	238b      	movs	r3, #139	; 0x8b
 8016518:	602b      	str	r3, [r5, #0]
 801651a:	f04f 30ff 	mov.w	r0, #4294967295
 801651e:	b01d      	add	sp, #116	; 0x74
 8016520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016524:	b002      	add	sp, #8
 8016526:	4770      	bx	lr
 8016528:	f44f 7302 	mov.w	r3, #520	; 0x208
 801652c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016530:	bf14      	ite	ne
 8016532:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016536:	4623      	moveq	r3, r4
 8016538:	9304      	str	r3, [sp, #16]
 801653a:	9307      	str	r3, [sp, #28]
 801653c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016540:	9002      	str	r0, [sp, #8]
 8016542:	9006      	str	r0, [sp, #24]
 8016544:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016548:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801654a:	ab21      	add	r3, sp, #132	; 0x84
 801654c:	a902      	add	r1, sp, #8
 801654e:	4628      	mov	r0, r5
 8016550:	9301      	str	r3, [sp, #4]
 8016552:	f002 fdf1 	bl	8019138 <_svfiprintf_r>
 8016556:	1c43      	adds	r3, r0, #1
 8016558:	bfbc      	itt	lt
 801655a:	238b      	movlt	r3, #139	; 0x8b
 801655c:	602b      	strlt	r3, [r5, #0]
 801655e:	2c00      	cmp	r4, #0
 8016560:	d0dd      	beq.n	801651e <sniprintf+0x16>
 8016562:	9b02      	ldr	r3, [sp, #8]
 8016564:	2200      	movs	r2, #0
 8016566:	701a      	strb	r2, [r3, #0]
 8016568:	e7d9      	b.n	801651e <sniprintf+0x16>
 801656a:	bf00      	nop
 801656c:	2000000c 	.word	0x2000000c

08016570 <siprintf>:
 8016570:	b40e      	push	{r1, r2, r3}
 8016572:	b500      	push	{lr}
 8016574:	b09c      	sub	sp, #112	; 0x70
 8016576:	ab1d      	add	r3, sp, #116	; 0x74
 8016578:	9002      	str	r0, [sp, #8]
 801657a:	9006      	str	r0, [sp, #24]
 801657c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016580:	4809      	ldr	r0, [pc, #36]	; (80165a8 <siprintf+0x38>)
 8016582:	9107      	str	r1, [sp, #28]
 8016584:	9104      	str	r1, [sp, #16]
 8016586:	4909      	ldr	r1, [pc, #36]	; (80165ac <siprintf+0x3c>)
 8016588:	f853 2b04 	ldr.w	r2, [r3], #4
 801658c:	9105      	str	r1, [sp, #20]
 801658e:	6800      	ldr	r0, [r0, #0]
 8016590:	9301      	str	r3, [sp, #4]
 8016592:	a902      	add	r1, sp, #8
 8016594:	f002 fdd0 	bl	8019138 <_svfiprintf_r>
 8016598:	9b02      	ldr	r3, [sp, #8]
 801659a:	2200      	movs	r2, #0
 801659c:	701a      	strb	r2, [r3, #0]
 801659e:	b01c      	add	sp, #112	; 0x70
 80165a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80165a4:	b003      	add	sp, #12
 80165a6:	4770      	bx	lr
 80165a8:	2000000c 	.word	0x2000000c
 80165ac:	ffff0208 	.word	0xffff0208

080165b0 <siscanf>:
 80165b0:	b40e      	push	{r1, r2, r3}
 80165b2:	b530      	push	{r4, r5, lr}
 80165b4:	b09c      	sub	sp, #112	; 0x70
 80165b6:	ac1f      	add	r4, sp, #124	; 0x7c
 80165b8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80165bc:	f854 5b04 	ldr.w	r5, [r4], #4
 80165c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80165c4:	9002      	str	r0, [sp, #8]
 80165c6:	9006      	str	r0, [sp, #24]
 80165c8:	f7e9 fe1a 	bl	8000200 <strlen>
 80165cc:	4b0b      	ldr	r3, [pc, #44]	; (80165fc <siscanf+0x4c>)
 80165ce:	9003      	str	r0, [sp, #12]
 80165d0:	9007      	str	r0, [sp, #28]
 80165d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80165d4:	480a      	ldr	r0, [pc, #40]	; (8016600 <siscanf+0x50>)
 80165d6:	9401      	str	r4, [sp, #4]
 80165d8:	2300      	movs	r3, #0
 80165da:	930f      	str	r3, [sp, #60]	; 0x3c
 80165dc:	9314      	str	r3, [sp, #80]	; 0x50
 80165de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165e6:	462a      	mov	r2, r5
 80165e8:	4623      	mov	r3, r4
 80165ea:	a902      	add	r1, sp, #8
 80165ec:	6800      	ldr	r0, [r0, #0]
 80165ee:	f002 fef5 	bl	80193dc <__ssvfiscanf_r>
 80165f2:	b01c      	add	sp, #112	; 0x70
 80165f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165f8:	b003      	add	sp, #12
 80165fa:	4770      	bx	lr
 80165fc:	08016605 	.word	0x08016605
 8016600:	2000000c 	.word	0x2000000c

08016604 <__seofread>:
 8016604:	2000      	movs	r0, #0
 8016606:	4770      	bx	lr

08016608 <strcpy>:
 8016608:	4603      	mov	r3, r0
 801660a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801660e:	f803 2b01 	strb.w	r2, [r3], #1
 8016612:	2a00      	cmp	r2, #0
 8016614:	d1f9      	bne.n	801660a <strcpy+0x2>
 8016616:	4770      	bx	lr

08016618 <sulp>:
 8016618:	b570      	push	{r4, r5, r6, lr}
 801661a:	4604      	mov	r4, r0
 801661c:	460d      	mov	r5, r1
 801661e:	ec45 4b10 	vmov	d0, r4, r5
 8016622:	4616      	mov	r6, r2
 8016624:	f002 fb44 	bl	8018cb0 <__ulp>
 8016628:	ec51 0b10 	vmov	r0, r1, d0
 801662c:	b17e      	cbz	r6, 801664e <sulp+0x36>
 801662e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016632:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016636:	2b00      	cmp	r3, #0
 8016638:	dd09      	ble.n	801664e <sulp+0x36>
 801663a:	051b      	lsls	r3, r3, #20
 801663c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016640:	2400      	movs	r4, #0
 8016642:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016646:	4622      	mov	r2, r4
 8016648:	462b      	mov	r3, r5
 801664a:	f7e9 ffed 	bl	8000628 <__aeabi_dmul>
 801664e:	bd70      	pop	{r4, r5, r6, pc}

08016650 <_strtod_l>:
 8016650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016654:	461f      	mov	r7, r3
 8016656:	b0a1      	sub	sp, #132	; 0x84
 8016658:	2300      	movs	r3, #0
 801665a:	4681      	mov	r9, r0
 801665c:	4638      	mov	r0, r7
 801665e:	460e      	mov	r6, r1
 8016660:	9217      	str	r2, [sp, #92]	; 0x5c
 8016662:	931c      	str	r3, [sp, #112]	; 0x70
 8016664:	f002 f824 	bl	80186b0 <__localeconv_l>
 8016668:	4680      	mov	r8, r0
 801666a:	6800      	ldr	r0, [r0, #0]
 801666c:	f7e9 fdc8 	bl	8000200 <strlen>
 8016670:	f04f 0a00 	mov.w	sl, #0
 8016674:	4604      	mov	r4, r0
 8016676:	f04f 0b00 	mov.w	fp, #0
 801667a:	961b      	str	r6, [sp, #108]	; 0x6c
 801667c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801667e:	781a      	ldrb	r2, [r3, #0]
 8016680:	2a0d      	cmp	r2, #13
 8016682:	d832      	bhi.n	80166ea <_strtod_l+0x9a>
 8016684:	2a09      	cmp	r2, #9
 8016686:	d236      	bcs.n	80166f6 <_strtod_l+0xa6>
 8016688:	2a00      	cmp	r2, #0
 801668a:	d03e      	beq.n	801670a <_strtod_l+0xba>
 801668c:	2300      	movs	r3, #0
 801668e:	930d      	str	r3, [sp, #52]	; 0x34
 8016690:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016692:	782b      	ldrb	r3, [r5, #0]
 8016694:	2b30      	cmp	r3, #48	; 0x30
 8016696:	f040 80ac 	bne.w	80167f2 <_strtod_l+0x1a2>
 801669a:	786b      	ldrb	r3, [r5, #1]
 801669c:	2b58      	cmp	r3, #88	; 0x58
 801669e:	d001      	beq.n	80166a4 <_strtod_l+0x54>
 80166a0:	2b78      	cmp	r3, #120	; 0x78
 80166a2:	d167      	bne.n	8016774 <_strtod_l+0x124>
 80166a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166a6:	9301      	str	r3, [sp, #4]
 80166a8:	ab1c      	add	r3, sp, #112	; 0x70
 80166aa:	9300      	str	r3, [sp, #0]
 80166ac:	9702      	str	r7, [sp, #8]
 80166ae:	ab1d      	add	r3, sp, #116	; 0x74
 80166b0:	4a88      	ldr	r2, [pc, #544]	; (80168d4 <_strtod_l+0x284>)
 80166b2:	a91b      	add	r1, sp, #108	; 0x6c
 80166b4:	4648      	mov	r0, r9
 80166b6:	f001 fd12 	bl	80180de <__gethex>
 80166ba:	f010 0407 	ands.w	r4, r0, #7
 80166be:	4606      	mov	r6, r0
 80166c0:	d005      	beq.n	80166ce <_strtod_l+0x7e>
 80166c2:	2c06      	cmp	r4, #6
 80166c4:	d12b      	bne.n	801671e <_strtod_l+0xce>
 80166c6:	3501      	adds	r5, #1
 80166c8:	2300      	movs	r3, #0
 80166ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80166cc:	930d      	str	r3, [sp, #52]	; 0x34
 80166ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	f040 859a 	bne.w	801720a <_strtod_l+0xbba>
 80166d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166d8:	b1e3      	cbz	r3, 8016714 <_strtod_l+0xc4>
 80166da:	4652      	mov	r2, sl
 80166dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80166e0:	ec43 2b10 	vmov	d0, r2, r3
 80166e4:	b021      	add	sp, #132	; 0x84
 80166e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ea:	2a2b      	cmp	r2, #43	; 0x2b
 80166ec:	d015      	beq.n	801671a <_strtod_l+0xca>
 80166ee:	2a2d      	cmp	r2, #45	; 0x2d
 80166f0:	d004      	beq.n	80166fc <_strtod_l+0xac>
 80166f2:	2a20      	cmp	r2, #32
 80166f4:	d1ca      	bne.n	801668c <_strtod_l+0x3c>
 80166f6:	3301      	adds	r3, #1
 80166f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80166fa:	e7bf      	b.n	801667c <_strtod_l+0x2c>
 80166fc:	2201      	movs	r2, #1
 80166fe:	920d      	str	r2, [sp, #52]	; 0x34
 8016700:	1c5a      	adds	r2, r3, #1
 8016702:	921b      	str	r2, [sp, #108]	; 0x6c
 8016704:	785b      	ldrb	r3, [r3, #1]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d1c2      	bne.n	8016690 <_strtod_l+0x40>
 801670a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801670c:	961b      	str	r6, [sp, #108]	; 0x6c
 801670e:	2b00      	cmp	r3, #0
 8016710:	f040 8579 	bne.w	8017206 <_strtod_l+0xbb6>
 8016714:	4652      	mov	r2, sl
 8016716:	465b      	mov	r3, fp
 8016718:	e7e2      	b.n	80166e0 <_strtod_l+0x90>
 801671a:	2200      	movs	r2, #0
 801671c:	e7ef      	b.n	80166fe <_strtod_l+0xae>
 801671e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016720:	b13a      	cbz	r2, 8016732 <_strtod_l+0xe2>
 8016722:	2135      	movs	r1, #53	; 0x35
 8016724:	a81e      	add	r0, sp, #120	; 0x78
 8016726:	f002 fbbb 	bl	8018ea0 <__copybits>
 801672a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801672c:	4648      	mov	r0, r9
 801672e:	f002 f828 	bl	8018782 <_Bfree>
 8016732:	3c01      	subs	r4, #1
 8016734:	2c04      	cmp	r4, #4
 8016736:	d806      	bhi.n	8016746 <_strtod_l+0xf6>
 8016738:	e8df f004 	tbb	[pc, r4]
 801673c:	1714030a 	.word	0x1714030a
 8016740:	0a          	.byte	0x0a
 8016741:	00          	.byte	0x00
 8016742:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016746:	0730      	lsls	r0, r6, #28
 8016748:	d5c1      	bpl.n	80166ce <_strtod_l+0x7e>
 801674a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801674e:	e7be      	b.n	80166ce <_strtod_l+0x7e>
 8016750:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016754:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016756:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801675a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801675e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016762:	e7f0      	b.n	8016746 <_strtod_l+0xf6>
 8016764:	f8df b170 	ldr.w	fp, [pc, #368]	; 80168d8 <_strtod_l+0x288>
 8016768:	e7ed      	b.n	8016746 <_strtod_l+0xf6>
 801676a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801676e:	f04f 3aff 	mov.w	sl, #4294967295
 8016772:	e7e8      	b.n	8016746 <_strtod_l+0xf6>
 8016774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016776:	1c5a      	adds	r2, r3, #1
 8016778:	921b      	str	r2, [sp, #108]	; 0x6c
 801677a:	785b      	ldrb	r3, [r3, #1]
 801677c:	2b30      	cmp	r3, #48	; 0x30
 801677e:	d0f9      	beq.n	8016774 <_strtod_l+0x124>
 8016780:	2b00      	cmp	r3, #0
 8016782:	d0a4      	beq.n	80166ce <_strtod_l+0x7e>
 8016784:	2301      	movs	r3, #1
 8016786:	2500      	movs	r5, #0
 8016788:	9306      	str	r3, [sp, #24]
 801678a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801678c:	9308      	str	r3, [sp, #32]
 801678e:	9507      	str	r5, [sp, #28]
 8016790:	9505      	str	r5, [sp, #20]
 8016792:	220a      	movs	r2, #10
 8016794:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016796:	7807      	ldrb	r7, [r0, #0]
 8016798:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801679c:	b2d9      	uxtb	r1, r3
 801679e:	2909      	cmp	r1, #9
 80167a0:	d929      	bls.n	80167f6 <_strtod_l+0x1a6>
 80167a2:	4622      	mov	r2, r4
 80167a4:	f8d8 1000 	ldr.w	r1, [r8]
 80167a8:	f003 f902 	bl	80199b0 <strncmp>
 80167ac:	2800      	cmp	r0, #0
 80167ae:	d031      	beq.n	8016814 <_strtod_l+0x1c4>
 80167b0:	2000      	movs	r0, #0
 80167b2:	9c05      	ldr	r4, [sp, #20]
 80167b4:	9004      	str	r0, [sp, #16]
 80167b6:	463b      	mov	r3, r7
 80167b8:	4602      	mov	r2, r0
 80167ba:	2b65      	cmp	r3, #101	; 0x65
 80167bc:	d001      	beq.n	80167c2 <_strtod_l+0x172>
 80167be:	2b45      	cmp	r3, #69	; 0x45
 80167c0:	d114      	bne.n	80167ec <_strtod_l+0x19c>
 80167c2:	b924      	cbnz	r4, 80167ce <_strtod_l+0x17e>
 80167c4:	b910      	cbnz	r0, 80167cc <_strtod_l+0x17c>
 80167c6:	9b06      	ldr	r3, [sp, #24]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d09e      	beq.n	801670a <_strtod_l+0xba>
 80167cc:	2400      	movs	r4, #0
 80167ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80167d0:	1c73      	adds	r3, r6, #1
 80167d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80167d4:	7873      	ldrb	r3, [r6, #1]
 80167d6:	2b2b      	cmp	r3, #43	; 0x2b
 80167d8:	d078      	beq.n	80168cc <_strtod_l+0x27c>
 80167da:	2b2d      	cmp	r3, #45	; 0x2d
 80167dc:	d070      	beq.n	80168c0 <_strtod_l+0x270>
 80167de:	f04f 0c00 	mov.w	ip, #0
 80167e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80167e6:	2f09      	cmp	r7, #9
 80167e8:	d97c      	bls.n	80168e4 <_strtod_l+0x294>
 80167ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80167ec:	f04f 0e00 	mov.w	lr, #0
 80167f0:	e09a      	b.n	8016928 <_strtod_l+0x2d8>
 80167f2:	2300      	movs	r3, #0
 80167f4:	e7c7      	b.n	8016786 <_strtod_l+0x136>
 80167f6:	9905      	ldr	r1, [sp, #20]
 80167f8:	2908      	cmp	r1, #8
 80167fa:	bfdd      	ittte	le
 80167fc:	9907      	ldrle	r1, [sp, #28]
 80167fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8016802:	9307      	strle	r3, [sp, #28]
 8016804:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016808:	9b05      	ldr	r3, [sp, #20]
 801680a:	3001      	adds	r0, #1
 801680c:	3301      	adds	r3, #1
 801680e:	9305      	str	r3, [sp, #20]
 8016810:	901b      	str	r0, [sp, #108]	; 0x6c
 8016812:	e7bf      	b.n	8016794 <_strtod_l+0x144>
 8016814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016816:	191a      	adds	r2, r3, r4
 8016818:	921b      	str	r2, [sp, #108]	; 0x6c
 801681a:	9a05      	ldr	r2, [sp, #20]
 801681c:	5d1b      	ldrb	r3, [r3, r4]
 801681e:	2a00      	cmp	r2, #0
 8016820:	d037      	beq.n	8016892 <_strtod_l+0x242>
 8016822:	9c05      	ldr	r4, [sp, #20]
 8016824:	4602      	mov	r2, r0
 8016826:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801682a:	2909      	cmp	r1, #9
 801682c:	d913      	bls.n	8016856 <_strtod_l+0x206>
 801682e:	2101      	movs	r1, #1
 8016830:	9104      	str	r1, [sp, #16]
 8016832:	e7c2      	b.n	80167ba <_strtod_l+0x16a>
 8016834:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016836:	1c5a      	adds	r2, r3, #1
 8016838:	921b      	str	r2, [sp, #108]	; 0x6c
 801683a:	785b      	ldrb	r3, [r3, #1]
 801683c:	3001      	adds	r0, #1
 801683e:	2b30      	cmp	r3, #48	; 0x30
 8016840:	d0f8      	beq.n	8016834 <_strtod_l+0x1e4>
 8016842:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016846:	2a08      	cmp	r2, #8
 8016848:	f200 84e4 	bhi.w	8017214 <_strtod_l+0xbc4>
 801684c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801684e:	9208      	str	r2, [sp, #32]
 8016850:	4602      	mov	r2, r0
 8016852:	2000      	movs	r0, #0
 8016854:	4604      	mov	r4, r0
 8016856:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801685a:	f100 0101 	add.w	r1, r0, #1
 801685e:	d012      	beq.n	8016886 <_strtod_l+0x236>
 8016860:	440a      	add	r2, r1
 8016862:	eb00 0c04 	add.w	ip, r0, r4
 8016866:	4621      	mov	r1, r4
 8016868:	270a      	movs	r7, #10
 801686a:	458c      	cmp	ip, r1
 801686c:	d113      	bne.n	8016896 <_strtod_l+0x246>
 801686e:	1821      	adds	r1, r4, r0
 8016870:	2908      	cmp	r1, #8
 8016872:	f104 0401 	add.w	r4, r4, #1
 8016876:	4404      	add	r4, r0
 8016878:	dc19      	bgt.n	80168ae <_strtod_l+0x25e>
 801687a:	9b07      	ldr	r3, [sp, #28]
 801687c:	210a      	movs	r1, #10
 801687e:	fb01 e303 	mla	r3, r1, r3, lr
 8016882:	9307      	str	r3, [sp, #28]
 8016884:	2100      	movs	r1, #0
 8016886:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016888:	1c58      	adds	r0, r3, #1
 801688a:	901b      	str	r0, [sp, #108]	; 0x6c
 801688c:	785b      	ldrb	r3, [r3, #1]
 801688e:	4608      	mov	r0, r1
 8016890:	e7c9      	b.n	8016826 <_strtod_l+0x1d6>
 8016892:	9805      	ldr	r0, [sp, #20]
 8016894:	e7d3      	b.n	801683e <_strtod_l+0x1ee>
 8016896:	2908      	cmp	r1, #8
 8016898:	f101 0101 	add.w	r1, r1, #1
 801689c:	dc03      	bgt.n	80168a6 <_strtod_l+0x256>
 801689e:	9b07      	ldr	r3, [sp, #28]
 80168a0:	437b      	muls	r3, r7
 80168a2:	9307      	str	r3, [sp, #28]
 80168a4:	e7e1      	b.n	801686a <_strtod_l+0x21a>
 80168a6:	2910      	cmp	r1, #16
 80168a8:	bfd8      	it	le
 80168aa:	437d      	mulle	r5, r7
 80168ac:	e7dd      	b.n	801686a <_strtod_l+0x21a>
 80168ae:	2c10      	cmp	r4, #16
 80168b0:	bfdc      	itt	le
 80168b2:	210a      	movle	r1, #10
 80168b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80168b8:	e7e4      	b.n	8016884 <_strtod_l+0x234>
 80168ba:	2301      	movs	r3, #1
 80168bc:	9304      	str	r3, [sp, #16]
 80168be:	e781      	b.n	80167c4 <_strtod_l+0x174>
 80168c0:	f04f 0c01 	mov.w	ip, #1
 80168c4:	1cb3      	adds	r3, r6, #2
 80168c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80168c8:	78b3      	ldrb	r3, [r6, #2]
 80168ca:	e78a      	b.n	80167e2 <_strtod_l+0x192>
 80168cc:	f04f 0c00 	mov.w	ip, #0
 80168d0:	e7f8      	b.n	80168c4 <_strtod_l+0x274>
 80168d2:	bf00      	nop
 80168d4:	0801a340 	.word	0x0801a340
 80168d8:	7ff00000 	.word	0x7ff00000
 80168dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168de:	1c5f      	adds	r7, r3, #1
 80168e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80168e2:	785b      	ldrb	r3, [r3, #1]
 80168e4:	2b30      	cmp	r3, #48	; 0x30
 80168e6:	d0f9      	beq.n	80168dc <_strtod_l+0x28c>
 80168e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80168ec:	2f08      	cmp	r7, #8
 80168ee:	f63f af7d 	bhi.w	80167ec <_strtod_l+0x19c>
 80168f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80168f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168f8:	930a      	str	r3, [sp, #40]	; 0x28
 80168fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168fc:	1c5f      	adds	r7, r3, #1
 80168fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8016900:	785b      	ldrb	r3, [r3, #1]
 8016902:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016906:	f1b8 0f09 	cmp.w	r8, #9
 801690a:	d937      	bls.n	801697c <_strtod_l+0x32c>
 801690c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801690e:	1a7f      	subs	r7, r7, r1
 8016910:	2f08      	cmp	r7, #8
 8016912:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016916:	dc37      	bgt.n	8016988 <_strtod_l+0x338>
 8016918:	45be      	cmp	lr, r7
 801691a:	bfa8      	it	ge
 801691c:	46be      	movge	lr, r7
 801691e:	f1bc 0f00 	cmp.w	ip, #0
 8016922:	d001      	beq.n	8016928 <_strtod_l+0x2d8>
 8016924:	f1ce 0e00 	rsb	lr, lr, #0
 8016928:	2c00      	cmp	r4, #0
 801692a:	d151      	bne.n	80169d0 <_strtod_l+0x380>
 801692c:	2800      	cmp	r0, #0
 801692e:	f47f aece 	bne.w	80166ce <_strtod_l+0x7e>
 8016932:	9a06      	ldr	r2, [sp, #24]
 8016934:	2a00      	cmp	r2, #0
 8016936:	f47f aeca 	bne.w	80166ce <_strtod_l+0x7e>
 801693a:	9a04      	ldr	r2, [sp, #16]
 801693c:	2a00      	cmp	r2, #0
 801693e:	f47f aee4 	bne.w	801670a <_strtod_l+0xba>
 8016942:	2b4e      	cmp	r3, #78	; 0x4e
 8016944:	d027      	beq.n	8016996 <_strtod_l+0x346>
 8016946:	dc21      	bgt.n	801698c <_strtod_l+0x33c>
 8016948:	2b49      	cmp	r3, #73	; 0x49
 801694a:	f47f aede 	bne.w	801670a <_strtod_l+0xba>
 801694e:	49a0      	ldr	r1, [pc, #640]	; (8016bd0 <_strtod_l+0x580>)
 8016950:	a81b      	add	r0, sp, #108	; 0x6c
 8016952:	f001 fdf7 	bl	8018544 <__match>
 8016956:	2800      	cmp	r0, #0
 8016958:	f43f aed7 	beq.w	801670a <_strtod_l+0xba>
 801695c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801695e:	499d      	ldr	r1, [pc, #628]	; (8016bd4 <_strtod_l+0x584>)
 8016960:	3b01      	subs	r3, #1
 8016962:	a81b      	add	r0, sp, #108	; 0x6c
 8016964:	931b      	str	r3, [sp, #108]	; 0x6c
 8016966:	f001 fded 	bl	8018544 <__match>
 801696a:	b910      	cbnz	r0, 8016972 <_strtod_l+0x322>
 801696c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801696e:	3301      	adds	r3, #1
 8016970:	931b      	str	r3, [sp, #108]	; 0x6c
 8016972:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016be8 <_strtod_l+0x598>
 8016976:	f04f 0a00 	mov.w	sl, #0
 801697a:	e6a8      	b.n	80166ce <_strtod_l+0x7e>
 801697c:	210a      	movs	r1, #10
 801697e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016982:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016986:	e7b8      	b.n	80168fa <_strtod_l+0x2aa>
 8016988:	46be      	mov	lr, r7
 801698a:	e7c8      	b.n	801691e <_strtod_l+0x2ce>
 801698c:	2b69      	cmp	r3, #105	; 0x69
 801698e:	d0de      	beq.n	801694e <_strtod_l+0x2fe>
 8016990:	2b6e      	cmp	r3, #110	; 0x6e
 8016992:	f47f aeba 	bne.w	801670a <_strtod_l+0xba>
 8016996:	4990      	ldr	r1, [pc, #576]	; (8016bd8 <_strtod_l+0x588>)
 8016998:	a81b      	add	r0, sp, #108	; 0x6c
 801699a:	f001 fdd3 	bl	8018544 <__match>
 801699e:	2800      	cmp	r0, #0
 80169a0:	f43f aeb3 	beq.w	801670a <_strtod_l+0xba>
 80169a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169a6:	781b      	ldrb	r3, [r3, #0]
 80169a8:	2b28      	cmp	r3, #40	; 0x28
 80169aa:	d10e      	bne.n	80169ca <_strtod_l+0x37a>
 80169ac:	aa1e      	add	r2, sp, #120	; 0x78
 80169ae:	498b      	ldr	r1, [pc, #556]	; (8016bdc <_strtod_l+0x58c>)
 80169b0:	a81b      	add	r0, sp, #108	; 0x6c
 80169b2:	f001 fddb 	bl	801856c <__hexnan>
 80169b6:	2805      	cmp	r0, #5
 80169b8:	d107      	bne.n	80169ca <_strtod_l+0x37a>
 80169ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80169bc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80169c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80169c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80169c8:	e681      	b.n	80166ce <_strtod_l+0x7e>
 80169ca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016bf0 <_strtod_l+0x5a0>
 80169ce:	e7d2      	b.n	8016976 <_strtod_l+0x326>
 80169d0:	ebae 0302 	sub.w	r3, lr, r2
 80169d4:	9306      	str	r3, [sp, #24]
 80169d6:	9b05      	ldr	r3, [sp, #20]
 80169d8:	9807      	ldr	r0, [sp, #28]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	bf08      	it	eq
 80169de:	4623      	moveq	r3, r4
 80169e0:	2c10      	cmp	r4, #16
 80169e2:	9305      	str	r3, [sp, #20]
 80169e4:	46a0      	mov	r8, r4
 80169e6:	bfa8      	it	ge
 80169e8:	f04f 0810 	movge.w	r8, #16
 80169ec:	f7e9 fda2 	bl	8000534 <__aeabi_ui2d>
 80169f0:	2c09      	cmp	r4, #9
 80169f2:	4682      	mov	sl, r0
 80169f4:	468b      	mov	fp, r1
 80169f6:	dc13      	bgt.n	8016a20 <_strtod_l+0x3d0>
 80169f8:	9b06      	ldr	r3, [sp, #24]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	f43f ae67 	beq.w	80166ce <_strtod_l+0x7e>
 8016a00:	9b06      	ldr	r3, [sp, #24]
 8016a02:	dd7a      	ble.n	8016afa <_strtod_l+0x4aa>
 8016a04:	2b16      	cmp	r3, #22
 8016a06:	dc61      	bgt.n	8016acc <_strtod_l+0x47c>
 8016a08:	4a75      	ldr	r2, [pc, #468]	; (8016be0 <_strtod_l+0x590>)
 8016a0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016a0e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016a12:	4652      	mov	r2, sl
 8016a14:	465b      	mov	r3, fp
 8016a16:	f7e9 fe07 	bl	8000628 <__aeabi_dmul>
 8016a1a:	4682      	mov	sl, r0
 8016a1c:	468b      	mov	fp, r1
 8016a1e:	e656      	b.n	80166ce <_strtod_l+0x7e>
 8016a20:	4b6f      	ldr	r3, [pc, #444]	; (8016be0 <_strtod_l+0x590>)
 8016a22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016a26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016a2a:	f7e9 fdfd 	bl	8000628 <__aeabi_dmul>
 8016a2e:	4606      	mov	r6, r0
 8016a30:	4628      	mov	r0, r5
 8016a32:	460f      	mov	r7, r1
 8016a34:	f7e9 fd7e 	bl	8000534 <__aeabi_ui2d>
 8016a38:	4602      	mov	r2, r0
 8016a3a:	460b      	mov	r3, r1
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	4639      	mov	r1, r7
 8016a40:	f7e9 fc3c 	bl	80002bc <__adddf3>
 8016a44:	2c0f      	cmp	r4, #15
 8016a46:	4682      	mov	sl, r0
 8016a48:	468b      	mov	fp, r1
 8016a4a:	ddd5      	ble.n	80169f8 <_strtod_l+0x3a8>
 8016a4c:	9b06      	ldr	r3, [sp, #24]
 8016a4e:	eba4 0808 	sub.w	r8, r4, r8
 8016a52:	4498      	add	r8, r3
 8016a54:	f1b8 0f00 	cmp.w	r8, #0
 8016a58:	f340 8096 	ble.w	8016b88 <_strtod_l+0x538>
 8016a5c:	f018 030f 	ands.w	r3, r8, #15
 8016a60:	d00a      	beq.n	8016a78 <_strtod_l+0x428>
 8016a62:	495f      	ldr	r1, [pc, #380]	; (8016be0 <_strtod_l+0x590>)
 8016a64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a68:	4652      	mov	r2, sl
 8016a6a:	465b      	mov	r3, fp
 8016a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a70:	f7e9 fdda 	bl	8000628 <__aeabi_dmul>
 8016a74:	4682      	mov	sl, r0
 8016a76:	468b      	mov	fp, r1
 8016a78:	f038 080f 	bics.w	r8, r8, #15
 8016a7c:	d073      	beq.n	8016b66 <_strtod_l+0x516>
 8016a7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016a82:	dd47      	ble.n	8016b14 <_strtod_l+0x4c4>
 8016a84:	2400      	movs	r4, #0
 8016a86:	46a0      	mov	r8, r4
 8016a88:	9407      	str	r4, [sp, #28]
 8016a8a:	9405      	str	r4, [sp, #20]
 8016a8c:	2322      	movs	r3, #34	; 0x22
 8016a8e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016be8 <_strtod_l+0x598>
 8016a92:	f8c9 3000 	str.w	r3, [r9]
 8016a96:	f04f 0a00 	mov.w	sl, #0
 8016a9a:	9b07      	ldr	r3, [sp, #28]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	f43f ae16 	beq.w	80166ce <_strtod_l+0x7e>
 8016aa2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016aa4:	4648      	mov	r0, r9
 8016aa6:	f001 fe6c 	bl	8018782 <_Bfree>
 8016aaa:	9905      	ldr	r1, [sp, #20]
 8016aac:	4648      	mov	r0, r9
 8016aae:	f001 fe68 	bl	8018782 <_Bfree>
 8016ab2:	4641      	mov	r1, r8
 8016ab4:	4648      	mov	r0, r9
 8016ab6:	f001 fe64 	bl	8018782 <_Bfree>
 8016aba:	9907      	ldr	r1, [sp, #28]
 8016abc:	4648      	mov	r0, r9
 8016abe:	f001 fe60 	bl	8018782 <_Bfree>
 8016ac2:	4621      	mov	r1, r4
 8016ac4:	4648      	mov	r0, r9
 8016ac6:	f001 fe5c 	bl	8018782 <_Bfree>
 8016aca:	e600      	b.n	80166ce <_strtod_l+0x7e>
 8016acc:	9a06      	ldr	r2, [sp, #24]
 8016ace:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	dbba      	blt.n	8016a4c <_strtod_l+0x3fc>
 8016ad6:	4d42      	ldr	r5, [pc, #264]	; (8016be0 <_strtod_l+0x590>)
 8016ad8:	f1c4 040f 	rsb	r4, r4, #15
 8016adc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016ae0:	4652      	mov	r2, sl
 8016ae2:	465b      	mov	r3, fp
 8016ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ae8:	f7e9 fd9e 	bl	8000628 <__aeabi_dmul>
 8016aec:	9b06      	ldr	r3, [sp, #24]
 8016aee:	1b1c      	subs	r4, r3, r4
 8016af0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016af4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016af8:	e78d      	b.n	8016a16 <_strtod_l+0x3c6>
 8016afa:	f113 0f16 	cmn.w	r3, #22
 8016afe:	dba5      	blt.n	8016a4c <_strtod_l+0x3fc>
 8016b00:	4a37      	ldr	r2, [pc, #220]	; (8016be0 <_strtod_l+0x590>)
 8016b02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016b06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016b0a:	4650      	mov	r0, sl
 8016b0c:	4659      	mov	r1, fp
 8016b0e:	f7e9 feb5 	bl	800087c <__aeabi_ddiv>
 8016b12:	e782      	b.n	8016a1a <_strtod_l+0x3ca>
 8016b14:	2300      	movs	r3, #0
 8016b16:	4e33      	ldr	r6, [pc, #204]	; (8016be4 <_strtod_l+0x594>)
 8016b18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016b1c:	4650      	mov	r0, sl
 8016b1e:	4659      	mov	r1, fp
 8016b20:	461d      	mov	r5, r3
 8016b22:	f1b8 0f01 	cmp.w	r8, #1
 8016b26:	dc21      	bgt.n	8016b6c <_strtod_l+0x51c>
 8016b28:	b10b      	cbz	r3, 8016b2e <_strtod_l+0x4de>
 8016b2a:	4682      	mov	sl, r0
 8016b2c:	468b      	mov	fp, r1
 8016b2e:	4b2d      	ldr	r3, [pc, #180]	; (8016be4 <_strtod_l+0x594>)
 8016b30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016b34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016b38:	4652      	mov	r2, sl
 8016b3a:	465b      	mov	r3, fp
 8016b3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016b40:	f7e9 fd72 	bl	8000628 <__aeabi_dmul>
 8016b44:	4b28      	ldr	r3, [pc, #160]	; (8016be8 <_strtod_l+0x598>)
 8016b46:	460a      	mov	r2, r1
 8016b48:	400b      	ands	r3, r1
 8016b4a:	4928      	ldr	r1, [pc, #160]	; (8016bec <_strtod_l+0x59c>)
 8016b4c:	428b      	cmp	r3, r1
 8016b4e:	4682      	mov	sl, r0
 8016b50:	d898      	bhi.n	8016a84 <_strtod_l+0x434>
 8016b52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016b56:	428b      	cmp	r3, r1
 8016b58:	bf86      	itte	hi
 8016b5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016bf4 <_strtod_l+0x5a4>
 8016b5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016b66:	2300      	movs	r3, #0
 8016b68:	9304      	str	r3, [sp, #16]
 8016b6a:	e077      	b.n	8016c5c <_strtod_l+0x60c>
 8016b6c:	f018 0f01 	tst.w	r8, #1
 8016b70:	d006      	beq.n	8016b80 <_strtod_l+0x530>
 8016b72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7a:	f7e9 fd55 	bl	8000628 <__aeabi_dmul>
 8016b7e:	2301      	movs	r3, #1
 8016b80:	3501      	adds	r5, #1
 8016b82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016b86:	e7cc      	b.n	8016b22 <_strtod_l+0x4d2>
 8016b88:	d0ed      	beq.n	8016b66 <_strtod_l+0x516>
 8016b8a:	f1c8 0800 	rsb	r8, r8, #0
 8016b8e:	f018 020f 	ands.w	r2, r8, #15
 8016b92:	d00a      	beq.n	8016baa <_strtod_l+0x55a>
 8016b94:	4b12      	ldr	r3, [pc, #72]	; (8016be0 <_strtod_l+0x590>)
 8016b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b9a:	4650      	mov	r0, sl
 8016b9c:	4659      	mov	r1, fp
 8016b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba2:	f7e9 fe6b 	bl	800087c <__aeabi_ddiv>
 8016ba6:	4682      	mov	sl, r0
 8016ba8:	468b      	mov	fp, r1
 8016baa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016bae:	d0da      	beq.n	8016b66 <_strtod_l+0x516>
 8016bb0:	f1b8 0f1f 	cmp.w	r8, #31
 8016bb4:	dd20      	ble.n	8016bf8 <_strtod_l+0x5a8>
 8016bb6:	2400      	movs	r4, #0
 8016bb8:	46a0      	mov	r8, r4
 8016bba:	9407      	str	r4, [sp, #28]
 8016bbc:	9405      	str	r4, [sp, #20]
 8016bbe:	2322      	movs	r3, #34	; 0x22
 8016bc0:	f04f 0a00 	mov.w	sl, #0
 8016bc4:	f04f 0b00 	mov.w	fp, #0
 8016bc8:	f8c9 3000 	str.w	r3, [r9]
 8016bcc:	e765      	b.n	8016a9a <_strtod_l+0x44a>
 8016bce:	bf00      	nop
 8016bd0:	0801a30d 	.word	0x0801a30d
 8016bd4:	0801a393 	.word	0x0801a393
 8016bd8:	0801a315 	.word	0x0801a315
 8016bdc:	0801a354 	.word	0x0801a354
 8016be0:	0801a3d0 	.word	0x0801a3d0
 8016be4:	0801a3a8 	.word	0x0801a3a8
 8016be8:	7ff00000 	.word	0x7ff00000
 8016bec:	7ca00000 	.word	0x7ca00000
 8016bf0:	fff80000 	.word	0xfff80000
 8016bf4:	7fefffff 	.word	0x7fefffff
 8016bf8:	f018 0310 	ands.w	r3, r8, #16
 8016bfc:	bf18      	it	ne
 8016bfe:	236a      	movne	r3, #106	; 0x6a
 8016c00:	4da0      	ldr	r5, [pc, #640]	; (8016e84 <_strtod_l+0x834>)
 8016c02:	9304      	str	r3, [sp, #16]
 8016c04:	4650      	mov	r0, sl
 8016c06:	4659      	mov	r1, fp
 8016c08:	2300      	movs	r3, #0
 8016c0a:	f1b8 0f00 	cmp.w	r8, #0
 8016c0e:	f300 810a 	bgt.w	8016e26 <_strtod_l+0x7d6>
 8016c12:	b10b      	cbz	r3, 8016c18 <_strtod_l+0x5c8>
 8016c14:	4682      	mov	sl, r0
 8016c16:	468b      	mov	fp, r1
 8016c18:	9b04      	ldr	r3, [sp, #16]
 8016c1a:	b1bb      	cbz	r3, 8016c4c <_strtod_l+0x5fc>
 8016c1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016c20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	4659      	mov	r1, fp
 8016c28:	dd10      	ble.n	8016c4c <_strtod_l+0x5fc>
 8016c2a:	2b1f      	cmp	r3, #31
 8016c2c:	f340 8107 	ble.w	8016e3e <_strtod_l+0x7ee>
 8016c30:	2b34      	cmp	r3, #52	; 0x34
 8016c32:	bfde      	ittt	le
 8016c34:	3b20      	suble	r3, #32
 8016c36:	f04f 32ff 	movle.w	r2, #4294967295
 8016c3a:	fa02 f303 	lslle.w	r3, r2, r3
 8016c3e:	f04f 0a00 	mov.w	sl, #0
 8016c42:	bfcc      	ite	gt
 8016c44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016c48:	ea03 0b01 	andle.w	fp, r3, r1
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	2300      	movs	r3, #0
 8016c50:	4650      	mov	r0, sl
 8016c52:	4659      	mov	r1, fp
 8016c54:	f7e9 ff50 	bl	8000af8 <__aeabi_dcmpeq>
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	d1ac      	bne.n	8016bb6 <_strtod_l+0x566>
 8016c5c:	9b07      	ldr	r3, [sp, #28]
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	9a05      	ldr	r2, [sp, #20]
 8016c62:	9908      	ldr	r1, [sp, #32]
 8016c64:	4623      	mov	r3, r4
 8016c66:	4648      	mov	r0, r9
 8016c68:	f001 fddd 	bl	8018826 <__s2b>
 8016c6c:	9007      	str	r0, [sp, #28]
 8016c6e:	2800      	cmp	r0, #0
 8016c70:	f43f af08 	beq.w	8016a84 <_strtod_l+0x434>
 8016c74:	9a06      	ldr	r2, [sp, #24]
 8016c76:	9b06      	ldr	r3, [sp, #24]
 8016c78:	2a00      	cmp	r2, #0
 8016c7a:	f1c3 0300 	rsb	r3, r3, #0
 8016c7e:	bfa8      	it	ge
 8016c80:	2300      	movge	r3, #0
 8016c82:	930e      	str	r3, [sp, #56]	; 0x38
 8016c84:	2400      	movs	r4, #0
 8016c86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016c8a:	9316      	str	r3, [sp, #88]	; 0x58
 8016c8c:	46a0      	mov	r8, r4
 8016c8e:	9b07      	ldr	r3, [sp, #28]
 8016c90:	4648      	mov	r0, r9
 8016c92:	6859      	ldr	r1, [r3, #4]
 8016c94:	f001 fd41 	bl	801871a <_Balloc>
 8016c98:	9005      	str	r0, [sp, #20]
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	f43f aef6 	beq.w	8016a8c <_strtod_l+0x43c>
 8016ca0:	9b07      	ldr	r3, [sp, #28]
 8016ca2:	691a      	ldr	r2, [r3, #16]
 8016ca4:	3202      	adds	r2, #2
 8016ca6:	f103 010c 	add.w	r1, r3, #12
 8016caa:	0092      	lsls	r2, r2, #2
 8016cac:	300c      	adds	r0, #12
 8016cae:	f001 fd29 	bl	8018704 <memcpy>
 8016cb2:	aa1e      	add	r2, sp, #120	; 0x78
 8016cb4:	a91d      	add	r1, sp, #116	; 0x74
 8016cb6:	ec4b ab10 	vmov	d0, sl, fp
 8016cba:	4648      	mov	r0, r9
 8016cbc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016cc0:	f002 f86c 	bl	8018d9c <__d2b>
 8016cc4:	901c      	str	r0, [sp, #112]	; 0x70
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	f43f aee0 	beq.w	8016a8c <_strtod_l+0x43c>
 8016ccc:	2101      	movs	r1, #1
 8016cce:	4648      	mov	r0, r9
 8016cd0:	f001 fe35 	bl	801893e <__i2b>
 8016cd4:	4680      	mov	r8, r0
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	f43f aed8 	beq.w	8016a8c <_strtod_l+0x43c>
 8016cdc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016cde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016ce0:	2e00      	cmp	r6, #0
 8016ce2:	bfab      	itete	ge
 8016ce4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016ce6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016ce8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016cea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016cec:	bfac      	ite	ge
 8016cee:	18f7      	addge	r7, r6, r3
 8016cf0:	1b9d      	sublt	r5, r3, r6
 8016cf2:	9b04      	ldr	r3, [sp, #16]
 8016cf4:	1af6      	subs	r6, r6, r3
 8016cf6:	4416      	add	r6, r2
 8016cf8:	4b63      	ldr	r3, [pc, #396]	; (8016e88 <_strtod_l+0x838>)
 8016cfa:	3e01      	subs	r6, #1
 8016cfc:	429e      	cmp	r6, r3
 8016cfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016d02:	f280 80af 	bge.w	8016e64 <_strtod_l+0x814>
 8016d06:	1b9b      	subs	r3, r3, r6
 8016d08:	2b1f      	cmp	r3, #31
 8016d0a:	eba2 0203 	sub.w	r2, r2, r3
 8016d0e:	f04f 0101 	mov.w	r1, #1
 8016d12:	f300 809b 	bgt.w	8016e4c <_strtod_l+0x7fc>
 8016d16:	fa01 f303 	lsl.w	r3, r1, r3
 8016d1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8016d20:	18be      	adds	r6, r7, r2
 8016d22:	9b04      	ldr	r3, [sp, #16]
 8016d24:	42b7      	cmp	r7, r6
 8016d26:	4415      	add	r5, r2
 8016d28:	441d      	add	r5, r3
 8016d2a:	463b      	mov	r3, r7
 8016d2c:	bfa8      	it	ge
 8016d2e:	4633      	movge	r3, r6
 8016d30:	42ab      	cmp	r3, r5
 8016d32:	bfa8      	it	ge
 8016d34:	462b      	movge	r3, r5
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	bfc2      	ittt	gt
 8016d3a:	1af6      	subgt	r6, r6, r3
 8016d3c:	1aed      	subgt	r5, r5, r3
 8016d3e:	1aff      	subgt	r7, r7, r3
 8016d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d42:	b1bb      	cbz	r3, 8016d74 <_strtod_l+0x724>
 8016d44:	4641      	mov	r1, r8
 8016d46:	461a      	mov	r2, r3
 8016d48:	4648      	mov	r0, r9
 8016d4a:	f001 fe97 	bl	8018a7c <__pow5mult>
 8016d4e:	4680      	mov	r8, r0
 8016d50:	2800      	cmp	r0, #0
 8016d52:	f43f ae9b 	beq.w	8016a8c <_strtod_l+0x43c>
 8016d56:	4601      	mov	r1, r0
 8016d58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d5a:	4648      	mov	r0, r9
 8016d5c:	f001 fdf8 	bl	8018950 <__multiply>
 8016d60:	900c      	str	r0, [sp, #48]	; 0x30
 8016d62:	2800      	cmp	r0, #0
 8016d64:	f43f ae92 	beq.w	8016a8c <_strtod_l+0x43c>
 8016d68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d6a:	4648      	mov	r0, r9
 8016d6c:	f001 fd09 	bl	8018782 <_Bfree>
 8016d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d72:	931c      	str	r3, [sp, #112]	; 0x70
 8016d74:	2e00      	cmp	r6, #0
 8016d76:	dc7a      	bgt.n	8016e6e <_strtod_l+0x81e>
 8016d78:	9b06      	ldr	r3, [sp, #24]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	dd08      	ble.n	8016d90 <_strtod_l+0x740>
 8016d7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d80:	9905      	ldr	r1, [sp, #20]
 8016d82:	4648      	mov	r0, r9
 8016d84:	f001 fe7a 	bl	8018a7c <__pow5mult>
 8016d88:	9005      	str	r0, [sp, #20]
 8016d8a:	2800      	cmp	r0, #0
 8016d8c:	f43f ae7e 	beq.w	8016a8c <_strtod_l+0x43c>
 8016d90:	2d00      	cmp	r5, #0
 8016d92:	dd08      	ble.n	8016da6 <_strtod_l+0x756>
 8016d94:	462a      	mov	r2, r5
 8016d96:	9905      	ldr	r1, [sp, #20]
 8016d98:	4648      	mov	r0, r9
 8016d9a:	f001 febd 	bl	8018b18 <__lshift>
 8016d9e:	9005      	str	r0, [sp, #20]
 8016da0:	2800      	cmp	r0, #0
 8016da2:	f43f ae73 	beq.w	8016a8c <_strtod_l+0x43c>
 8016da6:	2f00      	cmp	r7, #0
 8016da8:	dd08      	ble.n	8016dbc <_strtod_l+0x76c>
 8016daa:	4641      	mov	r1, r8
 8016dac:	463a      	mov	r2, r7
 8016dae:	4648      	mov	r0, r9
 8016db0:	f001 feb2 	bl	8018b18 <__lshift>
 8016db4:	4680      	mov	r8, r0
 8016db6:	2800      	cmp	r0, #0
 8016db8:	f43f ae68 	beq.w	8016a8c <_strtod_l+0x43c>
 8016dbc:	9a05      	ldr	r2, [sp, #20]
 8016dbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016dc0:	4648      	mov	r0, r9
 8016dc2:	f001 ff17 	bl	8018bf4 <__mdiff>
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	2800      	cmp	r0, #0
 8016dca:	f43f ae5f 	beq.w	8016a8c <_strtod_l+0x43c>
 8016dce:	68c3      	ldr	r3, [r0, #12]
 8016dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	60c3      	str	r3, [r0, #12]
 8016dd6:	4641      	mov	r1, r8
 8016dd8:	f001 fef2 	bl	8018bc0 <__mcmp>
 8016ddc:	2800      	cmp	r0, #0
 8016dde:	da55      	bge.n	8016e8c <_strtod_l+0x83c>
 8016de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016de2:	b9e3      	cbnz	r3, 8016e1e <_strtod_l+0x7ce>
 8016de4:	f1ba 0f00 	cmp.w	sl, #0
 8016de8:	d119      	bne.n	8016e1e <_strtod_l+0x7ce>
 8016dea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016dee:	b9b3      	cbnz	r3, 8016e1e <_strtod_l+0x7ce>
 8016df0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016df4:	0d1b      	lsrs	r3, r3, #20
 8016df6:	051b      	lsls	r3, r3, #20
 8016df8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016dfc:	d90f      	bls.n	8016e1e <_strtod_l+0x7ce>
 8016dfe:	6963      	ldr	r3, [r4, #20]
 8016e00:	b913      	cbnz	r3, 8016e08 <_strtod_l+0x7b8>
 8016e02:	6923      	ldr	r3, [r4, #16]
 8016e04:	2b01      	cmp	r3, #1
 8016e06:	dd0a      	ble.n	8016e1e <_strtod_l+0x7ce>
 8016e08:	4621      	mov	r1, r4
 8016e0a:	2201      	movs	r2, #1
 8016e0c:	4648      	mov	r0, r9
 8016e0e:	f001 fe83 	bl	8018b18 <__lshift>
 8016e12:	4641      	mov	r1, r8
 8016e14:	4604      	mov	r4, r0
 8016e16:	f001 fed3 	bl	8018bc0 <__mcmp>
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	dc67      	bgt.n	8016eee <_strtod_l+0x89e>
 8016e1e:	9b04      	ldr	r3, [sp, #16]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d171      	bne.n	8016f08 <_strtod_l+0x8b8>
 8016e24:	e63d      	b.n	8016aa2 <_strtod_l+0x452>
 8016e26:	f018 0f01 	tst.w	r8, #1
 8016e2a:	d004      	beq.n	8016e36 <_strtod_l+0x7e6>
 8016e2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e30:	f7e9 fbfa 	bl	8000628 <__aeabi_dmul>
 8016e34:	2301      	movs	r3, #1
 8016e36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016e3a:	3508      	adds	r5, #8
 8016e3c:	e6e5      	b.n	8016c0a <_strtod_l+0x5ba>
 8016e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8016e42:	fa02 f303 	lsl.w	r3, r2, r3
 8016e46:	ea03 0a0a 	and.w	sl, r3, sl
 8016e4a:	e6ff      	b.n	8016c4c <_strtod_l+0x5fc>
 8016e4c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016e50:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016e54:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016e58:	36e2      	adds	r6, #226	; 0xe2
 8016e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8016e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e60:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e62:	e75d      	b.n	8016d20 <_strtod_l+0x6d0>
 8016e64:	2300      	movs	r3, #0
 8016e66:	930a      	str	r3, [sp, #40]	; 0x28
 8016e68:	2301      	movs	r3, #1
 8016e6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e6c:	e758      	b.n	8016d20 <_strtod_l+0x6d0>
 8016e6e:	4632      	mov	r2, r6
 8016e70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e72:	4648      	mov	r0, r9
 8016e74:	f001 fe50 	bl	8018b18 <__lshift>
 8016e78:	901c      	str	r0, [sp, #112]	; 0x70
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	f47f af7c 	bne.w	8016d78 <_strtod_l+0x728>
 8016e80:	e604      	b.n	8016a8c <_strtod_l+0x43c>
 8016e82:	bf00      	nop
 8016e84:	0801a368 	.word	0x0801a368
 8016e88:	fffffc02 	.word	0xfffffc02
 8016e8c:	465d      	mov	r5, fp
 8016e8e:	f040 8086 	bne.w	8016f9e <_strtod_l+0x94e>
 8016e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e98:	b32a      	cbz	r2, 8016ee6 <_strtod_l+0x896>
 8016e9a:	4aaf      	ldr	r2, [pc, #700]	; (8017158 <_strtod_l+0xb08>)
 8016e9c:	4293      	cmp	r3, r2
 8016e9e:	d153      	bne.n	8016f48 <_strtod_l+0x8f8>
 8016ea0:	9b04      	ldr	r3, [sp, #16]
 8016ea2:	4650      	mov	r0, sl
 8016ea4:	b1d3      	cbz	r3, 8016edc <_strtod_l+0x88c>
 8016ea6:	4aad      	ldr	r2, [pc, #692]	; (801715c <_strtod_l+0xb0c>)
 8016ea8:	402a      	ands	r2, r5
 8016eaa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016eae:	f04f 31ff 	mov.w	r1, #4294967295
 8016eb2:	d816      	bhi.n	8016ee2 <_strtod_l+0x892>
 8016eb4:	0d12      	lsrs	r2, r2, #20
 8016eb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016eba:	fa01 f303 	lsl.w	r3, r1, r3
 8016ebe:	4298      	cmp	r0, r3
 8016ec0:	d142      	bne.n	8016f48 <_strtod_l+0x8f8>
 8016ec2:	4ba7      	ldr	r3, [pc, #668]	; (8017160 <_strtod_l+0xb10>)
 8016ec4:	429d      	cmp	r5, r3
 8016ec6:	d102      	bne.n	8016ece <_strtod_l+0x87e>
 8016ec8:	3001      	adds	r0, #1
 8016eca:	f43f addf 	beq.w	8016a8c <_strtod_l+0x43c>
 8016ece:	4ba3      	ldr	r3, [pc, #652]	; (801715c <_strtod_l+0xb0c>)
 8016ed0:	402b      	ands	r3, r5
 8016ed2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016ed6:	f04f 0a00 	mov.w	sl, #0
 8016eda:	e7a0      	b.n	8016e1e <_strtod_l+0x7ce>
 8016edc:	f04f 33ff 	mov.w	r3, #4294967295
 8016ee0:	e7ed      	b.n	8016ebe <_strtod_l+0x86e>
 8016ee2:	460b      	mov	r3, r1
 8016ee4:	e7eb      	b.n	8016ebe <_strtod_l+0x86e>
 8016ee6:	bb7b      	cbnz	r3, 8016f48 <_strtod_l+0x8f8>
 8016ee8:	f1ba 0f00 	cmp.w	sl, #0
 8016eec:	d12c      	bne.n	8016f48 <_strtod_l+0x8f8>
 8016eee:	9904      	ldr	r1, [sp, #16]
 8016ef0:	4a9a      	ldr	r2, [pc, #616]	; (801715c <_strtod_l+0xb0c>)
 8016ef2:	465b      	mov	r3, fp
 8016ef4:	b1f1      	cbz	r1, 8016f34 <_strtod_l+0x8e4>
 8016ef6:	ea02 010b 	and.w	r1, r2, fp
 8016efa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016efe:	dc19      	bgt.n	8016f34 <_strtod_l+0x8e4>
 8016f00:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016f04:	f77f ae5b 	ble.w	8016bbe <_strtod_l+0x56e>
 8016f08:	4a96      	ldr	r2, [pc, #600]	; (8017164 <_strtod_l+0xb14>)
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016f10:	4650      	mov	r0, sl
 8016f12:	4659      	mov	r1, fp
 8016f14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016f18:	f7e9 fb86 	bl	8000628 <__aeabi_dmul>
 8016f1c:	4682      	mov	sl, r0
 8016f1e:	468b      	mov	fp, r1
 8016f20:	2900      	cmp	r1, #0
 8016f22:	f47f adbe 	bne.w	8016aa2 <_strtod_l+0x452>
 8016f26:	2800      	cmp	r0, #0
 8016f28:	f47f adbb 	bne.w	8016aa2 <_strtod_l+0x452>
 8016f2c:	2322      	movs	r3, #34	; 0x22
 8016f2e:	f8c9 3000 	str.w	r3, [r9]
 8016f32:	e5b6      	b.n	8016aa2 <_strtod_l+0x452>
 8016f34:	4013      	ands	r3, r2
 8016f36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016f3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016f3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016f42:	f04f 3aff 	mov.w	sl, #4294967295
 8016f46:	e76a      	b.n	8016e1e <_strtod_l+0x7ce>
 8016f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f4a:	b193      	cbz	r3, 8016f72 <_strtod_l+0x922>
 8016f4c:	422b      	tst	r3, r5
 8016f4e:	f43f af66 	beq.w	8016e1e <_strtod_l+0x7ce>
 8016f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f54:	9a04      	ldr	r2, [sp, #16]
 8016f56:	4650      	mov	r0, sl
 8016f58:	4659      	mov	r1, fp
 8016f5a:	b173      	cbz	r3, 8016f7a <_strtod_l+0x92a>
 8016f5c:	f7ff fb5c 	bl	8016618 <sulp>
 8016f60:	4602      	mov	r2, r0
 8016f62:	460b      	mov	r3, r1
 8016f64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f68:	f7e9 f9a8 	bl	80002bc <__adddf3>
 8016f6c:	4682      	mov	sl, r0
 8016f6e:	468b      	mov	fp, r1
 8016f70:	e755      	b.n	8016e1e <_strtod_l+0x7ce>
 8016f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f74:	ea13 0f0a 	tst.w	r3, sl
 8016f78:	e7e9      	b.n	8016f4e <_strtod_l+0x8fe>
 8016f7a:	f7ff fb4d 	bl	8016618 <sulp>
 8016f7e:	4602      	mov	r2, r0
 8016f80:	460b      	mov	r3, r1
 8016f82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f86:	f7e9 f997 	bl	80002b8 <__aeabi_dsub>
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	4682      	mov	sl, r0
 8016f90:	468b      	mov	fp, r1
 8016f92:	f7e9 fdb1 	bl	8000af8 <__aeabi_dcmpeq>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	f47f ae11 	bne.w	8016bbe <_strtod_l+0x56e>
 8016f9c:	e73f      	b.n	8016e1e <_strtod_l+0x7ce>
 8016f9e:	4641      	mov	r1, r8
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	f001 ff4a 	bl	8018e3a <__ratio>
 8016fa6:	ec57 6b10 	vmov	r6, r7, d0
 8016faa:	2200      	movs	r2, #0
 8016fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016fb0:	ee10 0a10 	vmov	r0, s0
 8016fb4:	4639      	mov	r1, r7
 8016fb6:	f7e9 fdb3 	bl	8000b20 <__aeabi_dcmple>
 8016fba:	2800      	cmp	r0, #0
 8016fbc:	d077      	beq.n	80170ae <_strtod_l+0xa5e>
 8016fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d04a      	beq.n	801705a <_strtod_l+0xa0a>
 8016fc4:	4b68      	ldr	r3, [pc, #416]	; (8017168 <_strtod_l+0xb18>)
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016fcc:	4f66      	ldr	r7, [pc, #408]	; (8017168 <_strtod_l+0xb18>)
 8016fce:	2600      	movs	r6, #0
 8016fd0:	4b62      	ldr	r3, [pc, #392]	; (801715c <_strtod_l+0xb0c>)
 8016fd2:	402b      	ands	r3, r5
 8016fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fd8:	4b64      	ldr	r3, [pc, #400]	; (801716c <_strtod_l+0xb1c>)
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	f040 80ce 	bne.w	801717c <_strtod_l+0xb2c>
 8016fe0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016fe4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016fe8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016fec:	ec4b ab10 	vmov	d0, sl, fp
 8016ff0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016ff4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016ff8:	f001 fe5a 	bl	8018cb0 <__ulp>
 8016ffc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017000:	ec53 2b10 	vmov	r2, r3, d0
 8017004:	f7e9 fb10 	bl	8000628 <__aeabi_dmul>
 8017008:	4652      	mov	r2, sl
 801700a:	465b      	mov	r3, fp
 801700c:	f7e9 f956 	bl	80002bc <__adddf3>
 8017010:	460b      	mov	r3, r1
 8017012:	4952      	ldr	r1, [pc, #328]	; (801715c <_strtod_l+0xb0c>)
 8017014:	4a56      	ldr	r2, [pc, #344]	; (8017170 <_strtod_l+0xb20>)
 8017016:	4019      	ands	r1, r3
 8017018:	4291      	cmp	r1, r2
 801701a:	4682      	mov	sl, r0
 801701c:	d95b      	bls.n	80170d6 <_strtod_l+0xa86>
 801701e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017020:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017024:	4293      	cmp	r3, r2
 8017026:	d103      	bne.n	8017030 <_strtod_l+0x9e0>
 8017028:	9b08      	ldr	r3, [sp, #32]
 801702a:	3301      	adds	r3, #1
 801702c:	f43f ad2e 	beq.w	8016a8c <_strtod_l+0x43c>
 8017030:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017160 <_strtod_l+0xb10>
 8017034:	f04f 3aff 	mov.w	sl, #4294967295
 8017038:	991c      	ldr	r1, [sp, #112]	; 0x70
 801703a:	4648      	mov	r0, r9
 801703c:	f001 fba1 	bl	8018782 <_Bfree>
 8017040:	9905      	ldr	r1, [sp, #20]
 8017042:	4648      	mov	r0, r9
 8017044:	f001 fb9d 	bl	8018782 <_Bfree>
 8017048:	4641      	mov	r1, r8
 801704a:	4648      	mov	r0, r9
 801704c:	f001 fb99 	bl	8018782 <_Bfree>
 8017050:	4621      	mov	r1, r4
 8017052:	4648      	mov	r0, r9
 8017054:	f001 fb95 	bl	8018782 <_Bfree>
 8017058:	e619      	b.n	8016c8e <_strtod_l+0x63e>
 801705a:	f1ba 0f00 	cmp.w	sl, #0
 801705e:	d11a      	bne.n	8017096 <_strtod_l+0xa46>
 8017060:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017064:	b9eb      	cbnz	r3, 80170a2 <_strtod_l+0xa52>
 8017066:	2200      	movs	r2, #0
 8017068:	4b3f      	ldr	r3, [pc, #252]	; (8017168 <_strtod_l+0xb18>)
 801706a:	4630      	mov	r0, r6
 801706c:	4639      	mov	r1, r7
 801706e:	f7e9 fd4d 	bl	8000b0c <__aeabi_dcmplt>
 8017072:	b9c8      	cbnz	r0, 80170a8 <_strtod_l+0xa58>
 8017074:	4630      	mov	r0, r6
 8017076:	4639      	mov	r1, r7
 8017078:	2200      	movs	r2, #0
 801707a:	4b3e      	ldr	r3, [pc, #248]	; (8017174 <_strtod_l+0xb24>)
 801707c:	f7e9 fad4 	bl	8000628 <__aeabi_dmul>
 8017080:	4606      	mov	r6, r0
 8017082:	460f      	mov	r7, r1
 8017084:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017088:	9618      	str	r6, [sp, #96]	; 0x60
 801708a:	9319      	str	r3, [sp, #100]	; 0x64
 801708c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017090:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017094:	e79c      	b.n	8016fd0 <_strtod_l+0x980>
 8017096:	f1ba 0f01 	cmp.w	sl, #1
 801709a:	d102      	bne.n	80170a2 <_strtod_l+0xa52>
 801709c:	2d00      	cmp	r5, #0
 801709e:	f43f ad8e 	beq.w	8016bbe <_strtod_l+0x56e>
 80170a2:	2200      	movs	r2, #0
 80170a4:	4b34      	ldr	r3, [pc, #208]	; (8017178 <_strtod_l+0xb28>)
 80170a6:	e78f      	b.n	8016fc8 <_strtod_l+0x978>
 80170a8:	2600      	movs	r6, #0
 80170aa:	4f32      	ldr	r7, [pc, #200]	; (8017174 <_strtod_l+0xb24>)
 80170ac:	e7ea      	b.n	8017084 <_strtod_l+0xa34>
 80170ae:	4b31      	ldr	r3, [pc, #196]	; (8017174 <_strtod_l+0xb24>)
 80170b0:	4630      	mov	r0, r6
 80170b2:	4639      	mov	r1, r7
 80170b4:	2200      	movs	r2, #0
 80170b6:	f7e9 fab7 	bl	8000628 <__aeabi_dmul>
 80170ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170bc:	4606      	mov	r6, r0
 80170be:	460f      	mov	r7, r1
 80170c0:	b933      	cbnz	r3, 80170d0 <_strtod_l+0xa80>
 80170c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170c6:	9010      	str	r0, [sp, #64]	; 0x40
 80170c8:	9311      	str	r3, [sp, #68]	; 0x44
 80170ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80170ce:	e7df      	b.n	8017090 <_strtod_l+0xa40>
 80170d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80170d4:	e7f9      	b.n	80170ca <_strtod_l+0xa7a>
 80170d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80170da:	9b04      	ldr	r3, [sp, #16]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d1ab      	bne.n	8017038 <_strtod_l+0x9e8>
 80170e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80170e4:	0d1b      	lsrs	r3, r3, #20
 80170e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170e8:	051b      	lsls	r3, r3, #20
 80170ea:	429a      	cmp	r2, r3
 80170ec:	465d      	mov	r5, fp
 80170ee:	d1a3      	bne.n	8017038 <_strtod_l+0x9e8>
 80170f0:	4639      	mov	r1, r7
 80170f2:	4630      	mov	r0, r6
 80170f4:	f7e9 fd48 	bl	8000b88 <__aeabi_d2iz>
 80170f8:	f7e9 fa2c 	bl	8000554 <__aeabi_i2d>
 80170fc:	460b      	mov	r3, r1
 80170fe:	4602      	mov	r2, r0
 8017100:	4639      	mov	r1, r7
 8017102:	4630      	mov	r0, r6
 8017104:	f7e9 f8d8 	bl	80002b8 <__aeabi_dsub>
 8017108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801710a:	4606      	mov	r6, r0
 801710c:	460f      	mov	r7, r1
 801710e:	b933      	cbnz	r3, 801711e <_strtod_l+0xace>
 8017110:	f1ba 0f00 	cmp.w	sl, #0
 8017114:	d103      	bne.n	801711e <_strtod_l+0xace>
 8017116:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801711a:	2d00      	cmp	r5, #0
 801711c:	d06d      	beq.n	80171fa <_strtod_l+0xbaa>
 801711e:	a30a      	add	r3, pc, #40	; (adr r3, 8017148 <_strtod_l+0xaf8>)
 8017120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017124:	4630      	mov	r0, r6
 8017126:	4639      	mov	r1, r7
 8017128:	f7e9 fcf0 	bl	8000b0c <__aeabi_dcmplt>
 801712c:	2800      	cmp	r0, #0
 801712e:	f47f acb8 	bne.w	8016aa2 <_strtod_l+0x452>
 8017132:	a307      	add	r3, pc, #28	; (adr r3, 8017150 <_strtod_l+0xb00>)
 8017134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017138:	4630      	mov	r0, r6
 801713a:	4639      	mov	r1, r7
 801713c:	f7e9 fd04 	bl	8000b48 <__aeabi_dcmpgt>
 8017140:	2800      	cmp	r0, #0
 8017142:	f43f af79 	beq.w	8017038 <_strtod_l+0x9e8>
 8017146:	e4ac      	b.n	8016aa2 <_strtod_l+0x452>
 8017148:	94a03595 	.word	0x94a03595
 801714c:	3fdfffff 	.word	0x3fdfffff
 8017150:	35afe535 	.word	0x35afe535
 8017154:	3fe00000 	.word	0x3fe00000
 8017158:	000fffff 	.word	0x000fffff
 801715c:	7ff00000 	.word	0x7ff00000
 8017160:	7fefffff 	.word	0x7fefffff
 8017164:	39500000 	.word	0x39500000
 8017168:	3ff00000 	.word	0x3ff00000
 801716c:	7fe00000 	.word	0x7fe00000
 8017170:	7c9fffff 	.word	0x7c9fffff
 8017174:	3fe00000 	.word	0x3fe00000
 8017178:	bff00000 	.word	0xbff00000
 801717c:	9b04      	ldr	r3, [sp, #16]
 801717e:	b333      	cbz	r3, 80171ce <_strtod_l+0xb7e>
 8017180:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017182:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017186:	d822      	bhi.n	80171ce <_strtod_l+0xb7e>
 8017188:	a327      	add	r3, pc, #156	; (adr r3, 8017228 <_strtod_l+0xbd8>)
 801718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801718e:	4630      	mov	r0, r6
 8017190:	4639      	mov	r1, r7
 8017192:	f7e9 fcc5 	bl	8000b20 <__aeabi_dcmple>
 8017196:	b1a0      	cbz	r0, 80171c2 <_strtod_l+0xb72>
 8017198:	4639      	mov	r1, r7
 801719a:	4630      	mov	r0, r6
 801719c:	f7e9 fd1c 	bl	8000bd8 <__aeabi_d2uiz>
 80171a0:	2800      	cmp	r0, #0
 80171a2:	bf08      	it	eq
 80171a4:	2001      	moveq	r0, #1
 80171a6:	f7e9 f9c5 	bl	8000534 <__aeabi_ui2d>
 80171aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171ac:	4606      	mov	r6, r0
 80171ae:	460f      	mov	r7, r1
 80171b0:	bb03      	cbnz	r3, 80171f4 <_strtod_l+0xba4>
 80171b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171b6:	9012      	str	r0, [sp, #72]	; 0x48
 80171b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80171ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80171be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80171ca:	1a9b      	subs	r3, r3, r2
 80171cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80171ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80171d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80171d6:	f001 fd6b 	bl	8018cb0 <__ulp>
 80171da:	4650      	mov	r0, sl
 80171dc:	ec53 2b10 	vmov	r2, r3, d0
 80171e0:	4659      	mov	r1, fp
 80171e2:	f7e9 fa21 	bl	8000628 <__aeabi_dmul>
 80171e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80171ea:	f7e9 f867 	bl	80002bc <__adddf3>
 80171ee:	4682      	mov	sl, r0
 80171f0:	468b      	mov	fp, r1
 80171f2:	e772      	b.n	80170da <_strtod_l+0xa8a>
 80171f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80171f8:	e7df      	b.n	80171ba <_strtod_l+0xb6a>
 80171fa:	a30d      	add	r3, pc, #52	; (adr r3, 8017230 <_strtod_l+0xbe0>)
 80171fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017200:	f7e9 fc84 	bl	8000b0c <__aeabi_dcmplt>
 8017204:	e79c      	b.n	8017140 <_strtod_l+0xaf0>
 8017206:	2300      	movs	r3, #0
 8017208:	930d      	str	r3, [sp, #52]	; 0x34
 801720a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801720c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801720e:	6013      	str	r3, [r2, #0]
 8017210:	f7ff ba61 	b.w	80166d6 <_strtod_l+0x86>
 8017214:	2b65      	cmp	r3, #101	; 0x65
 8017216:	f04f 0200 	mov.w	r2, #0
 801721a:	f43f ab4e 	beq.w	80168ba <_strtod_l+0x26a>
 801721e:	2101      	movs	r1, #1
 8017220:	4614      	mov	r4, r2
 8017222:	9104      	str	r1, [sp, #16]
 8017224:	f7ff bacb 	b.w	80167be <_strtod_l+0x16e>
 8017228:	ffc00000 	.word	0xffc00000
 801722c:	41dfffff 	.word	0x41dfffff
 8017230:	94a03595 	.word	0x94a03595
 8017234:	3fcfffff 	.word	0x3fcfffff

08017238 <_strtod_r>:
 8017238:	4b05      	ldr	r3, [pc, #20]	; (8017250 <_strtod_r+0x18>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	b410      	push	{r4}
 801723e:	6a1b      	ldr	r3, [r3, #32]
 8017240:	4c04      	ldr	r4, [pc, #16]	; (8017254 <_strtod_r+0x1c>)
 8017242:	2b00      	cmp	r3, #0
 8017244:	bf08      	it	eq
 8017246:	4623      	moveq	r3, r4
 8017248:	f85d 4b04 	ldr.w	r4, [sp], #4
 801724c:	f7ff ba00 	b.w	8016650 <_strtod_l>
 8017250:	2000000c 	.word	0x2000000c
 8017254:	20000070 	.word	0x20000070

08017258 <_strtol_l.isra.0>:
 8017258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801725c:	4680      	mov	r8, r0
 801725e:	4689      	mov	r9, r1
 8017260:	4692      	mov	sl, r2
 8017262:	461e      	mov	r6, r3
 8017264:	460f      	mov	r7, r1
 8017266:	463d      	mov	r5, r7
 8017268:	9808      	ldr	r0, [sp, #32]
 801726a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801726e:	f001 fa0d 	bl	801868c <__locale_ctype_ptr_l>
 8017272:	4420      	add	r0, r4
 8017274:	7843      	ldrb	r3, [r0, #1]
 8017276:	f013 0308 	ands.w	r3, r3, #8
 801727a:	d132      	bne.n	80172e2 <_strtol_l.isra.0+0x8a>
 801727c:	2c2d      	cmp	r4, #45	; 0x2d
 801727e:	d132      	bne.n	80172e6 <_strtol_l.isra.0+0x8e>
 8017280:	787c      	ldrb	r4, [r7, #1]
 8017282:	1cbd      	adds	r5, r7, #2
 8017284:	2201      	movs	r2, #1
 8017286:	2e00      	cmp	r6, #0
 8017288:	d05d      	beq.n	8017346 <_strtol_l.isra.0+0xee>
 801728a:	2e10      	cmp	r6, #16
 801728c:	d109      	bne.n	80172a2 <_strtol_l.isra.0+0x4a>
 801728e:	2c30      	cmp	r4, #48	; 0x30
 8017290:	d107      	bne.n	80172a2 <_strtol_l.isra.0+0x4a>
 8017292:	782b      	ldrb	r3, [r5, #0]
 8017294:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017298:	2b58      	cmp	r3, #88	; 0x58
 801729a:	d14f      	bne.n	801733c <_strtol_l.isra.0+0xe4>
 801729c:	786c      	ldrb	r4, [r5, #1]
 801729e:	2610      	movs	r6, #16
 80172a0:	3502      	adds	r5, #2
 80172a2:	2a00      	cmp	r2, #0
 80172a4:	bf14      	ite	ne
 80172a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80172aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80172ae:	2700      	movs	r7, #0
 80172b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80172b4:	4638      	mov	r0, r7
 80172b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80172ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80172be:	2b09      	cmp	r3, #9
 80172c0:	d817      	bhi.n	80172f2 <_strtol_l.isra.0+0x9a>
 80172c2:	461c      	mov	r4, r3
 80172c4:	42a6      	cmp	r6, r4
 80172c6:	dd23      	ble.n	8017310 <_strtol_l.isra.0+0xb8>
 80172c8:	1c7b      	adds	r3, r7, #1
 80172ca:	d007      	beq.n	80172dc <_strtol_l.isra.0+0x84>
 80172cc:	4584      	cmp	ip, r0
 80172ce:	d31c      	bcc.n	801730a <_strtol_l.isra.0+0xb2>
 80172d0:	d101      	bne.n	80172d6 <_strtol_l.isra.0+0x7e>
 80172d2:	45a6      	cmp	lr, r4
 80172d4:	db19      	blt.n	801730a <_strtol_l.isra.0+0xb2>
 80172d6:	fb00 4006 	mla	r0, r0, r6, r4
 80172da:	2701      	movs	r7, #1
 80172dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172e0:	e7eb      	b.n	80172ba <_strtol_l.isra.0+0x62>
 80172e2:	462f      	mov	r7, r5
 80172e4:	e7bf      	b.n	8017266 <_strtol_l.isra.0+0xe>
 80172e6:	2c2b      	cmp	r4, #43	; 0x2b
 80172e8:	bf04      	itt	eq
 80172ea:	1cbd      	addeq	r5, r7, #2
 80172ec:	787c      	ldrbeq	r4, [r7, #1]
 80172ee:	461a      	mov	r2, r3
 80172f0:	e7c9      	b.n	8017286 <_strtol_l.isra.0+0x2e>
 80172f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80172f6:	2b19      	cmp	r3, #25
 80172f8:	d801      	bhi.n	80172fe <_strtol_l.isra.0+0xa6>
 80172fa:	3c37      	subs	r4, #55	; 0x37
 80172fc:	e7e2      	b.n	80172c4 <_strtol_l.isra.0+0x6c>
 80172fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017302:	2b19      	cmp	r3, #25
 8017304:	d804      	bhi.n	8017310 <_strtol_l.isra.0+0xb8>
 8017306:	3c57      	subs	r4, #87	; 0x57
 8017308:	e7dc      	b.n	80172c4 <_strtol_l.isra.0+0x6c>
 801730a:	f04f 37ff 	mov.w	r7, #4294967295
 801730e:	e7e5      	b.n	80172dc <_strtol_l.isra.0+0x84>
 8017310:	1c7b      	adds	r3, r7, #1
 8017312:	d108      	bne.n	8017326 <_strtol_l.isra.0+0xce>
 8017314:	2322      	movs	r3, #34	; 0x22
 8017316:	f8c8 3000 	str.w	r3, [r8]
 801731a:	4608      	mov	r0, r1
 801731c:	f1ba 0f00 	cmp.w	sl, #0
 8017320:	d107      	bne.n	8017332 <_strtol_l.isra.0+0xda>
 8017322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017326:	b102      	cbz	r2, 801732a <_strtol_l.isra.0+0xd2>
 8017328:	4240      	negs	r0, r0
 801732a:	f1ba 0f00 	cmp.w	sl, #0
 801732e:	d0f8      	beq.n	8017322 <_strtol_l.isra.0+0xca>
 8017330:	b10f      	cbz	r7, 8017336 <_strtol_l.isra.0+0xde>
 8017332:	f105 39ff 	add.w	r9, r5, #4294967295
 8017336:	f8ca 9000 	str.w	r9, [sl]
 801733a:	e7f2      	b.n	8017322 <_strtol_l.isra.0+0xca>
 801733c:	2430      	movs	r4, #48	; 0x30
 801733e:	2e00      	cmp	r6, #0
 8017340:	d1af      	bne.n	80172a2 <_strtol_l.isra.0+0x4a>
 8017342:	2608      	movs	r6, #8
 8017344:	e7ad      	b.n	80172a2 <_strtol_l.isra.0+0x4a>
 8017346:	2c30      	cmp	r4, #48	; 0x30
 8017348:	d0a3      	beq.n	8017292 <_strtol_l.isra.0+0x3a>
 801734a:	260a      	movs	r6, #10
 801734c:	e7a9      	b.n	80172a2 <_strtol_l.isra.0+0x4a>
	...

08017350 <_strtol_r>:
 8017350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017352:	4c06      	ldr	r4, [pc, #24]	; (801736c <_strtol_r+0x1c>)
 8017354:	4d06      	ldr	r5, [pc, #24]	; (8017370 <_strtol_r+0x20>)
 8017356:	6824      	ldr	r4, [r4, #0]
 8017358:	6a24      	ldr	r4, [r4, #32]
 801735a:	2c00      	cmp	r4, #0
 801735c:	bf08      	it	eq
 801735e:	462c      	moveq	r4, r5
 8017360:	9400      	str	r4, [sp, #0]
 8017362:	f7ff ff79 	bl	8017258 <_strtol_l.isra.0>
 8017366:	b003      	add	sp, #12
 8017368:	bd30      	pop	{r4, r5, pc}
 801736a:	bf00      	nop
 801736c:	2000000c 	.word	0x2000000c
 8017370:	20000070 	.word	0x20000070

08017374 <_vsiprintf_r>:
 8017374:	b500      	push	{lr}
 8017376:	b09b      	sub	sp, #108	; 0x6c
 8017378:	9100      	str	r1, [sp, #0]
 801737a:	9104      	str	r1, [sp, #16]
 801737c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017380:	9105      	str	r1, [sp, #20]
 8017382:	9102      	str	r1, [sp, #8]
 8017384:	4905      	ldr	r1, [pc, #20]	; (801739c <_vsiprintf_r+0x28>)
 8017386:	9103      	str	r1, [sp, #12]
 8017388:	4669      	mov	r1, sp
 801738a:	f001 fed5 	bl	8019138 <_svfiprintf_r>
 801738e:	9b00      	ldr	r3, [sp, #0]
 8017390:	2200      	movs	r2, #0
 8017392:	701a      	strb	r2, [r3, #0]
 8017394:	b01b      	add	sp, #108	; 0x6c
 8017396:	f85d fb04 	ldr.w	pc, [sp], #4
 801739a:	bf00      	nop
 801739c:	ffff0208 	.word	0xffff0208

080173a0 <vsiprintf>:
 80173a0:	4613      	mov	r3, r2
 80173a2:	460a      	mov	r2, r1
 80173a4:	4601      	mov	r1, r0
 80173a6:	4802      	ldr	r0, [pc, #8]	; (80173b0 <vsiprintf+0x10>)
 80173a8:	6800      	ldr	r0, [r0, #0]
 80173aa:	f7ff bfe3 	b.w	8017374 <_vsiprintf_r>
 80173ae:	bf00      	nop
 80173b0:	2000000c 	.word	0x2000000c

080173b4 <quorem>:
 80173b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b8:	6903      	ldr	r3, [r0, #16]
 80173ba:	690c      	ldr	r4, [r1, #16]
 80173bc:	42a3      	cmp	r3, r4
 80173be:	4680      	mov	r8, r0
 80173c0:	f2c0 8082 	blt.w	80174c8 <quorem+0x114>
 80173c4:	3c01      	subs	r4, #1
 80173c6:	f101 0714 	add.w	r7, r1, #20
 80173ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80173ce:	f100 0614 	add.w	r6, r0, #20
 80173d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80173d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80173da:	eb06 030c 	add.w	r3, r6, ip
 80173de:	3501      	adds	r5, #1
 80173e0:	eb07 090c 	add.w	r9, r7, ip
 80173e4:	9301      	str	r3, [sp, #4]
 80173e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80173ea:	b395      	cbz	r5, 8017452 <quorem+0x9e>
 80173ec:	f04f 0a00 	mov.w	sl, #0
 80173f0:	4638      	mov	r0, r7
 80173f2:	46b6      	mov	lr, r6
 80173f4:	46d3      	mov	fp, sl
 80173f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80173fa:	b293      	uxth	r3, r2
 80173fc:	fb05 a303 	mla	r3, r5, r3, sl
 8017400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017404:	b29b      	uxth	r3, r3
 8017406:	ebab 0303 	sub.w	r3, fp, r3
 801740a:	0c12      	lsrs	r2, r2, #16
 801740c:	f8de b000 	ldr.w	fp, [lr]
 8017410:	fb05 a202 	mla	r2, r5, r2, sl
 8017414:	fa13 f38b 	uxtah	r3, r3, fp
 8017418:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801741c:	fa1f fb82 	uxth.w	fp, r2
 8017420:	f8de 2000 	ldr.w	r2, [lr]
 8017424:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801742c:	b29b      	uxth	r3, r3
 801742e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017432:	4581      	cmp	r9, r0
 8017434:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017438:	f84e 3b04 	str.w	r3, [lr], #4
 801743c:	d2db      	bcs.n	80173f6 <quorem+0x42>
 801743e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017442:	b933      	cbnz	r3, 8017452 <quorem+0x9e>
 8017444:	9b01      	ldr	r3, [sp, #4]
 8017446:	3b04      	subs	r3, #4
 8017448:	429e      	cmp	r6, r3
 801744a:	461a      	mov	r2, r3
 801744c:	d330      	bcc.n	80174b0 <quorem+0xfc>
 801744e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017452:	4640      	mov	r0, r8
 8017454:	f001 fbb4 	bl	8018bc0 <__mcmp>
 8017458:	2800      	cmp	r0, #0
 801745a:	db25      	blt.n	80174a8 <quorem+0xf4>
 801745c:	3501      	adds	r5, #1
 801745e:	4630      	mov	r0, r6
 8017460:	f04f 0c00 	mov.w	ip, #0
 8017464:	f857 2b04 	ldr.w	r2, [r7], #4
 8017468:	f8d0 e000 	ldr.w	lr, [r0]
 801746c:	b293      	uxth	r3, r2
 801746e:	ebac 0303 	sub.w	r3, ip, r3
 8017472:	0c12      	lsrs	r2, r2, #16
 8017474:	fa13 f38e 	uxtah	r3, r3, lr
 8017478:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801747c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017480:	b29b      	uxth	r3, r3
 8017482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017486:	45b9      	cmp	r9, r7
 8017488:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801748c:	f840 3b04 	str.w	r3, [r0], #4
 8017490:	d2e8      	bcs.n	8017464 <quorem+0xb0>
 8017492:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017496:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801749a:	b92a      	cbnz	r2, 80174a8 <quorem+0xf4>
 801749c:	3b04      	subs	r3, #4
 801749e:	429e      	cmp	r6, r3
 80174a0:	461a      	mov	r2, r3
 80174a2:	d30b      	bcc.n	80174bc <quorem+0x108>
 80174a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80174a8:	4628      	mov	r0, r5
 80174aa:	b003      	add	sp, #12
 80174ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b0:	6812      	ldr	r2, [r2, #0]
 80174b2:	3b04      	subs	r3, #4
 80174b4:	2a00      	cmp	r2, #0
 80174b6:	d1ca      	bne.n	801744e <quorem+0x9a>
 80174b8:	3c01      	subs	r4, #1
 80174ba:	e7c5      	b.n	8017448 <quorem+0x94>
 80174bc:	6812      	ldr	r2, [r2, #0]
 80174be:	3b04      	subs	r3, #4
 80174c0:	2a00      	cmp	r2, #0
 80174c2:	d1ef      	bne.n	80174a4 <quorem+0xf0>
 80174c4:	3c01      	subs	r4, #1
 80174c6:	e7ea      	b.n	801749e <quorem+0xea>
 80174c8:	2000      	movs	r0, #0
 80174ca:	e7ee      	b.n	80174aa <quorem+0xf6>
 80174cc:	0000      	movs	r0, r0
	...

080174d0 <_dtoa_r>:
 80174d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174d4:	ec57 6b10 	vmov	r6, r7, d0
 80174d8:	b097      	sub	sp, #92	; 0x5c
 80174da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80174dc:	9106      	str	r1, [sp, #24]
 80174de:	4604      	mov	r4, r0
 80174e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80174e2:	9312      	str	r3, [sp, #72]	; 0x48
 80174e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80174e8:	e9cd 6700 	strd	r6, r7, [sp]
 80174ec:	b93d      	cbnz	r5, 80174fe <_dtoa_r+0x2e>
 80174ee:	2010      	movs	r0, #16
 80174f0:	f001 f8ee 	bl	80186d0 <malloc>
 80174f4:	6260      	str	r0, [r4, #36]	; 0x24
 80174f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80174fa:	6005      	str	r5, [r0, #0]
 80174fc:	60c5      	str	r5, [r0, #12]
 80174fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017500:	6819      	ldr	r1, [r3, #0]
 8017502:	b151      	cbz	r1, 801751a <_dtoa_r+0x4a>
 8017504:	685a      	ldr	r2, [r3, #4]
 8017506:	604a      	str	r2, [r1, #4]
 8017508:	2301      	movs	r3, #1
 801750a:	4093      	lsls	r3, r2
 801750c:	608b      	str	r3, [r1, #8]
 801750e:	4620      	mov	r0, r4
 8017510:	f001 f937 	bl	8018782 <_Bfree>
 8017514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017516:	2200      	movs	r2, #0
 8017518:	601a      	str	r2, [r3, #0]
 801751a:	1e3b      	subs	r3, r7, #0
 801751c:	bfbb      	ittet	lt
 801751e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017522:	9301      	strlt	r3, [sp, #4]
 8017524:	2300      	movge	r3, #0
 8017526:	2201      	movlt	r2, #1
 8017528:	bfac      	ite	ge
 801752a:	f8c8 3000 	strge.w	r3, [r8]
 801752e:	f8c8 2000 	strlt.w	r2, [r8]
 8017532:	4baf      	ldr	r3, [pc, #700]	; (80177f0 <_dtoa_r+0x320>)
 8017534:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017538:	ea33 0308 	bics.w	r3, r3, r8
 801753c:	d114      	bne.n	8017568 <_dtoa_r+0x98>
 801753e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017540:	f242 730f 	movw	r3, #9999	; 0x270f
 8017544:	6013      	str	r3, [r2, #0]
 8017546:	9b00      	ldr	r3, [sp, #0]
 8017548:	b923      	cbnz	r3, 8017554 <_dtoa_r+0x84>
 801754a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801754e:	2800      	cmp	r0, #0
 8017550:	f000 8542 	beq.w	8017fd8 <_dtoa_r+0xb08>
 8017554:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017556:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017804 <_dtoa_r+0x334>
 801755a:	2b00      	cmp	r3, #0
 801755c:	f000 8544 	beq.w	8017fe8 <_dtoa_r+0xb18>
 8017560:	f10b 0303 	add.w	r3, fp, #3
 8017564:	f000 bd3e 	b.w	8017fe4 <_dtoa_r+0xb14>
 8017568:	e9dd 6700 	ldrd	r6, r7, [sp]
 801756c:	2200      	movs	r2, #0
 801756e:	2300      	movs	r3, #0
 8017570:	4630      	mov	r0, r6
 8017572:	4639      	mov	r1, r7
 8017574:	f7e9 fac0 	bl	8000af8 <__aeabi_dcmpeq>
 8017578:	4681      	mov	r9, r0
 801757a:	b168      	cbz	r0, 8017598 <_dtoa_r+0xc8>
 801757c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801757e:	2301      	movs	r3, #1
 8017580:	6013      	str	r3, [r2, #0]
 8017582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017584:	2b00      	cmp	r3, #0
 8017586:	f000 8524 	beq.w	8017fd2 <_dtoa_r+0xb02>
 801758a:	4b9a      	ldr	r3, [pc, #616]	; (80177f4 <_dtoa_r+0x324>)
 801758c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801758e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017592:	6013      	str	r3, [r2, #0]
 8017594:	f000 bd28 	b.w	8017fe8 <_dtoa_r+0xb18>
 8017598:	aa14      	add	r2, sp, #80	; 0x50
 801759a:	a915      	add	r1, sp, #84	; 0x54
 801759c:	ec47 6b10 	vmov	d0, r6, r7
 80175a0:	4620      	mov	r0, r4
 80175a2:	f001 fbfb 	bl	8018d9c <__d2b>
 80175a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80175aa:	9004      	str	r0, [sp, #16]
 80175ac:	2d00      	cmp	r5, #0
 80175ae:	d07c      	beq.n	80176aa <_dtoa_r+0x1da>
 80175b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80175b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80175b8:	46b2      	mov	sl, r6
 80175ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80175be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80175c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80175c6:	2200      	movs	r2, #0
 80175c8:	4b8b      	ldr	r3, [pc, #556]	; (80177f8 <_dtoa_r+0x328>)
 80175ca:	4650      	mov	r0, sl
 80175cc:	4659      	mov	r1, fp
 80175ce:	f7e8 fe73 	bl	80002b8 <__aeabi_dsub>
 80175d2:	a381      	add	r3, pc, #516	; (adr r3, 80177d8 <_dtoa_r+0x308>)
 80175d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d8:	f7e9 f826 	bl	8000628 <__aeabi_dmul>
 80175dc:	a380      	add	r3, pc, #512	; (adr r3, 80177e0 <_dtoa_r+0x310>)
 80175de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e2:	f7e8 fe6b 	bl	80002bc <__adddf3>
 80175e6:	4606      	mov	r6, r0
 80175e8:	4628      	mov	r0, r5
 80175ea:	460f      	mov	r7, r1
 80175ec:	f7e8 ffb2 	bl	8000554 <__aeabi_i2d>
 80175f0:	a37d      	add	r3, pc, #500	; (adr r3, 80177e8 <_dtoa_r+0x318>)
 80175f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f6:	f7e9 f817 	bl	8000628 <__aeabi_dmul>
 80175fa:	4602      	mov	r2, r0
 80175fc:	460b      	mov	r3, r1
 80175fe:	4630      	mov	r0, r6
 8017600:	4639      	mov	r1, r7
 8017602:	f7e8 fe5b 	bl	80002bc <__adddf3>
 8017606:	4606      	mov	r6, r0
 8017608:	460f      	mov	r7, r1
 801760a:	f7e9 fabd 	bl	8000b88 <__aeabi_d2iz>
 801760e:	2200      	movs	r2, #0
 8017610:	4682      	mov	sl, r0
 8017612:	2300      	movs	r3, #0
 8017614:	4630      	mov	r0, r6
 8017616:	4639      	mov	r1, r7
 8017618:	f7e9 fa78 	bl	8000b0c <__aeabi_dcmplt>
 801761c:	b148      	cbz	r0, 8017632 <_dtoa_r+0x162>
 801761e:	4650      	mov	r0, sl
 8017620:	f7e8 ff98 	bl	8000554 <__aeabi_i2d>
 8017624:	4632      	mov	r2, r6
 8017626:	463b      	mov	r3, r7
 8017628:	f7e9 fa66 	bl	8000af8 <__aeabi_dcmpeq>
 801762c:	b908      	cbnz	r0, 8017632 <_dtoa_r+0x162>
 801762e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017632:	f1ba 0f16 	cmp.w	sl, #22
 8017636:	d859      	bhi.n	80176ec <_dtoa_r+0x21c>
 8017638:	4970      	ldr	r1, [pc, #448]	; (80177fc <_dtoa_r+0x32c>)
 801763a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801763e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017646:	f7e9 fa7f 	bl	8000b48 <__aeabi_dcmpgt>
 801764a:	2800      	cmp	r0, #0
 801764c:	d050      	beq.n	80176f0 <_dtoa_r+0x220>
 801764e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017652:	2300      	movs	r3, #0
 8017654:	930f      	str	r3, [sp, #60]	; 0x3c
 8017656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017658:	1b5d      	subs	r5, r3, r5
 801765a:	f1b5 0801 	subs.w	r8, r5, #1
 801765e:	bf49      	itett	mi
 8017660:	f1c5 0301 	rsbmi	r3, r5, #1
 8017664:	2300      	movpl	r3, #0
 8017666:	9305      	strmi	r3, [sp, #20]
 8017668:	f04f 0800 	movmi.w	r8, #0
 801766c:	bf58      	it	pl
 801766e:	9305      	strpl	r3, [sp, #20]
 8017670:	f1ba 0f00 	cmp.w	sl, #0
 8017674:	db3e      	blt.n	80176f4 <_dtoa_r+0x224>
 8017676:	2300      	movs	r3, #0
 8017678:	44d0      	add	r8, sl
 801767a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801767e:	9307      	str	r3, [sp, #28]
 8017680:	9b06      	ldr	r3, [sp, #24]
 8017682:	2b09      	cmp	r3, #9
 8017684:	f200 8090 	bhi.w	80177a8 <_dtoa_r+0x2d8>
 8017688:	2b05      	cmp	r3, #5
 801768a:	bfc4      	itt	gt
 801768c:	3b04      	subgt	r3, #4
 801768e:	9306      	strgt	r3, [sp, #24]
 8017690:	9b06      	ldr	r3, [sp, #24]
 8017692:	f1a3 0302 	sub.w	r3, r3, #2
 8017696:	bfcc      	ite	gt
 8017698:	2500      	movgt	r5, #0
 801769a:	2501      	movle	r5, #1
 801769c:	2b03      	cmp	r3, #3
 801769e:	f200 808f 	bhi.w	80177c0 <_dtoa_r+0x2f0>
 80176a2:	e8df f003 	tbb	[pc, r3]
 80176a6:	7f7d      	.short	0x7f7d
 80176a8:	7131      	.short	0x7131
 80176aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80176ae:	441d      	add	r5, r3
 80176b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80176b4:	2820      	cmp	r0, #32
 80176b6:	dd13      	ble.n	80176e0 <_dtoa_r+0x210>
 80176b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80176bc:	9b00      	ldr	r3, [sp, #0]
 80176be:	fa08 f800 	lsl.w	r8, r8, r0
 80176c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80176c6:	fa23 f000 	lsr.w	r0, r3, r0
 80176ca:	ea48 0000 	orr.w	r0, r8, r0
 80176ce:	f7e8 ff31 	bl	8000534 <__aeabi_ui2d>
 80176d2:	2301      	movs	r3, #1
 80176d4:	4682      	mov	sl, r0
 80176d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80176da:	3d01      	subs	r5, #1
 80176dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80176de:	e772      	b.n	80175c6 <_dtoa_r+0xf6>
 80176e0:	9b00      	ldr	r3, [sp, #0]
 80176e2:	f1c0 0020 	rsb	r0, r0, #32
 80176e6:	fa03 f000 	lsl.w	r0, r3, r0
 80176ea:	e7f0      	b.n	80176ce <_dtoa_r+0x1fe>
 80176ec:	2301      	movs	r3, #1
 80176ee:	e7b1      	b.n	8017654 <_dtoa_r+0x184>
 80176f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80176f2:	e7b0      	b.n	8017656 <_dtoa_r+0x186>
 80176f4:	9b05      	ldr	r3, [sp, #20]
 80176f6:	eba3 030a 	sub.w	r3, r3, sl
 80176fa:	9305      	str	r3, [sp, #20]
 80176fc:	f1ca 0300 	rsb	r3, sl, #0
 8017700:	9307      	str	r3, [sp, #28]
 8017702:	2300      	movs	r3, #0
 8017704:	930e      	str	r3, [sp, #56]	; 0x38
 8017706:	e7bb      	b.n	8017680 <_dtoa_r+0x1b0>
 8017708:	2301      	movs	r3, #1
 801770a:	930a      	str	r3, [sp, #40]	; 0x28
 801770c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801770e:	2b00      	cmp	r3, #0
 8017710:	dd59      	ble.n	80177c6 <_dtoa_r+0x2f6>
 8017712:	9302      	str	r3, [sp, #8]
 8017714:	4699      	mov	r9, r3
 8017716:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017718:	2200      	movs	r2, #0
 801771a:	6072      	str	r2, [r6, #4]
 801771c:	2204      	movs	r2, #4
 801771e:	f102 0014 	add.w	r0, r2, #20
 8017722:	4298      	cmp	r0, r3
 8017724:	6871      	ldr	r1, [r6, #4]
 8017726:	d953      	bls.n	80177d0 <_dtoa_r+0x300>
 8017728:	4620      	mov	r0, r4
 801772a:	f000 fff6 	bl	801871a <_Balloc>
 801772e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017730:	6030      	str	r0, [r6, #0]
 8017732:	f1b9 0f0e 	cmp.w	r9, #14
 8017736:	f8d3 b000 	ldr.w	fp, [r3]
 801773a:	f200 80e6 	bhi.w	801790a <_dtoa_r+0x43a>
 801773e:	2d00      	cmp	r5, #0
 8017740:	f000 80e3 	beq.w	801790a <_dtoa_r+0x43a>
 8017744:	ed9d 7b00 	vldr	d7, [sp]
 8017748:	f1ba 0f00 	cmp.w	sl, #0
 801774c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017750:	dd74      	ble.n	801783c <_dtoa_r+0x36c>
 8017752:	4a2a      	ldr	r2, [pc, #168]	; (80177fc <_dtoa_r+0x32c>)
 8017754:	f00a 030f 	and.w	r3, sl, #15
 8017758:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801775c:	ed93 7b00 	vldr	d7, [r3]
 8017760:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017764:	06f0      	lsls	r0, r6, #27
 8017766:	ed8d 7b08 	vstr	d7, [sp, #32]
 801776a:	d565      	bpl.n	8017838 <_dtoa_r+0x368>
 801776c:	4b24      	ldr	r3, [pc, #144]	; (8017800 <_dtoa_r+0x330>)
 801776e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017772:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017776:	f7e9 f881 	bl	800087c <__aeabi_ddiv>
 801777a:	e9cd 0100 	strd	r0, r1, [sp]
 801777e:	f006 060f 	and.w	r6, r6, #15
 8017782:	2503      	movs	r5, #3
 8017784:	4f1e      	ldr	r7, [pc, #120]	; (8017800 <_dtoa_r+0x330>)
 8017786:	e04c      	b.n	8017822 <_dtoa_r+0x352>
 8017788:	2301      	movs	r3, #1
 801778a:	930a      	str	r3, [sp, #40]	; 0x28
 801778c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801778e:	4453      	add	r3, sl
 8017790:	f103 0901 	add.w	r9, r3, #1
 8017794:	9302      	str	r3, [sp, #8]
 8017796:	464b      	mov	r3, r9
 8017798:	2b01      	cmp	r3, #1
 801779a:	bfb8      	it	lt
 801779c:	2301      	movlt	r3, #1
 801779e:	e7ba      	b.n	8017716 <_dtoa_r+0x246>
 80177a0:	2300      	movs	r3, #0
 80177a2:	e7b2      	b.n	801770a <_dtoa_r+0x23a>
 80177a4:	2300      	movs	r3, #0
 80177a6:	e7f0      	b.n	801778a <_dtoa_r+0x2ba>
 80177a8:	2501      	movs	r5, #1
 80177aa:	2300      	movs	r3, #0
 80177ac:	9306      	str	r3, [sp, #24]
 80177ae:	950a      	str	r5, [sp, #40]	; 0x28
 80177b0:	f04f 33ff 	mov.w	r3, #4294967295
 80177b4:	9302      	str	r3, [sp, #8]
 80177b6:	4699      	mov	r9, r3
 80177b8:	2200      	movs	r2, #0
 80177ba:	2312      	movs	r3, #18
 80177bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80177be:	e7aa      	b.n	8017716 <_dtoa_r+0x246>
 80177c0:	2301      	movs	r3, #1
 80177c2:	930a      	str	r3, [sp, #40]	; 0x28
 80177c4:	e7f4      	b.n	80177b0 <_dtoa_r+0x2e0>
 80177c6:	2301      	movs	r3, #1
 80177c8:	9302      	str	r3, [sp, #8]
 80177ca:	4699      	mov	r9, r3
 80177cc:	461a      	mov	r2, r3
 80177ce:	e7f5      	b.n	80177bc <_dtoa_r+0x2ec>
 80177d0:	3101      	adds	r1, #1
 80177d2:	6071      	str	r1, [r6, #4]
 80177d4:	0052      	lsls	r2, r2, #1
 80177d6:	e7a2      	b.n	801771e <_dtoa_r+0x24e>
 80177d8:	636f4361 	.word	0x636f4361
 80177dc:	3fd287a7 	.word	0x3fd287a7
 80177e0:	8b60c8b3 	.word	0x8b60c8b3
 80177e4:	3fc68a28 	.word	0x3fc68a28
 80177e8:	509f79fb 	.word	0x509f79fb
 80177ec:	3fd34413 	.word	0x3fd34413
 80177f0:	7ff00000 	.word	0x7ff00000
 80177f4:	0801a4cc 	.word	0x0801a4cc
 80177f8:	3ff80000 	.word	0x3ff80000
 80177fc:	0801a3d0 	.word	0x0801a3d0
 8017800:	0801a3a8 	.word	0x0801a3a8
 8017804:	0801a399 	.word	0x0801a399
 8017808:	07f1      	lsls	r1, r6, #31
 801780a:	d508      	bpl.n	801781e <_dtoa_r+0x34e>
 801780c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017814:	f7e8 ff08 	bl	8000628 <__aeabi_dmul>
 8017818:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801781c:	3501      	adds	r5, #1
 801781e:	1076      	asrs	r6, r6, #1
 8017820:	3708      	adds	r7, #8
 8017822:	2e00      	cmp	r6, #0
 8017824:	d1f0      	bne.n	8017808 <_dtoa_r+0x338>
 8017826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801782a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801782e:	f7e9 f825 	bl	800087c <__aeabi_ddiv>
 8017832:	e9cd 0100 	strd	r0, r1, [sp]
 8017836:	e01a      	b.n	801786e <_dtoa_r+0x39e>
 8017838:	2502      	movs	r5, #2
 801783a:	e7a3      	b.n	8017784 <_dtoa_r+0x2b4>
 801783c:	f000 80a0 	beq.w	8017980 <_dtoa_r+0x4b0>
 8017840:	f1ca 0600 	rsb	r6, sl, #0
 8017844:	4b9f      	ldr	r3, [pc, #636]	; (8017ac4 <_dtoa_r+0x5f4>)
 8017846:	4fa0      	ldr	r7, [pc, #640]	; (8017ac8 <_dtoa_r+0x5f8>)
 8017848:	f006 020f 	and.w	r2, r6, #15
 801784c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017854:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017858:	f7e8 fee6 	bl	8000628 <__aeabi_dmul>
 801785c:	e9cd 0100 	strd	r0, r1, [sp]
 8017860:	1136      	asrs	r6, r6, #4
 8017862:	2300      	movs	r3, #0
 8017864:	2502      	movs	r5, #2
 8017866:	2e00      	cmp	r6, #0
 8017868:	d17f      	bne.n	801796a <_dtoa_r+0x49a>
 801786a:	2b00      	cmp	r3, #0
 801786c:	d1e1      	bne.n	8017832 <_dtoa_r+0x362>
 801786e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017870:	2b00      	cmp	r3, #0
 8017872:	f000 8087 	beq.w	8017984 <_dtoa_r+0x4b4>
 8017876:	e9dd 6700 	ldrd	r6, r7, [sp]
 801787a:	2200      	movs	r2, #0
 801787c:	4b93      	ldr	r3, [pc, #588]	; (8017acc <_dtoa_r+0x5fc>)
 801787e:	4630      	mov	r0, r6
 8017880:	4639      	mov	r1, r7
 8017882:	f7e9 f943 	bl	8000b0c <__aeabi_dcmplt>
 8017886:	2800      	cmp	r0, #0
 8017888:	d07c      	beq.n	8017984 <_dtoa_r+0x4b4>
 801788a:	f1b9 0f00 	cmp.w	r9, #0
 801788e:	d079      	beq.n	8017984 <_dtoa_r+0x4b4>
 8017890:	9b02      	ldr	r3, [sp, #8]
 8017892:	2b00      	cmp	r3, #0
 8017894:	dd35      	ble.n	8017902 <_dtoa_r+0x432>
 8017896:	f10a 33ff 	add.w	r3, sl, #4294967295
 801789a:	9308      	str	r3, [sp, #32]
 801789c:	4639      	mov	r1, r7
 801789e:	2200      	movs	r2, #0
 80178a0:	4b8b      	ldr	r3, [pc, #556]	; (8017ad0 <_dtoa_r+0x600>)
 80178a2:	4630      	mov	r0, r6
 80178a4:	f7e8 fec0 	bl	8000628 <__aeabi_dmul>
 80178a8:	e9cd 0100 	strd	r0, r1, [sp]
 80178ac:	9f02      	ldr	r7, [sp, #8]
 80178ae:	3501      	adds	r5, #1
 80178b0:	4628      	mov	r0, r5
 80178b2:	f7e8 fe4f 	bl	8000554 <__aeabi_i2d>
 80178b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178ba:	f7e8 feb5 	bl	8000628 <__aeabi_dmul>
 80178be:	2200      	movs	r2, #0
 80178c0:	4b84      	ldr	r3, [pc, #528]	; (8017ad4 <_dtoa_r+0x604>)
 80178c2:	f7e8 fcfb 	bl	80002bc <__adddf3>
 80178c6:	4605      	mov	r5, r0
 80178c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80178cc:	2f00      	cmp	r7, #0
 80178ce:	d15d      	bne.n	801798c <_dtoa_r+0x4bc>
 80178d0:	2200      	movs	r2, #0
 80178d2:	4b81      	ldr	r3, [pc, #516]	; (8017ad8 <_dtoa_r+0x608>)
 80178d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178d8:	f7e8 fcee 	bl	80002b8 <__aeabi_dsub>
 80178dc:	462a      	mov	r2, r5
 80178de:	4633      	mov	r3, r6
 80178e0:	e9cd 0100 	strd	r0, r1, [sp]
 80178e4:	f7e9 f930 	bl	8000b48 <__aeabi_dcmpgt>
 80178e8:	2800      	cmp	r0, #0
 80178ea:	f040 8288 	bne.w	8017dfe <_dtoa_r+0x92e>
 80178ee:	462a      	mov	r2, r5
 80178f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80178f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178f8:	f7e9 f908 	bl	8000b0c <__aeabi_dcmplt>
 80178fc:	2800      	cmp	r0, #0
 80178fe:	f040 827c 	bne.w	8017dfa <_dtoa_r+0x92a>
 8017902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017906:	e9cd 2300 	strd	r2, r3, [sp]
 801790a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801790c:	2b00      	cmp	r3, #0
 801790e:	f2c0 8150 	blt.w	8017bb2 <_dtoa_r+0x6e2>
 8017912:	f1ba 0f0e 	cmp.w	sl, #14
 8017916:	f300 814c 	bgt.w	8017bb2 <_dtoa_r+0x6e2>
 801791a:	4b6a      	ldr	r3, [pc, #424]	; (8017ac4 <_dtoa_r+0x5f4>)
 801791c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017920:	ed93 7b00 	vldr	d7, [r3]
 8017924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017926:	2b00      	cmp	r3, #0
 8017928:	ed8d 7b02 	vstr	d7, [sp, #8]
 801792c:	f280 80d8 	bge.w	8017ae0 <_dtoa_r+0x610>
 8017930:	f1b9 0f00 	cmp.w	r9, #0
 8017934:	f300 80d4 	bgt.w	8017ae0 <_dtoa_r+0x610>
 8017938:	f040 825e 	bne.w	8017df8 <_dtoa_r+0x928>
 801793c:	2200      	movs	r2, #0
 801793e:	4b66      	ldr	r3, [pc, #408]	; (8017ad8 <_dtoa_r+0x608>)
 8017940:	ec51 0b17 	vmov	r0, r1, d7
 8017944:	f7e8 fe70 	bl	8000628 <__aeabi_dmul>
 8017948:	e9dd 2300 	ldrd	r2, r3, [sp]
 801794c:	f7e9 f8f2 	bl	8000b34 <__aeabi_dcmpge>
 8017950:	464f      	mov	r7, r9
 8017952:	464e      	mov	r6, r9
 8017954:	2800      	cmp	r0, #0
 8017956:	f040 8234 	bne.w	8017dc2 <_dtoa_r+0x8f2>
 801795a:	2331      	movs	r3, #49	; 0x31
 801795c:	f10b 0501 	add.w	r5, fp, #1
 8017960:	f88b 3000 	strb.w	r3, [fp]
 8017964:	f10a 0a01 	add.w	sl, sl, #1
 8017968:	e22f      	b.n	8017dca <_dtoa_r+0x8fa>
 801796a:	07f2      	lsls	r2, r6, #31
 801796c:	d505      	bpl.n	801797a <_dtoa_r+0x4aa>
 801796e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017972:	f7e8 fe59 	bl	8000628 <__aeabi_dmul>
 8017976:	3501      	adds	r5, #1
 8017978:	2301      	movs	r3, #1
 801797a:	1076      	asrs	r6, r6, #1
 801797c:	3708      	adds	r7, #8
 801797e:	e772      	b.n	8017866 <_dtoa_r+0x396>
 8017980:	2502      	movs	r5, #2
 8017982:	e774      	b.n	801786e <_dtoa_r+0x39e>
 8017984:	f8cd a020 	str.w	sl, [sp, #32]
 8017988:	464f      	mov	r7, r9
 801798a:	e791      	b.n	80178b0 <_dtoa_r+0x3e0>
 801798c:	4b4d      	ldr	r3, [pc, #308]	; (8017ac4 <_dtoa_r+0x5f4>)
 801798e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017992:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017998:	2b00      	cmp	r3, #0
 801799a:	d047      	beq.n	8017a2c <_dtoa_r+0x55c>
 801799c:	4602      	mov	r2, r0
 801799e:	460b      	mov	r3, r1
 80179a0:	2000      	movs	r0, #0
 80179a2:	494e      	ldr	r1, [pc, #312]	; (8017adc <_dtoa_r+0x60c>)
 80179a4:	f7e8 ff6a 	bl	800087c <__aeabi_ddiv>
 80179a8:	462a      	mov	r2, r5
 80179aa:	4633      	mov	r3, r6
 80179ac:	f7e8 fc84 	bl	80002b8 <__aeabi_dsub>
 80179b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80179b4:	465d      	mov	r5, fp
 80179b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179ba:	f7e9 f8e5 	bl	8000b88 <__aeabi_d2iz>
 80179be:	4606      	mov	r6, r0
 80179c0:	f7e8 fdc8 	bl	8000554 <__aeabi_i2d>
 80179c4:	4602      	mov	r2, r0
 80179c6:	460b      	mov	r3, r1
 80179c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179cc:	f7e8 fc74 	bl	80002b8 <__aeabi_dsub>
 80179d0:	3630      	adds	r6, #48	; 0x30
 80179d2:	f805 6b01 	strb.w	r6, [r5], #1
 80179d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179da:	e9cd 0100 	strd	r0, r1, [sp]
 80179de:	f7e9 f895 	bl	8000b0c <__aeabi_dcmplt>
 80179e2:	2800      	cmp	r0, #0
 80179e4:	d163      	bne.n	8017aae <_dtoa_r+0x5de>
 80179e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80179ea:	2000      	movs	r0, #0
 80179ec:	4937      	ldr	r1, [pc, #220]	; (8017acc <_dtoa_r+0x5fc>)
 80179ee:	f7e8 fc63 	bl	80002b8 <__aeabi_dsub>
 80179f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179f6:	f7e9 f889 	bl	8000b0c <__aeabi_dcmplt>
 80179fa:	2800      	cmp	r0, #0
 80179fc:	f040 80b7 	bne.w	8017b6e <_dtoa_r+0x69e>
 8017a00:	eba5 030b 	sub.w	r3, r5, fp
 8017a04:	429f      	cmp	r7, r3
 8017a06:	f77f af7c 	ble.w	8017902 <_dtoa_r+0x432>
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	4b30      	ldr	r3, [pc, #192]	; (8017ad0 <_dtoa_r+0x600>)
 8017a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a12:	f7e8 fe09 	bl	8000628 <__aeabi_dmul>
 8017a16:	2200      	movs	r2, #0
 8017a18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a1c:	4b2c      	ldr	r3, [pc, #176]	; (8017ad0 <_dtoa_r+0x600>)
 8017a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a22:	f7e8 fe01 	bl	8000628 <__aeabi_dmul>
 8017a26:	e9cd 0100 	strd	r0, r1, [sp]
 8017a2a:	e7c4      	b.n	80179b6 <_dtoa_r+0x4e6>
 8017a2c:	462a      	mov	r2, r5
 8017a2e:	4633      	mov	r3, r6
 8017a30:	f7e8 fdfa 	bl	8000628 <__aeabi_dmul>
 8017a34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a38:	eb0b 0507 	add.w	r5, fp, r7
 8017a3c:	465e      	mov	r6, fp
 8017a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a42:	f7e9 f8a1 	bl	8000b88 <__aeabi_d2iz>
 8017a46:	4607      	mov	r7, r0
 8017a48:	f7e8 fd84 	bl	8000554 <__aeabi_i2d>
 8017a4c:	3730      	adds	r7, #48	; 0x30
 8017a4e:	4602      	mov	r2, r0
 8017a50:	460b      	mov	r3, r1
 8017a52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a56:	f7e8 fc2f 	bl	80002b8 <__aeabi_dsub>
 8017a5a:	f806 7b01 	strb.w	r7, [r6], #1
 8017a5e:	42ae      	cmp	r6, r5
 8017a60:	e9cd 0100 	strd	r0, r1, [sp]
 8017a64:	f04f 0200 	mov.w	r2, #0
 8017a68:	d126      	bne.n	8017ab8 <_dtoa_r+0x5e8>
 8017a6a:	4b1c      	ldr	r3, [pc, #112]	; (8017adc <_dtoa_r+0x60c>)
 8017a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a70:	f7e8 fc24 	bl	80002bc <__adddf3>
 8017a74:	4602      	mov	r2, r0
 8017a76:	460b      	mov	r3, r1
 8017a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a7c:	f7e9 f864 	bl	8000b48 <__aeabi_dcmpgt>
 8017a80:	2800      	cmp	r0, #0
 8017a82:	d174      	bne.n	8017b6e <_dtoa_r+0x69e>
 8017a84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a88:	2000      	movs	r0, #0
 8017a8a:	4914      	ldr	r1, [pc, #80]	; (8017adc <_dtoa_r+0x60c>)
 8017a8c:	f7e8 fc14 	bl	80002b8 <__aeabi_dsub>
 8017a90:	4602      	mov	r2, r0
 8017a92:	460b      	mov	r3, r1
 8017a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a98:	f7e9 f838 	bl	8000b0c <__aeabi_dcmplt>
 8017a9c:	2800      	cmp	r0, #0
 8017a9e:	f43f af30 	beq.w	8017902 <_dtoa_r+0x432>
 8017aa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017aa6:	2b30      	cmp	r3, #48	; 0x30
 8017aa8:	f105 32ff 	add.w	r2, r5, #4294967295
 8017aac:	d002      	beq.n	8017ab4 <_dtoa_r+0x5e4>
 8017aae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017ab2:	e04a      	b.n	8017b4a <_dtoa_r+0x67a>
 8017ab4:	4615      	mov	r5, r2
 8017ab6:	e7f4      	b.n	8017aa2 <_dtoa_r+0x5d2>
 8017ab8:	4b05      	ldr	r3, [pc, #20]	; (8017ad0 <_dtoa_r+0x600>)
 8017aba:	f7e8 fdb5 	bl	8000628 <__aeabi_dmul>
 8017abe:	e9cd 0100 	strd	r0, r1, [sp]
 8017ac2:	e7bc      	b.n	8017a3e <_dtoa_r+0x56e>
 8017ac4:	0801a3d0 	.word	0x0801a3d0
 8017ac8:	0801a3a8 	.word	0x0801a3a8
 8017acc:	3ff00000 	.word	0x3ff00000
 8017ad0:	40240000 	.word	0x40240000
 8017ad4:	401c0000 	.word	0x401c0000
 8017ad8:	40140000 	.word	0x40140000
 8017adc:	3fe00000 	.word	0x3fe00000
 8017ae0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017ae4:	465d      	mov	r5, fp
 8017ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017aea:	4630      	mov	r0, r6
 8017aec:	4639      	mov	r1, r7
 8017aee:	f7e8 fec5 	bl	800087c <__aeabi_ddiv>
 8017af2:	f7e9 f849 	bl	8000b88 <__aeabi_d2iz>
 8017af6:	4680      	mov	r8, r0
 8017af8:	f7e8 fd2c 	bl	8000554 <__aeabi_i2d>
 8017afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b00:	f7e8 fd92 	bl	8000628 <__aeabi_dmul>
 8017b04:	4602      	mov	r2, r0
 8017b06:	460b      	mov	r3, r1
 8017b08:	4630      	mov	r0, r6
 8017b0a:	4639      	mov	r1, r7
 8017b0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017b10:	f7e8 fbd2 	bl	80002b8 <__aeabi_dsub>
 8017b14:	f805 6b01 	strb.w	r6, [r5], #1
 8017b18:	eba5 060b 	sub.w	r6, r5, fp
 8017b1c:	45b1      	cmp	r9, r6
 8017b1e:	4602      	mov	r2, r0
 8017b20:	460b      	mov	r3, r1
 8017b22:	d139      	bne.n	8017b98 <_dtoa_r+0x6c8>
 8017b24:	f7e8 fbca 	bl	80002bc <__adddf3>
 8017b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b2c:	4606      	mov	r6, r0
 8017b2e:	460f      	mov	r7, r1
 8017b30:	f7e9 f80a 	bl	8000b48 <__aeabi_dcmpgt>
 8017b34:	b9c8      	cbnz	r0, 8017b6a <_dtoa_r+0x69a>
 8017b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b3a:	4630      	mov	r0, r6
 8017b3c:	4639      	mov	r1, r7
 8017b3e:	f7e8 ffdb 	bl	8000af8 <__aeabi_dcmpeq>
 8017b42:	b110      	cbz	r0, 8017b4a <_dtoa_r+0x67a>
 8017b44:	f018 0f01 	tst.w	r8, #1
 8017b48:	d10f      	bne.n	8017b6a <_dtoa_r+0x69a>
 8017b4a:	9904      	ldr	r1, [sp, #16]
 8017b4c:	4620      	mov	r0, r4
 8017b4e:	f000 fe18 	bl	8018782 <_Bfree>
 8017b52:	2300      	movs	r3, #0
 8017b54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b56:	702b      	strb	r3, [r5, #0]
 8017b58:	f10a 0301 	add.w	r3, sl, #1
 8017b5c:	6013      	str	r3, [r2, #0]
 8017b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	f000 8241 	beq.w	8017fe8 <_dtoa_r+0xb18>
 8017b66:	601d      	str	r5, [r3, #0]
 8017b68:	e23e      	b.n	8017fe8 <_dtoa_r+0xb18>
 8017b6a:	f8cd a020 	str.w	sl, [sp, #32]
 8017b6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017b72:	2a39      	cmp	r2, #57	; 0x39
 8017b74:	f105 33ff 	add.w	r3, r5, #4294967295
 8017b78:	d108      	bne.n	8017b8c <_dtoa_r+0x6bc>
 8017b7a:	459b      	cmp	fp, r3
 8017b7c:	d10a      	bne.n	8017b94 <_dtoa_r+0x6c4>
 8017b7e:	9b08      	ldr	r3, [sp, #32]
 8017b80:	3301      	adds	r3, #1
 8017b82:	9308      	str	r3, [sp, #32]
 8017b84:	2330      	movs	r3, #48	; 0x30
 8017b86:	f88b 3000 	strb.w	r3, [fp]
 8017b8a:	465b      	mov	r3, fp
 8017b8c:	781a      	ldrb	r2, [r3, #0]
 8017b8e:	3201      	adds	r2, #1
 8017b90:	701a      	strb	r2, [r3, #0]
 8017b92:	e78c      	b.n	8017aae <_dtoa_r+0x5de>
 8017b94:	461d      	mov	r5, r3
 8017b96:	e7ea      	b.n	8017b6e <_dtoa_r+0x69e>
 8017b98:	2200      	movs	r2, #0
 8017b9a:	4b9b      	ldr	r3, [pc, #620]	; (8017e08 <_dtoa_r+0x938>)
 8017b9c:	f7e8 fd44 	bl	8000628 <__aeabi_dmul>
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	4606      	mov	r6, r0
 8017ba6:	460f      	mov	r7, r1
 8017ba8:	f7e8 ffa6 	bl	8000af8 <__aeabi_dcmpeq>
 8017bac:	2800      	cmp	r0, #0
 8017bae:	d09a      	beq.n	8017ae6 <_dtoa_r+0x616>
 8017bb0:	e7cb      	b.n	8017b4a <_dtoa_r+0x67a>
 8017bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bb4:	2a00      	cmp	r2, #0
 8017bb6:	f000 808b 	beq.w	8017cd0 <_dtoa_r+0x800>
 8017bba:	9a06      	ldr	r2, [sp, #24]
 8017bbc:	2a01      	cmp	r2, #1
 8017bbe:	dc6e      	bgt.n	8017c9e <_dtoa_r+0x7ce>
 8017bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017bc2:	2a00      	cmp	r2, #0
 8017bc4:	d067      	beq.n	8017c96 <_dtoa_r+0x7c6>
 8017bc6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017bca:	9f07      	ldr	r7, [sp, #28]
 8017bcc:	9d05      	ldr	r5, [sp, #20]
 8017bce:	9a05      	ldr	r2, [sp, #20]
 8017bd0:	2101      	movs	r1, #1
 8017bd2:	441a      	add	r2, r3
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	9205      	str	r2, [sp, #20]
 8017bd8:	4498      	add	r8, r3
 8017bda:	f000 feb0 	bl	801893e <__i2b>
 8017bde:	4606      	mov	r6, r0
 8017be0:	2d00      	cmp	r5, #0
 8017be2:	dd0c      	ble.n	8017bfe <_dtoa_r+0x72e>
 8017be4:	f1b8 0f00 	cmp.w	r8, #0
 8017be8:	dd09      	ble.n	8017bfe <_dtoa_r+0x72e>
 8017bea:	4545      	cmp	r5, r8
 8017bec:	9a05      	ldr	r2, [sp, #20]
 8017bee:	462b      	mov	r3, r5
 8017bf0:	bfa8      	it	ge
 8017bf2:	4643      	movge	r3, r8
 8017bf4:	1ad2      	subs	r2, r2, r3
 8017bf6:	9205      	str	r2, [sp, #20]
 8017bf8:	1aed      	subs	r5, r5, r3
 8017bfa:	eba8 0803 	sub.w	r8, r8, r3
 8017bfe:	9b07      	ldr	r3, [sp, #28]
 8017c00:	b1eb      	cbz	r3, 8017c3e <_dtoa_r+0x76e>
 8017c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d067      	beq.n	8017cd8 <_dtoa_r+0x808>
 8017c08:	b18f      	cbz	r7, 8017c2e <_dtoa_r+0x75e>
 8017c0a:	4631      	mov	r1, r6
 8017c0c:	463a      	mov	r2, r7
 8017c0e:	4620      	mov	r0, r4
 8017c10:	f000 ff34 	bl	8018a7c <__pow5mult>
 8017c14:	9a04      	ldr	r2, [sp, #16]
 8017c16:	4601      	mov	r1, r0
 8017c18:	4606      	mov	r6, r0
 8017c1a:	4620      	mov	r0, r4
 8017c1c:	f000 fe98 	bl	8018950 <__multiply>
 8017c20:	9904      	ldr	r1, [sp, #16]
 8017c22:	9008      	str	r0, [sp, #32]
 8017c24:	4620      	mov	r0, r4
 8017c26:	f000 fdac 	bl	8018782 <_Bfree>
 8017c2a:	9b08      	ldr	r3, [sp, #32]
 8017c2c:	9304      	str	r3, [sp, #16]
 8017c2e:	9b07      	ldr	r3, [sp, #28]
 8017c30:	1bda      	subs	r2, r3, r7
 8017c32:	d004      	beq.n	8017c3e <_dtoa_r+0x76e>
 8017c34:	9904      	ldr	r1, [sp, #16]
 8017c36:	4620      	mov	r0, r4
 8017c38:	f000 ff20 	bl	8018a7c <__pow5mult>
 8017c3c:	9004      	str	r0, [sp, #16]
 8017c3e:	2101      	movs	r1, #1
 8017c40:	4620      	mov	r0, r4
 8017c42:	f000 fe7c 	bl	801893e <__i2b>
 8017c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c48:	4607      	mov	r7, r0
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	f000 81d0 	beq.w	8017ff0 <_dtoa_r+0xb20>
 8017c50:	461a      	mov	r2, r3
 8017c52:	4601      	mov	r1, r0
 8017c54:	4620      	mov	r0, r4
 8017c56:	f000 ff11 	bl	8018a7c <__pow5mult>
 8017c5a:	9b06      	ldr	r3, [sp, #24]
 8017c5c:	2b01      	cmp	r3, #1
 8017c5e:	4607      	mov	r7, r0
 8017c60:	dc40      	bgt.n	8017ce4 <_dtoa_r+0x814>
 8017c62:	9b00      	ldr	r3, [sp, #0]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d139      	bne.n	8017cdc <_dtoa_r+0x80c>
 8017c68:	9b01      	ldr	r3, [sp, #4]
 8017c6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d136      	bne.n	8017ce0 <_dtoa_r+0x810>
 8017c72:	9b01      	ldr	r3, [sp, #4]
 8017c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c78:	0d1b      	lsrs	r3, r3, #20
 8017c7a:	051b      	lsls	r3, r3, #20
 8017c7c:	b12b      	cbz	r3, 8017c8a <_dtoa_r+0x7ba>
 8017c7e:	9b05      	ldr	r3, [sp, #20]
 8017c80:	3301      	adds	r3, #1
 8017c82:	9305      	str	r3, [sp, #20]
 8017c84:	f108 0801 	add.w	r8, r8, #1
 8017c88:	2301      	movs	r3, #1
 8017c8a:	9307      	str	r3, [sp, #28]
 8017c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d12a      	bne.n	8017ce8 <_dtoa_r+0x818>
 8017c92:	2001      	movs	r0, #1
 8017c94:	e030      	b.n	8017cf8 <_dtoa_r+0x828>
 8017c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017c9c:	e795      	b.n	8017bca <_dtoa_r+0x6fa>
 8017c9e:	9b07      	ldr	r3, [sp, #28]
 8017ca0:	f109 37ff 	add.w	r7, r9, #4294967295
 8017ca4:	42bb      	cmp	r3, r7
 8017ca6:	bfbf      	itttt	lt
 8017ca8:	9b07      	ldrlt	r3, [sp, #28]
 8017caa:	9707      	strlt	r7, [sp, #28]
 8017cac:	1afa      	sublt	r2, r7, r3
 8017cae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017cb0:	bfbb      	ittet	lt
 8017cb2:	189b      	addlt	r3, r3, r2
 8017cb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017cb6:	1bdf      	subge	r7, r3, r7
 8017cb8:	2700      	movlt	r7, #0
 8017cba:	f1b9 0f00 	cmp.w	r9, #0
 8017cbe:	bfb5      	itete	lt
 8017cc0:	9b05      	ldrlt	r3, [sp, #20]
 8017cc2:	9d05      	ldrge	r5, [sp, #20]
 8017cc4:	eba3 0509 	sublt.w	r5, r3, r9
 8017cc8:	464b      	movge	r3, r9
 8017cca:	bfb8      	it	lt
 8017ccc:	2300      	movlt	r3, #0
 8017cce:	e77e      	b.n	8017bce <_dtoa_r+0x6fe>
 8017cd0:	9f07      	ldr	r7, [sp, #28]
 8017cd2:	9d05      	ldr	r5, [sp, #20]
 8017cd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017cd6:	e783      	b.n	8017be0 <_dtoa_r+0x710>
 8017cd8:	9a07      	ldr	r2, [sp, #28]
 8017cda:	e7ab      	b.n	8017c34 <_dtoa_r+0x764>
 8017cdc:	2300      	movs	r3, #0
 8017cde:	e7d4      	b.n	8017c8a <_dtoa_r+0x7ba>
 8017ce0:	9b00      	ldr	r3, [sp, #0]
 8017ce2:	e7d2      	b.n	8017c8a <_dtoa_r+0x7ba>
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	9307      	str	r3, [sp, #28]
 8017ce8:	693b      	ldr	r3, [r7, #16]
 8017cea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017cee:	6918      	ldr	r0, [r3, #16]
 8017cf0:	f000 fdd7 	bl	80188a2 <__hi0bits>
 8017cf4:	f1c0 0020 	rsb	r0, r0, #32
 8017cf8:	4440      	add	r0, r8
 8017cfa:	f010 001f 	ands.w	r0, r0, #31
 8017cfe:	d047      	beq.n	8017d90 <_dtoa_r+0x8c0>
 8017d00:	f1c0 0320 	rsb	r3, r0, #32
 8017d04:	2b04      	cmp	r3, #4
 8017d06:	dd3b      	ble.n	8017d80 <_dtoa_r+0x8b0>
 8017d08:	9b05      	ldr	r3, [sp, #20]
 8017d0a:	f1c0 001c 	rsb	r0, r0, #28
 8017d0e:	4403      	add	r3, r0
 8017d10:	9305      	str	r3, [sp, #20]
 8017d12:	4405      	add	r5, r0
 8017d14:	4480      	add	r8, r0
 8017d16:	9b05      	ldr	r3, [sp, #20]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	dd05      	ble.n	8017d28 <_dtoa_r+0x858>
 8017d1c:	461a      	mov	r2, r3
 8017d1e:	9904      	ldr	r1, [sp, #16]
 8017d20:	4620      	mov	r0, r4
 8017d22:	f000 fef9 	bl	8018b18 <__lshift>
 8017d26:	9004      	str	r0, [sp, #16]
 8017d28:	f1b8 0f00 	cmp.w	r8, #0
 8017d2c:	dd05      	ble.n	8017d3a <_dtoa_r+0x86a>
 8017d2e:	4639      	mov	r1, r7
 8017d30:	4642      	mov	r2, r8
 8017d32:	4620      	mov	r0, r4
 8017d34:	f000 fef0 	bl	8018b18 <__lshift>
 8017d38:	4607      	mov	r7, r0
 8017d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d3c:	b353      	cbz	r3, 8017d94 <_dtoa_r+0x8c4>
 8017d3e:	4639      	mov	r1, r7
 8017d40:	9804      	ldr	r0, [sp, #16]
 8017d42:	f000 ff3d 	bl	8018bc0 <__mcmp>
 8017d46:	2800      	cmp	r0, #0
 8017d48:	da24      	bge.n	8017d94 <_dtoa_r+0x8c4>
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	220a      	movs	r2, #10
 8017d4e:	9904      	ldr	r1, [sp, #16]
 8017d50:	4620      	mov	r0, r4
 8017d52:	f000 fd2d 	bl	80187b0 <__multadd>
 8017d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d58:	9004      	str	r0, [sp, #16]
 8017d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	f000 814d 	beq.w	8017ffe <_dtoa_r+0xb2e>
 8017d64:	2300      	movs	r3, #0
 8017d66:	4631      	mov	r1, r6
 8017d68:	220a      	movs	r2, #10
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	f000 fd20 	bl	80187b0 <__multadd>
 8017d70:	9b02      	ldr	r3, [sp, #8]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	4606      	mov	r6, r0
 8017d76:	dc4f      	bgt.n	8017e18 <_dtoa_r+0x948>
 8017d78:	9b06      	ldr	r3, [sp, #24]
 8017d7a:	2b02      	cmp	r3, #2
 8017d7c:	dd4c      	ble.n	8017e18 <_dtoa_r+0x948>
 8017d7e:	e011      	b.n	8017da4 <_dtoa_r+0x8d4>
 8017d80:	d0c9      	beq.n	8017d16 <_dtoa_r+0x846>
 8017d82:	9a05      	ldr	r2, [sp, #20]
 8017d84:	331c      	adds	r3, #28
 8017d86:	441a      	add	r2, r3
 8017d88:	9205      	str	r2, [sp, #20]
 8017d8a:	441d      	add	r5, r3
 8017d8c:	4498      	add	r8, r3
 8017d8e:	e7c2      	b.n	8017d16 <_dtoa_r+0x846>
 8017d90:	4603      	mov	r3, r0
 8017d92:	e7f6      	b.n	8017d82 <_dtoa_r+0x8b2>
 8017d94:	f1b9 0f00 	cmp.w	r9, #0
 8017d98:	dc38      	bgt.n	8017e0c <_dtoa_r+0x93c>
 8017d9a:	9b06      	ldr	r3, [sp, #24]
 8017d9c:	2b02      	cmp	r3, #2
 8017d9e:	dd35      	ble.n	8017e0c <_dtoa_r+0x93c>
 8017da0:	f8cd 9008 	str.w	r9, [sp, #8]
 8017da4:	9b02      	ldr	r3, [sp, #8]
 8017da6:	b963      	cbnz	r3, 8017dc2 <_dtoa_r+0x8f2>
 8017da8:	4639      	mov	r1, r7
 8017daa:	2205      	movs	r2, #5
 8017dac:	4620      	mov	r0, r4
 8017dae:	f000 fcff 	bl	80187b0 <__multadd>
 8017db2:	4601      	mov	r1, r0
 8017db4:	4607      	mov	r7, r0
 8017db6:	9804      	ldr	r0, [sp, #16]
 8017db8:	f000 ff02 	bl	8018bc0 <__mcmp>
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	f73f adcc 	bgt.w	801795a <_dtoa_r+0x48a>
 8017dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dc4:	465d      	mov	r5, fp
 8017dc6:	ea6f 0a03 	mvn.w	sl, r3
 8017dca:	f04f 0900 	mov.w	r9, #0
 8017dce:	4639      	mov	r1, r7
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f000 fcd6 	bl	8018782 <_Bfree>
 8017dd6:	2e00      	cmp	r6, #0
 8017dd8:	f43f aeb7 	beq.w	8017b4a <_dtoa_r+0x67a>
 8017ddc:	f1b9 0f00 	cmp.w	r9, #0
 8017de0:	d005      	beq.n	8017dee <_dtoa_r+0x91e>
 8017de2:	45b1      	cmp	r9, r6
 8017de4:	d003      	beq.n	8017dee <_dtoa_r+0x91e>
 8017de6:	4649      	mov	r1, r9
 8017de8:	4620      	mov	r0, r4
 8017dea:	f000 fcca 	bl	8018782 <_Bfree>
 8017dee:	4631      	mov	r1, r6
 8017df0:	4620      	mov	r0, r4
 8017df2:	f000 fcc6 	bl	8018782 <_Bfree>
 8017df6:	e6a8      	b.n	8017b4a <_dtoa_r+0x67a>
 8017df8:	2700      	movs	r7, #0
 8017dfa:	463e      	mov	r6, r7
 8017dfc:	e7e1      	b.n	8017dc2 <_dtoa_r+0x8f2>
 8017dfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017e02:	463e      	mov	r6, r7
 8017e04:	e5a9      	b.n	801795a <_dtoa_r+0x48a>
 8017e06:	bf00      	nop
 8017e08:	40240000 	.word	0x40240000
 8017e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	f000 80fa 	beq.w	801800c <_dtoa_r+0xb3c>
 8017e18:	2d00      	cmp	r5, #0
 8017e1a:	dd05      	ble.n	8017e28 <_dtoa_r+0x958>
 8017e1c:	4631      	mov	r1, r6
 8017e1e:	462a      	mov	r2, r5
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 fe79 	bl	8018b18 <__lshift>
 8017e26:	4606      	mov	r6, r0
 8017e28:	9b07      	ldr	r3, [sp, #28]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d04c      	beq.n	8017ec8 <_dtoa_r+0x9f8>
 8017e2e:	6871      	ldr	r1, [r6, #4]
 8017e30:	4620      	mov	r0, r4
 8017e32:	f000 fc72 	bl	801871a <_Balloc>
 8017e36:	6932      	ldr	r2, [r6, #16]
 8017e38:	3202      	adds	r2, #2
 8017e3a:	4605      	mov	r5, r0
 8017e3c:	0092      	lsls	r2, r2, #2
 8017e3e:	f106 010c 	add.w	r1, r6, #12
 8017e42:	300c      	adds	r0, #12
 8017e44:	f000 fc5e 	bl	8018704 <memcpy>
 8017e48:	2201      	movs	r2, #1
 8017e4a:	4629      	mov	r1, r5
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f000 fe63 	bl	8018b18 <__lshift>
 8017e52:	9b00      	ldr	r3, [sp, #0]
 8017e54:	f8cd b014 	str.w	fp, [sp, #20]
 8017e58:	f003 0301 	and.w	r3, r3, #1
 8017e5c:	46b1      	mov	r9, r6
 8017e5e:	9307      	str	r3, [sp, #28]
 8017e60:	4606      	mov	r6, r0
 8017e62:	4639      	mov	r1, r7
 8017e64:	9804      	ldr	r0, [sp, #16]
 8017e66:	f7ff faa5 	bl	80173b4 <quorem>
 8017e6a:	4649      	mov	r1, r9
 8017e6c:	4605      	mov	r5, r0
 8017e6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017e72:	9804      	ldr	r0, [sp, #16]
 8017e74:	f000 fea4 	bl	8018bc0 <__mcmp>
 8017e78:	4632      	mov	r2, r6
 8017e7a:	9000      	str	r0, [sp, #0]
 8017e7c:	4639      	mov	r1, r7
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f000 feb8 	bl	8018bf4 <__mdiff>
 8017e84:	68c3      	ldr	r3, [r0, #12]
 8017e86:	4602      	mov	r2, r0
 8017e88:	bb03      	cbnz	r3, 8017ecc <_dtoa_r+0x9fc>
 8017e8a:	4601      	mov	r1, r0
 8017e8c:	9008      	str	r0, [sp, #32]
 8017e8e:	9804      	ldr	r0, [sp, #16]
 8017e90:	f000 fe96 	bl	8018bc0 <__mcmp>
 8017e94:	9a08      	ldr	r2, [sp, #32]
 8017e96:	4603      	mov	r3, r0
 8017e98:	4611      	mov	r1, r2
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	9308      	str	r3, [sp, #32]
 8017e9e:	f000 fc70 	bl	8018782 <_Bfree>
 8017ea2:	9b08      	ldr	r3, [sp, #32]
 8017ea4:	b9a3      	cbnz	r3, 8017ed0 <_dtoa_r+0xa00>
 8017ea6:	9a06      	ldr	r2, [sp, #24]
 8017ea8:	b992      	cbnz	r2, 8017ed0 <_dtoa_r+0xa00>
 8017eaa:	9a07      	ldr	r2, [sp, #28]
 8017eac:	b982      	cbnz	r2, 8017ed0 <_dtoa_r+0xa00>
 8017eae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017eb2:	d029      	beq.n	8017f08 <_dtoa_r+0xa38>
 8017eb4:	9b00      	ldr	r3, [sp, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	dd01      	ble.n	8017ebe <_dtoa_r+0x9ee>
 8017eba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017ebe:	9b05      	ldr	r3, [sp, #20]
 8017ec0:	1c5d      	adds	r5, r3, #1
 8017ec2:	f883 8000 	strb.w	r8, [r3]
 8017ec6:	e782      	b.n	8017dce <_dtoa_r+0x8fe>
 8017ec8:	4630      	mov	r0, r6
 8017eca:	e7c2      	b.n	8017e52 <_dtoa_r+0x982>
 8017ecc:	2301      	movs	r3, #1
 8017ece:	e7e3      	b.n	8017e98 <_dtoa_r+0x9c8>
 8017ed0:	9a00      	ldr	r2, [sp, #0]
 8017ed2:	2a00      	cmp	r2, #0
 8017ed4:	db04      	blt.n	8017ee0 <_dtoa_r+0xa10>
 8017ed6:	d125      	bne.n	8017f24 <_dtoa_r+0xa54>
 8017ed8:	9a06      	ldr	r2, [sp, #24]
 8017eda:	bb1a      	cbnz	r2, 8017f24 <_dtoa_r+0xa54>
 8017edc:	9a07      	ldr	r2, [sp, #28]
 8017ede:	bb0a      	cbnz	r2, 8017f24 <_dtoa_r+0xa54>
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	ddec      	ble.n	8017ebe <_dtoa_r+0x9ee>
 8017ee4:	2201      	movs	r2, #1
 8017ee6:	9904      	ldr	r1, [sp, #16]
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f000 fe15 	bl	8018b18 <__lshift>
 8017eee:	4639      	mov	r1, r7
 8017ef0:	9004      	str	r0, [sp, #16]
 8017ef2:	f000 fe65 	bl	8018bc0 <__mcmp>
 8017ef6:	2800      	cmp	r0, #0
 8017ef8:	dc03      	bgt.n	8017f02 <_dtoa_r+0xa32>
 8017efa:	d1e0      	bne.n	8017ebe <_dtoa_r+0x9ee>
 8017efc:	f018 0f01 	tst.w	r8, #1
 8017f00:	d0dd      	beq.n	8017ebe <_dtoa_r+0x9ee>
 8017f02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f06:	d1d8      	bne.n	8017eba <_dtoa_r+0x9ea>
 8017f08:	9b05      	ldr	r3, [sp, #20]
 8017f0a:	9a05      	ldr	r2, [sp, #20]
 8017f0c:	1c5d      	adds	r5, r3, #1
 8017f0e:	2339      	movs	r3, #57	; 0x39
 8017f10:	7013      	strb	r3, [r2, #0]
 8017f12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f16:	2b39      	cmp	r3, #57	; 0x39
 8017f18:	f105 32ff 	add.w	r2, r5, #4294967295
 8017f1c:	d04f      	beq.n	8017fbe <_dtoa_r+0xaee>
 8017f1e:	3301      	adds	r3, #1
 8017f20:	7013      	strb	r3, [r2, #0]
 8017f22:	e754      	b.n	8017dce <_dtoa_r+0x8fe>
 8017f24:	9a05      	ldr	r2, [sp, #20]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	f102 0501 	add.w	r5, r2, #1
 8017f2c:	dd06      	ble.n	8017f3c <_dtoa_r+0xa6c>
 8017f2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f32:	d0e9      	beq.n	8017f08 <_dtoa_r+0xa38>
 8017f34:	f108 0801 	add.w	r8, r8, #1
 8017f38:	9b05      	ldr	r3, [sp, #20]
 8017f3a:	e7c2      	b.n	8017ec2 <_dtoa_r+0x9f2>
 8017f3c:	9a02      	ldr	r2, [sp, #8]
 8017f3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017f42:	eba5 030b 	sub.w	r3, r5, fp
 8017f46:	4293      	cmp	r3, r2
 8017f48:	d021      	beq.n	8017f8e <_dtoa_r+0xabe>
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	220a      	movs	r2, #10
 8017f4e:	9904      	ldr	r1, [sp, #16]
 8017f50:	4620      	mov	r0, r4
 8017f52:	f000 fc2d 	bl	80187b0 <__multadd>
 8017f56:	45b1      	cmp	r9, r6
 8017f58:	9004      	str	r0, [sp, #16]
 8017f5a:	f04f 0300 	mov.w	r3, #0
 8017f5e:	f04f 020a 	mov.w	r2, #10
 8017f62:	4649      	mov	r1, r9
 8017f64:	4620      	mov	r0, r4
 8017f66:	d105      	bne.n	8017f74 <_dtoa_r+0xaa4>
 8017f68:	f000 fc22 	bl	80187b0 <__multadd>
 8017f6c:	4681      	mov	r9, r0
 8017f6e:	4606      	mov	r6, r0
 8017f70:	9505      	str	r5, [sp, #20]
 8017f72:	e776      	b.n	8017e62 <_dtoa_r+0x992>
 8017f74:	f000 fc1c 	bl	80187b0 <__multadd>
 8017f78:	4631      	mov	r1, r6
 8017f7a:	4681      	mov	r9, r0
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	220a      	movs	r2, #10
 8017f80:	4620      	mov	r0, r4
 8017f82:	f000 fc15 	bl	80187b0 <__multadd>
 8017f86:	4606      	mov	r6, r0
 8017f88:	e7f2      	b.n	8017f70 <_dtoa_r+0xaa0>
 8017f8a:	f04f 0900 	mov.w	r9, #0
 8017f8e:	2201      	movs	r2, #1
 8017f90:	9904      	ldr	r1, [sp, #16]
 8017f92:	4620      	mov	r0, r4
 8017f94:	f000 fdc0 	bl	8018b18 <__lshift>
 8017f98:	4639      	mov	r1, r7
 8017f9a:	9004      	str	r0, [sp, #16]
 8017f9c:	f000 fe10 	bl	8018bc0 <__mcmp>
 8017fa0:	2800      	cmp	r0, #0
 8017fa2:	dcb6      	bgt.n	8017f12 <_dtoa_r+0xa42>
 8017fa4:	d102      	bne.n	8017fac <_dtoa_r+0xadc>
 8017fa6:	f018 0f01 	tst.w	r8, #1
 8017faa:	d1b2      	bne.n	8017f12 <_dtoa_r+0xa42>
 8017fac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017fb0:	2b30      	cmp	r3, #48	; 0x30
 8017fb2:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fb6:	f47f af0a 	bne.w	8017dce <_dtoa_r+0x8fe>
 8017fba:	4615      	mov	r5, r2
 8017fbc:	e7f6      	b.n	8017fac <_dtoa_r+0xadc>
 8017fbe:	4593      	cmp	fp, r2
 8017fc0:	d105      	bne.n	8017fce <_dtoa_r+0xafe>
 8017fc2:	2331      	movs	r3, #49	; 0x31
 8017fc4:	f10a 0a01 	add.w	sl, sl, #1
 8017fc8:	f88b 3000 	strb.w	r3, [fp]
 8017fcc:	e6ff      	b.n	8017dce <_dtoa_r+0x8fe>
 8017fce:	4615      	mov	r5, r2
 8017fd0:	e79f      	b.n	8017f12 <_dtoa_r+0xa42>
 8017fd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018038 <_dtoa_r+0xb68>
 8017fd6:	e007      	b.n	8017fe8 <_dtoa_r+0xb18>
 8017fd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fda:	f8df b060 	ldr.w	fp, [pc, #96]	; 801803c <_dtoa_r+0xb6c>
 8017fde:	b11b      	cbz	r3, 8017fe8 <_dtoa_r+0xb18>
 8017fe0:	f10b 0308 	add.w	r3, fp, #8
 8017fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017fe6:	6013      	str	r3, [r2, #0]
 8017fe8:	4658      	mov	r0, fp
 8017fea:	b017      	add	sp, #92	; 0x5c
 8017fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ff0:	9b06      	ldr	r3, [sp, #24]
 8017ff2:	2b01      	cmp	r3, #1
 8017ff4:	f77f ae35 	ble.w	8017c62 <_dtoa_r+0x792>
 8017ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ffa:	9307      	str	r3, [sp, #28]
 8017ffc:	e649      	b.n	8017c92 <_dtoa_r+0x7c2>
 8017ffe:	9b02      	ldr	r3, [sp, #8]
 8018000:	2b00      	cmp	r3, #0
 8018002:	dc03      	bgt.n	801800c <_dtoa_r+0xb3c>
 8018004:	9b06      	ldr	r3, [sp, #24]
 8018006:	2b02      	cmp	r3, #2
 8018008:	f73f aecc 	bgt.w	8017da4 <_dtoa_r+0x8d4>
 801800c:	465d      	mov	r5, fp
 801800e:	4639      	mov	r1, r7
 8018010:	9804      	ldr	r0, [sp, #16]
 8018012:	f7ff f9cf 	bl	80173b4 <quorem>
 8018016:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801801a:	f805 8b01 	strb.w	r8, [r5], #1
 801801e:	9a02      	ldr	r2, [sp, #8]
 8018020:	eba5 030b 	sub.w	r3, r5, fp
 8018024:	429a      	cmp	r2, r3
 8018026:	ddb0      	ble.n	8017f8a <_dtoa_r+0xaba>
 8018028:	2300      	movs	r3, #0
 801802a:	220a      	movs	r2, #10
 801802c:	9904      	ldr	r1, [sp, #16]
 801802e:	4620      	mov	r0, r4
 8018030:	f000 fbbe 	bl	80187b0 <__multadd>
 8018034:	9004      	str	r0, [sp, #16]
 8018036:	e7ea      	b.n	801800e <_dtoa_r+0xb3e>
 8018038:	0801a4cb 	.word	0x0801a4cb
 801803c:	0801a390 	.word	0x0801a390

08018040 <rshift>:
 8018040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018042:	6906      	ldr	r6, [r0, #16]
 8018044:	114b      	asrs	r3, r1, #5
 8018046:	429e      	cmp	r6, r3
 8018048:	f100 0414 	add.w	r4, r0, #20
 801804c:	dd30      	ble.n	80180b0 <rshift+0x70>
 801804e:	f011 011f 	ands.w	r1, r1, #31
 8018052:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018056:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801805a:	d108      	bne.n	801806e <rshift+0x2e>
 801805c:	4621      	mov	r1, r4
 801805e:	42b2      	cmp	r2, r6
 8018060:	460b      	mov	r3, r1
 8018062:	d211      	bcs.n	8018088 <rshift+0x48>
 8018064:	f852 3b04 	ldr.w	r3, [r2], #4
 8018068:	f841 3b04 	str.w	r3, [r1], #4
 801806c:	e7f7      	b.n	801805e <rshift+0x1e>
 801806e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018072:	f1c1 0c20 	rsb	ip, r1, #32
 8018076:	40cd      	lsrs	r5, r1
 8018078:	3204      	adds	r2, #4
 801807a:	4623      	mov	r3, r4
 801807c:	42b2      	cmp	r2, r6
 801807e:	4617      	mov	r7, r2
 8018080:	d30c      	bcc.n	801809c <rshift+0x5c>
 8018082:	601d      	str	r5, [r3, #0]
 8018084:	b105      	cbz	r5, 8018088 <rshift+0x48>
 8018086:	3304      	adds	r3, #4
 8018088:	1b1a      	subs	r2, r3, r4
 801808a:	42a3      	cmp	r3, r4
 801808c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018090:	bf08      	it	eq
 8018092:	2300      	moveq	r3, #0
 8018094:	6102      	str	r2, [r0, #16]
 8018096:	bf08      	it	eq
 8018098:	6143      	streq	r3, [r0, #20]
 801809a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801809c:	683f      	ldr	r7, [r7, #0]
 801809e:	fa07 f70c 	lsl.w	r7, r7, ip
 80180a2:	433d      	orrs	r5, r7
 80180a4:	f843 5b04 	str.w	r5, [r3], #4
 80180a8:	f852 5b04 	ldr.w	r5, [r2], #4
 80180ac:	40cd      	lsrs	r5, r1
 80180ae:	e7e5      	b.n	801807c <rshift+0x3c>
 80180b0:	4623      	mov	r3, r4
 80180b2:	e7e9      	b.n	8018088 <rshift+0x48>

080180b4 <__hexdig_fun>:
 80180b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80180b8:	2b09      	cmp	r3, #9
 80180ba:	d802      	bhi.n	80180c2 <__hexdig_fun+0xe>
 80180bc:	3820      	subs	r0, #32
 80180be:	b2c0      	uxtb	r0, r0
 80180c0:	4770      	bx	lr
 80180c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80180c6:	2b05      	cmp	r3, #5
 80180c8:	d801      	bhi.n	80180ce <__hexdig_fun+0x1a>
 80180ca:	3847      	subs	r0, #71	; 0x47
 80180cc:	e7f7      	b.n	80180be <__hexdig_fun+0xa>
 80180ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80180d2:	2b05      	cmp	r3, #5
 80180d4:	d801      	bhi.n	80180da <__hexdig_fun+0x26>
 80180d6:	3827      	subs	r0, #39	; 0x27
 80180d8:	e7f1      	b.n	80180be <__hexdig_fun+0xa>
 80180da:	2000      	movs	r0, #0
 80180dc:	4770      	bx	lr

080180de <__gethex>:
 80180de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180e2:	b08b      	sub	sp, #44	; 0x2c
 80180e4:	468a      	mov	sl, r1
 80180e6:	9002      	str	r0, [sp, #8]
 80180e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80180ea:	9306      	str	r3, [sp, #24]
 80180ec:	4690      	mov	r8, r2
 80180ee:	f000 fadf 	bl	80186b0 <__localeconv_l>
 80180f2:	6803      	ldr	r3, [r0, #0]
 80180f4:	9303      	str	r3, [sp, #12]
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7e8 f882 	bl	8000200 <strlen>
 80180fc:	9b03      	ldr	r3, [sp, #12]
 80180fe:	9001      	str	r0, [sp, #4]
 8018100:	4403      	add	r3, r0
 8018102:	f04f 0b00 	mov.w	fp, #0
 8018106:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801810a:	9307      	str	r3, [sp, #28]
 801810c:	f8da 3000 	ldr.w	r3, [sl]
 8018110:	3302      	adds	r3, #2
 8018112:	461f      	mov	r7, r3
 8018114:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018118:	2830      	cmp	r0, #48	; 0x30
 801811a:	d06c      	beq.n	80181f6 <__gethex+0x118>
 801811c:	f7ff ffca 	bl	80180b4 <__hexdig_fun>
 8018120:	4604      	mov	r4, r0
 8018122:	2800      	cmp	r0, #0
 8018124:	d16a      	bne.n	80181fc <__gethex+0x11e>
 8018126:	9a01      	ldr	r2, [sp, #4]
 8018128:	9903      	ldr	r1, [sp, #12]
 801812a:	4638      	mov	r0, r7
 801812c:	f001 fc40 	bl	80199b0 <strncmp>
 8018130:	2800      	cmp	r0, #0
 8018132:	d166      	bne.n	8018202 <__gethex+0x124>
 8018134:	9b01      	ldr	r3, [sp, #4]
 8018136:	5cf8      	ldrb	r0, [r7, r3]
 8018138:	18fe      	adds	r6, r7, r3
 801813a:	f7ff ffbb 	bl	80180b4 <__hexdig_fun>
 801813e:	2800      	cmp	r0, #0
 8018140:	d062      	beq.n	8018208 <__gethex+0x12a>
 8018142:	4633      	mov	r3, r6
 8018144:	7818      	ldrb	r0, [r3, #0]
 8018146:	2830      	cmp	r0, #48	; 0x30
 8018148:	461f      	mov	r7, r3
 801814a:	f103 0301 	add.w	r3, r3, #1
 801814e:	d0f9      	beq.n	8018144 <__gethex+0x66>
 8018150:	f7ff ffb0 	bl	80180b4 <__hexdig_fun>
 8018154:	fab0 f580 	clz	r5, r0
 8018158:	096d      	lsrs	r5, r5, #5
 801815a:	4634      	mov	r4, r6
 801815c:	f04f 0b01 	mov.w	fp, #1
 8018160:	463a      	mov	r2, r7
 8018162:	4616      	mov	r6, r2
 8018164:	3201      	adds	r2, #1
 8018166:	7830      	ldrb	r0, [r6, #0]
 8018168:	f7ff ffa4 	bl	80180b4 <__hexdig_fun>
 801816c:	2800      	cmp	r0, #0
 801816e:	d1f8      	bne.n	8018162 <__gethex+0x84>
 8018170:	9a01      	ldr	r2, [sp, #4]
 8018172:	9903      	ldr	r1, [sp, #12]
 8018174:	4630      	mov	r0, r6
 8018176:	f001 fc1b 	bl	80199b0 <strncmp>
 801817a:	b950      	cbnz	r0, 8018192 <__gethex+0xb4>
 801817c:	b954      	cbnz	r4, 8018194 <__gethex+0xb6>
 801817e:	9b01      	ldr	r3, [sp, #4]
 8018180:	18f4      	adds	r4, r6, r3
 8018182:	4622      	mov	r2, r4
 8018184:	4616      	mov	r6, r2
 8018186:	3201      	adds	r2, #1
 8018188:	7830      	ldrb	r0, [r6, #0]
 801818a:	f7ff ff93 	bl	80180b4 <__hexdig_fun>
 801818e:	2800      	cmp	r0, #0
 8018190:	d1f8      	bne.n	8018184 <__gethex+0xa6>
 8018192:	b10c      	cbz	r4, 8018198 <__gethex+0xba>
 8018194:	1ba4      	subs	r4, r4, r6
 8018196:	00a4      	lsls	r4, r4, #2
 8018198:	7833      	ldrb	r3, [r6, #0]
 801819a:	2b50      	cmp	r3, #80	; 0x50
 801819c:	d001      	beq.n	80181a2 <__gethex+0xc4>
 801819e:	2b70      	cmp	r3, #112	; 0x70
 80181a0:	d140      	bne.n	8018224 <__gethex+0x146>
 80181a2:	7873      	ldrb	r3, [r6, #1]
 80181a4:	2b2b      	cmp	r3, #43	; 0x2b
 80181a6:	d031      	beq.n	801820c <__gethex+0x12e>
 80181a8:	2b2d      	cmp	r3, #45	; 0x2d
 80181aa:	d033      	beq.n	8018214 <__gethex+0x136>
 80181ac:	1c71      	adds	r1, r6, #1
 80181ae:	f04f 0900 	mov.w	r9, #0
 80181b2:	7808      	ldrb	r0, [r1, #0]
 80181b4:	f7ff ff7e 	bl	80180b4 <__hexdig_fun>
 80181b8:	1e43      	subs	r3, r0, #1
 80181ba:	b2db      	uxtb	r3, r3
 80181bc:	2b18      	cmp	r3, #24
 80181be:	d831      	bhi.n	8018224 <__gethex+0x146>
 80181c0:	f1a0 0210 	sub.w	r2, r0, #16
 80181c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80181c8:	f7ff ff74 	bl	80180b4 <__hexdig_fun>
 80181cc:	1e43      	subs	r3, r0, #1
 80181ce:	b2db      	uxtb	r3, r3
 80181d0:	2b18      	cmp	r3, #24
 80181d2:	d922      	bls.n	801821a <__gethex+0x13c>
 80181d4:	f1b9 0f00 	cmp.w	r9, #0
 80181d8:	d000      	beq.n	80181dc <__gethex+0xfe>
 80181da:	4252      	negs	r2, r2
 80181dc:	4414      	add	r4, r2
 80181de:	f8ca 1000 	str.w	r1, [sl]
 80181e2:	b30d      	cbz	r5, 8018228 <__gethex+0x14a>
 80181e4:	f1bb 0f00 	cmp.w	fp, #0
 80181e8:	bf0c      	ite	eq
 80181ea:	2706      	moveq	r7, #6
 80181ec:	2700      	movne	r7, #0
 80181ee:	4638      	mov	r0, r7
 80181f0:	b00b      	add	sp, #44	; 0x2c
 80181f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f6:	f10b 0b01 	add.w	fp, fp, #1
 80181fa:	e78a      	b.n	8018112 <__gethex+0x34>
 80181fc:	2500      	movs	r5, #0
 80181fe:	462c      	mov	r4, r5
 8018200:	e7ae      	b.n	8018160 <__gethex+0x82>
 8018202:	463e      	mov	r6, r7
 8018204:	2501      	movs	r5, #1
 8018206:	e7c7      	b.n	8018198 <__gethex+0xba>
 8018208:	4604      	mov	r4, r0
 801820a:	e7fb      	b.n	8018204 <__gethex+0x126>
 801820c:	f04f 0900 	mov.w	r9, #0
 8018210:	1cb1      	adds	r1, r6, #2
 8018212:	e7ce      	b.n	80181b2 <__gethex+0xd4>
 8018214:	f04f 0901 	mov.w	r9, #1
 8018218:	e7fa      	b.n	8018210 <__gethex+0x132>
 801821a:	230a      	movs	r3, #10
 801821c:	fb03 0202 	mla	r2, r3, r2, r0
 8018220:	3a10      	subs	r2, #16
 8018222:	e7cf      	b.n	80181c4 <__gethex+0xe6>
 8018224:	4631      	mov	r1, r6
 8018226:	e7da      	b.n	80181de <__gethex+0x100>
 8018228:	1bf3      	subs	r3, r6, r7
 801822a:	3b01      	subs	r3, #1
 801822c:	4629      	mov	r1, r5
 801822e:	2b07      	cmp	r3, #7
 8018230:	dc49      	bgt.n	80182c6 <__gethex+0x1e8>
 8018232:	9802      	ldr	r0, [sp, #8]
 8018234:	f000 fa71 	bl	801871a <_Balloc>
 8018238:	9b01      	ldr	r3, [sp, #4]
 801823a:	f100 0914 	add.w	r9, r0, #20
 801823e:	f04f 0b00 	mov.w	fp, #0
 8018242:	f1c3 0301 	rsb	r3, r3, #1
 8018246:	4605      	mov	r5, r0
 8018248:	f8cd 9010 	str.w	r9, [sp, #16]
 801824c:	46da      	mov	sl, fp
 801824e:	9308      	str	r3, [sp, #32]
 8018250:	42b7      	cmp	r7, r6
 8018252:	d33b      	bcc.n	80182cc <__gethex+0x1ee>
 8018254:	9804      	ldr	r0, [sp, #16]
 8018256:	f840 ab04 	str.w	sl, [r0], #4
 801825a:	eba0 0009 	sub.w	r0, r0, r9
 801825e:	1080      	asrs	r0, r0, #2
 8018260:	6128      	str	r0, [r5, #16]
 8018262:	0147      	lsls	r7, r0, #5
 8018264:	4650      	mov	r0, sl
 8018266:	f000 fb1c 	bl	80188a2 <__hi0bits>
 801826a:	f8d8 6000 	ldr.w	r6, [r8]
 801826e:	1a3f      	subs	r7, r7, r0
 8018270:	42b7      	cmp	r7, r6
 8018272:	dd64      	ble.n	801833e <__gethex+0x260>
 8018274:	1bbf      	subs	r7, r7, r6
 8018276:	4639      	mov	r1, r7
 8018278:	4628      	mov	r0, r5
 801827a:	f000 fe2b 	bl	8018ed4 <__any_on>
 801827e:	4682      	mov	sl, r0
 8018280:	b178      	cbz	r0, 80182a2 <__gethex+0x1c4>
 8018282:	1e7b      	subs	r3, r7, #1
 8018284:	1159      	asrs	r1, r3, #5
 8018286:	f003 021f 	and.w	r2, r3, #31
 801828a:	f04f 0a01 	mov.w	sl, #1
 801828e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018292:	fa0a f202 	lsl.w	r2, sl, r2
 8018296:	420a      	tst	r2, r1
 8018298:	d003      	beq.n	80182a2 <__gethex+0x1c4>
 801829a:	4553      	cmp	r3, sl
 801829c:	dc46      	bgt.n	801832c <__gethex+0x24e>
 801829e:	f04f 0a02 	mov.w	sl, #2
 80182a2:	4639      	mov	r1, r7
 80182a4:	4628      	mov	r0, r5
 80182a6:	f7ff fecb 	bl	8018040 <rshift>
 80182aa:	443c      	add	r4, r7
 80182ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182b0:	42a3      	cmp	r3, r4
 80182b2:	da52      	bge.n	801835a <__gethex+0x27c>
 80182b4:	4629      	mov	r1, r5
 80182b6:	9802      	ldr	r0, [sp, #8]
 80182b8:	f000 fa63 	bl	8018782 <_Bfree>
 80182bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80182be:	2300      	movs	r3, #0
 80182c0:	6013      	str	r3, [r2, #0]
 80182c2:	27a3      	movs	r7, #163	; 0xa3
 80182c4:	e793      	b.n	80181ee <__gethex+0x110>
 80182c6:	3101      	adds	r1, #1
 80182c8:	105b      	asrs	r3, r3, #1
 80182ca:	e7b0      	b.n	801822e <__gethex+0x150>
 80182cc:	1e73      	subs	r3, r6, #1
 80182ce:	9305      	str	r3, [sp, #20]
 80182d0:	9a07      	ldr	r2, [sp, #28]
 80182d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80182d6:	4293      	cmp	r3, r2
 80182d8:	d018      	beq.n	801830c <__gethex+0x22e>
 80182da:	f1bb 0f20 	cmp.w	fp, #32
 80182de:	d107      	bne.n	80182f0 <__gethex+0x212>
 80182e0:	9b04      	ldr	r3, [sp, #16]
 80182e2:	f8c3 a000 	str.w	sl, [r3]
 80182e6:	3304      	adds	r3, #4
 80182e8:	f04f 0a00 	mov.w	sl, #0
 80182ec:	9304      	str	r3, [sp, #16]
 80182ee:	46d3      	mov	fp, sl
 80182f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80182f4:	f7ff fede 	bl	80180b4 <__hexdig_fun>
 80182f8:	f000 000f 	and.w	r0, r0, #15
 80182fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8018300:	ea4a 0a00 	orr.w	sl, sl, r0
 8018304:	f10b 0b04 	add.w	fp, fp, #4
 8018308:	9b05      	ldr	r3, [sp, #20]
 801830a:	e00d      	b.n	8018328 <__gethex+0x24a>
 801830c:	9b05      	ldr	r3, [sp, #20]
 801830e:	9a08      	ldr	r2, [sp, #32]
 8018310:	4413      	add	r3, r2
 8018312:	42bb      	cmp	r3, r7
 8018314:	d3e1      	bcc.n	80182da <__gethex+0x1fc>
 8018316:	4618      	mov	r0, r3
 8018318:	9a01      	ldr	r2, [sp, #4]
 801831a:	9903      	ldr	r1, [sp, #12]
 801831c:	9309      	str	r3, [sp, #36]	; 0x24
 801831e:	f001 fb47 	bl	80199b0 <strncmp>
 8018322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018324:	2800      	cmp	r0, #0
 8018326:	d1d8      	bne.n	80182da <__gethex+0x1fc>
 8018328:	461e      	mov	r6, r3
 801832a:	e791      	b.n	8018250 <__gethex+0x172>
 801832c:	1eb9      	subs	r1, r7, #2
 801832e:	4628      	mov	r0, r5
 8018330:	f000 fdd0 	bl	8018ed4 <__any_on>
 8018334:	2800      	cmp	r0, #0
 8018336:	d0b2      	beq.n	801829e <__gethex+0x1c0>
 8018338:	f04f 0a03 	mov.w	sl, #3
 801833c:	e7b1      	b.n	80182a2 <__gethex+0x1c4>
 801833e:	da09      	bge.n	8018354 <__gethex+0x276>
 8018340:	1bf7      	subs	r7, r6, r7
 8018342:	4629      	mov	r1, r5
 8018344:	463a      	mov	r2, r7
 8018346:	9802      	ldr	r0, [sp, #8]
 8018348:	f000 fbe6 	bl	8018b18 <__lshift>
 801834c:	1be4      	subs	r4, r4, r7
 801834e:	4605      	mov	r5, r0
 8018350:	f100 0914 	add.w	r9, r0, #20
 8018354:	f04f 0a00 	mov.w	sl, #0
 8018358:	e7a8      	b.n	80182ac <__gethex+0x1ce>
 801835a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801835e:	42a0      	cmp	r0, r4
 8018360:	dd6a      	ble.n	8018438 <__gethex+0x35a>
 8018362:	1b04      	subs	r4, r0, r4
 8018364:	42a6      	cmp	r6, r4
 8018366:	dc2e      	bgt.n	80183c6 <__gethex+0x2e8>
 8018368:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801836c:	2b02      	cmp	r3, #2
 801836e:	d022      	beq.n	80183b6 <__gethex+0x2d8>
 8018370:	2b03      	cmp	r3, #3
 8018372:	d024      	beq.n	80183be <__gethex+0x2e0>
 8018374:	2b01      	cmp	r3, #1
 8018376:	d115      	bne.n	80183a4 <__gethex+0x2c6>
 8018378:	42a6      	cmp	r6, r4
 801837a:	d113      	bne.n	80183a4 <__gethex+0x2c6>
 801837c:	2e01      	cmp	r6, #1
 801837e:	dc0b      	bgt.n	8018398 <__gethex+0x2ba>
 8018380:	9a06      	ldr	r2, [sp, #24]
 8018382:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018386:	6013      	str	r3, [r2, #0]
 8018388:	2301      	movs	r3, #1
 801838a:	612b      	str	r3, [r5, #16]
 801838c:	f8c9 3000 	str.w	r3, [r9]
 8018390:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018392:	2762      	movs	r7, #98	; 0x62
 8018394:	601d      	str	r5, [r3, #0]
 8018396:	e72a      	b.n	80181ee <__gethex+0x110>
 8018398:	1e71      	subs	r1, r6, #1
 801839a:	4628      	mov	r0, r5
 801839c:	f000 fd9a 	bl	8018ed4 <__any_on>
 80183a0:	2800      	cmp	r0, #0
 80183a2:	d1ed      	bne.n	8018380 <__gethex+0x2a2>
 80183a4:	4629      	mov	r1, r5
 80183a6:	9802      	ldr	r0, [sp, #8]
 80183a8:	f000 f9eb 	bl	8018782 <_Bfree>
 80183ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80183ae:	2300      	movs	r3, #0
 80183b0:	6013      	str	r3, [r2, #0]
 80183b2:	2750      	movs	r7, #80	; 0x50
 80183b4:	e71b      	b.n	80181ee <__gethex+0x110>
 80183b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d0e1      	beq.n	8018380 <__gethex+0x2a2>
 80183bc:	e7f2      	b.n	80183a4 <__gethex+0x2c6>
 80183be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d1dd      	bne.n	8018380 <__gethex+0x2a2>
 80183c4:	e7ee      	b.n	80183a4 <__gethex+0x2c6>
 80183c6:	1e67      	subs	r7, r4, #1
 80183c8:	f1ba 0f00 	cmp.w	sl, #0
 80183cc:	d131      	bne.n	8018432 <__gethex+0x354>
 80183ce:	b127      	cbz	r7, 80183da <__gethex+0x2fc>
 80183d0:	4639      	mov	r1, r7
 80183d2:	4628      	mov	r0, r5
 80183d4:	f000 fd7e 	bl	8018ed4 <__any_on>
 80183d8:	4682      	mov	sl, r0
 80183da:	117a      	asrs	r2, r7, #5
 80183dc:	2301      	movs	r3, #1
 80183de:	f007 071f 	and.w	r7, r7, #31
 80183e2:	fa03 f707 	lsl.w	r7, r3, r7
 80183e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80183ea:	4621      	mov	r1, r4
 80183ec:	421f      	tst	r7, r3
 80183ee:	4628      	mov	r0, r5
 80183f0:	bf18      	it	ne
 80183f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80183f6:	1b36      	subs	r6, r6, r4
 80183f8:	f7ff fe22 	bl	8018040 <rshift>
 80183fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018400:	2702      	movs	r7, #2
 8018402:	f1ba 0f00 	cmp.w	sl, #0
 8018406:	d048      	beq.n	801849a <__gethex+0x3bc>
 8018408:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801840c:	2b02      	cmp	r3, #2
 801840e:	d015      	beq.n	801843c <__gethex+0x35e>
 8018410:	2b03      	cmp	r3, #3
 8018412:	d017      	beq.n	8018444 <__gethex+0x366>
 8018414:	2b01      	cmp	r3, #1
 8018416:	d109      	bne.n	801842c <__gethex+0x34e>
 8018418:	f01a 0f02 	tst.w	sl, #2
 801841c:	d006      	beq.n	801842c <__gethex+0x34e>
 801841e:	f8d9 3000 	ldr.w	r3, [r9]
 8018422:	ea4a 0a03 	orr.w	sl, sl, r3
 8018426:	f01a 0f01 	tst.w	sl, #1
 801842a:	d10e      	bne.n	801844a <__gethex+0x36c>
 801842c:	f047 0710 	orr.w	r7, r7, #16
 8018430:	e033      	b.n	801849a <__gethex+0x3bc>
 8018432:	f04f 0a01 	mov.w	sl, #1
 8018436:	e7d0      	b.n	80183da <__gethex+0x2fc>
 8018438:	2701      	movs	r7, #1
 801843a:	e7e2      	b.n	8018402 <__gethex+0x324>
 801843c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801843e:	f1c3 0301 	rsb	r3, r3, #1
 8018442:	9315      	str	r3, [sp, #84]	; 0x54
 8018444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018446:	2b00      	cmp	r3, #0
 8018448:	d0f0      	beq.n	801842c <__gethex+0x34e>
 801844a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801844e:	f105 0314 	add.w	r3, r5, #20
 8018452:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018456:	eb03 010a 	add.w	r1, r3, sl
 801845a:	f04f 0c00 	mov.w	ip, #0
 801845e:	4618      	mov	r0, r3
 8018460:	f853 2b04 	ldr.w	r2, [r3], #4
 8018464:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018468:	d01c      	beq.n	80184a4 <__gethex+0x3c6>
 801846a:	3201      	adds	r2, #1
 801846c:	6002      	str	r2, [r0, #0]
 801846e:	2f02      	cmp	r7, #2
 8018470:	f105 0314 	add.w	r3, r5, #20
 8018474:	d138      	bne.n	80184e8 <__gethex+0x40a>
 8018476:	f8d8 2000 	ldr.w	r2, [r8]
 801847a:	3a01      	subs	r2, #1
 801847c:	42b2      	cmp	r2, r6
 801847e:	d10a      	bne.n	8018496 <__gethex+0x3b8>
 8018480:	1171      	asrs	r1, r6, #5
 8018482:	2201      	movs	r2, #1
 8018484:	f006 061f 	and.w	r6, r6, #31
 8018488:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801848c:	fa02 f606 	lsl.w	r6, r2, r6
 8018490:	421e      	tst	r6, r3
 8018492:	bf18      	it	ne
 8018494:	4617      	movne	r7, r2
 8018496:	f047 0720 	orr.w	r7, r7, #32
 801849a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801849c:	601d      	str	r5, [r3, #0]
 801849e:	9b06      	ldr	r3, [sp, #24]
 80184a0:	601c      	str	r4, [r3, #0]
 80184a2:	e6a4      	b.n	80181ee <__gethex+0x110>
 80184a4:	4299      	cmp	r1, r3
 80184a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80184aa:	d8d8      	bhi.n	801845e <__gethex+0x380>
 80184ac:	68ab      	ldr	r3, [r5, #8]
 80184ae:	4599      	cmp	r9, r3
 80184b0:	db12      	blt.n	80184d8 <__gethex+0x3fa>
 80184b2:	6869      	ldr	r1, [r5, #4]
 80184b4:	9802      	ldr	r0, [sp, #8]
 80184b6:	3101      	adds	r1, #1
 80184b8:	f000 f92f 	bl	801871a <_Balloc>
 80184bc:	692a      	ldr	r2, [r5, #16]
 80184be:	3202      	adds	r2, #2
 80184c0:	f105 010c 	add.w	r1, r5, #12
 80184c4:	4683      	mov	fp, r0
 80184c6:	0092      	lsls	r2, r2, #2
 80184c8:	300c      	adds	r0, #12
 80184ca:	f000 f91b 	bl	8018704 <memcpy>
 80184ce:	4629      	mov	r1, r5
 80184d0:	9802      	ldr	r0, [sp, #8]
 80184d2:	f000 f956 	bl	8018782 <_Bfree>
 80184d6:	465d      	mov	r5, fp
 80184d8:	692b      	ldr	r3, [r5, #16]
 80184da:	1c5a      	adds	r2, r3, #1
 80184dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80184e0:	612a      	str	r2, [r5, #16]
 80184e2:	2201      	movs	r2, #1
 80184e4:	615a      	str	r2, [r3, #20]
 80184e6:	e7c2      	b.n	801846e <__gethex+0x390>
 80184e8:	692a      	ldr	r2, [r5, #16]
 80184ea:	454a      	cmp	r2, r9
 80184ec:	dd0b      	ble.n	8018506 <__gethex+0x428>
 80184ee:	2101      	movs	r1, #1
 80184f0:	4628      	mov	r0, r5
 80184f2:	f7ff fda5 	bl	8018040 <rshift>
 80184f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80184fa:	3401      	adds	r4, #1
 80184fc:	42a3      	cmp	r3, r4
 80184fe:	f6ff aed9 	blt.w	80182b4 <__gethex+0x1d6>
 8018502:	2701      	movs	r7, #1
 8018504:	e7c7      	b.n	8018496 <__gethex+0x3b8>
 8018506:	f016 061f 	ands.w	r6, r6, #31
 801850a:	d0fa      	beq.n	8018502 <__gethex+0x424>
 801850c:	449a      	add	sl, r3
 801850e:	f1c6 0620 	rsb	r6, r6, #32
 8018512:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018516:	f000 f9c4 	bl	80188a2 <__hi0bits>
 801851a:	42b0      	cmp	r0, r6
 801851c:	dbe7      	blt.n	80184ee <__gethex+0x410>
 801851e:	e7f0      	b.n	8018502 <__gethex+0x424>

08018520 <L_shift>:
 8018520:	f1c2 0208 	rsb	r2, r2, #8
 8018524:	0092      	lsls	r2, r2, #2
 8018526:	b570      	push	{r4, r5, r6, lr}
 8018528:	f1c2 0620 	rsb	r6, r2, #32
 801852c:	6843      	ldr	r3, [r0, #4]
 801852e:	6804      	ldr	r4, [r0, #0]
 8018530:	fa03 f506 	lsl.w	r5, r3, r6
 8018534:	432c      	orrs	r4, r5
 8018536:	40d3      	lsrs	r3, r2
 8018538:	6004      	str	r4, [r0, #0]
 801853a:	f840 3f04 	str.w	r3, [r0, #4]!
 801853e:	4288      	cmp	r0, r1
 8018540:	d3f4      	bcc.n	801852c <L_shift+0xc>
 8018542:	bd70      	pop	{r4, r5, r6, pc}

08018544 <__match>:
 8018544:	b530      	push	{r4, r5, lr}
 8018546:	6803      	ldr	r3, [r0, #0]
 8018548:	3301      	adds	r3, #1
 801854a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801854e:	b914      	cbnz	r4, 8018556 <__match+0x12>
 8018550:	6003      	str	r3, [r0, #0]
 8018552:	2001      	movs	r0, #1
 8018554:	bd30      	pop	{r4, r5, pc}
 8018556:	f813 2b01 	ldrb.w	r2, [r3], #1
 801855a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801855e:	2d19      	cmp	r5, #25
 8018560:	bf98      	it	ls
 8018562:	3220      	addls	r2, #32
 8018564:	42a2      	cmp	r2, r4
 8018566:	d0f0      	beq.n	801854a <__match+0x6>
 8018568:	2000      	movs	r0, #0
 801856a:	e7f3      	b.n	8018554 <__match+0x10>

0801856c <__hexnan>:
 801856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018570:	680b      	ldr	r3, [r1, #0]
 8018572:	6801      	ldr	r1, [r0, #0]
 8018574:	115f      	asrs	r7, r3, #5
 8018576:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801857a:	f013 031f 	ands.w	r3, r3, #31
 801857e:	b087      	sub	sp, #28
 8018580:	bf18      	it	ne
 8018582:	3704      	addne	r7, #4
 8018584:	2500      	movs	r5, #0
 8018586:	1f3e      	subs	r6, r7, #4
 8018588:	4682      	mov	sl, r0
 801858a:	4690      	mov	r8, r2
 801858c:	9301      	str	r3, [sp, #4]
 801858e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018592:	46b1      	mov	r9, r6
 8018594:	4634      	mov	r4, r6
 8018596:	9502      	str	r5, [sp, #8]
 8018598:	46ab      	mov	fp, r5
 801859a:	784a      	ldrb	r2, [r1, #1]
 801859c:	1c4b      	adds	r3, r1, #1
 801859e:	9303      	str	r3, [sp, #12]
 80185a0:	b342      	cbz	r2, 80185f4 <__hexnan+0x88>
 80185a2:	4610      	mov	r0, r2
 80185a4:	9105      	str	r1, [sp, #20]
 80185a6:	9204      	str	r2, [sp, #16]
 80185a8:	f7ff fd84 	bl	80180b4 <__hexdig_fun>
 80185ac:	2800      	cmp	r0, #0
 80185ae:	d143      	bne.n	8018638 <__hexnan+0xcc>
 80185b0:	9a04      	ldr	r2, [sp, #16]
 80185b2:	9905      	ldr	r1, [sp, #20]
 80185b4:	2a20      	cmp	r2, #32
 80185b6:	d818      	bhi.n	80185ea <__hexnan+0x7e>
 80185b8:	9b02      	ldr	r3, [sp, #8]
 80185ba:	459b      	cmp	fp, r3
 80185bc:	dd13      	ble.n	80185e6 <__hexnan+0x7a>
 80185be:	454c      	cmp	r4, r9
 80185c0:	d206      	bcs.n	80185d0 <__hexnan+0x64>
 80185c2:	2d07      	cmp	r5, #7
 80185c4:	dc04      	bgt.n	80185d0 <__hexnan+0x64>
 80185c6:	462a      	mov	r2, r5
 80185c8:	4649      	mov	r1, r9
 80185ca:	4620      	mov	r0, r4
 80185cc:	f7ff ffa8 	bl	8018520 <L_shift>
 80185d0:	4544      	cmp	r4, r8
 80185d2:	d944      	bls.n	801865e <__hexnan+0xf2>
 80185d4:	2300      	movs	r3, #0
 80185d6:	f1a4 0904 	sub.w	r9, r4, #4
 80185da:	f844 3c04 	str.w	r3, [r4, #-4]
 80185de:	f8cd b008 	str.w	fp, [sp, #8]
 80185e2:	464c      	mov	r4, r9
 80185e4:	461d      	mov	r5, r3
 80185e6:	9903      	ldr	r1, [sp, #12]
 80185e8:	e7d7      	b.n	801859a <__hexnan+0x2e>
 80185ea:	2a29      	cmp	r2, #41	; 0x29
 80185ec:	d14a      	bne.n	8018684 <__hexnan+0x118>
 80185ee:	3102      	adds	r1, #2
 80185f0:	f8ca 1000 	str.w	r1, [sl]
 80185f4:	f1bb 0f00 	cmp.w	fp, #0
 80185f8:	d044      	beq.n	8018684 <__hexnan+0x118>
 80185fa:	454c      	cmp	r4, r9
 80185fc:	d206      	bcs.n	801860c <__hexnan+0xa0>
 80185fe:	2d07      	cmp	r5, #7
 8018600:	dc04      	bgt.n	801860c <__hexnan+0xa0>
 8018602:	462a      	mov	r2, r5
 8018604:	4649      	mov	r1, r9
 8018606:	4620      	mov	r0, r4
 8018608:	f7ff ff8a 	bl	8018520 <L_shift>
 801860c:	4544      	cmp	r4, r8
 801860e:	d928      	bls.n	8018662 <__hexnan+0xf6>
 8018610:	4643      	mov	r3, r8
 8018612:	f854 2b04 	ldr.w	r2, [r4], #4
 8018616:	f843 2b04 	str.w	r2, [r3], #4
 801861a:	42a6      	cmp	r6, r4
 801861c:	d2f9      	bcs.n	8018612 <__hexnan+0xa6>
 801861e:	2200      	movs	r2, #0
 8018620:	f843 2b04 	str.w	r2, [r3], #4
 8018624:	429e      	cmp	r6, r3
 8018626:	d2fb      	bcs.n	8018620 <__hexnan+0xb4>
 8018628:	6833      	ldr	r3, [r6, #0]
 801862a:	b91b      	cbnz	r3, 8018634 <__hexnan+0xc8>
 801862c:	4546      	cmp	r6, r8
 801862e:	d127      	bne.n	8018680 <__hexnan+0x114>
 8018630:	2301      	movs	r3, #1
 8018632:	6033      	str	r3, [r6, #0]
 8018634:	2005      	movs	r0, #5
 8018636:	e026      	b.n	8018686 <__hexnan+0x11a>
 8018638:	3501      	adds	r5, #1
 801863a:	2d08      	cmp	r5, #8
 801863c:	f10b 0b01 	add.w	fp, fp, #1
 8018640:	dd06      	ble.n	8018650 <__hexnan+0xe4>
 8018642:	4544      	cmp	r4, r8
 8018644:	d9cf      	bls.n	80185e6 <__hexnan+0x7a>
 8018646:	2300      	movs	r3, #0
 8018648:	f844 3c04 	str.w	r3, [r4, #-4]
 801864c:	2501      	movs	r5, #1
 801864e:	3c04      	subs	r4, #4
 8018650:	6822      	ldr	r2, [r4, #0]
 8018652:	f000 000f 	and.w	r0, r0, #15
 8018656:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801865a:	6020      	str	r0, [r4, #0]
 801865c:	e7c3      	b.n	80185e6 <__hexnan+0x7a>
 801865e:	2508      	movs	r5, #8
 8018660:	e7c1      	b.n	80185e6 <__hexnan+0x7a>
 8018662:	9b01      	ldr	r3, [sp, #4]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d0df      	beq.n	8018628 <__hexnan+0xbc>
 8018668:	f04f 32ff 	mov.w	r2, #4294967295
 801866c:	f1c3 0320 	rsb	r3, r3, #32
 8018670:	fa22 f303 	lsr.w	r3, r2, r3
 8018674:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018678:	401a      	ands	r2, r3
 801867a:	f847 2c04 	str.w	r2, [r7, #-4]
 801867e:	e7d3      	b.n	8018628 <__hexnan+0xbc>
 8018680:	3e04      	subs	r6, #4
 8018682:	e7d1      	b.n	8018628 <__hexnan+0xbc>
 8018684:	2004      	movs	r0, #4
 8018686:	b007      	add	sp, #28
 8018688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801868c <__locale_ctype_ptr_l>:
 801868c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018690:	4770      	bx	lr
	...

08018694 <__locale_ctype_ptr>:
 8018694:	4b04      	ldr	r3, [pc, #16]	; (80186a8 <__locale_ctype_ptr+0x14>)
 8018696:	4a05      	ldr	r2, [pc, #20]	; (80186ac <__locale_ctype_ptr+0x18>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	6a1b      	ldr	r3, [r3, #32]
 801869c:	2b00      	cmp	r3, #0
 801869e:	bf08      	it	eq
 80186a0:	4613      	moveq	r3, r2
 80186a2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80186a6:	4770      	bx	lr
 80186a8:	2000000c 	.word	0x2000000c
 80186ac:	20000070 	.word	0x20000070

080186b0 <__localeconv_l>:
 80186b0:	30f0      	adds	r0, #240	; 0xf0
 80186b2:	4770      	bx	lr

080186b4 <_localeconv_r>:
 80186b4:	4b04      	ldr	r3, [pc, #16]	; (80186c8 <_localeconv_r+0x14>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	6a18      	ldr	r0, [r3, #32]
 80186ba:	4b04      	ldr	r3, [pc, #16]	; (80186cc <_localeconv_r+0x18>)
 80186bc:	2800      	cmp	r0, #0
 80186be:	bf08      	it	eq
 80186c0:	4618      	moveq	r0, r3
 80186c2:	30f0      	adds	r0, #240	; 0xf0
 80186c4:	4770      	bx	lr
 80186c6:	bf00      	nop
 80186c8:	2000000c 	.word	0x2000000c
 80186cc:	20000070 	.word	0x20000070

080186d0 <malloc>:
 80186d0:	4b02      	ldr	r3, [pc, #8]	; (80186dc <malloc+0xc>)
 80186d2:	4601      	mov	r1, r0
 80186d4:	6818      	ldr	r0, [r3, #0]
 80186d6:	f000 bc7b 	b.w	8018fd0 <_malloc_r>
 80186da:	bf00      	nop
 80186dc:	2000000c 	.word	0x2000000c

080186e0 <__ascii_mbtowc>:
 80186e0:	b082      	sub	sp, #8
 80186e2:	b901      	cbnz	r1, 80186e6 <__ascii_mbtowc+0x6>
 80186e4:	a901      	add	r1, sp, #4
 80186e6:	b142      	cbz	r2, 80186fa <__ascii_mbtowc+0x1a>
 80186e8:	b14b      	cbz	r3, 80186fe <__ascii_mbtowc+0x1e>
 80186ea:	7813      	ldrb	r3, [r2, #0]
 80186ec:	600b      	str	r3, [r1, #0]
 80186ee:	7812      	ldrb	r2, [r2, #0]
 80186f0:	1c10      	adds	r0, r2, #0
 80186f2:	bf18      	it	ne
 80186f4:	2001      	movne	r0, #1
 80186f6:	b002      	add	sp, #8
 80186f8:	4770      	bx	lr
 80186fa:	4610      	mov	r0, r2
 80186fc:	e7fb      	b.n	80186f6 <__ascii_mbtowc+0x16>
 80186fe:	f06f 0001 	mvn.w	r0, #1
 8018702:	e7f8      	b.n	80186f6 <__ascii_mbtowc+0x16>

08018704 <memcpy>:
 8018704:	b510      	push	{r4, lr}
 8018706:	1e43      	subs	r3, r0, #1
 8018708:	440a      	add	r2, r1
 801870a:	4291      	cmp	r1, r2
 801870c:	d100      	bne.n	8018710 <memcpy+0xc>
 801870e:	bd10      	pop	{r4, pc}
 8018710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018718:	e7f7      	b.n	801870a <memcpy+0x6>

0801871a <_Balloc>:
 801871a:	b570      	push	{r4, r5, r6, lr}
 801871c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801871e:	4604      	mov	r4, r0
 8018720:	460e      	mov	r6, r1
 8018722:	b93d      	cbnz	r5, 8018734 <_Balloc+0x1a>
 8018724:	2010      	movs	r0, #16
 8018726:	f7ff ffd3 	bl	80186d0 <malloc>
 801872a:	6260      	str	r0, [r4, #36]	; 0x24
 801872c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018730:	6005      	str	r5, [r0, #0]
 8018732:	60c5      	str	r5, [r0, #12]
 8018734:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018736:	68eb      	ldr	r3, [r5, #12]
 8018738:	b183      	cbz	r3, 801875c <_Balloc+0x42>
 801873a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801873c:	68db      	ldr	r3, [r3, #12]
 801873e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018742:	b9b8      	cbnz	r0, 8018774 <_Balloc+0x5a>
 8018744:	2101      	movs	r1, #1
 8018746:	fa01 f506 	lsl.w	r5, r1, r6
 801874a:	1d6a      	adds	r2, r5, #5
 801874c:	0092      	lsls	r2, r2, #2
 801874e:	4620      	mov	r0, r4
 8018750:	f000 fbe1 	bl	8018f16 <_calloc_r>
 8018754:	b160      	cbz	r0, 8018770 <_Balloc+0x56>
 8018756:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801875a:	e00e      	b.n	801877a <_Balloc+0x60>
 801875c:	2221      	movs	r2, #33	; 0x21
 801875e:	2104      	movs	r1, #4
 8018760:	4620      	mov	r0, r4
 8018762:	f000 fbd8 	bl	8018f16 <_calloc_r>
 8018766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018768:	60e8      	str	r0, [r5, #12]
 801876a:	68db      	ldr	r3, [r3, #12]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d1e4      	bne.n	801873a <_Balloc+0x20>
 8018770:	2000      	movs	r0, #0
 8018772:	bd70      	pop	{r4, r5, r6, pc}
 8018774:	6802      	ldr	r2, [r0, #0]
 8018776:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801877a:	2300      	movs	r3, #0
 801877c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018780:	e7f7      	b.n	8018772 <_Balloc+0x58>

08018782 <_Bfree>:
 8018782:	b570      	push	{r4, r5, r6, lr}
 8018784:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018786:	4606      	mov	r6, r0
 8018788:	460d      	mov	r5, r1
 801878a:	b93c      	cbnz	r4, 801879c <_Bfree+0x1a>
 801878c:	2010      	movs	r0, #16
 801878e:	f7ff ff9f 	bl	80186d0 <malloc>
 8018792:	6270      	str	r0, [r6, #36]	; 0x24
 8018794:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018798:	6004      	str	r4, [r0, #0]
 801879a:	60c4      	str	r4, [r0, #12]
 801879c:	b13d      	cbz	r5, 80187ae <_Bfree+0x2c>
 801879e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80187a0:	686a      	ldr	r2, [r5, #4]
 80187a2:	68db      	ldr	r3, [r3, #12]
 80187a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80187a8:	6029      	str	r1, [r5, #0]
 80187aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80187ae:	bd70      	pop	{r4, r5, r6, pc}

080187b0 <__multadd>:
 80187b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187b4:	690d      	ldr	r5, [r1, #16]
 80187b6:	461f      	mov	r7, r3
 80187b8:	4606      	mov	r6, r0
 80187ba:	460c      	mov	r4, r1
 80187bc:	f101 0c14 	add.w	ip, r1, #20
 80187c0:	2300      	movs	r3, #0
 80187c2:	f8dc 0000 	ldr.w	r0, [ip]
 80187c6:	b281      	uxth	r1, r0
 80187c8:	fb02 7101 	mla	r1, r2, r1, r7
 80187cc:	0c0f      	lsrs	r7, r1, #16
 80187ce:	0c00      	lsrs	r0, r0, #16
 80187d0:	fb02 7000 	mla	r0, r2, r0, r7
 80187d4:	b289      	uxth	r1, r1
 80187d6:	3301      	adds	r3, #1
 80187d8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80187dc:	429d      	cmp	r5, r3
 80187de:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80187e2:	f84c 1b04 	str.w	r1, [ip], #4
 80187e6:	dcec      	bgt.n	80187c2 <__multadd+0x12>
 80187e8:	b1d7      	cbz	r7, 8018820 <__multadd+0x70>
 80187ea:	68a3      	ldr	r3, [r4, #8]
 80187ec:	42ab      	cmp	r3, r5
 80187ee:	dc12      	bgt.n	8018816 <__multadd+0x66>
 80187f0:	6861      	ldr	r1, [r4, #4]
 80187f2:	4630      	mov	r0, r6
 80187f4:	3101      	adds	r1, #1
 80187f6:	f7ff ff90 	bl	801871a <_Balloc>
 80187fa:	6922      	ldr	r2, [r4, #16]
 80187fc:	3202      	adds	r2, #2
 80187fe:	f104 010c 	add.w	r1, r4, #12
 8018802:	4680      	mov	r8, r0
 8018804:	0092      	lsls	r2, r2, #2
 8018806:	300c      	adds	r0, #12
 8018808:	f7ff ff7c 	bl	8018704 <memcpy>
 801880c:	4621      	mov	r1, r4
 801880e:	4630      	mov	r0, r6
 8018810:	f7ff ffb7 	bl	8018782 <_Bfree>
 8018814:	4644      	mov	r4, r8
 8018816:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801881a:	3501      	adds	r5, #1
 801881c:	615f      	str	r7, [r3, #20]
 801881e:	6125      	str	r5, [r4, #16]
 8018820:	4620      	mov	r0, r4
 8018822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018826 <__s2b>:
 8018826:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801882a:	460c      	mov	r4, r1
 801882c:	4615      	mov	r5, r2
 801882e:	461f      	mov	r7, r3
 8018830:	2209      	movs	r2, #9
 8018832:	3308      	adds	r3, #8
 8018834:	4606      	mov	r6, r0
 8018836:	fb93 f3f2 	sdiv	r3, r3, r2
 801883a:	2100      	movs	r1, #0
 801883c:	2201      	movs	r2, #1
 801883e:	429a      	cmp	r2, r3
 8018840:	db20      	blt.n	8018884 <__s2b+0x5e>
 8018842:	4630      	mov	r0, r6
 8018844:	f7ff ff69 	bl	801871a <_Balloc>
 8018848:	9b08      	ldr	r3, [sp, #32]
 801884a:	6143      	str	r3, [r0, #20]
 801884c:	2d09      	cmp	r5, #9
 801884e:	f04f 0301 	mov.w	r3, #1
 8018852:	6103      	str	r3, [r0, #16]
 8018854:	dd19      	ble.n	801888a <__s2b+0x64>
 8018856:	f104 0809 	add.w	r8, r4, #9
 801885a:	46c1      	mov	r9, r8
 801885c:	442c      	add	r4, r5
 801885e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018862:	4601      	mov	r1, r0
 8018864:	3b30      	subs	r3, #48	; 0x30
 8018866:	220a      	movs	r2, #10
 8018868:	4630      	mov	r0, r6
 801886a:	f7ff ffa1 	bl	80187b0 <__multadd>
 801886e:	45a1      	cmp	r9, r4
 8018870:	d1f5      	bne.n	801885e <__s2b+0x38>
 8018872:	eb08 0405 	add.w	r4, r8, r5
 8018876:	3c08      	subs	r4, #8
 8018878:	1b2d      	subs	r5, r5, r4
 801887a:	1963      	adds	r3, r4, r5
 801887c:	42bb      	cmp	r3, r7
 801887e:	db07      	blt.n	8018890 <__s2b+0x6a>
 8018880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018884:	0052      	lsls	r2, r2, #1
 8018886:	3101      	adds	r1, #1
 8018888:	e7d9      	b.n	801883e <__s2b+0x18>
 801888a:	340a      	adds	r4, #10
 801888c:	2509      	movs	r5, #9
 801888e:	e7f3      	b.n	8018878 <__s2b+0x52>
 8018890:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018894:	4601      	mov	r1, r0
 8018896:	3b30      	subs	r3, #48	; 0x30
 8018898:	220a      	movs	r2, #10
 801889a:	4630      	mov	r0, r6
 801889c:	f7ff ff88 	bl	80187b0 <__multadd>
 80188a0:	e7eb      	b.n	801887a <__s2b+0x54>

080188a2 <__hi0bits>:
 80188a2:	0c02      	lsrs	r2, r0, #16
 80188a4:	0412      	lsls	r2, r2, #16
 80188a6:	4603      	mov	r3, r0
 80188a8:	b9b2      	cbnz	r2, 80188d8 <__hi0bits+0x36>
 80188aa:	0403      	lsls	r3, r0, #16
 80188ac:	2010      	movs	r0, #16
 80188ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80188b2:	bf04      	itt	eq
 80188b4:	021b      	lsleq	r3, r3, #8
 80188b6:	3008      	addeq	r0, #8
 80188b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80188bc:	bf04      	itt	eq
 80188be:	011b      	lsleq	r3, r3, #4
 80188c0:	3004      	addeq	r0, #4
 80188c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80188c6:	bf04      	itt	eq
 80188c8:	009b      	lsleq	r3, r3, #2
 80188ca:	3002      	addeq	r0, #2
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	db06      	blt.n	80188de <__hi0bits+0x3c>
 80188d0:	005b      	lsls	r3, r3, #1
 80188d2:	d503      	bpl.n	80188dc <__hi0bits+0x3a>
 80188d4:	3001      	adds	r0, #1
 80188d6:	4770      	bx	lr
 80188d8:	2000      	movs	r0, #0
 80188da:	e7e8      	b.n	80188ae <__hi0bits+0xc>
 80188dc:	2020      	movs	r0, #32
 80188de:	4770      	bx	lr

080188e0 <__lo0bits>:
 80188e0:	6803      	ldr	r3, [r0, #0]
 80188e2:	f013 0207 	ands.w	r2, r3, #7
 80188e6:	4601      	mov	r1, r0
 80188e8:	d00b      	beq.n	8018902 <__lo0bits+0x22>
 80188ea:	07da      	lsls	r2, r3, #31
 80188ec:	d423      	bmi.n	8018936 <__lo0bits+0x56>
 80188ee:	0798      	lsls	r0, r3, #30
 80188f0:	bf49      	itett	mi
 80188f2:	085b      	lsrmi	r3, r3, #1
 80188f4:	089b      	lsrpl	r3, r3, #2
 80188f6:	2001      	movmi	r0, #1
 80188f8:	600b      	strmi	r3, [r1, #0]
 80188fa:	bf5c      	itt	pl
 80188fc:	600b      	strpl	r3, [r1, #0]
 80188fe:	2002      	movpl	r0, #2
 8018900:	4770      	bx	lr
 8018902:	b298      	uxth	r0, r3
 8018904:	b9a8      	cbnz	r0, 8018932 <__lo0bits+0x52>
 8018906:	0c1b      	lsrs	r3, r3, #16
 8018908:	2010      	movs	r0, #16
 801890a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801890e:	bf04      	itt	eq
 8018910:	0a1b      	lsreq	r3, r3, #8
 8018912:	3008      	addeq	r0, #8
 8018914:	071a      	lsls	r2, r3, #28
 8018916:	bf04      	itt	eq
 8018918:	091b      	lsreq	r3, r3, #4
 801891a:	3004      	addeq	r0, #4
 801891c:	079a      	lsls	r2, r3, #30
 801891e:	bf04      	itt	eq
 8018920:	089b      	lsreq	r3, r3, #2
 8018922:	3002      	addeq	r0, #2
 8018924:	07da      	lsls	r2, r3, #31
 8018926:	d402      	bmi.n	801892e <__lo0bits+0x4e>
 8018928:	085b      	lsrs	r3, r3, #1
 801892a:	d006      	beq.n	801893a <__lo0bits+0x5a>
 801892c:	3001      	adds	r0, #1
 801892e:	600b      	str	r3, [r1, #0]
 8018930:	4770      	bx	lr
 8018932:	4610      	mov	r0, r2
 8018934:	e7e9      	b.n	801890a <__lo0bits+0x2a>
 8018936:	2000      	movs	r0, #0
 8018938:	4770      	bx	lr
 801893a:	2020      	movs	r0, #32
 801893c:	4770      	bx	lr

0801893e <__i2b>:
 801893e:	b510      	push	{r4, lr}
 8018940:	460c      	mov	r4, r1
 8018942:	2101      	movs	r1, #1
 8018944:	f7ff fee9 	bl	801871a <_Balloc>
 8018948:	2201      	movs	r2, #1
 801894a:	6144      	str	r4, [r0, #20]
 801894c:	6102      	str	r2, [r0, #16]
 801894e:	bd10      	pop	{r4, pc}

08018950 <__multiply>:
 8018950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018954:	4614      	mov	r4, r2
 8018956:	690a      	ldr	r2, [r1, #16]
 8018958:	6923      	ldr	r3, [r4, #16]
 801895a:	429a      	cmp	r2, r3
 801895c:	bfb8      	it	lt
 801895e:	460b      	movlt	r3, r1
 8018960:	4688      	mov	r8, r1
 8018962:	bfbc      	itt	lt
 8018964:	46a0      	movlt	r8, r4
 8018966:	461c      	movlt	r4, r3
 8018968:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801896c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018970:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018974:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018978:	eb07 0609 	add.w	r6, r7, r9
 801897c:	42b3      	cmp	r3, r6
 801897e:	bfb8      	it	lt
 8018980:	3101      	addlt	r1, #1
 8018982:	f7ff feca 	bl	801871a <_Balloc>
 8018986:	f100 0514 	add.w	r5, r0, #20
 801898a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801898e:	462b      	mov	r3, r5
 8018990:	2200      	movs	r2, #0
 8018992:	4573      	cmp	r3, lr
 8018994:	d316      	bcc.n	80189c4 <__multiply+0x74>
 8018996:	f104 0214 	add.w	r2, r4, #20
 801899a:	f108 0114 	add.w	r1, r8, #20
 801899e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80189a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	9b00      	ldr	r3, [sp, #0]
 80189aa:	9201      	str	r2, [sp, #4]
 80189ac:	4293      	cmp	r3, r2
 80189ae:	d80c      	bhi.n	80189ca <__multiply+0x7a>
 80189b0:	2e00      	cmp	r6, #0
 80189b2:	dd03      	ble.n	80189bc <__multiply+0x6c>
 80189b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d05d      	beq.n	8018a78 <__multiply+0x128>
 80189bc:	6106      	str	r6, [r0, #16]
 80189be:	b003      	add	sp, #12
 80189c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c4:	f843 2b04 	str.w	r2, [r3], #4
 80189c8:	e7e3      	b.n	8018992 <__multiply+0x42>
 80189ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80189ce:	f1bb 0f00 	cmp.w	fp, #0
 80189d2:	d023      	beq.n	8018a1c <__multiply+0xcc>
 80189d4:	4689      	mov	r9, r1
 80189d6:	46ac      	mov	ip, r5
 80189d8:	f04f 0800 	mov.w	r8, #0
 80189dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80189e0:	f8dc a000 	ldr.w	sl, [ip]
 80189e4:	b2a3      	uxth	r3, r4
 80189e6:	fa1f fa8a 	uxth.w	sl, sl
 80189ea:	fb0b a303 	mla	r3, fp, r3, sl
 80189ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80189f2:	f8dc 4000 	ldr.w	r4, [ip]
 80189f6:	4443      	add	r3, r8
 80189f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80189fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8018a00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018a04:	46e2      	mov	sl, ip
 8018a06:	b29b      	uxth	r3, r3
 8018a08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a0c:	454f      	cmp	r7, r9
 8018a0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a12:	f84a 3b04 	str.w	r3, [sl], #4
 8018a16:	d82b      	bhi.n	8018a70 <__multiply+0x120>
 8018a18:	f8cc 8004 	str.w	r8, [ip, #4]
 8018a1c:	9b01      	ldr	r3, [sp, #4]
 8018a1e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018a22:	3204      	adds	r2, #4
 8018a24:	f1ba 0f00 	cmp.w	sl, #0
 8018a28:	d020      	beq.n	8018a6c <__multiply+0x11c>
 8018a2a:	682b      	ldr	r3, [r5, #0]
 8018a2c:	4689      	mov	r9, r1
 8018a2e:	46a8      	mov	r8, r5
 8018a30:	f04f 0b00 	mov.w	fp, #0
 8018a34:	f8b9 c000 	ldrh.w	ip, [r9]
 8018a38:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018a3c:	fb0a 440c 	mla	r4, sl, ip, r4
 8018a40:	445c      	add	r4, fp
 8018a42:	46c4      	mov	ip, r8
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a4a:	f84c 3b04 	str.w	r3, [ip], #4
 8018a4e:	f859 3b04 	ldr.w	r3, [r9], #4
 8018a52:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018a56:	0c1b      	lsrs	r3, r3, #16
 8018a58:	fb0a b303 	mla	r3, sl, r3, fp
 8018a5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018a60:	454f      	cmp	r7, r9
 8018a62:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018a66:	d805      	bhi.n	8018a74 <__multiply+0x124>
 8018a68:	f8c8 3004 	str.w	r3, [r8, #4]
 8018a6c:	3504      	adds	r5, #4
 8018a6e:	e79b      	b.n	80189a8 <__multiply+0x58>
 8018a70:	46d4      	mov	ip, sl
 8018a72:	e7b3      	b.n	80189dc <__multiply+0x8c>
 8018a74:	46e0      	mov	r8, ip
 8018a76:	e7dd      	b.n	8018a34 <__multiply+0xe4>
 8018a78:	3e01      	subs	r6, #1
 8018a7a:	e799      	b.n	80189b0 <__multiply+0x60>

08018a7c <__pow5mult>:
 8018a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a80:	4615      	mov	r5, r2
 8018a82:	f012 0203 	ands.w	r2, r2, #3
 8018a86:	4606      	mov	r6, r0
 8018a88:	460f      	mov	r7, r1
 8018a8a:	d007      	beq.n	8018a9c <__pow5mult+0x20>
 8018a8c:	3a01      	subs	r2, #1
 8018a8e:	4c21      	ldr	r4, [pc, #132]	; (8018b14 <__pow5mult+0x98>)
 8018a90:	2300      	movs	r3, #0
 8018a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a96:	f7ff fe8b 	bl	80187b0 <__multadd>
 8018a9a:	4607      	mov	r7, r0
 8018a9c:	10ad      	asrs	r5, r5, #2
 8018a9e:	d035      	beq.n	8018b0c <__pow5mult+0x90>
 8018aa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018aa2:	b93c      	cbnz	r4, 8018ab4 <__pow5mult+0x38>
 8018aa4:	2010      	movs	r0, #16
 8018aa6:	f7ff fe13 	bl	80186d0 <malloc>
 8018aaa:	6270      	str	r0, [r6, #36]	; 0x24
 8018aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ab0:	6004      	str	r4, [r0, #0]
 8018ab2:	60c4      	str	r4, [r0, #12]
 8018ab4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018abc:	b94c      	cbnz	r4, 8018ad2 <__pow5mult+0x56>
 8018abe:	f240 2171 	movw	r1, #625	; 0x271
 8018ac2:	4630      	mov	r0, r6
 8018ac4:	f7ff ff3b 	bl	801893e <__i2b>
 8018ac8:	2300      	movs	r3, #0
 8018aca:	f8c8 0008 	str.w	r0, [r8, #8]
 8018ace:	4604      	mov	r4, r0
 8018ad0:	6003      	str	r3, [r0, #0]
 8018ad2:	f04f 0800 	mov.w	r8, #0
 8018ad6:	07eb      	lsls	r3, r5, #31
 8018ad8:	d50a      	bpl.n	8018af0 <__pow5mult+0x74>
 8018ada:	4639      	mov	r1, r7
 8018adc:	4622      	mov	r2, r4
 8018ade:	4630      	mov	r0, r6
 8018ae0:	f7ff ff36 	bl	8018950 <__multiply>
 8018ae4:	4639      	mov	r1, r7
 8018ae6:	4681      	mov	r9, r0
 8018ae8:	4630      	mov	r0, r6
 8018aea:	f7ff fe4a 	bl	8018782 <_Bfree>
 8018aee:	464f      	mov	r7, r9
 8018af0:	106d      	asrs	r5, r5, #1
 8018af2:	d00b      	beq.n	8018b0c <__pow5mult+0x90>
 8018af4:	6820      	ldr	r0, [r4, #0]
 8018af6:	b938      	cbnz	r0, 8018b08 <__pow5mult+0x8c>
 8018af8:	4622      	mov	r2, r4
 8018afa:	4621      	mov	r1, r4
 8018afc:	4630      	mov	r0, r6
 8018afe:	f7ff ff27 	bl	8018950 <__multiply>
 8018b02:	6020      	str	r0, [r4, #0]
 8018b04:	f8c0 8000 	str.w	r8, [r0]
 8018b08:	4604      	mov	r4, r0
 8018b0a:	e7e4      	b.n	8018ad6 <__pow5mult+0x5a>
 8018b0c:	4638      	mov	r0, r7
 8018b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b12:	bf00      	nop
 8018b14:	0801a498 	.word	0x0801a498

08018b18 <__lshift>:
 8018b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b1c:	460c      	mov	r4, r1
 8018b1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b22:	6923      	ldr	r3, [r4, #16]
 8018b24:	6849      	ldr	r1, [r1, #4]
 8018b26:	eb0a 0903 	add.w	r9, sl, r3
 8018b2a:	68a3      	ldr	r3, [r4, #8]
 8018b2c:	4607      	mov	r7, r0
 8018b2e:	4616      	mov	r6, r2
 8018b30:	f109 0501 	add.w	r5, r9, #1
 8018b34:	42ab      	cmp	r3, r5
 8018b36:	db32      	blt.n	8018b9e <__lshift+0x86>
 8018b38:	4638      	mov	r0, r7
 8018b3a:	f7ff fdee 	bl	801871a <_Balloc>
 8018b3e:	2300      	movs	r3, #0
 8018b40:	4680      	mov	r8, r0
 8018b42:	f100 0114 	add.w	r1, r0, #20
 8018b46:	461a      	mov	r2, r3
 8018b48:	4553      	cmp	r3, sl
 8018b4a:	db2b      	blt.n	8018ba4 <__lshift+0x8c>
 8018b4c:	6920      	ldr	r0, [r4, #16]
 8018b4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018b52:	f104 0314 	add.w	r3, r4, #20
 8018b56:	f016 021f 	ands.w	r2, r6, #31
 8018b5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b62:	d025      	beq.n	8018bb0 <__lshift+0x98>
 8018b64:	f1c2 0e20 	rsb	lr, r2, #32
 8018b68:	2000      	movs	r0, #0
 8018b6a:	681e      	ldr	r6, [r3, #0]
 8018b6c:	468a      	mov	sl, r1
 8018b6e:	4096      	lsls	r6, r2
 8018b70:	4330      	orrs	r0, r6
 8018b72:	f84a 0b04 	str.w	r0, [sl], #4
 8018b76:	f853 0b04 	ldr.w	r0, [r3], #4
 8018b7a:	459c      	cmp	ip, r3
 8018b7c:	fa20 f00e 	lsr.w	r0, r0, lr
 8018b80:	d814      	bhi.n	8018bac <__lshift+0x94>
 8018b82:	6048      	str	r0, [r1, #4]
 8018b84:	b108      	cbz	r0, 8018b8a <__lshift+0x72>
 8018b86:	f109 0502 	add.w	r5, r9, #2
 8018b8a:	3d01      	subs	r5, #1
 8018b8c:	4638      	mov	r0, r7
 8018b8e:	f8c8 5010 	str.w	r5, [r8, #16]
 8018b92:	4621      	mov	r1, r4
 8018b94:	f7ff fdf5 	bl	8018782 <_Bfree>
 8018b98:	4640      	mov	r0, r8
 8018b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b9e:	3101      	adds	r1, #1
 8018ba0:	005b      	lsls	r3, r3, #1
 8018ba2:	e7c7      	b.n	8018b34 <__lshift+0x1c>
 8018ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018ba8:	3301      	adds	r3, #1
 8018baa:	e7cd      	b.n	8018b48 <__lshift+0x30>
 8018bac:	4651      	mov	r1, sl
 8018bae:	e7dc      	b.n	8018b6a <__lshift+0x52>
 8018bb0:	3904      	subs	r1, #4
 8018bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8018bba:	459c      	cmp	ip, r3
 8018bbc:	d8f9      	bhi.n	8018bb2 <__lshift+0x9a>
 8018bbe:	e7e4      	b.n	8018b8a <__lshift+0x72>

08018bc0 <__mcmp>:
 8018bc0:	6903      	ldr	r3, [r0, #16]
 8018bc2:	690a      	ldr	r2, [r1, #16]
 8018bc4:	1a9b      	subs	r3, r3, r2
 8018bc6:	b530      	push	{r4, r5, lr}
 8018bc8:	d10c      	bne.n	8018be4 <__mcmp+0x24>
 8018bca:	0092      	lsls	r2, r2, #2
 8018bcc:	3014      	adds	r0, #20
 8018bce:	3114      	adds	r1, #20
 8018bd0:	1884      	adds	r4, r0, r2
 8018bd2:	4411      	add	r1, r2
 8018bd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018bd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018bdc:	4295      	cmp	r5, r2
 8018bde:	d003      	beq.n	8018be8 <__mcmp+0x28>
 8018be0:	d305      	bcc.n	8018bee <__mcmp+0x2e>
 8018be2:	2301      	movs	r3, #1
 8018be4:	4618      	mov	r0, r3
 8018be6:	bd30      	pop	{r4, r5, pc}
 8018be8:	42a0      	cmp	r0, r4
 8018bea:	d3f3      	bcc.n	8018bd4 <__mcmp+0x14>
 8018bec:	e7fa      	b.n	8018be4 <__mcmp+0x24>
 8018bee:	f04f 33ff 	mov.w	r3, #4294967295
 8018bf2:	e7f7      	b.n	8018be4 <__mcmp+0x24>

08018bf4 <__mdiff>:
 8018bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bf8:	460d      	mov	r5, r1
 8018bfa:	4607      	mov	r7, r0
 8018bfc:	4611      	mov	r1, r2
 8018bfe:	4628      	mov	r0, r5
 8018c00:	4614      	mov	r4, r2
 8018c02:	f7ff ffdd 	bl	8018bc0 <__mcmp>
 8018c06:	1e06      	subs	r6, r0, #0
 8018c08:	d108      	bne.n	8018c1c <__mdiff+0x28>
 8018c0a:	4631      	mov	r1, r6
 8018c0c:	4638      	mov	r0, r7
 8018c0e:	f7ff fd84 	bl	801871a <_Balloc>
 8018c12:	2301      	movs	r3, #1
 8018c14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c1c:	bfa4      	itt	ge
 8018c1e:	4623      	movge	r3, r4
 8018c20:	462c      	movge	r4, r5
 8018c22:	4638      	mov	r0, r7
 8018c24:	6861      	ldr	r1, [r4, #4]
 8018c26:	bfa6      	itte	ge
 8018c28:	461d      	movge	r5, r3
 8018c2a:	2600      	movge	r6, #0
 8018c2c:	2601      	movlt	r6, #1
 8018c2e:	f7ff fd74 	bl	801871a <_Balloc>
 8018c32:	692b      	ldr	r3, [r5, #16]
 8018c34:	60c6      	str	r6, [r0, #12]
 8018c36:	6926      	ldr	r6, [r4, #16]
 8018c38:	f105 0914 	add.w	r9, r5, #20
 8018c3c:	f104 0214 	add.w	r2, r4, #20
 8018c40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018c44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018c48:	f100 0514 	add.w	r5, r0, #20
 8018c4c:	f04f 0e00 	mov.w	lr, #0
 8018c50:	f852 ab04 	ldr.w	sl, [r2], #4
 8018c54:	f859 4b04 	ldr.w	r4, [r9], #4
 8018c58:	fa1e f18a 	uxtah	r1, lr, sl
 8018c5c:	b2a3      	uxth	r3, r4
 8018c5e:	1ac9      	subs	r1, r1, r3
 8018c60:	0c23      	lsrs	r3, r4, #16
 8018c62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018c66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018c6a:	b289      	uxth	r1, r1
 8018c6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018c70:	45c8      	cmp	r8, r9
 8018c72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018c76:	4694      	mov	ip, r2
 8018c78:	f845 3b04 	str.w	r3, [r5], #4
 8018c7c:	d8e8      	bhi.n	8018c50 <__mdiff+0x5c>
 8018c7e:	45bc      	cmp	ip, r7
 8018c80:	d304      	bcc.n	8018c8c <__mdiff+0x98>
 8018c82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018c86:	b183      	cbz	r3, 8018caa <__mdiff+0xb6>
 8018c88:	6106      	str	r6, [r0, #16]
 8018c8a:	e7c5      	b.n	8018c18 <__mdiff+0x24>
 8018c8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018c90:	fa1e f381 	uxtah	r3, lr, r1
 8018c94:	141a      	asrs	r2, r3, #16
 8018c96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ca0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018ca4:	f845 3b04 	str.w	r3, [r5], #4
 8018ca8:	e7e9      	b.n	8018c7e <__mdiff+0x8a>
 8018caa:	3e01      	subs	r6, #1
 8018cac:	e7e9      	b.n	8018c82 <__mdiff+0x8e>
	...

08018cb0 <__ulp>:
 8018cb0:	4b12      	ldr	r3, [pc, #72]	; (8018cfc <__ulp+0x4c>)
 8018cb2:	ee10 2a90 	vmov	r2, s1
 8018cb6:	401a      	ands	r2, r3
 8018cb8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	dd04      	ble.n	8018cca <__ulp+0x1a>
 8018cc0:	2000      	movs	r0, #0
 8018cc2:	4619      	mov	r1, r3
 8018cc4:	ec41 0b10 	vmov	d0, r0, r1
 8018cc8:	4770      	bx	lr
 8018cca:	425b      	negs	r3, r3
 8018ccc:	151b      	asrs	r3, r3, #20
 8018cce:	2b13      	cmp	r3, #19
 8018cd0:	f04f 0000 	mov.w	r0, #0
 8018cd4:	f04f 0100 	mov.w	r1, #0
 8018cd8:	dc04      	bgt.n	8018ce4 <__ulp+0x34>
 8018cda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018cde:	fa42 f103 	asr.w	r1, r2, r3
 8018ce2:	e7ef      	b.n	8018cc4 <__ulp+0x14>
 8018ce4:	3b14      	subs	r3, #20
 8018ce6:	2b1e      	cmp	r3, #30
 8018ce8:	f04f 0201 	mov.w	r2, #1
 8018cec:	bfda      	itte	le
 8018cee:	f1c3 031f 	rsble	r3, r3, #31
 8018cf2:	fa02 f303 	lslle.w	r3, r2, r3
 8018cf6:	4613      	movgt	r3, r2
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	e7e3      	b.n	8018cc4 <__ulp+0x14>
 8018cfc:	7ff00000 	.word	0x7ff00000

08018d00 <__b2d>:
 8018d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d02:	6905      	ldr	r5, [r0, #16]
 8018d04:	f100 0714 	add.w	r7, r0, #20
 8018d08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018d0c:	1f2e      	subs	r6, r5, #4
 8018d0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d12:	4620      	mov	r0, r4
 8018d14:	f7ff fdc5 	bl	80188a2 <__hi0bits>
 8018d18:	f1c0 0320 	rsb	r3, r0, #32
 8018d1c:	280a      	cmp	r0, #10
 8018d1e:	600b      	str	r3, [r1, #0]
 8018d20:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018d98 <__b2d+0x98>
 8018d24:	dc14      	bgt.n	8018d50 <__b2d+0x50>
 8018d26:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d2e:	42b7      	cmp	r7, r6
 8018d30:	ea41 030c 	orr.w	r3, r1, ip
 8018d34:	bf34      	ite	cc
 8018d36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d3a:	2100      	movcs	r1, #0
 8018d3c:	3015      	adds	r0, #21
 8018d3e:	fa04 f000 	lsl.w	r0, r4, r0
 8018d42:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d46:	ea40 0201 	orr.w	r2, r0, r1
 8018d4a:	ec43 2b10 	vmov	d0, r2, r3
 8018d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d50:	42b7      	cmp	r7, r6
 8018d52:	bf3a      	itte	cc
 8018d54:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d5c:	2100      	movcs	r1, #0
 8018d5e:	380b      	subs	r0, #11
 8018d60:	d015      	beq.n	8018d8e <__b2d+0x8e>
 8018d62:	4084      	lsls	r4, r0
 8018d64:	f1c0 0520 	rsb	r5, r0, #32
 8018d68:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018d6c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018d70:	42be      	cmp	r6, r7
 8018d72:	fa21 fc05 	lsr.w	ip, r1, r5
 8018d76:	ea44 030c 	orr.w	r3, r4, ip
 8018d7a:	bf8c      	ite	hi
 8018d7c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d80:	2400      	movls	r4, #0
 8018d82:	fa01 f000 	lsl.w	r0, r1, r0
 8018d86:	40ec      	lsrs	r4, r5
 8018d88:	ea40 0204 	orr.w	r2, r0, r4
 8018d8c:	e7dd      	b.n	8018d4a <__b2d+0x4a>
 8018d8e:	ea44 030c 	orr.w	r3, r4, ip
 8018d92:	460a      	mov	r2, r1
 8018d94:	e7d9      	b.n	8018d4a <__b2d+0x4a>
 8018d96:	bf00      	nop
 8018d98:	3ff00000 	.word	0x3ff00000

08018d9c <__d2b>:
 8018d9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018da0:	460e      	mov	r6, r1
 8018da2:	2101      	movs	r1, #1
 8018da4:	ec59 8b10 	vmov	r8, r9, d0
 8018da8:	4615      	mov	r5, r2
 8018daa:	f7ff fcb6 	bl	801871a <_Balloc>
 8018dae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018db2:	4607      	mov	r7, r0
 8018db4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018db8:	bb34      	cbnz	r4, 8018e08 <__d2b+0x6c>
 8018dba:	9301      	str	r3, [sp, #4]
 8018dbc:	f1b8 0300 	subs.w	r3, r8, #0
 8018dc0:	d027      	beq.n	8018e12 <__d2b+0x76>
 8018dc2:	a802      	add	r0, sp, #8
 8018dc4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018dc8:	f7ff fd8a 	bl	80188e0 <__lo0bits>
 8018dcc:	9900      	ldr	r1, [sp, #0]
 8018dce:	b1f0      	cbz	r0, 8018e0e <__d2b+0x72>
 8018dd0:	9a01      	ldr	r2, [sp, #4]
 8018dd2:	f1c0 0320 	rsb	r3, r0, #32
 8018dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8018dda:	430b      	orrs	r3, r1
 8018ddc:	40c2      	lsrs	r2, r0
 8018dde:	617b      	str	r3, [r7, #20]
 8018de0:	9201      	str	r2, [sp, #4]
 8018de2:	9b01      	ldr	r3, [sp, #4]
 8018de4:	61bb      	str	r3, [r7, #24]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	bf14      	ite	ne
 8018dea:	2102      	movne	r1, #2
 8018dec:	2101      	moveq	r1, #1
 8018dee:	6139      	str	r1, [r7, #16]
 8018df0:	b1c4      	cbz	r4, 8018e24 <__d2b+0x88>
 8018df2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018df6:	4404      	add	r4, r0
 8018df8:	6034      	str	r4, [r6, #0]
 8018dfa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018dfe:	6028      	str	r0, [r5, #0]
 8018e00:	4638      	mov	r0, r7
 8018e02:	b003      	add	sp, #12
 8018e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e0c:	e7d5      	b.n	8018dba <__d2b+0x1e>
 8018e0e:	6179      	str	r1, [r7, #20]
 8018e10:	e7e7      	b.n	8018de2 <__d2b+0x46>
 8018e12:	a801      	add	r0, sp, #4
 8018e14:	f7ff fd64 	bl	80188e0 <__lo0bits>
 8018e18:	9b01      	ldr	r3, [sp, #4]
 8018e1a:	617b      	str	r3, [r7, #20]
 8018e1c:	2101      	movs	r1, #1
 8018e1e:	6139      	str	r1, [r7, #16]
 8018e20:	3020      	adds	r0, #32
 8018e22:	e7e5      	b.n	8018df0 <__d2b+0x54>
 8018e24:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018e28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e2c:	6030      	str	r0, [r6, #0]
 8018e2e:	6918      	ldr	r0, [r3, #16]
 8018e30:	f7ff fd37 	bl	80188a2 <__hi0bits>
 8018e34:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018e38:	e7e1      	b.n	8018dfe <__d2b+0x62>

08018e3a <__ratio>:
 8018e3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e3e:	4688      	mov	r8, r1
 8018e40:	4669      	mov	r1, sp
 8018e42:	4681      	mov	r9, r0
 8018e44:	f7ff ff5c 	bl	8018d00 <__b2d>
 8018e48:	a901      	add	r1, sp, #4
 8018e4a:	4640      	mov	r0, r8
 8018e4c:	ec57 6b10 	vmov	r6, r7, d0
 8018e50:	f7ff ff56 	bl	8018d00 <__b2d>
 8018e54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e58:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e5c:	eba3 0c02 	sub.w	ip, r3, r2
 8018e60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e64:	1a9b      	subs	r3, r3, r2
 8018e66:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e6a:	ec5b ab10 	vmov	sl, fp, d0
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	bfce      	itee	gt
 8018e72:	463a      	movgt	r2, r7
 8018e74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e78:	465a      	movle	r2, fp
 8018e7a:	4659      	mov	r1, fp
 8018e7c:	463d      	mov	r5, r7
 8018e7e:	bfd4      	ite	le
 8018e80:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018e84:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018e88:	4630      	mov	r0, r6
 8018e8a:	ee10 2a10 	vmov	r2, s0
 8018e8e:	460b      	mov	r3, r1
 8018e90:	4629      	mov	r1, r5
 8018e92:	f7e7 fcf3 	bl	800087c <__aeabi_ddiv>
 8018e96:	ec41 0b10 	vmov	d0, r0, r1
 8018e9a:	b003      	add	sp, #12
 8018e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ea0 <__copybits>:
 8018ea0:	3901      	subs	r1, #1
 8018ea2:	b510      	push	{r4, lr}
 8018ea4:	1149      	asrs	r1, r1, #5
 8018ea6:	6914      	ldr	r4, [r2, #16]
 8018ea8:	3101      	adds	r1, #1
 8018eaa:	f102 0314 	add.w	r3, r2, #20
 8018eae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018eb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018eb6:	42a3      	cmp	r3, r4
 8018eb8:	4602      	mov	r2, r0
 8018eba:	d303      	bcc.n	8018ec4 <__copybits+0x24>
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	428a      	cmp	r2, r1
 8018ec0:	d305      	bcc.n	8018ece <__copybits+0x2e>
 8018ec2:	bd10      	pop	{r4, pc}
 8018ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ec8:	f840 2b04 	str.w	r2, [r0], #4
 8018ecc:	e7f3      	b.n	8018eb6 <__copybits+0x16>
 8018ece:	f842 3b04 	str.w	r3, [r2], #4
 8018ed2:	e7f4      	b.n	8018ebe <__copybits+0x1e>

08018ed4 <__any_on>:
 8018ed4:	f100 0214 	add.w	r2, r0, #20
 8018ed8:	6900      	ldr	r0, [r0, #16]
 8018eda:	114b      	asrs	r3, r1, #5
 8018edc:	4298      	cmp	r0, r3
 8018ede:	b510      	push	{r4, lr}
 8018ee0:	db11      	blt.n	8018f06 <__any_on+0x32>
 8018ee2:	dd0a      	ble.n	8018efa <__any_on+0x26>
 8018ee4:	f011 011f 	ands.w	r1, r1, #31
 8018ee8:	d007      	beq.n	8018efa <__any_on+0x26>
 8018eea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018eee:	fa24 f001 	lsr.w	r0, r4, r1
 8018ef2:	fa00 f101 	lsl.w	r1, r0, r1
 8018ef6:	428c      	cmp	r4, r1
 8018ef8:	d10b      	bne.n	8018f12 <__any_on+0x3e>
 8018efa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018efe:	4293      	cmp	r3, r2
 8018f00:	d803      	bhi.n	8018f0a <__any_on+0x36>
 8018f02:	2000      	movs	r0, #0
 8018f04:	bd10      	pop	{r4, pc}
 8018f06:	4603      	mov	r3, r0
 8018f08:	e7f7      	b.n	8018efa <__any_on+0x26>
 8018f0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f0e:	2900      	cmp	r1, #0
 8018f10:	d0f5      	beq.n	8018efe <__any_on+0x2a>
 8018f12:	2001      	movs	r0, #1
 8018f14:	e7f6      	b.n	8018f04 <__any_on+0x30>

08018f16 <_calloc_r>:
 8018f16:	b538      	push	{r3, r4, r5, lr}
 8018f18:	fb02 f401 	mul.w	r4, r2, r1
 8018f1c:	4621      	mov	r1, r4
 8018f1e:	f000 f857 	bl	8018fd0 <_malloc_r>
 8018f22:	4605      	mov	r5, r0
 8018f24:	b118      	cbz	r0, 8018f2e <_calloc_r+0x18>
 8018f26:	4622      	mov	r2, r4
 8018f28:	2100      	movs	r1, #0
 8018f2a:	f7fc fca1 	bl	8015870 <memset>
 8018f2e:	4628      	mov	r0, r5
 8018f30:	bd38      	pop	{r3, r4, r5, pc}
	...

08018f34 <_free_r>:
 8018f34:	b538      	push	{r3, r4, r5, lr}
 8018f36:	4605      	mov	r5, r0
 8018f38:	2900      	cmp	r1, #0
 8018f3a:	d045      	beq.n	8018fc8 <_free_r+0x94>
 8018f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f40:	1f0c      	subs	r4, r1, #4
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	bfb8      	it	lt
 8018f46:	18e4      	addlt	r4, r4, r3
 8018f48:	f000 fe30 	bl	8019bac <__malloc_lock>
 8018f4c:	4a1f      	ldr	r2, [pc, #124]	; (8018fcc <_free_r+0x98>)
 8018f4e:	6813      	ldr	r3, [r2, #0]
 8018f50:	4610      	mov	r0, r2
 8018f52:	b933      	cbnz	r3, 8018f62 <_free_r+0x2e>
 8018f54:	6063      	str	r3, [r4, #4]
 8018f56:	6014      	str	r4, [r2, #0]
 8018f58:	4628      	mov	r0, r5
 8018f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f5e:	f000 be26 	b.w	8019bae <__malloc_unlock>
 8018f62:	42a3      	cmp	r3, r4
 8018f64:	d90c      	bls.n	8018f80 <_free_r+0x4c>
 8018f66:	6821      	ldr	r1, [r4, #0]
 8018f68:	1862      	adds	r2, r4, r1
 8018f6a:	4293      	cmp	r3, r2
 8018f6c:	bf04      	itt	eq
 8018f6e:	681a      	ldreq	r2, [r3, #0]
 8018f70:	685b      	ldreq	r3, [r3, #4]
 8018f72:	6063      	str	r3, [r4, #4]
 8018f74:	bf04      	itt	eq
 8018f76:	1852      	addeq	r2, r2, r1
 8018f78:	6022      	streq	r2, [r4, #0]
 8018f7a:	6004      	str	r4, [r0, #0]
 8018f7c:	e7ec      	b.n	8018f58 <_free_r+0x24>
 8018f7e:	4613      	mov	r3, r2
 8018f80:	685a      	ldr	r2, [r3, #4]
 8018f82:	b10a      	cbz	r2, 8018f88 <_free_r+0x54>
 8018f84:	42a2      	cmp	r2, r4
 8018f86:	d9fa      	bls.n	8018f7e <_free_r+0x4a>
 8018f88:	6819      	ldr	r1, [r3, #0]
 8018f8a:	1858      	adds	r0, r3, r1
 8018f8c:	42a0      	cmp	r0, r4
 8018f8e:	d10b      	bne.n	8018fa8 <_free_r+0x74>
 8018f90:	6820      	ldr	r0, [r4, #0]
 8018f92:	4401      	add	r1, r0
 8018f94:	1858      	adds	r0, r3, r1
 8018f96:	4282      	cmp	r2, r0
 8018f98:	6019      	str	r1, [r3, #0]
 8018f9a:	d1dd      	bne.n	8018f58 <_free_r+0x24>
 8018f9c:	6810      	ldr	r0, [r2, #0]
 8018f9e:	6852      	ldr	r2, [r2, #4]
 8018fa0:	605a      	str	r2, [r3, #4]
 8018fa2:	4401      	add	r1, r0
 8018fa4:	6019      	str	r1, [r3, #0]
 8018fa6:	e7d7      	b.n	8018f58 <_free_r+0x24>
 8018fa8:	d902      	bls.n	8018fb0 <_free_r+0x7c>
 8018faa:	230c      	movs	r3, #12
 8018fac:	602b      	str	r3, [r5, #0]
 8018fae:	e7d3      	b.n	8018f58 <_free_r+0x24>
 8018fb0:	6820      	ldr	r0, [r4, #0]
 8018fb2:	1821      	adds	r1, r4, r0
 8018fb4:	428a      	cmp	r2, r1
 8018fb6:	bf04      	itt	eq
 8018fb8:	6811      	ldreq	r1, [r2, #0]
 8018fba:	6852      	ldreq	r2, [r2, #4]
 8018fbc:	6062      	str	r2, [r4, #4]
 8018fbe:	bf04      	itt	eq
 8018fc0:	1809      	addeq	r1, r1, r0
 8018fc2:	6021      	streq	r1, [r4, #0]
 8018fc4:	605c      	str	r4, [r3, #4]
 8018fc6:	e7c7      	b.n	8018f58 <_free_r+0x24>
 8018fc8:	bd38      	pop	{r3, r4, r5, pc}
 8018fca:	bf00      	nop
 8018fcc:	200481f0 	.word	0x200481f0

08018fd0 <_malloc_r>:
 8018fd0:	b570      	push	{r4, r5, r6, lr}
 8018fd2:	1ccd      	adds	r5, r1, #3
 8018fd4:	f025 0503 	bic.w	r5, r5, #3
 8018fd8:	3508      	adds	r5, #8
 8018fda:	2d0c      	cmp	r5, #12
 8018fdc:	bf38      	it	cc
 8018fde:	250c      	movcc	r5, #12
 8018fe0:	2d00      	cmp	r5, #0
 8018fe2:	4606      	mov	r6, r0
 8018fe4:	db01      	blt.n	8018fea <_malloc_r+0x1a>
 8018fe6:	42a9      	cmp	r1, r5
 8018fe8:	d903      	bls.n	8018ff2 <_malloc_r+0x22>
 8018fea:	230c      	movs	r3, #12
 8018fec:	6033      	str	r3, [r6, #0]
 8018fee:	2000      	movs	r0, #0
 8018ff0:	bd70      	pop	{r4, r5, r6, pc}
 8018ff2:	f000 fddb 	bl	8019bac <__malloc_lock>
 8018ff6:	4a21      	ldr	r2, [pc, #132]	; (801907c <_malloc_r+0xac>)
 8018ff8:	6814      	ldr	r4, [r2, #0]
 8018ffa:	4621      	mov	r1, r4
 8018ffc:	b991      	cbnz	r1, 8019024 <_malloc_r+0x54>
 8018ffe:	4c20      	ldr	r4, [pc, #128]	; (8019080 <_malloc_r+0xb0>)
 8019000:	6823      	ldr	r3, [r4, #0]
 8019002:	b91b      	cbnz	r3, 801900c <_malloc_r+0x3c>
 8019004:	4630      	mov	r0, r6
 8019006:	f000 fc91 	bl	801992c <_sbrk_r>
 801900a:	6020      	str	r0, [r4, #0]
 801900c:	4629      	mov	r1, r5
 801900e:	4630      	mov	r0, r6
 8019010:	f000 fc8c 	bl	801992c <_sbrk_r>
 8019014:	1c43      	adds	r3, r0, #1
 8019016:	d124      	bne.n	8019062 <_malloc_r+0x92>
 8019018:	230c      	movs	r3, #12
 801901a:	6033      	str	r3, [r6, #0]
 801901c:	4630      	mov	r0, r6
 801901e:	f000 fdc6 	bl	8019bae <__malloc_unlock>
 8019022:	e7e4      	b.n	8018fee <_malloc_r+0x1e>
 8019024:	680b      	ldr	r3, [r1, #0]
 8019026:	1b5b      	subs	r3, r3, r5
 8019028:	d418      	bmi.n	801905c <_malloc_r+0x8c>
 801902a:	2b0b      	cmp	r3, #11
 801902c:	d90f      	bls.n	801904e <_malloc_r+0x7e>
 801902e:	600b      	str	r3, [r1, #0]
 8019030:	50cd      	str	r5, [r1, r3]
 8019032:	18cc      	adds	r4, r1, r3
 8019034:	4630      	mov	r0, r6
 8019036:	f000 fdba 	bl	8019bae <__malloc_unlock>
 801903a:	f104 000b 	add.w	r0, r4, #11
 801903e:	1d23      	adds	r3, r4, #4
 8019040:	f020 0007 	bic.w	r0, r0, #7
 8019044:	1ac3      	subs	r3, r0, r3
 8019046:	d0d3      	beq.n	8018ff0 <_malloc_r+0x20>
 8019048:	425a      	negs	r2, r3
 801904a:	50e2      	str	r2, [r4, r3]
 801904c:	e7d0      	b.n	8018ff0 <_malloc_r+0x20>
 801904e:	428c      	cmp	r4, r1
 8019050:	684b      	ldr	r3, [r1, #4]
 8019052:	bf16      	itet	ne
 8019054:	6063      	strne	r3, [r4, #4]
 8019056:	6013      	streq	r3, [r2, #0]
 8019058:	460c      	movne	r4, r1
 801905a:	e7eb      	b.n	8019034 <_malloc_r+0x64>
 801905c:	460c      	mov	r4, r1
 801905e:	6849      	ldr	r1, [r1, #4]
 8019060:	e7cc      	b.n	8018ffc <_malloc_r+0x2c>
 8019062:	1cc4      	adds	r4, r0, #3
 8019064:	f024 0403 	bic.w	r4, r4, #3
 8019068:	42a0      	cmp	r0, r4
 801906a:	d005      	beq.n	8019078 <_malloc_r+0xa8>
 801906c:	1a21      	subs	r1, r4, r0
 801906e:	4630      	mov	r0, r6
 8019070:	f000 fc5c 	bl	801992c <_sbrk_r>
 8019074:	3001      	adds	r0, #1
 8019076:	d0cf      	beq.n	8019018 <_malloc_r+0x48>
 8019078:	6025      	str	r5, [r4, #0]
 801907a:	e7db      	b.n	8019034 <_malloc_r+0x64>
 801907c:	200481f0 	.word	0x200481f0
 8019080:	200481f4 	.word	0x200481f4

08019084 <__ssputs_r>:
 8019084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019088:	688e      	ldr	r6, [r1, #8]
 801908a:	429e      	cmp	r6, r3
 801908c:	4682      	mov	sl, r0
 801908e:	460c      	mov	r4, r1
 8019090:	4690      	mov	r8, r2
 8019092:	4699      	mov	r9, r3
 8019094:	d837      	bhi.n	8019106 <__ssputs_r+0x82>
 8019096:	898a      	ldrh	r2, [r1, #12]
 8019098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801909c:	d031      	beq.n	8019102 <__ssputs_r+0x7e>
 801909e:	6825      	ldr	r5, [r4, #0]
 80190a0:	6909      	ldr	r1, [r1, #16]
 80190a2:	1a6f      	subs	r7, r5, r1
 80190a4:	6965      	ldr	r5, [r4, #20]
 80190a6:	2302      	movs	r3, #2
 80190a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80190b0:	f109 0301 	add.w	r3, r9, #1
 80190b4:	443b      	add	r3, r7
 80190b6:	429d      	cmp	r5, r3
 80190b8:	bf38      	it	cc
 80190ba:	461d      	movcc	r5, r3
 80190bc:	0553      	lsls	r3, r2, #21
 80190be:	d530      	bpl.n	8019122 <__ssputs_r+0x9e>
 80190c0:	4629      	mov	r1, r5
 80190c2:	f7ff ff85 	bl	8018fd0 <_malloc_r>
 80190c6:	4606      	mov	r6, r0
 80190c8:	b950      	cbnz	r0, 80190e0 <__ssputs_r+0x5c>
 80190ca:	230c      	movs	r3, #12
 80190cc:	f8ca 3000 	str.w	r3, [sl]
 80190d0:	89a3      	ldrh	r3, [r4, #12]
 80190d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190d6:	81a3      	strh	r3, [r4, #12]
 80190d8:	f04f 30ff 	mov.w	r0, #4294967295
 80190dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190e0:	463a      	mov	r2, r7
 80190e2:	6921      	ldr	r1, [r4, #16]
 80190e4:	f7ff fb0e 	bl	8018704 <memcpy>
 80190e8:	89a3      	ldrh	r3, [r4, #12]
 80190ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80190ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190f2:	81a3      	strh	r3, [r4, #12]
 80190f4:	6126      	str	r6, [r4, #16]
 80190f6:	6165      	str	r5, [r4, #20]
 80190f8:	443e      	add	r6, r7
 80190fa:	1bed      	subs	r5, r5, r7
 80190fc:	6026      	str	r6, [r4, #0]
 80190fe:	60a5      	str	r5, [r4, #8]
 8019100:	464e      	mov	r6, r9
 8019102:	454e      	cmp	r6, r9
 8019104:	d900      	bls.n	8019108 <__ssputs_r+0x84>
 8019106:	464e      	mov	r6, r9
 8019108:	4632      	mov	r2, r6
 801910a:	4641      	mov	r1, r8
 801910c:	6820      	ldr	r0, [r4, #0]
 801910e:	f000 fd34 	bl	8019b7a <memmove>
 8019112:	68a3      	ldr	r3, [r4, #8]
 8019114:	1b9b      	subs	r3, r3, r6
 8019116:	60a3      	str	r3, [r4, #8]
 8019118:	6823      	ldr	r3, [r4, #0]
 801911a:	441e      	add	r6, r3
 801911c:	6026      	str	r6, [r4, #0]
 801911e:	2000      	movs	r0, #0
 8019120:	e7dc      	b.n	80190dc <__ssputs_r+0x58>
 8019122:	462a      	mov	r2, r5
 8019124:	f000 fd44 	bl	8019bb0 <_realloc_r>
 8019128:	4606      	mov	r6, r0
 801912a:	2800      	cmp	r0, #0
 801912c:	d1e2      	bne.n	80190f4 <__ssputs_r+0x70>
 801912e:	6921      	ldr	r1, [r4, #16]
 8019130:	4650      	mov	r0, sl
 8019132:	f7ff feff 	bl	8018f34 <_free_r>
 8019136:	e7c8      	b.n	80190ca <__ssputs_r+0x46>

08019138 <_svfiprintf_r>:
 8019138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801913c:	461d      	mov	r5, r3
 801913e:	898b      	ldrh	r3, [r1, #12]
 8019140:	061f      	lsls	r7, r3, #24
 8019142:	b09d      	sub	sp, #116	; 0x74
 8019144:	4680      	mov	r8, r0
 8019146:	460c      	mov	r4, r1
 8019148:	4616      	mov	r6, r2
 801914a:	d50f      	bpl.n	801916c <_svfiprintf_r+0x34>
 801914c:	690b      	ldr	r3, [r1, #16]
 801914e:	b96b      	cbnz	r3, 801916c <_svfiprintf_r+0x34>
 8019150:	2140      	movs	r1, #64	; 0x40
 8019152:	f7ff ff3d 	bl	8018fd0 <_malloc_r>
 8019156:	6020      	str	r0, [r4, #0]
 8019158:	6120      	str	r0, [r4, #16]
 801915a:	b928      	cbnz	r0, 8019168 <_svfiprintf_r+0x30>
 801915c:	230c      	movs	r3, #12
 801915e:	f8c8 3000 	str.w	r3, [r8]
 8019162:	f04f 30ff 	mov.w	r0, #4294967295
 8019166:	e0c8      	b.n	80192fa <_svfiprintf_r+0x1c2>
 8019168:	2340      	movs	r3, #64	; 0x40
 801916a:	6163      	str	r3, [r4, #20]
 801916c:	2300      	movs	r3, #0
 801916e:	9309      	str	r3, [sp, #36]	; 0x24
 8019170:	2320      	movs	r3, #32
 8019172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019176:	2330      	movs	r3, #48	; 0x30
 8019178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801917c:	9503      	str	r5, [sp, #12]
 801917e:	f04f 0b01 	mov.w	fp, #1
 8019182:	4637      	mov	r7, r6
 8019184:	463d      	mov	r5, r7
 8019186:	f815 3b01 	ldrb.w	r3, [r5], #1
 801918a:	b10b      	cbz	r3, 8019190 <_svfiprintf_r+0x58>
 801918c:	2b25      	cmp	r3, #37	; 0x25
 801918e:	d13e      	bne.n	801920e <_svfiprintf_r+0xd6>
 8019190:	ebb7 0a06 	subs.w	sl, r7, r6
 8019194:	d00b      	beq.n	80191ae <_svfiprintf_r+0x76>
 8019196:	4653      	mov	r3, sl
 8019198:	4632      	mov	r2, r6
 801919a:	4621      	mov	r1, r4
 801919c:	4640      	mov	r0, r8
 801919e:	f7ff ff71 	bl	8019084 <__ssputs_r>
 80191a2:	3001      	adds	r0, #1
 80191a4:	f000 80a4 	beq.w	80192f0 <_svfiprintf_r+0x1b8>
 80191a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191aa:	4453      	add	r3, sl
 80191ac:	9309      	str	r3, [sp, #36]	; 0x24
 80191ae:	783b      	ldrb	r3, [r7, #0]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	f000 809d 	beq.w	80192f0 <_svfiprintf_r+0x1b8>
 80191b6:	2300      	movs	r3, #0
 80191b8:	f04f 32ff 	mov.w	r2, #4294967295
 80191bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191c0:	9304      	str	r3, [sp, #16]
 80191c2:	9307      	str	r3, [sp, #28]
 80191c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191c8:	931a      	str	r3, [sp, #104]	; 0x68
 80191ca:	462f      	mov	r7, r5
 80191cc:	2205      	movs	r2, #5
 80191ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80191d2:	4850      	ldr	r0, [pc, #320]	; (8019314 <_svfiprintf_r+0x1dc>)
 80191d4:	f7e7 f81c 	bl	8000210 <memchr>
 80191d8:	9b04      	ldr	r3, [sp, #16]
 80191da:	b9d0      	cbnz	r0, 8019212 <_svfiprintf_r+0xda>
 80191dc:	06d9      	lsls	r1, r3, #27
 80191de:	bf44      	itt	mi
 80191e0:	2220      	movmi	r2, #32
 80191e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191e6:	071a      	lsls	r2, r3, #28
 80191e8:	bf44      	itt	mi
 80191ea:	222b      	movmi	r2, #43	; 0x2b
 80191ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191f0:	782a      	ldrb	r2, [r5, #0]
 80191f2:	2a2a      	cmp	r2, #42	; 0x2a
 80191f4:	d015      	beq.n	8019222 <_svfiprintf_r+0xea>
 80191f6:	9a07      	ldr	r2, [sp, #28]
 80191f8:	462f      	mov	r7, r5
 80191fa:	2000      	movs	r0, #0
 80191fc:	250a      	movs	r5, #10
 80191fe:	4639      	mov	r1, r7
 8019200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019204:	3b30      	subs	r3, #48	; 0x30
 8019206:	2b09      	cmp	r3, #9
 8019208:	d94d      	bls.n	80192a6 <_svfiprintf_r+0x16e>
 801920a:	b1b8      	cbz	r0, 801923c <_svfiprintf_r+0x104>
 801920c:	e00f      	b.n	801922e <_svfiprintf_r+0xf6>
 801920e:	462f      	mov	r7, r5
 8019210:	e7b8      	b.n	8019184 <_svfiprintf_r+0x4c>
 8019212:	4a40      	ldr	r2, [pc, #256]	; (8019314 <_svfiprintf_r+0x1dc>)
 8019214:	1a80      	subs	r0, r0, r2
 8019216:	fa0b f000 	lsl.w	r0, fp, r0
 801921a:	4318      	orrs	r0, r3
 801921c:	9004      	str	r0, [sp, #16]
 801921e:	463d      	mov	r5, r7
 8019220:	e7d3      	b.n	80191ca <_svfiprintf_r+0x92>
 8019222:	9a03      	ldr	r2, [sp, #12]
 8019224:	1d11      	adds	r1, r2, #4
 8019226:	6812      	ldr	r2, [r2, #0]
 8019228:	9103      	str	r1, [sp, #12]
 801922a:	2a00      	cmp	r2, #0
 801922c:	db01      	blt.n	8019232 <_svfiprintf_r+0xfa>
 801922e:	9207      	str	r2, [sp, #28]
 8019230:	e004      	b.n	801923c <_svfiprintf_r+0x104>
 8019232:	4252      	negs	r2, r2
 8019234:	f043 0302 	orr.w	r3, r3, #2
 8019238:	9207      	str	r2, [sp, #28]
 801923a:	9304      	str	r3, [sp, #16]
 801923c:	783b      	ldrb	r3, [r7, #0]
 801923e:	2b2e      	cmp	r3, #46	; 0x2e
 8019240:	d10c      	bne.n	801925c <_svfiprintf_r+0x124>
 8019242:	787b      	ldrb	r3, [r7, #1]
 8019244:	2b2a      	cmp	r3, #42	; 0x2a
 8019246:	d133      	bne.n	80192b0 <_svfiprintf_r+0x178>
 8019248:	9b03      	ldr	r3, [sp, #12]
 801924a:	1d1a      	adds	r2, r3, #4
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	9203      	str	r2, [sp, #12]
 8019250:	2b00      	cmp	r3, #0
 8019252:	bfb8      	it	lt
 8019254:	f04f 33ff 	movlt.w	r3, #4294967295
 8019258:	3702      	adds	r7, #2
 801925a:	9305      	str	r3, [sp, #20]
 801925c:	4d2e      	ldr	r5, [pc, #184]	; (8019318 <_svfiprintf_r+0x1e0>)
 801925e:	7839      	ldrb	r1, [r7, #0]
 8019260:	2203      	movs	r2, #3
 8019262:	4628      	mov	r0, r5
 8019264:	f7e6 ffd4 	bl	8000210 <memchr>
 8019268:	b138      	cbz	r0, 801927a <_svfiprintf_r+0x142>
 801926a:	2340      	movs	r3, #64	; 0x40
 801926c:	1b40      	subs	r0, r0, r5
 801926e:	fa03 f000 	lsl.w	r0, r3, r0
 8019272:	9b04      	ldr	r3, [sp, #16]
 8019274:	4303      	orrs	r3, r0
 8019276:	3701      	adds	r7, #1
 8019278:	9304      	str	r3, [sp, #16]
 801927a:	7839      	ldrb	r1, [r7, #0]
 801927c:	4827      	ldr	r0, [pc, #156]	; (801931c <_svfiprintf_r+0x1e4>)
 801927e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019282:	2206      	movs	r2, #6
 8019284:	1c7e      	adds	r6, r7, #1
 8019286:	f7e6 ffc3 	bl	8000210 <memchr>
 801928a:	2800      	cmp	r0, #0
 801928c:	d038      	beq.n	8019300 <_svfiprintf_r+0x1c8>
 801928e:	4b24      	ldr	r3, [pc, #144]	; (8019320 <_svfiprintf_r+0x1e8>)
 8019290:	bb13      	cbnz	r3, 80192d8 <_svfiprintf_r+0x1a0>
 8019292:	9b03      	ldr	r3, [sp, #12]
 8019294:	3307      	adds	r3, #7
 8019296:	f023 0307 	bic.w	r3, r3, #7
 801929a:	3308      	adds	r3, #8
 801929c:	9303      	str	r3, [sp, #12]
 801929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192a0:	444b      	add	r3, r9
 80192a2:	9309      	str	r3, [sp, #36]	; 0x24
 80192a4:	e76d      	b.n	8019182 <_svfiprintf_r+0x4a>
 80192a6:	fb05 3202 	mla	r2, r5, r2, r3
 80192aa:	2001      	movs	r0, #1
 80192ac:	460f      	mov	r7, r1
 80192ae:	e7a6      	b.n	80191fe <_svfiprintf_r+0xc6>
 80192b0:	2300      	movs	r3, #0
 80192b2:	3701      	adds	r7, #1
 80192b4:	9305      	str	r3, [sp, #20]
 80192b6:	4619      	mov	r1, r3
 80192b8:	250a      	movs	r5, #10
 80192ba:	4638      	mov	r0, r7
 80192bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192c0:	3a30      	subs	r2, #48	; 0x30
 80192c2:	2a09      	cmp	r2, #9
 80192c4:	d903      	bls.n	80192ce <_svfiprintf_r+0x196>
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d0c8      	beq.n	801925c <_svfiprintf_r+0x124>
 80192ca:	9105      	str	r1, [sp, #20]
 80192cc:	e7c6      	b.n	801925c <_svfiprintf_r+0x124>
 80192ce:	fb05 2101 	mla	r1, r5, r1, r2
 80192d2:	2301      	movs	r3, #1
 80192d4:	4607      	mov	r7, r0
 80192d6:	e7f0      	b.n	80192ba <_svfiprintf_r+0x182>
 80192d8:	ab03      	add	r3, sp, #12
 80192da:	9300      	str	r3, [sp, #0]
 80192dc:	4622      	mov	r2, r4
 80192de:	4b11      	ldr	r3, [pc, #68]	; (8019324 <_svfiprintf_r+0x1ec>)
 80192e0:	a904      	add	r1, sp, #16
 80192e2:	4640      	mov	r0, r8
 80192e4:	f7fc fb60 	bl	80159a8 <_printf_float>
 80192e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80192ec:	4681      	mov	r9, r0
 80192ee:	d1d6      	bne.n	801929e <_svfiprintf_r+0x166>
 80192f0:	89a3      	ldrh	r3, [r4, #12]
 80192f2:	065b      	lsls	r3, r3, #25
 80192f4:	f53f af35 	bmi.w	8019162 <_svfiprintf_r+0x2a>
 80192f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192fa:	b01d      	add	sp, #116	; 0x74
 80192fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019300:	ab03      	add	r3, sp, #12
 8019302:	9300      	str	r3, [sp, #0]
 8019304:	4622      	mov	r2, r4
 8019306:	4b07      	ldr	r3, [pc, #28]	; (8019324 <_svfiprintf_r+0x1ec>)
 8019308:	a904      	add	r1, sp, #16
 801930a:	4640      	mov	r0, r8
 801930c:	f7fc fe02 	bl	8015f14 <_printf_i>
 8019310:	e7ea      	b.n	80192e8 <_svfiprintf_r+0x1b0>
 8019312:	bf00      	nop
 8019314:	0801a4a4 	.word	0x0801a4a4
 8019318:	0801a4aa 	.word	0x0801a4aa
 801931c:	0801a4ae 	.word	0x0801a4ae
 8019320:	080159a9 	.word	0x080159a9
 8019324:	08019085 	.word	0x08019085

08019328 <_sungetc_r>:
 8019328:	b538      	push	{r3, r4, r5, lr}
 801932a:	1c4b      	adds	r3, r1, #1
 801932c:	4614      	mov	r4, r2
 801932e:	d103      	bne.n	8019338 <_sungetc_r+0x10>
 8019330:	f04f 35ff 	mov.w	r5, #4294967295
 8019334:	4628      	mov	r0, r5
 8019336:	bd38      	pop	{r3, r4, r5, pc}
 8019338:	8993      	ldrh	r3, [r2, #12]
 801933a:	f023 0320 	bic.w	r3, r3, #32
 801933e:	8193      	strh	r3, [r2, #12]
 8019340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019342:	6852      	ldr	r2, [r2, #4]
 8019344:	b2cd      	uxtb	r5, r1
 8019346:	b18b      	cbz	r3, 801936c <_sungetc_r+0x44>
 8019348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801934a:	4293      	cmp	r3, r2
 801934c:	dd08      	ble.n	8019360 <_sungetc_r+0x38>
 801934e:	6823      	ldr	r3, [r4, #0]
 8019350:	1e5a      	subs	r2, r3, #1
 8019352:	6022      	str	r2, [r4, #0]
 8019354:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019358:	6863      	ldr	r3, [r4, #4]
 801935a:	3301      	adds	r3, #1
 801935c:	6063      	str	r3, [r4, #4]
 801935e:	e7e9      	b.n	8019334 <_sungetc_r+0xc>
 8019360:	4621      	mov	r1, r4
 8019362:	f000 fbc3 	bl	8019aec <__submore>
 8019366:	2800      	cmp	r0, #0
 8019368:	d0f1      	beq.n	801934e <_sungetc_r+0x26>
 801936a:	e7e1      	b.n	8019330 <_sungetc_r+0x8>
 801936c:	6921      	ldr	r1, [r4, #16]
 801936e:	6823      	ldr	r3, [r4, #0]
 8019370:	b151      	cbz	r1, 8019388 <_sungetc_r+0x60>
 8019372:	4299      	cmp	r1, r3
 8019374:	d208      	bcs.n	8019388 <_sungetc_r+0x60>
 8019376:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801937a:	42a9      	cmp	r1, r5
 801937c:	d104      	bne.n	8019388 <_sungetc_r+0x60>
 801937e:	3b01      	subs	r3, #1
 8019380:	3201      	adds	r2, #1
 8019382:	6023      	str	r3, [r4, #0]
 8019384:	6062      	str	r2, [r4, #4]
 8019386:	e7d5      	b.n	8019334 <_sungetc_r+0xc>
 8019388:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801938c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019390:	6363      	str	r3, [r4, #52]	; 0x34
 8019392:	2303      	movs	r3, #3
 8019394:	63a3      	str	r3, [r4, #56]	; 0x38
 8019396:	4623      	mov	r3, r4
 8019398:	f803 5f46 	strb.w	r5, [r3, #70]!
 801939c:	6023      	str	r3, [r4, #0]
 801939e:	2301      	movs	r3, #1
 80193a0:	e7dc      	b.n	801935c <_sungetc_r+0x34>

080193a2 <__ssrefill_r>:
 80193a2:	b510      	push	{r4, lr}
 80193a4:	460c      	mov	r4, r1
 80193a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80193a8:	b169      	cbz	r1, 80193c6 <__ssrefill_r+0x24>
 80193aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193ae:	4299      	cmp	r1, r3
 80193b0:	d001      	beq.n	80193b6 <__ssrefill_r+0x14>
 80193b2:	f7ff fdbf 	bl	8018f34 <_free_r>
 80193b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193b8:	6063      	str	r3, [r4, #4]
 80193ba:	2000      	movs	r0, #0
 80193bc:	6360      	str	r0, [r4, #52]	; 0x34
 80193be:	b113      	cbz	r3, 80193c6 <__ssrefill_r+0x24>
 80193c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80193c2:	6023      	str	r3, [r4, #0]
 80193c4:	bd10      	pop	{r4, pc}
 80193c6:	6923      	ldr	r3, [r4, #16]
 80193c8:	6023      	str	r3, [r4, #0]
 80193ca:	2300      	movs	r3, #0
 80193cc:	6063      	str	r3, [r4, #4]
 80193ce:	89a3      	ldrh	r3, [r4, #12]
 80193d0:	f043 0320 	orr.w	r3, r3, #32
 80193d4:	81a3      	strh	r3, [r4, #12]
 80193d6:	f04f 30ff 	mov.w	r0, #4294967295
 80193da:	e7f3      	b.n	80193c4 <__ssrefill_r+0x22>

080193dc <__ssvfiscanf_r>:
 80193dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80193e4:	460c      	mov	r4, r1
 80193e6:	2100      	movs	r1, #0
 80193e8:	9144      	str	r1, [sp, #272]	; 0x110
 80193ea:	9145      	str	r1, [sp, #276]	; 0x114
 80193ec:	499f      	ldr	r1, [pc, #636]	; (801966c <__ssvfiscanf_r+0x290>)
 80193ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80193f0:	f10d 0804 	add.w	r8, sp, #4
 80193f4:	499e      	ldr	r1, [pc, #632]	; (8019670 <__ssvfiscanf_r+0x294>)
 80193f6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019674 <__ssvfiscanf_r+0x298>
 80193fa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80193fe:	4606      	mov	r6, r0
 8019400:	4692      	mov	sl, r2
 8019402:	91a1      	str	r1, [sp, #644]	; 0x284
 8019404:	9300      	str	r3, [sp, #0]
 8019406:	270a      	movs	r7, #10
 8019408:	f89a 3000 	ldrb.w	r3, [sl]
 801940c:	2b00      	cmp	r3, #0
 801940e:	f000 812a 	beq.w	8019666 <__ssvfiscanf_r+0x28a>
 8019412:	4655      	mov	r5, sl
 8019414:	f7ff f93e 	bl	8018694 <__locale_ctype_ptr>
 8019418:	f815 bb01 	ldrb.w	fp, [r5], #1
 801941c:	4458      	add	r0, fp
 801941e:	7843      	ldrb	r3, [r0, #1]
 8019420:	f013 0308 	ands.w	r3, r3, #8
 8019424:	d01c      	beq.n	8019460 <__ssvfiscanf_r+0x84>
 8019426:	6863      	ldr	r3, [r4, #4]
 8019428:	2b00      	cmp	r3, #0
 801942a:	dd12      	ble.n	8019452 <__ssvfiscanf_r+0x76>
 801942c:	f7ff f932 	bl	8018694 <__locale_ctype_ptr>
 8019430:	6823      	ldr	r3, [r4, #0]
 8019432:	781a      	ldrb	r2, [r3, #0]
 8019434:	4410      	add	r0, r2
 8019436:	7842      	ldrb	r2, [r0, #1]
 8019438:	0712      	lsls	r2, r2, #28
 801943a:	d401      	bmi.n	8019440 <__ssvfiscanf_r+0x64>
 801943c:	46aa      	mov	sl, r5
 801943e:	e7e3      	b.n	8019408 <__ssvfiscanf_r+0x2c>
 8019440:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019442:	3201      	adds	r2, #1
 8019444:	9245      	str	r2, [sp, #276]	; 0x114
 8019446:	6862      	ldr	r2, [r4, #4]
 8019448:	3301      	adds	r3, #1
 801944a:	3a01      	subs	r2, #1
 801944c:	6062      	str	r2, [r4, #4]
 801944e:	6023      	str	r3, [r4, #0]
 8019450:	e7e9      	b.n	8019426 <__ssvfiscanf_r+0x4a>
 8019452:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019454:	4621      	mov	r1, r4
 8019456:	4630      	mov	r0, r6
 8019458:	4798      	blx	r3
 801945a:	2800      	cmp	r0, #0
 801945c:	d0e6      	beq.n	801942c <__ssvfiscanf_r+0x50>
 801945e:	e7ed      	b.n	801943c <__ssvfiscanf_r+0x60>
 8019460:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019464:	f040 8082 	bne.w	801956c <__ssvfiscanf_r+0x190>
 8019468:	9343      	str	r3, [sp, #268]	; 0x10c
 801946a:	9341      	str	r3, [sp, #260]	; 0x104
 801946c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019470:	2b2a      	cmp	r3, #42	; 0x2a
 8019472:	d103      	bne.n	801947c <__ssvfiscanf_r+0xa0>
 8019474:	2310      	movs	r3, #16
 8019476:	9341      	str	r3, [sp, #260]	; 0x104
 8019478:	f10a 0502 	add.w	r5, sl, #2
 801947c:	46aa      	mov	sl, r5
 801947e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019482:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019486:	2a09      	cmp	r2, #9
 8019488:	d922      	bls.n	80194d0 <__ssvfiscanf_r+0xf4>
 801948a:	2203      	movs	r2, #3
 801948c:	4879      	ldr	r0, [pc, #484]	; (8019674 <__ssvfiscanf_r+0x298>)
 801948e:	f7e6 febf 	bl	8000210 <memchr>
 8019492:	b138      	cbz	r0, 80194a4 <__ssvfiscanf_r+0xc8>
 8019494:	eba0 0309 	sub.w	r3, r0, r9
 8019498:	2001      	movs	r0, #1
 801949a:	4098      	lsls	r0, r3
 801949c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801949e:	4318      	orrs	r0, r3
 80194a0:	9041      	str	r0, [sp, #260]	; 0x104
 80194a2:	46aa      	mov	sl, r5
 80194a4:	f89a 3000 	ldrb.w	r3, [sl]
 80194a8:	2b67      	cmp	r3, #103	; 0x67
 80194aa:	f10a 0501 	add.w	r5, sl, #1
 80194ae:	d82b      	bhi.n	8019508 <__ssvfiscanf_r+0x12c>
 80194b0:	2b65      	cmp	r3, #101	; 0x65
 80194b2:	f080 809f 	bcs.w	80195f4 <__ssvfiscanf_r+0x218>
 80194b6:	2b47      	cmp	r3, #71	; 0x47
 80194b8:	d810      	bhi.n	80194dc <__ssvfiscanf_r+0x100>
 80194ba:	2b45      	cmp	r3, #69	; 0x45
 80194bc:	f080 809a 	bcs.w	80195f4 <__ssvfiscanf_r+0x218>
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d06c      	beq.n	801959e <__ssvfiscanf_r+0x1c2>
 80194c4:	2b25      	cmp	r3, #37	; 0x25
 80194c6:	d051      	beq.n	801956c <__ssvfiscanf_r+0x190>
 80194c8:	2303      	movs	r3, #3
 80194ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80194cc:	9742      	str	r7, [sp, #264]	; 0x108
 80194ce:	e027      	b.n	8019520 <__ssvfiscanf_r+0x144>
 80194d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80194d2:	fb07 1303 	mla	r3, r7, r3, r1
 80194d6:	3b30      	subs	r3, #48	; 0x30
 80194d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80194da:	e7cf      	b.n	801947c <__ssvfiscanf_r+0xa0>
 80194dc:	2b5b      	cmp	r3, #91	; 0x5b
 80194de:	d06a      	beq.n	80195b6 <__ssvfiscanf_r+0x1da>
 80194e0:	d80c      	bhi.n	80194fc <__ssvfiscanf_r+0x120>
 80194e2:	2b58      	cmp	r3, #88	; 0x58
 80194e4:	d1f0      	bne.n	80194c8 <__ssvfiscanf_r+0xec>
 80194e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80194e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80194ec:	9241      	str	r2, [sp, #260]	; 0x104
 80194ee:	2210      	movs	r2, #16
 80194f0:	9242      	str	r2, [sp, #264]	; 0x108
 80194f2:	2b6e      	cmp	r3, #110	; 0x6e
 80194f4:	bf8c      	ite	hi
 80194f6:	2304      	movhi	r3, #4
 80194f8:	2303      	movls	r3, #3
 80194fa:	e010      	b.n	801951e <__ssvfiscanf_r+0x142>
 80194fc:	2b63      	cmp	r3, #99	; 0x63
 80194fe:	d065      	beq.n	80195cc <__ssvfiscanf_r+0x1f0>
 8019500:	2b64      	cmp	r3, #100	; 0x64
 8019502:	d1e1      	bne.n	80194c8 <__ssvfiscanf_r+0xec>
 8019504:	9742      	str	r7, [sp, #264]	; 0x108
 8019506:	e7f4      	b.n	80194f2 <__ssvfiscanf_r+0x116>
 8019508:	2b70      	cmp	r3, #112	; 0x70
 801950a:	d04b      	beq.n	80195a4 <__ssvfiscanf_r+0x1c8>
 801950c:	d826      	bhi.n	801955c <__ssvfiscanf_r+0x180>
 801950e:	2b6e      	cmp	r3, #110	; 0x6e
 8019510:	d062      	beq.n	80195d8 <__ssvfiscanf_r+0x1fc>
 8019512:	d84c      	bhi.n	80195ae <__ssvfiscanf_r+0x1d2>
 8019514:	2b69      	cmp	r3, #105	; 0x69
 8019516:	d1d7      	bne.n	80194c8 <__ssvfiscanf_r+0xec>
 8019518:	2300      	movs	r3, #0
 801951a:	9342      	str	r3, [sp, #264]	; 0x108
 801951c:	2303      	movs	r3, #3
 801951e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019520:	6863      	ldr	r3, [r4, #4]
 8019522:	2b00      	cmp	r3, #0
 8019524:	dd68      	ble.n	80195f8 <__ssvfiscanf_r+0x21c>
 8019526:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019528:	0659      	lsls	r1, r3, #25
 801952a:	d407      	bmi.n	801953c <__ssvfiscanf_r+0x160>
 801952c:	f7ff f8b2 	bl	8018694 <__locale_ctype_ptr>
 8019530:	6823      	ldr	r3, [r4, #0]
 8019532:	781a      	ldrb	r2, [r3, #0]
 8019534:	4410      	add	r0, r2
 8019536:	7842      	ldrb	r2, [r0, #1]
 8019538:	0712      	lsls	r2, r2, #28
 801953a:	d464      	bmi.n	8019606 <__ssvfiscanf_r+0x22a>
 801953c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801953e:	2b02      	cmp	r3, #2
 8019540:	dc73      	bgt.n	801962a <__ssvfiscanf_r+0x24e>
 8019542:	466b      	mov	r3, sp
 8019544:	4622      	mov	r2, r4
 8019546:	a941      	add	r1, sp, #260	; 0x104
 8019548:	4630      	mov	r0, r6
 801954a:	f000 f897 	bl	801967c <_scanf_chars>
 801954e:	2801      	cmp	r0, #1
 8019550:	f000 8089 	beq.w	8019666 <__ssvfiscanf_r+0x28a>
 8019554:	2802      	cmp	r0, #2
 8019556:	f47f af71 	bne.w	801943c <__ssvfiscanf_r+0x60>
 801955a:	e01d      	b.n	8019598 <__ssvfiscanf_r+0x1bc>
 801955c:	2b75      	cmp	r3, #117	; 0x75
 801955e:	d0d1      	beq.n	8019504 <__ssvfiscanf_r+0x128>
 8019560:	2b78      	cmp	r3, #120	; 0x78
 8019562:	d0c0      	beq.n	80194e6 <__ssvfiscanf_r+0x10a>
 8019564:	2b73      	cmp	r3, #115	; 0x73
 8019566:	d1af      	bne.n	80194c8 <__ssvfiscanf_r+0xec>
 8019568:	2302      	movs	r3, #2
 801956a:	e7d8      	b.n	801951e <__ssvfiscanf_r+0x142>
 801956c:	6863      	ldr	r3, [r4, #4]
 801956e:	2b00      	cmp	r3, #0
 8019570:	dd0c      	ble.n	801958c <__ssvfiscanf_r+0x1b0>
 8019572:	6823      	ldr	r3, [r4, #0]
 8019574:	781a      	ldrb	r2, [r3, #0]
 8019576:	455a      	cmp	r2, fp
 8019578:	d175      	bne.n	8019666 <__ssvfiscanf_r+0x28a>
 801957a:	3301      	adds	r3, #1
 801957c:	6862      	ldr	r2, [r4, #4]
 801957e:	6023      	str	r3, [r4, #0]
 8019580:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019582:	3a01      	subs	r2, #1
 8019584:	3301      	adds	r3, #1
 8019586:	6062      	str	r2, [r4, #4]
 8019588:	9345      	str	r3, [sp, #276]	; 0x114
 801958a:	e757      	b.n	801943c <__ssvfiscanf_r+0x60>
 801958c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801958e:	4621      	mov	r1, r4
 8019590:	4630      	mov	r0, r6
 8019592:	4798      	blx	r3
 8019594:	2800      	cmp	r0, #0
 8019596:	d0ec      	beq.n	8019572 <__ssvfiscanf_r+0x196>
 8019598:	9844      	ldr	r0, [sp, #272]	; 0x110
 801959a:	2800      	cmp	r0, #0
 801959c:	d159      	bne.n	8019652 <__ssvfiscanf_r+0x276>
 801959e:	f04f 30ff 	mov.w	r0, #4294967295
 80195a2:	e05c      	b.n	801965e <__ssvfiscanf_r+0x282>
 80195a4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80195a6:	f042 0220 	orr.w	r2, r2, #32
 80195aa:	9241      	str	r2, [sp, #260]	; 0x104
 80195ac:	e79b      	b.n	80194e6 <__ssvfiscanf_r+0x10a>
 80195ae:	2308      	movs	r3, #8
 80195b0:	9342      	str	r3, [sp, #264]	; 0x108
 80195b2:	2304      	movs	r3, #4
 80195b4:	e7b3      	b.n	801951e <__ssvfiscanf_r+0x142>
 80195b6:	4629      	mov	r1, r5
 80195b8:	4640      	mov	r0, r8
 80195ba:	f000 f9c7 	bl	801994c <__sccl>
 80195be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195c4:	9341      	str	r3, [sp, #260]	; 0x104
 80195c6:	4605      	mov	r5, r0
 80195c8:	2301      	movs	r3, #1
 80195ca:	e7a8      	b.n	801951e <__ssvfiscanf_r+0x142>
 80195cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195d2:	9341      	str	r3, [sp, #260]	; 0x104
 80195d4:	2300      	movs	r3, #0
 80195d6:	e7a2      	b.n	801951e <__ssvfiscanf_r+0x142>
 80195d8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80195da:	06c3      	lsls	r3, r0, #27
 80195dc:	f53f af2e 	bmi.w	801943c <__ssvfiscanf_r+0x60>
 80195e0:	9b00      	ldr	r3, [sp, #0]
 80195e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195e4:	1d19      	adds	r1, r3, #4
 80195e6:	9100      	str	r1, [sp, #0]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	07c0      	lsls	r0, r0, #31
 80195ec:	bf4c      	ite	mi
 80195ee:	801a      	strhmi	r2, [r3, #0]
 80195f0:	601a      	strpl	r2, [r3, #0]
 80195f2:	e723      	b.n	801943c <__ssvfiscanf_r+0x60>
 80195f4:	2305      	movs	r3, #5
 80195f6:	e792      	b.n	801951e <__ssvfiscanf_r+0x142>
 80195f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195fa:	4621      	mov	r1, r4
 80195fc:	4630      	mov	r0, r6
 80195fe:	4798      	blx	r3
 8019600:	2800      	cmp	r0, #0
 8019602:	d090      	beq.n	8019526 <__ssvfiscanf_r+0x14a>
 8019604:	e7c8      	b.n	8019598 <__ssvfiscanf_r+0x1bc>
 8019606:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019608:	3201      	adds	r2, #1
 801960a:	9245      	str	r2, [sp, #276]	; 0x114
 801960c:	6862      	ldr	r2, [r4, #4]
 801960e:	3a01      	subs	r2, #1
 8019610:	2a00      	cmp	r2, #0
 8019612:	6062      	str	r2, [r4, #4]
 8019614:	dd02      	ble.n	801961c <__ssvfiscanf_r+0x240>
 8019616:	3301      	adds	r3, #1
 8019618:	6023      	str	r3, [r4, #0]
 801961a:	e787      	b.n	801952c <__ssvfiscanf_r+0x150>
 801961c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801961e:	4621      	mov	r1, r4
 8019620:	4630      	mov	r0, r6
 8019622:	4798      	blx	r3
 8019624:	2800      	cmp	r0, #0
 8019626:	d081      	beq.n	801952c <__ssvfiscanf_r+0x150>
 8019628:	e7b6      	b.n	8019598 <__ssvfiscanf_r+0x1bc>
 801962a:	2b04      	cmp	r3, #4
 801962c:	dc06      	bgt.n	801963c <__ssvfiscanf_r+0x260>
 801962e:	466b      	mov	r3, sp
 8019630:	4622      	mov	r2, r4
 8019632:	a941      	add	r1, sp, #260	; 0x104
 8019634:	4630      	mov	r0, r6
 8019636:	f000 f885 	bl	8019744 <_scanf_i>
 801963a:	e788      	b.n	801954e <__ssvfiscanf_r+0x172>
 801963c:	4b0e      	ldr	r3, [pc, #56]	; (8019678 <__ssvfiscanf_r+0x29c>)
 801963e:	2b00      	cmp	r3, #0
 8019640:	f43f aefc 	beq.w	801943c <__ssvfiscanf_r+0x60>
 8019644:	466b      	mov	r3, sp
 8019646:	4622      	mov	r2, r4
 8019648:	a941      	add	r1, sp, #260	; 0x104
 801964a:	4630      	mov	r0, r6
 801964c:	f7fc fd74 	bl	8016138 <_scanf_float>
 8019650:	e77d      	b.n	801954e <__ssvfiscanf_r+0x172>
 8019652:	89a3      	ldrh	r3, [r4, #12]
 8019654:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019658:	bf18      	it	ne
 801965a:	f04f 30ff 	movne.w	r0, #4294967295
 801965e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019666:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019668:	e7f9      	b.n	801965e <__ssvfiscanf_r+0x282>
 801966a:	bf00      	nop
 801966c:	08019329 	.word	0x08019329
 8019670:	080193a3 	.word	0x080193a3
 8019674:	0801a4aa 	.word	0x0801a4aa
 8019678:	08016139 	.word	0x08016139

0801967c <_scanf_chars>:
 801967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019680:	4615      	mov	r5, r2
 8019682:	688a      	ldr	r2, [r1, #8]
 8019684:	4680      	mov	r8, r0
 8019686:	460c      	mov	r4, r1
 8019688:	b932      	cbnz	r2, 8019698 <_scanf_chars+0x1c>
 801968a:	698a      	ldr	r2, [r1, #24]
 801968c:	2a00      	cmp	r2, #0
 801968e:	bf14      	ite	ne
 8019690:	f04f 32ff 	movne.w	r2, #4294967295
 8019694:	2201      	moveq	r2, #1
 8019696:	608a      	str	r2, [r1, #8]
 8019698:	6822      	ldr	r2, [r4, #0]
 801969a:	06d1      	lsls	r1, r2, #27
 801969c:	bf5f      	itttt	pl
 801969e:	681a      	ldrpl	r2, [r3, #0]
 80196a0:	1d11      	addpl	r1, r2, #4
 80196a2:	6019      	strpl	r1, [r3, #0]
 80196a4:	6817      	ldrpl	r7, [r2, #0]
 80196a6:	2600      	movs	r6, #0
 80196a8:	69a3      	ldr	r3, [r4, #24]
 80196aa:	b1db      	cbz	r3, 80196e4 <_scanf_chars+0x68>
 80196ac:	2b01      	cmp	r3, #1
 80196ae:	d107      	bne.n	80196c0 <_scanf_chars+0x44>
 80196b0:	682b      	ldr	r3, [r5, #0]
 80196b2:	6962      	ldr	r2, [r4, #20]
 80196b4:	781b      	ldrb	r3, [r3, #0]
 80196b6:	5cd3      	ldrb	r3, [r2, r3]
 80196b8:	b9a3      	cbnz	r3, 80196e4 <_scanf_chars+0x68>
 80196ba:	2e00      	cmp	r6, #0
 80196bc:	d132      	bne.n	8019724 <_scanf_chars+0xa8>
 80196be:	e006      	b.n	80196ce <_scanf_chars+0x52>
 80196c0:	2b02      	cmp	r3, #2
 80196c2:	d007      	beq.n	80196d4 <_scanf_chars+0x58>
 80196c4:	2e00      	cmp	r6, #0
 80196c6:	d12d      	bne.n	8019724 <_scanf_chars+0xa8>
 80196c8:	69a3      	ldr	r3, [r4, #24]
 80196ca:	2b01      	cmp	r3, #1
 80196cc:	d12a      	bne.n	8019724 <_scanf_chars+0xa8>
 80196ce:	2001      	movs	r0, #1
 80196d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196d4:	f7fe ffde 	bl	8018694 <__locale_ctype_ptr>
 80196d8:	682b      	ldr	r3, [r5, #0]
 80196da:	781b      	ldrb	r3, [r3, #0]
 80196dc:	4418      	add	r0, r3
 80196de:	7843      	ldrb	r3, [r0, #1]
 80196e0:	071b      	lsls	r3, r3, #28
 80196e2:	d4ef      	bmi.n	80196c4 <_scanf_chars+0x48>
 80196e4:	6823      	ldr	r3, [r4, #0]
 80196e6:	06da      	lsls	r2, r3, #27
 80196e8:	bf5e      	ittt	pl
 80196ea:	682b      	ldrpl	r3, [r5, #0]
 80196ec:	781b      	ldrbpl	r3, [r3, #0]
 80196ee:	703b      	strbpl	r3, [r7, #0]
 80196f0:	682a      	ldr	r2, [r5, #0]
 80196f2:	686b      	ldr	r3, [r5, #4]
 80196f4:	f102 0201 	add.w	r2, r2, #1
 80196f8:	602a      	str	r2, [r5, #0]
 80196fa:	68a2      	ldr	r2, [r4, #8]
 80196fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8019700:	f102 32ff 	add.w	r2, r2, #4294967295
 8019704:	606b      	str	r3, [r5, #4]
 8019706:	f106 0601 	add.w	r6, r6, #1
 801970a:	bf58      	it	pl
 801970c:	3701      	addpl	r7, #1
 801970e:	60a2      	str	r2, [r4, #8]
 8019710:	b142      	cbz	r2, 8019724 <_scanf_chars+0xa8>
 8019712:	2b00      	cmp	r3, #0
 8019714:	dcc8      	bgt.n	80196a8 <_scanf_chars+0x2c>
 8019716:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801971a:	4629      	mov	r1, r5
 801971c:	4640      	mov	r0, r8
 801971e:	4798      	blx	r3
 8019720:	2800      	cmp	r0, #0
 8019722:	d0c1      	beq.n	80196a8 <_scanf_chars+0x2c>
 8019724:	6823      	ldr	r3, [r4, #0]
 8019726:	f013 0310 	ands.w	r3, r3, #16
 801972a:	d105      	bne.n	8019738 <_scanf_chars+0xbc>
 801972c:	68e2      	ldr	r2, [r4, #12]
 801972e:	3201      	adds	r2, #1
 8019730:	60e2      	str	r2, [r4, #12]
 8019732:	69a2      	ldr	r2, [r4, #24]
 8019734:	b102      	cbz	r2, 8019738 <_scanf_chars+0xbc>
 8019736:	703b      	strb	r3, [r7, #0]
 8019738:	6923      	ldr	r3, [r4, #16]
 801973a:	441e      	add	r6, r3
 801973c:	6126      	str	r6, [r4, #16]
 801973e:	2000      	movs	r0, #0
 8019740:	e7c6      	b.n	80196d0 <_scanf_chars+0x54>
	...

08019744 <_scanf_i>:
 8019744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019748:	469a      	mov	sl, r3
 801974a:	4b74      	ldr	r3, [pc, #464]	; (801991c <_scanf_i+0x1d8>)
 801974c:	460c      	mov	r4, r1
 801974e:	4683      	mov	fp, r0
 8019750:	4616      	mov	r6, r2
 8019752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019756:	b087      	sub	sp, #28
 8019758:	ab03      	add	r3, sp, #12
 801975a:	68a7      	ldr	r7, [r4, #8]
 801975c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019760:	4b6f      	ldr	r3, [pc, #444]	; (8019920 <_scanf_i+0x1dc>)
 8019762:	69a1      	ldr	r1, [r4, #24]
 8019764:	4a6f      	ldr	r2, [pc, #444]	; (8019924 <_scanf_i+0x1e0>)
 8019766:	2903      	cmp	r1, #3
 8019768:	bf08      	it	eq
 801976a:	461a      	moveq	r2, r3
 801976c:	1e7b      	subs	r3, r7, #1
 801976e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019772:	bf84      	itt	hi
 8019774:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019778:	60a3      	strhi	r3, [r4, #8]
 801977a:	6823      	ldr	r3, [r4, #0]
 801977c:	9200      	str	r2, [sp, #0]
 801977e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019782:	bf88      	it	hi
 8019784:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019788:	f104 091c 	add.w	r9, r4, #28
 801978c:	6023      	str	r3, [r4, #0]
 801978e:	bf8c      	ite	hi
 8019790:	197f      	addhi	r7, r7, r5
 8019792:	2700      	movls	r7, #0
 8019794:	464b      	mov	r3, r9
 8019796:	f04f 0800 	mov.w	r8, #0
 801979a:	9301      	str	r3, [sp, #4]
 801979c:	6831      	ldr	r1, [r6, #0]
 801979e:	ab03      	add	r3, sp, #12
 80197a0:	2202      	movs	r2, #2
 80197a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80197a6:	7809      	ldrb	r1, [r1, #0]
 80197a8:	f7e6 fd32 	bl	8000210 <memchr>
 80197ac:	9b01      	ldr	r3, [sp, #4]
 80197ae:	b330      	cbz	r0, 80197fe <_scanf_i+0xba>
 80197b0:	f1b8 0f01 	cmp.w	r8, #1
 80197b4:	d15a      	bne.n	801986c <_scanf_i+0x128>
 80197b6:	6862      	ldr	r2, [r4, #4]
 80197b8:	b92a      	cbnz	r2, 80197c6 <_scanf_i+0x82>
 80197ba:	6822      	ldr	r2, [r4, #0]
 80197bc:	2108      	movs	r1, #8
 80197be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197c2:	6061      	str	r1, [r4, #4]
 80197c4:	6022      	str	r2, [r4, #0]
 80197c6:	6822      	ldr	r2, [r4, #0]
 80197c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80197cc:	6022      	str	r2, [r4, #0]
 80197ce:	68a2      	ldr	r2, [r4, #8]
 80197d0:	1e51      	subs	r1, r2, #1
 80197d2:	60a1      	str	r1, [r4, #8]
 80197d4:	b19a      	cbz	r2, 80197fe <_scanf_i+0xba>
 80197d6:	6832      	ldr	r2, [r6, #0]
 80197d8:	1c51      	adds	r1, r2, #1
 80197da:	6031      	str	r1, [r6, #0]
 80197dc:	7812      	ldrb	r2, [r2, #0]
 80197de:	701a      	strb	r2, [r3, #0]
 80197e0:	1c5d      	adds	r5, r3, #1
 80197e2:	6873      	ldr	r3, [r6, #4]
 80197e4:	3b01      	subs	r3, #1
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	6073      	str	r3, [r6, #4]
 80197ea:	dc07      	bgt.n	80197fc <_scanf_i+0xb8>
 80197ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197f0:	4631      	mov	r1, r6
 80197f2:	4658      	mov	r0, fp
 80197f4:	4798      	blx	r3
 80197f6:	2800      	cmp	r0, #0
 80197f8:	f040 8086 	bne.w	8019908 <_scanf_i+0x1c4>
 80197fc:	462b      	mov	r3, r5
 80197fe:	f108 0801 	add.w	r8, r8, #1
 8019802:	f1b8 0f03 	cmp.w	r8, #3
 8019806:	d1c8      	bne.n	801979a <_scanf_i+0x56>
 8019808:	6862      	ldr	r2, [r4, #4]
 801980a:	b90a      	cbnz	r2, 8019810 <_scanf_i+0xcc>
 801980c:	220a      	movs	r2, #10
 801980e:	6062      	str	r2, [r4, #4]
 8019810:	6862      	ldr	r2, [r4, #4]
 8019812:	4945      	ldr	r1, [pc, #276]	; (8019928 <_scanf_i+0x1e4>)
 8019814:	6960      	ldr	r0, [r4, #20]
 8019816:	9301      	str	r3, [sp, #4]
 8019818:	1a89      	subs	r1, r1, r2
 801981a:	f000 f897 	bl	801994c <__sccl>
 801981e:	9b01      	ldr	r3, [sp, #4]
 8019820:	f04f 0800 	mov.w	r8, #0
 8019824:	461d      	mov	r5, r3
 8019826:	68a3      	ldr	r3, [r4, #8]
 8019828:	6822      	ldr	r2, [r4, #0]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d03a      	beq.n	80198a4 <_scanf_i+0x160>
 801982e:	6831      	ldr	r1, [r6, #0]
 8019830:	6960      	ldr	r0, [r4, #20]
 8019832:	f891 c000 	ldrb.w	ip, [r1]
 8019836:	f810 000c 	ldrb.w	r0, [r0, ip]
 801983a:	2800      	cmp	r0, #0
 801983c:	d032      	beq.n	80198a4 <_scanf_i+0x160>
 801983e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019842:	d121      	bne.n	8019888 <_scanf_i+0x144>
 8019844:	0510      	lsls	r0, r2, #20
 8019846:	d51f      	bpl.n	8019888 <_scanf_i+0x144>
 8019848:	f108 0801 	add.w	r8, r8, #1
 801984c:	b117      	cbz	r7, 8019854 <_scanf_i+0x110>
 801984e:	3301      	adds	r3, #1
 8019850:	3f01      	subs	r7, #1
 8019852:	60a3      	str	r3, [r4, #8]
 8019854:	6873      	ldr	r3, [r6, #4]
 8019856:	3b01      	subs	r3, #1
 8019858:	2b00      	cmp	r3, #0
 801985a:	6073      	str	r3, [r6, #4]
 801985c:	dd1b      	ble.n	8019896 <_scanf_i+0x152>
 801985e:	6833      	ldr	r3, [r6, #0]
 8019860:	3301      	adds	r3, #1
 8019862:	6033      	str	r3, [r6, #0]
 8019864:	68a3      	ldr	r3, [r4, #8]
 8019866:	3b01      	subs	r3, #1
 8019868:	60a3      	str	r3, [r4, #8]
 801986a:	e7dc      	b.n	8019826 <_scanf_i+0xe2>
 801986c:	f1b8 0f02 	cmp.w	r8, #2
 8019870:	d1ad      	bne.n	80197ce <_scanf_i+0x8a>
 8019872:	6822      	ldr	r2, [r4, #0]
 8019874:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019878:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801987c:	d1bf      	bne.n	80197fe <_scanf_i+0xba>
 801987e:	2110      	movs	r1, #16
 8019880:	6061      	str	r1, [r4, #4]
 8019882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019886:	e7a1      	b.n	80197cc <_scanf_i+0x88>
 8019888:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801988c:	6022      	str	r2, [r4, #0]
 801988e:	780b      	ldrb	r3, [r1, #0]
 8019890:	702b      	strb	r3, [r5, #0]
 8019892:	3501      	adds	r5, #1
 8019894:	e7de      	b.n	8019854 <_scanf_i+0x110>
 8019896:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801989a:	4631      	mov	r1, r6
 801989c:	4658      	mov	r0, fp
 801989e:	4798      	blx	r3
 80198a0:	2800      	cmp	r0, #0
 80198a2:	d0df      	beq.n	8019864 <_scanf_i+0x120>
 80198a4:	6823      	ldr	r3, [r4, #0]
 80198a6:	05d9      	lsls	r1, r3, #23
 80198a8:	d50c      	bpl.n	80198c4 <_scanf_i+0x180>
 80198aa:	454d      	cmp	r5, r9
 80198ac:	d908      	bls.n	80198c0 <_scanf_i+0x17c>
 80198ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80198b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80198b6:	4632      	mov	r2, r6
 80198b8:	4658      	mov	r0, fp
 80198ba:	4798      	blx	r3
 80198bc:	1e6f      	subs	r7, r5, #1
 80198be:	463d      	mov	r5, r7
 80198c0:	454d      	cmp	r5, r9
 80198c2:	d029      	beq.n	8019918 <_scanf_i+0x1d4>
 80198c4:	6822      	ldr	r2, [r4, #0]
 80198c6:	f012 0210 	ands.w	r2, r2, #16
 80198ca:	d113      	bne.n	80198f4 <_scanf_i+0x1b0>
 80198cc:	702a      	strb	r2, [r5, #0]
 80198ce:	6863      	ldr	r3, [r4, #4]
 80198d0:	9e00      	ldr	r6, [sp, #0]
 80198d2:	4649      	mov	r1, r9
 80198d4:	4658      	mov	r0, fp
 80198d6:	47b0      	blx	r6
 80198d8:	f8da 3000 	ldr.w	r3, [sl]
 80198dc:	6821      	ldr	r1, [r4, #0]
 80198de:	1d1a      	adds	r2, r3, #4
 80198e0:	f8ca 2000 	str.w	r2, [sl]
 80198e4:	f011 0f20 	tst.w	r1, #32
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	d010      	beq.n	801990e <_scanf_i+0x1ca>
 80198ec:	6018      	str	r0, [r3, #0]
 80198ee:	68e3      	ldr	r3, [r4, #12]
 80198f0:	3301      	adds	r3, #1
 80198f2:	60e3      	str	r3, [r4, #12]
 80198f4:	eba5 0509 	sub.w	r5, r5, r9
 80198f8:	44a8      	add	r8, r5
 80198fa:	6925      	ldr	r5, [r4, #16]
 80198fc:	4445      	add	r5, r8
 80198fe:	6125      	str	r5, [r4, #16]
 8019900:	2000      	movs	r0, #0
 8019902:	b007      	add	sp, #28
 8019904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019908:	f04f 0800 	mov.w	r8, #0
 801990c:	e7ca      	b.n	80198a4 <_scanf_i+0x160>
 801990e:	07ca      	lsls	r2, r1, #31
 8019910:	bf4c      	ite	mi
 8019912:	8018      	strhmi	r0, [r3, #0]
 8019914:	6018      	strpl	r0, [r3, #0]
 8019916:	e7ea      	b.n	80198ee <_scanf_i+0x1aa>
 8019918:	2001      	movs	r0, #1
 801991a:	e7f2      	b.n	8019902 <_scanf_i+0x1be>
 801991c:	0801a06c 	.word	0x0801a06c
 8019920:	08017351 	.word	0x08017351
 8019924:	08019ac9 	.word	0x08019ac9
 8019928:	0801a4c5 	.word	0x0801a4c5

0801992c <_sbrk_r>:
 801992c:	b538      	push	{r3, r4, r5, lr}
 801992e:	4c06      	ldr	r4, [pc, #24]	; (8019948 <_sbrk_r+0x1c>)
 8019930:	2300      	movs	r3, #0
 8019932:	4605      	mov	r5, r0
 8019934:	4608      	mov	r0, r1
 8019936:	6023      	str	r3, [r4, #0]
 8019938:	f7ed ffbe 	bl	80078b8 <_sbrk>
 801993c:	1c43      	adds	r3, r0, #1
 801993e:	d102      	bne.n	8019946 <_sbrk_r+0x1a>
 8019940:	6823      	ldr	r3, [r4, #0]
 8019942:	b103      	cbz	r3, 8019946 <_sbrk_r+0x1a>
 8019944:	602b      	str	r3, [r5, #0]
 8019946:	bd38      	pop	{r3, r4, r5, pc}
 8019948:	2004cb8c 	.word	0x2004cb8c

0801994c <__sccl>:
 801994c:	b570      	push	{r4, r5, r6, lr}
 801994e:	780b      	ldrb	r3, [r1, #0]
 8019950:	2b5e      	cmp	r3, #94	; 0x5e
 8019952:	bf13      	iteet	ne
 8019954:	1c4a      	addne	r2, r1, #1
 8019956:	1c8a      	addeq	r2, r1, #2
 8019958:	784b      	ldrbeq	r3, [r1, #1]
 801995a:	2100      	movne	r1, #0
 801995c:	bf08      	it	eq
 801995e:	2101      	moveq	r1, #1
 8019960:	1e44      	subs	r4, r0, #1
 8019962:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019966:	f804 1f01 	strb.w	r1, [r4, #1]!
 801996a:	42ac      	cmp	r4, r5
 801996c:	d1fb      	bne.n	8019966 <__sccl+0x1a>
 801996e:	b913      	cbnz	r3, 8019976 <__sccl+0x2a>
 8019970:	3a01      	subs	r2, #1
 8019972:	4610      	mov	r0, r2
 8019974:	bd70      	pop	{r4, r5, r6, pc}
 8019976:	f081 0401 	eor.w	r4, r1, #1
 801997a:	54c4      	strb	r4, [r0, r3]
 801997c:	1c51      	adds	r1, r2, #1
 801997e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019982:	2d2d      	cmp	r5, #45	; 0x2d
 8019984:	f101 36ff 	add.w	r6, r1, #4294967295
 8019988:	460a      	mov	r2, r1
 801998a:	d006      	beq.n	801999a <__sccl+0x4e>
 801998c:	2d5d      	cmp	r5, #93	; 0x5d
 801998e:	d0f0      	beq.n	8019972 <__sccl+0x26>
 8019990:	b90d      	cbnz	r5, 8019996 <__sccl+0x4a>
 8019992:	4632      	mov	r2, r6
 8019994:	e7ed      	b.n	8019972 <__sccl+0x26>
 8019996:	462b      	mov	r3, r5
 8019998:	e7ef      	b.n	801997a <__sccl+0x2e>
 801999a:	780e      	ldrb	r6, [r1, #0]
 801999c:	2e5d      	cmp	r6, #93	; 0x5d
 801999e:	d0fa      	beq.n	8019996 <__sccl+0x4a>
 80199a0:	42b3      	cmp	r3, r6
 80199a2:	dcf8      	bgt.n	8019996 <__sccl+0x4a>
 80199a4:	3301      	adds	r3, #1
 80199a6:	429e      	cmp	r6, r3
 80199a8:	54c4      	strb	r4, [r0, r3]
 80199aa:	dcfb      	bgt.n	80199a4 <__sccl+0x58>
 80199ac:	3102      	adds	r1, #2
 80199ae:	e7e6      	b.n	801997e <__sccl+0x32>

080199b0 <strncmp>:
 80199b0:	b510      	push	{r4, lr}
 80199b2:	b16a      	cbz	r2, 80199d0 <strncmp+0x20>
 80199b4:	3901      	subs	r1, #1
 80199b6:	1884      	adds	r4, r0, r2
 80199b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80199bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80199c0:	4293      	cmp	r3, r2
 80199c2:	d103      	bne.n	80199cc <strncmp+0x1c>
 80199c4:	42a0      	cmp	r0, r4
 80199c6:	d001      	beq.n	80199cc <strncmp+0x1c>
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d1f5      	bne.n	80199b8 <strncmp+0x8>
 80199cc:	1a98      	subs	r0, r3, r2
 80199ce:	bd10      	pop	{r4, pc}
 80199d0:	4610      	mov	r0, r2
 80199d2:	e7fc      	b.n	80199ce <strncmp+0x1e>

080199d4 <_strtoul_l.isra.0>:
 80199d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199d8:	4680      	mov	r8, r0
 80199da:	4689      	mov	r9, r1
 80199dc:	4692      	mov	sl, r2
 80199de:	461e      	mov	r6, r3
 80199e0:	460f      	mov	r7, r1
 80199e2:	463d      	mov	r5, r7
 80199e4:	9808      	ldr	r0, [sp, #32]
 80199e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80199ea:	f7fe fe4f 	bl	801868c <__locale_ctype_ptr_l>
 80199ee:	4420      	add	r0, r4
 80199f0:	7843      	ldrb	r3, [r0, #1]
 80199f2:	f013 0308 	ands.w	r3, r3, #8
 80199f6:	d130      	bne.n	8019a5a <_strtoul_l.isra.0+0x86>
 80199f8:	2c2d      	cmp	r4, #45	; 0x2d
 80199fa:	d130      	bne.n	8019a5e <_strtoul_l.isra.0+0x8a>
 80199fc:	787c      	ldrb	r4, [r7, #1]
 80199fe:	1cbd      	adds	r5, r7, #2
 8019a00:	2101      	movs	r1, #1
 8019a02:	2e00      	cmp	r6, #0
 8019a04:	d05c      	beq.n	8019ac0 <_strtoul_l.isra.0+0xec>
 8019a06:	2e10      	cmp	r6, #16
 8019a08:	d109      	bne.n	8019a1e <_strtoul_l.isra.0+0x4a>
 8019a0a:	2c30      	cmp	r4, #48	; 0x30
 8019a0c:	d107      	bne.n	8019a1e <_strtoul_l.isra.0+0x4a>
 8019a0e:	782b      	ldrb	r3, [r5, #0]
 8019a10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019a14:	2b58      	cmp	r3, #88	; 0x58
 8019a16:	d14e      	bne.n	8019ab6 <_strtoul_l.isra.0+0xe2>
 8019a18:	786c      	ldrb	r4, [r5, #1]
 8019a1a:	2610      	movs	r6, #16
 8019a1c:	3502      	adds	r5, #2
 8019a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8019a22:	2300      	movs	r3, #0
 8019a24:	fbb2 f2f6 	udiv	r2, r2, r6
 8019a28:	fb06 fc02 	mul.w	ip, r6, r2
 8019a2c:	ea6f 0c0c 	mvn.w	ip, ip
 8019a30:	4618      	mov	r0, r3
 8019a32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019a36:	2f09      	cmp	r7, #9
 8019a38:	d817      	bhi.n	8019a6a <_strtoul_l.isra.0+0x96>
 8019a3a:	463c      	mov	r4, r7
 8019a3c:	42a6      	cmp	r6, r4
 8019a3e:	dd23      	ble.n	8019a88 <_strtoul_l.isra.0+0xb4>
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	db1e      	blt.n	8019a82 <_strtoul_l.isra.0+0xae>
 8019a44:	4282      	cmp	r2, r0
 8019a46:	d31c      	bcc.n	8019a82 <_strtoul_l.isra.0+0xae>
 8019a48:	d101      	bne.n	8019a4e <_strtoul_l.isra.0+0x7a>
 8019a4a:	45a4      	cmp	ip, r4
 8019a4c:	db19      	blt.n	8019a82 <_strtoul_l.isra.0+0xae>
 8019a4e:	fb00 4006 	mla	r0, r0, r6, r4
 8019a52:	2301      	movs	r3, #1
 8019a54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a58:	e7eb      	b.n	8019a32 <_strtoul_l.isra.0+0x5e>
 8019a5a:	462f      	mov	r7, r5
 8019a5c:	e7c1      	b.n	80199e2 <_strtoul_l.isra.0+0xe>
 8019a5e:	2c2b      	cmp	r4, #43	; 0x2b
 8019a60:	bf04      	itt	eq
 8019a62:	1cbd      	addeq	r5, r7, #2
 8019a64:	787c      	ldrbeq	r4, [r7, #1]
 8019a66:	4619      	mov	r1, r3
 8019a68:	e7cb      	b.n	8019a02 <_strtoul_l.isra.0+0x2e>
 8019a6a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019a6e:	2f19      	cmp	r7, #25
 8019a70:	d801      	bhi.n	8019a76 <_strtoul_l.isra.0+0xa2>
 8019a72:	3c37      	subs	r4, #55	; 0x37
 8019a74:	e7e2      	b.n	8019a3c <_strtoul_l.isra.0+0x68>
 8019a76:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019a7a:	2f19      	cmp	r7, #25
 8019a7c:	d804      	bhi.n	8019a88 <_strtoul_l.isra.0+0xb4>
 8019a7e:	3c57      	subs	r4, #87	; 0x57
 8019a80:	e7dc      	b.n	8019a3c <_strtoul_l.isra.0+0x68>
 8019a82:	f04f 33ff 	mov.w	r3, #4294967295
 8019a86:	e7e5      	b.n	8019a54 <_strtoul_l.isra.0+0x80>
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	da09      	bge.n	8019aa0 <_strtoul_l.isra.0+0xcc>
 8019a8c:	2322      	movs	r3, #34	; 0x22
 8019a8e:	f8c8 3000 	str.w	r3, [r8]
 8019a92:	f04f 30ff 	mov.w	r0, #4294967295
 8019a96:	f1ba 0f00 	cmp.w	sl, #0
 8019a9a:	d107      	bne.n	8019aac <_strtoul_l.isra.0+0xd8>
 8019a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019aa0:	b101      	cbz	r1, 8019aa4 <_strtoul_l.isra.0+0xd0>
 8019aa2:	4240      	negs	r0, r0
 8019aa4:	f1ba 0f00 	cmp.w	sl, #0
 8019aa8:	d0f8      	beq.n	8019a9c <_strtoul_l.isra.0+0xc8>
 8019aaa:	b10b      	cbz	r3, 8019ab0 <_strtoul_l.isra.0+0xdc>
 8019aac:	f105 39ff 	add.w	r9, r5, #4294967295
 8019ab0:	f8ca 9000 	str.w	r9, [sl]
 8019ab4:	e7f2      	b.n	8019a9c <_strtoul_l.isra.0+0xc8>
 8019ab6:	2430      	movs	r4, #48	; 0x30
 8019ab8:	2e00      	cmp	r6, #0
 8019aba:	d1b0      	bne.n	8019a1e <_strtoul_l.isra.0+0x4a>
 8019abc:	2608      	movs	r6, #8
 8019abe:	e7ae      	b.n	8019a1e <_strtoul_l.isra.0+0x4a>
 8019ac0:	2c30      	cmp	r4, #48	; 0x30
 8019ac2:	d0a4      	beq.n	8019a0e <_strtoul_l.isra.0+0x3a>
 8019ac4:	260a      	movs	r6, #10
 8019ac6:	e7aa      	b.n	8019a1e <_strtoul_l.isra.0+0x4a>

08019ac8 <_strtoul_r>:
 8019ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019aca:	4c06      	ldr	r4, [pc, #24]	; (8019ae4 <_strtoul_r+0x1c>)
 8019acc:	4d06      	ldr	r5, [pc, #24]	; (8019ae8 <_strtoul_r+0x20>)
 8019ace:	6824      	ldr	r4, [r4, #0]
 8019ad0:	6a24      	ldr	r4, [r4, #32]
 8019ad2:	2c00      	cmp	r4, #0
 8019ad4:	bf08      	it	eq
 8019ad6:	462c      	moveq	r4, r5
 8019ad8:	9400      	str	r4, [sp, #0]
 8019ada:	f7ff ff7b 	bl	80199d4 <_strtoul_l.isra.0>
 8019ade:	b003      	add	sp, #12
 8019ae0:	bd30      	pop	{r4, r5, pc}
 8019ae2:	bf00      	nop
 8019ae4:	2000000c 	.word	0x2000000c
 8019ae8:	20000070 	.word	0x20000070

08019aec <__submore>:
 8019aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019af0:	460c      	mov	r4, r1
 8019af2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019af8:	4299      	cmp	r1, r3
 8019afa:	d11d      	bne.n	8019b38 <__submore+0x4c>
 8019afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019b00:	f7ff fa66 	bl	8018fd0 <_malloc_r>
 8019b04:	b918      	cbnz	r0, 8019b0e <__submore+0x22>
 8019b06:	f04f 30ff 	mov.w	r0, #4294967295
 8019b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b12:	63a3      	str	r3, [r4, #56]	; 0x38
 8019b14:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019b18:	6360      	str	r0, [r4, #52]	; 0x34
 8019b1a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019b1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019b22:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019b26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019b2a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019b2e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019b32:	6020      	str	r0, [r4, #0]
 8019b34:	2000      	movs	r0, #0
 8019b36:	e7e8      	b.n	8019b0a <__submore+0x1e>
 8019b38:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019b3a:	0077      	lsls	r7, r6, #1
 8019b3c:	463a      	mov	r2, r7
 8019b3e:	f000 f837 	bl	8019bb0 <_realloc_r>
 8019b42:	4605      	mov	r5, r0
 8019b44:	2800      	cmp	r0, #0
 8019b46:	d0de      	beq.n	8019b06 <__submore+0x1a>
 8019b48:	eb00 0806 	add.w	r8, r0, r6
 8019b4c:	4601      	mov	r1, r0
 8019b4e:	4632      	mov	r2, r6
 8019b50:	4640      	mov	r0, r8
 8019b52:	f7fe fdd7 	bl	8018704 <memcpy>
 8019b56:	f8c4 8000 	str.w	r8, [r4]
 8019b5a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019b5e:	e7e9      	b.n	8019b34 <__submore+0x48>

08019b60 <__ascii_wctomb>:
 8019b60:	b149      	cbz	r1, 8019b76 <__ascii_wctomb+0x16>
 8019b62:	2aff      	cmp	r2, #255	; 0xff
 8019b64:	bf85      	ittet	hi
 8019b66:	238a      	movhi	r3, #138	; 0x8a
 8019b68:	6003      	strhi	r3, [r0, #0]
 8019b6a:	700a      	strbls	r2, [r1, #0]
 8019b6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b70:	bf98      	it	ls
 8019b72:	2001      	movls	r0, #1
 8019b74:	4770      	bx	lr
 8019b76:	4608      	mov	r0, r1
 8019b78:	4770      	bx	lr

08019b7a <memmove>:
 8019b7a:	4288      	cmp	r0, r1
 8019b7c:	b510      	push	{r4, lr}
 8019b7e:	eb01 0302 	add.w	r3, r1, r2
 8019b82:	d807      	bhi.n	8019b94 <memmove+0x1a>
 8019b84:	1e42      	subs	r2, r0, #1
 8019b86:	4299      	cmp	r1, r3
 8019b88:	d00a      	beq.n	8019ba0 <memmove+0x26>
 8019b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019b92:	e7f8      	b.n	8019b86 <memmove+0xc>
 8019b94:	4283      	cmp	r3, r0
 8019b96:	d9f5      	bls.n	8019b84 <memmove+0xa>
 8019b98:	1881      	adds	r1, r0, r2
 8019b9a:	1ad2      	subs	r2, r2, r3
 8019b9c:	42d3      	cmn	r3, r2
 8019b9e:	d100      	bne.n	8019ba2 <memmove+0x28>
 8019ba0:	bd10      	pop	{r4, pc}
 8019ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019ba6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019baa:	e7f7      	b.n	8019b9c <memmove+0x22>

08019bac <__malloc_lock>:
 8019bac:	4770      	bx	lr

08019bae <__malloc_unlock>:
 8019bae:	4770      	bx	lr

08019bb0 <_realloc_r>:
 8019bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bb2:	4607      	mov	r7, r0
 8019bb4:	4614      	mov	r4, r2
 8019bb6:	460e      	mov	r6, r1
 8019bb8:	b921      	cbnz	r1, 8019bc4 <_realloc_r+0x14>
 8019bba:	4611      	mov	r1, r2
 8019bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019bc0:	f7ff ba06 	b.w	8018fd0 <_malloc_r>
 8019bc4:	b922      	cbnz	r2, 8019bd0 <_realloc_r+0x20>
 8019bc6:	f7ff f9b5 	bl	8018f34 <_free_r>
 8019bca:	4625      	mov	r5, r4
 8019bcc:	4628      	mov	r0, r5
 8019bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd0:	f000 f814 	bl	8019bfc <_malloc_usable_size_r>
 8019bd4:	42a0      	cmp	r0, r4
 8019bd6:	d20f      	bcs.n	8019bf8 <_realloc_r+0x48>
 8019bd8:	4621      	mov	r1, r4
 8019bda:	4638      	mov	r0, r7
 8019bdc:	f7ff f9f8 	bl	8018fd0 <_malloc_r>
 8019be0:	4605      	mov	r5, r0
 8019be2:	2800      	cmp	r0, #0
 8019be4:	d0f2      	beq.n	8019bcc <_realloc_r+0x1c>
 8019be6:	4631      	mov	r1, r6
 8019be8:	4622      	mov	r2, r4
 8019bea:	f7fe fd8b 	bl	8018704 <memcpy>
 8019bee:	4631      	mov	r1, r6
 8019bf0:	4638      	mov	r0, r7
 8019bf2:	f7ff f99f 	bl	8018f34 <_free_r>
 8019bf6:	e7e9      	b.n	8019bcc <_realloc_r+0x1c>
 8019bf8:	4635      	mov	r5, r6
 8019bfa:	e7e7      	b.n	8019bcc <_realloc_r+0x1c>

08019bfc <_malloc_usable_size_r>:
 8019bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c00:	1f18      	subs	r0, r3, #4
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	bfbc      	itt	lt
 8019c06:	580b      	ldrlt	r3, [r1, r0]
 8019c08:	18c0      	addlt	r0, r0, r3
 8019c0a:	4770      	bx	lr

08019c0c <_init>:
 8019c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c0e:	bf00      	nop
 8019c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c12:	bc08      	pop	{r3}
 8019c14:	469e      	mov	lr, r3
 8019c16:	4770      	bx	lr

08019c18 <_fini>:
 8019c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c1a:	bf00      	nop
 8019c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c1e:	bc08      	pop	{r3}
 8019c20:	469e      	mov	lr, r3
 8019c22:	4770      	bx	lr
