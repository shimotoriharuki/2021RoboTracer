
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187b4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08018978  08018978  00028978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080191ac  080191ac  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080191ac  080191ac  000291ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080191b4  080191b4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080191b4  080191b4  000291b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080191bc  080191bc  000291bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080191c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c990  200001e0  0801939c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2004cb70  0801939c  0003cb70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1a2  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00075320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265e9  00000000  00000000  000ac844  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110c8  00000000  00000000  000d2e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3ef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a548  00000000  00000000  001e3f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801895c 	.word	0x0801895c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801895c 	.word	0x0801895c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a f9ba 	bl	800b350 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2004a668 	.word	0x2004a668

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a f9a2 	bl	800b350 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2004a668 	.word	0x2004a668

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f843 	bl	800b0ac <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fdaa 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fda4 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fd9e 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fd98 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fd92 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fd8c 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fd86 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fd80 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fd7a 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fd74 	bl	8009b80 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fd68 	bl	8009b80 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fd62 	bl	8009b80 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f014 ffe1 	bl	80160f0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fe72 	bl	800eee0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fe6e 	bl	800eee0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fe6a 	bl	800eee0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fe66 	bl	800eee0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004a754 	.word	0x2004a754
 8001248:	2004a6bc 	.word	0x2004a6bc
 800124c:	2004a7dc 	.word	0x2004a7dc

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004a754 	.word	0x2004a754
 800137c:	2004a7dc 	.word	0x2004a7dc
 8001380:	2004a6bc 	.word	0x2004a6bc

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004a754 	.word	0x2004a754
 80013c4:	2004a6bc 	.word	0x2004a6bc
 80013c8:	2004a7dc 	.word	0x2004a7dc

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fe26 	bl	800f080 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fe22 	bl	800f080 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2004a8bc 	.word	0x2004a8bc
 8001458:	2004a5a0 	.word	0x2004a5a0
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <_ZN7Encoder6updateEv+0xf0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800155c <_ZN7Encoder6updateEv+0xf4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001560 <_ZN7Encoder6updateEv+0xf8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b34      	ldr	r3, [pc, #208]	; (8001564 <_ZN7Encoder6updateEv+0xfc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800155c <_ZN7Encoder6updateEv+0xf4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001560 <_ZN7Encoder6updateEv+0xf8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7ff f852 	bl	8000578 <__aeabi_f2d>
 80014d4:	a31e      	add	r3, pc, #120	; (adr r3, 8001550 <_ZN7Encoder6updateEv+0xe8>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff f8a5 	bl	8000628 <__aeabi_dmul>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	4618      	mov	r0, r3
 80014e4:	4621      	mov	r1, r4
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ee:	f7ff f9c5 	bl	800087c <__aeabi_ddiv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	4618      	mov	r0, r3
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff fb8d 	bl	8000c18 <__aeabi_d2f>
 80014fe:	4602      	mov	r2, r0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	ed93 7a05 	vldr	s14, [r3, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edd3 7a02 	vldr	s15, [r3, #8]
 8001526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	ed93 7a07 	vldr	s14, [r3, #28]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edd3 7a02 	vldr	s15, [r3, #8]
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edc3 7a07 	vstr	s15, [r3, #28]
	//monitor_distance = distance_10mm_;
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	bf00      	nop
 8001550:	ce73a049 	.word	0xce73a049
 8001554:	3f77a3f6 	.word	0x3f77a3f6
 8001558:	40010000 	.word	0x40010000
 800155c:	47000000 	.word	0x47000000
 8001560:	3f912547 	.word	0x3f912547
 8001564:	40010400 	.word	0x40010400

08001568 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <_ZN7Encoder5clearEv+0x3c>)
 8001582:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_ZN7Encoder5clearEv+0x40>)
 800158a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40010000 	.word	0x40010000
 80015a8:	40010400 	.word	0x40010400

080015ac <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	return distance_;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	ee07 3a90 	vmov	s15, r3
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	ee07 3a90 	vmov	s15, r3
}
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	ee07 3a90 	vmov	s15, r3
}
 8001620:	eeb0 0a67 	vmov.f32	s0, s15
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	619a      	str	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	ee07 3a90 	vmov	s15, r3
}
 8001694:	eeb0 0a67 	vmov.f32	s0, s15
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80016cc:	6839      	ldr	r1, [r7, #0]
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f978 	bl	80019c4 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80016d4:	f000 f98c 	bl	80019f0 <fopen_folder_and_file>

	return ret;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <user_fclose+0x1c>)
 80016f0:	f012 fa20 	bl	8013b34 <f_close>

	return ret;
 80016f4:	79fb      	ldrb	r3, [r7, #7]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200494ac 	.word	0x200494ac

08001704 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b087      	sub	sp, #28
 8001708:	af02      	add	r7, sp, #8
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	80fb      	strh	r3, [r7, #6]
 8001710:	4613      	mov	r3, r2
 8001712:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001718:	2300      	movs	r3, #0
 800171a:	81fb      	strh	r3, [r7, #14]
 800171c:	e030      	b.n	8001780 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800171e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	4413      	add	r3, r2
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff24 	bl	8000578 <__aeabi_f2d>
 8001730:	4603      	mov	r3, r0
 8001732:	460c      	mov	r4, r1
 8001734:	e9cd 3400 	strd	r3, r4, [sp]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <sd_write_float+0x94>)
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	4817      	ldr	r0, [pc, #92]	; (800179c <sd_write_float+0x98>)
 800173e:	f013 fd89 	bl	8015254 <sniprintf>

		if(state == ADD_WRITE){
 8001742:	797b      	ldrb	r3, [r7, #5]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <sd_write_float+0x9c>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4619      	mov	r1, r3
 800174e:	4814      	ldr	r0, [pc, #80]	; (80017a0 <sd_write_float+0x9c>)
 8001750:	f012 fa64 	bl	8013c1c <f_lseek>
 8001754:	e003      	b.n	800175e <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001756:	2100      	movs	r1, #0
 8001758:	4811      	ldr	r0, [pc, #68]	; (80017a0 <sd_write_float+0x9c>)
 800175a:	f012 fa5f 	bl	8013c1c <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800175e:	480f      	ldr	r0, [pc, #60]	; (800179c <sd_write_float+0x98>)
 8001760:	f7fe fd4e 	bl	8000200 <strlen>
 8001764:	4602      	mov	r2, r0
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <sd_write_float+0xa0>)
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <sd_write_float+0x98>)
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <sd_write_float+0x9c>)
 800176c:	f011 ffcd 	bl	801370a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001770:	f000 f958 	bl	8001a24 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001774:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001778:	b29b      	uxth	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	81fb      	strh	r3, [r7, #14]
 8001780:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbc8      	blt.n	800171e <sd_write_float+0x1a>
	}
	return ret;
 800178c:	7b7b      	ldrb	r3, [r7, #13]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	08018978 	.word	0x08018978
 800179c:	2004941c 	.word	0x2004941c
 80017a0:	200494ac 	.word	0x200494ac
 80017a4:	2004949c 	.word	0x2004949c

080017a8 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f900 	bl	80019c4 <create_path>

	if(state == OVER_WRITE){
 80017c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d108      	bne.n	80017de <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80017cc:	4822      	ldr	r0, [pc, #136]	; (8001858 <sd_write_array_float+0xb0>)
 80017ce:	f012 f9db 	bl	8013b88 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80017d2:	4822      	ldr	r0, [pc, #136]	; (800185c <sd_write_array_float+0xb4>)
 80017d4:	f012 fc46 	bl	8014064 <f_unlink>
		f_chdir("..");
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <sd_write_array_float+0xb8>)
 80017da:	f012 f9d5 	bl	8013b88 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80017de:	f000 f907 	bl	80019f0 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80017e2:	2300      	movs	r3, #0
 80017e4:	82fb      	strh	r3, [r7, #22]
 80017e6:	e028      	b.n	800183a <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe febf 	bl	8000578 <__aeabi_f2d>
 80017fa:	4603      	mov	r3, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	e9cd 3400 	strd	r3, r4, [sp]
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <sd_write_array_float+0xbc>)
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	4818      	ldr	r0, [pc, #96]	; (8001868 <sd_write_array_float+0xc0>)
 8001808:	f013 fd24 	bl	8015254 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <sd_write_array_float+0xc4>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4619      	mov	r1, r3
 8001812:	4816      	ldr	r0, [pc, #88]	; (800186c <sd_write_array_float+0xc4>)
 8001814:	f012 fa02 	bl	8013c1c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001818:	4813      	ldr	r0, [pc, #76]	; (8001868 <sd_write_array_float+0xc0>)
 800181a:	f7fe fcf1 	bl	8000200 <strlen>
 800181e:	4602      	mov	r2, r0
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <sd_write_array_float+0xc8>)
 8001822:	4911      	ldr	r1, [pc, #68]	; (8001868 <sd_write_array_float+0xc0>)
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <sd_write_array_float+0xc4>)
 8001826:	f011 ff70 	bl	801370a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800182a:	f000 f8fb 	bl	8001a24 <bufclear>
	for(short i = 0 ; i < size; i++){
 800182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001832:	b29b      	uxth	r3, r3
 8001834:	3301      	adds	r3, #1
 8001836:	b29b      	uxth	r3, r3
 8001838:	82fb      	strh	r3, [r7, #22]
 800183a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800183e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	dbd0      	blt.n	80017e8 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001846:	4809      	ldr	r0, [pc, #36]	; (800186c <sd_write_array_float+0xc4>)
 8001848:	f012 f974 	bl	8013b34 <f_close>

	return ret;
 800184c:	7d7b      	ldrb	r3, [r7, #21]
}
 800184e:	4618      	mov	r0, r3
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}
 8001856:	bf00      	nop
 8001858:	2004931c 	.word	0x2004931c
 800185c:	200481dc 	.word	0x200481dc
 8001860:	08018994 	.word	0x08018994
 8001864:	08018978 	.word	0x08018978
 8001868:	2004941c 	.word	0x2004941c
 800186c:	200494ac 	.word	0x200494ac
 8001870:	2004949c 	.word	0x2004949c

08001874 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	4613      	mov	r3, r2
 8001882:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f898 	bl	80019c4 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001894:	f000 f8ac 	bl	80019f0 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001898:	e019      	b.n	80018ce <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800189a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4913      	ldr	r1, [pc, #76]	; (80018f4 <sd_read_array_float+0x80>)
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <sd_read_array_float+0x84>)
 80018aa:	f013 fd27 	bl	80152fc <siscanf>
		i++;
 80018ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	3301      	adds	r3, #1
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80018ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	db03      	blt.n	80018ce <sd_read_array_float+0x5a>
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <sd_read_array_float+0x88>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	4809      	ldr	r0, [pc, #36]	; (80018f8 <sd_read_array_float+0x84>)
 80018d4:	f012 fda4 	bl	8014420 <f_gets>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1dd      	bne.n	800189a <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80018de:	f000 f8a1 	bl	8001a24 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <sd_read_array_float+0x88>)
 80018e4:	f012 f926 	bl	8013b34 <f_close>

	return ret;
 80018e8:	7d7b      	ldrb	r3, [r7, #21]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	08018984 	.word	0x08018984
 80018f8:	2004941c 	.word	0x2004941c
 80018fc:	200494ac 	.word	0x200494ac

08001900 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f852 	bl	80019c4 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001920:	f000 f866 	bl	80019f0 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001924:	e019      	b.n	800195a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001926:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4913      	ldr	r1, [pc, #76]	; (8001980 <sd_read_array_double+0x80>)
 8001934:	4813      	ldr	r0, [pc, #76]	; (8001984 <sd_read_array_double+0x84>)
 8001936:	f013 fce1 	bl	80152fc <siscanf>
		i++;
 800193a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800193e:	b29b      	uxth	r3, r3
 8001940:	3301      	adds	r3, #1
 8001942:	b29b      	uxth	r3, r3
 8001944:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001946:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194e:	429a      	cmp	r2, r3
 8001950:	db03      	blt.n	800195a <sd_read_array_double+0x5a>
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	3b01      	subs	r3, #1
 8001956:	b29b      	uxth	r3, r3
 8001958:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <sd_read_array_double+0x88>)
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	4809      	ldr	r0, [pc, #36]	; (8001984 <sd_read_array_double+0x84>)
 8001960:	f012 fd5e 	bl	8014420 <f_gets>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1dd      	bne.n	8001926 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800196a:	f000 f85b 	bl	8001a24 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <sd_read_array_double+0x88>)
 8001970:	f012 f8e0 	bl	8013b34 <f_close>

	return ret;
 8001974:	7d7b      	ldrb	r3, [r7, #21]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	08018990 	.word	0x08018990
 8001984:	2004941c 	.word	0x2004941c
 8001988:	200494ac 	.word	0x200494ac

0800198c <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001996:	2201      	movs	r2, #1
 8001998:	4908      	ldr	r1, [pc, #32]	; (80019bc <sd_mount+0x30>)
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <sd_mount+0x34>)
 800199c:	f011 fb42 	bl	8013024 <f_mount>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <sd_mount+0x20>
 80019a6:	2301      	movs	r3, #1
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	e001      	b.n	80019b0 <sd_mount+0x24>
	else ret = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	71fb      	strb	r3, [r7, #7]

	return ret;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	080189a0 	.word	0x080189a0
 80019c0:	200482dc 	.word	0x200482dc

080019c4 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <create_path+0x24>)
 80019d2:	f013 fcbf 	bl	8015354 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80019d6:	6839      	ldr	r1, [r7, #0]
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <create_path+0x28>)
 80019da:	f013 fcbb 	bl	8015354 <strcpy>

}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2004931c 	.word	0x2004931c
 80019ec:	200481dc 	.word	0x200481dc

080019f0 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <fopen_folder_and_file+0x24>)
 80019f6:	f012 fbf7 	bl	80141e8 <f_mkdir>

	f_chdir(dirpath);
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <fopen_folder_and_file+0x24>)
 80019fc:	f012 f8c4 	bl	8013b88 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001a00:	2213      	movs	r2, #19
 8001a02:	4905      	ldr	r1, [pc, #20]	; (8001a18 <fopen_folder_and_file+0x28>)
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <fopen_folder_and_file+0x2c>)
 8001a06:	f011 fb53 	bl	80130b0 <f_open>

	f_chdir("..");
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <fopen_folder_and_file+0x30>)
 8001a0c:	f012 f8bc 	bl	8013b88 <f_chdir>


}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2004931c 	.word	0x2004931c
 8001a18:	200481dc 	.word	0x200481dc
 8001a1c:	200494ac 	.word	0x200494ac
 8001a20:	08018994 	.word	0x08018994

08001a24 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e007      	b.n	8001a40 <bufclear+0x1c>
		buffer[i] = '\0';
 8001a30:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <bufclear+0x30>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b7f      	cmp	r3, #127	; 0x7f
 8001a44:	ddf4      	ble.n	8001a30 <bufclear+0xc>
	}
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2004941c 	.word	0x2004941c

08001a58 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a72:	480e      	ldr	r0, [pc, #56]	; (8001aac <read_byte+0x54>)
 8001a74:	f009 fb1a 	bl	800b0ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001a78:	f107 010f 	add.w	r1, r7, #15
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	2201      	movs	r2, #1
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <read_byte+0x58>)
 8001a82:	f00c fcc3 	bl	800e40c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001a86:	f107 010e 	add.w	r1, r7, #14
 8001a8a:	2364      	movs	r3, #100	; 0x64
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <read_byte+0x58>)
 8001a90:	f00c fdf0 	bl	800e674 <HAL_SPI_Receive>
	CS_SET;
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a9a:	4804      	ldr	r0, [pc, #16]	; (8001aac <read_byte+0x54>)
 8001a9c:	f009 fb06 	bl	800b0ac <HAL_GPIO_WritePin>

	return val;
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	2004a548 	.word	0x2004a548

08001ab4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	71fb      	strb	r3, [r7, #7]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <write_byte+0x54>)
 8001ad6:	f009 fae9 	bl	800b0ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001ada:	f107 010f 	add.w	r1, r7, #15
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	480a      	ldr	r0, [pc, #40]	; (8001b0c <write_byte+0x58>)
 8001ae4:	f00c fc92 	bl	800e40c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001ae8:	1db9      	adds	r1, r7, #6
 8001aea:	2364      	movs	r3, #100	; 0x64
 8001aec:	2201      	movs	r2, #1
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <write_byte+0x58>)
 8001af0:	f00c fc8c 	bl	800e40c <HAL_SPI_Transmit>
	CS_SET;
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afa:	4803      	ldr	r0, [pc, #12]	; (8001b08 <write_byte+0x54>)
 8001afc:	f009 fad6 	bl	800b0ac <HAL_GPIO_WritePin>
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	2004a548 	.word	0x2004a548

08001b10 <IMU_init>:

uint16_t IMU_init() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ff9c 	bl	8001a58 <read_byte>
 8001b20:	4603      	mov	r3, r0
 8001b22:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	2be0      	cmp	r3, #224	; 0xe0
 8001b28:	d119      	bne.n	8001b5e <IMU_init+0x4e>
		ret = 1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001b2e:	2101      	movs	r1, #1
 8001b30:	2006      	movs	r0, #6
 8001b32:	f7ff ffbf 	bl	8001ab4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001b36:	2110      	movs	r1, #16
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f7ff ffbb 	bl	8001ab4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001b3e:	2120      	movs	r1, #32
 8001b40:	207f      	movs	r0, #127	; 0x7f
 8001b42:	f7ff ffb7 	bl	8001ab4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001b46:	2106      	movs	r1, #6
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f7ff ffb3 	bl	8001ab4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001b4e:	2106      	movs	r1, #6
 8001b50:	2014      	movs	r0, #20
 8001b52:	f7ff ffaf 	bl	8001ab4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001b56:	2100      	movs	r1, #0
 8001b58:	207f      	movs	r0, #127	; 0x7f
 8001b5a:	f7ff ffab 	bl	8001ab4 <write_byte>
	}
	return ret;
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <read_gyro_data>:

void read_gyro_data() {
 8001b68:	b598      	push	{r3, r4, r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001b6c:	2033      	movs	r0, #51	; 0x33
 8001b6e:	f7ff ff73 	bl	8001a58 <read_byte>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	2034      	movs	r0, #52	; 0x34
 8001b7a:	f7ff ff6d 	bl	8001a58 <read_byte>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	4323      	orrs	r3, r4
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <read_gyro_data+0x64>)
 8001b88:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001b8a:	2035      	movs	r0, #53	; 0x35
 8001b8c:	f7ff ff64 	bl	8001a58 <read_byte>
 8001b90:	4603      	mov	r3, r0
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	b21c      	sxth	r4, r3
 8001b96:	2036      	movs	r0, #54	; 0x36
 8001b98:	f7ff ff5e 	bl	8001a58 <read_byte>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	4323      	orrs	r3, r4
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <read_gyro_data+0x68>)
 8001ba6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001ba8:	2037      	movs	r0, #55	; 0x37
 8001baa:	f7ff ff55 	bl	8001a58 <read_byte>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21c      	sxth	r4, r3
 8001bb4:	2038      	movs	r0, #56	; 0x38
 8001bb6:	f7ff ff4f 	bl	8001a58 <read_byte>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4323      	orrs	r3, r4
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <read_gyro_data+0x6c>)
 8001bc4:	801a      	strh	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	bd98      	pop	{r3, r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2004a4e4 	.word	0x2004a4e4
 8001bd0:	2004a4e2 	.word	0x2004a4e2
 8001bd4:	2004a4dc 	.word	0x2004a4dc

08001bd8 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	805a      	strh	r2, [r3, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	809a      	strh	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	80da      	strh	r2, [r3, #6]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	811a      	strh	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	815a      	strh	r2, [r3, #10]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
{

}
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001c24:	f7ff ff74 	bl	8001b10 <IMU_init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001c2c:	f7ff fa38 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c30:	2100      	movs	r1, #0
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fa44 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001c38:	4809      	ldr	r0, [pc, #36]	; (8001c60 <_ZN3IMU4initEv+0x44>)
 8001c3a:	f7ff fa6b 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fa3d 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001c46:	89fb      	ldrh	r3, [r7, #14]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <_ZN3IMU4initEv+0x48>)
 8001c4c:	f7ff fa62 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c54:	f007 ff94 	bl	8009b80 <HAL_Delay>

}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	080189a4 	.word	0x080189a4
 8001c64:	080189b0 	.word	0x080189b0

08001c68 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001c70:	f7ff ff7a 	bl	8001b68 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <_ZN3IMU12updateValuesEv+0xa0>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <_ZN3IMU12updateValuesEv+0xa4>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <_ZN3IMU12updateValuesEv+0xa8>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc5b 	bl	8000554 <__aeabi_i2d>
 8001c9e:	a316      	add	r3, pc, #88	; (adr r3, 8001cf8 <_ZN3IMU12updateValuesEv+0x90>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fcc0 	bl	8000628 <__aeabi_dmul>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	4625      	mov	r5, r4
 8001cae:	461c      	mov	r4, r3
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <_ZN3IMU12updateValuesEv+0xac>)
 8001cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc4c 	bl	8000554 <__aeabi_i2d>
 8001cbc:	a310      	add	r3, pc, #64	; (adr r3, 8001d00 <_ZN3IMU12updateValuesEv+0x98>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fcb1 	bl	8000628 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f7fe faf5 	bl	80002bc <__adddf3>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4621      	mov	r1, r4
 8001cda:	f7fe ff55 	bl	8000b88 <__aeabi_d2iz>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <_ZN3IMU12updateValuesEv+0xac>)
 8001cee:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf8:	47ae147b 	.word	0x47ae147b
 8001cfc:	3f847ae1 	.word	0x3f847ae1
 8001d00:	7ae147ae 	.word	0x7ae147ae
 8001d04:	3fefae14 	.word	0x3fefae14
 8001d08:	2004a4e4 	.word	0x2004a4e4
 8001d0c:	2004a4e2 	.word	0x2004a4e2
 8001d10:	2004a4dc 	.word	0x2004a4dc
 8001d14:	200001fc 	.word	0x200001fc

08001d18 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7fe fc1b 	bl	8000578 <__aeabi_f2d>
 8001d42:	a316      	add	r3, pc, #88	; (adr r3, 8001d9c <_ZN3IMU8getOmegaEv+0x84>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fd98 	bl	800087c <__aeabi_ddiv>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d56:	a313      	add	r3, pc, #76	; (adr r3, 8001da4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f7fe fc62 	bl	8000628 <__aeabi_dmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <_ZN3IMU8getOmegaEv+0x80>)
 8001d72:	f7fe fd83 	bl	800087c <__aeabi_ddiv>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	f7fe ff4b 	bl	8000c18 <__aeabi_d2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	60bb      	str	r3, [r7, #8]

	return omega;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	ee07 3a90 	vmov	s15, r3
}
 8001d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40668000 	.word	0x40668000
 8001d9c:	66666666 	.word	0x66666666
 8001da0:	40306666 	.word	0x40306666
 8001da4:	54411744 	.word	0x54411744
 8001da8:	400921fb 	.word	0x400921fb

08001dac <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	b08b      	sub	sp, #44	; 0x2c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001db4:	466b      	mov	r3, sp
 8001db6:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001db8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001dbc:	f007 fee0 	bl	8009b80 <HAL_Delay>
	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001dcc:	4840      	ldr	r0, [pc, #256]	; (8001ed0 <_ZN3IMU11calibrationEv+0x124>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001dda:	483e      	ldr	r0, [pc, #248]	; (8001ed4 <_ZN3IMU11calibrationEv+0x128>)
 8001ddc:	f7ff f99a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001de0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001de4:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001de6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dea:	1e5d      	subs	r5, r3, #1
 8001dec:	61bd      	str	r5, [r7, #24]
 8001dee:	462b      	mov	r3, r5
 8001df0:	3301      	adds	r3, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	f04f 0400 	mov.w	r4, #0
 8001e00:	0154      	lsls	r4, r2, #5
 8001e02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e06:	014b      	lsls	r3, r1, #5
 8001e08:	462b      	mov	r3, r5
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f04f 0400 	mov.w	r4, #0
 8001e1a:	0154      	lsls	r4, r2, #5
 8001e1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e20:	014b      	lsls	r3, r1, #5
 8001e22:	462b      	mov	r3, r5
 8001e24:	3301      	adds	r3, #1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	3303      	adds	r3, #3
 8001e2a:	3307      	adds	r3, #7
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	ebad 0d03 	sub.w	sp, sp, r3
 8001e34:	466b      	mov	r3, sp
 8001e36:	3303      	adds	r3, #3
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001e3e:	2300      	movs	r3, #0
 8001e40:	83fb      	strh	r3, [r7, #30]
 8001e42:	8bfa      	ldrh	r2, [r7, #30]
 8001e44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	da13      	bge.n	8001e74 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e52:	8bfb      	ldrh	r3, [r7, #30]
 8001e54:	ee07 2a90 	vmov	s15, r2
 8001e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001e66:	2001      	movs	r0, #1
 8001e68:	f007 fe8a 	bl	8009b80 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001e6c:	8bfb      	ldrh	r3, [r7, #30]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	83fb      	strh	r3, [r7, #30]
 8001e72:	e7e6      	b.n	8001e42 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d00e      	beq.n	8001eaa <_ZN3IMU11calibrationEv+0xfe>
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9e:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	e7ec      	b.n	8001e84 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001eaa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eb6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ec4:	46b5      	mov	sp, r6
}
 8001ec6:	bf00      	nop
 8001ec8:	372c      	adds	r7, #44	; 0x2c
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	080189b4 	.word	0x080189b4
 8001ed4:	080189c0 	.word	0x080189c0

08001ed8 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ee8:	79bb      	ldrb	r3, [r7, #6]
 8001eea:	b299      	uxth	r1, r3
 8001eec:	1dfa      	adds	r2, r7, #7
 8001eee:	2364      	movs	r3, #100	; 0x64
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <INA260_read+0x50>)
 8001ef6:	f009 fa2b 	bl	800b350 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001efa:	79bb      	ldrb	r3, [r7, #6]
 8001efc:	b299      	uxth	r1, r3
 8001efe:	f107 020c 	add.w	r2, r7, #12
 8001f02:	2364      	movs	r3, #100	; 0x64
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2302      	movs	r3, #2
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <INA260_read+0x50>)
 8001f0a:	f009 fb1f 	bl	800b54c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001f0e:	7b3b      	ldrb	r3, [r7, #12]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	7b7b      	ldrb	r3, [r7, #13]
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001f1e:	89fb      	ldrh	r3, [r7, #14]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	2004a6fc 	.word	0x2004a6fc

08001f2c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	4604      	mov	r4, r0
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	71fb      	strb	r3, [r7, #7]
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71bb      	strb	r3, [r7, #6]
 8001f42:	460b      	mov	r3, r1
 8001f44:	717b      	strb	r3, [r7, #5]
 8001f46:	4613      	mov	r3, r2
 8001f48:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	733b      	strb	r3, [r7, #12]
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	737b      	strb	r3, [r7, #13]
 8001f52:	797b      	ldrb	r3, [r7, #5]
 8001f54:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001f56:	793b      	ldrb	r3, [r7, #4]
 8001f58:	b299      	uxth	r1, r3
 8001f5a:	f107 020c 	add.w	r2, r7, #12
 8001f5e:	2364      	movs	r3, #100	; 0x64
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2303      	movs	r3, #3
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <INA260_write+0x48>)
 8001f66:	f009 f9f3 	bl	800b350 <HAL_I2C_Master_Transmit>
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2004a6fc 	.word	0x2004a6fc

08001f78 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	460b      	mov	r3, r1
 8001f84:	71bb      	strb	r3, [r7, #6]
 8001f86:	4613      	mov	r3, r2
 8001f88:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001f8a:	797b      	ldrb	r3, [r7, #5]
 8001f8c:	79ba      	ldrb	r2, [r7, #6]
 8001f8e:	79f9      	ldrb	r1, [r7, #7]
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff ffcb 	bl	8001f2c <INA260_write>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	461a      	mov	r2, r3
 8001fac:	21df      	movs	r1, #223	; 0xdf
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7ff ffe2 	bl	8001f78 <setConfig>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
{

}
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe4:	482a      	ldr	r0, [pc, #168]	; (8002090 <_ZN8JoyStick8getValueEv+0xbc>)
 8001fe6:	f009 f849 	bl	800b07c <HAL_GPIO_ReadPin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <_ZN8JoyStick8getValueEv+0x2e>
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8002002:	2101      	movs	r1, #1
 8002004:	4823      	ldr	r0, [pc, #140]	; (8002094 <_ZN8JoyStick8getValueEv+0xc0>)
 8002006:	f009 f839 	bl	800b07c <HAL_GPIO_ReadPin>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <_ZN8JoyStick8getValueEv+0x4e>
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8002022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002026:	481a      	ldr	r0, [pc, #104]	; (8002090 <_ZN8JoyStick8getValueEv+0xbc>)
 8002028:	f009 f828 	bl	800b07c <HAL_GPIO_ReadPin>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <_ZN8JoyStick8getValueEv+0x70>
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8002044:	2104      	movs	r1, #4
 8002046:	4814      	ldr	r0, [pc, #80]	; (8002098 <_ZN8JoyStick8getValueEv+0xc4>)
 8002048:	f009 f818 	bl	800b07c <HAL_GPIO_ReadPin>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <_ZN8JoyStick8getValueEv+0x90>
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	480a      	ldr	r0, [pc, #40]	; (8002090 <_ZN8JoyStick8getValueEv+0xbc>)
 8002068:	f009 f808 	bl	800b07c <HAL_GPIO_ReadPin>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <_ZN8JoyStick8getValueEv+0xb0>
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8002084:	89fb      	ldrh	r3, [r7, #14]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40020400 	.word	0x40020400

0800209c <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	2b52      	cmp	r3, #82	; 0x52
 80020ac:	d112      	bne.n	80020d4 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b4:	4856      	ldr	r0, [pc, #344]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80020b6:	f008 fff9 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020c0:	4853      	ldr	r0, [pc, #332]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80020c2:	f008 fff3 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020cc:	4850      	ldr	r0, [pc, #320]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80020ce:	f008 ffed 	bl	800b0ac <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80020d2:	e098      	b.n	8002206 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	2b47      	cmp	r3, #71	; 0x47
 80020d8:	d112      	bne.n	8002100 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020e0:	484b      	ldr	r0, [pc, #300]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80020e2:	f008 ffe3 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ec:	4848      	ldr	r0, [pc, #288]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80020ee:	f008 ffdd 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f8:	4845      	ldr	r0, [pc, #276]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80020fa:	f008 ffd7 	bl	800b0ac <HAL_GPIO_WritePin>
}
 80020fe:	e082      	b.n	8002206 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2b42      	cmp	r3, #66	; 0x42
 8002104:	d112      	bne.n	800212c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210c:	4840      	ldr	r0, [pc, #256]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 800210e:	f008 ffcd 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002118:	483d      	ldr	r0, [pc, #244]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 800211a:	f008 ffc7 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002124:	483a      	ldr	r0, [pc, #232]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 8002126:	f008 ffc1 	bl	800b0ac <HAL_GPIO_WritePin>
}
 800212a:	e06c      	b.n	8002206 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b43      	cmp	r3, #67	; 0x43
 8002130:	d112      	bne.n	8002158 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002138:	4835      	ldr	r0, [pc, #212]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 800213a:	f008 ffb7 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	4832      	ldr	r0, [pc, #200]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 8002146:	f008 ffb1 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002150:	482f      	ldr	r0, [pc, #188]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 8002152:	f008 ffab 	bl	800b0ac <HAL_GPIO_WritePin>
}
 8002156:	e056      	b.n	8002206 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	2b4d      	cmp	r3, #77	; 0x4d
 800215c:	d112      	bne.n	8002184 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002164:	482a      	ldr	r0, [pc, #168]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 8002166:	f008 ffa1 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002170:	4827      	ldr	r0, [pc, #156]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 8002172:	f008 ff9b 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	4824      	ldr	r0, [pc, #144]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 800217e:	f008 ff95 	bl	800b0ac <HAL_GPIO_WritePin>
}
 8002182:	e040      	b.n	8002206 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b59      	cmp	r3, #89	; 0x59
 8002188:	d112      	bne.n	80021b0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002190:	481f      	ldr	r0, [pc, #124]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 8002192:	f008 ff8b 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219c:	481c      	ldr	r0, [pc, #112]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 800219e:	f008 ff85 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a8:	4819      	ldr	r0, [pc, #100]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80021aa:	f008 ff7f 	bl	800b0ac <HAL_GPIO_WritePin>
}
 80021ae:	e02a      	b.n	8002206 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b57      	cmp	r3, #87	; 0x57
 80021b4:	d112      	bne.n	80021dc <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021bc:	4814      	ldr	r0, [pc, #80]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80021be:	f008 ff75 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c8:	4811      	ldr	r0, [pc, #68]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80021ca:	f008 ff6f 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d4:	480e      	ldr	r0, [pc, #56]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80021d6:	f008 ff69 	bl	800b0ac <HAL_GPIO_WritePin>
}
 80021da:	e014      	b.n	8002206 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	2b7e      	cmp	r3, #126	; 0x7e
 80021e0:	d111      	bne.n	8002206 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021e2:	2201      	movs	r2, #1
 80021e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e8:	4809      	ldr	r0, [pc, #36]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80021ea:	f008 ff5f 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ee:	2201      	movs	r2, #1
 80021f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f4:	4806      	ldr	r0, [pc, #24]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 80021f6:	f008 ff59 	bl	800b0ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <_ZN3LED9fullColorEc+0x174>)
 8002202:	f008 ff53 	bl	800b0ac <HAL_GPIO_WritePin>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40020000 	.word	0x40020000

08002214 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
 8002220:	4613      	mov	r3, r2
 8002222:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002232:	4813      	ldr	r0, [pc, #76]	; (8002280 <_ZN3LED2LREaa+0x6c>)
 8002234:	f008 ff3a 	bl	800b0ac <HAL_GPIO_WritePin>
 8002238:	e009      	b.n	800224e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800223a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <_ZN3LED2LREaa+0x6c>)
 800224a:	f008 ff2f 	bl	800b0ac <HAL_GPIO_WritePin>

	if(r_status == 1)
 800224e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d106      	bne.n	8002264 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800225c:	4808      	ldr	r0, [pc, #32]	; (8002280 <_ZN3LED2LREaa+0x6c>)
 800225e:	f008 ff25 	bl	800b0ac <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002262:	e009      	b.n	8002278 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002264:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002272:	4803      	ldr	r0, [pc, #12]	; (8002280 <_ZN3LED2LREaa+0x6c>)
 8002274:	f008 ff1a 	bl	800b0ac <HAL_GPIO_WritePin>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40020000 	.word	0x40020000

08002284 <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 8002284:	b580      	push	{r7, lr}
 8002286:	b092      	sub	sp, #72	; 0x48
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe92 	bl	8001fbc <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	331c      	adds	r3, #28
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
 80022a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d008      	beq.n	80022c0 <_ZN10LineSensorC1Ev+0x3c>
 80022ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	2200      	movs	r2, #0
 80022b6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80022b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ba:	3302      	adds	r3, #2
 80022bc:	647b      	str	r3, [r7, #68]	; 0x44
 80022be:	e7f2      	b.n	80022a6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	643b      	str	r3, [r7, #64]	; 0x40
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	3338      	adds	r3, #56	; 0x38
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d009      	beq.n	80022ee <_ZN10LineSensorC1Ev+0x6a>
 80022da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022dc:	623b      	str	r3, [r7, #32]
		s = 0;
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80022e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e8:	3304      	adds	r3, #4
 80022ea:	643b      	str	r3, [r7, #64]	; 0x40
 80022ec:	e7f1      	b.n	80022d2 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3338      	adds	r3, #56	; 0x38
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	429a      	cmp	r2, r3
 8002306:	d009      	beq.n	800231c <_ZN10LineSensorC1Ev+0x98>
 8002308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230a:	617b      	str	r3, [r7, #20]
		m = 0;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002316:	3304      	adds	r3, #4
 8002318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800231a:	e7f1      	b.n	8002300 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	3338      	adds	r3, #56	; 0x38
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d009      	beq.n	800234a <_ZN10LineSensorC1Ev+0xc6>
 8002336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002338:	60bb      	str	r3, [r7, #8]
		s = 1;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002340:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002344:	3304      	adds	r3, #4
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
 8002348:	e7f1      	b.n	800232e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4618      	mov	r0, r3
 800234e:	3748      	adds	r7, #72	; 0x48
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	220e      	movs	r2, #14
 8002360:	4619      	mov	r1, r3
 8002362:	4803      	ldr	r0, [pc, #12]	; (8002370 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002364:	f007 fc72 	bl	8009c4c <HAL_ADC_Start_DMA>
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2004a620 	.word	0x2004a620

08002374 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b0d      	cmp	r3, #13
 8002384:	dc2f      	bgt.n	80023e6 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3392      	adds	r3, #146	; 0x92
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	3304      	adds	r3, #4
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	33a0      	adds	r3, #160	; 0xa0
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	1a5b      	subs	r3, r3, r1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	68f9      	ldr	r1, [r7, #12]
 80023d0:	440b      	add	r3, r1
 80023d2:	3306      	adds	r3, #6
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	3304      	adds	r3, #4
 80023da:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e7cc      	b.n	8002380 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023f0:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b09      	cmp	r3, #9
 80023f8:	d902      	bls.n	8002400 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]


}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	200001fe 	.word	0x200001fe

08002410 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002410:	b490      	push	{r4, r7}
 8002412:	b08e      	sub	sp, #56	; 0x38
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800241e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002422:	2b0d      	cmp	r3, #13
 8002424:	f200 8087 	bhi.w	8002536 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800242e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002432:	2b09      	cmp	r3, #9
 8002434:	d81c      	bhi.n	8002470 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002436:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800243a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800243e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4423      	add	r3, r4
 800244e:	3306      	adds	r3, #6
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4403      	add	r3, r0
 8002454:	3304      	adds	r3, #4
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	008b      	lsls	r3, r1, #2
 800245a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800245e:	440b      	add	r3, r1
 8002460:	3b30      	subs	r3, #48	; 0x30
 8002462:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002464:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002468:	3301      	adds	r3, #1
 800246a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800246e:	e7de      	b.n	800242e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002476:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800247a:	2b09      	cmp	r3, #9
 800247c:	d84d      	bhi.n	800251a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800247e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002482:	3301      	adds	r3, #1
 8002484:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002488:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800248c:	2b09      	cmp	r3, #9
 800248e:	d83e      	bhi.n	800250e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002490:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800249a:	4413      	add	r3, r2
 800249c:	3b30      	subs	r3, #48	; 0x30
 800249e:	ed93 7a00 	vldr	s14, [r3]
 80024a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024ac:	4413      	add	r3, r2
 80024ae:	3b30      	subs	r3, #48	; 0x30
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	d521      	bpl.n	8002502 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80024be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024c8:	4413      	add	r3, r2
 80024ca:	3b30      	subs	r3, #48	; 0x30
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80024d0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80024d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024de:	440a      	add	r2, r1
 80024e0:	3a30      	subs	r2, #48	; 0x30
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024ea:	440b      	add	r3, r1
 80024ec:	3b30      	subs	r3, #48	; 0x30
 80024ee:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80024f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024fa:	4413      	add	r3, r2
 80024fc:	3b30      	subs	r3, #48	; 0x30
 80024fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002500:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002502:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002506:	3301      	adds	r3, #1
 8002508:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800250c:	e7bc      	b.n	8002488 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800250e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002512:	3301      	adds	r3, #1
 8002514:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002518:	e7ad      	b.n	8002476 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 800251a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	33b0      	adds	r3, #176	; 0xb0
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800252a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800252e:	3301      	adds	r3, #1
 8002530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002534:	e773      	b.n	800241e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 8002536:	bf00      	nop
 8002538:	3738      	adds	r7, #56	; 0x38
 800253a:	46bd      	mov	sp, r7
 800253c:	bc90      	pop	{r4, r7}
 800253e:	4770      	bx	lr

08002540 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0a0      	sub	sp, #128	; 0x80
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002548:	2064      	movs	r0, #100	; 0x64
 800254a:	f007 fb19 	bl	8009b80 <HAL_Delay>

	lcd_clear();
 800254e:	f7fe fda7 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002552:	2100      	movs	r1, #0
 8002554:	2000      	movs	r0, #0
 8002556:	f7fe fdb3 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800255a:	4886      	ldr	r0, [pc, #536]	; (8002774 <_ZN10LineSensor11calibrationEv+0x234>)
 800255c:	f7fe fdda 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002560:	2101      	movs	r1, #1
 8002562:	2000      	movs	r0, #0
 8002564:	f7fe fdac 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002568:	4883      	ldr	r0, [pc, #524]	; (8002778 <_ZN10LineSensor11calibrationEv+0x238>)
 800256a:	f7fe fdd3 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800256e:	2300      	movs	r3, #0
 8002570:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002574:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002578:	2b0d      	cmp	r3, #13
 800257a:	d823      	bhi.n	80025c4 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 800257c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002580:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	32b0      	adds	r2, #176	; 0xb0
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	440a      	add	r2, r1
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002594:	440b      	add	r3, r1
 8002596:	3b40      	subs	r3, #64	; 0x40
 8002598:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800259a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800259e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	32b0      	adds	r2, #176	; 0xb0
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	440a      	add	r2, r1
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025b2:	440b      	add	r3, r1
 80025b4:	3b78      	subs	r3, #120	; 0x78
 80025b6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025b8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025bc:	3301      	adds	r3, #1
 80025be:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80025c2:	e7d7      	b.n	8002574 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fd02 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d079      	beq.n	80026d4 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80025e6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80025ea:	2b0d      	cmp	r3, #13
 80025ec:	d850      	bhi.n	8002690 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80025ee:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f8:	4413      	add	r3, r2
 80025fa:	3b40      	subs	r3, #64	; 0x40
 80025fc:	ed93 7a00 	vldr	s14, [r3]
 8002600:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	33b0      	adds	r3, #176	; 0xb0
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	d50f      	bpl.n	800263a <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800261a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800261e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	32b0      	adds	r2, #176	; 0xb0
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	440a      	add	r2, r1
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002632:	440b      	add	r3, r1
 8002634:	3b40      	subs	r3, #64	; 0x40
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e024      	b.n	8002684 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800263a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002644:	4413      	add	r3, r2
 8002646:	3b78      	subs	r3, #120	; 0x78
 8002648:	ed93 7a00 	vldr	s14, [r3]
 800264c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	33b0      	adds	r3, #176	; 0xb0
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	dd0e      	ble.n	8002684 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002666:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800266a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	32b0      	adds	r2, #176	; 0xb0
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	440a      	add	r2, r1
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800267e:	440b      	add	r3, r1
 8002680:	3b78      	subs	r3, #120	; 0x78
 8002682:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002684:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002688:	3301      	adds	r3, #1
 800268a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800268e:	e7aa      	b.n	80025e6 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fdb8 	bl	800520c <_ZN12RotarySwitch8getValueEv>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80026b2:	2201      	movs	r2, #1
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fdab 	bl	8002214 <_ZN3LED2LREaa>
 80026be:	e781      	b.n	80025c4 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80026c6:	2200      	movs	r2, #0
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fda1 	bl	8002214 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80026d2:	e777      	b.n	80025c4 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80026da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80026de:	2b0d      	cmp	r3, #13
 80026e0:	d826      	bhi.n	8002730 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80026e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026ec:	4413      	add	r3, r2
 80026ee:	3b40      	subs	r3, #64	; 0x40
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026fe:	4413      	add	r3, r2
 8002700:	3b78      	subs	r3, #120	; 0x78
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800270a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800270e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800277c <_ZN10LineSensor11calibrationEv+0x23c>
 8002712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	3392      	adds	r3, #146	; 0x92
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	3304      	adds	r3, #4
 8002720:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002724:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002728:	3301      	adds	r3, #1
 800272a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800272e:	e7d4      	b.n	80026da <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002730:	2300      	movs	r3, #0
 8002732:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002736:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800273a:	2b0d      	cmp	r3, #13
 800273c:	d815      	bhi.n	800276a <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800273e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002742:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800274c:	440a      	add	r2, r1
 800274e:	3a78      	subs	r2, #120	; 0x78
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	33a0      	adds	r3, #160	; 0xa0
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3304      	adds	r3, #4
 800275c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800275e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002762:	3301      	adds	r3, #1
 8002764:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002768:	e7e5      	b.n	8002736 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800276a:	bf00      	nop
 800276c:	3780      	adds	r7, #128	; 0x80
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	080189cc 	.word	0x080189cc
 8002778:	080189d8 	.word	0x080189d8
 800277c:	447a0000 	.word	0x447a0000

08002780 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 800278c:	2303      	movs	r3, #3
 800278e:	81bb      	strh	r3, [r7, #12]
 8002790:	89bb      	ldrh	r3, [r7, #12]
 8002792:	2b0a      	cmp	r3, #10
 8002794:	d814      	bhi.n	80027c0 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002796:	89bb      	ldrh	r3, [r7, #12]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	33b0      	adds	r3, #176	; 0xb0
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002814 <_ZN10LineSensor13emergencyStopEv+0x94>
 80027a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	db02      	blt.n	80027b8 <_ZN10LineSensor13emergencyStopEv+0x38>
 80027b2:	89fb      	ldrh	r3, [r7, #14]
 80027b4:	3301      	adds	r3, #1
 80027b6:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 80027b8:	89bb      	ldrh	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	81bb      	strh	r3, [r7, #12]
 80027be:	e7e7      	b.n	8002790 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 80027c0:	89fb      	ldrh	r3, [r7, #14]
 80027c2:	2b07      	cmp	r3, #7
 80027c4:	d906      	bls.n	80027d4 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	e002      	b.n	80027da <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	2b63      	cmp	r3, #99	; 0x63
 80027e0:	d903      	bls.n	80027ea <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e002      	b.n	80027f0 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d903      	bls.n	8002804 <_ZN10LineSensor13emergencyStopEv+0x84>
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80027fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002802:	801a      	strh	r2, [r3, #0]

	return flag;
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002806:	781b      	ldrb	r3, [r3, #0]

}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	44098000 	.word	0x44098000
 8002818:	20000200 	.word	0x20000200
 800281c:	20000202 	.word	0x20000202

08002820 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	ed87 0a01 	vstr	s0, [r7, #4]
 800282a:	edd7 7a01 	vldr	s15, [r7, #4]
 800282e:	eef0 7ae7 	vabs.f32	s15, s15
 8002832:	eeb0 0a67 	vmov.f32	s0, s15
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), all_sideline_flag_(false)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80028be:	330c      	adds	r3, #12
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80028cc:	3350      	adds	r3, #80	; 0x50
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80028d8:	3352      	adds	r3, #82	; 0x52
 80028da:	2200      	movs	r2, #0
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80028e4:	3354      	adds	r3, #84	; 0x54
 80028e6:	2200      	movs	r2, #0
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028f0:	3318      	adds	r3, #24
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80028fc:	331c      	adds	r3, #28
 80028fe:	2200      	movs	r2, #0
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002908:	331e      	adds	r3, #30
 800290a:	2200      	movs	r2, #0
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002914:	3320      	adds	r3, #32
 8002916:	2200      	movs	r2, #0
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002920:	3322      	adds	r3, #34	; 0x22
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800292c:	3323      	adds	r3, #35	; 0x23
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002938:	3324      	adds	r3, #36	; 0x24
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002944:	3328      	adds	r3, #40	; 0x28
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002952:	332c      	adds	r3, #44	; 0x2c
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002960:	3330      	adds	r3, #48	; 0x30
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800296e:	3334      	adds	r3, #52	; 0x34
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800297c:	3338      	adds	r3, #56	; 0x38
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002988:	333a      	adds	r3, #58	; 0x3a
 800298a:	2200      	movs	r2, #0
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002994:	333c      	adds	r3, #60	; 0x3c
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029bc:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c2:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029c8:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80029d0:	2300      	movs	r3, #0
 80029d2:	83fb      	strh	r3, [r7, #30]
 80029d4:	8bfb      	ldrh	r3, [r7, #30]
 80029d6:	f241 726f 	movw	r2, #5999	; 0x176f
 80029da:	4293      	cmp	r3, r2
 80029dc:	d80d      	bhi.n	80029fa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ba>
		velocity_table_[i] = 0;
 80029de:	8bfb      	ldrh	r3, [r7, #30]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80029e6:	3304      	adds	r3, #4
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80029f2:	8bfb      	ldrh	r3, [r7, #30]
 80029f4:	3301      	adds	r3, #1
 80029f6:	83fb      	strh	r3, [r7, #30]
 80029f8:	e7ec      	b.n	80029d4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x194>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80029fa:	2300      	movs	r3, #0
 80029fc:	83bb      	strh	r3, [r7, #28]
 80029fe:	8bbb      	ldrh	r3, [r7, #28]
 8002a00:	2b63      	cmp	r3, #99	; 0x63
 8002a02:	d80d      	bhi.n	8002a20 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e0>
		crossline_distance_[i] = 0;
 8002a04:	8bbb      	ldrh	r3, [r7, #28]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002a0c:	3316      	adds	r3, #22
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a18:	8bbb      	ldrh	r3, [r7, #28]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	83bb      	strh	r3, [r7, #28]
 8002a1e:	e7ee      	b.n	80029fe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1be>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a20:	2300      	movs	r3, #0
 8002a22:	837b      	strh	r3, [r7, #26]
 8002a24:	8b7b      	ldrh	r3, [r7, #26]
 8002a26:	2b63      	cmp	r3, #99	; 0x63
 8002a28:	d80d      	bhi.n	8002a46 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x206>
		crossline_distance2_[i] = 0;
 8002a2a:	8b7b      	ldrh	r3, [r7, #26]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002a32:	333a      	adds	r3, #58	; 0x3a
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a3e:	8b7b      	ldrh	r3, [r7, #26]
 8002a40:	3301      	adds	r3, #1
 8002a42:	837b      	strh	r3, [r7, #26]
 8002a44:	e7ee      	b.n	8002a24 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a46:	2300      	movs	r3, #0
 8002a48:	833b      	strh	r3, [r7, #24]
 8002a4a:	8b3b      	ldrh	r3, [r7, #24]
 8002a4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a50:	d20d      	bcs.n	8002a6e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x22e>
		sideline_distance_[i] = 0;
 8002a52:	8b3b      	ldrh	r3, [r7, #24]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002a5a:	331e      	adds	r3, #30
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a66:	8b3b      	ldrh	r3, [r7, #24]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	833b      	strh	r3, [r7, #24]
 8002a6c:	e7ed      	b.n	8002a4a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20a>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a6e:	2300      	movs	r3, #0
 8002a70:	82fb      	strh	r3, [r7, #22]
 8002a72:	8afb      	ldrh	r3, [r7, #22]
 8002a74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a78:	d20d      	bcs.n	8002a96 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x256>
		sideline_distance2_[i] = 0;
 8002a7a:	8afb      	ldrh	r3, [r7, #22]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002a82:	3312      	adds	r3, #18
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002a8e:	8afb      	ldrh	r3, [r7, #22]
 8002a90:	3301      	adds	r3, #1
 8002a92:	82fb      	strh	r3, [r7, #22]
 8002a94:	e7ed      	b.n	8002a72 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3724      	adds	r7, #36	; 0x24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002adc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af0:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	ee07 3a90 	vmov	s15, r3

}
 8002afa:	eeb0 0a67 	vmov.f32	s0, s15
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ffc7 	bl	8002aa4 <_ZN9LineTrace9calcErrorEv>
 8002b16:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002b24:	4b66      	ldr	r3, [pc, #408]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b3a:	3354      	adds	r3, #84	; 0x54
 8002b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d14c      	bne.n	8002bde <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b66:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	ee17 0a90 	vmov	r0, s15
 8002b72:	f7fd fd01 	bl	8000578 <__aeabi_f2d>
 8002b76:	a350      	add	r3, pc, #320	; (adr r3, 8002cb8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fe7e 	bl	800087c <__aeabi_ddiv>
 8002b80:	4603      	mov	r3, r0
 8002b82:	460c      	mov	r4, r1
 8002b84:	4618      	mov	r0, r3
 8002b86:	4621      	mov	r1, r4
 8002b88:	f7fe f846 	bl	8000c18 <__aeabi_d2f>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002b90:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcef 	bl	8000578 <__aeabi_f2d>
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	460d      	mov	r5, r1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002ba4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	ee17 0a90 	vmov	r0, s15
 8002bb0:	f7fd fce2 	bl	8000578 <__aeabi_f2d>
 8002bb4:	a340      	add	r3, pc, #256	; (adr r3, 8002cb8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f7fd fd35 	bl	8000628 <__aeabi_dmul>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	f7fd fb79 	bl	80002bc <__adddf3>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	460c      	mov	r4, r1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	f7fe f821 	bl	8000c18 <__aeabi_d2f>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e04b      	b.n	8002c76 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002be4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bec:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002bf6:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c08:	ee17 0a90 	vmov	r0, s15
 8002c0c:	f7fd fcb4 	bl	8000578 <__aeabi_f2d>
 8002c10:	a329      	add	r3, pc, #164	; (adr r3, 8002cb8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fe31 	bl	800087c <__aeabi_ddiv>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	4621      	mov	r1, r4
 8002c22:	f7fd fff9 	bl	8000c18 <__aeabi_d2f>
 8002c26:	4603      	mov	r3, r0
 8002c28:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fca2 	bl	8000578 <__aeabi_f2d>
 8002c34:	4604      	mov	r4, r0
 8002c36:	460d      	mov	r5, r1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	ee17 0a90 	vmov	r0, s15
 8002c4a:	f7fd fc95 	bl	8000578 <__aeabi_f2d>
 8002c4e:	a31a      	add	r3, pc, #104	; (adr r3, 8002cb8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fce8 	bl	8000628 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4629      	mov	r1, r5
 8002c60:	f7fd fb2c 	bl	80002bc <__adddf3>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	f7fd ffd4 	bl	8000c18 <__aeabi_d2f>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c74:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002c76:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8c:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002c9a:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f002 ff70 	bl	8005b88 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6013      	str	r3, [r2, #0]

}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cbc:	3f50624d 	.word	0x3f50624d
 8002cc0:	20000214 	.word	0x20000214
 8002cc4:	20000210 	.word	0x20000210

08002cc8 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fcb9 	bl	800164c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 f956 	bl	8004f90 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 ff3a 	bl	8004b62 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 ffbb 	bl	8004c86 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d32:	3318      	adds	r3, #24
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461c      	mov	r4, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f7fe fc69 	bl	8001610 <_ZN7Encoder16getTotalDistanceEv>
 8002d3e:	eef0 7a40 	vmov.f32	s15, s0
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002d48:	3316      	adds	r3, #22
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d58:	3318      	adds	r3, #24
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d66:	3318      	adds	r3, #24
 8002d68:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d70:	3318      	adds	r3, #24
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	2b63      	cmp	r3, #99	; 0x63
 8002d76:	d905      	bls.n	8002d84 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d7e:	3318      	adds	r3, #24
 8002d80:	2263      	movs	r2, #99	; 0x63
 8002d82:	801a      	strh	r2, [r3, #0]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}

08002d8c <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d9e:	331a      	adds	r3, #26
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	461c      	mov	r4, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f7fe fc33 	bl	8001610 <_ZN7Encoder16getTotalDistanceEv>
 8002daa:	eef0 7a40 	vmov.f32	s15, s0
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002db4:	333a      	adds	r3, #58	; 0x3a
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dc4:	331a      	adds	r3, #26
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dd2:	331a      	adds	r3, #26
 8002dd4:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ddc:	331a      	adds	r3, #26
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	2b63      	cmp	r3, #99	; 0x63
 8002de2:	d905      	bls.n	8002df0 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dea:	331a      	adds	r3, #26
 8002dec:	2263      	movs	r2, #99	; 0x63
 8002dee:	801a      	strh	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}

08002df8 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e0a:	331c      	adds	r3, #28
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	461c      	mov	r4, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f7fe fbfd 	bl	8001610 <_ZN7Encoder16getTotalDistanceEv>
 8002e16:	eef0 7a40 	vmov.f32	s15, s0
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002e20:	331e      	adds	r3, #30
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e30:	331c      	adds	r3, #28
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e3e:	331c      	adds	r3, #28
 8002e40:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e48:	331c      	adds	r3, #28
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e50:	d306      	bcc.n	8002e60 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e58:	331c      	adds	r3, #28
 8002e5a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002e5e:	801a      	strh	r2, [r3, #0]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd90      	pop	{r4, r7, pc}

08002e68 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e7a:	331e      	adds	r3, #30
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	461c      	mov	r4, r3
 8002e80:	4610      	mov	r0, r2
 8002e82:	f7fe fbc5 	bl	8001610 <_ZN7Encoder16getTotalDistanceEv>
 8002e86:	eef0 7a40 	vmov.f32	s15, s0
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002e90:	3312      	adds	r3, #18
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea0:	331e      	adds	r3, #30
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eae:	331e      	adds	r3, #30
 8002eb0:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eb8:	331e      	adds	r3, #30
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec0:	d306      	bcc.n	8002ed0 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ec8:	331e      	adds	r3, #30
 8002eca:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ece:	801a      	strh	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}

08002ed8 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	ed2d 8b02 	vpush	{d8}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d046      	beq.n	8002f7c <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ef4:	3354      	adds	r3, #84	; 0x54
 8002ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11c      	bne.n	8002f38 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69dc      	ldr	r4, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fb73 	bl	80015f2 <_ZN7Encoder15getDistance10mmEv>
 8002f0c:	eeb0 8a40 	vmov.f32	s16, s0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 f82a 	bl	8004f6e <_ZN8Odometry8getThetaEv>
 8002f1a:	ec53 2b10 	vmov	r2, r3, d0
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fe79 	bl	8000c18 <__aeabi_d2f>
 8002f26:	4603      	mov	r3, r0
 8002f28:	ee00 3a90 	vmov	s1, r3
 8002f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8002f30:	4620      	mov	r0, r4
 8002f32:	f001 fcd5 	bl	80048e0 <_ZN6Logger21storeDistanceAndThetaEff>
 8002f36:	e01b      	b.n	8002f70 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69dc      	ldr	r4, [r3, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fb65 	bl	8001610 <_ZN7Encoder16getTotalDistanceEv>
 8002f46:	eeb0 8a40 	vmov.f32	s16, s0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 f80d 	bl	8004f6e <_ZN8Odometry8getThetaEv>
 8002f54:	ec53 2b10 	vmov	r2, r3, d0
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fd fe5c 	bl	8000c18 <__aeabi_d2f>
 8002f60:	4603      	mov	r3, r0
 8002f62:	ee00 3a90 	vmov	s1, r3
 8002f66:	eeb0 0a48 	vmov.f32	s0, s16
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f001 fd01 	bl	8004972 <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002f7a:	801a      	strh	r2, [r3, #0]
	}
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	ecbd 8b02 	vpop	{d8}
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	20000204 	.word	0x20000204

08002f8c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d85a      	bhi.n	8003058 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fa8:	3318      	adds	r3, #24
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002fb2:	3316      	adds	r3, #22
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fb25 	bl	8001610 <_ZN7Encoder16getTotalDistanceEv>
 8002fc6:	eeb0 7a40 	vmov.f32	s14, s0
 8002fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd6:	f7ff fc23 	bl	8002820 <_ZSt3absf>
 8002fda:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 8002fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fe2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800307c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 8002fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d826      	bhi.n	800303e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ff6:	3338      	adds	r3, #56	; 0x38
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6959      	ldr	r1, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003006:	3318      	adds	r3, #24
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003010:	3316      	adds	r3, #22
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	4608      	mov	r0, r1
 8003020:	f7fe fb05 	bl	800162e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800302a:	3318      	adds	r3, #24
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003038:	3318      	adds	r3, #24
 800303a:	801a      	strh	r2, [r3, #0]
			break;
 800303c:	e00c      	b.n	8003058 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003044:	3318      	adds	r3, #24
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003052:	3318      	adds	r3, #24
 8003054:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 8003056:	e79d      	b.n	8002f94 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800305e:	3318      	adds	r3, #24
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	2b63      	cmp	r3, #99	; 0x63
 8003064:	d905      	bls.n	8003072 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306c:	3318      	adds	r3, #24
 800306e:	2263      	movs	r2, #99	; 0x63
 8003070:	801a      	strh	r2, [r3, #0]

}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	437a0000 	.word	0x437a0000

08003080 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003088:	2300      	movs	r3, #0
 800308a:	82fb      	strh	r3, [r7, #22]
 800308c:	8afb      	ldrh	r3, [r7, #22]
 800308e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003092:	d23d      	bcs.n	8003110 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 8003094:	8afb      	ldrh	r3, [r7, #22]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800309c:	331e      	adds	r3, #30
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fab0 	bl	8001610 <_ZN7Encoder16getTotalDistanceEv>
 80030b0:	eeb0 7a40 	vmov.f32	s14, s0
 80030b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030bc:	eeb0 0a67 	vmov.f32	s0, s15
 80030c0:	f7ff fbae 	bl	8002820 <_ZSt3absf>
 80030c4:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 80030c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030cc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003138 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 80030d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	d816      	bhi.n	8003108 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030e0:	3338      	adds	r3, #56	; 0x38
 80030e2:	2200      	movs	r2, #0
 80030e4:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6959      	ldr	r1, [r3, #20]
 80030ea:	8afb      	ldrh	r3, [r7, #22]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80030f2:	331e      	adds	r3, #30
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003100:	4608      	mov	r0, r1
 8003102:	f7fe fa94 	bl	800162e <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003106:	e003      	b.n	8003110 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003108:	8afb      	ldrh	r3, [r7, #22]
 800310a:	3301      	adds	r3, #1
 800310c:	82fb      	strh	r3, [r7, #22]
 800310e:	e7bd      	b.n	800308c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003116:	331c      	adds	r3, #28
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800311e:	d306      	bcc.n	800312e <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003126:	331c      	adds	r3, #28
 8003128:	f240 12f3 	movw	r2, #499	; 0x1f3
 800312c:	801a      	strh	r2, [r3, #0]

}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	43660000 	.word	0x43660000

0800313c <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800314e:	3354      	adds	r3, #84	; 0x54
 8003150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d144      	bne.n	80031e2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 8003158:	edd7 7a00 	vldr	s15, [r7]
 800315c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003294 <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	d504      	bpl.n	8003174 <_ZN9LineTrace15radius2VelocityEf+0x38>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	e084      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.5;
 8003174:	edd7 7a00 	vldr	s15, [r7]
 8003178:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003298 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 800317c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003184:	d503      	bpl.n	800318e <_ZN9LineTrace15radius2VelocityEf+0x52>
 8003186:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e077      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 800318e:	edd7 7a00 	vldr	s15, [r7]
 8003192:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800329c <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319e:	d503      	bpl.n	80031a8 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 80031a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	e06a      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 80031a8:	edd7 7a00 	vldr	s15, [r7]
 80031ac:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80032a0 <_ZN9LineTrace15radius2VelocityEf+0x164>
 80031b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b8:	d502      	bpl.n	80031c0 <_ZN9LineTrace15radius2VelocityEf+0x84>
 80031ba:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e05e      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 80031c0:	edd7 7a00 	vldr	s15, [r7]
 80031c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80032a8 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d502      	bpl.n	80031d8 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <_ZN9LineTrace15radius2VelocityEf+0x170>)
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e052      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity_;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e04d      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031e8:	3354      	adds	r3, #84	; 0x54
 80031ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d143      	bne.n	800327a <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 80031f2:	edd7 7a00 	vldr	s15, [r7]
 80031f6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003294 <_ZN9LineTrace15radius2VelocityEf+0x158>
 80031fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003202:	d504      	bpl.n	800320e <_ZN9LineTrace15radius2VelocityEf+0xd2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	e037      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.7;
 800320e:	edd7 7a00 	vldr	s15, [r7]
 8003212:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003298 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 8003216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	d502      	bpl.n	8003226 <_ZN9LineTrace15radius2VelocityEf+0xea>
 8003220:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <_ZN9LineTrace15radius2VelocityEf+0x174>)
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e02b      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 8003226:	edd7 7a00 	vldr	s15, [r7]
 800322a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800329c <_ZN9LineTrace15radius2VelocityEf+0x160>
 800322e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003236:	d503      	bpl.n	8003240 <_ZN9LineTrace15radius2VelocityEf+0x104>
 8003238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e01e      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003240:	edd7 7a00 	vldr	s15, [r7]
 8003244:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032a0 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	d502      	bpl.n	8003258 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e012      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003258:	edd7 7a00 	vldr	s15, [r7]
 800325c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80032a8 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003268:	d502      	bpl.n	8003270 <_ZN9LineTrace15radius2VelocityEf+0x134>
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <_ZN9LineTrace15radius2VelocityEf+0x170>)
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e006      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity2_;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e001      	b.n	800327e <_ZN9LineTrace15radius2VelocityEf+0x142>
	}
	else velocity = 1.3;
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <_ZN9LineTrace15radius2VelocityEf+0x178>)
 800327c:	60fb      	str	r3, [r7, #12]

	return velocity;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	ee07 3a90 	vmov	s15, r3
}
 8003284:	eeb0 0a67 	vmov.f32	s0, s15
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	43c80000 	.word	0x43c80000
 8003298:	43fa0000 	.word	0x43fa0000
 800329c:	44228000 	.word	0x44228000
 80032a0:	44bb8000 	.word	0x44bb8000
 80032a4:	40200000 	.word	0x40200000
 80032a8:	44fa0000 	.word	0x44fa0000
 80032ac:	40400000 	.word	0x40400000
 80032b0:	3fd9999a 	.word	0x3fd9999a
 80032b4:	3fa66666 	.word	0x3fa66666

080032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032b8:	b5b0      	push	{r4, r5, r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032c4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032c6:	f241 736f 	movw	r3, #5999	; 0x176f
 80032ca:	83fb      	strh	r3, [r7, #30]
 80032cc:	8bfb      	ldrh	r3, [r7, #30]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 808d 	beq.w	80033ee <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80032d4:	8bfb      	ldrh	r3, [r7, #30]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032de:	3304      	adds	r3, #4
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	ed93 7a00 	vldr	s14, [r3]
 80032e8:	8bfb      	ldrh	r3, [r7, #30]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032f0:	3304      	adds	r3, #4
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fe:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003302:	edd7 7a06 	vldr	s15, [r7, #24]
 8003306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	dd6a      	ble.n	80033e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003310:	8bfb      	ldrh	r3, [r7, #30]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f92c 	bl	8000578 <__aeabi_f2d>
 8003320:	a335      	add	r3, pc, #212	; (adr r3, 80033f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f7fd f97f 	bl	8000628 <__aeabi_dmul>
 800332a:	4603      	mov	r3, r0
 800332c:	460c      	mov	r4, r1
 800332e:	4625      	mov	r5, r4
 8003330:	461c      	mov	r4, r3
 8003332:	69b8      	ldr	r0, [r7, #24]
 8003334:	f7fd f920 	bl	8000578 <__aeabi_f2d>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4620      	mov	r0, r4
 800333e:	4629      	mov	r1, r5
 8003340:	f7fd fa9c 	bl	800087c <__aeabi_ddiv>
 8003344:	4603      	mov	r3, r0
 8003346:	460c      	mov	r4, r1
 8003348:	4618      	mov	r0, r3
 800334a:	4621      	mov	r1, r4
 800334c:	f7fd fc64 	bl	8000c18 <__aeabi_d2f>
 8003350:	4603      	mov	r3, r0
 8003352:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003354:	edd7 6a06 	vldr	s13, [r7, #24]
 8003358:	ed97 7a05 	vldr	s14, [r7, #20]
 800335c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003360:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003364:	ed97 7a04 	vldr	s14, [r7, #16]
 8003368:	edd7 7a02 	vldr	s15, [r7, #8]
 800336c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dd37      	ble.n	80033e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003376:	8bfb      	ldrh	r3, [r7, #30]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800337e:	3304      	adds	r3, #4
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8f6 	bl	8000578 <__aeabi_f2d>
 800338c:	4604      	mov	r4, r0
 800338e:	460d      	mov	r5, r1
 8003390:	8bfb      	ldrh	r3, [r7, #30]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	ed93 7a00 	vldr	s14, [r3]
 800339c:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	ee17 0a90 	vmov	r0, s15
 80033a8:	f7fd f8e6 	bl	8000578 <__aeabi_f2d>
 80033ac:	a312      	add	r3, pc, #72	; (adr r3, 80033f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fd f939 	bl	8000628 <__aeabi_dmul>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fc ff7d 	bl	80002bc <__adddf3>
 80033c2:	4603      	mov	r3, r0
 80033c4:	460c      	mov	r4, r1
 80033c6:	4619      	mov	r1, r3
 80033c8:	4622      	mov	r2, r4
 80033ca:	8bfb      	ldrh	r3, [r7, #30]
 80033cc:	1e5c      	subs	r4, r3, #1
 80033ce:	4608      	mov	r0, r1
 80033d0:	4611      	mov	r1, r2
 80033d2:	f7fd fc21 	bl	8000c18 <__aeabi_d2f>
 80033d6:	4601      	mov	r1, r0
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80033de:	3304      	adds	r3, #4
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80033e6:	8bfb      	ldrh	r3, [r7, #30]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	83fb      	strh	r3, [r7, #30]
 80033ec:	e76e      	b.n	80032cc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80033ee:	bf00      	nop
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bdb0      	pop	{r4, r5, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033fc:	3f50624d 	.word	0x3f50624d

08003400 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	ed87 0a02 	vstr	s0, [r7, #8]
 800340c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800340e:	2300      	movs	r3, #0
 8003410:	83fb      	strh	r3, [r7, #30]
 8003412:	8bfb      	ldrh	r3, [r7, #30]
 8003414:	f241 726f 	movw	r2, #5999	; 0x176f
 8003418:	4293      	cmp	r3, r2
 800341a:	f200 808d 	bhi.w	8003538 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800341e:	8bfb      	ldrh	r3, [r7, #30]
 8003420:	3301      	adds	r3, #1
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003428:	3304      	adds	r3, #4
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	ed93 7a00 	vldr	s14, [r3]
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800343a:	3304      	adds	r3, #4
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003448:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800344c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	dd6a      	ble.n	8003530 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800345a:	8bfb      	ldrh	r3, [r7, #30]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f887 	bl	8000578 <__aeabi_f2d>
 800346a:	a335      	add	r3, pc, #212	; (adr r3, 8003540 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f8da 	bl	8000628 <__aeabi_dmul>
 8003474:	4603      	mov	r3, r0
 8003476:	460c      	mov	r4, r1
 8003478:	4625      	mov	r5, r4
 800347a:	461c      	mov	r4, r3
 800347c:	69b8      	ldr	r0, [r7, #24]
 800347e:	f7fd f87b 	bl	8000578 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4620      	mov	r0, r4
 8003488:	4629      	mov	r1, r5
 800348a:	f7fd f9f7 	bl	800087c <__aeabi_ddiv>
 800348e:	4603      	mov	r3, r0
 8003490:	460c      	mov	r4, r1
 8003492:	4618      	mov	r0, r3
 8003494:	4621      	mov	r1, r4
 8003496:	f7fd fbbf 	bl	8000c18 <__aeabi_d2f>
 800349a:	4603      	mov	r3, r0
 800349c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800349e:	edd7 6a06 	vldr	s13, [r7, #24]
 80034a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80034a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034aa:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80034b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	dd37      	ble.n	8003530 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034c0:	8bfb      	ldrh	r3, [r7, #30]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034c8:	3304      	adds	r3, #4
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd f851 	bl	8000578 <__aeabi_f2d>
 80034d6:	4604      	mov	r4, r0
 80034d8:	460d      	mov	r5, r1
 80034da:	8bfb      	ldrh	r3, [r7, #30]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	ed93 7a00 	vldr	s14, [r3]
 80034e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	ee17 0a90 	vmov	r0, s15
 80034f2:	f7fd f841 	bl	8000578 <__aeabi_f2d>
 80034f6:	a312      	add	r3, pc, #72	; (adr r3, 8003540 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fd f894 	bl	8000628 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4620      	mov	r0, r4
 8003506:	4629      	mov	r1, r5
 8003508:	f7fc fed8 	bl	80002bc <__adddf3>
 800350c:	4603      	mov	r3, r0
 800350e:	460c      	mov	r4, r1
 8003510:	4619      	mov	r1, r3
 8003512:	4622      	mov	r2, r4
 8003514:	8bfb      	ldrh	r3, [r7, #30]
 8003516:	1c5c      	adds	r4, r3, #1
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	f7fd fb7c 	bl	8000c18 <__aeabi_d2f>
 8003520:	4601      	mov	r1, r0
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003528:	3304      	adds	r3, #4
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003530:	8bfb      	ldrh	r3, [r7, #30]
 8003532:	3301      	adds	r3, #1
 8003534:	83fb      	strh	r3, [r7, #30]
 8003536:	e76c      	b.n	8003412 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003538:	bf00      	nop
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bdb0      	pop	{r4, r5, r7, pc}
 8003540:	d2f1a9fc 	.word	0xd2f1a9fc
 8003544:	3f50624d 	.word	0x3f50624d

08003548 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe f887 	bl	8001668 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003560:	3350      	adds	r3, #80	; 0x50
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800356c:	3352      	adds	r3, #82	; 0x52
 800356e:	2200      	movs	r2, #0
 8003570:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003578:	330c      	adds	r3, #12
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003596:	3350      	adds	r3, #80	; 0x50
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035a2:	3352      	adds	r3, #82	; 0x52
 80035a4:	2200      	movs	r2, #0
 80035a6:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035ae:	330c      	adds	r3, #12
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035d0:	3350      	adds	r3, #80	; 0x50
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d05e      	beq.n	8003696 <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe f817 	bl	8001610 <_ZN7Encoder16getTotalDistanceEv>
 80035e2:	eeb0 7a40 	vmov.f32	s14, s0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035ec:	330c      	adds	r3, #12
 80035ee:	edd3 7a00 	vldr	s15, [r3]
 80035f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	bfac      	ite	ge
 80035fc:	2301      	movge	r3, #1
 80035fe:	2300      	movlt	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d025      	beq.n	8003652 <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800360c:	330c      	adds	r3, #12
 800360e:	ed93 7a00 	vldr	s14, [r3]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003618:	3352      	adds	r3, #82	; 0x52
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	3332      	adds	r3, #50	; 0x32
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	edd3 7a00 	vldr	s15, [r3]
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003634:	330c      	adds	r3, #12
 8003636:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003640:	3352      	adds	r3, #82	; 0x52
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800364e:	3352      	adds	r3, #82	; 0x52
 8003650:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003658:	3352      	adds	r3, #82	; 0x52
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003660:	4293      	cmp	r3, r2
 8003662:	d906      	bls.n	8003672 <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800366a:	3352      	adds	r3, #82	; 0x52
 800366c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003670:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003678:	3352      	adds	r3, #82	; 0x52
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003682:	3304      	adds	r3, #4
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	eeb0 0a67 	vmov.f32	s0, s15
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fade 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd ff9d 	bl	80015f2 <_ZN7Encoder15getDistance10mmEv>
 80036b8:	eeb0 7a40 	vmov.f32	s14, s0
 80036bc:	edd7 7a00 	vldr	s15, [r7]
 80036c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c8:	bf94      	ite	ls
 80036ca:	2301      	movls	r3, #1
 80036cc:	2300      	movhi	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80036fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003700:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003708:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 800371c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003720:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003728:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 800372c:	4a44      	ldr	r2, [pc, #272]	; (8003840 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003732:	4a44      	ldr	r2, [pc, #272]	; (8003844 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8003738:	4b43      	ldr	r3, [pc, #268]	; (8003848 <_ZN9LineTrace11isCrossLineEv+0x164>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f083 0301 	eor.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d04d      	beq.n	80037e2 <_ZN9LineTrace11isCrossLineEv+0xfe>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8003746:	edd7 7a03 	vldr	s15, [r7, #12]
 800374a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800384c <_ZN9LineTrace11isCrossLineEv+0x168>
 800374e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	d50f      	bpl.n	8003778 <_ZN9LineTrace11isCrossLineEv+0x94>
 8003758:	edd7 7a02 	vldr	s15, [r7, #8]
 800375c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800384c <_ZN9LineTrace11isCrossLineEv+0x168>
 8003760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	d506      	bpl.n	8003778 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	3301      	adds	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	4b37      	ldr	r3, [pc, #220]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003774:	801a      	strh	r2, [r3, #0]
 8003776:	e002      	b.n	800377e <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 8003778:	4b35      	ldr	r3, [pc, #212]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800377a:	2200      	movs	r2, #0
 800377c:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 800377e:	4b34      	ldr	r3, [pc, #208]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d056      	beq.n	8003834 <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = true;
 8003786:	4b33      	ldr	r3, [pc, #204]	; (8003854 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <_ZN9LineTrace11isCrossLineEv+0x164>)
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003792:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003794:	2200      	movs	r2, #0
 8003796:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800379e:	3324      	adds	r3, #36	; 0x24
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037aa:	3354      	adds	r3, #84	; 0x54
 80037ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <_ZN9LineTrace11isCrossLineEv+0xe4>
				store_check_cnt_ = 0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80037ba:	333a      	adds	r3, #58	; 0x3a
 80037bc:	2200      	movs	r2, #0
 80037be:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff faad 	bl	8002d20 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80037c6:	e035      	b.n	8003834 <_ZN9LineTrace11isCrossLineEv+0x150>
			}
			else{
				store_check_cnt_ = 0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80037ce:	333a      	adds	r3, #58	; 0x3a
 80037d0:	2200      	movs	r2, #0
 80037d2:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fbd9 	bl	8002f8c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fad6 	bl	8002d8c <_ZN9LineTrace23storeCrossLineDistance2Ev>
 80037e0:	e028      	b.n	8003834 <_ZN9LineTrace11isCrossLineEv+0x150>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 80037e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003858 <_ZN9LineTrace11isCrossLineEv+0x174>
 80037ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	dd0f      	ble.n	8003814 <_ZN9LineTrace11isCrossLineEv+0x130>
 80037f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003858 <_ZN9LineTrace11isCrossLineEv+0x174>
 80037fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003804:	dd06      	ble.n	8003814 <_ZN9LineTrace11isCrossLineEv+0x130>
			cnt++;
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003810:	801a      	strh	r2, [r3, #0]
 8003812:	e002      	b.n	800381a <_ZN9LineTrace11isCrossLineEv+0x136>
		}
		else{
			cnt = 0;
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003816:	2200      	movs	r2, #0
 8003818:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 5){
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d908      	bls.n	8003834 <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = false;
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <_ZN9LineTrace11isCrossLineEv+0x164>)
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003830:	2200      	movs	r2, #0
 8003832:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003836:	781b      	ldrb	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000208 	.word	0x20000208
 8003844:	2000020c 	.word	0x2000020c
 8003848:	2000021b 	.word	0x2000021b
 800384c:	44160000 	.word	0x44160000
 8003850:	20000218 	.word	0x20000218
 8003854:	2000021a 	.word	0x2000021a
 8003858:	43fa0000 	.word	0x43fa0000

0800385c <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003864:	2300      	movs	r3, #0
 8003866:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fd fec0 	bl	80015f2 <_ZN7Encoder15getDistance10mmEv>
 8003872:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fb77 	bl	8004f6e <_ZN8Odometry8getThetaEv>
 8003880:	ec54 3b10 	vmov	r3, r4, d0
 8003884:	4618      	mov	r0, r3
 8003886:	4621      	mov	r1, r4
 8003888:	f7fd f9c6 	bl	8000c18 <__aeabi_d2f>
 800388c:	4603      	mov	r3, r0
 800388e:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003890:	edd7 7a04 	vldr	s15, [r7, #16]
 8003894:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389c:	d101      	bne.n	80038a2 <_ZN9LineTrace8isStableEv+0x46>
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <_ZN9LineTrace8isStableEv+0xd0>)
 80038a0:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80038a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80038a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038ae:	eeb0 0a66 	vmov.f32	s0, s13
 80038b2:	f7fe ffb5 	bl	8002820 <_ZSt3absf>
 80038b6:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80038ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80038be:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003930 <_ZN9LineTrace8isStableEv+0xd4>
 80038c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ca:	db01      	blt.n	80038d0 <_ZN9LineTrace8isStableEv+0x74>
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <_ZN9LineTrace8isStableEv+0xd8>)
 80038ce:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038d6:	3324      	adds	r3, #36	; 0x24
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80038de:	4b16      	ldr	r3, [pc, #88]	; (8003938 <_ZN9LineTrace8isStableEv+0xdc>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038ea:	3324      	adds	r3, #36	; 0x24
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 80038f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800393c <_ZN9LineTrace8isStableEv+0xe0>
 80038f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003900:	db06      	blt.n	8003910 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <_ZN9LineTrace8isStableEv+0xdc>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <_ZN9LineTrace8isStableEv+0xdc>)
 800390c:	801a      	strh	r2, [r3, #0]
 800390e:	e002      	b.n	8003916 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <_ZN9LineTrace8isStableEv+0xdc>)
 8003912:	2200      	movs	r2, #0
 8003914:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <_ZN9LineTrace8isStableEv+0xdc>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	2b18      	cmp	r3, #24
 800391c:	d901      	bls.n	8003922 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd90      	pop	{r4, r7, pc}
 800392c:	3727c5ac 	.word	0x3727c5ac
 8003930:	459c4000 	.word	0x459c4000
 8003934:	459c4000 	.word	0x459c4000
 8003938:	2000021c 	.word	0x2000021c
 800393c:	44fa0000 	.word	0x44fa0000

08003940 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b092      	sub	sp, #72	; 0x48
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003948:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800394c:	2201      	movs	r2, #1
 800394e:	4963      	ldr	r1, [pc, #396]	; (8003adc <_ZN9LineTrace4initEv+0x19c>)
 8003950:	4863      	ldr	r0, [pc, #396]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 8003952:	f7fd ff8f 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800395a:	2201      	movs	r2, #1
 800395c:	4961      	ldr	r1, [pc, #388]	; (8003ae4 <_ZN9LineTrace4initEv+0x1a4>)
 800395e:	4860      	ldr	r0, [pc, #384]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 8003960:	f7fd ff88 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003964:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003968:	2201      	movs	r2, #1
 800396a:	495f      	ldr	r1, [pc, #380]	; (8003ae8 <_ZN9LineTrace4initEv+0x1a8>)
 800396c:	485c      	ldr	r0, [pc, #368]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 800396e:	f7fd ff81 	bl	8001874 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003972:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003976:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800397a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800397e:	eeb0 1a66 	vmov.f32	s2, s13
 8003982:	eef0 0a47 	vmov.f32	s1, s14
 8003986:	eeb0 0a67 	vmov.f32	s0, s15
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8c6 	bl	8003b1c <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003990:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003994:	2201      	movs	r2, #1
 8003996:	4955      	ldr	r1, [pc, #340]	; (8003aec <_ZN9LineTrace4initEv+0x1ac>)
 8003998:	4851      	ldr	r0, [pc, #324]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 800399a:	f7fd ff6b 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 800399e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039a2:	2201      	movs	r2, #1
 80039a4:	4952      	ldr	r1, [pc, #328]	; (8003af0 <_ZN9LineTrace4initEv+0x1b0>)
 80039a6:	484e      	ldr	r0, [pc, #312]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 80039a8:	f7fd ff64 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 80039ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039b0:	2201      	movs	r2, #1
 80039b2:	4950      	ldr	r1, [pc, #320]	; (8003af4 <_ZN9LineTrace4initEv+0x1b4>)
 80039b4:	484a      	ldr	r0, [pc, #296]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 80039b6:	f7fd ff5d 	bl	8001874 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 80039ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80039c2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80039c6:	eeb0 1a66 	vmov.f32	s2, s13
 80039ca:	eef0 0a47 	vmov.f32	s1, s14
 80039ce:	eeb0 0a67 	vmov.f32	s0, s15
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8e8 	bl	8003ba8 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80039d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039dc:	2201      	movs	r2, #1
 80039de:	4946      	ldr	r1, [pc, #280]	; (8003af8 <_ZN9LineTrace4initEv+0x1b8>)
 80039e0:	483f      	ldr	r0, [pc, #252]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 80039e2:	f7fd ff47 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80039e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ea:	2201      	movs	r2, #1
 80039ec:	4943      	ldr	r1, [pc, #268]	; (8003afc <_ZN9LineTrace4initEv+0x1bc>)
 80039ee:	483c      	ldr	r0, [pc, #240]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 80039f0:	f7fd ff40 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80039f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f8:	2201      	movs	r2, #1
 80039fa:	4941      	ldr	r1, [pc, #260]	; (8003b00 <_ZN9LineTrace4initEv+0x1c0>)
 80039fc:	4838      	ldr	r0, [pc, #224]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 80039fe:	f7fd ff39 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a02:	f107 0320 	add.w	r3, r7, #32
 8003a06:	2201      	movs	r2, #1
 8003a08:	493e      	ldr	r1, [pc, #248]	; (8003b04 <_ZN9LineTrace4initEv+0x1c4>)
 8003a0a:	4835      	ldr	r0, [pc, #212]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 8003a0c:	f7fd ff32 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	2201      	movs	r2, #1
 8003a16:	493c      	ldr	r1, [pc, #240]	; (8003b08 <_ZN9LineTrace4initEv+0x1c8>)
 8003a18:	4831      	ldr	r0, [pc, #196]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 8003a1a:	f7fd ff2b 	bl	8001874 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a1e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a22:	eeb0 0a67 	vmov.f32	s0, s15
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f913 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003a2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a30:	eeb0 0a67 	vmov.f32	s0, s15
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f91c 	bl	8003c72 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003a3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f925 	bl	8003c92 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003a48:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f92e 	bl	8003cb2 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003a56:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f937 	bl	8003cd2 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003a64:	f107 0318 	add.w	r3, r7, #24
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4928      	ldr	r1, [pc, #160]	; (8003b0c <_ZN9LineTrace4initEv+0x1cc>)
 8003a6c:	481c      	ldr	r0, [pc, #112]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 8003a6e:	f7fd ff01 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003a72:	f107 0314 	add.w	r3, r7, #20
 8003a76:	2201      	movs	r2, #1
 8003a78:	4925      	ldr	r1, [pc, #148]	; (8003b10 <_ZN9LineTrace4initEv+0x1d0>)
 8003a7a:	4819      	ldr	r0, [pc, #100]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 8003a7c:	f7fd fefa 	bl	8001874 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003a80:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a84:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a88:	eef0 0a47 	vmov.f32	s1, s14
 8003a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f97e 	bl	8003d92 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003aa2:	f107 0310 	add.w	r3, r7, #16
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	491a      	ldr	r1, [pc, #104]	; (8003b14 <_ZN9LineTrace4initEv+0x1d4>)
 8003aaa:	480d      	ldr	r0, [pc, #52]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 8003aac:	f7fd fee2 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4918      	ldr	r1, [pc, #96]	; (8003b18 <_ZN9LineTrace4initEv+0x1d8>)
 8003ab8:	4809      	ldr	r0, [pc, #36]	; (8003ae0 <_ZN9LineTrace4initEv+0x1a0>)
 8003aba:	f7fd fedb 	bl	8001874 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ac2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ac6:	eef0 0a47 	vmov.f32	s1, s14
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f979 	bl	8003dc6 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003ad4:	bf00      	nop
 8003ad6:	3748      	adds	r7, #72	; 0x48
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	08018a18 	.word	0x08018a18
 8003ae0:	08018a20 	.word	0x08018a20
 8003ae4:	08018a28 	.word	0x08018a28
 8003ae8:	08018a30 	.word	0x08018a30
 8003aec:	08018a38 	.word	0x08018a38
 8003af0:	08018a44 	.word	0x08018a44
 8003af4:	08018a50 	.word	0x08018a50
 8003af8:	08018a5c 	.word	0x08018a5c
 8003afc:	08018a68 	.word	0x08018a68
 8003b00:	08018a74 	.word	0x08018a74
 8003b04:	08018a80 	.word	0x08018a80
 8003b08:	08018a8c 	.word	0x08018a8c
 8003b0c:	08018a98 	.word	0x08018a98
 8003b10:	08018aa0 	.word	0x08018aa0
 8003b14:	08018aa8 	.word	0x08018aa8
 8003b18:	08018ab4 	.word	0x08018ab4

08003b1c <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b28:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b2c:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b42:	bf00      	nop
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
	return kp_;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	ee07 3a90 	vmov	s15, r3
}
 8003b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	ee07 3a90 	vmov	s15, r3
}
 8003b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
	return kd_;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	ee07 3a90 	vmov	s15, r3
}
 8003b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bb4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bb8:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	ee07 3a90 	vmov	s15, r3
}
 8003bea:	eeb0 0a67 	vmov.f32	s0, s15
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	ee07 3a90 	vmov	s15, r3
}
 8003c08:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	ee07 3a90 	vmov	s15, r3
}
 8003c26:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d00:	ee07 3a90 	vmov	s15, r3
}
 8003d04:	eeb0 0a67 	vmov.f32	s0, s15
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d20:	ee07 3a90 	vmov	s15, r3
}
 8003d24:	eeb0 0a67 	vmov.f32	s0, s15
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d40:	ee07 3a90 	vmov	s15, r3
}
 8003d44:	eeb0 0a67 	vmov.f32	s0, s15
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d60:	ee07 3a90 	vmov	s15, r3
}
 8003d64:	eeb0 0a67 	vmov.f32	s0, s15
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003d80:	ee07 3a90 	vmov	s15, r3
}
 8003d84:	eeb0 0a67 	vmov.f32	s0, s15
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d9e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003da8:	3328      	adds	r3, #40	; 0x28
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003db4:	332c      	adds	r3, #44	; 0x2c
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dd2:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ddc:	3330      	adds	r3, #48	; 0x30
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003de8:	3334      	adds	r3, #52	; 0x34
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	601a      	str	r2, [r3, #0]
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e08:	3328      	adds	r3, #40	; 0x28
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	ee07 3a90 	vmov	s15, r3
}
 8003e10:	eeb0 0a67 	vmov.f32	s0, s15
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e2c:	3334      	adds	r3, #52	; 0x34
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	ee07 3a90 	vmov	s15, r3
}
 8003e34:	eeb0 0a67 	vmov.f32	s0, s15
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e50:	3330      	adds	r3, #48	; 0x30
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	ee07 3a90 	vmov	s15, r3
}
 8003e58:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e74:	332c      	adds	r3, #44	; 0x2c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	ee07 3a90 	vmov	s15, r3
}
 8003e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8120 	beq.w	80040e0 <_ZN9LineTrace4flipEv+0x254>
		// ---- line following processing -----//
		pidTrace();
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fe fe31 	bl	8002b08 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fb8b 	bl	80035c2 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8003eac:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fbf4 	bl	800369e <_ZN9LineTrace16isTargetDistanceEf>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d028      	beq.n	8003f0e <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff f80b 	bl	8002ed8 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fcca 	bl	800385c <_ZN9LineTrace8isStableEv>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <_ZN9LineTrace4flipEv+0x5c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 faf8 	bl	80054c8 <_ZN10SideSensor10getStatusLEv>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f083 0301 	eor.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <_ZN9LineTrace4flipEv+0x5c>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <_ZN9LineTrace4flipEv+0x5e>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ef4:	3323      	adds	r3, #35	; 0x23
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd fba4 	bl	800164c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 f841 	bl	8004f90 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f14:	3323      	adds	r3, #35	; 0x23
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <_ZN9LineTrace4flipEv+0xa4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fad1 	bl	80054c8 <_ZN10SideSensor10getStatusLEv>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <_ZN9LineTrace4flipEv+0xa4>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <_ZN9LineTrace4flipEv+0xa6>
 8003f30:	2300      	movs	r3, #0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d029      	beq.n	8003f8a <_ZN9LineTrace4flipEv+0xfe>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f3c:	3354      	adds	r3, #84	; 0x54
 8003f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <_ZN9LineTrace4flipEv+0xce>
				store_check_cnt_ = 0;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f4c:	333a      	adds	r3, #58	; 0x3a
 8003f4e:	2200      	movs	r2, #0
 8003f50:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fe ff50 	bl	8002df8 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f58:	e00b      	b.n	8003f72 <_ZN9LineTrace4flipEv+0xe6>
			}
			else{
				store_check_cnt_ = 0;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f60:	333a      	adds	r3, #58	; 0x3a
 8003f62:	2200      	movs	r2, #0
 8003f64:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff f88a 	bl	8003080 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fe ff7b 	bl	8002e68 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f78:	3323      	adds	r3, #35	; 0x23
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f84:	3324      	adds	r3, #36	; 0x24
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fbaa 	bl	80036e4 <_ZN9LineTrace11isCrossLineEv>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <_ZN9LineTrace4flipEv+0x11e>
			side_sensor_->enableIgnore();
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 fabc 	bl	8005518 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fb7c 	bl	80016a2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 60){
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 facc 	bl	800554c <_ZN10SideSensor13getIgnoreFlagEv>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00f      	beq.n	8003fda <_ZN9LineTrace4flipEv+0x14e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd fb60 	bl	8001684 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003fc4:	eeb0 7a40 	vmov.f32	s14, s0
 8003fc8:	eddf 7a47 	vldr	s15, [pc, #284]	; 80040e8 <_ZN9LineTrace4flipEv+0x25c>
 8003fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	db01      	blt.n	8003fda <_ZN9LineTrace4flipEv+0x14e>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <_ZN9LineTrace4flipEv+0x150>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <_ZN9LineTrace4flipEv+0x15e>
			side_sensor_->disableIgnore();
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 faa4 	bl	8005532 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fbc6 	bl	8002780 <_ZN10LineSensor13emergencyStopEv>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <_ZN9LineTrace4flipEv+0x18a>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80040ec <_ZN9LineTrace4flipEv+0x260>
 8004002:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80040ec <_ZN9LineTrace4flipEv+0x260>
 8004006:	4618      	mov	r0, r3
 8004008:	f001 fdbe 	bl	8005b88 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	4618      	mov	r0, r3
 8004012:	f7fd f9b7 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800401c:	3338      	adds	r3, #56	; 0x38
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800402a:	3338      	adds	r3, #56	; 0x38
 800402c:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004034:	3338      	adds	r3, #56	; 0x38
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	f242 720f 	movw	r2, #9999	; 0x270f
 800403c:	4293      	cmp	r3, r2
 800403e:	d906      	bls.n	800404e <_ZN9LineTrace4flipEv+0x1c2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004046:	3338      	adds	r3, #56	; 0x38
 8004048:	f242 7210 	movw	r2, #10000	; 0x2710
 800404c:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800405c:	d806      	bhi.n	800406c <_ZN9LineTrace4flipEv+0x1e0>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	330c      	adds	r3, #12
 8004062:	2152      	movs	r1, #82	; 0x52
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe f819 	bl	800209c <_ZN3LED9fullColorEc>
 800406a:	e005      	b.n	8004078 <_ZN9LineTrace4flipEv+0x1ec>
		else led_.fullColor('B');
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	330c      	adds	r3, #12
 8004070:	2142      	movs	r1, #66	; 0x42
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe f812 	bl	800209c <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800407e:	333a      	adds	r3, #58	; 0x3a
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800408c:	333a      	adds	r3, #58	; 0x3a
 800408e:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004096:	333a      	adds	r3, #58	; 0x3a
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	f242 720f 	movw	r2, #9999	; 0x270f
 800409e:	4293      	cmp	r3, r2
 80040a0:	d906      	bls.n	80040b0 <_ZN9LineTrace4flipEv+0x224>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040a8:	333a      	adds	r3, #58	; 0x3a
 80040aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80040ae:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040b6:	333a      	adds	r3, #58	; 0x3a
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	2bc8      	cmp	r3, #200	; 0xc8
 80040bc:	d808      	bhi.n	80040d0 <_ZN9LineTrace4flipEv+0x244>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	330c      	adds	r3, #12
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe f8a3 	bl	8002214 <_ZN3LED2LREaa>
		else led_.LR(0, -1);
	}
}
 80040ce:	e007      	b.n	80040e0 <_ZN9LineTrace4flipEv+0x254>
		else led_.LR(0, -1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	330c      	adds	r3, #12
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe f89a 	bl	8002214 <_ZN3LED2LREaa>
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	42700000 	.word	0x42700000
 80040ec:	00000000 	.word	0x00000000

080040f0 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004102:	3354      	adds	r3, #84	; 0x54
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	801a      	strh	r2, [r3, #0]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fd82 	bl	8005c3a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	4618      	mov	r0, r3
 800413c:	f001 f9dc 	bl	80054f8 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004146:	3318      	adds	r3, #24
 8004148:	2200      	movs	r2, #0
 800414a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004152:	331c      	adds	r3, #28
 8004154:	2200      	movs	r2, #0
 8004156:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800415e:	331e      	adds	r3, #30
 8004160:	2200      	movs	r2, #0
 8004162:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800416a:	3320      	adds	r3, #32
 800416c:	2200      	movs	r2, #0
 800416e:	801a      	strh	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004184:	2300      	movs	r3, #0
 8004186:	737b      	strb	r3, [r7, #13]
	start();
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ffc3 	bl	8004114 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800418e:	7b7b      	ldrb	r3, [r7, #13]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d161      	bne.n	8004258 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 8004194:	89fb      	ldrh	r3, [r7, #14]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <_ZN9LineTrace7runningEv+0x28>
 800419a:	2b0a      	cmp	r3, #10
 800419c:	d030      	beq.n	8004200 <_ZN9LineTrace7runningEv+0x88>
 800419e:	e05a      	b.n	8004256 <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 f99b 	bl	80054e0 <_ZN10SideSensor16getWhiteLineCntREv>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d04a      	beq.n	8004250 <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fe fd84 	bl	8002cc8 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041c6:	3354      	adds	r3, #84	; 0x54
 80041c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff f9b9 	bl	8003548 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fd fa61 	bl	80016a2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fd fa3f 	bl	8001668 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	330c      	adds	r3, #12
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe f80d 	bl	8002214 <_ZN3LED2LREaa>
				stage = 10;
 80041fa:	230a      	movs	r3, #10
 80041fc:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80041fe:	e027      	b.n	8004250 <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	4618      	mov	r0, r3
 8004206:	f001 f96b 	bl	80054e0 <_ZN10SideSensor16getWhiteLineCntREv>
 800420a:	4603      	mov	r3, r0
 800420c:	2b02      	cmp	r3, #2
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01c      	beq.n	8004254 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	330c      	adds	r3, #12
 800421e:	214d      	movs	r1, #77	; 0x4d
 8004220:	4618      	mov	r0, r3
 8004222:	f7fd ff3b 	bl	800209c <_ZN3LED9fullColorEc>
				loggerStop();
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fe fd69 	bl	8002cfe <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff f9ab 	bl	8003588 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004232:	2064      	movs	r0, #100	; 0x64
 8004234:	f005 fca4 	bl	8009b80 <HAL_Delay>

				setTargetVelocity(0);
 8004238:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004268 <_ZN9LineTrace7runningEv+0xf0>
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fd08 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004246:	f005 fc9b 	bl	8009b80 <HAL_Delay>

				goal_flag = true;
 800424a:	2301      	movs	r3, #1
 800424c:	737b      	strb	r3, [r7, #13]

			}

			break;
 800424e:	e001      	b.n	8004254 <_ZN9LineTrace7runningEv+0xdc>
			break;
 8004250:	bf00      	nop
 8004252:	e79c      	b.n	800418e <_ZN9LineTrace7runningEv+0x16>
			break;
 8004254:	bf00      	nop
	while(goal_flag == false){
 8004256:	e79a      	b.n	800418e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f807 	bl	800426c <_ZN9LineTrace4stopEv>
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00000000 	.word	0x00000000

0800426c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fced 	bl	8005c60 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	330c      	adds	r3, #12
 800428a:	2201      	movs	r2, #1
 800428c:	f04f 31ff 	mov.w	r1, #4294967295
 8004290:	4618      	mov	r0, r3
 8004292:	f7fd ffbf 	bl	8002214 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800429c:	3354      	adds	r3, #84	; 0x54
 800429e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11e      	bne.n	80042e4 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69d8      	ldr	r0, [r3, #28]
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <_ZN9LineTrace4stopEv+0xe0>)
 80042ac:	4a28      	ldr	r2, [pc, #160]	; (8004350 <_ZN9LineTrace4stopEv+0xe4>)
 80042ae:	4929      	ldr	r1, [pc, #164]	; (8004354 <_ZN9LineTrace4stopEv+0xe8>)
 80042b0:	f000 fbef 	bl	8004a92 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042ba:	3358      	adds	r3, #88	; 0x58
 80042bc:	2200      	movs	r2, #0
 80042be:	9200      	str	r2, [sp, #0]
 80042c0:	2264      	movs	r2, #100	; 0x64
 80042c2:	4925      	ldr	r1, [pc, #148]	; (8004358 <_ZN9LineTrace4stopEv+0xec>)
 80042c4:	4823      	ldr	r0, [pc, #140]	; (8004354 <_ZN9LineTrace4stopEv+0xe8>)
 80042c6:	f7fd fa6f 	bl	80017a8 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80042d0:	3378      	adds	r3, #120	; 0x78
 80042d2:	2200      	movs	r2, #0
 80042d4:	9200      	str	r2, [sp, #0]
 80042d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042da:	4920      	ldr	r1, [pc, #128]	; (800435c <_ZN9LineTrace4stopEv+0xf0>)
 80042dc:	481d      	ldr	r0, [pc, #116]	; (8004354 <_ZN9LineTrace4stopEv+0xe8>)
 80042de:	f7fd fa63 	bl	80017a8 <sd_write_array_float>
 80042e2:	e01d      	b.n	8004320 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69d8      	ldr	r0, [r3, #28]
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <_ZN9LineTrace4stopEv+0xf4>)
 80042ea:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <_ZN9LineTrace4stopEv+0xf8>)
 80042ec:	4919      	ldr	r1, [pc, #100]	; (8004354 <_ZN9LineTrace4stopEv+0xe8>)
 80042ee:	f000 fbf4 	bl	8004ada <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80042f8:	33e8      	adds	r3, #232	; 0xe8
 80042fa:	2200      	movs	r2, #0
 80042fc:	9200      	str	r2, [sp, #0]
 80042fe:	2264      	movs	r2, #100	; 0x64
 8004300:	4919      	ldr	r1, [pc, #100]	; (8004368 <_ZN9LineTrace4stopEv+0xfc>)
 8004302:	4814      	ldr	r0, [pc, #80]	; (8004354 <_ZN9LineTrace4stopEv+0xe8>)
 8004304:	f7fd fa50 	bl	80017a8 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 800430e:	3348      	adds	r3, #72	; 0x48
 8004310:	2200      	movs	r2, #0
 8004312:	9200      	str	r2, [sp, #0]
 8004314:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004318:	4914      	ldr	r1, [pc, #80]	; (800436c <_ZN9LineTrace4stopEv+0x100>)
 800431a:	480e      	ldr	r0, [pc, #56]	; (8004354 <_ZN9LineTrace4stopEv+0xe8>)
 800431c:	f7fd fa44 	bl	80017a8 <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	330c      	adds	r3, #12
 8004324:	2200      	movs	r2, #0
 8004326:	f04f 31ff 	mov.w	r1, #4294967295
 800432a:	4618      	mov	r0, r3
 800432c:	f7fd ff72 	bl	8002214 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fc68 	bl	8004c0a <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fc0f 	bl	8004b62 <_ZN6Logger10resetLogs2Ev>
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	08018ac0 	.word	0x08018ac0
 8004350:	08018acc 	.word	0x08018acc
 8004354:	08018adc 	.word	0x08018adc
 8004358:	08018ae8 	.word	0x08018ae8
 800435c:	08018af8 	.word	0x08018af8
 8004360:	08018b04 	.word	0x08018b04
 8004364:	08018b10 	.word	0x08018b10
 8004368:	08018b20 	.word	0x08018b20
 800436c:	08018b30 	.word	0x08018b30

08004370 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b08b      	sub	sp, #44	; 0x2c
 8004374:	af02      	add	r7, sp, #8
 8004376:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fb41 	bl	8004a04 <_ZN6Logger23getDistanceArrayPointerEv>
 8004382:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fb49 	bl	8004a20 <_ZN6Logger20getThetaArrayPointerEv>
 800438e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004390:	2300      	movs	r3, #0
 8004392:	837b      	strh	r3, [r7, #26]
 8004394:	8b7b      	ldrh	r3, [r7, #26]
 8004396:	f241 726f 	movw	r2, #5999	; 0x176f
 800439a:	4293      	cmp	r3, r2
 800439c:	d84b      	bhi.n	8004436 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800439e:	8b7b      	ldrh	r3, [r7, #26]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80043aa:	8b7b      	ldrh	r3, [r7, #26]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80043b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80043ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d101      	bne.n	80043c8 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80043c4:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 80043c6:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80043c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80043cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80043d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043d4:	eeb0 0a66 	vmov.f32	s0, s13
 80043d8:	f7fe fa22 	bl	8002820 <_ZSt3absf>
 80043dc:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80043e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80043e4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80044fc <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 80043e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f0:	db01      	blt.n	80043f6 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80043f2:	4b43      	ldr	r3, [pc, #268]	; (8004500 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80043f4:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80043f6:	8b7c      	ldrh	r4, [r7, #26]
 80043f8:	ed97 0a05 	vldr	s0, [r7, #20]
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fe fe9d 	bl	800313c <_ZN9LineTrace15radius2VelocityEf>
 8004402:	eef0 7a40 	vmov.f32	s15, s0
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800440c:	3304      	adds	r3, #4
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004416:	8b7b      	ldrh	r3, [r7, #26]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	441a      	add	r2, r3
 800441e:	8b7b      	ldrh	r3, [r7, #26]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	3332      	adds	r3, #50	; 0x32
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	3304      	adds	r3, #4
 800442c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800442e:	8b7b      	ldrh	r3, [r7, #26]
 8004430:	3301      	adds	r3, #1
 8004432:	837b      	strh	r3, [r7, #26]
 8004434:	e7ae      	b.n	8004394 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800443c:	3354      	adds	r3, #84	; 0x54
 800443e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d120      	bne.n	8004488 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004452:	3310      	adds	r3, #16
 8004454:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800445c:	332c      	adds	r3, #44	; 0x2c
 800445e:	edd3 7a00 	vldr	s15, [r3]
 8004462:	6939      	ldr	r1, [r7, #16]
 8004464:	eeb0 0a67 	vmov.f32	s0, s15
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fe ff25 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004474:	3328      	adds	r3, #40	; 0x28
 8004476:	edd3 7a00 	vldr	s15, [r3]
 800447a:	6939      	ldr	r1, [r7, #16]
 800447c:	eeb0 0a67 	vmov.f32	s0, s15
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fe ffbd 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004486:	e027      	b.n	80044d8 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800448e:	3354      	adds	r3, #84	; 0x54
 8004490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d11f      	bne.n	80044d8 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044a4:	3310      	adds	r3, #16
 80044a6:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044ae:	3334      	adds	r3, #52	; 0x34
 80044b0:	edd3 7a00 	vldr	s15, [r3]
 80044b4:	6939      	ldr	r1, [r7, #16]
 80044b6:	eeb0 0a67 	vmov.f32	s0, s15
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe fefc 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044c6:	3330      	adds	r3, #48	; 0x30
 80044c8:	edd3 7a00 	vldr	s15, [r3]
 80044cc:	6939      	ldr	r1, [r7, #16]
 80044ce:	eeb0 0a67 	vmov.f32	s0, s15
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fe ff94 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044de:	3310      	adds	r3, #16
 80044e0:	2200      	movs	r2, #0
 80044e2:	9200      	str	r2, [sp, #0]
 80044e4:	f241 7270 	movw	r2, #6000	; 0x1770
 80044e8:	4906      	ldr	r1, [pc, #24]	; (8004504 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80044ea:	4807      	ldr	r0, [pc, #28]	; (8004508 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80044ec:	f7fd f95c 	bl	80017a8 <sd_write_array_float>

}
 80044f0:	bf00      	nop
 80044f2:	3724      	adds	r7, #36	; 0x24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd90      	pop	{r4, r7, pc}
 80044f8:	3727c5ac 	.word	0x3727c5ac
 80044fc:	459c4000 	.word	0x459c4000
 8004500:	459c4000 	.word	0x459c4000
 8004504:	08018b40 	.word	0x08018b40
 8004508:	08018adc 	.word	0x08018adc

0800450c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b08b      	sub	sp, #44	; 0x2c
 8004510:	af02      	add	r7, sp, #8
 8004512:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69d8      	ldr	r0, [r3, #28]
 8004518:	4b6b      	ldr	r3, [pc, #428]	; (80046c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800451a:	4a6c      	ldr	r2, [pc, #432]	; (80046cc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 800451c:	496c      	ldr	r1, [pc, #432]	; (80046d0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800451e:	f000 fb00 	bl	8004b22 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004528:	3358      	adds	r3, #88	; 0x58
 800452a:	2264      	movs	r2, #100	; 0x64
 800452c:	4969      	ldr	r1, [pc, #420]	; (80046d4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800452e:	4868      	ldr	r0, [pc, #416]	; (80046d0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004530:	f7fd f9a0 	bl	8001874 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 800453a:	3378      	adds	r3, #120	; 0x78
 800453c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004540:	4965      	ldr	r1, [pc, #404]	; (80046d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8004542:	4863      	ldr	r0, [pc, #396]	; (80046d0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004544:	f7fd f996 	bl	8001874 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fa59 	bl	8004a04 <_ZN6Logger23getDistanceArrayPointerEv>
 8004552:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fa61 	bl	8004a20 <_ZN6Logger20getThetaArrayPointerEv>
 800455e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004560:	2300      	movs	r3, #0
 8004562:	837b      	strh	r3, [r7, #26]
 8004564:	8b7b      	ldrh	r3, [r7, #26]
 8004566:	f241 726f 	movw	r2, #5999	; 0x176f
 800456a:	4293      	cmp	r3, r2
 800456c:	d84b      	bhi.n	8004606 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800456e:	8b7b      	ldrh	r3, [r7, #26]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4413      	add	r3, r2
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800457a:	8b7b      	ldrh	r3, [r7, #26]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004586:	edd7 7a07 	vldr	s15, [r7, #28]
 800458a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004592:	d101      	bne.n	8004598 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004594:	4b51      	ldr	r3, [pc, #324]	; (80046dc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004596:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004598:	ed97 7a02 	vldr	s14, [r7, #8]
 800459c:	edd7 7a07 	vldr	s15, [r7, #28]
 80045a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045a4:	eeb0 0a66 	vmov.f32	s0, s13
 80045a8:	f7fe f93a 	bl	8002820 <_ZSt3absf>
 80045ac:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80045b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045b4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80045b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	db01      	blt.n	80045c6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80045c2:	4b48      	ldr	r3, [pc, #288]	; (80046e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80045c4:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80045c6:	8b7c      	ldrh	r4, [r7, #26]
 80045c8:	ed97 0a05 	vldr	s0, [r7, #20]
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fe fdb5 	bl	800313c <_ZN9LineTrace15radius2VelocityEf>
 80045d2:	eef0 7a40 	vmov.f32	s15, s0
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045dc:	3304      	adds	r3, #4
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045e6:	8b7b      	ldrh	r3, [r7, #26]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	441a      	add	r2, r3
 80045ee:	8b7b      	ldrh	r3, [r7, #26]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	3332      	adds	r3, #50	; 0x32
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	3304      	adds	r3, #4
 80045fc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045fe:	8b7b      	ldrh	r3, [r7, #26]
 8004600:	3301      	adds	r3, #1
 8004602:	837b      	strh	r3, [r7, #26]
 8004604:	e7ae      	b.n	8004564 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800460c:	3354      	adds	r3, #84	; 0x54
 800460e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d120      	bne.n	8004658 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004622:	3310      	adds	r3, #16
 8004624:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800462c:	332c      	adds	r3, #44	; 0x2c
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	6939      	ldr	r1, [r7, #16]
 8004634:	eeb0 0a67 	vmov.f32	s0, s15
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fe fe3d 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004644:	3328      	adds	r3, #40	; 0x28
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	6939      	ldr	r1, [r7, #16]
 800464c:	eeb0 0a67 	vmov.f32	s0, s15
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fe fed5 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004656:	e027      	b.n	80046a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800465e:	3354      	adds	r3, #84	; 0x54
 8004660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d11f      	bne.n	80046a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004674:	3310      	adds	r3, #16
 8004676:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800467e:	3334      	adds	r3, #52	; 0x34
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	6939      	ldr	r1, [r7, #16]
 8004686:	eeb0 0a67 	vmov.f32	s0, s15
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe fe14 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004696:	3330      	adds	r3, #48	; 0x30
 8004698:	edd3 7a00 	vldr	s15, [r3]
 800469c:	6939      	ldr	r1, [r7, #16]
 800469e:	eeb0 0a67 	vmov.f32	s0, s15
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe feac 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046ae:	3310      	adds	r3, #16
 80046b0:	2200      	movs	r2, #0
 80046b2:	9200      	str	r2, [sp, #0]
 80046b4:	f241 7270 	movw	r2, #6000	; 0x1770
 80046b8:	490b      	ldr	r1, [pc, #44]	; (80046e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80046ba:	4805      	ldr	r0, [pc, #20]	; (80046d0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046bc:	f7fd f874 	bl	80017a8 <sd_write_array_float>

}
 80046c0:	bf00      	nop
 80046c2:	3724      	adds	r7, #36	; 0x24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}
 80046c8:	08018ac0 	.word	0x08018ac0
 80046cc:	08018acc 	.word	0x08018acc
 80046d0:	08018adc 	.word	0x08018adc
 80046d4:	08018ae8 	.word	0x08018ae8
 80046d8:	08018af8 	.word	0x08018af8
 80046dc:	3727c5ac 	.word	0x3727c5ac
 80046e0:	459c4000 	.word	0x459c4000
 80046e4:	459c4000 	.word	0x459c4000
 80046e8:	08018b40 	.word	0x08018b40

080046ec <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80046fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004708:	f203 2382 	addw	r3, r3, #642	; 0x282
 800470c:	2200      	movs	r2, #0
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004716:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800471a:	2200      	movs	r2, #0
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004724:	f203 2386 	addw	r3, r3, #646	; 0x286
 8004728:	2200      	movs	r2, #0
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004732:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004736:	2200      	movs	r2, #0
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004740:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004744:	2200      	movs	r2, #0
 8004746:	801a      	strh	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004760:	2300      	movs	r3, #0
 8004762:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004764:	f7fd f912 	bl	800198c <sd_mount>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d016      	beq.n	80047a6 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004778:	f7fc fc92 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800477c:	2100      	movs	r1, #0
 800477e:	2000      	movs	r0, #0
 8004780:	f7fc fc9e 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004784:	4815      	ldr	r0, [pc, #84]	; (80047dc <_ZN6Logger10sdCardInitEv+0x84>)
 8004786:	f7fc fcc5 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800478a:	2101      	movs	r1, #1
 800478c:	2000      	movs	r0, #0
 800478e:	f7fc fc97 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004792:	4813      	ldr	r0, [pc, #76]	; (80047e0 <_ZN6Logger10sdCardInitEv+0x88>)
 8004794:	f7fc fcbe 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004798:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800479c:	f005 f9f0 	bl	8009b80 <HAL_Delay>

	  ret = true;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
 80047a4:	e015      	b.n	80047d2 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80047a6:	f7fc fc7b 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80047aa:	2100      	movs	r1, #0
 80047ac:	2000      	movs	r0, #0
 80047ae:	f7fc fc87 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80047b2:	480a      	ldr	r0, [pc, #40]	; (80047dc <_ZN6Logger10sdCardInitEv+0x84>)
 80047b4:	f7fc fcae 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80047b8:	2101      	movs	r1, #1
 80047ba:	2000      	movs	r0, #0
 80047bc:	f7fc fc80 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80047c0:	4808      	ldr	r0, [pc, #32]	; (80047e4 <_ZN6Logger10sdCardInitEv+0x8c>)
 80047c2:	f7fc fca7 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80047c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047ca:	f005 f9d9 	bl	8009b80 <HAL_Delay>

	  ret = false;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	08018b50 	.word	0x08018b50
 80047e0:	08018b5c 	.word	0x08018b5c
 80047e4:	08018b64 	.word	0x08018b64

080047e8 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80047fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d028      	beq.n	8004856 <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800480a:	f203 2382 	addw	r3, r3, #642	; 0x282
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004820:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004830:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004834:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800483c:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004846:	d306      	bcc.n	8004856 <_ZN6Logger8storeLogEf+0x6e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800484e:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004852:	2200      	movs	r2, #0
 8004854:	801a      	strh	r2, [r3, #0]
	}
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004874:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02a      	beq.n	80048d4 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004884:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800489e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048ae:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048b2:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048ba:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80048c4:	d306      	bcc.n	80048d4 <_ZN6Logger9storeLog2Ef+0x72>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048cc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048d0:	2200      	movs	r2, #0
 80048d2:	801a      	strh	r2, [r3, #0]
	}
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80048ec:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048f6:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004902:	3320      	adds	r3, #32
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004912:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 800491e:	3350      	adds	r3, #80	; 0x50
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800492e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800493e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004942:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800494a:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	f241 726f 	movw	r2, #5999	; 0x176f
 8004954:	4293      	cmp	r3, r2
 8004956:	d906      	bls.n	8004966 <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800495e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004962:	2200      	movs	r2, #0
 8004964:	801a      	strh	r2, [r3, #0]
	//}
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	ed87 0a02 	vstr	s0, [r7, #8]
 800497e:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004988:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004994:	3340      	adds	r3, #64	; 0x40
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049a4:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80049b0:	3330      	adds	r3, #48	; 0x30
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049c0:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049d0:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049d4:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049dc:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	f241 726f 	movw	r2, #5999	; 0x176f
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d906      	bls.n	80049f8 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049f0:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80049f4:	2200      	movs	r2, #0
 80049f6:	801a      	strh	r2, [r3, #0]
	//}
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a12:	3380      	adds	r3, #128	; 0x80
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004a2e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af02      	add	r7, sp, #8
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	68b8      	ldr	r0, [r7, #8]
 8004a5a:	f7fc fea5 	bl	80017a8 <sd_write_array_float>
}
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b086      	sub	sp, #24
 8004a6a:	af02      	add	r7, sp, #8
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	68b8      	ldr	r0, [r7, #8]
 8004a86:	f7fc fe8f 	bl	80017a8 <sd_write_array_float>
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af02      	add	r7, sp, #8
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004aa6:	3380      	adds	r3, #128	; 0x80
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	9200      	str	r2, [sp, #0]
 8004aac:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	68b8      	ldr	r0, [r7, #8]
 8004ab4:	f7fc fe78 	bl	80017a8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004abe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	9200      	str	r2, [sp, #0]
 8004ac6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f7fc fe6b 	bl	80017a8 <sd_write_array_float>
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af02      	add	r7, sp, #8
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004aee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004af2:	2200      	movs	r2, #0
 8004af4:	9200      	str	r2, [sp, #0]
 8004af6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f7fc fe53 	bl	80017a8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b08:	33c0      	adds	r3, #192	; 0xc0
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	9200      	str	r2, [sp, #0]
 8004b0e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	68b8      	ldr	r0, [r7, #8]
 8004b16:	f7fc fe47 	bl	80017a8 <sd_write_array_float>
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b36:	3380      	adds	r3, #128	; 0x80
 8004b38:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	68b8      	ldr	r0, [r7, #8]
 8004b40:	f7fc fe98 	bl	8001874 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b4a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b4e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b52:	6839      	ldr	r1, [r7, #0]
 8004b54:	68b8      	ldr	r0, [r7, #8]
 8004b56:	f7fc fe8d 	bl	8001874 <sd_read_array_float>
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim2_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004b62:	b480      	push	{r7}
 8004b64:	b08b      	sub	sp, #44	; 0x2c
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b80:	3340      	adds	r3, #64	; 0x40
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d009      	beq.n	8004ba0 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	617b      	str	r3, [r7, #20]
		log = 0;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9e:	e7f1      	b.n	8004b84 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ba6:	33c0      	adds	r3, #192	; 0xc0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004bb4:	3340      	adds	r3, #64	; 0x40
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d009      	beq.n	8004bd4 <_ZN6Logger10resetLogs2Ev+0x72>
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	e7f1      	b.n	8004bb8 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004bda:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004bde:	2200      	movs	r2, #0
 8004be0:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004be8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004bec:	2200      	movs	r2, #0
 8004bee:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004bf6:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	801a      	strh	r2, [r3, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	372c      	adds	r7, #44	; 0x2c
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c18:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c26:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c34:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004c38:	2200      	movs	r2, #0
 8004c3a:	801a      	strh	r2, [r3, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c56:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c64:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004c94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	805a      	strh	r2, [r3, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <_ZN5Motor4initEv>:

void Motor::init()
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004cd4:	2108      	movs	r1, #8
 8004cd6:	4805      	ldr	r0, [pc, #20]	; (8004cec <_ZN5Motor4initEv+0x20>)
 8004cd8:	f00a f902 	bl	800eee0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004cdc:	210c      	movs	r1, #12
 8004cde:	4803      	ldr	r0, [pc, #12]	; (8004cec <_ZN5Motor4initEv+0x20>)
 8004ce0:	f00a f8fe 	bl	800eee0 <HAL_TIM_PWM_Start>

}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	2004a5e0 	.word	0x2004a5e0

08004cf0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da0d      	bge.n	8004d1e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004d02:	2200      	movs	r2, #0
 8004d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d08:	481f      	ldr	r0, [pc, #124]	; (8004d88 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d0a:	f006 f9cf 	bl	800b0ac <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	425b      	negs	r3, r3
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	81fb      	strh	r3, [r7, #14]
 8004d1c:	e00a      	b.n	8004d34 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d24:	4818      	ldr	r0, [pc, #96]	; (8004d88 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d26:	f006 f9c1 	bl	800b0ac <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da0d      	bge.n	8004d5a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d44:	4810      	ldr	r0, [pc, #64]	; (8004d88 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d46:	f006 f9b1 	bl	800b0ac <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	425b      	negs	r3, r3
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	81bb      	strh	r3, [r7, #12]
 8004d58:	e00a      	b.n	8004d70 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d60:	4809      	ldr	r0, [pc, #36]	; (8004d88 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d62:	f006 f9a3 	bl	800b0ac <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004d70:	89fa      	ldrh	r2, [r7, #14]
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004d78:	89ba      	ldrh	r2, [r7, #12]
 8004d7a:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40020c00 	.word	0x40020c00
 8004d8c:	2004a5e0 	.word	0x2004a5e0

08004d90 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6178      	str	r0, [r7, #20]
 8004d98:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d9c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <_ZN5Motor8setRatioEdd+0xd8>)
 8004da6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004daa:	f7fb fecd 	bl	8000b48 <__aeabi_dcmpgt>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <_ZN5Motor8setRatioEdd+0x30>
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	4c2b      	ldr	r4, [pc, #172]	; (8004e68 <_ZN5Motor8setRatioEdd+0xd8>)
 8004dba:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004dbe:	e00e      	b.n	8004dde <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <_ZN5Motor8setRatioEdd+0xdc>)
 8004dc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dca:	f7fb fe9f 	bl	8000b0c <__aeabi_dcmplt>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <_ZN5Motor8setRatioEdd+0x4e>
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	4c24      	ldr	r4, [pc, #144]	; (8004e6c <_ZN5Motor8setRatioEdd+0xdc>)
 8004dda:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <_ZN5Motor8setRatioEdd+0xd8>)
 8004de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004de8:	f7fb feae 	bl	8000b48 <__aeabi_dcmpgt>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <_ZN5Motor8setRatioEdd+0x6e>
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	4c1c      	ldr	r4, [pc, #112]	; (8004e68 <_ZN5Motor8setRatioEdd+0xd8>)
 8004df8:	e9c7 3400 	strd	r3, r4, [r7]
 8004dfc:	e00e      	b.n	8004e1c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <_ZN5Motor8setRatioEdd+0xdc>)
 8004e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e08:	f7fb fe80 	bl	8000b0c <__aeabi_dcmplt>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <_ZN5Motor8setRatioEdd+0x8c>
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	4c15      	ldr	r4, [pc, #84]	; (8004e6c <_ZN5Motor8setRatioEdd+0xdc>)
 8004e18:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <_ZN5Motor8setRatioEdd+0xe0>)
 8004e22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e26:	f7fb fbff 	bl	8000628 <__aeabi_dmul>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	4618      	mov	r0, r3
 8004e30:	4621      	mov	r1, r4
 8004e32:	f7fb fea9 	bl	8000b88 <__aeabi_d2iz>
 8004e36:	4603      	mov	r3, r0
 8004e38:	b21a      	sxth	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <_ZN5Motor8setRatioEdd+0xe0>)
 8004e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e48:	f7fb fbee 	bl	8000628 <__aeabi_dmul>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	460c      	mov	r4, r1
 8004e50:	4618      	mov	r0, r3
 8004e52:	4621      	mov	r1, r4
 8004e54:	f7fb fe98 	bl	8000b88 <__aeabi_d2iz>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	b21a      	sxth	r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	805a      	strh	r2, [r3, #2]

}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd90      	pop	{r4, r7, pc}
 8004e68:	3ff00000 	.word	0x3ff00000
 8004e6c:	bff00000 	.word	0xbff00000
 8004e70:	409c2000 	.word	0x409c2000

08004e74 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004e74:	b490      	push	{r4, r7}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	f04f 0400 	mov.w	r4, #0
 8004e8c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	f04f 0400 	mov.w	r4, #0
 8004e9a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	f04f 0400 	mov.w	r4, #0
 8004ea8:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	f04f 0400 	mov.w	r4, #0
 8004eb6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	f04f 0400 	mov.w	r4, #0
 8004ec4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	609a      	str	r2, [r3, #8]
}
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc90      	pop	{r4, r7}
 8004ee4:	4770      	bx	lr
	...

08004ee8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fc ff0f 	bl	8001d18 <_ZN3IMU8getOmegaEv>
 8004efa:	ee10 3a10 	vmov	r3, s0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fb fb3a 	bl	8000578 <__aeabi_f2d>
 8004f04:	4603      	mov	r3, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 8004f0c:	a310      	add	r3, pc, #64	; (adr r3, 8004f50 <_ZN8Odometry12calcPotitionEv+0x68>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f16:	f7fb fb87 	bl	8000628 <__aeabi_dmul>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004f30:	461a      	mov	r2, r3
 8004f32:	4623      	mov	r3, r4
 8004f34:	f7fb f9c2 	bl	80002bc <__adddf3>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd90      	pop	{r4, r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	f3af 8000 	nop.w
 8004f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8004f54:	3f50624d 	.word	0x3f50624d

08004f58 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ffc1 	bl	8004ee8 <_ZN8Odometry12calcPotitionEv>
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004f6e:	b490      	push	{r4, r7}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
	return theta_;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004f7c:	ec44 3b17 	vmov	d7, r3, r4
}
 8004f80:	eeb0 0a47 	vmov.f32	s0, s14
 8004f84:	eef0 0a67 	vmov.f32	s1, s15
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc90      	pop	{r4, r7}
 8004f8e:	4770      	bx	lr

08004f90 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004f90:	b490      	push	{r4, r7}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	f04f 0400 	mov.w	r4, #0
 8004fa2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	f04f 0400 	mov.w	r4, #0
 8004fb0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	f04f 0400 	mov.w	r4, #0
 8004fbe:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc90      	pop	{r4, r7}
 8004fca:	4770      	bx	lr

08004fcc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004fcc:	b490      	push	{r4, r7}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	f04f 0400 	mov.w	r4, #0
 8004ff2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	f04f 0400 	mov.w	r4, #0
 8005000:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800500a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800500e:	2200      	movs	r2, #0
 8005010:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005012:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <_ZN13PathFollowingC1Ev+0xec>)
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	f04f 0400 	mov.w	r4, #0
 800501c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005020:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <_ZN13PathFollowingC1Ev+0xec>)
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	f04f 0400 	mov.w	r4, #0
 800502a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800502e:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <_ZN13PathFollowingC1Ev+0xec>)
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	f04f 0400 	mov.w	r4, #0
 8005038:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <_ZN13PathFollowingC1Ev+0xf0>)
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800504a:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <_ZN13PathFollowingC1Ev+0xf0>)
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	f04f 0400 	mov.w	r4, #0
 8005054:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005058:	4a18      	ldr	r2, [pc, #96]	; (80050bc <_ZN13PathFollowingC1Ev+0xf0>)
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	f04f 0400 	mov.w	r4, #0
 8005062:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <_ZN13PathFollowingC1Ev+0xf0>)
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	f04f 0400 	mov.w	r4, #0
 8005070:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005074:	4a11      	ldr	r2, [pc, #68]	; (80050bc <_ZN13PathFollowingC1Ev+0xf0>)
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	f04f 0400 	mov.w	r4, #0
 800507e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <_ZN13PathFollowingC1Ev+0xf0>)
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	f04f 0400 	mov.w	r4, #0
 800508c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <_ZN13PathFollowingC1Ev+0xf4>)
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	f04f 0400 	mov.w	r4, #0
 800509a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <_ZN13PathFollowingC1Ev+0xf4>)
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	f04f 0400 	mov.w	r4, #0
 80050a8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc90      	pop	{r4, r7}
 80050b6:	4770      	bx	lr
 80050b8:	2004aae0 	.word	0x2004aae0
 80050bc:	2004aa70 	.word	0x2004aa70
 80050c0:	2004aad0 	.word	0x2004aad0

080050c4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80050cc:	f001 fd6e 	bl	8006bac <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80050d0:	f107 0318 	add.w	r3, r7, #24
 80050d4:	2201      	movs	r2, #1
 80050d6:	4915      	ldr	r1, [pc, #84]	; (800512c <_ZN13PathFollowing4initEv+0x68>)
 80050d8:	4815      	ldr	r0, [pc, #84]	; (8005130 <_ZN13PathFollowing4initEv+0x6c>)
 80050da:	f7fc fc11 	bl	8001900 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80050de:	f107 0310 	add.w	r3, r7, #16
 80050e2:	2201      	movs	r2, #1
 80050e4:	4913      	ldr	r1, [pc, #76]	; (8005134 <_ZN13PathFollowing4initEv+0x70>)
 80050e6:	4812      	ldr	r0, [pc, #72]	; (8005130 <_ZN13PathFollowing4initEv+0x6c>)
 80050e8:	f7fc fc0a 	bl	8001900 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80050ec:	f107 0308 	add.w	r3, r7, #8
 80050f0:	2201      	movs	r2, #1
 80050f2:	4911      	ldr	r1, [pc, #68]	; (8005138 <_ZN13PathFollowing4initEv+0x74>)
 80050f4:	480e      	ldr	r0, [pc, #56]	; (8005130 <_ZN13PathFollowing4initEv+0x6c>)
 80050f6:	f7fc fc03 	bl	8001900 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80050fa:	ed97 7b06 	vldr	d7, [r7, #24]
 80050fe:	ed97 6b04 	vldr	d6, [r7, #16]
 8005102:	ed97 5b02 	vldr	d5, [r7, #8]
 8005106:	eeb0 2a45 	vmov.f32	s4, s10
 800510a:	eef0 2a65 	vmov.f32	s5, s11
 800510e:	eeb0 1a46 	vmov.f32	s2, s12
 8005112:	eef0 1a66 	vmov.f32	s3, s13
 8005116:	eeb0 0a47 	vmov.f32	s0, s14
 800511a:	eef0 0a67 	vmov.f32	s1, s15
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f80c 	bl	800513c <_ZN13PathFollowing7setGainEddd>
}
 8005124:	bf00      	nop
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	08018b6c 	.word	0x08018b6c
 8005130:	08018b74 	.word	0x08018b74
 8005134:	08018b7c 	.word	0x08018b7c
 8005138:	08018b84 	.word	0x08018b84

0800513c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800513c:	b490      	push	{r4, r7}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	61f8      	str	r0, [r7, #28]
 8005144:	ed87 0b04 	vstr	d0, [r7, #16]
 8005148:	ed87 1b02 	vstr	d1, [r7, #8]
 800514c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005150:	4a09      	ldr	r2, [pc, #36]	; (8005178 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005152:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005156:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800515a:	4a07      	ldr	r2, [pc, #28]	; (8005178 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800515c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005160:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005164:	4a04      	ldr	r2, [pc, #16]	; (8005178 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005166:	e9d7 3400 	ldrd	r3, r4, [r7]
 800516a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800516e:	bf00      	nop
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bc90      	pop	{r4, r7}
 8005176:	4770      	bx	lr
 8005178:	2004aae0 	.word	0x2004aae0

0800517c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005184:	2088      	movs	r0, #136	; 0x88
 8005186:	f7fc ff0a 	bl	8001f9e <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800518a:	2080      	movs	r0, #128	; 0x80
 800518c:	f7fc ff07 	bl	8001f9e <INA260_init>
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80051a0:	2188      	movs	r1, #136	; 0x88
 80051a2:	2002      	movs	r0, #2
 80051a4:	f7fc fe98 	bl	8001ed8 <INA260_read>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb f9d2 	bl	8000554 <__aeabi_i2d>
 80051b0:	a30c      	add	r3, pc, #48	; (adr r3, 80051e4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f7fb fa37 	bl	8000628 <__aeabi_dmul>
 80051ba:	4603      	mov	r3, r0
 80051bc:	460c      	mov	r4, r1
 80051be:	4618      	mov	r0, r3
 80051c0:	4621      	mov	r1, r4
 80051c2:	f7fb fd29 	bl	8000c18 <__aeabi_d2f>
 80051c6:	4602      	mov	r2, r0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80051d2:	6013      	str	r3, [r2, #0]
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd90      	pop	{r4, r7, pc}
 80051dc:	f3af 8000 	nop.w
 80051e0:	20000220 	.word	0x20000220
 80051e4:	47ae147b 	.word	0x47ae147b
 80051e8:	3f547ae1 	.word	0x3f547ae1

080051ec <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	ee07 3a90 	vmov	s15, r3

}
 80051fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005218:	2102      	movs	r1, #2
 800521a:	4822      	ldr	r0, [pc, #136]	; (80052a4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800521c:	f005 ff2e 	bl	800b07c <HAL_GPIO_ReadPin>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005230:	89fb      	ldrh	r3, [r7, #14]
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005238:	2108      	movs	r1, #8
 800523a:	481a      	ldr	r0, [pc, #104]	; (80052a4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800523c:	f005 ff1e 	bl	800b07c <HAL_GPIO_ReadPin>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	f043 0302 	orr.w	r3, r3, #2
 8005256:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005258:	2110      	movs	r1, #16
 800525a:	4812      	ldr	r0, [pc, #72]	; (80052a4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800525c:	f005 ff0e 	bl	800b07c <HAL_GPIO_ReadPin>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005270:	89fb      	ldrh	r3, [r7, #14]
 8005272:	f043 0304 	orr.w	r3, r3, #4
 8005276:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005278:	2180      	movs	r1, #128	; 0x80
 800527a:	480a      	ldr	r0, [pc, #40]	; (80052a4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800527c:	f005 fefe 	bl	800b07c <HAL_GPIO_ReadPin>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005290:	89fb      	ldrh	r3, [r7, #14]
 8005292:	f043 0308 	orr.w	r3, r3, #8
 8005296:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005298:	89fb      	ldrh	r3, [r7, #14]

}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40020c00 	.word	0x40020c00

080052a8 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	801a      	strh	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	709a      	strb	r2, [r3, #2]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	70da      	strb	r2, [r3, #3]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	809a      	strh	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	80da      	strh	r2, [r3, #6]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	721a      	strb	r2, [r3, #8]
{

}
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7a1b      	ldrb	r3, [r3, #8]
 80052f0:	f083 0301 	eor.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80d6 	beq.w	80054a8 <_ZN10SideSensor12updateStatusEv+0x1c4>
		if(white_flag1 == false){
 80052fc:	4b6c      	ldr	r3, [pc, #432]	; (80054b0 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f083 0301 	eor.w	r3, r3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d032      	beq.n	8005370 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 800530a:	2104      	movs	r1, #4
 800530c:	4869      	ldr	r0, [pc, #420]	; (80054b4 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 800530e:	f005 feb5 	bl	800b07c <HAL_GPIO_ReadPin>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <_ZN10SideSensor12updateStatusEv+0x48>
 8005318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800531c:	4866      	ldr	r0, [pc, #408]	; (80054b8 <_ZN10SideSensor12updateStatusEv+0x1d4>)
 800531e:	f005 fead 	bl	800b07c <HAL_GPIO_ReadPin>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <_ZN10SideSensor12updateStatusEv+0x48>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <_ZN10SideSensor12updateStatusEv+0x4a>
 800532c:	2300      	movs	r3, #0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d006      	beq.n	8005340 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 8005332:	4b62      	ldr	r3, [pc, #392]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	4b60      	ldr	r3, [pc, #384]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	e002      	b.n	8005346 <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005340:	4b5e      	ldr	r3, [pc, #376]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005346:	4b5d      	ldr	r3, [pc, #372]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d941      	bls.n	80053d2 <_ZN10SideSensor12updateStatusEv+0xee>
				status_ |= 0x01;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 8005362:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8005364:	2201      	movs	r2, #1
 8005366:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005368:	4b54      	ldr	r3, [pc, #336]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800536a:	2200      	movs	r2, #0
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e030      	b.n	80053d2 <_ZN10SideSensor12updateStatusEv+0xee>
			}

		}
		else if(white_flag1 == true){
 8005370:	4b4f      	ldr	r3, [pc, #316]	; (80054b0 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d02c      	beq.n	80053d2 <_ZN10SideSensor12updateStatusEv+0xee>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 8005378:	2104      	movs	r1, #4
 800537a:	484e      	ldr	r0, [pc, #312]	; (80054b4 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 800537c:	f005 fe7e 	bl	800b07c <HAL_GPIO_ReadPin>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d006      	beq.n	800539e <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 8005390:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	4b48      	ldr	r3, [pc, #288]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	e002      	b.n	80053a4 <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 800539e:	4b47      	ldr	r3, [pc, #284]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80053a4:	4b45      	ldr	r3, [pc, #276]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d912      	bls.n	80053d2 <_ZN10SideSensor12updateStatusEv+0xee>
				status_ ^= 0x01;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	f083 0301 	eor.w	r3, r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80053c0:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	88db      	ldrh	r3, [r3, #6]
 80053ca:	3301      	adds	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	80da      	strh	r2, [r3, #6]
				//mon_cnt_r = white_line_cnt_r_;
			}
		}


		if(white_flag2 == false){
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f083 0301 	eor.w	r3, r3, #1
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d031      	beq.n	8005444 <_ZN10SideSensor12updateStatusEv+0x160>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 80053e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053e4:	4834      	ldr	r0, [pc, #208]	; (80054b8 <_ZN10SideSensor12updateStatusEv+0x1d4>)
 80053e6:	f005 fe49 	bl	800b07c <HAL_GPIO_ReadPin>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d108      	bne.n	8005402 <_ZN10SideSensor12updateStatusEv+0x11e>
 80053f0:	2104      	movs	r1, #4
 80053f2:	4830      	ldr	r0, [pc, #192]	; (80054b4 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80053f4:	f005 fe42 	bl	800b07c <HAL_GPIO_ReadPin>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <_ZN10SideSensor12updateStatusEv+0x11e>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <_ZN10SideSensor12updateStatusEv+0x120>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <_ZN10SideSensor12updateStatusEv+0x132>
				cnt_l++;
 8005408:	4b2e      	ldr	r3, [pc, #184]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	3301      	adds	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	4b2c      	ldr	r3, [pc, #176]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	e002      	b.n	800541c <_ZN10SideSensor12updateStatusEv+0x138>
			}
			else{
				cnt_l = 0;
 8005416:	4b2b      	ldr	r3, [pc, #172]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005418:	2200      	movs	r2, #0
 800541a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800541c:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d90f      	bls.n	8005444 <_ZN10SideSensor12updateStatusEv+0x160>
				status_ |= 0x02;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	f043 0302 	orr.w	r3, r3, #2
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005438:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005440:	2200      	movs	r2, #0
 8005442:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005444:	4b1e      	ldr	r3, [pc, #120]	; (80054c0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02d      	beq.n	80054a8 <_ZN10SideSensor12updateStatusEv+0x1c4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 800544c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005450:	4819      	ldr	r0, [pc, #100]	; (80054b8 <_ZN10SideSensor12updateStatusEv+0x1d4>)
 8005452:	f005 fe13 	bl	800b07c <HAL_GPIO_ReadPin>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d006      	beq.n	8005474 <_ZN10SideSensor12updateStatusEv+0x190>
				cnt_l++;
 8005466:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e002      	b.n	800547a <_ZN10SideSensor12updateStatusEv+0x196>
			}
			else{
				cnt_l = 0;
 8005474:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005476:	2200      	movs	r2, #0
 8005478:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	2b04      	cmp	r3, #4
 8005480:	d912      	bls.n	80054a8 <_ZN10SideSensor12updateStatusEv+0x1c4>
				status_ ^= 0x02;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	f083 0302 	eor.w	r3, r3, #2
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	889b      	ldrh	r3, [r3, #4]
 80054a0:	3301      	adds	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	809a      	strh	r2, [r3, #4]
		//mon_status = status_;
		//mon_status_L = status_L_;
		//mon_status_R = status_R_;
	}

}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000224 	.word	0x20000224
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40020c00 	.word	0x40020c00
 80054bc:	20000228 	.word	0x20000228
 80054c0:	20000225 	.word	0x20000225
 80054c4:	20000226 	.word	0x20000226

080054c8 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	return status_L_;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	789b      	ldrb	r3, [r3, #2]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	88db      	ldrh	r3, [r3, #6]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	80da      	strh	r2, [r3, #6]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	721a      	strb	r2, [r3, #8]
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	721a      	strb	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	7a1b      	ldrb	r3, [r3, #8]
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3308      	adds	r3, #8
 8005574:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005578:	2100      	movs	r1, #0
 800557a:	4618      	mov	r0, r3
 800557c:	f00f f81e 	bl	80145bc <memset>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005586:	811a      	strh	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800558e:	815a      	strh	r2, [r3, #10]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005596:	819a      	strh	r2, [r3, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800559e:	81da      	strh	r2, [r3, #14]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055a6:	821a      	strh	r2, [r3, #16]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ae:	825a      	strh	r2, [r3, #18]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	829a      	strh	r2, [r3, #20]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	82da      	strh	r2, [r3, #22]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	831a      	strh	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	835a      	strh	r2, [r3, #26]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	839a      	strh	r2, [r3, #28]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	83da      	strh	r2, [r3, #30]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	841a      	strh	r2, [r3, #32]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e0:	845a      	strh	r2, [r3, #34]	; 0x22
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	849a      	strh	r2, [r3, #36]	; 0x24
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ee:	84da      	strh	r2, [r3, #38]	; 0x26
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800560a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005612:	861a      	strh	r2, [r3, #48]	; 0x30
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	865a      	strh	r2, [r3, #50]	; 0x32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005626:	86da      	strh	r2, [r3, #54]	; 0x36
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800562e:	871a      	strh	r2, [r3, #56]	; 0x38
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005648:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800566a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800567c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005686:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800570a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005724:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005736:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005750:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005774:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005786:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005790:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ac:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057b6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ec:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057f6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005808:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800583a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005844:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005856:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005868:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005894:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058ae:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c0:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	609a      	str	r2, [r3, #8]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	611a      	str	r2, [r3, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	615a      	str	r2, [r3, #20]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	619a      	str	r2, [r3, #24]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	61da      	str	r2, [r3, #28]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	621a      	str	r2, [r3, #32]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	625a      	str	r2, [r3, #36]	; 0x24
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	639a      	str	r2, [r3, #56]	; 0x38

}
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	0000      	movs	r0, r0
 800598c:	0000      	movs	r0, r0
	...

08005990 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599c:	f107 020c 	add.w	r2, r7, #12
 80059a0:	f107 0110 	add.w	r1, r7, #16
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fb fe01 	bl	80015ac <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80059aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80059ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80059b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80059ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059be:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80059c2:	6978      	ldr	r0, [r7, #20]
 80059c4:	f7fa fdd8 	bl	8000578 <__aeabi_f2d>
 80059c8:	a30e      	add	r3, pc, #56	; (adr r3, 8005a04 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f7fa fe2b 	bl	8000628 <__aeabi_dmul>
 80059d2:	4603      	mov	r3, r0
 80059d4:	460c      	mov	r4, r1
 80059d6:	4618      	mov	r0, r3
 80059d8:	4621      	mov	r1, r4
 80059da:	f7fb f91d 	bl	8000c18 <__aeabi_d2f>
 80059de:	4602      	mov	r2, r0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 80059ea:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	ee07 3a90 	vmov	s15, r3
}
 80059f4:	eeb0 0a67 	vmov.f32	s0, s15
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd90      	pop	{r4, r7, pc}
 80059fe:	bf00      	nop
 8005a00:	2000022c 	.word	0x2000022c
 8005a04:	1ab1d998 	.word	0x1ab1d998
 8005a08:	3f7830b5 	.word	0x3f7830b5
 8005a0c:	00000000 	.word	0x00000000

08005a10 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	ed93 7a00 	vldr	s14, [r3]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a28:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005a36:	4b48      	ldr	r3, [pc, #288]	; (8005b58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a54:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005a58:	4b3f      	ldr	r3, [pc, #252]	; (8005b58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fd8b 	bl	8000578 <__aeabi_f2d>
 8005a62:	4604      	mov	r4, r0
 8005a64:	460d      	mov	r5, r1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	ed93 7a06 	vldr	s14, [r3, #24]
 8005a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a74:	ee17 0a90 	vmov	r0, s15
 8005a78:	f7fa fd7e 	bl	8000578 <__aeabi_f2d>
 8005a7c:	a334      	add	r3, pc, #208	; (adr r3, 8005b50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fdd1 	bl	8000628 <__aeabi_dmul>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	f7fa fc15 	bl	80002bc <__adddf3>
 8005a92:	4603      	mov	r3, r0
 8005a94:	460c      	mov	r4, r1
 8005a96:	4618      	mov	r0, r3
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f7fb f8bd 	bl	8000c18 <__aeabi_d2f>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	4b2d      	ldr	r3, [pc, #180]	; (8005b58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005aa2:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	ed93 7a05 	vldr	s14, [r3, #20]
 8005aaa:	4b2c      	ldr	r3, [pc, #176]	; (8005b5c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005aac:	edd3 7a00 	vldr	s15, [r3]
 8005ab0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ab4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abc:	ee17 0a90 	vmov	r0, s15
 8005ac0:	f7fa fd5a 	bl	8000578 <__aeabi_f2d>
 8005ac4:	a322      	add	r3, pc, #136	; (adr r3, 8005b50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fa fed7 	bl	800087c <__aeabi_ddiv>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	f7fb f89f 	bl	8000c18 <__aeabi_d2f>
 8005ada:	4603      	mov	r3, r0
 8005adc:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005ade:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ae2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ae6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aea:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005aec:	edd3 7a00 	vldr	s15, [r3]
 8005af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b0a:	ee17 0a90 	vmov	r0, s15
 8005b0e:	f7fa fd33 	bl	8000578 <__aeabi_f2d>
 8005b12:	4605      	mov	r5, r0
 8005b14:	460e      	mov	r6, r1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005b1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b24:	ee17 0a90 	vmov	r0, s15
 8005b28:	f7fa fd26 	bl	8000578 <__aeabi_f2d>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	ec43 2b11 	vmov	d1, r2, r3
 8005b34:	ec46 5b10 	vmov	d0, r5, r6
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f7ff f929 	bl	8004d90 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005b3e:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	6013      	str	r3, [r2, #0]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4c:	f3af 8000 	nop.w
 8005b50:	d2f1a9fc 	.word	0xd2f1a9fc
 8005b54:	3f50624d 	.word	0x3f50624d
 8005b58:	20000234 	.word	0x20000234
 8005b5c:	20000230 	.word	0x20000230

08005b60 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b6c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b94:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8005bc0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	615a      	str	r2, [r3, #20]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bee:	edc7 0a01 	vstr	s1, [r7, #4]
 8005bf2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff feb7 	bl	8005990 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff feef 	bl	8005a10 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005c90 <_ZN12VelocityCtrl4stopEv+0x30>
 8005c78:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005c90 <_ZN12VelocityCtrl4stopEv+0x30>
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff f887 	bl	8004d90 <_ZN5Motor8setRatioEdd>

}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w
	...

08005c98 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	ee07 3a90 	vmov	s15, r3
}
 8005ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005cca:	f001 fe0f 	bl	80078ec <cppFlip100ns>

		tim7_timer++;
 8005cce:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005cd6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d902      	bls.n	8005ce8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005ce2:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10e      	bne.n	8005d10 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005cf2:	f001 fdcb 	bl	800788c <cppFlip1ms>

		tim6_timer++;
 8005cf6:	4b16      	ldr	r3, [pc, #88]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005cfe:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d902      	bls.n	8005d10 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005d0a:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a0f      	ldr	r2, [pc, #60]	; (8005d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d10e      	bne.n	8005d38 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005d1a:	f001 fdf1 	bl	8007900 <cppFlip10ms>

		tim13_timer++;
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4a0c      	ldr	r2, [pc, #48]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d26:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a06      	ldr	r2, [pc, #24]	; (8005d48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d902      	bls.n	8005d38 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005d32:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
	}

}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40001400 	.word	0x40001400
 8005d44:	2004a794 	.word	0x2004a794
 8005d48:	0001869f 	.word	0x0001869f
 8005d4c:	40001000 	.word	0x40001000
 8005d50:	2004a750 	.word	0x2004a750
 8005d54:	40001c00 	.word	0x40001c00
 8005d58:	2004a798 	.word	0x2004a798

08005d5c <init>:

void init()
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005d60:	2201      	movs	r2, #1
 8005d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d66:	4808      	ldr	r0, [pc, #32]	; (8005d88 <init+0x2c>)
 8005d68:	f005 f9a0 	bl	800b0ac <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005d6c:	4807      	ldr	r0, [pc, #28]	; (8005d8c <init+0x30>)
 8005d6e:	f009 f868 	bl	800ee42 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005d72:	4807      	ldr	r0, [pc, #28]	; (8005d90 <init+0x34>)
 8005d74:	f009 f865 	bl	800ee42 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005d78:	4806      	ldr	r0, [pc, #24]	; (8005d94 <init+0x38>)
 8005d7a:	f009 f862 	bl	800ee42 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005d7e:	f001 fce3 	bl	8007748 <cppInit>

	//path_following_initialize();

}
 8005d82:	bf00      	nop
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	2004a87c 	.word	0x2004a87c
 8005d90:	2004aa20 	.word	0x2004aa20
 8005d94:	2004a79c 	.word	0x2004a79c

08005d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d9c:	f003 fe7e 	bl	8009a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005da0:	f000 f82a 	bl	8005df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005da4:	f000 fdbc 	bl	8006920 <MX_GPIO_Init>
  MX_DMA_Init();
 8005da8:	f000 fd8a 	bl	80068c0 <MX_DMA_Init>
  MX_I2C2_Init();
 8005dac:	f000 f9e8 	bl	8006180 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005db0:	f000 fa14 	bl	80061dc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005db4:	f000 fa32 	bl	800621c <MX_SPI2_Init>
  MX_TIM1_Init();
 8005db8:	f000 fa66 	bl	8006288 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005dbc:	f000 fb70 	bl	80064a0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005dc0:	f000 fc3c 	bl	800663c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005dc4:	f000 fd52 	bl	800686c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005dc8:	f00b f80e 	bl	8010de8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005dcc:	f000 fbcc 	bl	8006568 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005dd0:	f000 f9a8 	bl	8006124 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005dd4:	f000 fb00 	bl	80063d8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005dd8:	f000 fc88 	bl	80066ec <MX_TIM10_Init>
  MX_TIM11_Init();
 8005ddc:	f000 fcd4 	bl	8006788 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005de0:	f000 f898 	bl	8005f14 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005de4:	f000 fbf6 	bl	80065d4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005de8:	f000 fd1c 	bl	8006824 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005dec:	f7ff ffb6 	bl	8005d5c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005df0:	f001 fda6 	bl	8007940 <cppLoop>
 8005df4:	e7fc      	b.n	8005df0 <main+0x58>
	...

08005df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b0a4      	sub	sp, #144	; 0x90
 8005dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e02:	2234      	movs	r2, #52	; 0x34
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f00e fbd8 	bl	80145bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	60da      	str	r2, [r3, #12]
 8005e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e1c:	f107 030c 	add.w	r3, r7, #12
 8005e20:	223c      	movs	r2, #60	; 0x3c
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00e fbc9 	bl	80145bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <SystemClock_Config+0x114>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	4a36      	ldr	r2, [pc, #216]	; (8005f0c <SystemClock_Config+0x114>)
 8005e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e38:	6413      	str	r3, [r2, #64]	; 0x40
 8005e3a:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <SystemClock_Config+0x114>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e46:	2300      	movs	r3, #0
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <SystemClock_Config+0x118>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a30      	ldr	r2, [pc, #192]	; (8005f10 <SystemClock_Config+0x118>)
 8005e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4b2e      	ldr	r3, [pc, #184]	; (8005f10 <SystemClock_Config+0x118>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e5e:	607b      	str	r3, [r7, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e62:	2301      	movs	r3, #1
 8005e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e74:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005e76:	2308      	movs	r3, #8
 8005e78:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005e7a:	23b4      	movs	r3, #180	; 0xb4
 8005e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e80:	2302      	movs	r3, #2
 8005e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005e86:	2308      	movs	r3, #8
 8005e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e96:	4618      	mov	r0, r3
 8005e98:	f006 fd2a 	bl	800c8f0 <HAL_RCC_OscConfig>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005ea2:	f000 fe7f 	bl	8006ba4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005ea6:	f006 f8a5 	bl	800bff4 <HAL_PWREx_EnableOverDrive>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005eb0:	f000 fe78 	bl	8006ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005eb4:	230f      	movs	r3, #15
 8005eb6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005ec0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005ec4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eca:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ecc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ed0:	2105      	movs	r1, #5
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f006 f8de 	bl	800c094 <HAL_RCC_ClockConfig>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005ede:	f000 fe61 	bl	8006ba4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005ee2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005ee6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005eec:	2300      	movs	r3, #0
 8005eee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ef0:	f107 030c 	add.w	r3, r7, #12
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f006 fabd 	bl	800c474 <HAL_RCCEx_PeriphCLKConfig>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005f00:	f000 fe50 	bl	8006ba4 <Error_Handler>
  }
}
 8005f04:	bf00      	nop
 8005f06:	3790      	adds	r7, #144	; 0x90
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	40007000 	.word	0x40007000

08005f14 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005f26:	4b7c      	ldr	r3, [pc, #496]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f28:	4a7c      	ldr	r2, [pc, #496]	; (800611c <MX_ADC2_Init+0x208>)
 8005f2a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005f2c:	4b7a      	ldr	r3, [pc, #488]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f32:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005f34:	4b78      	ldr	r3, [pc, #480]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005f3a:	4b77      	ldr	r3, [pc, #476]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005f40:	4b75      	ldr	r3, [pc, #468]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005f46:	4b74      	ldr	r3, [pc, #464]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f4e:	4b72      	ldr	r3, [pc, #456]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f54:	4b70      	ldr	r3, [pc, #448]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f56:	4a72      	ldr	r2, [pc, #456]	; (8006120 <MX_ADC2_Init+0x20c>)
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f5a:	4b6f      	ldr	r3, [pc, #444]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005f60:	4b6d      	ldr	r3, [pc, #436]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f62:	220e      	movs	r2, #14
 8005f64:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005f66:	4b6c      	ldr	r3, [pc, #432]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f6e:	4b6a      	ldr	r3, [pc, #424]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005f74:	4868      	ldr	r0, [pc, #416]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f76:	f003 fe25 	bl	8009bc4 <HAL_ADC_Init>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005f80:	f000 fe10 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005f84:	230a      	movs	r3, #10
 8005f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005f8c:	2306      	movs	r3, #6
 8005f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f90:	463b      	mov	r3, r7
 8005f92:	4619      	mov	r1, r3
 8005f94:	4860      	ldr	r0, [pc, #384]	; (8006118 <MX_ADC2_Init+0x204>)
 8005f96:	f003 ff69 	bl	8009e6c <HAL_ADC_ConfigChannel>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005fa0:	f000 fe00 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005fa4:	230b      	movs	r3, #11
 8005fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fac:	463b      	mov	r3, r7
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4859      	ldr	r0, [pc, #356]	; (8006118 <MX_ADC2_Init+0x204>)
 8005fb2:	f003 ff5b 	bl	8009e6c <HAL_ADC_ConfigChannel>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005fbc:	f000 fdf2 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fc8:	463b      	mov	r3, r7
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4852      	ldr	r0, [pc, #328]	; (8006118 <MX_ADC2_Init+0x204>)
 8005fce:	f003 ff4d 	bl	8009e6c <HAL_ADC_ConfigChannel>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005fd8:	f000 fde4 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005fdc:	230d      	movs	r3, #13
 8005fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	484b      	ldr	r0, [pc, #300]	; (8006118 <MX_ADC2_Init+0x204>)
 8005fea:	f003 ff3f 	bl	8009e6c <HAL_ADC_ConfigChannel>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005ff4:	f000 fdd6 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005ffc:	2305      	movs	r3, #5
 8005ffe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006000:	463b      	mov	r3, r7
 8006002:	4619      	mov	r1, r3
 8006004:	4844      	ldr	r0, [pc, #272]	; (8006118 <MX_ADC2_Init+0x204>)
 8006006:	f003 ff31 	bl	8009e6c <HAL_ADC_ConfigChannel>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006010:	f000 fdc8 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006014:	2301      	movs	r3, #1
 8006016:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006018:	2306      	movs	r3, #6
 800601a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800601c:	463b      	mov	r3, r7
 800601e:	4619      	mov	r1, r3
 8006020:	483d      	ldr	r0, [pc, #244]	; (8006118 <MX_ADC2_Init+0x204>)
 8006022:	f003 ff23 	bl	8009e6c <HAL_ADC_ConfigChannel>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800602c:	f000 fdba 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006030:	2302      	movs	r3, #2
 8006032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006034:	2307      	movs	r3, #7
 8006036:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006038:	463b      	mov	r3, r7
 800603a:	4619      	mov	r1, r3
 800603c:	4836      	ldr	r0, [pc, #216]	; (8006118 <MX_ADC2_Init+0x204>)
 800603e:	f003 ff15 	bl	8009e6c <HAL_ADC_ConfigChannel>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006048:	f000 fdac 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800604c:	2303      	movs	r3, #3
 800604e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006050:	2308      	movs	r3, #8
 8006052:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006054:	463b      	mov	r3, r7
 8006056:	4619      	mov	r1, r3
 8006058:	482f      	ldr	r0, [pc, #188]	; (8006118 <MX_ADC2_Init+0x204>)
 800605a:	f003 ff07 	bl	8009e6c <HAL_ADC_ConfigChannel>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006064:	f000 fd9e 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006068:	2304      	movs	r3, #4
 800606a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800606c:	2309      	movs	r3, #9
 800606e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006070:	463b      	mov	r3, r7
 8006072:	4619      	mov	r1, r3
 8006074:	4828      	ldr	r0, [pc, #160]	; (8006118 <MX_ADC2_Init+0x204>)
 8006076:	f003 fef9 	bl	8009e6c <HAL_ADC_ConfigChannel>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006080:	f000 fd90 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006084:	2305      	movs	r3, #5
 8006086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006088:	230a      	movs	r3, #10
 800608a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800608c:	463b      	mov	r3, r7
 800608e:	4619      	mov	r1, r3
 8006090:	4821      	ldr	r0, [pc, #132]	; (8006118 <MX_ADC2_Init+0x204>)
 8006092:	f003 feeb 	bl	8009e6c <HAL_ADC_ConfigChannel>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800609c:	f000 fd82 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80060a0:	2306      	movs	r3, #6
 80060a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80060a4:	230b      	movs	r3, #11
 80060a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060a8:	463b      	mov	r3, r7
 80060aa:	4619      	mov	r1, r3
 80060ac:	481a      	ldr	r0, [pc, #104]	; (8006118 <MX_ADC2_Init+0x204>)
 80060ae:	f003 fedd 	bl	8009e6c <HAL_ADC_ConfigChannel>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80060b8:	f000 fd74 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80060bc:	2307      	movs	r3, #7
 80060be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80060c0:	230c      	movs	r3, #12
 80060c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060c4:	463b      	mov	r3, r7
 80060c6:	4619      	mov	r1, r3
 80060c8:	4813      	ldr	r0, [pc, #76]	; (8006118 <MX_ADC2_Init+0x204>)
 80060ca:	f003 fecf 	bl	8009e6c <HAL_ADC_ConfigChannel>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80060d4:	f000 fd66 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80060d8:	2308      	movs	r3, #8
 80060da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80060dc:	230d      	movs	r3, #13
 80060de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060e0:	463b      	mov	r3, r7
 80060e2:	4619      	mov	r1, r3
 80060e4:	480c      	ldr	r0, [pc, #48]	; (8006118 <MX_ADC2_Init+0x204>)
 80060e6:	f003 fec1 	bl	8009e6c <HAL_ADC_ConfigChannel>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80060f0:	f000 fd58 	bl	8006ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80060f4:	2309      	movs	r3, #9
 80060f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80060f8:	230e      	movs	r3, #14
 80060fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060fc:	463b      	mov	r3, r7
 80060fe:	4619      	mov	r1, r3
 8006100:	4805      	ldr	r0, [pc, #20]	; (8006118 <MX_ADC2_Init+0x204>)
 8006102:	f003 feb3 	bl	8009e6c <HAL_ADC_ConfigChannel>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800610c:	f000 fd4a 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	2004a620 	.word	0x2004a620
 800611c:	40012100 	.word	0x40012100
 8006120:	0f000001 	.word	0x0f000001

08006124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006128:	4b12      	ldr	r3, [pc, #72]	; (8006174 <MX_I2C1_Init+0x50>)
 800612a:	4a13      	ldr	r2, [pc, #76]	; (8006178 <MX_I2C1_Init+0x54>)
 800612c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800612e:	4b11      	ldr	r3, [pc, #68]	; (8006174 <MX_I2C1_Init+0x50>)
 8006130:	4a12      	ldr	r2, [pc, #72]	; (800617c <MX_I2C1_Init+0x58>)
 8006132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <MX_I2C1_Init+0x50>)
 8006136:	2200      	movs	r2, #0
 8006138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800613a:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <MX_I2C1_Init+0x50>)
 800613c:	2200      	movs	r2, #0
 800613e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006140:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <MX_I2C1_Init+0x50>)
 8006142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <MX_I2C1_Init+0x50>)
 800614a:	2200      	movs	r2, #0
 800614c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800614e:	4b09      	ldr	r3, [pc, #36]	; (8006174 <MX_I2C1_Init+0x50>)
 8006150:	2200      	movs	r2, #0
 8006152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <MX_I2C1_Init+0x50>)
 8006156:	2200      	movs	r2, #0
 8006158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <MX_I2C1_Init+0x50>)
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006160:	4804      	ldr	r0, [pc, #16]	; (8006174 <MX_I2C1_Init+0x50>)
 8006162:	f004 ffbd 	bl	800b0e0 <HAL_I2C_Init>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800616c:	f000 fd1a 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006170:	bf00      	nop
 8006172:	bd80      	pop	{r7, pc}
 8006174:	2004a668 	.word	0x2004a668
 8006178:	40005400 	.word	0x40005400
 800617c:	000186a0 	.word	0x000186a0

08006180 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <MX_I2C2_Init+0x50>)
 8006186:	4a13      	ldr	r2, [pc, #76]	; (80061d4 <MX_I2C2_Init+0x54>)
 8006188:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <MX_I2C2_Init+0x50>)
 800618c:	4a12      	ldr	r2, [pc, #72]	; (80061d8 <MX_I2C2_Init+0x58>)
 800618e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006190:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <MX_I2C2_Init+0x50>)
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006196:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <MX_I2C2_Init+0x50>)
 8006198:	2200      	movs	r2, #0
 800619a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <MX_I2C2_Init+0x50>)
 800619e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <MX_I2C2_Init+0x50>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <MX_I2C2_Init+0x50>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <MX_I2C2_Init+0x50>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <MX_I2C2_Init+0x50>)
 80061b8:	2280      	movs	r2, #128	; 0x80
 80061ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80061bc:	4804      	ldr	r0, [pc, #16]	; (80061d0 <MX_I2C2_Init+0x50>)
 80061be:	f004 ff8f 	bl	800b0e0 <HAL_I2C_Init>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80061c8:	f000 fcec 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80061cc:	bf00      	nop
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	2004a6fc 	.word	0x2004a6fc
 80061d4:	40005800 	.word	0x40005800
 80061d8:	000186a0 	.word	0x000186a0

080061dc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80061e0:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <MX_SDIO_SD_Init+0x38>)
 80061e2:	4a0d      	ldr	r2, [pc, #52]	; (8006218 <MX_SDIO_SD_Init+0x3c>)
 80061e4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <MX_SDIO_SD_Init+0x38>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80061ec:	4b09      	ldr	r3, [pc, #36]	; (8006214 <MX_SDIO_SD_Init+0x38>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <MX_SDIO_SD_Init+0x38>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <MX_SDIO_SD_Init+0x38>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <MX_SDIO_SD_Init+0x38>)
 8006200:	2200      	movs	r2, #0
 8006202:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <MX_SDIO_SD_Init+0x38>)
 8006206:	2204      	movs	r2, #4
 8006208:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800620a:	bf00      	nop
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	2004a8fc 	.word	0x2004a8fc
 8006218:	40012c00 	.word	0x40012c00

0800621c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006220:	4b17      	ldr	r3, [pc, #92]	; (8006280 <MX_SPI2_Init+0x64>)
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <MX_SPI2_Init+0x68>)
 8006224:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006226:	4b16      	ldr	r3, [pc, #88]	; (8006280 <MX_SPI2_Init+0x64>)
 8006228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800622c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800622e:	4b14      	ldr	r3, [pc, #80]	; (8006280 <MX_SPI2_Init+0x64>)
 8006230:	2200      	movs	r2, #0
 8006232:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <MX_SPI2_Init+0x64>)
 8006236:	2200      	movs	r2, #0
 8006238:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <MX_SPI2_Init+0x64>)
 800623c:	2202      	movs	r2, #2
 800623e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006240:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <MX_SPI2_Init+0x64>)
 8006242:	2201      	movs	r2, #1
 8006244:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006246:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <MX_SPI2_Init+0x64>)
 8006248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800624c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <MX_SPI2_Init+0x64>)
 8006250:	2220      	movs	r2, #32
 8006252:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <MX_SPI2_Init+0x64>)
 8006256:	2200      	movs	r2, #0
 8006258:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <MX_SPI2_Init+0x64>)
 800625c:	2200      	movs	r2, #0
 800625e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006260:	4b07      	ldr	r3, [pc, #28]	; (8006280 <MX_SPI2_Init+0x64>)
 8006262:	2200      	movs	r2, #0
 8006264:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <MX_SPI2_Init+0x64>)
 8006268:	220a      	movs	r2, #10
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800626c:	4804      	ldr	r0, [pc, #16]	; (8006280 <MX_SPI2_Init+0x64>)
 800626e:	f008 f869 	bl	800e344 <HAL_SPI_Init>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006278:	f000 fc94 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800627c:	bf00      	nop
 800627e:	bd80      	pop	{r7, pc}
 8006280:	2004a548 	.word	0x2004a548
 8006284:	40003800 	.word	0x40003800

08006288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b09a      	sub	sp, #104	; 0x68
 800628c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800628e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006292:	2224      	movs	r2, #36	; 0x24
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f00e f990 	bl	80145bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800629c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062a6:	f107 0320 	add.w	r3, r7, #32
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	605a      	str	r2, [r3, #4]
 80062b0:	609a      	str	r2, [r3, #8]
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	611a      	str	r2, [r3, #16]
 80062b6:	615a      	str	r2, [r3, #20]
 80062b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80062ba:	463b      	mov	r3, r7
 80062bc:	2220      	movs	r2, #32
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f00e f97b 	bl	80145bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80062c6:	4b42      	ldr	r3, [pc, #264]	; (80063d0 <MX_TIM1_Init+0x148>)
 80062c8:	4a42      	ldr	r2, [pc, #264]	; (80063d4 <MX_TIM1_Init+0x14c>)
 80062ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80062cc:	4b40      	ldr	r3, [pc, #256]	; (80063d0 <MX_TIM1_Init+0x148>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062d2:	4b3f      	ldr	r3, [pc, #252]	; (80063d0 <MX_TIM1_Init+0x148>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80062d8:	4b3d      	ldr	r3, [pc, #244]	; (80063d0 <MX_TIM1_Init+0x148>)
 80062da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <MX_TIM1_Init+0x148>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80062e6:	4b3a      	ldr	r3, [pc, #232]	; (80063d0 <MX_TIM1_Init+0x148>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062ec:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <MX_TIM1_Init+0x148>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80062f2:	4837      	ldr	r0, [pc, #220]	; (80063d0 <MX_TIM1_Init+0x148>)
 80062f4:	f008 fdc9 	bl	800ee8a <HAL_TIM_PWM_Init>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80062fe:	f000 fc51 	bl	8006ba4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006302:	2303      	movs	r3, #3
 8006304:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006306:	2300      	movs	r3, #0
 8006308:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800630a:	2301      	movs	r3, #1
 800630c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800630e:	2300      	movs	r3, #0
 8006310:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006316:	2300      	movs	r3, #0
 8006318:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800631a:	2301      	movs	r3, #1
 800631c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800631e:	2300      	movs	r3, #0
 8006320:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006326:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800632a:	4619      	mov	r1, r3
 800632c:	4828      	ldr	r0, [pc, #160]	; (80063d0 <MX_TIM1_Init+0x148>)
 800632e:	f008 fe15 	bl	800ef5c <HAL_TIM_Encoder_Init>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006338:	f000 fc34 	bl	8006ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800633c:	2300      	movs	r3, #0
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006340:	2300      	movs	r3, #0
 8006342:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006348:	4619      	mov	r1, r3
 800634a:	4821      	ldr	r0, [pc, #132]	; (80063d0 <MX_TIM1_Init+0x148>)
 800634c:	f009 fb3c 	bl	800f9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006356:	f000 fc25 	bl	8006ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800635a:	2360      	movs	r3, #96	; 0x60
 800635c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006362:	2300      	movs	r3, #0
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006366:	2300      	movs	r3, #0
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800636a:	2300      	movs	r3, #0
 800636c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800636e:	2300      	movs	r3, #0
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006372:	2300      	movs	r3, #0
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006376:	f107 0320 	add.w	r3, r7, #32
 800637a:	2208      	movs	r2, #8
 800637c:	4619      	mov	r1, r3
 800637e:	4814      	ldr	r0, [pc, #80]	; (80063d0 <MX_TIM1_Init+0x148>)
 8006380:	f008 ffbe 	bl	800f300 <HAL_TIM_PWM_ConfigChannel>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800638a:	f000 fc0b 	bl	8006ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800638e:	2300      	movs	r3, #0
 8006390:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006392:	2300      	movs	r3, #0
 8006394:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006396:	2300      	movs	r3, #0
 8006398:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063ac:	463b      	mov	r3, r7
 80063ae:	4619      	mov	r1, r3
 80063b0:	4807      	ldr	r0, [pc, #28]	; (80063d0 <MX_TIM1_Init+0x148>)
 80063b2:	f009 fb85 	bl	800fac0 <HAL_TIMEx_ConfigBreakDeadTime>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80063bc:	f000 fbf2 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80063c0:	4803      	ldr	r0, [pc, #12]	; (80063d0 <MX_TIM1_Init+0x148>)
 80063c2:	f000 ffdf 	bl	8007384 <HAL_TIM_MspPostInit>

}
 80063c6:	bf00      	nop
 80063c8:	3768      	adds	r7, #104	; 0x68
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2004a8bc 	.word	0x2004a8bc
 80063d4:	40010000 	.word	0x40010000

080063d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063de:	f107 0320 	add.w	r3, r7, #32
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	609a      	str	r2, [r3, #8]
 80063f2:	60da      	str	r2, [r3, #12]
 80063f4:	611a      	str	r2, [r3, #16]
 80063f6:	615a      	str	r2, [r3, #20]
 80063f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80063fa:	4b27      	ldr	r3, [pc, #156]	; (8006498 <MX_TIM3_Init+0xc0>)
 80063fc:	4a27      	ldr	r2, [pc, #156]	; (800649c <MX_TIM3_Init+0xc4>)
 80063fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006400:	4b25      	ldr	r3, [pc, #148]	; (8006498 <MX_TIM3_Init+0xc0>)
 8006402:	2201      	movs	r2, #1
 8006404:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <MX_TIM3_Init+0xc0>)
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 800640c:	4b22      	ldr	r3, [pc, #136]	; (8006498 <MX_TIM3_Init+0xc0>)
 800640e:	f241 1293 	movw	r2, #4499	; 0x1193
 8006412:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006414:	4b20      	ldr	r3, [pc, #128]	; (8006498 <MX_TIM3_Init+0xc0>)
 8006416:	2200      	movs	r2, #0
 8006418:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800641a:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <MX_TIM3_Init+0xc0>)
 800641c:	2200      	movs	r2, #0
 800641e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006420:	481d      	ldr	r0, [pc, #116]	; (8006498 <MX_TIM3_Init+0xc0>)
 8006422:	f008 fd32 	bl	800ee8a <HAL_TIM_PWM_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800642c:	f000 fbba 	bl	8006ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006430:	2300      	movs	r3, #0
 8006432:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006434:	2300      	movs	r3, #0
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006438:	f107 0320 	add.w	r3, r7, #32
 800643c:	4619      	mov	r1, r3
 800643e:	4816      	ldr	r0, [pc, #88]	; (8006498 <MX_TIM3_Init+0xc0>)
 8006440:	f009 fac2 	bl	800f9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800644a:	f000 fbab 	bl	8006ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800644e:	2360      	movs	r3, #96	; 0x60
 8006450:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	2200      	movs	r2, #0
 8006462:	4619      	mov	r1, r3
 8006464:	480c      	ldr	r0, [pc, #48]	; (8006498 <MX_TIM3_Init+0xc0>)
 8006466:	f008 ff4b 	bl	800f300 <HAL_TIM_PWM_ConfigChannel>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006470:	f000 fb98 	bl	8006ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	2204      	movs	r2, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4807      	ldr	r0, [pc, #28]	; (8006498 <MX_TIM3_Init+0xc0>)
 800647c:	f008 ff40 	bl	800f300 <HAL_TIM_PWM_ConfigChannel>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006486:	f000 fb8d 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800648a:	4803      	ldr	r0, [pc, #12]	; (8006498 <MX_TIM3_Init+0xc0>)
 800648c:	f000 ff7a 	bl	8007384 <HAL_TIM_MspPostInit>

}
 8006490:	bf00      	nop
 8006492:	3728      	adds	r7, #40	; 0x28
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	2004a754 	.word	0x2004a754
 800649c:	40000400 	.word	0x40000400

080064a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064a6:	f107 0320 	add.w	r3, r7, #32
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064b0:	1d3b      	adds	r3, r7, #4
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	605a      	str	r2, [r3, #4]
 80064b8:	609a      	str	r2, [r3, #8]
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	611a      	str	r2, [r3, #16]
 80064be:	615a      	str	r2, [r3, #20]
 80064c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80064c2:	4b27      	ldr	r3, [pc, #156]	; (8006560 <MX_TIM4_Init+0xc0>)
 80064c4:	4a27      	ldr	r2, [pc, #156]	; (8006564 <MX_TIM4_Init+0xc4>)
 80064c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80064c8:	4b25      	ldr	r3, [pc, #148]	; (8006560 <MX_TIM4_Init+0xc0>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064ce:	4b24      	ldr	r3, [pc, #144]	; (8006560 <MX_TIM4_Init+0xc0>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80064d4:	4b22      	ldr	r3, [pc, #136]	; (8006560 <MX_TIM4_Init+0xc0>)
 80064d6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80064da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064dc:	4b20      	ldr	r3, [pc, #128]	; (8006560 <MX_TIM4_Init+0xc0>)
 80064de:	2200      	movs	r2, #0
 80064e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064e2:	4b1f      	ldr	r3, [pc, #124]	; (8006560 <MX_TIM4_Init+0xc0>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80064e8:	481d      	ldr	r0, [pc, #116]	; (8006560 <MX_TIM4_Init+0xc0>)
 80064ea:	f008 fcce 	bl	800ee8a <HAL_TIM_PWM_Init>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80064f4:	f000 fb56 	bl	8006ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064f8:	2300      	movs	r3, #0
 80064fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006500:	f107 0320 	add.w	r3, r7, #32
 8006504:	4619      	mov	r1, r3
 8006506:	4816      	ldr	r0, [pc, #88]	; (8006560 <MX_TIM4_Init+0xc0>)
 8006508:	f009 fa5e 	bl	800f9c8 <HAL_TIMEx_MasterConfigSynchronization>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006512:	f000 fb47 	bl	8006ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006516:	2360      	movs	r3, #96	; 0x60
 8006518:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006526:	1d3b      	adds	r3, r7, #4
 8006528:	2208      	movs	r2, #8
 800652a:	4619      	mov	r1, r3
 800652c:	480c      	ldr	r0, [pc, #48]	; (8006560 <MX_TIM4_Init+0xc0>)
 800652e:	f008 fee7 	bl	800f300 <HAL_TIM_PWM_ConfigChannel>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006538:	f000 fb34 	bl	8006ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800653c:	1d3b      	adds	r3, r7, #4
 800653e:	220c      	movs	r2, #12
 8006540:	4619      	mov	r1, r3
 8006542:	4807      	ldr	r0, [pc, #28]	; (8006560 <MX_TIM4_Init+0xc0>)
 8006544:	f008 fedc 	bl	800f300 <HAL_TIM_PWM_ConfigChannel>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800654e:	f000 fb29 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006552:	4803      	ldr	r0, [pc, #12]	; (8006560 <MX_TIM4_Init+0xc0>)
 8006554:	f000 ff16 	bl	8007384 <HAL_TIM_MspPostInit>

}
 8006558:	bf00      	nop
 800655a:	3728      	adds	r7, #40	; 0x28
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	2004a5e0 	.word	0x2004a5e0
 8006564:	40000800 	.word	0x40000800

08006568 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800656e:	463b      	mov	r3, r7
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006576:	4b15      	ldr	r3, [pc, #84]	; (80065cc <MX_TIM6_Init+0x64>)
 8006578:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <MX_TIM6_Init+0x68>)
 800657a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <MX_TIM6_Init+0x64>)
 800657e:	2259      	movs	r2, #89	; 0x59
 8006580:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <MX_TIM6_Init+0x64>)
 8006584:	2200      	movs	r2, #0
 8006586:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006588:	4b10      	ldr	r3, [pc, #64]	; (80065cc <MX_TIM6_Init+0x64>)
 800658a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800658e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006590:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <MX_TIM6_Init+0x64>)
 8006592:	2280      	movs	r2, #128	; 0x80
 8006594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006596:	480d      	ldr	r0, [pc, #52]	; (80065cc <MX_TIM6_Init+0x64>)
 8006598:	f008 fc28 	bl	800edec <HAL_TIM_Base_Init>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80065a2:	f000 faff 	bl	8006ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065a6:	2300      	movs	r3, #0
 80065a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80065ae:	463b      	mov	r3, r7
 80065b0:	4619      	mov	r1, r3
 80065b2:	4806      	ldr	r0, [pc, #24]	; (80065cc <MX_TIM6_Init+0x64>)
 80065b4:	f009 fa08 	bl	800f9c8 <HAL_TIMEx_MasterConfigSynchronization>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80065be:	f000 faf1 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	2004a87c 	.word	0x2004a87c
 80065d0:	40001000 	.word	0x40001000

080065d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065da:	463b      	mov	r3, r7
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80065e2:	4b14      	ldr	r3, [pc, #80]	; (8006634 <MX_TIM7_Init+0x60>)
 80065e4:	4a14      	ldr	r2, [pc, #80]	; (8006638 <MX_TIM7_Init+0x64>)
 80065e6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80065e8:	4b12      	ldr	r3, [pc, #72]	; (8006634 <MX_TIM7_Init+0x60>)
 80065ea:	22b3      	movs	r2, #179	; 0xb3
 80065ec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065ee:	4b11      	ldr	r3, [pc, #68]	; (8006634 <MX_TIM7_Init+0x60>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80065f4:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <MX_TIM7_Init+0x60>)
 80065f6:	2231      	movs	r2, #49	; 0x31
 80065f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80065fa:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <MX_TIM7_Init+0x60>)
 80065fc:	2280      	movs	r2, #128	; 0x80
 80065fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006600:	480c      	ldr	r0, [pc, #48]	; (8006634 <MX_TIM7_Init+0x60>)
 8006602:	f008 fbf3 	bl	800edec <HAL_TIM_Base_Init>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800660c:	f000 faca 	bl	8006ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006610:	2300      	movs	r3, #0
 8006612:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006614:	2300      	movs	r3, #0
 8006616:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006618:	463b      	mov	r3, r7
 800661a:	4619      	mov	r1, r3
 800661c:	4805      	ldr	r0, [pc, #20]	; (8006634 <MX_TIM7_Init+0x60>)
 800661e:	f009 f9d3 	bl	800f9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006628:	f000 fabc 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	2004aa20 	.word	0x2004aa20
 8006638:	40001400 	.word	0x40001400

0800663c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08c      	sub	sp, #48	; 0x30
 8006640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006642:	f107 030c 	add.w	r3, r7, #12
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	2100      	movs	r1, #0
 800664a:	4618      	mov	r0, r3
 800664c:	f00d ffb6 	bl	80145bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006650:	1d3b      	adds	r3, r7, #4
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006658:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <MX_TIM8_Init+0xa8>)
 800665a:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <MX_TIM8_Init+0xac>)
 800665c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800665e:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <MX_TIM8_Init+0xa8>)
 8006660:	2200      	movs	r2, #0
 8006662:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006664:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <MX_TIM8_Init+0xa8>)
 8006666:	2210      	movs	r2, #16
 8006668:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800666a:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <MX_TIM8_Init+0xa8>)
 800666c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006670:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <MX_TIM8_Init+0xa8>)
 8006674:	2200      	movs	r2, #0
 8006676:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006678:	4b1a      	ldr	r3, [pc, #104]	; (80066e4 <MX_TIM8_Init+0xa8>)
 800667a:	2200      	movs	r2, #0
 800667c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800667e:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <MX_TIM8_Init+0xa8>)
 8006680:	2200      	movs	r2, #0
 8006682:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006684:	2303      	movs	r3, #3
 8006686:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006688:	2300      	movs	r3, #0
 800668a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800668c:	2301      	movs	r3, #1
 800668e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006698:	2300      	movs	r3, #0
 800669a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800669c:	2301      	movs	r3, #1
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80066a0:	2300      	movs	r3, #0
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80066a8:	f107 030c 	add.w	r3, r7, #12
 80066ac:	4619      	mov	r1, r3
 80066ae:	480d      	ldr	r0, [pc, #52]	; (80066e4 <MX_TIM8_Init+0xa8>)
 80066b0:	f008 fc54 	bl	800ef5c <HAL_TIM_Encoder_Init>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80066ba:	f000 fa73 	bl	8006ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066be:	2300      	movs	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4806      	ldr	r0, [pc, #24]	; (80066e4 <MX_TIM8_Init+0xa8>)
 80066cc:	f009 f97c 	bl	800f9c8 <HAL_TIMEx_MasterConfigSynchronization>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80066d6:	f000 fa65 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80066da:	bf00      	nop
 80066dc:	3730      	adds	r7, #48	; 0x30
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	2004a5a0 	.word	0x2004a5a0
 80066e8:	40010400 	.word	0x40010400

080066ec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	60da      	str	r2, [r3, #12]
 80066fe:	611a      	str	r2, [r3, #16]
 8006700:	615a      	str	r2, [r3, #20]
 8006702:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006704:	4b1e      	ldr	r3, [pc, #120]	; (8006780 <MX_TIM10_Init+0x94>)
 8006706:	4a1f      	ldr	r2, [pc, #124]	; (8006784 <MX_TIM10_Init+0x98>)
 8006708:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 800670a:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <MX_TIM10_Init+0x94>)
 800670c:	2201      	movs	r2, #1
 800670e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006710:	4b1b      	ldr	r3, [pc, #108]	; (8006780 <MX_TIM10_Init+0x94>)
 8006712:	2200      	movs	r2, #0
 8006714:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006716:	4b1a      	ldr	r3, [pc, #104]	; (8006780 <MX_TIM10_Init+0x94>)
 8006718:	f242 3227 	movw	r2, #8999	; 0x2327
 800671c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800671e:	4b18      	ldr	r3, [pc, #96]	; (8006780 <MX_TIM10_Init+0x94>)
 8006720:	2200      	movs	r2, #0
 8006722:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <MX_TIM10_Init+0x94>)
 8006726:	2200      	movs	r2, #0
 8006728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800672a:	4815      	ldr	r0, [pc, #84]	; (8006780 <MX_TIM10_Init+0x94>)
 800672c:	f008 fb5e 	bl	800edec <HAL_TIM_Base_Init>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006736:	f000 fa35 	bl	8006ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800673a:	4811      	ldr	r0, [pc, #68]	; (8006780 <MX_TIM10_Init+0x94>)
 800673c:	f008 fba5 	bl	800ee8a <HAL_TIM_PWM_Init>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006746:	f000 fa2d 	bl	8006ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800674a:	2360      	movs	r3, #96	; 0x60
 800674c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	2200      	movs	r2, #0
 800675e:	4619      	mov	r1, r3
 8006760:	4807      	ldr	r0, [pc, #28]	; (8006780 <MX_TIM10_Init+0x94>)
 8006762:	f008 fdcd 	bl	800f300 <HAL_TIM_PWM_ConfigChannel>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800676c:	f000 fa1a 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006770:	4803      	ldr	r0, [pc, #12]	; (8006780 <MX_TIM10_Init+0x94>)
 8006772:	f000 fe07 	bl	8007384 <HAL_TIM_MspPostInit>

}
 8006776:	bf00      	nop
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	2004a6bc 	.word	0x2004a6bc
 8006784:	40014400 	.word	0x40014400

08006788 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800678e:	1d3b      	adds	r3, r7, #4
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	611a      	str	r2, [r3, #16]
 800679c:	615a      	str	r2, [r3, #20]
 800679e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80067a0:	4b1e      	ldr	r3, [pc, #120]	; (800681c <MX_TIM11_Init+0x94>)
 80067a2:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <MX_TIM11_Init+0x98>)
 80067a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 80067a6:	4b1d      	ldr	r3, [pc, #116]	; (800681c <MX_TIM11_Init+0x94>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <MX_TIM11_Init+0x94>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80067b2:	4b1a      	ldr	r3, [pc, #104]	; (800681c <MX_TIM11_Init+0x94>)
 80067b4:	f242 3227 	movw	r2, #8999	; 0x2327
 80067b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <MX_TIM11_Init+0x94>)
 80067bc:	2200      	movs	r2, #0
 80067be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067c0:	4b16      	ldr	r3, [pc, #88]	; (800681c <MX_TIM11_Init+0x94>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80067c6:	4815      	ldr	r0, [pc, #84]	; (800681c <MX_TIM11_Init+0x94>)
 80067c8:	f008 fb10 	bl	800edec <HAL_TIM_Base_Init>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80067d2:	f000 f9e7 	bl	8006ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80067d6:	4811      	ldr	r0, [pc, #68]	; (800681c <MX_TIM11_Init+0x94>)
 80067d8:	f008 fb57 	bl	800ee8a <HAL_TIM_PWM_Init>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80067e2:	f000 f9df 	bl	8006ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067e6:	2360      	movs	r3, #96	; 0x60
 80067e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067f6:	1d3b      	adds	r3, r7, #4
 80067f8:	2200      	movs	r2, #0
 80067fa:	4619      	mov	r1, r3
 80067fc:	4807      	ldr	r0, [pc, #28]	; (800681c <MX_TIM11_Init+0x94>)
 80067fe:	f008 fd7f 	bl	800f300 <HAL_TIM_PWM_ConfigChannel>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006808:	f000 f9cc 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800680c:	4803      	ldr	r0, [pc, #12]	; (800681c <MX_TIM11_Init+0x94>)
 800680e:	f000 fdb9 	bl	8007384 <HAL_TIM_MspPostInit>

}
 8006812:	bf00      	nop
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	2004a7dc 	.word	0x2004a7dc
 8006820:	40014800 	.word	0x40014800

08006824 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006828:	4b0e      	ldr	r3, [pc, #56]	; (8006864 <MX_TIM13_Init+0x40>)
 800682a:	4a0f      	ldr	r2, [pc, #60]	; (8006868 <MX_TIM13_Init+0x44>)
 800682c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <MX_TIM13_Init+0x40>)
 8006830:	2259      	movs	r2, #89	; 0x59
 8006832:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <MX_TIM13_Init+0x40>)
 8006836:	2200      	movs	r2, #0
 8006838:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800683a:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <MX_TIM13_Init+0x40>)
 800683c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006840:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006842:	4b08      	ldr	r3, [pc, #32]	; (8006864 <MX_TIM13_Init+0x40>)
 8006844:	2200      	movs	r2, #0
 8006846:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <MX_TIM13_Init+0x40>)
 800684a:	2280      	movs	r2, #128	; 0x80
 800684c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800684e:	4805      	ldr	r0, [pc, #20]	; (8006864 <MX_TIM13_Init+0x40>)
 8006850:	f008 facc 	bl	800edec <HAL_TIM_Base_Init>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800685a:	f000 f9a3 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800685e:	bf00      	nop
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	2004a79c 	.word	0x2004a79c
 8006868:	40001c00 	.word	0x40001c00

0800686c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006870:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 8006872:	4a12      	ldr	r2, [pc, #72]	; (80068bc <MX_USART2_UART_Init+0x50>)
 8006874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 8006878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800687c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800687e:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 8006880:	2200      	movs	r2, #0
 8006882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 8006886:	2200      	movs	r2, #0
 8006888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800688a:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 800688c:	2200      	movs	r2, #0
 800688e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006890:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 8006892:	220c      	movs	r2, #12
 8006894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 8006898:	2200      	movs	r2, #0
 800689a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 800689e:	2200      	movs	r2, #0
 80068a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068a2:	4805      	ldr	r0, [pc, #20]	; (80068b8 <MX_USART2_UART_Init+0x4c>)
 80068a4:	f009 f972 	bl	800fb8c <HAL_UART_Init>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80068ae:	f000 f979 	bl	8006ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068b2:	bf00      	nop
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	2004a980 	.word	0x2004a980
 80068bc:	40004400 	.word	0x40004400

080068c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <MX_DMA_Init+0x5c>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	4a13      	ldr	r2, [pc, #76]	; (800691c <MX_DMA_Init+0x5c>)
 80068d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068d4:	6313      	str	r3, [r2, #48]	; 0x30
 80068d6:	4b11      	ldr	r3, [pc, #68]	; (800691c <MX_DMA_Init+0x5c>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80068e2:	2200      	movs	r2, #0
 80068e4:	2100      	movs	r1, #0
 80068e6:	203a      	movs	r0, #58	; 0x3a
 80068e8:	f003 fe4b 	bl	800a582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80068ec:	203a      	movs	r0, #58	; 0x3a
 80068ee:	f003 fe64 	bl	800a5ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	203b      	movs	r0, #59	; 0x3b
 80068f8:	f003 fe43 	bl	800a582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80068fc:	203b      	movs	r0, #59	; 0x3b
 80068fe:	f003 fe5c 	bl	800a5ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006902:	2200      	movs	r2, #0
 8006904:	2100      	movs	r1, #0
 8006906:	2045      	movs	r0, #69	; 0x45
 8006908:	f003 fe3b 	bl	800a582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800690c:	2045      	movs	r0, #69	; 0x45
 800690e:	f003 fe54 	bl	800a5ba <HAL_NVIC_EnableIRQ>

}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	40023800 	.word	0x40023800

08006920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08c      	sub	sp, #48	; 0x30
 8006924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006926:	f107 031c 	add.w	r3, r7, #28
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	609a      	str	r2, [r3, #8]
 8006932:	60da      	str	r2, [r3, #12]
 8006934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006936:	2300      	movs	r3, #0
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	4b94      	ldr	r3, [pc, #592]	; (8006b8c <MX_GPIO_Init+0x26c>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	4a93      	ldr	r2, [pc, #588]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006940:	f043 0310 	orr.w	r3, r3, #16
 8006944:	6313      	str	r3, [r2, #48]	; 0x30
 8006946:	4b91      	ldr	r3, [pc, #580]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	4b8d      	ldr	r3, [pc, #564]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	4a8c      	ldr	r2, [pc, #560]	; (8006b8c <MX_GPIO_Init+0x26c>)
 800695c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006960:	6313      	str	r3, [r2, #48]	; 0x30
 8006962:	4b8a      	ldr	r3, [pc, #552]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800696e:	2300      	movs	r3, #0
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	4b86      	ldr	r3, [pc, #536]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	4a85      	ldr	r2, [pc, #532]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006978:	f043 0304 	orr.w	r3, r3, #4
 800697c:	6313      	str	r3, [r2, #48]	; 0x30
 800697e:	4b83      	ldr	r3, [pc, #524]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	4b7f      	ldr	r3, [pc, #508]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	4a7e      	ldr	r2, [pc, #504]	; (8006b8c <MX_GPIO_Init+0x26c>)
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	6313      	str	r3, [r2, #48]	; 0x30
 800699a:	4b7c      	ldr	r3, [pc, #496]	; (8006b8c <MX_GPIO_Init+0x26c>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069a6:	2300      	movs	r3, #0
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	4b78      	ldr	r3, [pc, #480]	; (8006b8c <MX_GPIO_Init+0x26c>)
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	4a77      	ldr	r2, [pc, #476]	; (8006b8c <MX_GPIO_Init+0x26c>)
 80069b0:	f043 0302 	orr.w	r3, r3, #2
 80069b4:	6313      	str	r3, [r2, #48]	; 0x30
 80069b6:	4b75      	ldr	r3, [pc, #468]	; (8006b8c <MX_GPIO_Init+0x26c>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	60bb      	str	r3, [r7, #8]
 80069c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80069c2:	2300      	movs	r3, #0
 80069c4:	607b      	str	r3, [r7, #4]
 80069c6:	4b71      	ldr	r3, [pc, #452]	; (8006b8c <MX_GPIO_Init+0x26c>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	4a70      	ldr	r2, [pc, #448]	; (8006b8c <MX_GPIO_Init+0x26c>)
 80069cc:	f043 0308 	orr.w	r3, r3, #8
 80069d0:	6313      	str	r3, [r2, #48]	; 0x30
 80069d2:	4b6e      	ldr	r3, [pc, #440]	; (8006b8c <MX_GPIO_Init+0x26c>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80069de:	2200      	movs	r2, #0
 80069e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069e4:	486a      	ldr	r0, [pc, #424]	; (8006b90 <MX_GPIO_Init+0x270>)
 80069e6:	f004 fb61 	bl	800b0ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80069ea:	2200      	movs	r2, #0
 80069ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069f0:	4868      	ldr	r0, [pc, #416]	; (8006b94 <MX_GPIO_Init+0x274>)
 80069f2:	f004 fb5b 	bl	800b0ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80069f6:	2200      	movs	r2, #0
 80069f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80069fc:	4866      	ldr	r0, [pc, #408]	; (8006b98 <MX_GPIO_Init+0x278>)
 80069fe:	f004 fb55 	bl	800b0ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006a02:	2200      	movs	r2, #0
 8006a04:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006a08:	4864      	ldr	r0, [pc, #400]	; (8006b9c <MX_GPIO_Init+0x27c>)
 8006a0a:	f004 fb4f 	bl	800b0ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a0e:	2304      	movs	r3, #4
 8006a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a12:	2300      	movs	r3, #0
 8006a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a1a:	f107 031c 	add.w	r3, r7, #28
 8006a1e:	4619      	mov	r1, r3
 8006a20:	485b      	ldr	r0, [pc, #364]	; (8006b90 <MX_GPIO_Init+0x270>)
 8006a22:	f004 f981 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006a26:	230f      	movs	r3, #15
 8006a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a32:	f107 031c 	add.w	r3, r7, #28
 8006a36:	4619      	mov	r1, r3
 8006a38:	4859      	ldr	r0, [pc, #356]	; (8006ba0 <MX_GPIO_Init+0x280>)
 8006a3a:	f004 f975 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006a3e:	23e1      	movs	r3, #225	; 0xe1
 8006a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a42:	2303      	movs	r3, #3
 8006a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a4a:	f107 031c 	add.w	r3, r7, #28
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4852      	ldr	r0, [pc, #328]	; (8006b9c <MX_GPIO_Init+0x27c>)
 8006a52:	f004 f969 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006a56:	2303      	movs	r3, #3
 8006a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a62:	f107 031c 	add.w	r3, r7, #28
 8006a66:	4619      	mov	r1, r3
 8006a68:	484a      	ldr	r0, [pc, #296]	; (8006b94 <MX_GPIO_Init+0x274>)
 8006a6a:	f004 f95d 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a6e:	2304      	movs	r3, #4
 8006a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a72:	2300      	movs	r3, #0
 8006a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a76:	2301      	movs	r3, #1
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a7a:	f107 031c 	add.w	r3, r7, #28
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4844      	ldr	r0, [pc, #272]	; (8006b94 <MX_GPIO_Init+0x274>)
 8006a82:	f004 f951 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006a86:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a90:	2301      	movs	r3, #1
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a94:	f107 031c 	add.w	r3, r7, #28
 8006a98:	4619      	mov	r1, r3
 8006a9a:	483d      	ldr	r0, [pc, #244]	; (8006b90 <MX_GPIO_Init+0x270>)
 8006a9c:	f004 f944 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006aa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ab2:	f107 031c 	add.w	r3, r7, #28
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4835      	ldr	r0, [pc, #212]	; (8006b90 <MX_GPIO_Init+0x270>)
 8006aba:	f004 f935 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006acc:	2300      	movs	r3, #0
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ad0:	f107 031c 	add.w	r3, r7, #28
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	482f      	ldr	r0, [pc, #188]	; (8006b94 <MX_GPIO_Init+0x274>)
 8006ad8:	f004 f926 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006aea:	f107 031c 	add.w	r3, r7, #28
 8006aee:	4619      	mov	r1, r3
 8006af0:	4829      	ldr	r0, [pc, #164]	; (8006b98 <MX_GPIO_Init+0x278>)
 8006af2:	f004 f919 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006afc:	2301      	movs	r3, #1
 8006afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b04:	2300      	movs	r3, #0
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b08:	f107 031c 	add.w	r3, r7, #28
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4822      	ldr	r0, [pc, #136]	; (8006b98 <MX_GPIO_Init+0x278>)
 8006b10:	f004 f90a 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b22:	2300      	movs	r3, #0
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b26:	f107 031c 	add.w	r3, r7, #28
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	481a      	ldr	r0, [pc, #104]	; (8006b98 <MX_GPIO_Init+0x278>)
 8006b2e:	f004 f8fb 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006b32:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006b36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b40:	2300      	movs	r3, #0
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b44:	f107 031c 	add.w	r3, r7, #28
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4814      	ldr	r0, [pc, #80]	; (8006b9c <MX_GPIO_Init+0x27c>)
 8006b4c:	f004 f8ec 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b56:	2300      	movs	r3, #0
 8006b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b5e:	f107 031c 	add.w	r3, r7, #28
 8006b62:	4619      	mov	r1, r3
 8006b64:	480d      	ldr	r0, [pc, #52]	; (8006b9c <MX_GPIO_Init+0x27c>)
 8006b66:	f004 f8df 	bl	800ad28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006b6a:	239b      	movs	r3, #155	; 0x9b
 8006b6c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b72:	2301      	movs	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b76:	f107 031c 	add.w	r3, r7, #28
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4806      	ldr	r0, [pc, #24]	; (8006b98 <MX_GPIO_Init+0x278>)
 8006b7e:	f004 f8d3 	bl	800ad28 <HAL_GPIO_Init>

}
 8006b82:	bf00      	nop
 8006b84:	3730      	adds	r7, #48	; 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40021000 	.word	0x40021000
 8006b94:	40020400 	.word	0x40020400
 8006b98:	40020c00 	.word	0x40020c00
 8006b9c:	40020000 	.word	0x40020000
 8006ba0:	40020800 	.word	0x40020800

08006ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006ba8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006baa:	e7fe      	b.n	8006baa <Error_Handler+0x6>

08006bac <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006bb0:	bf00      	nop
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	607b      	str	r3, [r7, #4]
 8006bc6:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <HAL_MspInit+0x4c>)
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	4a0f      	ldr	r2, [pc, #60]	; (8006c08 <HAL_MspInit+0x4c>)
 8006bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <HAL_MspInit+0x4c>)
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bda:	607b      	str	r3, [r7, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bde:	2300      	movs	r3, #0
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_MspInit+0x4c>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <HAL_MspInit+0x4c>)
 8006be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bec:	6413      	str	r3, [r2, #64]	; 0x40
 8006bee:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <HAL_MspInit+0x4c>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40023800 	.word	0x40023800

08006c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08c      	sub	sp, #48	; 0x30
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c14:	f107 031c 	add.w	r3, r7, #28
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	605a      	str	r2, [r3, #4]
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	60da      	str	r2, [r3, #12]
 8006c22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a4a      	ldr	r2, [pc, #296]	; (8006d54 <HAL_ADC_MspInit+0x148>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	f040 808e 	bne.w	8006d4c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006c30:	2300      	movs	r3, #0
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	4b48      	ldr	r3, [pc, #288]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	4a47      	ldr	r2, [pc, #284]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8006c40:	4b45      	ldr	r3, [pc, #276]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c48:	61bb      	str	r3, [r7, #24]
 8006c4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	4b41      	ldr	r3, [pc, #260]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	4a40      	ldr	r2, [pc, #256]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c56:	f043 0304 	orr.w	r3, r3, #4
 8006c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5c:	4b3e      	ldr	r3, [pc, #248]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	4b3a      	ldr	r3, [pc, #232]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	4a39      	ldr	r2, [pc, #228]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	6313      	str	r3, [r2, #48]	; 0x30
 8006c78:	4b37      	ldr	r3, [pc, #220]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	4b33      	ldr	r3, [pc, #204]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	4a32      	ldr	r2, [pc, #200]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c8e:	f043 0302 	orr.w	r3, r3, #2
 8006c92:	6313      	str	r3, [r2, #48]	; 0x30
 8006c94:	4b30      	ldr	r3, [pc, #192]	; (8006d58 <HAL_ADC_MspInit+0x14c>)
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ca0:	230f      	movs	r3, #15
 8006ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cac:	f107 031c 	add.w	r3, r7, #28
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	482a      	ldr	r0, [pc, #168]	; (8006d5c <HAL_ADC_MspInit+0x150>)
 8006cb4:	f004 f838 	bl	800ad28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006cb8:	23ff      	movs	r3, #255	; 0xff
 8006cba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc4:	f107 031c 	add.w	r3, r7, #28
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4825      	ldr	r0, [pc, #148]	; (8006d60 <HAL_ADC_MspInit+0x154>)
 8006ccc:	f004 f82c 	bl	800ad28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cdc:	f107 031c 	add.w	r3, r7, #28
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4820      	ldr	r0, [pc, #128]	; (8006d64 <HAL_ADC_MspInit+0x158>)
 8006ce4:	f004 f820 	bl	800ad28 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006ce8:	4b1f      	ldr	r3, [pc, #124]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006cea:	4a20      	ldr	r2, [pc, #128]	; (8006d6c <HAL_ADC_MspInit+0x160>)
 8006cec:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006cee:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006cf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cf4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cf6:	4b1c      	ldr	r3, [pc, #112]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006d02:	4b19      	ldr	r3, [pc, #100]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d08:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d0a:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d10:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d18:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006d1a:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d20:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d22:	4b11      	ldr	r3, [pc, #68]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d28:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d2a:	4b0f      	ldr	r3, [pc, #60]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006d30:	480d      	ldr	r0, [pc, #52]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d32:	f003 fc5d 	bl	800a5f0 <HAL_DMA_Init>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006d3c:	f7ff ff32 	bl	8006ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
 8006d46:	4a08      	ldr	r2, [pc, #32]	; (8006d68 <HAL_ADC_MspInit+0x15c>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006d4c:	bf00      	nop
 8006d4e:	3730      	adds	r7, #48	; 0x30
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40012100 	.word	0x40012100
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40020800 	.word	0x40020800
 8006d60:	40020000 	.word	0x40020000
 8006d64:	40020400 	.word	0x40020400
 8006d68:	2004a9c0 	.word	0x2004a9c0
 8006d6c:	40026440 	.word	0x40026440

08006d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08c      	sub	sp, #48	; 0x30
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d78:	f107 031c 	add.w	r3, r7, #28
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	605a      	str	r2, [r3, #4]
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	60da      	str	r2, [r3, #12]
 8006d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a32      	ldr	r2, [pc, #200]	; (8006e58 <HAL_I2C_MspInit+0xe8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d12c      	bne.n	8006dec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	4a30      	ldr	r2, [pc, #192]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006d9c:	f043 0302 	orr.w	r3, r3, #2
 8006da0:	6313      	str	r3, [r2, #48]	; 0x30
 8006da2:	4b2e      	ldr	r3, [pc, #184]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006dae:	23c0      	movs	r3, #192	; 0xc0
 8006db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006db2:	2312      	movs	r3, #18
 8006db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006db6:	2301      	movs	r3, #1
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006dbe:	2304      	movs	r3, #4
 8006dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dc2:	f107 031c 	add.w	r3, r7, #28
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4825      	ldr	r0, [pc, #148]	; (8006e60 <HAL_I2C_MspInit+0xf0>)
 8006dca:	f003 ffad 	bl	800ad28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	4b22      	ldr	r3, [pc, #136]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dde:	4b1f      	ldr	r3, [pc, #124]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006dea:	e031      	b.n	8006e50 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1c      	ldr	r2, [pc, #112]	; (8006e64 <HAL_I2C_MspInit+0xf4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d12c      	bne.n	8006e50 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006df6:	2300      	movs	r3, #0
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfe:	4a17      	ldr	r2, [pc, #92]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006e00:	f043 0302 	orr.w	r3, r3, #2
 8006e04:	6313      	str	r3, [r2, #48]	; 0x30
 8006e06:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006e12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e18:	2312      	movs	r3, #18
 8006e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e20:	2303      	movs	r3, #3
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006e24:	2304      	movs	r3, #4
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e28:	f107 031c 	add.w	r3, r7, #28
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	480c      	ldr	r0, [pc, #48]	; (8006e60 <HAL_I2C_MspInit+0xf0>)
 8006e30:	f003 ff7a 	bl	800ad28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	4a07      	ldr	r2, [pc, #28]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e42:	6413      	str	r3, [r2, #64]	; 0x40
 8006e44:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <HAL_I2C_MspInit+0xec>)
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
}
 8006e50:	bf00      	nop
 8006e52:	3730      	adds	r7, #48	; 0x30
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40005400 	.word	0x40005400
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	40020400 	.word	0x40020400
 8006e64:	40005800 	.word	0x40005800

08006e68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a69      	ldr	r2, [pc, #420]	; (800702c <HAL_SD_MspInit+0x1c4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	f040 80cb 	bne.w	8007022 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	4b67      	ldr	r3, [pc, #412]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e94:	4a66      	ldr	r2, [pc, #408]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006e96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8006e9c:	4b64      	ldr	r3, [pc, #400]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	4b60      	ldr	r3, [pc, #384]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	4a5f      	ldr	r2, [pc, #380]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006eb2:	f043 0304 	orr.w	r3, r3, #4
 8006eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb8:	4b5d      	ldr	r3, [pc, #372]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	4b59      	ldr	r3, [pc, #356]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	4a58      	ldr	r2, [pc, #352]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006ece:	f043 0308 	orr.w	r3, r3, #8
 8006ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed4:	4b56      	ldr	r3, [pc, #344]	; (8007030 <HAL_SD_MspInit+0x1c8>)
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ee0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006ee4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ef6:	f107 0314 	add.w	r3, r7, #20
 8006efa:	4619      	mov	r1, r3
 8006efc:	484d      	ldr	r0, [pc, #308]	; (8007034 <HAL_SD_MspInit+0x1cc>)
 8006efe:	f003 ff13 	bl	800ad28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f02:	2304      	movs	r3, #4
 8006f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f06:	2302      	movs	r3, #2
 8006f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006f12:	230c      	movs	r3, #12
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f16:	f107 0314 	add.w	r3, r7, #20
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4846      	ldr	r0, [pc, #280]	; (8007038 <HAL_SD_MspInit+0x1d0>)
 8006f1e:	f003 ff03 	bl	800ad28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006f22:	4b46      	ldr	r3, [pc, #280]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f24:	4a46      	ldr	r2, [pc, #280]	; (8007040 <HAL_SD_MspInit+0x1d8>)
 8006f26:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006f28:	4b44      	ldr	r3, [pc, #272]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f2e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f30:	4b42      	ldr	r3, [pc, #264]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f36:	4b41      	ldr	r3, [pc, #260]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f3c:	4b3f      	ldr	r3, [pc, #252]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f42:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f44:	4b3d      	ldr	r3, [pc, #244]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f4a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f4c:	4b3b      	ldr	r3, [pc, #236]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f52:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006f54:	4b39      	ldr	r3, [pc, #228]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f56:	2220      	movs	r2, #32
 8006f58:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006f5a:	4b38      	ldr	r3, [pc, #224]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006f60:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006f62:	4b36      	ldr	r3, [pc, #216]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f64:	2204      	movs	r2, #4
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006f68:	4b34      	ldr	r3, [pc, #208]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006f6e:	4b33      	ldr	r3, [pc, #204]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006f74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006f76:	4b31      	ldr	r3, [pc, #196]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006f7c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006f7e:	482f      	ldr	r0, [pc, #188]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f80:	f003 fb36 	bl	800a5f0 <HAL_DMA_Init>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006f8a:	f7ff fe0b 	bl	8006ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2a      	ldr	r2, [pc, #168]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
 8006f94:	4a29      	ldr	r2, [pc, #164]	; (800703c <HAL_SD_MspInit+0x1d4>)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006f9a:	4b2a      	ldr	r3, [pc, #168]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006f9c:	4a2a      	ldr	r2, [pc, #168]	; (8007048 <HAL_SD_MspInit+0x1e0>)
 8006f9e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006fa0:	4b28      	ldr	r3, [pc, #160]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006fa6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fa8:	4b26      	ldr	r3, [pc, #152]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006faa:	2240      	movs	r2, #64	; 0x40
 8006fac:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fae:	4b25      	ldr	r3, [pc, #148]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fb4:	4b23      	ldr	r3, [pc, #140]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fba:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006fbc:	4b21      	ldr	r3, [pc, #132]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fc2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006fc4:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006fca:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fce:	2220      	movs	r2, #32
 8006fd0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006fd8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006fda:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fdc:	2204      	movs	r2, #4
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006fe0:	4b18      	ldr	r3, [pc, #96]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fe2:	2203      	movs	r2, #3
 8006fe4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006fe6:	4b17      	ldr	r3, [pc, #92]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006fe8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006fec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006ff0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006ff6:	4813      	ldr	r0, [pc, #76]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 8006ff8:	f003 fafa 	bl	800a5f0 <HAL_DMA_Init>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8007002:	f7ff fdcf 	bl	8006ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 800700a:	63da      	str	r2, [r3, #60]	; 0x3c
 800700c:	4a0d      	ldr	r2, [pc, #52]	; (8007044 <HAL_SD_MspInit+0x1dc>)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007012:	2200      	movs	r2, #0
 8007014:	2100      	movs	r1, #0
 8007016:	2031      	movs	r0, #49	; 0x31
 8007018:	f003 fab3 	bl	800a582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800701c:	2031      	movs	r0, #49	; 0x31
 800701e:	f003 facc 	bl	800a5ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007022:	bf00      	nop
 8007024:	3728      	adds	r7, #40	; 0x28
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40012c00 	.word	0x40012c00
 8007030:	40023800 	.word	0x40023800
 8007034:	40020800 	.word	0x40020800
 8007038:	40020c00 	.word	0x40020c00
 800703c:	2004a4e8 	.word	0x2004a4e8
 8007040:	40026458 	.word	0x40026458
 8007044:	2004a81c 	.word	0x2004a81c
 8007048:	400264a0 	.word	0x400264a0

0800704c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007054:	f107 0314 	add.w	r3, r7, #20
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	605a      	str	r2, [r3, #4]
 800705e:	609a      	str	r2, [r3, #8]
 8007060:	60da      	str	r2, [r3, #12]
 8007062:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a19      	ldr	r2, [pc, #100]	; (80070d0 <HAL_SPI_MspInit+0x84>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d12c      	bne.n	80070c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <HAL_SPI_MspInit+0x88>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <HAL_SPI_MspInit+0x88>)
 8007078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800707c:	6413      	str	r3, [r2, #64]	; 0x40
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <HAL_SPI_MspInit+0x88>)
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <HAL_SPI_MspInit+0x88>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <HAL_SPI_MspInit+0x88>)
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	6313      	str	r3, [r2, #48]	; 0x30
 800709a:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <HAL_SPI_MspInit+0x88>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80070a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80070aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ac:	2302      	movs	r3, #2
 80070ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070b4:	2303      	movs	r3, #3
 80070b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070b8:	2305      	movs	r3, #5
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070bc:	f107 0314 	add.w	r3, r7, #20
 80070c0:	4619      	mov	r1, r3
 80070c2:	4805      	ldr	r0, [pc, #20]	; (80070d8 <HAL_SPI_MspInit+0x8c>)
 80070c4:	f003 fe30 	bl	800ad28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80070c8:	bf00      	nop
 80070ca:	3728      	adds	r7, #40	; 0x28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40003800 	.word	0x40003800
 80070d4:	40023800 	.word	0x40023800
 80070d8:	40020400 	.word	0x40020400

080070dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08c      	sub	sp, #48	; 0x30
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070e4:	f107 031c 	add.w	r3, r7, #28
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	605a      	str	r2, [r3, #4]
 80070ee:	609a      	str	r2, [r3, #8]
 80070f0:	60da      	str	r2, [r3, #12]
 80070f2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2d      	ldr	r2, [pc, #180]	; (80071b0 <HAL_TIM_PWM_MspInit+0xd4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d12d      	bne.n	800715a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80070fe:	2300      	movs	r3, #0
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	4b2c      	ldr	r3, [pc, #176]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	4a2b      	ldr	r2, [pc, #172]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	6453      	str	r3, [r2, #68]	; 0x44
 800710e:	4b29      	ldr	r3, [pc, #164]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	4b25      	ldr	r3, [pc, #148]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	4a24      	ldr	r2, [pc, #144]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007124:	f043 0310 	orr.w	r3, r3, #16
 8007128:	6313      	str	r3, [r2, #48]	; 0x30
 800712a:	4b22      	ldr	r3, [pc, #136]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007136:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800713a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713c:	2302      	movs	r3, #2
 800713e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007140:	2300      	movs	r3, #0
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007144:	2300      	movs	r3, #0
 8007146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007148:	2301      	movs	r3, #1
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800714c:	f107 031c 	add.w	r3, r7, #28
 8007150:	4619      	mov	r1, r3
 8007152:	4819      	ldr	r0, [pc, #100]	; (80071b8 <HAL_TIM_PWM_MspInit+0xdc>)
 8007154:	f003 fde8 	bl	800ad28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007158:	e026      	b.n	80071a8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a17      	ldr	r2, [pc, #92]	; (80071bc <HAL_TIM_PWM_MspInit+0xe0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d10e      	bne.n	8007182 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	4a11      	ldr	r2, [pc, #68]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 800716e:	f043 0302 	orr.w	r3, r3, #2
 8007172:	6413      	str	r3, [r2, #64]	; 0x40
 8007174:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	693b      	ldr	r3, [r7, #16]
}
 8007180:	e012      	b.n	80071a8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a0e      	ldr	r2, [pc, #56]	; (80071c0 <HAL_TIM_PWM_MspInit+0xe4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d10d      	bne.n	80071a8 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	4b08      	ldr	r3, [pc, #32]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007194:	4a07      	ldr	r2, [pc, #28]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007196:	f043 0304 	orr.w	r3, r3, #4
 800719a:	6413      	str	r3, [r2, #64]	; 0x40
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_TIM_PWM_MspInit+0xd8>)
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]
}
 80071a8:	bf00      	nop
 80071aa:	3730      	adds	r7, #48	; 0x30
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40010000 	.word	0x40010000
 80071b4:	40023800 	.word	0x40023800
 80071b8:	40021000 	.word	0x40021000
 80071bc:	40000400 	.word	0x40000400
 80071c0:	40000800 	.word	0x40000800

080071c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a3e      	ldr	r2, [pc, #248]	; (80072cc <HAL_TIM_Base_MspInit+0x108>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d116      	bne.n	8007204 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071d6:	2300      	movs	r3, #0
 80071d8:	61fb      	str	r3, [r7, #28]
 80071da:	4b3d      	ldr	r3, [pc, #244]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	4a3c      	ldr	r2, [pc, #240]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 80071e0:	f043 0310 	orr.w	r3, r3, #16
 80071e4:	6413      	str	r3, [r2, #64]	; 0x40
 80071e6:	4b3a      	ldr	r3, [pc, #232]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80071f2:	2200      	movs	r2, #0
 80071f4:	2101      	movs	r1, #1
 80071f6:	2036      	movs	r0, #54	; 0x36
 80071f8:	f003 f9c3 	bl	800a582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80071fc:	2036      	movs	r0, #54	; 0x36
 80071fe:	f003 f9dc 	bl	800a5ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007202:	e05e      	b.n	80072c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a32      	ldr	r2, [pc, #200]	; (80072d4 <HAL_TIM_Base_MspInit+0x110>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d116      	bne.n	800723c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800720e:	2300      	movs	r3, #0
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	4b2f      	ldr	r3, [pc, #188]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	4a2e      	ldr	r2, [pc, #184]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007218:	f043 0320 	orr.w	r3, r3, #32
 800721c:	6413      	str	r3, [r2, #64]	; 0x40
 800721e:	4b2c      	ldr	r3, [pc, #176]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	2037      	movs	r0, #55	; 0x37
 8007230:	f003 f9a7 	bl	800a582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007234:	2037      	movs	r0, #55	; 0x37
 8007236:	f003 f9c0 	bl	800a5ba <HAL_NVIC_EnableIRQ>
}
 800723a:	e042      	b.n	80072c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a25      	ldr	r2, [pc, #148]	; (80072d8 <HAL_TIM_Base_MspInit+0x114>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d10e      	bne.n	8007264 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	4b21      	ldr	r3, [pc, #132]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 800724c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724e:	4a20      	ldr	r2, [pc, #128]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007254:	6453      	str	r3, [r2, #68]	; 0x44
 8007256:	4b1e      	ldr	r3, [pc, #120]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	697b      	ldr	r3, [r7, #20]
}
 8007262:	e02e      	b.n	80072c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <HAL_TIM_Base_MspInit+0x118>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d10e      	bne.n	800728c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800726e:	2300      	movs	r3, #0
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	4b17      	ldr	r3, [pc, #92]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007276:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800727c:	6453      	str	r3, [r2, #68]	; 0x44
 800727e:	4b14      	ldr	r3, [pc, #80]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	693b      	ldr	r3, [r7, #16]
}
 800728a:	e01a      	b.n	80072c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a13      	ldr	r2, [pc, #76]	; (80072e0 <HAL_TIM_Base_MspInit+0x11c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d115      	bne.n	80072c2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 80072a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a4:	6413      	str	r3, [r2, #64]	; 0x40
 80072a6:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <HAL_TIM_Base_MspInit+0x10c>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80072b2:	2200      	movs	r2, #0
 80072b4:	2100      	movs	r1, #0
 80072b6:	202c      	movs	r0, #44	; 0x2c
 80072b8:	f003 f963 	bl	800a582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80072bc:	202c      	movs	r0, #44	; 0x2c
 80072be:	f003 f97c 	bl	800a5ba <HAL_NVIC_EnableIRQ>
}
 80072c2:	bf00      	nop
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40001000 	.word	0x40001000
 80072d0:	40023800 	.word	0x40023800
 80072d4:	40001400 	.word	0x40001400
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800
 80072e0:	40001c00 	.word	0x40001c00

080072e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	; 0x28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ec:	f107 0314 	add.w	r3, r7, #20
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	605a      	str	r2, [r3, #4]
 80072f6:	609a      	str	r2, [r3, #8]
 80072f8:	60da      	str	r2, [r3, #12]
 80072fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <HAL_TIM_Encoder_MspInit+0x94>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d133      	bne.n	800736e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007306:	2300      	movs	r3, #0
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	4b1c      	ldr	r3, [pc, #112]	; (800737c <HAL_TIM_Encoder_MspInit+0x98>)
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	4a1b      	ldr	r2, [pc, #108]	; (800737c <HAL_TIM_Encoder_MspInit+0x98>)
 8007310:	f043 0302 	orr.w	r3, r3, #2
 8007314:	6453      	str	r3, [r2, #68]	; 0x44
 8007316:	4b19      	ldr	r3, [pc, #100]	; (800737c <HAL_TIM_Encoder_MspInit+0x98>)
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <HAL_TIM_Encoder_MspInit+0x98>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	4a14      	ldr	r2, [pc, #80]	; (800737c <HAL_TIM_Encoder_MspInit+0x98>)
 800732c:	f043 0304 	orr.w	r3, r3, #4
 8007330:	6313      	str	r3, [r2, #48]	; 0x30
 8007332:	4b12      	ldr	r3, [pc, #72]	; (800737c <HAL_TIM_Encoder_MspInit+0x98>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800733e:	23c0      	movs	r3, #192	; 0xc0
 8007340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007342:	2302      	movs	r3, #2
 8007344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800734a:	2300      	movs	r3, #0
 800734c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800734e:	2303      	movs	r3, #3
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007352:	f107 0314 	add.w	r3, r7, #20
 8007356:	4619      	mov	r1, r3
 8007358:	4809      	ldr	r0, [pc, #36]	; (8007380 <HAL_TIM_Encoder_MspInit+0x9c>)
 800735a:	f003 fce5 	bl	800ad28 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800735e:	2200      	movs	r2, #0
 8007360:	2100      	movs	r1, #0
 8007362:	202c      	movs	r0, #44	; 0x2c
 8007364:	f003 f90d 	bl	800a582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007368:	202c      	movs	r0, #44	; 0x2c
 800736a:	f003 f926 	bl	800a5ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800736e:	bf00      	nop
 8007370:	3728      	adds	r7, #40	; 0x28
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40010400 	.word	0x40010400
 800737c:	40023800 	.word	0x40023800
 8007380:	40020800 	.word	0x40020800

08007384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08c      	sub	sp, #48	; 0x30
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800738c:	f107 031c 	add.w	r3, r7, #28
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	609a      	str	r2, [r3, #8]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5c      	ldr	r2, [pc, #368]	; (8007514 <HAL_TIM_MspPostInit+0x190>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d11f      	bne.n	80073e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	4b5b      	ldr	r3, [pc, #364]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	4a5a      	ldr	r2, [pc, #360]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 80073b0:	f043 0310 	orr.w	r3, r3, #16
 80073b4:	6313      	str	r3, [r2, #48]	; 0x30
 80073b6:	4b58      	ldr	r3, [pc, #352]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80073c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073c8:	2302      	movs	r3, #2
 80073ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073d0:	2300      	movs	r3, #0
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80073d4:	2301      	movs	r3, #1
 80073d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073d8:	f107 031c 	add.w	r3, r7, #28
 80073dc:	4619      	mov	r1, r3
 80073de:	484f      	ldr	r0, [pc, #316]	; (800751c <HAL_TIM_MspPostInit+0x198>)
 80073e0:	f003 fca2 	bl	800ad28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80073e4:	e091      	b.n	800750a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a4d      	ldr	r2, [pc, #308]	; (8007520 <HAL_TIM_MspPostInit+0x19c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d11e      	bne.n	800742e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	4b48      	ldr	r3, [pc, #288]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	4a47      	ldr	r2, [pc, #284]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 80073fa:	f043 0302 	orr.w	r3, r3, #2
 80073fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007400:	4b45      	ldr	r3, [pc, #276]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800740c:	2330      	movs	r3, #48	; 0x30
 800740e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007410:	2302      	movs	r3, #2
 8007412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007414:	2300      	movs	r3, #0
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007418:	2300      	movs	r3, #0
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800741c:	2302      	movs	r3, #2
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007420:	f107 031c 	add.w	r3, r7, #28
 8007424:	4619      	mov	r1, r3
 8007426:	483f      	ldr	r0, [pc, #252]	; (8007524 <HAL_TIM_MspPostInit+0x1a0>)
 8007428:	f003 fc7e 	bl	800ad28 <HAL_GPIO_Init>
}
 800742c:	e06d      	b.n	800750a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a3d      	ldr	r2, [pc, #244]	; (8007528 <HAL_TIM_MspPostInit+0x1a4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d11f      	bne.n	8007478 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007438:	2300      	movs	r3, #0
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	4b36      	ldr	r3, [pc, #216]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	4a35      	ldr	r2, [pc, #212]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 8007442:	f043 0308 	orr.w	r3, r3, #8
 8007446:	6313      	str	r3, [r2, #48]	; 0x30
 8007448:	4b33      	ldr	r3, [pc, #204]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007454:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800745a:	2302      	movs	r3, #2
 800745c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745e:	2300      	movs	r3, #0
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007462:	2300      	movs	r3, #0
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007466:	2302      	movs	r3, #2
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800746a:	f107 031c 	add.w	r3, r7, #28
 800746e:	4619      	mov	r1, r3
 8007470:	482e      	ldr	r0, [pc, #184]	; (800752c <HAL_TIM_MspPostInit+0x1a8>)
 8007472:	f003 fc59 	bl	800ad28 <HAL_GPIO_Init>
}
 8007476:	e048      	b.n	800750a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a2c      	ldr	r2, [pc, #176]	; (8007530 <HAL_TIM_MspPostInit+0x1ac>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d11f      	bne.n	80074c2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	4b24      	ldr	r3, [pc, #144]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	4a23      	ldr	r2, [pc, #140]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 800748c:	f043 0302 	orr.w	r3, r3, #2
 8007490:	6313      	str	r3, [r2, #48]	; 0x30
 8007492:	4b21      	ldr	r3, [pc, #132]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800749e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a4:	2302      	movs	r3, #2
 80074a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ac:	2300      	movs	r3, #0
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80074b0:	2303      	movs	r3, #3
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074b4:	f107 031c 	add.w	r3, r7, #28
 80074b8:	4619      	mov	r1, r3
 80074ba:	481a      	ldr	r0, [pc, #104]	; (8007524 <HAL_TIM_MspPostInit+0x1a0>)
 80074bc:	f003 fc34 	bl	800ad28 <HAL_GPIO_Init>
}
 80074c0:	e023      	b.n	800750a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1b      	ldr	r2, [pc, #108]	; (8007534 <HAL_TIM_MspPostInit+0x1b0>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d11e      	bne.n	800750a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074cc:	2300      	movs	r3, #0
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	4b11      	ldr	r3, [pc, #68]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	4a10      	ldr	r2, [pc, #64]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 80074d6:	f043 0302 	orr.w	r3, r3, #2
 80074da:	6313      	str	r3, [r2, #48]	; 0x30
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <HAL_TIM_MspPostInit+0x194>)
 80074de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	60bb      	str	r3, [r7, #8]
 80074e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ee:	2302      	movs	r3, #2
 80074f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074f6:	2300      	movs	r3, #0
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80074fa:	2303      	movs	r3, #3
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074fe:	f107 031c 	add.w	r3, r7, #28
 8007502:	4619      	mov	r1, r3
 8007504:	4807      	ldr	r0, [pc, #28]	; (8007524 <HAL_TIM_MspPostInit+0x1a0>)
 8007506:	f003 fc0f 	bl	800ad28 <HAL_GPIO_Init>
}
 800750a:	bf00      	nop
 800750c:	3730      	adds	r7, #48	; 0x30
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40010000 	.word	0x40010000
 8007518:	40023800 	.word	0x40023800
 800751c:	40021000 	.word	0x40021000
 8007520:	40000400 	.word	0x40000400
 8007524:	40020400 	.word	0x40020400
 8007528:	40000800 	.word	0x40000800
 800752c:	40020c00 	.word	0x40020c00
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800

08007538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	605a      	str	r2, [r3, #4]
 800754a:	609a      	str	r2, [r3, #8]
 800754c:	60da      	str	r2, [r3, #12]
 800754e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a19      	ldr	r2, [pc, #100]	; (80075bc <HAL_UART_MspInit+0x84>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d12b      	bne.n	80075b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800755a:	2300      	movs	r3, #0
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <HAL_UART_MspInit+0x88>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	4a17      	ldr	r2, [pc, #92]	; (80075c0 <HAL_UART_MspInit+0x88>)
 8007564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007568:	6413      	str	r3, [r2, #64]	; 0x40
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <HAL_UART_MspInit+0x88>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <HAL_UART_MspInit+0x88>)
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	4a10      	ldr	r2, [pc, #64]	; (80075c0 <HAL_UART_MspInit+0x88>)
 8007580:	f043 0308 	orr.w	r3, r3, #8
 8007584:	6313      	str	r3, [r2, #48]	; 0x30
 8007586:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <HAL_UART_MspInit+0x88>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007592:	2360      	movs	r3, #96	; 0x60
 8007594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007596:	2302      	movs	r3, #2
 8007598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759a:	2300      	movs	r3, #0
 800759c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800759e:	2303      	movs	r3, #3
 80075a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80075a2:	2307      	movs	r3, #7
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075a6:	f107 0314 	add.w	r3, r7, #20
 80075aa:	4619      	mov	r1, r3
 80075ac:	4805      	ldr	r0, [pc, #20]	; (80075c4 <HAL_UART_MspInit+0x8c>)
 80075ae:	f003 fbbb 	bl	800ad28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80075b2:	bf00      	nop
 80075b4:	3728      	adds	r7, #40	; 0x28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40004400 	.word	0x40004400
 80075c0:	40023800 	.word	0x40023800
 80075c4:	40020c00 	.word	0x40020c00

080075c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80075cc:	e7fe      	b.n	80075cc <NMI_Handler+0x4>

080075ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075ce:	b480      	push	{r7}
 80075d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075d2:	e7fe      	b.n	80075d2 <HardFault_Handler+0x4>

080075d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075d8:	e7fe      	b.n	80075d8 <MemManage_Handler+0x4>

080075da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075da:	b480      	push	{r7}
 80075dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075de:	e7fe      	b.n	80075de <BusFault_Handler+0x4>

080075e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075e4:	e7fe      	b.n	80075e4 <UsageFault_Handler+0x4>

080075e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075e6:	b480      	push	{r7}
 80075e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075ea:	bf00      	nop
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075f8:	bf00      	nop
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007602:	b480      	push	{r7}
 8007604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007606:	bf00      	nop
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007614:	f002 fa94 	bl	8009b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007618:	bf00      	nop
 800761a:	bd80      	pop	{r7, pc}

0800761c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007620:	4803      	ldr	r0, [pc, #12]	; (8007630 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007622:	f007 fd64 	bl	800f0ee <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007626:	4803      	ldr	r0, [pc, #12]	; (8007634 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007628:	f007 fd61 	bl	800f0ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800762c:	bf00      	nop
 800762e:	bd80      	pop	{r7, pc}
 8007630:	2004a5a0 	.word	0x2004a5a0
 8007634:	2004a79c 	.word	0x2004a79c

08007638 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800763c:	4802      	ldr	r0, [pc, #8]	; (8007648 <SDIO_IRQHandler+0x10>)
 800763e:	f005 fdfd 	bl	800d23c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007642:	bf00      	nop
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	2004a8fc 	.word	0x2004a8fc

0800764c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007650:	4802      	ldr	r0, [pc, #8]	; (800765c <TIM6_DAC_IRQHandler+0x10>)
 8007652:	f007 fd4c 	bl	800f0ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007656:	bf00      	nop
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	2004a87c 	.word	0x2004a87c

08007660 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007664:	4802      	ldr	r0, [pc, #8]	; (8007670 <TIM7_IRQHandler+0x10>)
 8007666:	f007 fd42 	bl	800f0ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800766a:	bf00      	nop
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	2004aa20 	.word	0x2004aa20

08007674 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007678:	4802      	ldr	r0, [pc, #8]	; (8007684 <DMA2_Stream2_IRQHandler+0x10>)
 800767a:	f003 f8e1 	bl	800a840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800767e:	bf00      	nop
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	2004a9c0 	.word	0x2004a9c0

08007688 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800768c:	4802      	ldr	r0, [pc, #8]	; (8007698 <DMA2_Stream3_IRQHandler+0x10>)
 800768e:	f003 f8d7 	bl	800a840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007692:	bf00      	nop
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	2004a4e8 	.word	0x2004a4e8

0800769c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80076a0:	4802      	ldr	r0, [pc, #8]	; (80076ac <DMA2_Stream6_IRQHandler+0x10>)
 80076a2:	f003 f8cd 	bl	800a840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80076a6:	bf00      	nop
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	2004a81c 	.word	0x2004a81c

080076b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076b8:	4a14      	ldr	r2, [pc, #80]	; (800770c <_sbrk+0x5c>)
 80076ba:	4b15      	ldr	r3, [pc, #84]	; (8007710 <_sbrk+0x60>)
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076c4:	4b13      	ldr	r3, [pc, #76]	; (8007714 <_sbrk+0x64>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076cc:	4b11      	ldr	r3, [pc, #68]	; (8007714 <_sbrk+0x64>)
 80076ce:	4a12      	ldr	r2, [pc, #72]	; (8007718 <_sbrk+0x68>)
 80076d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076d2:	4b10      	ldr	r3, [pc, #64]	; (8007714 <_sbrk+0x64>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4413      	add	r3, r2
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d207      	bcs.n	80076f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076e0:	f00c ff42 	bl	8014568 <__errno>
 80076e4:	4602      	mov	r2, r0
 80076e6:	230c      	movs	r3, #12
 80076e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80076ea:	f04f 33ff 	mov.w	r3, #4294967295
 80076ee:	e009      	b.n	8007704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <_sbrk+0x64>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076f6:	4b07      	ldr	r3, [pc, #28]	; (8007714 <_sbrk+0x64>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	4a05      	ldr	r2, [pc, #20]	; (8007714 <_sbrk+0x64>)
 8007700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007702:	68fb      	ldr	r3, [r7, #12]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20050000 	.word	0x20050000
 8007710:	00000800 	.word	0x00000800
 8007714:	20000238 	.word	0x20000238
 8007718:	2004cb70 	.word	0x2004cb70

0800771c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007720:	4b08      	ldr	r3, [pc, #32]	; (8007744 <SystemInit+0x28>)
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007726:	4a07      	ldr	r2, [pc, #28]	; (8007744 <SystemInit+0x28>)
 8007728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800772c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007730:	4b04      	ldr	r3, [pc, #16]	; (8007744 <SystemInit+0x28>)
 8007732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007736:	609a      	str	r2, [r3, #8]
#endif
}
 8007738:	bf00      	nop
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	e000ed00 	.word	0xe000ed00

08007748 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007748:	b598      	push	{r3, r4, r7, lr}
 800774a:	af00      	add	r7, sp, #0
	lcd_init();
 800774c:	f7f9 fc64 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007750:	483b      	ldr	r0, [pc, #236]	; (8007840 <cppInit+0xf8>)
 8007752:	f7fd fd13 	bl	800517c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007756:	2064      	movs	r0, #100	; 0x64
 8007758:	f002 fa12 	bl	8009b80 <HAL_Delay>
	power_sensor.updateValues();
 800775c:	4838      	ldr	r0, [pc, #224]	; (8007840 <cppInit+0xf8>)
 800775e:	f7fd fd1b 	bl	8005198 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007762:	f7f9 fc9d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007766:	2100      	movs	r1, #0
 8007768:	2000      	movs	r0, #0
 800776a:	f7f9 fca9 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800776e:	4835      	ldr	r0, [pc, #212]	; (8007844 <cppInit+0xfc>)
 8007770:	f7f9 fcd0 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007774:	2101      	movs	r1, #1
 8007776:	2000      	movs	r0, #0
 8007778:	f7f9 fca2 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800777c:	4830      	ldr	r0, [pc, #192]	; (8007840 <cppInit+0xf8>)
 800777e:	f7fd fd35 	bl	80051ec <_ZN11PowerSensor17getButteryVoltageEv>
 8007782:	ee10 3a10 	vmov	r3, s0
 8007786:	4618      	mov	r0, r3
 8007788:	f7f8 fef6 	bl	8000578 <__aeabi_f2d>
 800778c:	4603      	mov	r3, r0
 800778e:	460c      	mov	r4, r1
 8007790:	461a      	mov	r2, r3
 8007792:	4623      	mov	r3, r4
 8007794:	482c      	ldr	r0, [pc, #176]	; (8007848 <cppInit+0x100>)
 8007796:	f7f9 fcbd 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 800779a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800779e:	f002 f9ef 	bl	8009b80 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80077a2:	482a      	ldr	r0, [pc, #168]	; (800784c <cppInit+0x104>)
 80077a4:	f7fc ffd8 	bl	8004758 <_ZN6Logger10sdCardInitEv>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <cppInit+0x76>
		led.fullColor('G');
 80077ae:	2147      	movs	r1, #71	; 0x47
 80077b0:	4827      	ldr	r0, [pc, #156]	; (8007850 <cppInit+0x108>)
 80077b2:	f7fa fc73 	bl	800209c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80077b6:	2064      	movs	r0, #100	; 0x64
 80077b8:	f002 f9e2 	bl	8009b80 <HAL_Delay>
 80077bc:	e006      	b.n	80077cc <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80077be:	2152      	movs	r1, #82	; 0x52
 80077c0:	4823      	ldr	r0, [pc, #140]	; (8007850 <cppInit+0x108>)
 80077c2:	f7fa fc6b 	bl	800209c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80077c6:	2064      	movs	r0, #100	; 0x64
 80077c8:	f002 f9da 	bl	8009b80 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80077cc:	4821      	ldr	r0, [pc, #132]	; (8007854 <cppInit+0x10c>)
 80077ce:	f7fa fdc1 	bl	8002354 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80077d2:	4821      	ldr	r0, [pc, #132]	; (8007858 <cppInit+0x110>)
 80077d4:	f7fd fa7a 	bl	8004ccc <_ZN5Motor4initEv>
	encoder.init();
 80077d8:	4820      	ldr	r0, [pc, #128]	; (800785c <cppInit+0x114>)
 80077da:	f7f9 fe23 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80077de:	4820      	ldr	r0, [pc, #128]	; (8007860 <cppInit+0x118>)
 80077e0:	f7fa fa1c 	bl	8001c1c <_ZN3IMU4initEv>
	line_trace.init();
 80077e4:	481f      	ldr	r0, [pc, #124]	; (8007864 <cppInit+0x11c>)
 80077e6:	f7fc f8ab 	bl	8003940 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80077ea:	481a      	ldr	r0, [pc, #104]	; (8007854 <cppInit+0x10c>)
 80077ec:	f7fa fea8 	bl	8002540 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80077f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077f4:	f002 f9c4 	bl	8009b80 <HAL_Delay>

	led.fullColor('M');
 80077f8:	214d      	movs	r1, #77	; 0x4d
 80077fa:	4815      	ldr	r0, [pc, #84]	; (8007850 <cppInit+0x108>)
 80077fc:	f7fa fc4e 	bl	800209c <_ZN3LED9fullColorEc>
	imu.calibration();
 8007800:	4817      	ldr	r0, [pc, #92]	; (8007860 <cppInit+0x118>)
 8007802:	f7fa fad3 	bl	8001dac <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007806:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007868 <cppInit+0x120>
 800780a:	eddf 0a18 	vldr	s1, [pc, #96]	; 800786c <cppInit+0x124>
 800780e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007870 <cppInit+0x128>
 8007812:	4818      	ldr	r0, [pc, #96]	; (8007874 <cppInit+0x12c>)
 8007814:	f7fe f9cc 	bl	8005bb0 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007818:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8007868 <cppInit+0x120>
 800781c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007878 <cppInit+0x130>
 8007820:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800787c <cppInit+0x134>
 8007824:	4813      	ldr	r0, [pc, #76]	; (8007874 <cppInit+0x12c>)
 8007826:	f7fe f9dc 	bl	8005be2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 800782a:	4815      	ldr	r0, [pc, #84]	; (8007880 <cppInit+0x138>)
 800782c:	f7fd fbb0 	bl	8004f90 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007830:	4814      	ldr	r0, [pc, #80]	; (8007884 <cppInit+0x13c>)
 8007832:	f7fd fc47 	bl	80050c4 <_ZN13PathFollowing4initEv>

	esc.init();
 8007836:	4814      	ldr	r0, [pc, #80]	; (8007888 <cppInit+0x140>)
 8007838:	f7f9 fcd8 	bl	80011ec <_ZN3ESC4initEv>

}
 800783c:	bf00      	nop
 800783e:	bd98      	pop	{r3, r4, r7, pc}
 8007840:	20000550 	.word	0x20000550
 8007844:	08018bb4 	.word	0x08018bb4
 8007848:	08018bbc 	.word	0x08018bbc
 800784c:	20000570 	.word	0x20000570
 8007850:	2000054c 	.word	0x2000054c
 8007854:	2000023c 	.word	0x2000023c
 8007858:	20000548 	.word	0x20000548
 800785c:	200237fc 	.word	0x200237fc
 8007860:	2000055c 	.word	0x2000055c
 8007864:	2002389c 	.word	0x2002389c
 8007868:	00000000 	.word	0x00000000
 800786c:	4129999a 	.word	0x4129999a
 8007870:	3f99999a 	.word	0x3f99999a
 8007874:	2002381c 	.word	0x2002381c
 8007878:	3f5e3fbc 	.word	0x3f5e3fbc
 800787c:	3d75c28f 	.word	0x3d75c28f
 8007880:	20023858 	.word	0x20023858
 8007884:	200309e8 	.word	0x200309e8
 8007888:	20023898 	.word	0x20023898

0800788c <cppFlip1ms>:

void cppFlip1ms(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007890:	480e      	ldr	r0, [pc, #56]	; (80078cc <cppFlip1ms+0x40>)
 8007892:	f7fa fdbd 	bl	8002410 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007896:	480e      	ldr	r0, [pc, #56]	; (80078d0 <cppFlip1ms+0x44>)
 8007898:	f7fa f9e6 	bl	8001c68 <_ZN3IMU12updateValuesEv>
	encoder.update();
 800789c:	480d      	ldr	r0, [pc, #52]	; (80078d4 <cppFlip1ms+0x48>)
 800789e:	f7f9 fde3 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80078a2:	480d      	ldr	r0, [pc, #52]	; (80078d8 <cppFlip1ms+0x4c>)
 80078a4:	f7fc faf2 	bl	8003e8c <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80078a8:	480c      	ldr	r0, [pc, #48]	; (80078dc <cppFlip1ms+0x50>)
 80078aa:	f7fe f9b3 	bl	8005c14 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80078ae:	480c      	ldr	r0, [pc, #48]	; (80078e0 <cppFlip1ms+0x54>)
 80078b0:	f7fd fb52 	bl	8004f58 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80078b4:	480b      	ldr	r0, [pc, #44]	; (80078e4 <cppFlip1ms+0x58>)
 80078b6:	f7fd fd15 	bl	80052e4 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80078ba:	480b      	ldr	r0, [pc, #44]	; (80078e8 <cppFlip1ms+0x5c>)
 80078bc:	f7fd fa18 	bl	8004cf0 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80078c0:	4804      	ldr	r0, [pc, #16]	; (80078d4 <cppFlip1ms+0x48>)
 80078c2:	f7f9 fe51 	bl	8001568 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	2000023c 	.word	0x2000023c
 80078d0:	2000055c 	.word	0x2000055c
 80078d4:	200237fc 	.word	0x200237fc
 80078d8:	2002389c 	.word	0x2002389c
 80078dc:	2002381c 	.word	0x2002381c
 80078e0:	20023858 	.word	0x20023858
 80078e4:	20000534 	.word	0x20000534
 80078e8:	20000548 	.word	0x20000548

080078ec <cppFlip100ns>:

void cppFlip100ns(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80078f0:	4802      	ldr	r0, [pc, #8]	; (80078fc <cppFlip100ns+0x10>)
 80078f2:	f7fa fd3f 	bl	8002374 <_ZN10LineSensor17storeSensorValuesEv>
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	2000023c 	.word	0x2000023c

08007900 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8007904:	480a      	ldr	r0, [pc, #40]	; (8007930 <cppFlip10ms+0x30>)
 8007906:	f7fc f9f4 	bl	8003cf2 <_ZN9LineTrace17getTargetVelocityEv>
 800790a:	eef0 7a40 	vmov.f32	s15, s0
 800790e:	eeb0 0a67 	vmov.f32	s0, s15
 8007912:	4808      	ldr	r0, [pc, #32]	; (8007934 <cppFlip10ms+0x34>)
 8007914:	f7fc ff68 	bl	80047e8 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8007918:	4807      	ldr	r0, [pc, #28]	; (8007938 <cppFlip10ms+0x38>)
 800791a:	f7fe f9bd 	bl	8005c98 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800791e:	eef0 7a40 	vmov.f32	s15, s0
 8007922:	eeb0 0a67 	vmov.f32	s0, s15
 8007926:	4803      	ldr	r0, [pc, #12]	; (8007934 <cppFlip10ms+0x34>)
 8007928:	f7fc ff9b 	bl	8004862 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800792c:	bf00      	nop
 800792e:	bd80      	pop	{r7, pc}
 8007930:	2002389c 	.word	0x2002389c
 8007934:	20000570 	.word	0x20000570
 8007938:	2002381c 	.word	0x2002381c
 800793c:	00000000 	.word	0x00000000

08007940 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007942:	b085      	sub	sp, #20
 8007944:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007946:	4baf      	ldr	r3, [pc, #700]	; (8007c04 <cppLoop+0x2c4>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	f3bf 8f5b 	dmb	ish
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	bf0c      	ite	eq
 8007958:	2301      	moveq	r3, #1
 800795a:	2300      	movne	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d015      	beq.n	800798e <cppLoop+0x4e>
 8007962:	48a8      	ldr	r0, [pc, #672]	; (8007c04 <cppLoop+0x2c4>)
 8007964:	f00c fdf1 	bl	801454a <__cxa_guard_acquire>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	bf14      	ite	ne
 800796e:	2301      	movne	r3, #1
 8007970:	2300      	moveq	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <cppLoop+0x4e>
 8007978:	48a3      	ldr	r0, [pc, #652]	; (8007c08 <cppLoop+0x2c8>)
 800797a:	f7fc f8e8 	bl	8003b4e <_ZN9LineTrace5getKpEv>
 800797e:	eef0 7a40 	vmov.f32	s15, s0
 8007982:	4ba2      	ldr	r3, [pc, #648]	; (8007c0c <cppLoop+0x2cc>)
 8007984:	edc3 7a00 	vstr	s15, [r3]
 8007988:	489e      	ldr	r0, [pc, #632]	; (8007c04 <cppLoop+0x2c4>)
 800798a:	f00c fdea 	bl	8014562 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 800798e:	4ba0      	ldr	r3, [pc, #640]	; (8007c10 <cppLoop+0x2d0>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f3bf 8f5b 	dmb	ish
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	bf0c      	ite	eq
 80079a0:	2301      	moveq	r3, #1
 80079a2:	2300      	movne	r3, #0
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d015      	beq.n	80079d6 <cppLoop+0x96>
 80079aa:	4899      	ldr	r0, [pc, #612]	; (8007c10 <cppLoop+0x2d0>)
 80079ac:	f00c fdcd 	bl	801454a <__cxa_guard_acquire>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bf14      	ite	ne
 80079b6:	2301      	movne	r3, #1
 80079b8:	2300      	moveq	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <cppLoop+0x96>
 80079c0:	4891      	ldr	r0, [pc, #580]	; (8007c08 <cppLoop+0x2c8>)
 80079c2:	f7fc f8d3 	bl	8003b6c <_ZN9LineTrace5getKiEv>
 80079c6:	eef0 7a40 	vmov.f32	s15, s0
 80079ca:	4b92      	ldr	r3, [pc, #584]	; (8007c14 <cppLoop+0x2d4>)
 80079cc:	edc3 7a00 	vstr	s15, [r3]
 80079d0:	488f      	ldr	r0, [pc, #572]	; (8007c10 <cppLoop+0x2d0>)
 80079d2:	f00c fdc6 	bl	8014562 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80079d6:	4b90      	ldr	r3, [pc, #576]	; (8007c18 <cppLoop+0x2d8>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f3bf 8f5b 	dmb	ish
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bf0c      	ite	eq
 80079e8:	2301      	moveq	r3, #1
 80079ea:	2300      	movne	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d015      	beq.n	8007a1e <cppLoop+0xde>
 80079f2:	4889      	ldr	r0, [pc, #548]	; (8007c18 <cppLoop+0x2d8>)
 80079f4:	f00c fda9 	bl	801454a <__cxa_guard_acquire>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bf14      	ite	ne
 80079fe:	2301      	movne	r3, #1
 8007a00:	2300      	moveq	r3, #0
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <cppLoop+0xde>
 8007a08:	487f      	ldr	r0, [pc, #508]	; (8007c08 <cppLoop+0x2c8>)
 8007a0a:	f7fc f8be 	bl	8003b8a <_ZN9LineTrace5getKdEv>
 8007a0e:	eef0 7a40 	vmov.f32	s15, s0
 8007a12:	4b82      	ldr	r3, [pc, #520]	; (8007c1c <cppLoop+0x2dc>)
 8007a14:	edc3 7a00 	vstr	s15, [r3]
 8007a18:	487f      	ldr	r0, [pc, #508]	; (8007c18 <cppLoop+0x2d8>)
 8007a1a:	f00c fda2 	bl	8014562 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007a1e:	4b80      	ldr	r3, [pc, #512]	; (8007c20 <cppLoop+0x2e0>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f3bf 8f5b 	dmb	ish
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf0c      	ite	eq
 8007a30:	2301      	moveq	r3, #1
 8007a32:	2300      	movne	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d015      	beq.n	8007a66 <cppLoop+0x126>
 8007a3a:	4879      	ldr	r0, [pc, #484]	; (8007c20 <cppLoop+0x2e0>)
 8007a3c:	f00c fd85 	bl	801454a <__cxa_guard_acquire>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bf14      	ite	ne
 8007a46:	2301      	movne	r3, #1
 8007a48:	2300      	moveq	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <cppLoop+0x126>
 8007a50:	486d      	ldr	r0, [pc, #436]	; (8007c08 <cppLoop+0x2c8>)
 8007a52:	f7fc f8c2 	bl	8003bda <_ZN9LineTrace9getKpSlowEv>
 8007a56:	eef0 7a40 	vmov.f32	s15, s0
 8007a5a:	4b72      	ldr	r3, [pc, #456]	; (8007c24 <cppLoop+0x2e4>)
 8007a5c:	edc3 7a00 	vstr	s15, [r3]
 8007a60:	486f      	ldr	r0, [pc, #444]	; (8007c20 <cppLoop+0x2e0>)
 8007a62:	f00c fd7e 	bl	8014562 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007a66:	4b70      	ldr	r3, [pc, #448]	; (8007c28 <cppLoop+0x2e8>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f3bf 8f5b 	dmb	ish
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bf0c      	ite	eq
 8007a78:	2301      	moveq	r3, #1
 8007a7a:	2300      	movne	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d015      	beq.n	8007aae <cppLoop+0x16e>
 8007a82:	4869      	ldr	r0, [pc, #420]	; (8007c28 <cppLoop+0x2e8>)
 8007a84:	f00c fd61 	bl	801454a <__cxa_guard_acquire>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bf14      	ite	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	2300      	moveq	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <cppLoop+0x16e>
 8007a98:	485b      	ldr	r0, [pc, #364]	; (8007c08 <cppLoop+0x2c8>)
 8007a9a:	f7fc f8ad 	bl	8003bf8 <_ZN9LineTrace9getKiSlowEv>
 8007a9e:	eef0 7a40 	vmov.f32	s15, s0
 8007aa2:	4b62      	ldr	r3, [pc, #392]	; (8007c2c <cppLoop+0x2ec>)
 8007aa4:	edc3 7a00 	vstr	s15, [r3]
 8007aa8:	485f      	ldr	r0, [pc, #380]	; (8007c28 <cppLoop+0x2e8>)
 8007aaa:	f00c fd5a 	bl	8014562 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007aae:	4b60      	ldr	r3, [pc, #384]	; (8007c30 <cppLoop+0x2f0>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f3bf 8f5b 	dmb	ish
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	bf0c      	ite	eq
 8007ac0:	2301      	moveq	r3, #1
 8007ac2:	2300      	movne	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d015      	beq.n	8007af6 <cppLoop+0x1b6>
 8007aca:	4859      	ldr	r0, [pc, #356]	; (8007c30 <cppLoop+0x2f0>)
 8007acc:	f00c fd3d 	bl	801454a <__cxa_guard_acquire>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf14      	ite	ne
 8007ad6:	2301      	movne	r3, #1
 8007ad8:	2300      	moveq	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <cppLoop+0x1b6>
 8007ae0:	4849      	ldr	r0, [pc, #292]	; (8007c08 <cppLoop+0x2c8>)
 8007ae2:	f7fc f898 	bl	8003c16 <_ZN9LineTrace9getKdSlowEv>
 8007ae6:	eef0 7a40 	vmov.f32	s15, s0
 8007aea:	4b52      	ldr	r3, [pc, #328]	; (8007c34 <cppLoop+0x2f4>)
 8007aec:	edc3 7a00 	vstr	s15, [r3]
 8007af0:	484f      	ldr	r0, [pc, #316]	; (8007c30 <cppLoop+0x2f0>)
 8007af2:	f00c fd36 	bl	8014562 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007af6:	4b50      	ldr	r3, [pc, #320]	; (8007c38 <cppLoop+0x2f8>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f3bf 8f5b 	dmb	ish
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d015      	beq.n	8007b3e <cppLoop+0x1fe>
 8007b12:	4849      	ldr	r0, [pc, #292]	; (8007c38 <cppLoop+0x2f8>)
 8007b14:	f00c fd19 	bl	801454a <__cxa_guard_acquire>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bf14      	ite	ne
 8007b1e:	2301      	movne	r3, #1
 8007b20:	2300      	moveq	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <cppLoop+0x1fe>
 8007b28:	4837      	ldr	r0, [pc, #220]	; (8007c08 <cppLoop+0x2c8>)
 8007b2a:	f7fc f8e2 	bl	8003cf2 <_ZN9LineTrace17getTargetVelocityEv>
 8007b2e:	eef0 7a40 	vmov.f32	s15, s0
 8007b32:	4b42      	ldr	r3, [pc, #264]	; (8007c3c <cppLoop+0x2fc>)
 8007b34:	edc3 7a00 	vstr	s15, [r3]
 8007b38:	483f      	ldr	r0, [pc, #252]	; (8007c38 <cppLoop+0x2f8>)
 8007b3a:	f00c fd12 	bl	8014562 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007b3e:	4b40      	ldr	r3, [pc, #256]	; (8007c40 <cppLoop+0x300>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	f3bf 8f5b 	dmb	ish
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d015      	beq.n	8007b86 <cppLoop+0x246>
 8007b5a:	4839      	ldr	r0, [pc, #228]	; (8007c40 <cppLoop+0x300>)
 8007b5c:	f00c fcf5 	bl	801454a <__cxa_guard_acquire>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <cppLoop+0x246>
 8007b70:	4825      	ldr	r0, [pc, #148]	; (8007c08 <cppLoop+0x2c8>)
 8007b72:	f7fc f8ce 	bl	8003d12 <_ZN9LineTrace14getMaxVelocityEv>
 8007b76:	eef0 7a40 	vmov.f32	s15, s0
 8007b7a:	4b32      	ldr	r3, [pc, #200]	; (8007c44 <cppLoop+0x304>)
 8007b7c:	edc3 7a00 	vstr	s15, [r3]
 8007b80:	482f      	ldr	r0, [pc, #188]	; (8007c40 <cppLoop+0x300>)
 8007b82:	f00c fcee 	bl	8014562 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007b86:	4b30      	ldr	r3, [pc, #192]	; (8007c48 <cppLoop+0x308>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f3bf 8f5b 	dmb	ish
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bf0c      	ite	eq
 8007b98:	2301      	moveq	r3, #1
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d015      	beq.n	8007bce <cppLoop+0x28e>
 8007ba2:	4829      	ldr	r0, [pc, #164]	; (8007c48 <cppLoop+0x308>)
 8007ba4:	f00c fcd1 	bl	801454a <__cxa_guard_acquire>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf14      	ite	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	2300      	moveq	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <cppLoop+0x28e>
 8007bb8:	4813      	ldr	r0, [pc, #76]	; (8007c08 <cppLoop+0x2c8>)
 8007bba:	f7fc f8ba 	bl	8003d32 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007bbe:	eef0 7a40 	vmov.f32	s15, s0
 8007bc2:	4b22      	ldr	r3, [pc, #136]	; (8007c4c <cppLoop+0x30c>)
 8007bc4:	edc3 7a00 	vstr	s15, [r3]
 8007bc8:	481f      	ldr	r0, [pc, #124]	; (8007c48 <cppLoop+0x308>)
 8007bca:	f00c fcca 	bl	8014562 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007bce:	4b20      	ldr	r3, [pc, #128]	; (8007c50 <cppLoop+0x310>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f3bf 8f5b 	dmb	ish
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d03f      	beq.n	8007c6a <cppLoop+0x32a>
 8007bea:	4819      	ldr	r0, [pc, #100]	; (8007c50 <cppLoop+0x310>)
 8007bec:	f00c fcad 	bl	801454a <__cxa_guard_acquire>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bf14      	ite	ne
 8007bf6:	2301      	movne	r3, #1
 8007bf8:	2300      	moveq	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d034      	beq.n	8007c6a <cppLoop+0x32a>
 8007c00:	e028      	b.n	8007c54 <cppLoop+0x314>
 8007c02:	bf00      	nop
 8007c04:	20048120 	.word	0x20048120
 8007c08:	2002389c 	.word	0x2002389c
 8007c0c:	2004811c 	.word	0x2004811c
 8007c10:	20048128 	.word	0x20048128
 8007c14:	20048124 	.word	0x20048124
 8007c18:	20048130 	.word	0x20048130
 8007c1c:	2004812c 	.word	0x2004812c
 8007c20:	20048138 	.word	0x20048138
 8007c24:	20048134 	.word	0x20048134
 8007c28:	20048140 	.word	0x20048140
 8007c2c:	2004813c 	.word	0x2004813c
 8007c30:	20048148 	.word	0x20048148
 8007c34:	20048144 	.word	0x20048144
 8007c38:	20048150 	.word	0x20048150
 8007c3c:	2004814c 	.word	0x2004814c
 8007c40:	20048158 	.word	0x20048158
 8007c44:	20048154 	.word	0x20048154
 8007c48:	20048160 	.word	0x20048160
 8007c4c:	2004815c 	.word	0x2004815c
 8007c50:	20048168 	.word	0x20048168
 8007c54:	48b6      	ldr	r0, [pc, #728]	; (8007f30 <cppLoop+0x5f0>)
 8007c56:	f7fc f87c 	bl	8003d52 <_ZN9LineTrace14getMinVelocityEv>
 8007c5a:	eef0 7a40 	vmov.f32	s15, s0
 8007c5e:	4bb5      	ldr	r3, [pc, #724]	; (8007f34 <cppLoop+0x5f4>)
 8007c60:	edc3 7a00 	vstr	s15, [r3]
 8007c64:	48b4      	ldr	r0, [pc, #720]	; (8007f38 <cppLoop+0x5f8>)
 8007c66:	f00c fc7c 	bl	8014562 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007c6a:	4bb4      	ldr	r3, [pc, #720]	; (8007f3c <cppLoop+0x5fc>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	f3bf 8f5b 	dmb	ish
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2301      	moveq	r3, #1
 8007c7e:	2300      	movne	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d015      	beq.n	8007cb2 <cppLoop+0x372>
 8007c86:	48ad      	ldr	r0, [pc, #692]	; (8007f3c <cppLoop+0x5fc>)
 8007c88:	f00c fc5f 	bl	801454a <__cxa_guard_acquire>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bf14      	ite	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	2300      	moveq	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <cppLoop+0x372>
 8007c9c:	48a4      	ldr	r0, [pc, #656]	; (8007f30 <cppLoop+0x5f0>)
 8007c9e:	f7fc f868 	bl	8003d72 <_ZN9LineTrace15getMinVelocity2Ev>
 8007ca2:	eef0 7a40 	vmov.f32	s15, s0
 8007ca6:	4ba6      	ldr	r3, [pc, #664]	; (8007f40 <cppLoop+0x600>)
 8007ca8:	edc3 7a00 	vstr	s15, [r3]
 8007cac:	48a3      	ldr	r0, [pc, #652]	; (8007f3c <cppLoop+0x5fc>)
 8007cae:	f00c fc58 	bl	8014562 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007cb2:	4ba4      	ldr	r3, [pc, #656]	; (8007f44 <cppLoop+0x604>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	f3bf 8f5b 	dmb	ish
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d015      	beq.n	8007cfa <cppLoop+0x3ba>
 8007cce:	489d      	ldr	r0, [pc, #628]	; (8007f44 <cppLoop+0x604>)
 8007cd0:	f00c fc3b 	bl	801454a <__cxa_guard_acquire>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bf14      	ite	ne
 8007cda:	2301      	movne	r3, #1
 8007cdc:	2300      	moveq	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <cppLoop+0x3ba>
 8007ce4:	4892      	ldr	r0, [pc, #584]	; (8007f30 <cppLoop+0x5f0>)
 8007ce6:	f7fc f888 	bl	8003dfa <_ZN9LineTrace9getMaxAccEv>
 8007cea:	eef0 7a40 	vmov.f32	s15, s0
 8007cee:	4b96      	ldr	r3, [pc, #600]	; (8007f48 <cppLoop+0x608>)
 8007cf0:	edc3 7a00 	vstr	s15, [r3]
 8007cf4:	4893      	ldr	r0, [pc, #588]	; (8007f44 <cppLoop+0x604>)
 8007cf6:	f00c fc34 	bl	8014562 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007cfa:	4b94      	ldr	r3, [pc, #592]	; (8007f4c <cppLoop+0x60c>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	f3bf 8f5b 	dmb	ish
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2301      	moveq	r3, #1
 8007d0e:	2300      	movne	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d015      	beq.n	8007d42 <cppLoop+0x402>
 8007d16:	488d      	ldr	r0, [pc, #564]	; (8007f4c <cppLoop+0x60c>)
 8007d18:	f00c fc17 	bl	801454a <__cxa_guard_acquire>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bf14      	ite	ne
 8007d22:	2301      	movne	r3, #1
 8007d24:	2300      	moveq	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <cppLoop+0x402>
 8007d2c:	4880      	ldr	r0, [pc, #512]	; (8007f30 <cppLoop+0x5f0>)
 8007d2e:	f7fc f89a 	bl	8003e66 <_ZN9LineTrace9getMaxDecEv>
 8007d32:	eef0 7a40 	vmov.f32	s15, s0
 8007d36:	4b86      	ldr	r3, [pc, #536]	; (8007f50 <cppLoop+0x610>)
 8007d38:	edc3 7a00 	vstr	s15, [r3]
 8007d3c:	4883      	ldr	r0, [pc, #524]	; (8007f4c <cppLoop+0x60c>)
 8007d3e:	f00c fc10 	bl	8014562 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007d42:	4b84      	ldr	r3, [pc, #528]	; (8007f54 <cppLoop+0x614>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f3bf 8f5b 	dmb	ish
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bf0c      	ite	eq
 8007d54:	2301      	moveq	r3, #1
 8007d56:	2300      	movne	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d015      	beq.n	8007d8a <cppLoop+0x44a>
 8007d5e:	487d      	ldr	r0, [pc, #500]	; (8007f54 <cppLoop+0x614>)
 8007d60:	f00c fbf3 	bl	801454a <__cxa_guard_acquire>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bf14      	ite	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	2300      	moveq	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <cppLoop+0x44a>
 8007d74:	486e      	ldr	r0, [pc, #440]	; (8007f30 <cppLoop+0x5f0>)
 8007d76:	f7fc f864 	bl	8003e42 <_ZN9LineTrace10getMaxAcc2Ev>
 8007d7a:	eef0 7a40 	vmov.f32	s15, s0
 8007d7e:	4b76      	ldr	r3, [pc, #472]	; (8007f58 <cppLoop+0x618>)
 8007d80:	edc3 7a00 	vstr	s15, [r3]
 8007d84:	4873      	ldr	r0, [pc, #460]	; (8007f54 <cppLoop+0x614>)
 8007d86:	f00c fbec 	bl	8014562 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007d8a:	4b74      	ldr	r3, [pc, #464]	; (8007f5c <cppLoop+0x61c>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f3bf 8f5b 	dmb	ish
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2301      	moveq	r3, #1
 8007d9e:	2300      	movne	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d015      	beq.n	8007dd2 <cppLoop+0x492>
 8007da6:	486d      	ldr	r0, [pc, #436]	; (8007f5c <cppLoop+0x61c>)
 8007da8:	f00c fbcf 	bl	801454a <__cxa_guard_acquire>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bf14      	ite	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	2300      	moveq	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <cppLoop+0x492>
 8007dbc:	485c      	ldr	r0, [pc, #368]	; (8007f30 <cppLoop+0x5f0>)
 8007dbe:	f7fc f82e 	bl	8003e1e <_ZN9LineTrace10getMaxDec2Ev>
 8007dc2:	eef0 7a40 	vmov.f32	s15, s0
 8007dc6:	4b66      	ldr	r3, [pc, #408]	; (8007f60 <cppLoop+0x620>)
 8007dc8:	edc3 7a00 	vstr	s15, [r3]
 8007dcc:	4863      	ldr	r0, [pc, #396]	; (8007f5c <cppLoop+0x61c>)
 8007dce:	f00c fbc8 	bl	8014562 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007dd2:	4864      	ldr	r0, [pc, #400]	; (8007f64 <cppLoop+0x624>)
 8007dd4:	f7fd fa1a 	bl	800520c <_ZN12RotarySwitch8getValueEv>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b0f      	cmp	r3, #15
 8007ddc:	f201 8586 	bhi.w	80098ec <cppLoop+0x1fac>
 8007de0:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <cppLoop+0x4a8>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007e29 	.word	0x08007e29
 8007dec:	080081ad 	.word	0x080081ad
 8007df0:	080082c9 	.word	0x080082c9
 8007df4:	0800841b 	.word	0x0800841b
 8007df8:	0800850f 	.word	0x0800850f
 8007dfc:	080087b1 	.word	0x080087b1
 8007e00:	08008919 	.word	0x08008919
 8007e04:	08008b9d 	.word	0x08008b9d
 8007e08:	08008de7 	.word	0x08008de7
 8007e0c:	08009077 	.word	0x08009077
 8007e10:	08009133 	.word	0x08009133
 8007e14:	08009229 	.word	0x08009229
 8007e18:	080092af 	.word	0x080092af
 8007e1c:	08009375 	.word	0x08009375
 8007e20:	0800943b 	.word	0x0800943b
 8007e24:	0800957d 	.word	0x0800957d
	case 0:
		led.fullColor('W');
 8007e28:	2157      	movs	r1, #87	; 0x57
 8007e2a:	484f      	ldr	r0, [pc, #316]	; (8007f68 <cppLoop+0x628>)
 8007e2c:	f7fa f936 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e30:	f7f9 f936 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e34:	2100      	movs	r1, #0
 8007e36:	2000      	movs	r0, #0
 8007e38:	f7f9 f942 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 8007e3c:	483c      	ldr	r0, [pc, #240]	; (8007f30 <cppLoop+0x5f0>)
 8007e3e:	f7fb fecc 	bl	8003bda <_ZN9LineTrace9getKpSlowEv>
 8007e42:	eeb0 7a40 	vmov.f32	s14, s0
 8007e46:	eddf 7a49 	vldr	s15, [pc, #292]	; 8007f6c <cppLoop+0x62c>
 8007e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e52:	f7fa fce5 	bl	8002820 <_ZSt3absf>
 8007e56:	ee10 3a10 	vmov	r3, s0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7f8 fb8c 	bl	8000578 <__aeabi_f2d>
 8007e60:	4603      	mov	r3, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	461a      	mov	r2, r3
 8007e66:	4623      	mov	r3, r4
 8007e68:	4841      	ldr	r0, [pc, #260]	; (8007f70 <cppLoop+0x630>)
 8007e6a:	f7f9 f953 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007e6e:	2101      	movs	r1, #1
 8007e70:	2000      	movs	r0, #0
 8007e72:	f7f9 f925 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*100000));
 8007e76:	482e      	ldr	r0, [pc, #184]	; (8007f30 <cppLoop+0x5f0>)
 8007e78:	f7fb febe 	bl	8003bf8 <_ZN9LineTrace9getKiSlowEv>
 8007e7c:	eeb0 7a40 	vmov.f32	s14, s0
 8007e80:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8007f74 <cppLoop+0x634>
 8007e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e88:	eeb0 0a67 	vmov.f32	s0, s15
 8007e8c:	f7fa fcc8 	bl	8002820 <_ZSt3absf>
 8007e90:	ee10 3a10 	vmov	r3, s0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7f8 fb6f 	bl	8000578 <__aeabi_f2d>
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	460e      	mov	r6, r1
 8007e9e:	4824      	ldr	r0, [pc, #144]	; (8007f30 <cppLoop+0x5f0>)
 8007ea0:	f7fb feb9 	bl	8003c16 <_ZN9LineTrace9getKdSlowEv>
 8007ea4:	eeb0 7a40 	vmov.f32	s14, s0
 8007ea8:	eddf 7a33 	vldr	s15, [pc, #204]	; 8007f78 <cppLoop+0x638>
 8007eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8007eb4:	f7fa fcb4 	bl	8002820 <_ZSt3absf>
 8007eb8:	ee10 3a10 	vmov	r3, s0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f8 fb5b 	bl	8000578 <__aeabi_f2d>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	e9cd 3400 	strd	r3, r4, [sp]
 8007eca:	462a      	mov	r2, r5
 8007ecc:	4633      	mov	r3, r6
 8007ece:	482b      	ldr	r0, [pc, #172]	; (8007f7c <cppLoop+0x63c>)
 8007ed0:	f7f9 f920 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007ed4:	482a      	ldr	r0, [pc, #168]	; (8007f80 <cppLoop+0x640>)
 8007ed6:	f7fa f87d 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	bf0c      	ite	eq
 8007ee0:	2301      	moveq	r3, #1
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d04e      	beq.n	8007f88 <cppLoop+0x648>
			led.LR(-1, 1);
 8007eea:	2201      	movs	r2, #1
 8007eec:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef0:	481d      	ldr	r0, [pc, #116]	; (8007f68 <cppLoop+0x628>)
 8007ef2:	f7fa f98f 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ef6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007efa:	f001 fe41 	bl	8009b80 <HAL_Delay>

			selector++;
 8007efe:	4b21      	ldr	r3, [pc, #132]	; (8007f84 <cppLoop+0x644>)
 8007f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3301      	adds	r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	b21a      	sxth	r2, r3
 8007f0c:	4b1d      	ldr	r3, [pc, #116]	; (8007f84 <cppLoop+0x644>)
 8007f0e:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007f10:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <cppLoop+0x644>)
 8007f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dd02      	ble.n	8007f20 <cppLoop+0x5e0>
 8007f1a:	4b1a      	ldr	r3, [pc, #104]	; (8007f84 <cppLoop+0x644>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007f20:	2200      	movs	r2, #0
 8007f22:	f04f 31ff 	mov.w	r1, #4294967295
 8007f26:	4810      	ldr	r0, [pc, #64]	; (8007f68 <cppLoop+0x628>)
 8007f28:	f7fa f974 	bl	8002214 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8007f2c:	f001 bce0 	b.w	80098f0 <cppLoop+0x1fb0>
 8007f30:	2002389c 	.word	0x2002389c
 8007f34:	20048164 	.word	0x20048164
 8007f38:	20048168 	.word	0x20048168
 8007f3c:	20048170 	.word	0x20048170
 8007f40:	2004816c 	.word	0x2004816c
 8007f44:	20048178 	.word	0x20048178
 8007f48:	20048174 	.word	0x20048174
 8007f4c:	20048180 	.word	0x20048180
 8007f50:	2004817c 	.word	0x2004817c
 8007f54:	20048188 	.word	0x20048188
 8007f58:	20048184 	.word	0x20048184
 8007f5c:	20048190 	.word	0x20048190
 8007f60:	2004818c 	.word	0x2004818c
 8007f64:	20000544 	.word	0x20000544
 8007f68:	2000054c 	.word	0x2000054c
 8007f6c:	461c4000 	.word	0x461c4000
 8007f70:	08018bc0 	.word	0x08018bc0
 8007f74:	447a0000 	.word	0x447a0000
 8007f78:	47c35000 	.word	0x47c35000
 8007f7c:	08018bcc 	.word	0x08018bcc
 8007f80:	20000540 	.word	0x20000540
 8007f84:	20048110 	.word	0x20048110
		else if(joy_stick.getValue() == JOY_R){
 8007f88:	48bd      	ldr	r0, [pc, #756]	; (8008280 <cppLoop+0x940>)
 8007f8a:	f7fa f823 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b10      	cmp	r3, #16
 8007f92:	bf0c      	ite	eq
 8007f94:	2301      	moveq	r3, #1
 8007f96:	2300      	movne	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d059      	beq.n	8008052 <cppLoop+0x712>
			led.LR(-1, 1);
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8007fa4:	48b7      	ldr	r0, [pc, #732]	; (8008284 <cppLoop+0x944>)
 8007fa6:	f7fa f935 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007faa:	2064      	movs	r0, #100	; 0x64
 8007fac:	f001 fde8 	bl	8009b80 <HAL_Delay>
			if(selector == 0){
 8007fb0:	4bb5      	ldr	r3, [pc, #724]	; (8008288 <cppLoop+0x948>)
 8007fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d113      	bne.n	8007fe2 <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.000001;
 8007fba:	4bb4      	ldr	r3, [pc, #720]	; (800828c <cppLoop+0x94c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7f8 fada 	bl	8000578 <__aeabi_f2d>
 8007fc4:	a3a8      	add	r3, pc, #672	; (adr r3, 8008268 <cppLoop+0x928>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f7f8 f977 	bl	80002bc <__adddf3>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	f7f8 fe1f 	bl	8000c18 <__aeabi_d2f>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	4bab      	ldr	r3, [pc, #684]	; (800828c <cppLoop+0x94c>)
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e02b      	b.n	800803a <cppLoop+0x6fa>
			else if(selector == 1){
 8007fe2:	4ba9      	ldr	r3, [pc, #676]	; (8008288 <cppLoop+0x948>)
 8007fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d113      	bne.n	8008014 <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.00001;
 8007fec:	4ba8      	ldr	r3, [pc, #672]	; (8008290 <cppLoop+0x950>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7f8 fac1 	bl	8000578 <__aeabi_f2d>
 8007ff6:	a39e      	add	r3, pc, #632	; (adr r3, 8008270 <cppLoop+0x930>)
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f7f8 f95e 	bl	80002bc <__adddf3>
 8008000:	4603      	mov	r3, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4618      	mov	r0, r3
 8008006:	4621      	mov	r1, r4
 8008008:	f7f8 fe06 	bl	8000c18 <__aeabi_d2f>
 800800c:	4602      	mov	r2, r0
 800800e:	4ba0      	ldr	r3, [pc, #640]	; (8008290 <cppLoop+0x950>)
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e012      	b.n	800803a <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.0000001;
 8008014:	4b9f      	ldr	r3, [pc, #636]	; (8008294 <cppLoop+0x954>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f7f8 faad 	bl	8000578 <__aeabi_f2d>
 800801e:	a396      	add	r3, pc, #600	; (adr r3, 8008278 <cppLoop+0x938>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f7f8 f94a 	bl	80002bc <__adddf3>
 8008028:	4603      	mov	r3, r0
 800802a:	460c      	mov	r4, r1
 800802c:	4618      	mov	r0, r3
 800802e:	4621      	mov	r1, r4
 8008030:	f7f8 fdf2 	bl	8000c18 <__aeabi_d2f>
 8008034:	4602      	mov	r2, r0
 8008036:	4b97      	ldr	r3, [pc, #604]	; (8008294 <cppLoop+0x954>)
 8008038:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800803a:	2152      	movs	r1, #82	; 0x52
 800803c:	4891      	ldr	r0, [pc, #580]	; (8008284 <cppLoop+0x944>)
 800803e:	f7fa f82d 	bl	800209c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008042:	2200      	movs	r2, #0
 8008044:	f04f 31ff 	mov.w	r1, #4294967295
 8008048:	488e      	ldr	r0, [pc, #568]	; (8008284 <cppLoop+0x944>)
 800804a:	f7fa f8e3 	bl	8002214 <_ZN3LED2LREaa>
		break;
 800804e:	f001 bc4f 	b.w	80098f0 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_L){
 8008052:	488b      	ldr	r0, [pc, #556]	; (8008280 <cppLoop+0x940>)
 8008054:	f7f9 ffbe 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008058:	4603      	mov	r3, r0
 800805a:	2b01      	cmp	r3, #1
 800805c:	bf0c      	ite	eq
 800805e:	2301      	moveq	r3, #1
 8008060:	2300      	movne	r3, #0
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d059      	beq.n	800811c <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008068:	2201      	movs	r2, #1
 800806a:	f04f 31ff 	mov.w	r1, #4294967295
 800806e:	4885      	ldr	r0, [pc, #532]	; (8008284 <cppLoop+0x944>)
 8008070:	f7fa f8d0 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008074:	2064      	movs	r0, #100	; 0x64
 8008076:	f001 fd83 	bl	8009b80 <HAL_Delay>
			if(selector == 0){
 800807a:	4b83      	ldr	r3, [pc, #524]	; (8008288 <cppLoop+0x948>)
 800807c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d113      	bne.n	80080ac <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 8008084:	4b81      	ldr	r3, [pc, #516]	; (800828c <cppLoop+0x94c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f7f8 fa75 	bl	8000578 <__aeabi_f2d>
 800808e:	a376      	add	r3, pc, #472	; (adr r3, 8008268 <cppLoop+0x928>)
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	f7f8 f910 	bl	80002b8 <__aeabi_dsub>
 8008098:	4603      	mov	r3, r0
 800809a:	460c      	mov	r4, r1
 800809c:	4618      	mov	r0, r3
 800809e:	4621      	mov	r1, r4
 80080a0:	f7f8 fdba 	bl	8000c18 <__aeabi_d2f>
 80080a4:	4602      	mov	r2, r0
 80080a6:	4b79      	ldr	r3, [pc, #484]	; (800828c <cppLoop+0x94c>)
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e02b      	b.n	8008104 <cppLoop+0x7c4>
			else if(selector == 1){
 80080ac:	4b76      	ldr	r3, [pc, #472]	; (8008288 <cppLoop+0x948>)
 80080ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d113      	bne.n	80080de <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 80080b6:	4b76      	ldr	r3, [pc, #472]	; (8008290 <cppLoop+0x950>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7f8 fa5c 	bl	8000578 <__aeabi_f2d>
 80080c0:	a36b      	add	r3, pc, #428	; (adr r3, 8008270 <cppLoop+0x930>)
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 f8f7 	bl	80002b8 <__aeabi_dsub>
 80080ca:	4603      	mov	r3, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	4618      	mov	r0, r3
 80080d0:	4621      	mov	r1, r4
 80080d2:	f7f8 fda1 	bl	8000c18 <__aeabi_d2f>
 80080d6:	4602      	mov	r2, r0
 80080d8:	4b6d      	ldr	r3, [pc, #436]	; (8008290 <cppLoop+0x950>)
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	e012      	b.n	8008104 <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.0000001;
 80080de:	4b6d      	ldr	r3, [pc, #436]	; (8008294 <cppLoop+0x954>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7f8 fa48 	bl	8000578 <__aeabi_f2d>
 80080e8:	a363      	add	r3, pc, #396	; (adr r3, 8008278 <cppLoop+0x938>)
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	f7f8 f8e3 	bl	80002b8 <__aeabi_dsub>
 80080f2:	4603      	mov	r3, r0
 80080f4:	460c      	mov	r4, r1
 80080f6:	4618      	mov	r0, r3
 80080f8:	4621      	mov	r1, r4
 80080fa:	f7f8 fd8d 	bl	8000c18 <__aeabi_d2f>
 80080fe:	4602      	mov	r2, r0
 8008100:	4b64      	ldr	r3, [pc, #400]	; (8008294 <cppLoop+0x954>)
 8008102:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008104:	2152      	movs	r1, #82	; 0x52
 8008106:	485f      	ldr	r0, [pc, #380]	; (8008284 <cppLoop+0x944>)
 8008108:	f7f9 ffc8 	bl	800209c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800810c:	2200      	movs	r2, #0
 800810e:	f04f 31ff 	mov.w	r1, #4294967295
 8008112:	485c      	ldr	r0, [pc, #368]	; (8008284 <cppLoop+0x944>)
 8008114:	f7fa f87e 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008118:	f001 bbea 	b.w	80098f0 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_C){
 800811c:	4858      	ldr	r0, [pc, #352]	; (8008280 <cppLoop+0x940>)
 800811e:	f7f9 ff59 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008122:	4603      	mov	r3, r0
 8008124:	2b02      	cmp	r3, #2
 8008126:	bf0c      	ite	eq
 8008128:	2301      	moveq	r3, #1
 800812a:	2300      	movne	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	f001 83de 	beq.w	80098f0 <cppLoop+0x1fb0>
			led.LR(-1, 1);
 8008134:	2201      	movs	r2, #1
 8008136:	f04f 31ff 	mov.w	r1, #4294967295
 800813a:	4852      	ldr	r0, [pc, #328]	; (8008284 <cppLoop+0x944>)
 800813c:	f7fa f86a 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008140:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008144:	f001 fd1c 	bl	8009b80 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008148:	2300      	movs	r3, #0
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4b4f      	ldr	r3, [pc, #316]	; (800828c <cppLoop+0x94c>)
 800814e:	2201      	movs	r2, #1
 8008150:	4951      	ldr	r1, [pc, #324]	; (8008298 <cppLoop+0x958>)
 8008152:	4852      	ldr	r0, [pc, #328]	; (800829c <cppLoop+0x95c>)
 8008154:	f7f9 fb28 	bl	80017a8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008158:	2300      	movs	r3, #0
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	4b4c      	ldr	r3, [pc, #304]	; (8008290 <cppLoop+0x950>)
 800815e:	2201      	movs	r2, #1
 8008160:	494f      	ldr	r1, [pc, #316]	; (80082a0 <cppLoop+0x960>)
 8008162:	484e      	ldr	r0, [pc, #312]	; (800829c <cppLoop+0x95c>)
 8008164:	f7f9 fb20 	bl	80017a8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008168:	2300      	movs	r3, #0
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	4b49      	ldr	r3, [pc, #292]	; (8008294 <cppLoop+0x954>)
 800816e:	2201      	movs	r2, #1
 8008170:	494c      	ldr	r1, [pc, #304]	; (80082a4 <cppLoop+0x964>)
 8008172:	484a      	ldr	r0, [pc, #296]	; (800829c <cppLoop+0x95c>)
 8008174:	f7f9 fb18 	bl	80017a8 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008178:	4b44      	ldr	r3, [pc, #272]	; (800828c <cppLoop+0x94c>)
 800817a:	edd3 7a00 	vldr	s15, [r3]
 800817e:	4b44      	ldr	r3, [pc, #272]	; (8008290 <cppLoop+0x950>)
 8008180:	ed93 7a00 	vldr	s14, [r3]
 8008184:	4b43      	ldr	r3, [pc, #268]	; (8008294 <cppLoop+0x954>)
 8008186:	edd3 6a00 	vldr	s13, [r3]
 800818a:	eeb0 1a66 	vmov.f32	s2, s13
 800818e:	eef0 0a47 	vmov.f32	s1, s14
 8008192:	eeb0 0a67 	vmov.f32	s0, s15
 8008196:	4844      	ldr	r0, [pc, #272]	; (80082a8 <cppLoop+0x968>)
 8008198:	f7fb fd06 	bl	8003ba8 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 800819c:	2200      	movs	r2, #0
 800819e:	f04f 31ff 	mov.w	r1, #4294967295
 80081a2:	4838      	ldr	r0, [pc, #224]	; (8008284 <cppLoop+0x944>)
 80081a4:	f7fa f836 	bl	8002214 <_ZN3LED2LREaa>
		break;
 80081a8:	f001 bba2 	b.w	80098f0 <cppLoop+0x1fb0>

	case 1:
		led.fullColor('C');
 80081ac:	2143      	movs	r1, #67	; 0x43
 80081ae:	4835      	ldr	r0, [pc, #212]	; (8008284 <cppLoop+0x944>)
 80081b0:	f7f9 ff74 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 80081b4:	f7f8 ff74 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081b8:	2100      	movs	r1, #0
 80081ba:	2000      	movs	r0, #0
 80081bc:	f7f8 ff80 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80081c0:	483a      	ldr	r0, [pc, #232]	; (80082ac <cppLoop+0x96c>)
 80081c2:	f7f8 ffa7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80081c6:	2101      	movs	r1, #1
 80081c8:	2000      	movs	r0, #0
 80081ca:	f7f8 ff79 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80081ce:	4b38      	ldr	r3, [pc, #224]	; (80082b0 <cppLoop+0x970>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7f8 f9d0 	bl	8000578 <__aeabi_f2d>
 80081d8:	4603      	mov	r3, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	461a      	mov	r2, r3
 80081de:	4623      	mov	r3, r4
 80081e0:	4834      	ldr	r0, [pc, #208]	; (80082b4 <cppLoop+0x974>)
 80081e2:	f7f8 ff97 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80081e6:	4826      	ldr	r0, [pc, #152]	; (8008280 <cppLoop+0x940>)
 80081e8:	f7f9 fef4 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	bf0c      	ite	eq
 80081f2:	2301      	moveq	r3, #1
 80081f4:	2300      	movne	r3, #0
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f001 837b 	beq.w	80098f4 <cppLoop+0x1fb4>
			HAL_Delay(500);
 80081fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008202:	f001 fcbd 	bl	8009b80 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008206:	4b2a      	ldr	r3, [pc, #168]	; (80082b0 <cppLoop+0x970>)
 8008208:	edd3 7a00 	vldr	s15, [r3]
 800820c:	eeb0 0a67 	vmov.f32	s0, s15
 8008210:	4825      	ldr	r0, [pc, #148]	; (80082a8 <cppLoop+0x968>)
 8008212:	f7fb fd1e 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008216:	f04f 32ff 	mov.w	r2, #4294967295
 800821a:	2101      	movs	r1, #1
 800821c:	4819      	ldr	r0, [pc, #100]	; (8008284 <cppLoop+0x944>)
 800821e:	f7f9 fff9 	bl	8002214 <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 8008222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008226:	f001 fcab 	bl	8009b80 <HAL_Delay>
			//logger.start();

			// Run
			line_trace.setMode(FIRST_RUNNING);
 800822a:	2100      	movs	r1, #0
 800822c:	481e      	ldr	r0, [pc, #120]	; (80082a8 <cppLoop+0x968>)
 800822e:	f7fb ff5f 	bl	80040f0 <_ZN9LineTrace7setModeEs>

			logger.start();
 8008232:	4821      	ldr	r0, [pc, #132]	; (80082b8 <cppLoop+0x978>)
 8008234:	f7fc fd08 	bl	8004c48 <_ZN6Logger5startEv>

			line_trace.running();
 8008238:	481b      	ldr	r0, [pc, #108]	; (80082a8 <cppLoop+0x968>)
 800823a:	f7fb ff9d 	bl	8004178 <_ZN9LineTrace7runningEv>

			logger.stop();
 800823e:	481e      	ldr	r0, [pc, #120]	; (80082b8 <cppLoop+0x978>)
 8008240:	f7fc fd21 	bl	8004c86 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8008244:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <cppLoop+0x97c>)
 8008246:	491e      	ldr	r1, [pc, #120]	; (80082c0 <cppLoop+0x980>)
 8008248:	481b      	ldr	r0, [pc, #108]	; (80082b8 <cppLoop+0x978>)
 800824a:	f7fc fbf8 	bl	8004a3e <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800824e:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <cppLoop+0x984>)
 8008250:	491b      	ldr	r1, [pc, #108]	; (80082c0 <cppLoop+0x980>)
 8008252:	4819      	ldr	r0, [pc, #100]	; (80082b8 <cppLoop+0x978>)
 8008254:	f7fc fc07 	bl	8004a66 <_ZN6Logger9saveLogs2EPKcS1_>
			// Record stop and save
			//logger.stop();
			//logger.saveLogsInt("STATELOG", "LPERIOD.txt");
			//logger.saveLogs2Int("STATELOG", "RPERIOD.txt");

			led.LR(0, -1);
 8008258:	f04f 32ff 	mov.w	r2, #4294967295
 800825c:	2100      	movs	r1, #0
 800825e:	4809      	ldr	r0, [pc, #36]	; (8008284 <cppLoop+0x944>)
 8008260:	f7f9 ffd8 	bl	8002214 <_ZN3LED2LREaa>
		}

		break;
 8008264:	f001 bb46 	b.w	80098f4 <cppLoop+0x1fb4>
 8008268:	a0b5ed8d 	.word	0xa0b5ed8d
 800826c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008270:	88e368f1 	.word	0x88e368f1
 8008274:	3ee4f8b5 	.word	0x3ee4f8b5
 8008278:	9abcaf48 	.word	0x9abcaf48
 800827c:	3e7ad7f2 	.word	0x3e7ad7f2
 8008280:	20000540 	.word	0x20000540
 8008284:	2000054c 	.word	0x2000054c
 8008288:	20048110 	.word	0x20048110
 800828c:	20048134 	.word	0x20048134
 8008290:	2004813c 	.word	0x2004813c
 8008294:	20048144 	.word	0x20048144
 8008298:	08018bdc 	.word	0x08018bdc
 800829c:	08018be8 	.word	0x08018be8
 80082a0:	08018bf0 	.word	0x08018bf0
 80082a4:	08018bfc 	.word	0x08018bfc
 80082a8:	2002389c 	.word	0x2002389c
 80082ac:	08018c08 	.word	0x08018c08
 80082b0:	2004814c 	.word	0x2004814c
 80082b4:	08018c14 	.word	0x08018c14
 80082b8:	20000570 	.word	0x20000570
 80082bc:	08018c20 	.word	0x08018c20
 80082c0:	08018c2c 	.word	0x08018c2c
 80082c4:	08018c38 	.word	0x08018c38

	case 2:
		led.fullColor('B');
 80082c8:	2142      	movs	r1, #66	; 0x42
 80082ca:	48c1      	ldr	r0, [pc, #772]	; (80085d0 <cppLoop+0xc90>)
 80082cc:	f7f9 fee6 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 80082d0:	f7f8 fee6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082d4:	2100      	movs	r1, #0
 80082d6:	2000      	movs	r0, #0
 80082d8:	f7f8 fef2 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80082dc:	48bd      	ldr	r0, [pc, #756]	; (80085d4 <cppLoop+0xc94>)
 80082de:	f7f8 ff19 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80082e2:	2101      	movs	r1, #1
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7f8 feeb 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80082ea:	4bbb      	ldr	r3, [pc, #748]	; (80085d8 <cppLoop+0xc98>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7f8 f942 	bl	8000578 <__aeabi_f2d>
 80082f4:	4603      	mov	r3, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	461a      	mov	r2, r3
 80082fa:	4623      	mov	r3, r4
 80082fc:	48b7      	ldr	r0, [pc, #732]	; (80085dc <cppLoop+0xc9c>)
 80082fe:	f7f8 ff09 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8008302:	48b7      	ldr	r0, [pc, #732]	; (80085e0 <cppLoop+0xca0>)
 8008304:	f7f9 fe66 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008308:	4603      	mov	r3, r0
 800830a:	2b10      	cmp	r3, #16
 800830c:	bf0c      	ite	eq
 800830e:	2301      	moveq	r3, #1
 8008310:	2300      	movne	r3, #0
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d023      	beq.n	8008360 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008318:	2201      	movs	r2, #1
 800831a:	f04f 31ff 	mov.w	r1, #4294967295
 800831e:	48ac      	ldr	r0, [pc, #688]	; (80085d0 <cppLoop+0xc90>)
 8008320:	f7f9 ff78 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008324:	2064      	movs	r0, #100	; 0x64
 8008326:	f001 fc2b 	bl	8009b80 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800832a:	4bab      	ldr	r3, [pc, #684]	; (80085d8 <cppLoop+0xc98>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f7f8 f922 	bl	8000578 <__aeabi_f2d>
 8008334:	a3a4      	add	r3, pc, #656	; (adr r3, 80085c8 <cppLoop+0xc88>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f7f7 ffbf 	bl	80002bc <__adddf3>
 800833e:	4603      	mov	r3, r0
 8008340:	460c      	mov	r4, r1
 8008342:	4618      	mov	r0, r3
 8008344:	4621      	mov	r1, r4
 8008346:	f7f8 fc67 	bl	8000c18 <__aeabi_d2f>
 800834a:	4602      	mov	r2, r0
 800834c:	4ba2      	ldr	r3, [pc, #648]	; (80085d8 <cppLoop+0xc98>)
 800834e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008350:	2200      	movs	r2, #0
 8008352:	f04f 31ff 	mov.w	r1, #4294967295
 8008356:	489e      	ldr	r0, [pc, #632]	; (80085d0 <cppLoop+0xc90>)
 8008358:	f7f9 ff5c 	bl	8002214 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800835c:	f001 bacc 	b.w	80098f8 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_L){
 8008360:	489f      	ldr	r0, [pc, #636]	; (80085e0 <cppLoop+0xca0>)
 8008362:	f7f9 fe37 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008366:	4603      	mov	r3, r0
 8008368:	2b01      	cmp	r3, #1
 800836a:	bf0c      	ite	eq
 800836c:	2301      	moveq	r3, #1
 800836e:	2300      	movne	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d023      	beq.n	80083be <cppLoop+0xa7e>
			led.LR(-1, 1);
 8008376:	2201      	movs	r2, #1
 8008378:	f04f 31ff 	mov.w	r1, #4294967295
 800837c:	4894      	ldr	r0, [pc, #592]	; (80085d0 <cppLoop+0xc90>)
 800837e:	f7f9 ff49 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008382:	2064      	movs	r0, #100	; 0x64
 8008384:	f001 fbfc 	bl	8009b80 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008388:	4b93      	ldr	r3, [pc, #588]	; (80085d8 <cppLoop+0xc98>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4618      	mov	r0, r3
 800838e:	f7f8 f8f3 	bl	8000578 <__aeabi_f2d>
 8008392:	a38d      	add	r3, pc, #564	; (adr r3, 80085c8 <cppLoop+0xc88>)
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7f7 ff8e 	bl	80002b8 <__aeabi_dsub>
 800839c:	4603      	mov	r3, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	4618      	mov	r0, r3
 80083a2:	4621      	mov	r1, r4
 80083a4:	f7f8 fc38 	bl	8000c18 <__aeabi_d2f>
 80083a8:	4602      	mov	r2, r0
 80083aa:	4b8b      	ldr	r3, [pc, #556]	; (80085d8 <cppLoop+0xc98>)
 80083ac:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80083ae:	2200      	movs	r2, #0
 80083b0:	f04f 31ff 	mov.w	r1, #4294967295
 80083b4:	4886      	ldr	r0, [pc, #536]	; (80085d0 <cppLoop+0xc90>)
 80083b6:	f7f9 ff2d 	bl	8002214 <_ZN3LED2LREaa>
		break;
 80083ba:	f001 ba9d 	b.w	80098f8 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_C){
 80083be:	4888      	ldr	r0, [pc, #544]	; (80085e0 <cppLoop+0xca0>)
 80083c0:	f7f9 fe08 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	bf0c      	ite	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	2300      	movne	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f001 8291 	beq.w	80098f8 <cppLoop+0x1fb8>
			led.LR(-1, 1);
 80083d6:	2201      	movs	r2, #1
 80083d8:	f04f 31ff 	mov.w	r1, #4294967295
 80083dc:	487c      	ldr	r0, [pc, #496]	; (80085d0 <cppLoop+0xc90>)
 80083de:	f7f9 ff19 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083e6:	f001 fbcb 	bl	8009b80 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80083ea:	2300      	movs	r3, #0
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	4b7a      	ldr	r3, [pc, #488]	; (80085d8 <cppLoop+0xc98>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	497c      	ldr	r1, [pc, #496]	; (80085e4 <cppLoop+0xca4>)
 80083f4:	487c      	ldr	r0, [pc, #496]	; (80085e8 <cppLoop+0xca8>)
 80083f6:	f7f9 f9d7 	bl	80017a8 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80083fa:	4b77      	ldr	r3, [pc, #476]	; (80085d8 <cppLoop+0xc98>)
 80083fc:	edd3 7a00 	vldr	s15, [r3]
 8008400:	eeb0 0a67 	vmov.f32	s0, s15
 8008404:	4879      	ldr	r0, [pc, #484]	; (80085ec <cppLoop+0xcac>)
 8008406:	f7fb fc24 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800840a:	2200      	movs	r2, #0
 800840c:	f04f 31ff 	mov.w	r1, #4294967295
 8008410:	486f      	ldr	r0, [pc, #444]	; (80085d0 <cppLoop+0xc90>)
 8008412:	f7f9 feff 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008416:	f001 ba6f 	b.w	80098f8 <cppLoop+0x1fb8>

	case 3:
		led.fullColor('Y');
 800841a:	2159      	movs	r1, #89	; 0x59
 800841c:	486c      	ldr	r0, [pc, #432]	; (80085d0 <cppLoop+0xc90>)
 800841e:	f7f9 fe3d 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008422:	f7f8 fe3d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008426:	2100      	movs	r1, #0
 8008428:	2000      	movs	r0, #0
 800842a:	f7f8 fe49 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 800842e:	4b70      	ldr	r3, [pc, #448]	; (80085f0 <cppLoop+0xcb0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f7f8 f8a0 	bl	8000578 <__aeabi_f2d>
 8008438:	4603      	mov	r3, r0
 800843a:	460c      	mov	r4, r1
 800843c:	461a      	mov	r2, r3
 800843e:	4623      	mov	r3, r4
 8008440:	486c      	ldr	r0, [pc, #432]	; (80085f4 <cppLoop+0xcb4>)
 8008442:	f7f8 fe67 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008446:	2101      	movs	r1, #1
 8008448:	2000      	movs	r0, #0
 800844a:	f7f8 fe39 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800844e:	4b6a      	ldr	r3, [pc, #424]	; (80085f8 <cppLoop+0xcb8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f7f8 f890 	bl	8000578 <__aeabi_f2d>
 8008458:	4603      	mov	r3, r0
 800845a:	460c      	mov	r4, r1
 800845c:	461a      	mov	r2, r3
 800845e:	4623      	mov	r3, r4
 8008460:	4866      	ldr	r0, [pc, #408]	; (80085fc <cppLoop+0xcbc>)
 8008462:	f7f8 fe57 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008466:	485e      	ldr	r0, [pc, #376]	; (80085e0 <cppLoop+0xca0>)
 8008468:	f7f9 fdb4 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 800846c:	4603      	mov	r3, r0
 800846e:	2b02      	cmp	r3, #2
 8008470:	bf0c      	ite	eq
 8008472:	2301      	moveq	r3, #1
 8008474:	2300      	movne	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	f001 823f 	beq.w	80098fc <cppLoop+0x1fbc>
			HAL_Delay(500);
 800847e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008482:	f001 fb7d 	bl	8009b80 <HAL_Delay>

			led.LR(1, -1);
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	2101      	movs	r1, #1
 800848c:	4850      	ldr	r0, [pc, #320]	; (80085d0 <cppLoop+0xc90>)
 800848e:	f7f9 fec1 	bl	8002214 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008492:	2101      	movs	r1, #1
 8008494:	4855      	ldr	r0, [pc, #340]	; (80085ec <cppLoop+0xcac>)
 8008496:	f7fb fe2b 	bl	80040f0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800849a:	4b57      	ldr	r3, [pc, #348]	; (80085f8 <cppLoop+0xcb8>)
 800849c:	edd3 7a00 	vldr	s15, [r3]
 80084a0:	eeb0 0a67 	vmov.f32	s0, s15
 80084a4:	4851      	ldr	r0, [pc, #324]	; (80085ec <cppLoop+0xcac>)
 80084a6:	f7fb fbd4 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80084aa:	4b51      	ldr	r3, [pc, #324]	; (80085f0 <cppLoop+0xcb0>)
 80084ac:	edd3 7a00 	vldr	s15, [r3]
 80084b0:	eeb0 0a67 	vmov.f32	s0, s15
 80084b4:	484d      	ldr	r0, [pc, #308]	; (80085ec <cppLoop+0xcac>)
 80084b6:	f7fb fbdc 	bl	8003c72 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80084ba:	4b4f      	ldr	r3, [pc, #316]	; (80085f8 <cppLoop+0xcb8>)
 80084bc:	edd3 7a00 	vldr	s15, [r3]
 80084c0:	eeb0 0a67 	vmov.f32	s0, s15
 80084c4:	4849      	ldr	r0, [pc, #292]	; (80085ec <cppLoop+0xcac>)
 80084c6:	f7fb fbf4 	bl	8003cb2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80084ca:	4848      	ldr	r0, [pc, #288]	; (80085ec <cppLoop+0xcac>)
 80084cc:	f7fb ff50 	bl	8004370 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(1000);
 80084d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084d4:	f001 fb54 	bl	8009b80 <HAL_Delay>

			logger.start();
 80084d8:	4849      	ldr	r0, [pc, #292]	; (8008600 <cppLoop+0xcc0>)
 80084da:	f7fc fbb5 	bl	8004c48 <_ZN6Logger5startEv>

			line_trace.running();
 80084de:	4843      	ldr	r0, [pc, #268]	; (80085ec <cppLoop+0xcac>)
 80084e0:	f7fb fe4a 	bl	8004178 <_ZN9LineTrace7runningEv>

			logger.stop();
 80084e4:	4846      	ldr	r0, [pc, #280]	; (8008600 <cppLoop+0xcc0>)
 80084e6:	f7fc fbce 	bl	8004c86 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 80084ea:	4a46      	ldr	r2, [pc, #280]	; (8008604 <cppLoop+0xcc4>)
 80084ec:	4946      	ldr	r1, [pc, #280]	; (8008608 <cppLoop+0xcc8>)
 80084ee:	4844      	ldr	r0, [pc, #272]	; (8008600 <cppLoop+0xcc0>)
 80084f0:	f7fc faa5 	bl	8004a3e <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 80084f4:	4a45      	ldr	r2, [pc, #276]	; (800860c <cppLoop+0xccc>)
 80084f6:	4944      	ldr	r1, [pc, #272]	; (8008608 <cppLoop+0xcc8>)
 80084f8:	4841      	ldr	r0, [pc, #260]	; (8008600 <cppLoop+0xcc0>)
 80084fa:	f7fc fab4 	bl	8004a66 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	2100      	movs	r1, #0
 8008504:	4832      	ldr	r0, [pc, #200]	; (80085d0 <cppLoop+0xc90>)
 8008506:	f7f9 fe85 	bl	8002214 <_ZN3LED2LREaa>
		}

		break;
 800850a:	f001 b9f7 	b.w	80098fc <cppLoop+0x1fbc>

	case 4:
		led.fullColor('G');
 800850e:	2147      	movs	r1, #71	; 0x47
 8008510:	482f      	ldr	r0, [pc, #188]	; (80085d0 <cppLoop+0xc90>)
 8008512:	f7f9 fdc3 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008516:	f7f8 fdc3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800851a:	2100      	movs	r1, #0
 800851c:	2000      	movs	r0, #0
 800851e:	f7f8 fdcf 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008522:	4832      	ldr	r0, [pc, #200]	; (80085ec <cppLoop+0xcac>)
 8008524:	f7fb fbf5 	bl	8003d12 <_ZN9LineTrace14getMaxVelocityEv>
 8008528:	ee10 3a10 	vmov	r3, s0
 800852c:	4618      	mov	r0, r3
 800852e:	f7f8 f823 	bl	8000578 <__aeabi_f2d>
 8008532:	4603      	mov	r3, r0
 8008534:	460c      	mov	r4, r1
 8008536:	461a      	mov	r2, r3
 8008538:	4623      	mov	r3, r4
 800853a:	482e      	ldr	r0, [pc, #184]	; (80085f4 <cppLoop+0xcb4>)
 800853c:	f7f8 fdea 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008540:	2101      	movs	r1, #1
 8008542:	2000      	movs	r0, #0
 8008544:	f7f8 fdbc 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008548:	4828      	ldr	r0, [pc, #160]	; (80085ec <cppLoop+0xcac>)
 800854a:	f7fb fc02 	bl	8003d52 <_ZN9LineTrace14getMinVelocityEv>
 800854e:	ee10 3a10 	vmov	r3, s0
 8008552:	4618      	mov	r0, r3
 8008554:	f7f8 f810 	bl	8000578 <__aeabi_f2d>
 8008558:	4603      	mov	r3, r0
 800855a:	460c      	mov	r4, r1
 800855c:	461a      	mov	r2, r3
 800855e:	4623      	mov	r3, r4
 8008560:	481e      	ldr	r0, [pc, #120]	; (80085dc <cppLoop+0xc9c>)
 8008562:	f7f8 fdd7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008566:	481e      	ldr	r0, [pc, #120]	; (80085e0 <cppLoop+0xca0>)
 8008568:	f7f9 fd34 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 800856c:	4603      	mov	r3, r0
 800856e:	2b08      	cmp	r3, #8
 8008570:	bf0c      	ite	eq
 8008572:	2301      	moveq	r3, #1
 8008574:	2300      	movne	r3, #0
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d04b      	beq.n	8008614 <cppLoop+0xcd4>
			led.LR(-1, 1);
 800857c:	2201      	movs	r2, #1
 800857e:	f04f 31ff 	mov.w	r1, #4294967295
 8008582:	4813      	ldr	r0, [pc, #76]	; (80085d0 <cppLoop+0xc90>)
 8008584:	f7f9 fe46 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008588:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800858c:	f001 faf8 	bl	8009b80 <HAL_Delay>

			selector_vel++;
 8008590:	4b1f      	ldr	r3, [pc, #124]	; (8008610 <cppLoop+0xcd0>)
 8008592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008596:	b29b      	uxth	r3, r3
 8008598:	3301      	adds	r3, #1
 800859a:	b29b      	uxth	r3, r3
 800859c:	b21a      	sxth	r2, r3
 800859e:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <cppLoop+0xcd0>)
 80085a0:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80085a2:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <cppLoop+0xcd0>)
 80085a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	dd02      	ble.n	80085b2 <cppLoop+0xc72>
 80085ac:	4b18      	ldr	r3, [pc, #96]	; (8008610 <cppLoop+0xcd0>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80085b2:	2200      	movs	r2, #0
 80085b4:	f04f 31ff 	mov.w	r1, #4294967295
 80085b8:	4805      	ldr	r0, [pc, #20]	; (80085d0 <cppLoop+0xc90>)
 80085ba:	f7f9 fe2b 	bl	8002214 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80085be:	f001 b99f 	b.w	8009900 <cppLoop+0x1fc0>
 80085c2:	bf00      	nop
 80085c4:	f3af 8000 	nop.w
 80085c8:	9999999a 	.word	0x9999999a
 80085cc:	3fb99999 	.word	0x3fb99999
 80085d0:	2000054c 	.word	0x2000054c
 80085d4:	08018c08 	.word	0x08018c08
 80085d8:	2004814c 	.word	0x2004814c
 80085dc:	08018c44 	.word	0x08018c44
 80085e0:	20000540 	.word	0x20000540
 80085e4:	08018c50 	.word	0x08018c50
 80085e8:	08018be8 	.word	0x08018be8
 80085ec:	2002389c 	.word	0x2002389c
 80085f0:	20048154 	.word	0x20048154
 80085f4:	08018c5c 	.word	0x08018c5c
 80085f8:	20048164 	.word	0x20048164
 80085fc:	08018c14 	.word	0x08018c14
 8008600:	20000570 	.word	0x20000570
 8008604:	08018c20 	.word	0x08018c20
 8008608:	08018c2c 	.word	0x08018c2c
 800860c:	08018c38 	.word	0x08018c38
 8008610:	20048116 	.word	0x20048116
		else if(joy_stick.getValue() == JOY_R){
 8008614:	48ac      	ldr	r0, [pc, #688]	; (80088c8 <cppLoop+0xf88>)
 8008616:	f7f9 fcdd 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 800861a:	4603      	mov	r3, r0
 800861c:	2b10      	cmp	r3, #16
 800861e:	bf0c      	ite	eq
 8008620:	2301      	moveq	r3, #1
 8008622:	2300      	movne	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d03c      	beq.n	80086a4 <cppLoop+0xd64>
			led.LR(-1, 1);
 800862a:	2201      	movs	r2, #1
 800862c:	f04f 31ff 	mov.w	r1, #4294967295
 8008630:	48a6      	ldr	r0, [pc, #664]	; (80088cc <cppLoop+0xf8c>)
 8008632:	f7f9 fdef 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008636:	2064      	movs	r0, #100	; 0x64
 8008638:	f001 faa2 	bl	8009b80 <HAL_Delay>
			if(selector_vel == 0)
 800863c:	4ba4      	ldr	r3, [pc, #656]	; (80088d0 <cppLoop+0xf90>)
 800863e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d113      	bne.n	800866e <cppLoop+0xd2e>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008646:	4ba3      	ldr	r3, [pc, #652]	; (80088d4 <cppLoop+0xf94>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4618      	mov	r0, r3
 800864c:	f7f7 ff94 	bl	8000578 <__aeabi_f2d>
 8008650:	a39b      	add	r3, pc, #620	; (adr r3, 80088c0 <cppLoop+0xf80>)
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	f7f7 fe31 	bl	80002bc <__adddf3>
 800865a:	4603      	mov	r3, r0
 800865c:	460c      	mov	r4, r1
 800865e:	4618      	mov	r0, r3
 8008660:	4621      	mov	r1, r4
 8008662:	f7f8 fad9 	bl	8000c18 <__aeabi_d2f>
 8008666:	4602      	mov	r2, r0
 8008668:	4b9a      	ldr	r3, [pc, #616]	; (80088d4 <cppLoop+0xf94>)
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	e012      	b.n	8008694 <cppLoop+0xd54>
				adj_min_velocity = adj_min_velocity + 0.1;
 800866e:	4b9a      	ldr	r3, [pc, #616]	; (80088d8 <cppLoop+0xf98>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7f7 ff80 	bl	8000578 <__aeabi_f2d>
 8008678:	a391      	add	r3, pc, #580	; (adr r3, 80088c0 <cppLoop+0xf80>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f7 fe1d 	bl	80002bc <__adddf3>
 8008682:	4603      	mov	r3, r0
 8008684:	460c      	mov	r4, r1
 8008686:	4618      	mov	r0, r3
 8008688:	4621      	mov	r1, r4
 800868a:	f7f8 fac5 	bl	8000c18 <__aeabi_d2f>
 800868e:	4602      	mov	r2, r0
 8008690:	4b91      	ldr	r3, [pc, #580]	; (80088d8 <cppLoop+0xf98>)
 8008692:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008694:	2200      	movs	r2, #0
 8008696:	f04f 31ff 	mov.w	r1, #4294967295
 800869a:	488c      	ldr	r0, [pc, #560]	; (80088cc <cppLoop+0xf8c>)
 800869c:	f7f9 fdba 	bl	8002214 <_ZN3LED2LREaa>
		break;
 80086a0:	f001 b92e 	b.w	8009900 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_L){
 80086a4:	4888      	ldr	r0, [pc, #544]	; (80088c8 <cppLoop+0xf88>)
 80086a6:	f7f9 fc95 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	bf0c      	ite	eq
 80086b0:	2301      	moveq	r3, #1
 80086b2:	2300      	movne	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d03c      	beq.n	8008734 <cppLoop+0xdf4>
			led.LR(-1, 1);
 80086ba:	2201      	movs	r2, #1
 80086bc:	f04f 31ff 	mov.w	r1, #4294967295
 80086c0:	4882      	ldr	r0, [pc, #520]	; (80088cc <cppLoop+0xf8c>)
 80086c2:	f7f9 fda7 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086c6:	2064      	movs	r0, #100	; 0x64
 80086c8:	f001 fa5a 	bl	8009b80 <HAL_Delay>
			if(selector_vel == 0)
 80086cc:	4b80      	ldr	r3, [pc, #512]	; (80088d0 <cppLoop+0xf90>)
 80086ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d113      	bne.n	80086fe <cppLoop+0xdbe>
				adj_max_velocity = adj_max_velocity - 0.1;
 80086d6:	4b7f      	ldr	r3, [pc, #508]	; (80088d4 <cppLoop+0xf94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f7f7 ff4c 	bl	8000578 <__aeabi_f2d>
 80086e0:	a377      	add	r3, pc, #476	; (adr r3, 80088c0 <cppLoop+0xf80>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f7 fde7 	bl	80002b8 <__aeabi_dsub>
 80086ea:	4603      	mov	r3, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	4618      	mov	r0, r3
 80086f0:	4621      	mov	r1, r4
 80086f2:	f7f8 fa91 	bl	8000c18 <__aeabi_d2f>
 80086f6:	4602      	mov	r2, r0
 80086f8:	4b76      	ldr	r3, [pc, #472]	; (80088d4 <cppLoop+0xf94>)
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	e012      	b.n	8008724 <cppLoop+0xde4>
				adj_min_velocity = adj_min_velocity - 0.1;
 80086fe:	4b76      	ldr	r3, [pc, #472]	; (80088d8 <cppLoop+0xf98>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f7f7 ff38 	bl	8000578 <__aeabi_f2d>
 8008708:	a36d      	add	r3, pc, #436	; (adr r3, 80088c0 <cppLoop+0xf80>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f7 fdd3 	bl	80002b8 <__aeabi_dsub>
 8008712:	4603      	mov	r3, r0
 8008714:	460c      	mov	r4, r1
 8008716:	4618      	mov	r0, r3
 8008718:	4621      	mov	r1, r4
 800871a:	f7f8 fa7d 	bl	8000c18 <__aeabi_d2f>
 800871e:	4602      	mov	r2, r0
 8008720:	4b6d      	ldr	r3, [pc, #436]	; (80088d8 <cppLoop+0xf98>)
 8008722:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008724:	2200      	movs	r2, #0
 8008726:	f04f 31ff 	mov.w	r1, #4294967295
 800872a:	4868      	ldr	r0, [pc, #416]	; (80088cc <cppLoop+0xf8c>)
 800872c:	f7f9 fd72 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008730:	f001 b8e6 	b.w	8009900 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_C){
 8008734:	4864      	ldr	r0, [pc, #400]	; (80088c8 <cppLoop+0xf88>)
 8008736:	f7f9 fc4d 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 800873a:	4603      	mov	r3, r0
 800873c:	2b02      	cmp	r3, #2
 800873e:	bf0c      	ite	eq
 8008740:	2301      	moveq	r3, #1
 8008742:	2300      	movne	r3, #0
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	f001 80da 	beq.w	8009900 <cppLoop+0x1fc0>
			led.LR(-1, 1);
 800874c:	2201      	movs	r2, #1
 800874e:	f04f 31ff 	mov.w	r1, #4294967295
 8008752:	485e      	ldr	r0, [pc, #376]	; (80088cc <cppLoop+0xf8c>)
 8008754:	f7f9 fd5e 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008758:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800875c:	f001 fa10 	bl	8009b80 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008760:	2300      	movs	r3, #0
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4b5b      	ldr	r3, [pc, #364]	; (80088d4 <cppLoop+0xf94>)
 8008766:	2201      	movs	r2, #1
 8008768:	495c      	ldr	r1, [pc, #368]	; (80088dc <cppLoop+0xf9c>)
 800876a:	485d      	ldr	r0, [pc, #372]	; (80088e0 <cppLoop+0xfa0>)
 800876c:	f7f9 f81c 	bl	80017a8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008770:	2300      	movs	r3, #0
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	4b58      	ldr	r3, [pc, #352]	; (80088d8 <cppLoop+0xf98>)
 8008776:	2201      	movs	r2, #1
 8008778:	495a      	ldr	r1, [pc, #360]	; (80088e4 <cppLoop+0xfa4>)
 800877a:	4859      	ldr	r0, [pc, #356]	; (80088e0 <cppLoop+0xfa0>)
 800877c:	f7f9 f814 	bl	80017a8 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008780:	4b54      	ldr	r3, [pc, #336]	; (80088d4 <cppLoop+0xf94>)
 8008782:	edd3 7a00 	vldr	s15, [r3]
 8008786:	eeb0 0a67 	vmov.f32	s0, s15
 800878a:	4857      	ldr	r0, [pc, #348]	; (80088e8 <cppLoop+0xfa8>)
 800878c:	f7fb fa71 	bl	8003c72 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008790:	4b51      	ldr	r3, [pc, #324]	; (80088d8 <cppLoop+0xf98>)
 8008792:	edd3 7a00 	vldr	s15, [r3]
 8008796:	eeb0 0a67 	vmov.f32	s0, s15
 800879a:	4853      	ldr	r0, [pc, #332]	; (80088e8 <cppLoop+0xfa8>)
 800879c:	f7fb fa89 	bl	8003cb2 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80087a0:	2200      	movs	r2, #0
 80087a2:	f04f 31ff 	mov.w	r1, #4294967295
 80087a6:	4849      	ldr	r0, [pc, #292]	; (80088cc <cppLoop+0xf8c>)
 80087a8:	f7f9 fd34 	bl	8002214 <_ZN3LED2LREaa>
		break;
 80087ac:	f001 b8a8 	b.w	8009900 <cppLoop+0x1fc0>

	case 5:
		led.fullColor('M');
 80087b0:	214d      	movs	r1, #77	; 0x4d
 80087b2:	4846      	ldr	r0, [pc, #280]	; (80088cc <cppLoop+0xf8c>)
 80087b4:	f7f9 fc72 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 80087b8:	f7f8 fc72 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087bc:	2100      	movs	r1, #0
 80087be:	2000      	movs	r0, #0
 80087c0:	f7f8 fc7e 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80087c4:	4b49      	ldr	r3, [pc, #292]	; (80088ec <cppLoop+0xfac>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7f7 fed5 	bl	8000578 <__aeabi_f2d>
 80087ce:	4603      	mov	r3, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	461a      	mov	r2, r3
 80087d4:	4623      	mov	r3, r4
 80087d6:	4846      	ldr	r0, [pc, #280]	; (80088f0 <cppLoop+0xfb0>)
 80087d8:	f7f8 fc9c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087dc:	2101      	movs	r1, #1
 80087de:	2000      	movs	r0, #0
 80087e0:	f7f8 fc6e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80087e4:	4b43      	ldr	r3, [pc, #268]	; (80088f4 <cppLoop+0xfb4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7f7 fec5 	bl	8000578 <__aeabi_f2d>
 80087ee:	4603      	mov	r3, r0
 80087f0:	460c      	mov	r4, r1
 80087f2:	461a      	mov	r2, r3
 80087f4:	4623      	mov	r3, r4
 80087f6:	4840      	ldr	r0, [pc, #256]	; (80088f8 <cppLoop+0xfb8>)
 80087f8:	f7f8 fc8c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80087fc:	4832      	ldr	r0, [pc, #200]	; (80088c8 <cppLoop+0xf88>)
 80087fe:	f7f9 fbe9 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008802:	4603      	mov	r3, r0
 8008804:	2b02      	cmp	r3, #2
 8008806:	bf0c      	ite	eq
 8008808:	2301      	moveq	r3, #1
 800880a:	2300      	movne	r3, #0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	f001 8078 	beq.w	8009904 <cppLoop+0x1fc4>
			HAL_Delay(500);
 8008814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008818:	f001 f9b2 	bl	8009b80 <HAL_Delay>

			led.LR(1, -1);
 800881c:	f04f 32ff 	mov.w	r2, #4294967295
 8008820:	2101      	movs	r1, #1
 8008822:	482a      	ldr	r0, [pc, #168]	; (80088cc <cppLoop+0xf8c>)
 8008824:	f7f9 fcf6 	bl	8002214 <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008828:	4b34      	ldr	r3, [pc, #208]	; (80088fc <cppLoop+0xfbc>)
 800882a:	edd3 7a00 	vldr	s15, [r3]
 800882e:	4b34      	ldr	r3, [pc, #208]	; (8008900 <cppLoop+0xfc0>)
 8008830:	ed93 7a00 	vldr	s14, [r3]
 8008834:	4b33      	ldr	r3, [pc, #204]	; (8008904 <cppLoop+0xfc4>)
 8008836:	edd3 6a00 	vldr	s13, [r3]
 800883a:	eeb0 1a66 	vmov.f32	s2, s13
 800883e:	eef0 0a47 	vmov.f32	s1, s14
 8008842:	eeb0 0a67 	vmov.f32	s0, s15
 8008846:	4828      	ldr	r0, [pc, #160]	; (80088e8 <cppLoop+0xfa8>)
 8008848:	f7fb f968 	bl	8003b1c <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 800884c:	2102      	movs	r1, #2
 800884e:	4826      	ldr	r0, [pc, #152]	; (80088e8 <cppLoop+0xfa8>)
 8008850:	f7fb fc4e 	bl	80040f0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008854:	4b27      	ldr	r3, [pc, #156]	; (80088f4 <cppLoop+0xfb4>)
 8008856:	edd3 7a00 	vldr	s15, [r3]
 800885a:	eeb0 0a67 	vmov.f32	s0, s15
 800885e:	4822      	ldr	r0, [pc, #136]	; (80088e8 <cppLoop+0xfa8>)
 8008860:	f7fb f9f7 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008864:	4b21      	ldr	r3, [pc, #132]	; (80088ec <cppLoop+0xfac>)
 8008866:	edd3 7a00 	vldr	s15, [r3]
 800886a:	eeb0 0a67 	vmov.f32	s0, s15
 800886e:	481e      	ldr	r0, [pc, #120]	; (80088e8 <cppLoop+0xfa8>)
 8008870:	f7fb fa0f 	bl	8003c92 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008874:	4b1f      	ldr	r3, [pc, #124]	; (80088f4 <cppLoop+0xfb4>)
 8008876:	edd3 7a00 	vldr	s15, [r3]
 800887a:	eeb0 0a67 	vmov.f32	s0, s15
 800887e:	481a      	ldr	r0, [pc, #104]	; (80088e8 <cppLoop+0xfa8>)
 8008880:	f7fb fa27 	bl	8003cd2 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008884:	4818      	ldr	r0, [pc, #96]	; (80088e8 <cppLoop+0xfa8>)
 8008886:	f7fb fd73 	bl	8004370 <_ZN9LineTrace20createVelocityTabeleEv>

			logger.start();
 800888a:	481f      	ldr	r0, [pc, #124]	; (8008908 <cppLoop+0xfc8>)
 800888c:	f7fc f9dc 	bl	8004c48 <_ZN6Logger5startEv>

			line_trace.running();
 8008890:	4815      	ldr	r0, [pc, #84]	; (80088e8 <cppLoop+0xfa8>)
 8008892:	f7fb fc71 	bl	8004178 <_ZN9LineTrace7runningEv>

			logger.stop();
 8008896:	481c      	ldr	r0, [pc, #112]	; (8008908 <cppLoop+0xfc8>)
 8008898:	f7fc f9f5 	bl	8004c86 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800889c:	4a1b      	ldr	r2, [pc, #108]	; (800890c <cppLoop+0xfcc>)
 800889e:	491c      	ldr	r1, [pc, #112]	; (8008910 <cppLoop+0xfd0>)
 80088a0:	4819      	ldr	r0, [pc, #100]	; (8008908 <cppLoop+0xfc8>)
 80088a2:	f7fc f8cc 	bl	8004a3e <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 80088a6:	4a1b      	ldr	r2, [pc, #108]	; (8008914 <cppLoop+0xfd4>)
 80088a8:	4919      	ldr	r1, [pc, #100]	; (8008910 <cppLoop+0xfd0>)
 80088aa:	4817      	ldr	r0, [pc, #92]	; (8008908 <cppLoop+0xfc8>)
 80088ac:	f7fc f8db 	bl	8004a66 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295
 80088b4:	2100      	movs	r1, #0
 80088b6:	4805      	ldr	r0, [pc, #20]	; (80088cc <cppLoop+0xf8c>)
 80088b8:	f7f9 fcac 	bl	8002214 <_ZN3LED2LREaa>
		}

		break;
 80088bc:	f001 b822 	b.w	8009904 <cppLoop+0x1fc4>
 80088c0:	9999999a 	.word	0x9999999a
 80088c4:	3fb99999 	.word	0x3fb99999
 80088c8:	20000540 	.word	0x20000540
 80088cc:	2000054c 	.word	0x2000054c
 80088d0:	20048116 	.word	0x20048116
 80088d4:	20048154 	.word	0x20048154
 80088d8:	20048164 	.word	0x20048164
 80088dc:	08018c68 	.word	0x08018c68
 80088e0:	08018be8 	.word	0x08018be8
 80088e4:	08018c74 	.word	0x08018c74
 80088e8:	2002389c 	.word	0x2002389c
 80088ec:	2004815c 	.word	0x2004815c
 80088f0:	08018c80 	.word	0x08018c80
 80088f4:	2004816c 	.word	0x2004816c
 80088f8:	08018c14 	.word	0x08018c14
 80088fc:	2004811c 	.word	0x2004811c
 8008900:	20048124 	.word	0x20048124
 8008904:	2004812c 	.word	0x2004812c
 8008908:	20000570 	.word	0x20000570
 800890c:	08018c20 	.word	0x08018c20
 8008910:	08018c2c 	.word	0x08018c2c
 8008914:	08018c38 	.word	0x08018c38

	case 6:
		led.fullColor('R');
 8008918:	2152      	movs	r1, #82	; 0x52
 800891a:	4895      	ldr	r0, [pc, #596]	; (8008b70 <cppLoop+0x1230>)
 800891c:	f7f9 fbbe 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008920:	f7f8 fbbe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008924:	2100      	movs	r1, #0
 8008926:	2000      	movs	r0, #0
 8008928:	f7f8 fbca 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 800892c:	4891      	ldr	r0, [pc, #580]	; (8008b74 <cppLoop+0x1234>)
 800892e:	f7fb fa00 	bl	8003d32 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008932:	ee10 3a10 	vmov	r3, s0
 8008936:	4618      	mov	r0, r3
 8008938:	f7f7 fe1e 	bl	8000578 <__aeabi_f2d>
 800893c:	4603      	mov	r3, r0
 800893e:	460c      	mov	r4, r1
 8008940:	461a      	mov	r2, r3
 8008942:	4623      	mov	r3, r4
 8008944:	488c      	ldr	r0, [pc, #560]	; (8008b78 <cppLoop+0x1238>)
 8008946:	f7f8 fbe5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800894a:	2101      	movs	r1, #1
 800894c:	2000      	movs	r0, #0
 800894e:	f7f8 fbb7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008952:	4888      	ldr	r0, [pc, #544]	; (8008b74 <cppLoop+0x1234>)
 8008954:	f7fb fa0d 	bl	8003d72 <_ZN9LineTrace15getMinVelocity2Ev>
 8008958:	ee10 3a10 	vmov	r3, s0
 800895c:	4618      	mov	r0, r3
 800895e:	f7f7 fe0b 	bl	8000578 <__aeabi_f2d>
 8008962:	4603      	mov	r3, r0
 8008964:	460c      	mov	r4, r1
 8008966:	461a      	mov	r2, r3
 8008968:	4623      	mov	r3, r4
 800896a:	4884      	ldr	r0, [pc, #528]	; (8008b7c <cppLoop+0x123c>)
 800896c:	f7f8 fbd2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008970:	4883      	ldr	r0, [pc, #524]	; (8008b80 <cppLoop+0x1240>)
 8008972:	f7f9 fb2f 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008976:	4603      	mov	r3, r0
 8008978:	2b08      	cmp	r3, #8
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d022      	beq.n	80089cc <cppLoop+0x108c>
			led.LR(-1, 1);
 8008986:	2201      	movs	r2, #1
 8008988:	f04f 31ff 	mov.w	r1, #4294967295
 800898c:	4878      	ldr	r0, [pc, #480]	; (8008b70 <cppLoop+0x1230>)
 800898e:	f7f9 fc41 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008992:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008996:	f001 f8f3 	bl	8009b80 <HAL_Delay>

			selector_vel2++;
 800899a:	4b7a      	ldr	r3, [pc, #488]	; (8008b84 <cppLoop+0x1244>)
 800899c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3301      	adds	r3, #1
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	b21a      	sxth	r2, r3
 80089a8:	4b76      	ldr	r3, [pc, #472]	; (8008b84 <cppLoop+0x1244>)
 80089aa:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80089ac:	4b75      	ldr	r3, [pc, #468]	; (8008b84 <cppLoop+0x1244>)
 80089ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	dd02      	ble.n	80089bc <cppLoop+0x107c>
 80089b6:	4b73      	ldr	r3, [pc, #460]	; (8008b84 <cppLoop+0x1244>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80089bc:	2200      	movs	r2, #0
 80089be:	f04f 31ff 	mov.w	r1, #4294967295
 80089c2:	486b      	ldr	r0, [pc, #428]	; (8008b70 <cppLoop+0x1230>)
 80089c4:	f7f9 fc26 	bl	8002214 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 80089c8:	f000 bf9e 	b.w	8009908 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_R){
 80089cc:	486c      	ldr	r0, [pc, #432]	; (8008b80 <cppLoop+0x1240>)
 80089ce:	f7f9 fb01 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b10      	cmp	r3, #16
 80089d6:	bf0c      	ite	eq
 80089d8:	2301      	moveq	r3, #1
 80089da:	2300      	movne	r3, #0
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d03c      	beq.n	8008a5c <cppLoop+0x111c>
			led.LR(-1, 1);
 80089e2:	2201      	movs	r2, #1
 80089e4:	f04f 31ff 	mov.w	r1, #4294967295
 80089e8:	4861      	ldr	r0, [pc, #388]	; (8008b70 <cppLoop+0x1230>)
 80089ea:	f7f9 fc13 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089ee:	2064      	movs	r0, #100	; 0x64
 80089f0:	f001 f8c6 	bl	8009b80 <HAL_Delay>
			if(selector_vel2 == 0)
 80089f4:	4b63      	ldr	r3, [pc, #396]	; (8008b84 <cppLoop+0x1244>)
 80089f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d113      	bne.n	8008a26 <cppLoop+0x10e6>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 80089fe:	4b62      	ldr	r3, [pc, #392]	; (8008b88 <cppLoop+0x1248>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7f7 fdb8 	bl	8000578 <__aeabi_f2d>
 8008a08:	a357      	add	r3, pc, #348	; (adr r3, 8008b68 <cppLoop+0x1228>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fc55 	bl	80002bc <__adddf3>
 8008a12:	4603      	mov	r3, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	4618      	mov	r0, r3
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f7f8 f8fd 	bl	8000c18 <__aeabi_d2f>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b59      	ldr	r3, [pc, #356]	; (8008b88 <cppLoop+0x1248>)
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	e012      	b.n	8008a4c <cppLoop+0x110c>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008a26:	4b59      	ldr	r3, [pc, #356]	; (8008b8c <cppLoop+0x124c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7f7 fda4 	bl	8000578 <__aeabi_f2d>
 8008a30:	a34d      	add	r3, pc, #308	; (adr r3, 8008b68 <cppLoop+0x1228>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fc41 	bl	80002bc <__adddf3>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	4618      	mov	r0, r3
 8008a40:	4621      	mov	r1, r4
 8008a42:	f7f8 f8e9 	bl	8000c18 <__aeabi_d2f>
 8008a46:	4602      	mov	r2, r0
 8008a48:	4b50      	ldr	r3, [pc, #320]	; (8008b8c <cppLoop+0x124c>)
 8008a4a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a52:	4847      	ldr	r0, [pc, #284]	; (8008b70 <cppLoop+0x1230>)
 8008a54:	f7f9 fbde 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008a58:	f000 bf56 	b.w	8009908 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_L){
 8008a5c:	4848      	ldr	r0, [pc, #288]	; (8008b80 <cppLoop+0x1240>)
 8008a5e:	f7f9 fab9 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d03c      	beq.n	8008aec <cppLoop+0x11ac>
			led.LR(-1, 1);
 8008a72:	2201      	movs	r2, #1
 8008a74:	f04f 31ff 	mov.w	r1, #4294967295
 8008a78:	483d      	ldr	r0, [pc, #244]	; (8008b70 <cppLoop+0x1230>)
 8008a7a:	f7f9 fbcb 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a7e:	2064      	movs	r0, #100	; 0x64
 8008a80:	f001 f87e 	bl	8009b80 <HAL_Delay>
			if(selector_vel2 == 0)
 8008a84:	4b3f      	ldr	r3, [pc, #252]	; (8008b84 <cppLoop+0x1244>)
 8008a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d113      	bne.n	8008ab6 <cppLoop+0x1176>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008a8e:	4b3e      	ldr	r3, [pc, #248]	; (8008b88 <cppLoop+0x1248>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f7 fd70 	bl	8000578 <__aeabi_f2d>
 8008a98:	a333      	add	r3, pc, #204	; (adr r3, 8008b68 <cppLoop+0x1228>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fc0b 	bl	80002b8 <__aeabi_dsub>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f7f8 f8b5 	bl	8000c18 <__aeabi_d2f>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	4b35      	ldr	r3, [pc, #212]	; (8008b88 <cppLoop+0x1248>)
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e012      	b.n	8008adc <cppLoop+0x119c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008ab6:	4b35      	ldr	r3, [pc, #212]	; (8008b8c <cppLoop+0x124c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f7 fd5c 	bl	8000578 <__aeabi_f2d>
 8008ac0:	a329      	add	r3, pc, #164	; (adr r3, 8008b68 <cppLoop+0x1228>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fbf7 	bl	80002b8 <__aeabi_dsub>
 8008aca:	4603      	mov	r3, r0
 8008acc:	460c      	mov	r4, r1
 8008ace:	4618      	mov	r0, r3
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f7f8 f8a1 	bl	8000c18 <__aeabi_d2f>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	4b2c      	ldr	r3, [pc, #176]	; (8008b8c <cppLoop+0x124c>)
 8008ada:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008adc:	2200      	movs	r2, #0
 8008ade:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae2:	4823      	ldr	r0, [pc, #140]	; (8008b70 <cppLoop+0x1230>)
 8008ae4:	f7f9 fb96 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008ae8:	f000 bf0e 	b.w	8009908 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_C){
 8008aec:	4824      	ldr	r0, [pc, #144]	; (8008b80 <cppLoop+0x1240>)
 8008aee:	f7f9 fa71 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	bf0c      	ite	eq
 8008af8:	2301      	moveq	r3, #1
 8008afa:	2300      	movne	r3, #0
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 8702 	beq.w	8009908 <cppLoop+0x1fc8>
			led.LR(-1, 1);
 8008b04:	2201      	movs	r2, #1
 8008b06:	f04f 31ff 	mov.w	r1, #4294967295
 8008b0a:	4819      	ldr	r0, [pc, #100]	; (8008b70 <cppLoop+0x1230>)
 8008b0c:	f7f9 fb82 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b14:	f001 f834 	bl	8009b80 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <cppLoop+0x1248>)
 8008b1e:	2201      	movs	r2, #1
 8008b20:	491b      	ldr	r1, [pc, #108]	; (8008b90 <cppLoop+0x1250>)
 8008b22:	481c      	ldr	r0, [pc, #112]	; (8008b94 <cppLoop+0x1254>)
 8008b24:	f7f8 fe40 	bl	80017a8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4b17      	ldr	r3, [pc, #92]	; (8008b8c <cppLoop+0x124c>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4919      	ldr	r1, [pc, #100]	; (8008b98 <cppLoop+0x1258>)
 8008b32:	4818      	ldr	r0, [pc, #96]	; (8008b94 <cppLoop+0x1254>)
 8008b34:	f7f8 fe38 	bl	80017a8 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008b38:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <cppLoop+0x1248>)
 8008b3a:	edd3 7a00 	vldr	s15, [r3]
 8008b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b42:	480c      	ldr	r0, [pc, #48]	; (8008b74 <cppLoop+0x1234>)
 8008b44:	f7fb f8a5 	bl	8003c92 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008b48:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <cppLoop+0x124c>)
 8008b4a:	edd3 7a00 	vldr	s15, [r3]
 8008b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b52:	4808      	ldr	r0, [pc, #32]	; (8008b74 <cppLoop+0x1234>)
 8008b54:	f7fb f8bd 	bl	8003cd2 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b5e:	4804      	ldr	r0, [pc, #16]	; (8008b70 <cppLoop+0x1230>)
 8008b60:	f7f9 fb58 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008b64:	f000 bed0 	b.w	8009908 <cppLoop+0x1fc8>
 8008b68:	9999999a 	.word	0x9999999a
 8008b6c:	3fb99999 	.word	0x3fb99999
 8008b70:	2000054c 	.word	0x2000054c
 8008b74:	2002389c 	.word	0x2002389c
 8008b78:	08018c80 	.word	0x08018c80
 8008b7c:	08018c44 	.word	0x08018c44
 8008b80:	20000540 	.word	0x20000540
 8008b84:	20048118 	.word	0x20048118
 8008b88:	2004815c 	.word	0x2004815c
 8008b8c:	2004816c 	.word	0x2004816c
 8008b90:	08018c8c 	.word	0x08018c8c
 8008b94:	08018be8 	.word	0x08018be8
 8008b98:	08018c98 	.word	0x08018c98

	case 7:
		led.fullColor('W');
 8008b9c:	2157      	movs	r1, #87	; 0x57
 8008b9e:	48c2      	ldr	r0, [pc, #776]	; (8008ea8 <cppLoop+0x1568>)
 8008ba0:	f7f9 fa7c 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ba4:	f7f8 fa7c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ba8:	2100      	movs	r1, #0
 8008baa:	2000      	movs	r0, #0
 8008bac:	f7f8 fa88 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008bb0:	48be      	ldr	r0, [pc, #760]	; (8008eac <cppLoop+0x156c>)
 8008bb2:	f7fb f922 	bl	8003dfa <_ZN9LineTrace9getMaxAccEv>
 8008bb6:	ee10 3a10 	vmov	r3, s0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7f7 fcdc 	bl	8000578 <__aeabi_f2d>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	48b9      	ldr	r0, [pc, #740]	; (8008eb0 <cppLoop+0x1570>)
 8008bca:	f7f8 faa3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008bce:	2101      	movs	r1, #1
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f7f8 fa75 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008bd6:	48b5      	ldr	r0, [pc, #724]	; (8008eac <cppLoop+0x156c>)
 8008bd8:	f7fb f945 	bl	8003e66 <_ZN9LineTrace9getMaxDecEv>
 8008bdc:	ee10 3a10 	vmov	r3, s0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7f7 fcc9 	bl	8000578 <__aeabi_f2d>
 8008be6:	4603      	mov	r3, r0
 8008be8:	460c      	mov	r4, r1
 8008bea:	461a      	mov	r2, r3
 8008bec:	4623      	mov	r3, r4
 8008bee:	48b1      	ldr	r0, [pc, #708]	; (8008eb4 <cppLoop+0x1574>)
 8008bf0:	f7f8 fa90 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008bf4:	48b0      	ldr	r0, [pc, #704]	; (8008eb8 <cppLoop+0x1578>)
 8008bf6:	f7f9 f9ed 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	bf0c      	ite	eq
 8008c00:	2301      	moveq	r3, #1
 8008c02:	2300      	movne	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d022      	beq.n	8008c50 <cppLoop+0x1310>
			led.LR(-1, 1);
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c10:	48a5      	ldr	r0, [pc, #660]	; (8008ea8 <cppLoop+0x1568>)
 8008c12:	f7f9 faff 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c1a:	f000 ffb1 	bl	8009b80 <HAL_Delay>

			selector_acc++;
 8008c1e:	4ba7      	ldr	r3, [pc, #668]	; (8008ebc <cppLoop+0x157c>)
 8008c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3301      	adds	r3, #1
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	b21a      	sxth	r2, r3
 8008c2c:	4ba3      	ldr	r3, [pc, #652]	; (8008ebc <cppLoop+0x157c>)
 8008c2e:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008c30:	4ba2      	ldr	r3, [pc, #648]	; (8008ebc <cppLoop+0x157c>)
 8008c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	dd02      	ble.n	8008c40 <cppLoop+0x1300>
 8008c3a:	4ba0      	ldr	r3, [pc, #640]	; (8008ebc <cppLoop+0x157c>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008c40:	2200      	movs	r2, #0
 8008c42:	f04f 31ff 	mov.w	r1, #4294967295
 8008c46:	4898      	ldr	r0, [pc, #608]	; (8008ea8 <cppLoop+0x1568>)
 8008c48:	f7f9 fae4 	bl	8002214 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008c4c:	f000 be5e 	b.w	800990c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_R){
 8008c50:	4899      	ldr	r0, [pc, #612]	; (8008eb8 <cppLoop+0x1578>)
 8008c52:	f7f9 f9bf 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b10      	cmp	r3, #16
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2301      	moveq	r3, #1
 8008c5e:	2300      	movne	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d03c      	beq.n	8008ce0 <cppLoop+0x13a0>
			led.LR(-1, 1);
 8008c66:	2201      	movs	r2, #1
 8008c68:	f04f 31ff 	mov.w	r1, #4294967295
 8008c6c:	488e      	ldr	r0, [pc, #568]	; (8008ea8 <cppLoop+0x1568>)
 8008c6e:	f7f9 fad1 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c72:	2064      	movs	r0, #100	; 0x64
 8008c74:	f000 ff84 	bl	8009b80 <HAL_Delay>
			if(selector_acc == 0){
 8008c78:	4b90      	ldr	r3, [pc, #576]	; (8008ebc <cppLoop+0x157c>)
 8008c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d113      	bne.n	8008caa <cppLoop+0x136a>
				adj_acc = adj_acc + 0.1;
 8008c82:	4b8f      	ldr	r3, [pc, #572]	; (8008ec0 <cppLoop+0x1580>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f7 fc76 	bl	8000578 <__aeabi_f2d>
 8008c8c:	a384      	add	r3, pc, #528	; (adr r3, 8008ea0 <cppLoop+0x1560>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f7f7 fb13 	bl	80002bc <__adddf3>
 8008c96:	4603      	mov	r3, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	f7f7 ffbb 	bl	8000c18 <__aeabi_d2f>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b86      	ldr	r3, [pc, #536]	; (8008ec0 <cppLoop+0x1580>)
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	e012      	b.n	8008cd0 <cppLoop+0x1390>
				adj_dec = adj_dec + 0.1;
 8008caa:	4b86      	ldr	r3, [pc, #536]	; (8008ec4 <cppLoop+0x1584>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7f7 fc62 	bl	8000578 <__aeabi_f2d>
 8008cb4:	a37a      	add	r3, pc, #488	; (adr r3, 8008ea0 <cppLoop+0x1560>)
 8008cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cba:	f7f7 faff 	bl	80002bc <__adddf3>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	f7f7 ffa7 	bl	8000c18 <__aeabi_d2f>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4b7d      	ldr	r3, [pc, #500]	; (8008ec4 <cppLoop+0x1584>)
 8008cce:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8008cd6:	4874      	ldr	r0, [pc, #464]	; (8008ea8 <cppLoop+0x1568>)
 8008cd8:	f7f9 fa9c 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008cdc:	f000 be16 	b.w	800990c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_L){
 8008ce0:	4875      	ldr	r0, [pc, #468]	; (8008eb8 <cppLoop+0x1578>)
 8008ce2:	f7f9 f977 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	bf0c      	ite	eq
 8008cec:	2301      	moveq	r3, #1
 8008cee:	2300      	movne	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d03c      	beq.n	8008d70 <cppLoop+0x1430>
			led.LR(-1, 1);
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8008cfc:	486a      	ldr	r0, [pc, #424]	; (8008ea8 <cppLoop+0x1568>)
 8008cfe:	f7f9 fa89 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d02:	2064      	movs	r0, #100	; 0x64
 8008d04:	f000 ff3c 	bl	8009b80 <HAL_Delay>
			if(selector_acc == 0){
 8008d08:	4b6c      	ldr	r3, [pc, #432]	; (8008ebc <cppLoop+0x157c>)
 8008d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d113      	bne.n	8008d3a <cppLoop+0x13fa>
				adj_acc = adj_acc - 0.1;
 8008d12:	4b6b      	ldr	r3, [pc, #428]	; (8008ec0 <cppLoop+0x1580>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f7 fc2e 	bl	8000578 <__aeabi_f2d>
 8008d1c:	a360      	add	r3, pc, #384	; (adr r3, 8008ea0 <cppLoop+0x1560>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fac9 	bl	80002b8 <__aeabi_dsub>
 8008d26:	4603      	mov	r3, r0
 8008d28:	460c      	mov	r4, r1
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f7f7 ff73 	bl	8000c18 <__aeabi_d2f>
 8008d32:	4602      	mov	r2, r0
 8008d34:	4b62      	ldr	r3, [pc, #392]	; (8008ec0 <cppLoop+0x1580>)
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	e012      	b.n	8008d60 <cppLoop+0x1420>
				adj_dec = adj_dec - 0.1;
 8008d3a:	4b62      	ldr	r3, [pc, #392]	; (8008ec4 <cppLoop+0x1584>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f7 fc1a 	bl	8000578 <__aeabi_f2d>
 8008d44:	a356      	add	r3, pc, #344	; (adr r3, 8008ea0 <cppLoop+0x1560>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	f7f7 fab5 	bl	80002b8 <__aeabi_dsub>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	460c      	mov	r4, r1
 8008d52:	4618      	mov	r0, r3
 8008d54:	4621      	mov	r1, r4
 8008d56:	f7f7 ff5f 	bl	8000c18 <__aeabi_d2f>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	4b59      	ldr	r3, [pc, #356]	; (8008ec4 <cppLoop+0x1584>)
 8008d5e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d60:	2200      	movs	r2, #0
 8008d62:	f04f 31ff 	mov.w	r1, #4294967295
 8008d66:	4850      	ldr	r0, [pc, #320]	; (8008ea8 <cppLoop+0x1568>)
 8008d68:	f7f9 fa54 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008d6c:	f000 bdce 	b.w	800990c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_C){
 8008d70:	4851      	ldr	r0, [pc, #324]	; (8008eb8 <cppLoop+0x1578>)
 8008d72:	f7f9 f92f 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	bf0c      	ite	eq
 8008d7c:	2301      	moveq	r3, #1
 8008d7e:	2300      	movne	r3, #0
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 85c2 	beq.w	800990c <cppLoop+0x1fcc>
			led.LR(-1, 1);
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d8e:	4846      	ldr	r0, [pc, #280]	; (8008ea8 <cppLoop+0x1568>)
 8008d90:	f7f9 fa40 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d98:	f000 fef2 	bl	8009b80 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4b47      	ldr	r3, [pc, #284]	; (8008ec0 <cppLoop+0x1580>)
 8008da2:	2201      	movs	r2, #1
 8008da4:	4948      	ldr	r1, [pc, #288]	; (8008ec8 <cppLoop+0x1588>)
 8008da6:	4849      	ldr	r0, [pc, #292]	; (8008ecc <cppLoop+0x158c>)
 8008da8:	f7f8 fcfe 	bl	80017a8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008dac:	2300      	movs	r3, #0
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	4b44      	ldr	r3, [pc, #272]	; (8008ec4 <cppLoop+0x1584>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	4946      	ldr	r1, [pc, #280]	; (8008ed0 <cppLoop+0x1590>)
 8008db6:	4845      	ldr	r0, [pc, #276]	; (8008ecc <cppLoop+0x158c>)
 8008db8:	f7f8 fcf6 	bl	80017a8 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008dbc:	4b40      	ldr	r3, [pc, #256]	; (8008ec0 <cppLoop+0x1580>)
 8008dbe:	edd3 7a00 	vldr	s15, [r3]
 8008dc2:	4b40      	ldr	r3, [pc, #256]	; (8008ec4 <cppLoop+0x1584>)
 8008dc4:	ed93 7a00 	vldr	s14, [r3]
 8008dc8:	eef0 0a47 	vmov.f32	s1, s14
 8008dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8008dd0:	4836      	ldr	r0, [pc, #216]	; (8008eac <cppLoop+0x156c>)
 8008dd2:	f7fa ffde 	bl	8003d92 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8008ddc:	4832      	ldr	r0, [pc, #200]	; (8008ea8 <cppLoop+0x1568>)
 8008dde:	f7f9 fa19 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008de2:	f000 bd93 	b.w	800990c <cppLoop+0x1fcc>

	case 8:
		led.fullColor('W');
 8008de6:	2157      	movs	r1, #87	; 0x57
 8008de8:	482f      	ldr	r0, [pc, #188]	; (8008ea8 <cppLoop+0x1568>)
 8008dea:	f7f9 f957 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008dee:	f7f8 f957 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008df2:	2100      	movs	r1, #0
 8008df4:	2000      	movs	r0, #0
 8008df6:	f7f8 f963 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008dfa:	482c      	ldr	r0, [pc, #176]	; (8008eac <cppLoop+0x156c>)
 8008dfc:	f7fb f821 	bl	8003e42 <_ZN9LineTrace10getMaxAcc2Ev>
 8008e00:	ee10 3a10 	vmov	r3, s0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7f7 fbb7 	bl	8000578 <__aeabi_f2d>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4623      	mov	r3, r4
 8008e12:	4830      	ldr	r0, [pc, #192]	; (8008ed4 <cppLoop+0x1594>)
 8008e14:	f7f8 f97e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e18:	2101      	movs	r1, #1
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	f7f8 f950 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008e20:	4822      	ldr	r0, [pc, #136]	; (8008eac <cppLoop+0x156c>)
 8008e22:	f7fa fffc 	bl	8003e1e <_ZN9LineTrace10getMaxDec2Ev>
 8008e26:	ee10 3a10 	vmov	r3, s0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f7 fba4 	bl	8000578 <__aeabi_f2d>
 8008e30:	4603      	mov	r3, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	461a      	mov	r2, r3
 8008e36:	4623      	mov	r3, r4
 8008e38:	4827      	ldr	r0, [pc, #156]	; (8008ed8 <cppLoop+0x1598>)
 8008e3a:	f7f8 f96b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008e3e:	481e      	ldr	r0, [pc, #120]	; (8008eb8 <cppLoop+0x1578>)
 8008e40:	f7f9 f8c8 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b08      	cmp	r3, #8
 8008e48:	bf0c      	ite	eq
 8008e4a:	2301      	moveq	r3, #1
 8008e4c:	2300      	movne	r3, #0
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d045      	beq.n	8008ee0 <cppLoop+0x15a0>
			led.LR(-1, 1);
 8008e54:	2201      	movs	r2, #1
 8008e56:	f04f 31ff 	mov.w	r1, #4294967295
 8008e5a:	4813      	ldr	r0, [pc, #76]	; (8008ea8 <cppLoop+0x1568>)
 8008e5c:	f7f9 f9da 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e64:	f000 fe8c 	bl	8009b80 <HAL_Delay>

			selector_acc2++;
 8008e68:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <cppLoop+0x159c>)
 8008e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	3301      	adds	r3, #1
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	b21a      	sxth	r2, r3
 8008e76:	4b19      	ldr	r3, [pc, #100]	; (8008edc <cppLoop+0x159c>)
 8008e78:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008e7a:	4b18      	ldr	r3, [pc, #96]	; (8008edc <cppLoop+0x159c>)
 8008e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	dd02      	ble.n	8008e8a <cppLoop+0x154a>
 8008e84:	4b15      	ldr	r3, [pc, #84]	; (8008edc <cppLoop+0x159c>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e90:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <cppLoop+0x1568>)
 8008e92:	f7f9 f9bf 	bl	8002214 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008e96:	f000 bd3b 	b.w	8009910 <cppLoop+0x1fd0>
 8008e9a:	bf00      	nop
 8008e9c:	f3af 8000 	nop.w
 8008ea0:	9999999a 	.word	0x9999999a
 8008ea4:	3fb99999 	.word	0x3fb99999
 8008ea8:	2000054c 	.word	0x2000054c
 8008eac:	2002389c 	.word	0x2002389c
 8008eb0:	08018ca4 	.word	0x08018ca4
 8008eb4:	08018cb0 	.word	0x08018cb0
 8008eb8:	20000540 	.word	0x20000540
 8008ebc:	20048112 	.word	0x20048112
 8008ec0:	20048174 	.word	0x20048174
 8008ec4:	2004817c 	.word	0x2004817c
 8008ec8:	08018cbc 	.word	0x08018cbc
 8008ecc:	08018be8 	.word	0x08018be8
 8008ed0:	08018cc4 	.word	0x08018cc4
 8008ed4:	08018ccc 	.word	0x08018ccc
 8008ed8:	08018cd8 	.word	0x08018cd8
 8008edc:	20048114 	.word	0x20048114
		else if(joy_stick.getValue() == JOY_R){
 8008ee0:	48bf      	ldr	r0, [pc, #764]	; (80091e0 <cppLoop+0x18a0>)
 8008ee2:	f7f9 f877 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b10      	cmp	r3, #16
 8008eea:	bf0c      	ite	eq
 8008eec:	2301      	moveq	r3, #1
 8008eee:	2300      	movne	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d03c      	beq.n	8008f70 <cppLoop+0x1630>
			led.LR(-1, 1);
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8008efc:	48b9      	ldr	r0, [pc, #740]	; (80091e4 <cppLoop+0x18a4>)
 8008efe:	f7f9 f989 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f02:	2064      	movs	r0, #100	; 0x64
 8008f04:	f000 fe3c 	bl	8009b80 <HAL_Delay>
			if(selector_acc2 == 0){
 8008f08:	4bb7      	ldr	r3, [pc, #732]	; (80091e8 <cppLoop+0x18a8>)
 8008f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d113      	bne.n	8008f3a <cppLoop+0x15fa>
				adj_acc2 = adj_acc2 + 0.1;
 8008f12:	4bb6      	ldr	r3, [pc, #728]	; (80091ec <cppLoop+0x18ac>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f7 fb2e 	bl	8000578 <__aeabi_f2d>
 8008f1c:	a3ae      	add	r3, pc, #696	; (adr r3, 80091d8 <cppLoop+0x1898>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f7f7 f9cb 	bl	80002bc <__adddf3>
 8008f26:	4603      	mov	r3, r0
 8008f28:	460c      	mov	r4, r1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	f7f7 fe73 	bl	8000c18 <__aeabi_d2f>
 8008f32:	4602      	mov	r2, r0
 8008f34:	4bad      	ldr	r3, [pc, #692]	; (80091ec <cppLoop+0x18ac>)
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	e012      	b.n	8008f60 <cppLoop+0x1620>
				adj_dec2 = adj_dec2 + 0.1;
 8008f3a:	4bad      	ldr	r3, [pc, #692]	; (80091f0 <cppLoop+0x18b0>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7f7 fb1a 	bl	8000578 <__aeabi_f2d>
 8008f44:	a3a4      	add	r3, pc, #656	; (adr r3, 80091d8 <cppLoop+0x1898>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f9b7 	bl	80002bc <__adddf3>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4618      	mov	r0, r3
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7f7 fe5f 	bl	8000c18 <__aeabi_d2f>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4ba4      	ldr	r3, [pc, #656]	; (80091f0 <cppLoop+0x18b0>)
 8008f5e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f60:	2200      	movs	r2, #0
 8008f62:	f04f 31ff 	mov.w	r1, #4294967295
 8008f66:	489f      	ldr	r0, [pc, #636]	; (80091e4 <cppLoop+0x18a4>)
 8008f68:	f7f9 f954 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008f6c:	f000 bcd0 	b.w	8009910 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_L){
 8008f70:	489b      	ldr	r0, [pc, #620]	; (80091e0 <cppLoop+0x18a0>)
 8008f72:	f7f9 f82f 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	bf0c      	ite	eq
 8008f7c:	2301      	moveq	r3, #1
 8008f7e:	2300      	movne	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d03c      	beq.n	8009000 <cppLoop+0x16c0>
			led.LR(-1, 1);
 8008f86:	2201      	movs	r2, #1
 8008f88:	f04f 31ff 	mov.w	r1, #4294967295
 8008f8c:	4895      	ldr	r0, [pc, #596]	; (80091e4 <cppLoop+0x18a4>)
 8008f8e:	f7f9 f941 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f92:	2064      	movs	r0, #100	; 0x64
 8008f94:	f000 fdf4 	bl	8009b80 <HAL_Delay>
			if(selector_acc2 == 0){
 8008f98:	4b93      	ldr	r3, [pc, #588]	; (80091e8 <cppLoop+0x18a8>)
 8008f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d113      	bne.n	8008fca <cppLoop+0x168a>
				adj_acc2 = adj_acc2 - 0.1;
 8008fa2:	4b92      	ldr	r3, [pc, #584]	; (80091ec <cppLoop+0x18ac>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f7 fae6 	bl	8000578 <__aeabi_f2d>
 8008fac:	a38a      	add	r3, pc, #552	; (adr r3, 80091d8 <cppLoop+0x1898>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f7f7 f981 	bl	80002b8 <__aeabi_dsub>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	4618      	mov	r0, r3
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	f7f7 fe2b 	bl	8000c18 <__aeabi_d2f>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4b89      	ldr	r3, [pc, #548]	; (80091ec <cppLoop+0x18ac>)
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e012      	b.n	8008ff0 <cppLoop+0x16b0>
				adj_dec2 = adj_dec2 - 0.1;
 8008fca:	4b89      	ldr	r3, [pc, #548]	; (80091f0 <cppLoop+0x18b0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f7 fad2 	bl	8000578 <__aeabi_f2d>
 8008fd4:	a380      	add	r3, pc, #512	; (adr r3, 80091d8 <cppLoop+0x1898>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f7f7 f96d 	bl	80002b8 <__aeabi_dsub>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	f7f7 fe17 	bl	8000c18 <__aeabi_d2f>
 8008fea:	4602      	mov	r2, r0
 8008fec:	4b80      	ldr	r3, [pc, #512]	; (80091f0 <cppLoop+0x18b0>)
 8008fee:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ff6:	487b      	ldr	r0, [pc, #492]	; (80091e4 <cppLoop+0x18a4>)
 8008ff8:	f7f9 f90c 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8008ffc:	f000 bc88 	b.w	8009910 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_C){
 8009000:	4877      	ldr	r0, [pc, #476]	; (80091e0 <cppLoop+0x18a0>)
 8009002:	f7f8 ffe7 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8009006:	4603      	mov	r3, r0
 8009008:	2b02      	cmp	r3, #2
 800900a:	bf0c      	ite	eq
 800900c:	2301      	moveq	r3, #1
 800900e:	2300      	movne	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 847c 	beq.w	8009910 <cppLoop+0x1fd0>
			led.LR(-1, 1);
 8009018:	2201      	movs	r2, #1
 800901a:	f04f 31ff 	mov.w	r1, #4294967295
 800901e:	4871      	ldr	r0, [pc, #452]	; (80091e4 <cppLoop+0x18a4>)
 8009020:	f7f9 f8f8 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009024:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009028:	f000 fdaa 	bl	8009b80 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800902c:	2300      	movs	r3, #0
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	4b6e      	ldr	r3, [pc, #440]	; (80091ec <cppLoop+0x18ac>)
 8009032:	2201      	movs	r2, #1
 8009034:	496f      	ldr	r1, [pc, #444]	; (80091f4 <cppLoop+0x18b4>)
 8009036:	4870      	ldr	r0, [pc, #448]	; (80091f8 <cppLoop+0x18b8>)
 8009038:	f7f8 fbb6 	bl	80017a8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800903c:	2300      	movs	r3, #0
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4b6b      	ldr	r3, [pc, #428]	; (80091f0 <cppLoop+0x18b0>)
 8009042:	2201      	movs	r2, #1
 8009044:	496d      	ldr	r1, [pc, #436]	; (80091fc <cppLoop+0x18bc>)
 8009046:	486c      	ldr	r0, [pc, #432]	; (80091f8 <cppLoop+0x18b8>)
 8009048:	f7f8 fbae 	bl	80017a8 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800904c:	4b67      	ldr	r3, [pc, #412]	; (80091ec <cppLoop+0x18ac>)
 800904e:	edd3 7a00 	vldr	s15, [r3]
 8009052:	4b67      	ldr	r3, [pc, #412]	; (80091f0 <cppLoop+0x18b0>)
 8009054:	ed93 7a00 	vldr	s14, [r3]
 8009058:	eef0 0a47 	vmov.f32	s1, s14
 800905c:	eeb0 0a67 	vmov.f32	s0, s15
 8009060:	4867      	ldr	r0, [pc, #412]	; (8009200 <cppLoop+0x18c0>)
 8009062:	f7fa feb0 	bl	8003dc6 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8009066:	2200      	movs	r2, #0
 8009068:	f04f 31ff 	mov.w	r1, #4294967295
 800906c:	485d      	ldr	r0, [pc, #372]	; (80091e4 <cppLoop+0x18a4>)
 800906e:	f7f9 f8d1 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8009072:	f000 bc4d 	b.w	8009910 <cppLoop+0x1fd0>

	case 9:
		led.fullColor('~');
 8009076:	217e      	movs	r1, #126	; 0x7e
 8009078:	485a      	ldr	r0, [pc, #360]	; (80091e4 <cppLoop+0x18a4>)
 800907a:	f7f9 f80f 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 800907e:	f7f8 f80f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009082:	2100      	movs	r1, #0
 8009084:	2000      	movs	r0, #0
 8009086:	f7f8 f81b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800908a:	485e      	ldr	r0, [pc, #376]	; (8009204 <cppLoop+0x18c4>)
 800908c:	f7f8 f842 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009090:	2101      	movs	r1, #1
 8009092:	2000      	movs	r0, #0
 8009094:	f7f8 f814 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009098:	485b      	ldr	r0, [pc, #364]	; (8009208 <cppLoop+0x18c8>)
 800909a:	f7f8 f83b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800909e:	4850      	ldr	r0, [pc, #320]	; (80091e0 <cppLoop+0x18a0>)
 80090a0:	f7f8 ff98 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	bf0c      	ite	eq
 80090aa:	2301      	moveq	r3, #1
 80090ac:	2300      	movne	r3, #0
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 842f 	beq.w	8009914 <cppLoop+0x1fd4>
			led.LR(-1, 1);
 80090b6:	2201      	movs	r2, #1
 80090b8:	f04f 31ff 	mov.w	r1, #4294967295
 80090bc:	4849      	ldr	r0, [pc, #292]	; (80091e4 <cppLoop+0x18a4>)
 80090be:	f7f9 f8a9 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80090c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090c6:	f000 fd5b 	bl	8009b80 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80090ca:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800920c <cppLoop+0x18cc>
 80090ce:	484c      	ldr	r0, [pc, #304]	; (8009200 <cppLoop+0x18c0>)
 80090d0:	f7fa fdb0 	bl	8003c34 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80090d4:	484a      	ldr	r0, [pc, #296]	; (8009200 <cppLoop+0x18c0>)
 80090d6:	f7fb f81d 	bl	8004114 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80090da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090de:	f000 fd4f 	bl	8009b80 <HAL_Delay>

			led.fullColor('R');
 80090e2:	2152      	movs	r1, #82	; 0x52
 80090e4:	483f      	ldr	r0, [pc, #252]	; (80091e4 <cppLoop+0x18a4>)
 80090e6:	f7f8 ffd9 	bl	800209c <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80090ea:	4849      	ldr	r0, [pc, #292]	; (8009210 <cppLoop+0x18d0>)
 80090ec:	f7f8 faae 	bl	800164c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80090f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80090f4:	f000 fd44 	bl	8009b80 <HAL_Delay>

			line_trace.stop();
 80090f8:	4841      	ldr	r0, [pc, #260]	; (8009200 <cppLoop+0x18c0>)
 80090fa:	f7fb f8b7 	bl	800426c <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80090fe:	4945      	ldr	r1, [pc, #276]	; (8009214 <cppLoop+0x18d4>)
 8009100:	4845      	ldr	r0, [pc, #276]	; (8009218 <cppLoop+0x18d8>)
 8009102:	f7f8 fadc 	bl	80016be <user_fopen>
			float d = encoder.getDistance();
 8009106:	4842      	ldr	r0, [pc, #264]	; (8009210 <cppLoop+0x18d0>)
 8009108:	f7f8 fa64 	bl	80015d4 <_ZN7Encoder11getDistanceEv>
 800910c:	eef0 7a40 	vmov.f32	s15, s0
 8009110:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8009114:	1d3b      	adds	r3, r7, #4
 8009116:	2201      	movs	r2, #1
 8009118:	4619      	mov	r1, r3
 800911a:	2001      	movs	r0, #1
 800911c:	f7f8 faf2 	bl	8001704 <sd_write_float>
			user_fclose();
 8009120:	f7f8 fae0 	bl	80016e4 <user_fclose>

			led.LR(-1, 0);
 8009124:	2200      	movs	r2, #0
 8009126:	f04f 31ff 	mov.w	r1, #4294967295
 800912a:	482e      	ldr	r0, [pc, #184]	; (80091e4 <cppLoop+0x18a4>)
 800912c:	f7f9 f872 	bl	8002214 <_ZN3LED2LREaa>
		}
		break;
 8009130:	e3f0      	b.n	8009914 <cppLoop+0x1fd4>

	case 10:
		led.fullColor('~');
 8009132:	217e      	movs	r1, #126	; 0x7e
 8009134:	482b      	ldr	r0, [pc, #172]	; (80091e4 <cppLoop+0x18a4>)
 8009136:	f7f8 ffb1 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 800913a:	f7f7 ffb1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800913e:	2100      	movs	r1, #0
 8009140:	2000      	movs	r0, #0
 8009142:	f7f7 ffbd 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009146:	4835      	ldr	r0, [pc, #212]	; (800921c <cppLoop+0x18dc>)
 8009148:	f7f7 ffe4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800914c:	2101      	movs	r1, #1
 800914e:	2000      	movs	r0, #0
 8009150:	f7f7 ffb6 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009154:	4832      	ldr	r0, [pc, #200]	; (8009220 <cppLoop+0x18e0>)
 8009156:	f7f7 ffdd 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800915a:	4821      	ldr	r0, [pc, #132]	; (80091e0 <cppLoop+0x18a0>)
 800915c:	f7f8 ff3a 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8009160:	4603      	mov	r3, r0
 8009162:	2b02      	cmp	r3, #2
 8009164:	bf0c      	ite	eq
 8009166:	2301      	moveq	r3, #1
 8009168:	2300      	movne	r3, #0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 83d3 	beq.w	8009918 <cppLoop+0x1fd8>
			HAL_Delay(500);
 8009172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009176:	f000 fd03 	bl	8009b80 <HAL_Delay>
			led.LR(-1, 1);
 800917a:	2201      	movs	r2, #1
 800917c:	f04f 31ff 	mov.w	r1, #4294967295
 8009180:	4818      	ldr	r0, [pc, #96]	; (80091e4 <cppLoop+0x18a4>)
 8009182:	f7f9 f847 	bl	8002214 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8009186:	2102      	movs	r1, #2
 8009188:	481d      	ldr	r0, [pc, #116]	; (8009200 <cppLoop+0x18c0>)
 800918a:	f7fa ffb1 	bl	80040f0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800918e:	4b25      	ldr	r3, [pc, #148]	; (8009224 <cppLoop+0x18e4>)
 8009190:	edd3 7a00 	vldr	s15, [r3]
 8009194:	eeb0 0a67 	vmov.f32	s0, s15
 8009198:	4819      	ldr	r0, [pc, #100]	; (8009200 <cppLoop+0x18c0>)
 800919a:	f7fa fd5a 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800919e:	4b21      	ldr	r3, [pc, #132]	; (8009224 <cppLoop+0x18e4>)
 80091a0:	edd3 7a00 	vldr	s15, [r3]
 80091a4:	eeb0 0a67 	vmov.f32	s0, s15
 80091a8:	4815      	ldr	r0, [pc, #84]	; (8009200 <cppLoop+0x18c0>)
 80091aa:	f7fa fd62 	bl	8003c72 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80091ae:	4b1d      	ldr	r3, [pc, #116]	; (8009224 <cppLoop+0x18e4>)
 80091b0:	edd3 7a00 	vldr	s15, [r3]
 80091b4:	eeb0 0a67 	vmov.f32	s0, s15
 80091b8:	4811      	ldr	r0, [pc, #68]	; (8009200 <cppLoop+0x18c0>)
 80091ba:	f7fa fd7a 	bl	8003cb2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80091be:	4810      	ldr	r0, [pc, #64]	; (8009200 <cppLoop+0x18c0>)
 80091c0:	f7fb f9a4 	bl	800450c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80091c4:	2200      	movs	r2, #0
 80091c6:	f04f 31ff 	mov.w	r1, #4294967295
 80091ca:	4806      	ldr	r0, [pc, #24]	; (80091e4 <cppLoop+0x18a4>)
 80091cc:	f7f9 f822 	bl	8002214 <_ZN3LED2LREaa>
		}

		break;
 80091d0:	e3a2      	b.n	8009918 <cppLoop+0x1fd8>
 80091d2:	bf00      	nop
 80091d4:	f3af 8000 	nop.w
 80091d8:	9999999a 	.word	0x9999999a
 80091dc:	3fb99999 	.word	0x3fb99999
 80091e0:	20000540 	.word	0x20000540
 80091e4:	2000054c 	.word	0x2000054c
 80091e8:	20048114 	.word	0x20048114
 80091ec:	20048184 	.word	0x20048184
 80091f0:	2004818c 	.word	0x2004818c
 80091f4:	08018ce4 	.word	0x08018ce4
 80091f8:	08018be8 	.word	0x08018be8
 80091fc:	08018cf0 	.word	0x08018cf0
 8009200:	2002389c 	.word	0x2002389c
 8009204:	08018cfc 	.word	0x08018cfc
 8009208:	08018d04 	.word	0x08018d04
 800920c:	00000000 	.word	0x00000000
 8009210:	200237fc 	.word	0x200237fc
 8009214:	08018d10 	.word	0x08018d10
 8009218:	08018d18 	.word	0x08018d18
 800921c:	08018d24 	.word	0x08018d24
 8009220:	08018d30 	.word	0x08018d30
 8009224:	2004815c 	.word	0x2004815c

	case 11:
		led.fullColor('~');
 8009228:	217e      	movs	r1, #126	; 0x7e
 800922a:	48bc      	ldr	r0, [pc, #752]	; (800951c <cppLoop+0x1bdc>)
 800922c:	f7f8 ff36 	bl	800209c <_ZN3LED9fullColorEc>

lcd_clear();
 8009230:	f7f7 ff36 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009234:	2100      	movs	r1, #0
 8009236:	2000      	movs	r0, #0
 8009238:	f7f7 ff42 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 800923c:	48b8      	ldr	r0, [pc, #736]	; (8009520 <cppLoop+0x1be0>)
 800923e:	f7f7 ff69 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009242:	2101      	movs	r1, #1
 8009244:	2000      	movs	r0, #0
 8009246:	f7f7 ff3b 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 800924a:	48b6      	ldr	r0, [pc, #728]	; (8009524 <cppLoop+0x1be4>)
 800924c:	f7f7 ff62 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009250:	48b5      	ldr	r0, [pc, #724]	; (8009528 <cppLoop+0x1be8>)
 8009252:	f7f8 febf 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8009256:	4603      	mov	r3, r0
 8009258:	2b02      	cmp	r3, #2
 800925a:	bf0c      	ite	eq
 800925c:	2301      	moveq	r3, #1
 800925e:	2300      	movne	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 835a 	beq.w	800991c <cppLoop+0x1fdc>
			HAL_Delay(1000);
 8009268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800926c:	f000 fc88 	bl	8009b80 <HAL_Delay>
			led.LR(-1, 1);
 8009270:	2201      	movs	r2, #1
 8009272:	f04f 31ff 	mov.w	r1, #4294967295
 8009276:	48a9      	ldr	r0, [pc, #676]	; (800951c <cppLoop+0x1bdc>)
 8009278:	f7f8 ffcc 	bl	8002214 <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800927c:	eddf 1aab 	vldr	s3, [pc, #684]	; 800952c <cppLoop+0x1bec>
 8009280:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 800952c <cppLoop+0x1bec>
 8009284:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800952c <cppLoop+0x1bec>
 8009288:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800952c <cppLoop+0x1bec>
 800928c:	48a8      	ldr	r0, [pc, #672]	; (8009530 <cppLoop+0x1bf0>)
 800928e:	f7f7 ffdf 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8009292:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009296:	f000 fc73 	bl	8009b80 <HAL_Delay>
			esc.off();
 800929a:	48a5      	ldr	r0, [pc, #660]	; (8009530 <cppLoop+0x1bf0>)
 800929c:	f7f8 f872 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 80092a0:	2200      	movs	r2, #0
 80092a2:	f04f 31ff 	mov.w	r1, #4294967295
 80092a6:	489d      	ldr	r0, [pc, #628]	; (800951c <cppLoop+0x1bdc>)
 80092a8:	f7f8 ffb4 	bl	8002214 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 80092ac:	e336      	b.n	800991c <cppLoop+0x1fdc>

	case 12:
		led.fullColor('~');
 80092ae:	217e      	movs	r1, #126	; 0x7e
 80092b0:	489a      	ldr	r0, [pc, #616]	; (800951c <cppLoop+0x1bdc>)
 80092b2:	f7f8 fef3 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 80092b6:	f7f7 fef3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092ba:	2100      	movs	r1, #0
 80092bc:	2000      	movs	r0, #0
 80092be:	f7f7 feff 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80092c2:	489c      	ldr	r0, [pc, #624]	; (8009534 <cppLoop+0x1bf4>)
 80092c4:	f7f7 ff26 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092c8:	2101      	movs	r1, #1
 80092ca:	2000      	movs	r0, #0
 80092cc:	f7f7 fef8 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80092d0:	4899      	ldr	r0, [pc, #612]	; (8009538 <cppLoop+0x1bf8>)
 80092d2:	f7f7 ff1f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80092d6:	4894      	ldr	r0, [pc, #592]	; (8009528 <cppLoop+0x1be8>)
 80092d8:	f7f8 fe7c 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b02      	cmp	r3, #2
 80092e0:	bf0c      	ite	eq
 80092e2:	2301      	moveq	r3, #1
 80092e4:	2300      	movne	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 8319 	beq.w	8009920 <cppLoop+0x1fe0>
			HAL_Delay(1500);
 80092ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80092f2:	f000 fc45 	bl	8009b80 <HAL_Delay>
			led.LR(-1, 1);
 80092f6:	2201      	movs	r2, #1
 80092f8:	f04f 31ff 	mov.w	r1, #4294967295
 80092fc:	4887      	ldr	r0, [pc, #540]	; (800951c <cppLoop+0x1bdc>)
 80092fe:	f7f8 ff89 	bl	8002214 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009302:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009306:	f000 fc3b 	bl	8009b80 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800930a:	eddf 1a88 	vldr	s3, [pc, #544]	; 800952c <cppLoop+0x1bec>
 800930e:	ed9f 1a87 	vldr	s2, [pc, #540]	; 800952c <cppLoop+0x1bec>
 8009312:	eddf 0a86 	vldr	s1, [pc, #536]	; 800952c <cppLoop+0x1bec>
 8009316:	ed9f 0a85 	vldr	s0, [pc, #532]	; 800952c <cppLoop+0x1bec>
 800931a:	4885      	ldr	r0, [pc, #532]	; (8009530 <cppLoop+0x1bf0>)
 800931c:	f7f7 ff98 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009324:	f000 fc2c 	bl	8009b80 <HAL_Delay>

			logger.start();
 8009328:	4884      	ldr	r0, [pc, #528]	; (800953c <cppLoop+0x1bfc>)
 800932a:	f7fb fc8d 	bl	8004c48 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800932e:	4884      	ldr	r0, [pc, #528]	; (8009540 <cppLoop+0x1c00>)
 8009330:	f7fc fc83 	bl	8005c3a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8009334:	eddf 0a83 	vldr	s1, [pc, #524]	; 8009544 <cppLoop+0x1c04>
 8009338:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800933c:	4880      	ldr	r0, [pc, #512]	; (8009540 <cppLoop+0x1c00>)
 800933e:	f7fc fc0f 	bl	8005b60 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009346:	f000 fc1b 	bl	8009b80 <HAL_Delay>

			logger.stop();
 800934a:	487c      	ldr	r0, [pc, #496]	; (800953c <cppLoop+0x1bfc>)
 800934c:	f7fb fc9b 	bl	8004c86 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009350:	487b      	ldr	r0, [pc, #492]	; (8009540 <cppLoop+0x1c00>)
 8009352:	f7fc fc85 	bl	8005c60 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8009356:	4876      	ldr	r0, [pc, #472]	; (8009530 <cppLoop+0x1bf0>)
 8009358:	f7f8 f814 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800935c:	4a7a      	ldr	r2, [pc, #488]	; (8009548 <cppLoop+0x1c08>)
 800935e:	497b      	ldr	r1, [pc, #492]	; (800954c <cppLoop+0x1c0c>)
 8009360:	4876      	ldr	r0, [pc, #472]	; (800953c <cppLoop+0x1bfc>)
 8009362:	f7fb fb6c 	bl	8004a3e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009366:	2200      	movs	r2, #0
 8009368:	f04f 31ff 	mov.w	r1, #4294967295
 800936c:	486b      	ldr	r0, [pc, #428]	; (800951c <cppLoop+0x1bdc>)
 800936e:	f7f8 ff51 	bl	8002214 <_ZN3LED2LREaa>
		}
		break;
 8009372:	e2d5      	b.n	8009920 <cppLoop+0x1fe0>

	case 13:

		led.fullColor('W');
 8009374:	2157      	movs	r1, #87	; 0x57
 8009376:	4869      	ldr	r0, [pc, #420]	; (800951c <cppLoop+0x1bdc>)
 8009378:	f7f8 fe90 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 800937c:	f7f7 fe90 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009380:	2100      	movs	r1, #0
 8009382:	2000      	movs	r0, #0
 8009384:	f7f7 fe9c 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009388:	4871      	ldr	r0, [pc, #452]	; (8009550 <cppLoop+0x1c10>)
 800938a:	f7f7 fec3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800938e:	2101      	movs	r1, #1
 8009390:	2000      	movs	r0, #0
 8009392:	f7f7 fe95 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009396:	4b6f      	ldr	r3, [pc, #444]	; (8009554 <cppLoop+0x1c14>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f7f7 f8ec 	bl	8000578 <__aeabi_f2d>
 80093a0:	4603      	mov	r3, r0
 80093a2:	460c      	mov	r4, r1
 80093a4:	461a      	mov	r2, r3
 80093a6:	4623      	mov	r3, r4
 80093a8:	486b      	ldr	r0, [pc, #428]	; (8009558 <cppLoop+0x1c18>)
 80093aa:	f7f7 feb3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80093ae:	485e      	ldr	r0, [pc, #376]	; (8009528 <cppLoop+0x1be8>)
 80093b0:	f7f8 fe10 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	bf0c      	ite	eq
 80093ba:	2301      	moveq	r3, #1
 80093bc:	2300      	movne	r3, #0
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 82af 	beq.w	8009924 <cppLoop+0x1fe4>
			HAL_Delay(500);
 80093c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80093ca:	f000 fbd9 	bl	8009b80 <HAL_Delay>

			led.LR(1, -1);
 80093ce:	f04f 32ff 	mov.w	r2, #4294967295
 80093d2:	2101      	movs	r1, #1
 80093d4:	4851      	ldr	r0, [pc, #324]	; (800951c <cppLoop+0x1bdc>)
 80093d6:	f7f8 ff1d 	bl	8002214 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80093da:	2102      	movs	r1, #2
 80093dc:	485f      	ldr	r0, [pc, #380]	; (800955c <cppLoop+0x1c1c>)
 80093de:	f7fa fe87 	bl	80040f0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80093e2:	4b5f      	ldr	r3, [pc, #380]	; (8009560 <cppLoop+0x1c20>)
 80093e4:	edd3 7a00 	vldr	s15, [r3]
 80093e8:	eeb0 0a67 	vmov.f32	s0, s15
 80093ec:	485b      	ldr	r0, [pc, #364]	; (800955c <cppLoop+0x1c1c>)
 80093ee:	f7fa fc30 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80093f2:	4b58      	ldr	r3, [pc, #352]	; (8009554 <cppLoop+0x1c14>)
 80093f4:	edd3 7a00 	vldr	s15, [r3]
 80093f8:	eeb0 0a67 	vmov.f32	s0, s15
 80093fc:	4857      	ldr	r0, [pc, #348]	; (800955c <cppLoop+0x1c1c>)
 80093fe:	f7fa fc38 	bl	8003c72 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009402:	4b54      	ldr	r3, [pc, #336]	; (8009554 <cppLoop+0x1c14>)
 8009404:	edd3 7a00 	vldr	s15, [r3]
 8009408:	eeb0 0a67 	vmov.f32	s0, s15
 800940c:	4853      	ldr	r0, [pc, #332]	; (800955c <cppLoop+0x1c1c>)
 800940e:	f7fa fc50 	bl	8003cb2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009412:	4852      	ldr	r0, [pc, #328]	; (800955c <cppLoop+0x1c1c>)
 8009414:	f7fb f87a 	bl	800450c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800941c:	f000 fbb0 	bl	8009b80 <HAL_Delay>

			line_trace.running();
 8009420:	484e      	ldr	r0, [pc, #312]	; (800955c <cppLoop+0x1c1c>)
 8009422:	f7fa fea9 	bl	8004178 <_ZN9LineTrace7runningEv>

			esc.off();
 8009426:	4842      	ldr	r0, [pc, #264]	; (8009530 <cppLoop+0x1bf0>)
 8009428:	f7f7 ffac 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800942c:	f04f 32ff 	mov.w	r2, #4294967295
 8009430:	2100      	movs	r1, #0
 8009432:	483a      	ldr	r0, [pc, #232]	; (800951c <cppLoop+0x1bdc>)
 8009434:	f7f8 feee 	bl	8002214 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009438:	e274      	b.n	8009924 <cppLoop+0x1fe4>

	case 14:
		led.fullColor('W');
 800943a:	2157      	movs	r1, #87	; 0x57
 800943c:	4837      	ldr	r0, [pc, #220]	; (800951c <cppLoop+0x1bdc>)
 800943e:	f7f8 fe2d 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009442:	f7f7 fe2d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009446:	2100      	movs	r1, #0
 8009448:	2000      	movs	r0, #0
 800944a:	f7f7 fe39 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800944e:	4845      	ldr	r0, [pc, #276]	; (8009564 <cppLoop+0x1c24>)
 8009450:	f7f7 fe60 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009454:	2101      	movs	r1, #1
 8009456:	2000      	movs	r0, #0
 8009458:	f7f7 fe32 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800945c:	4b42      	ldr	r3, [pc, #264]	; (8009568 <cppLoop+0x1c28>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f7f7 f889 	bl	8000578 <__aeabi_f2d>
 8009466:	4603      	mov	r3, r0
 8009468:	460c      	mov	r4, r1
 800946a:	461a      	mov	r2, r3
 800946c:	4623      	mov	r3, r4
 800946e:	483a      	ldr	r0, [pc, #232]	; (8009558 <cppLoop+0x1c18>)
 8009470:	f7f7 fe50 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009474:	482c      	ldr	r0, [pc, #176]	; (8009528 <cppLoop+0x1be8>)
 8009476:	f7f8 fdad 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 800947a:	4603      	mov	r3, r0
 800947c:	2b02      	cmp	r3, #2
 800947e:	bf0c      	ite	eq
 8009480:	2301      	moveq	r3, #1
 8009482:	2300      	movne	r3, #0
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 824e 	beq.w	8009928 <cppLoop+0x1fe8>
			HAL_Delay(500);
 800948c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009490:	f000 fb76 	bl	8009b80 <HAL_Delay>

			led.LR(1, -1);
 8009494:	f04f 32ff 	mov.w	r2, #4294967295
 8009498:	2101      	movs	r1, #1
 800949a:	4820      	ldr	r0, [pc, #128]	; (800951c <cppLoop+0x1bdc>)
 800949c:	f7f8 feba 	bl	8002214 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80094a0:	2101      	movs	r1, #1
 80094a2:	482e      	ldr	r0, [pc, #184]	; (800955c <cppLoop+0x1c1c>)
 80094a4:	f7fa fe24 	bl	80040f0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80094a8:	4b30      	ldr	r3, [pc, #192]	; (800956c <cppLoop+0x1c2c>)
 80094aa:	edd3 7a00 	vldr	s15, [r3]
 80094ae:	eeb0 0a67 	vmov.f32	s0, s15
 80094b2:	482a      	ldr	r0, [pc, #168]	; (800955c <cppLoop+0x1c1c>)
 80094b4:	f7fa fbcd 	bl	8003c52 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80094b8:	4b2b      	ldr	r3, [pc, #172]	; (8009568 <cppLoop+0x1c28>)
 80094ba:	edd3 7a00 	vldr	s15, [r3]
 80094be:	eeb0 0a67 	vmov.f32	s0, s15
 80094c2:	4826      	ldr	r0, [pc, #152]	; (800955c <cppLoop+0x1c1c>)
 80094c4:	f7fa fbd5 	bl	8003c72 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80094c8:	4b28      	ldr	r3, [pc, #160]	; (800956c <cppLoop+0x1c2c>)
 80094ca:	edd3 7a00 	vldr	s15, [r3]
 80094ce:	eeb0 0a67 	vmov.f32	s0, s15
 80094d2:	4822      	ldr	r0, [pc, #136]	; (800955c <cppLoop+0x1c1c>)
 80094d4:	f7fa fbed 	bl	8003cb2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80094d8:	4820      	ldr	r0, [pc, #128]	; (800955c <cppLoop+0x1c1c>)
 80094da:	f7fb f817 	bl	800450c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 80094de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094e2:	f000 fb4d 	bl	8009b80 <HAL_Delay>

			logger.start();
 80094e6:	4815      	ldr	r0, [pc, #84]	; (800953c <cppLoop+0x1bfc>)
 80094e8:	f7fb fbae 	bl	8004c48 <_ZN6Logger5startEv>

			line_trace.running();
 80094ec:	481b      	ldr	r0, [pc, #108]	; (800955c <cppLoop+0x1c1c>)
 80094ee:	f7fa fe43 	bl	8004178 <_ZN9LineTrace7runningEv>

			logger.stop();
 80094f2:	4812      	ldr	r0, [pc, #72]	; (800953c <cppLoop+0x1bfc>)
 80094f4:	f7fb fbc7 	bl	8004c86 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "CURVEL.txt");
 80094f8:	4a1d      	ldr	r2, [pc, #116]	; (8009570 <cppLoop+0x1c30>)
 80094fa:	491e      	ldr	r1, [pc, #120]	; (8009574 <cppLoop+0x1c34>)
 80094fc:	480f      	ldr	r0, [pc, #60]	; (800953c <cppLoop+0x1bfc>)
 80094fe:	f7fb fa9e 	bl	8004a3e <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TARVEL.txt");
 8009502:	4a1d      	ldr	r2, [pc, #116]	; (8009578 <cppLoop+0x1c38>)
 8009504:	491b      	ldr	r1, [pc, #108]	; (8009574 <cppLoop+0x1c34>)
 8009506:	480d      	ldr	r0, [pc, #52]	; (800953c <cppLoop+0x1bfc>)
 8009508:	f7fb faad 	bl	8004a66 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 800950c:	f04f 32ff 	mov.w	r2, #4294967295
 8009510:	2100      	movs	r1, #0
 8009512:	4802      	ldr	r0, [pc, #8]	; (800951c <cppLoop+0x1bdc>)
 8009514:	f7f8 fe7e 	bl	8002214 <_ZN3LED2LREaa>
		}

		break;
 8009518:	e206      	b.n	8009928 <cppLoop+0x1fe8>
 800951a:	bf00      	nop
 800951c:	2000054c 	.word	0x2000054c
 8009520:	08018d3c 	.word	0x08018d3c
 8009524:	08018d40 	.word	0x08018d40
 8009528:	20000540 	.word	0x20000540
 800952c:	3ea3d70a 	.word	0x3ea3d70a
 8009530:	20023898 	.word	0x20023898
 8009534:	08018d48 	.word	0x08018d48
 8009538:	08018d4c 	.word	0x08018d4c
 800953c:	20000570 	.word	0x20000570
 8009540:	2002381c 	.word	0x2002381c
 8009544:	00000000 	.word	0x00000000
 8009548:	08018d58 	.word	0x08018d58
 800954c:	08018d64 	.word	0x08018d64
 8009550:	08018d70 	.word	0x08018d70
 8009554:	2004815c 	.word	0x2004815c
 8009558:	08018c14 	.word	0x08018c14
 800955c:	2002389c 	.word	0x2002389c
 8009560:	2004816c 	.word	0x2004816c
 8009564:	08018d7c 	.word	0x08018d7c
 8009568:	20048154 	.word	0x20048154
 800956c:	20048164 	.word	0x20048164
 8009570:	08018c38 	.word	0x08018c38
 8009574:	08018c2c 	.word	0x08018c2c
 8009578:	08018c20 	.word	0x08018c20

	case 15:
		led.fullColor('W');
 800957c:	2157      	movs	r1, #87	; 0x57
 800957e:	48ac      	ldr	r0, [pc, #688]	; (8009830 <cppLoop+0x1ef0>)
 8009580:	f7f8 fd8c 	bl	800209c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009584:	f7f7 fd8c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009588:	2100      	movs	r1, #0
 800958a:	2000      	movs	r0, #0
 800958c:	f7f7 fd98 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8009590:	48a8      	ldr	r0, [pc, #672]	; (8009834 <cppLoop+0x1ef4>)
 8009592:	f7fa fadc 	bl	8003b4e <_ZN9LineTrace5getKpEv>
 8009596:	eeb0 7a40 	vmov.f32	s14, s0
 800959a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009838 <cppLoop+0x1ef8>
 800959e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a2:	eeb0 0a67 	vmov.f32	s0, s15
 80095a6:	f7f9 f93b 	bl	8002820 <_ZSt3absf>
 80095aa:	ee10 3a10 	vmov	r3, s0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f6 ffe2 	bl	8000578 <__aeabi_f2d>
 80095b4:	4603      	mov	r3, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	461a      	mov	r2, r3
 80095ba:	4623      	mov	r3, r4
 80095bc:	489f      	ldr	r0, [pc, #636]	; (800983c <cppLoop+0x1efc>)
 80095be:	f7f7 fda9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095c2:	2101      	movs	r1, #1
 80095c4:	2000      	movs	r0, #0
 80095c6:	f7f7 fd7b 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*100000));
 80095ca:	489a      	ldr	r0, [pc, #616]	; (8009834 <cppLoop+0x1ef4>)
 80095cc:	f7fa face 	bl	8003b6c <_ZN9LineTrace5getKiEv>
 80095d0:	eeb0 7a40 	vmov.f32	s14, s0
 80095d4:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009840 <cppLoop+0x1f00>
 80095d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095dc:	eeb0 0a67 	vmov.f32	s0, s15
 80095e0:	f7f9 f91e 	bl	8002820 <_ZSt3absf>
 80095e4:	ee10 3a10 	vmov	r3, s0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7f6 ffc5 	bl	8000578 <__aeabi_f2d>
 80095ee:	4605      	mov	r5, r0
 80095f0:	460e      	mov	r6, r1
 80095f2:	4890      	ldr	r0, [pc, #576]	; (8009834 <cppLoop+0x1ef4>)
 80095f4:	f7fa fac9 	bl	8003b8a <_ZN9LineTrace5getKdEv>
 80095f8:	eeb0 7a40 	vmov.f32	s14, s0
 80095fc:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009844 <cppLoop+0x1f04>
 8009600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009604:	eeb0 0a67 	vmov.f32	s0, s15
 8009608:	f7f9 f90a 	bl	8002820 <_ZSt3absf>
 800960c:	ee10 3a10 	vmov	r3, s0
 8009610:	4618      	mov	r0, r3
 8009612:	f7f6 ffb1 	bl	8000578 <__aeabi_f2d>
 8009616:	4603      	mov	r3, r0
 8009618:	460c      	mov	r4, r1
 800961a:	e9cd 3400 	strd	r3, r4, [sp]
 800961e:	462a      	mov	r2, r5
 8009620:	4633      	mov	r3, r6
 8009622:	4889      	ldr	r0, [pc, #548]	; (8009848 <cppLoop+0x1f08>)
 8009624:	f7f7 fd76 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009628:	4888      	ldr	r0, [pc, #544]	; (800984c <cppLoop+0x1f0c>)
 800962a:	f7f8 fcd3 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 800962e:	4603      	mov	r3, r0
 8009630:	2b08      	cmp	r3, #8
 8009632:	bf0c      	ite	eq
 8009634:	2301      	moveq	r3, #1
 8009636:	2300      	movne	r3, #0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d021      	beq.n	8009682 <cppLoop+0x1d42>
			led.LR(-1, 1);
 800963e:	2201      	movs	r2, #1
 8009640:	f04f 31ff 	mov.w	r1, #4294967295
 8009644:	487a      	ldr	r0, [pc, #488]	; (8009830 <cppLoop+0x1ef0>)
 8009646:	f7f8 fde5 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800964a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800964e:	f000 fa97 	bl	8009b80 <HAL_Delay>

			selector++;
 8009652:	4b7f      	ldr	r3, [pc, #508]	; (8009850 <cppLoop+0x1f10>)
 8009654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009658:	b29b      	uxth	r3, r3
 800965a:	3301      	adds	r3, #1
 800965c:	b29b      	uxth	r3, r3
 800965e:	b21a      	sxth	r2, r3
 8009660:	4b7b      	ldr	r3, [pc, #492]	; (8009850 <cppLoop+0x1f10>)
 8009662:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8009664:	4b7a      	ldr	r3, [pc, #488]	; (8009850 <cppLoop+0x1f10>)
 8009666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800966a:	2b02      	cmp	r3, #2
 800966c:	dd02      	ble.n	8009674 <cppLoop+0x1d34>
 800966e:	4b78      	ldr	r3, [pc, #480]	; (8009850 <cppLoop+0x1f10>)
 8009670:	2200      	movs	r2, #0
 8009672:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009674:	2200      	movs	r2, #0
 8009676:	f04f 31ff 	mov.w	r1, #4294967295
 800967a:	486d      	ldr	r0, [pc, #436]	; (8009830 <cppLoop+0x1ef0>)
 800967c:	f7f8 fdca 	bl	8002214 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009680:	e154      	b.n	800992c <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_R){
 8009682:	4872      	ldr	r0, [pc, #456]	; (800984c <cppLoop+0x1f0c>)
 8009684:	f7f8 fca6 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8009688:	4603      	mov	r3, r0
 800968a:	2b10      	cmp	r3, #16
 800968c:	bf0c      	ite	eq
 800968e:	2301      	moveq	r3, #1
 8009690:	2300      	movne	r3, #0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d058      	beq.n	800974a <cppLoop+0x1e0a>
			led.LR(-1, 1);
 8009698:	2201      	movs	r2, #1
 800969a:	f04f 31ff 	mov.w	r1, #4294967295
 800969e:	4864      	ldr	r0, [pc, #400]	; (8009830 <cppLoop+0x1ef0>)
 80096a0:	f7f8 fdb8 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80096a4:	2064      	movs	r0, #100	; 0x64
 80096a6:	f000 fa6b 	bl	8009b80 <HAL_Delay>
			if(selector == 0){
 80096aa:	4b69      	ldr	r3, [pc, #420]	; (8009850 <cppLoop+0x1f10>)
 80096ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d113      	bne.n	80096dc <cppLoop+0x1d9c>
				adj_kp = adj_kp + 0.000001;
 80096b4:	4b67      	ldr	r3, [pc, #412]	; (8009854 <cppLoop+0x1f14>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7f6 ff5d 	bl	8000578 <__aeabi_f2d>
 80096be:	a356      	add	r3, pc, #344	; (adr r3, 8009818 <cppLoop+0x1ed8>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f7f6 fdfa 	bl	80002bc <__adddf3>
 80096c8:	4603      	mov	r3, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	4618      	mov	r0, r3
 80096ce:	4621      	mov	r1, r4
 80096d0:	f7f7 faa2 	bl	8000c18 <__aeabi_d2f>
 80096d4:	4602      	mov	r2, r0
 80096d6:	4b5f      	ldr	r3, [pc, #380]	; (8009854 <cppLoop+0x1f14>)
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	e02b      	b.n	8009734 <cppLoop+0x1df4>
			else if(selector == 1){
 80096dc:	4b5c      	ldr	r3, [pc, #368]	; (8009850 <cppLoop+0x1f10>)
 80096de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d113      	bne.n	800970e <cppLoop+0x1dce>
				adj_ki = adj_ki + 0.00001;
 80096e6:	4b5c      	ldr	r3, [pc, #368]	; (8009858 <cppLoop+0x1f18>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f6 ff44 	bl	8000578 <__aeabi_f2d>
 80096f0:	a34b      	add	r3, pc, #300	; (adr r3, 8009820 <cppLoop+0x1ee0>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 fde1 	bl	80002bc <__adddf3>
 80096fa:	4603      	mov	r3, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	4618      	mov	r0, r3
 8009700:	4621      	mov	r1, r4
 8009702:	f7f7 fa89 	bl	8000c18 <__aeabi_d2f>
 8009706:	4602      	mov	r2, r0
 8009708:	4b53      	ldr	r3, [pc, #332]	; (8009858 <cppLoop+0x1f18>)
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	e012      	b.n	8009734 <cppLoop+0x1df4>
				adj_kd = adj_kd + 0.0000001;
 800970e:	4b53      	ldr	r3, [pc, #332]	; (800985c <cppLoop+0x1f1c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4618      	mov	r0, r3
 8009714:	f7f6 ff30 	bl	8000578 <__aeabi_f2d>
 8009718:	a343      	add	r3, pc, #268	; (adr r3, 8009828 <cppLoop+0x1ee8>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	f7f6 fdcd 	bl	80002bc <__adddf3>
 8009722:	4603      	mov	r3, r0
 8009724:	460c      	mov	r4, r1
 8009726:	4618      	mov	r0, r3
 8009728:	4621      	mov	r1, r4
 800972a:	f7f7 fa75 	bl	8000c18 <__aeabi_d2f>
 800972e:	4602      	mov	r2, r0
 8009730:	4b4a      	ldr	r3, [pc, #296]	; (800985c <cppLoop+0x1f1c>)
 8009732:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009734:	2152      	movs	r1, #82	; 0x52
 8009736:	483e      	ldr	r0, [pc, #248]	; (8009830 <cppLoop+0x1ef0>)
 8009738:	f7f8 fcb0 	bl	800209c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800973c:	2200      	movs	r2, #0
 800973e:	f04f 31ff 	mov.w	r1, #4294967295
 8009742:	483b      	ldr	r0, [pc, #236]	; (8009830 <cppLoop+0x1ef0>)
 8009744:	f7f8 fd66 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8009748:	e0f0      	b.n	800992c <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_L){
 800974a:	4840      	ldr	r0, [pc, #256]	; (800984c <cppLoop+0x1f0c>)
 800974c:	f7f8 fc42 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8009750:	4603      	mov	r3, r0
 8009752:	2b01      	cmp	r3, #1
 8009754:	bf0c      	ite	eq
 8009756:	2301      	moveq	r3, #1
 8009758:	2300      	movne	r3, #0
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d07f      	beq.n	8009860 <cppLoop+0x1f20>
			led.LR(-1, 1);
 8009760:	2201      	movs	r2, #1
 8009762:	f04f 31ff 	mov.w	r1, #4294967295
 8009766:	4832      	ldr	r0, [pc, #200]	; (8009830 <cppLoop+0x1ef0>)
 8009768:	f7f8 fd54 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800976c:	2064      	movs	r0, #100	; 0x64
 800976e:	f000 fa07 	bl	8009b80 <HAL_Delay>
			if(selector == 0){
 8009772:	4b37      	ldr	r3, [pc, #220]	; (8009850 <cppLoop+0x1f10>)
 8009774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d113      	bne.n	80097a4 <cppLoop+0x1e64>
				adj_kp = adj_kp - 0.000001;
 800977c:	4b35      	ldr	r3, [pc, #212]	; (8009854 <cppLoop+0x1f14>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4618      	mov	r0, r3
 8009782:	f7f6 fef9 	bl	8000578 <__aeabi_f2d>
 8009786:	a324      	add	r3, pc, #144	; (adr r3, 8009818 <cppLoop+0x1ed8>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f6 fd94 	bl	80002b8 <__aeabi_dsub>
 8009790:	4603      	mov	r3, r0
 8009792:	460c      	mov	r4, r1
 8009794:	4618      	mov	r0, r3
 8009796:	4621      	mov	r1, r4
 8009798:	f7f7 fa3e 	bl	8000c18 <__aeabi_d2f>
 800979c:	4602      	mov	r2, r0
 800979e:	4b2d      	ldr	r3, [pc, #180]	; (8009854 <cppLoop+0x1f14>)
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	e02b      	b.n	80097fc <cppLoop+0x1ebc>
			else if(selector == 1){
 80097a4:	4b2a      	ldr	r3, [pc, #168]	; (8009850 <cppLoop+0x1f10>)
 80097a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d113      	bne.n	80097d6 <cppLoop+0x1e96>
				adj_ki = adj_ki - 0.00001;
 80097ae:	4b2a      	ldr	r3, [pc, #168]	; (8009858 <cppLoop+0x1f18>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7f6 fee0 	bl	8000578 <__aeabi_f2d>
 80097b8:	a319      	add	r3, pc, #100	; (adr r3, 8009820 <cppLoop+0x1ee0>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fd7b 	bl	80002b8 <__aeabi_dsub>
 80097c2:	4603      	mov	r3, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	4618      	mov	r0, r3
 80097c8:	4621      	mov	r1, r4
 80097ca:	f7f7 fa25 	bl	8000c18 <__aeabi_d2f>
 80097ce:	4602      	mov	r2, r0
 80097d0:	4b21      	ldr	r3, [pc, #132]	; (8009858 <cppLoop+0x1f18>)
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e012      	b.n	80097fc <cppLoop+0x1ebc>
				adj_kd = adj_kd - 0.0000001;
 80097d6:	4b21      	ldr	r3, [pc, #132]	; (800985c <cppLoop+0x1f1c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4618      	mov	r0, r3
 80097dc:	f7f6 fecc 	bl	8000578 <__aeabi_f2d>
 80097e0:	a311      	add	r3, pc, #68	; (adr r3, 8009828 <cppLoop+0x1ee8>)
 80097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e6:	f7f6 fd67 	bl	80002b8 <__aeabi_dsub>
 80097ea:	4603      	mov	r3, r0
 80097ec:	460c      	mov	r4, r1
 80097ee:	4618      	mov	r0, r3
 80097f0:	4621      	mov	r1, r4
 80097f2:	f7f7 fa11 	bl	8000c18 <__aeabi_d2f>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b18      	ldr	r3, [pc, #96]	; (800985c <cppLoop+0x1f1c>)
 80097fa:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80097fc:	2152      	movs	r1, #82	; 0x52
 80097fe:	480c      	ldr	r0, [pc, #48]	; (8009830 <cppLoop+0x1ef0>)
 8009800:	f7f8 fc4c 	bl	800209c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009804:	2200      	movs	r2, #0
 8009806:	f04f 31ff 	mov.w	r1, #4294967295
 800980a:	4809      	ldr	r0, [pc, #36]	; (8009830 <cppLoop+0x1ef0>)
 800980c:	f7f8 fd02 	bl	8002214 <_ZN3LED2LREaa>
		break;
 8009810:	e08c      	b.n	800992c <cppLoop+0x1fec>
 8009812:	bf00      	nop
 8009814:	f3af 8000 	nop.w
 8009818:	a0b5ed8d 	.word	0xa0b5ed8d
 800981c:	3eb0c6f7 	.word	0x3eb0c6f7
 8009820:	88e368f1 	.word	0x88e368f1
 8009824:	3ee4f8b5 	.word	0x3ee4f8b5
 8009828:	9abcaf48 	.word	0x9abcaf48
 800982c:	3e7ad7f2 	.word	0x3e7ad7f2
 8009830:	2000054c 	.word	0x2000054c
 8009834:	2002389c 	.word	0x2002389c
 8009838:	461c4000 	.word	0x461c4000
 800983c:	08018d88 	.word	0x08018d88
 8009840:	447a0000 	.word	0x447a0000
 8009844:	47c35000 	.word	0x47c35000
 8009848:	08018bcc 	.word	0x08018bcc
 800984c:	20000540 	.word	0x20000540
 8009850:	20048110 	.word	0x20048110
 8009854:	2004811c 	.word	0x2004811c
 8009858:	20048124 	.word	0x20048124
 800985c:	2004812c 	.word	0x2004812c
		else if(joy_stick.getValue() == JOY_C){
 8009860:	4836      	ldr	r0, [pc, #216]	; (800993c <cppLoop+0x1ffc>)
 8009862:	f7f8 fbb7 	bl	8001fd4 <_ZN8JoyStick8getValueEv>
 8009866:	4603      	mov	r3, r0
 8009868:	2b02      	cmp	r3, #2
 800986a:	bf0c      	ite	eq
 800986c:	2301      	moveq	r3, #1
 800986e:	2300      	movne	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d05a      	beq.n	800992c <cppLoop+0x1fec>
			led.LR(-1, 1);
 8009876:	2201      	movs	r2, #1
 8009878:	f04f 31ff 	mov.w	r1, #4294967295
 800987c:	4830      	ldr	r0, [pc, #192]	; (8009940 <cppLoop+0x2000>)
 800987e:	f7f8 fcc9 	bl	8002214 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009882:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009886:	f000 f97b 	bl	8009b80 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800988a:	2300      	movs	r3, #0
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	4b2d      	ldr	r3, [pc, #180]	; (8009944 <cppLoop+0x2004>)
 8009890:	2201      	movs	r2, #1
 8009892:	492d      	ldr	r1, [pc, #180]	; (8009948 <cppLoop+0x2008>)
 8009894:	482d      	ldr	r0, [pc, #180]	; (800994c <cppLoop+0x200c>)
 8009896:	f7f7 ff87 	bl	80017a8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800989a:	2300      	movs	r3, #0
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	4b2c      	ldr	r3, [pc, #176]	; (8009950 <cppLoop+0x2010>)
 80098a0:	2201      	movs	r2, #1
 80098a2:	492c      	ldr	r1, [pc, #176]	; (8009954 <cppLoop+0x2014>)
 80098a4:	4829      	ldr	r0, [pc, #164]	; (800994c <cppLoop+0x200c>)
 80098a6:	f7f7 ff7f 	bl	80017a8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80098aa:	2300      	movs	r3, #0
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4b2a      	ldr	r3, [pc, #168]	; (8009958 <cppLoop+0x2018>)
 80098b0:	2201      	movs	r2, #1
 80098b2:	492a      	ldr	r1, [pc, #168]	; (800995c <cppLoop+0x201c>)
 80098b4:	4825      	ldr	r0, [pc, #148]	; (800994c <cppLoop+0x200c>)
 80098b6:	f7f7 ff77 	bl	80017a8 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80098ba:	4b22      	ldr	r3, [pc, #136]	; (8009944 <cppLoop+0x2004>)
 80098bc:	edd3 7a00 	vldr	s15, [r3]
 80098c0:	4b23      	ldr	r3, [pc, #140]	; (8009950 <cppLoop+0x2010>)
 80098c2:	ed93 7a00 	vldr	s14, [r3]
 80098c6:	4b24      	ldr	r3, [pc, #144]	; (8009958 <cppLoop+0x2018>)
 80098c8:	edd3 6a00 	vldr	s13, [r3]
 80098cc:	eeb0 1a66 	vmov.f32	s2, s13
 80098d0:	eef0 0a47 	vmov.f32	s1, s14
 80098d4:	eeb0 0a67 	vmov.f32	s0, s15
 80098d8:	4821      	ldr	r0, [pc, #132]	; (8009960 <cppLoop+0x2020>)
 80098da:	f7fa f91f 	bl	8003b1c <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80098de:	2200      	movs	r2, #0
 80098e0:	f04f 31ff 	mov.w	r1, #4294967295
 80098e4:	4816      	ldr	r0, [pc, #88]	; (8009940 <cppLoop+0x2000>)
 80098e6:	f7f8 fc95 	bl	8002214 <_ZN3LED2LREaa>
		break;
 80098ea:	e01f      	b.n	800992c <cppLoop+0x1fec>

	default:
		break;
 80098ec:	bf00      	nop
 80098ee:	e01e      	b.n	800992e <cppLoop+0x1fee>
		break;
 80098f0:	bf00      	nop
 80098f2:	e01c      	b.n	800992e <cppLoop+0x1fee>
		break;
 80098f4:	bf00      	nop
 80098f6:	e01a      	b.n	800992e <cppLoop+0x1fee>
		break;
 80098f8:	bf00      	nop
 80098fa:	e018      	b.n	800992e <cppLoop+0x1fee>
		break;
 80098fc:	bf00      	nop
 80098fe:	e016      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009900:	bf00      	nop
 8009902:	e014      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009904:	bf00      	nop
 8009906:	e012      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009908:	bf00      	nop
 800990a:	e010      	b.n	800992e <cppLoop+0x1fee>
		break;
 800990c:	bf00      	nop
 800990e:	e00e      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009910:	bf00      	nop
 8009912:	e00c      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009914:	bf00      	nop
 8009916:	e00a      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009918:	bf00      	nop
 800991a:	e008      	b.n	800992e <cppLoop+0x1fee>
		break;
 800991c:	bf00      	nop
 800991e:	e006      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009920:	bf00      	nop
 8009922:	e004      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009924:	bf00      	nop
 8009926:	e002      	b.n	800992e <cppLoop+0x1fee>
		break;
 8009928:	bf00      	nop
 800992a:	e000      	b.n	800992e <cppLoop+0x1fee>
		break;
 800992c:	bf00      	nop

	}

	HAL_Delay(30);
 800992e:	201e      	movs	r0, #30
 8009930:	f000 f926 	bl	8009b80 <HAL_Delay>

}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993c:	20000540 	.word	0x20000540
 8009940:	2000054c 	.word	0x2000054c
 8009944:	2004811c 	.word	0x2004811c
 8009948:	08018d94 	.word	0x08018d94
 800994c:	08018be8 	.word	0x08018be8
 8009950:	20048124 	.word	0x20048124
 8009954:	08018d9c 	.word	0x08018d9c
 8009958:	2004812c 	.word	0x2004812c
 800995c:	08018da4 	.word	0x08018da4
 8009960:	2002389c 	.word	0x2002389c

08009964 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009964:	b580      	push	{r7, lr}
 8009966:	b088      	sub	sp, #32
 8009968:	af06      	add	r7, sp, #24
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d142      	bne.n	80099fa <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800997a:	4293      	cmp	r3, r2
 800997c:	d13d      	bne.n	80099fa <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 800997e:	4821      	ldr	r0, [pc, #132]	; (8009a04 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009980:	f7f8 fc80 	bl	8002284 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009984:	4820      	ldr	r0, [pc, #128]	; (8009a08 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009986:	f7fb fc8f 	bl	80052a8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800998a:	4820      	ldr	r0, [pc, #128]	; (8009a0c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800998c:	f7f8 fb16 	bl	8001fbc <_ZN8JoyStickC1Ev>
Motor motor;
 8009990:	481f      	ldr	r0, [pc, #124]	; (8009a10 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009992:	f7fb f989 	bl	8004ca8 <_ZN5MotorC1Ev>
IMU imu;
 8009996:	481f      	ldr	r0, [pc, #124]	; (8009a14 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009998:	f7f8 f91e 	bl	8001bd8 <_ZN3IMUC1Ev>
Logger logger;
 800999c:	481e      	ldr	r0, [pc, #120]	; (8009a18 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800999e:	f7fa fea5 	bl	80046ec <_ZN6LoggerC1Ev>
Encoder encoder;
 80099a2:	481e      	ldr	r0, [pc, #120]	; (8009a1c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80099a4:	f7f7 fd12 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80099a8:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80099aa:	4a1c      	ldr	r2, [pc, #112]	; (8009a1c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80099ac:	4918      	ldr	r1, [pc, #96]	; (8009a10 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80099ae:	481c      	ldr	r0, [pc, #112]	; (8009a20 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80099b0:	f7fb ffa0 	bl	80058f4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80099b4:	4b1a      	ldr	r3, [pc, #104]	; (8009a20 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80099b6:	4a17      	ldr	r2, [pc, #92]	; (8009a14 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80099b8:	4918      	ldr	r1, [pc, #96]	; (8009a1c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80099ba:	481a      	ldr	r0, [pc, #104]	; (8009a24 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80099bc:	f7fb fa5a 	bl	8004e74 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 80099c0:	4819      	ldr	r0, [pc, #100]	; (8009a28 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80099c2:	f7f7 fc07 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 80099c6:	4b18      	ldr	r3, [pc, #96]	; (8009a28 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80099c8:	9305      	str	r3, [sp, #20]
 80099ca:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80099d0:	9303      	str	r3, [sp, #12]
 80099d2:	4b14      	ldr	r3, [pc, #80]	; (8009a24 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80099d4:	9302      	str	r3, [sp, #8]
 80099d6:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4b10      	ldr	r3, [pc, #64]	; (8009a20 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80099e0:	4a08      	ldr	r2, [pc, #32]	; (8009a04 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80099e2:	490b      	ldr	r1, [pc, #44]	; (8009a10 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80099e4:	4811      	ldr	r0, [pc, #68]	; (8009a2c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80099e6:	f7f8 ff2b 	bl	8002840 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 80099ea:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80099ec:	490a      	ldr	r1, [pc, #40]	; (8009a18 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80099ee:	4810      	ldr	r0, [pc, #64]	; (8009a30 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80099f0:	f7fb fdb8 	bl	8005564 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80099f4:	480f      	ldr	r0, [pc, #60]	; (8009a34 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80099f6:	f7fb fae9 	bl	8004fcc <_ZN13PathFollowingC1Ev>
}
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	2000023c 	.word	0x2000023c
 8009a08:	20000534 	.word	0x20000534
 8009a0c:	20000540 	.word	0x20000540
 8009a10:	20000548 	.word	0x20000548
 8009a14:	2000055c 	.word	0x2000055c
 8009a18:	20000570 	.word	0x20000570
 8009a1c:	200237fc 	.word	0x200237fc
 8009a20:	2002381c 	.word	0x2002381c
 8009a24:	20023858 	.word	0x20023858
 8009a28:	20023898 	.word	0x20023898
 8009a2c:	2002389c 	.word	0x2002389c
 8009a30:	200307dc 	.word	0x200307dc
 8009a34:	200309e8 	.word	0x200309e8

08009a38 <_GLOBAL__sub_I_line_sensor>:
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009a40:	2001      	movs	r0, #1
 8009a42:	f7ff ff8f 	bl	8009964 <_Z41__static_initialization_and_destruction_0ii>
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009a80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009a4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009a4e:	e003      	b.n	8009a58 <LoopCopyDataInit>

08009a50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009a50:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009a52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009a54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009a56:	3104      	adds	r1, #4

08009a58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009a58:	480b      	ldr	r0, [pc, #44]	; (8009a88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009a5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009a5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009a60:	d3f6      	bcc.n	8009a50 <CopyDataInit>
  ldr  r2, =_sbss
 8009a62:	4a0b      	ldr	r2, [pc, #44]	; (8009a90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009a64:	e002      	b.n	8009a6c <LoopFillZerobss>

08009a66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009a66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009a68:	f842 3b04 	str.w	r3, [r2], #4

08009a6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009a6c:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009a6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009a70:	d3f9      	bcc.n	8009a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009a72:	f7fd fe53 	bl	800771c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009a76:	f00a fd7d 	bl	8014574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009a7a:	f7fc f98d 	bl	8005d98 <main>
  bx  lr    
 8009a7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009a80:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009a84:	080191c0 	.word	0x080191c0
  ldr  r0, =_sdata
 8009a88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009a8c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009a90:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009a94:	2004cb70 	.word	0x2004cb70

08009a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009a98:	e7fe      	b.n	8009a98 <ADC_IRQHandler>
	...

08009a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <HAL_Init+0x40>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a0d      	ldr	r2, [pc, #52]	; (8009adc <HAL_Init+0x40>)
 8009aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009aac:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <HAL_Init+0x40>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <HAL_Init+0x40>)
 8009ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009ab8:	4b08      	ldr	r3, [pc, #32]	; (8009adc <HAL_Init+0x40>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a07      	ldr	r2, [pc, #28]	; (8009adc <HAL_Init+0x40>)
 8009abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ac4:	2003      	movs	r0, #3
 8009ac6:	f000 fd51 	bl	800a56c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009aca:	2000      	movs	r0, #0
 8009acc:	f000 f808 	bl	8009ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009ad0:	f7fd f874 	bl	8006bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	40023c00 	.word	0x40023c00

08009ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009ae8:	4b12      	ldr	r3, [pc, #72]	; (8009b34 <HAL_InitTick+0x54>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <HAL_InitTick+0x58>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	4619      	mov	r1, r3
 8009af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 fd69 	bl	800a5d6 <HAL_SYSTICK_Config>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e00e      	b.n	8009b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b0f      	cmp	r3, #15
 8009b12:	d80a      	bhi.n	8009b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b14:	2200      	movs	r2, #0
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	f000 fd31 	bl	800a582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009b20:	4a06      	ldr	r2, [pc, #24]	; (8009b3c <HAL_InitTick+0x5c>)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e000      	b.n	8009b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20000000 	.word	0x20000000
 8009b38:	20000008 	.word	0x20000008
 8009b3c:	20000004 	.word	0x20000004

08009b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <HAL_IncTick+0x20>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <HAL_IncTick+0x24>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4413      	add	r3, r2
 8009b50:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <HAL_IncTick+0x24>)
 8009b52:	6013      	str	r3, [r2, #0]
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	20000008 	.word	0x20000008
 8009b64:	2004aaf8 	.word	0x2004aaf8

08009b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8009b6c:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <HAL_GetTick+0x14>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	2004aaf8 	.word	0x2004aaf8

08009b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009b88:	f7ff ffee 	bl	8009b68 <HAL_GetTick>
 8009b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b98:	d005      	beq.n	8009ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <HAL_Delay+0x40>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009ba6:	bf00      	nop
 8009ba8:	f7ff ffde 	bl	8009b68 <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d8f7      	bhi.n	8009ba8 <HAL_Delay+0x28>
  {
  }
}
 8009bb8:	bf00      	nop
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20000008 	.word	0x20000008

08009bc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e033      	b.n	8009c42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7fd f812 	bl	8006c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	f003 0310 	and.w	r3, r3, #16
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d118      	bne.n	8009c34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009c0a:	f023 0302 	bic.w	r3, r3, #2
 8009c0e:	f043 0202 	orr.w	r2, r3, #2
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa5a 	bl	800a0d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	f023 0303 	bic.w	r3, r3, #3
 8009c2a:	f043 0201 	orr.w	r2, r3, #1
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	641a      	str	r2, [r3, #64]	; 0x40
 8009c32:	e001      	b.n	8009c38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <HAL_ADC_Start_DMA+0x1e>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e0cc      	b.n	8009e04 <HAL_ADC_Start_DMA+0x1b8>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d018      	beq.n	8009cb2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0201 	orr.w	r2, r2, #1
 8009c8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009c90:	4b5e      	ldr	r3, [pc, #376]	; (8009e0c <HAL_ADC_Start_DMA+0x1c0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a5e      	ldr	r2, [pc, #376]	; (8009e10 <HAL_ADC_Start_DMA+0x1c4>)
 8009c96:	fba2 2303 	umull	r2, r3, r2, r3
 8009c9a:	0c9a      	lsrs	r2, r3, #18
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	005b      	lsls	r3, r3, #1
 8009ca0:	4413      	add	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009ca4:	e002      	b.n	8009cac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1f9      	bne.n	8009ca6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	f040 80a0 	bne.w	8009e02 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d007      	beq.n	8009cf4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009cec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d00:	d106      	bne.n	8009d10 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d06:	f023 0206 	bic.w	r2, r3, #6
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	645a      	str	r2, [r3, #68]	; 0x44
 8009d0e:	e002      	b.n	8009d16 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009d1e:	4b3d      	ldr	r3, [pc, #244]	; (8009e14 <HAL_ADC_Start_DMA+0x1c8>)
 8009d20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	4a3c      	ldr	r2, [pc, #240]	; (8009e18 <HAL_ADC_Start_DMA+0x1cc>)
 8009d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	4a3b      	ldr	r2, [pc, #236]	; (8009e1c <HAL_ADC_Start_DMA+0x1d0>)
 8009d30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d36:	4a3a      	ldr	r2, [pc, #232]	; (8009e20 <HAL_ADC_Start_DMA+0x1d4>)
 8009d38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009d42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009d52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689a      	ldr	r2, [r3, #8]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	334c      	adds	r3, #76	; 0x4c
 8009d6e:	4619      	mov	r1, r3
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f000 fcea 	bl	800a74c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f003 031f 	and.w	r3, r3, #31
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d12a      	bne.n	8009dda <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a26      	ldr	r2, [pc, #152]	; (8009e24 <HAL_ADC_Start_DMA+0x1d8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d015      	beq.n	8009dba <HAL_ADC_Start_DMA+0x16e>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a25      	ldr	r2, [pc, #148]	; (8009e28 <HAL_ADC_Start_DMA+0x1dc>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d105      	bne.n	8009da4 <HAL_ADC_Start_DMA+0x158>
 8009d98:	4b1e      	ldr	r3, [pc, #120]	; (8009e14 <HAL_ADC_Start_DMA+0x1c8>)
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f003 031f 	and.w	r3, r3, #31
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00a      	beq.n	8009dba <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a20      	ldr	r2, [pc, #128]	; (8009e2c <HAL_ADC_Start_DMA+0x1e0>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d129      	bne.n	8009e02 <HAL_ADC_Start_DMA+0x1b6>
 8009dae:	4b19      	ldr	r3, [pc, #100]	; (8009e14 <HAL_ADC_Start_DMA+0x1c8>)
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f003 031f 	and.w	r3, r3, #31
 8009db6:	2b0f      	cmp	r3, #15
 8009db8:	d823      	bhi.n	8009e02 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11c      	bne.n	8009e02 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689a      	ldr	r2, [r3, #8]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009dd6:	609a      	str	r2, [r3, #8]
 8009dd8:	e013      	b.n	8009e02 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a11      	ldr	r2, [pc, #68]	; (8009e24 <HAL_ADC_Start_DMA+0x1d8>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d10e      	bne.n	8009e02 <HAL_ADC_Start_DMA+0x1b6>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d107      	bne.n	8009e02 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009e00:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3718      	adds	r7, #24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	20000000 	.word	0x20000000
 8009e10:	431bde83 	.word	0x431bde83
 8009e14:	40012300 	.word	0x40012300
 8009e18:	0800a2c9 	.word	0x0800a2c9
 8009e1c:	0800a383 	.word	0x0800a383
 8009e20:	0800a39f 	.word	0x0800a39f
 8009e24:	40012000 	.word	0x40012000
 8009e28:	40012100 	.word	0x40012100
 8009e2c:	40012200 	.word	0x40012200

08009e30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d101      	bne.n	8009e88 <HAL_ADC_ConfigChannel+0x1c>
 8009e84:	2302      	movs	r3, #2
 8009e86:	e113      	b.n	800a0b0 <HAL_ADC_ConfigChannel+0x244>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d925      	bls.n	8009ee4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68d9      	ldr	r1, [r3, #12]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	4413      	add	r3, r2
 8009eac:	3b1e      	subs	r3, #30
 8009eae:	2207      	movs	r2, #7
 8009eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb4:	43da      	mvns	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	400a      	ands	r2, r1
 8009ebc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68d9      	ldr	r1, [r3, #12]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	4618      	mov	r0, r3
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	4403      	add	r3, r0
 8009ed6:	3b1e      	subs	r3, #30
 8009ed8:	409a      	lsls	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	60da      	str	r2, [r3, #12]
 8009ee2:	e022      	b.n	8009f2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6919      	ldr	r1, [r3, #16]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	2207      	movs	r2, #7
 8009efa:	fa02 f303 	lsl.w	r3, r2, r3
 8009efe:	43da      	mvns	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	400a      	ands	r2, r1
 8009f06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6919      	ldr	r1, [r3, #16]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	689a      	ldr	r2, [r3, #8]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4618      	mov	r0, r3
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	4403      	add	r3, r0
 8009f20:	409a      	lsls	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2b06      	cmp	r3, #6
 8009f30:	d824      	bhi.n	8009f7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	3b05      	subs	r3, #5
 8009f44:	221f      	movs	r2, #31
 8009f46:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4a:	43da      	mvns	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	400a      	ands	r2, r1
 8009f52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	4618      	mov	r0, r3
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	4613      	mov	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	3b05      	subs	r3, #5
 8009f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	635a      	str	r2, [r3, #52]	; 0x34
 8009f7a:	e04c      	b.n	800a016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2b0c      	cmp	r3, #12
 8009f82:	d824      	bhi.n	8009fce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	3b23      	subs	r3, #35	; 0x23
 8009f96:	221f      	movs	r2, #31
 8009f98:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9c:	43da      	mvns	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	400a      	ands	r2, r1
 8009fa4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3b23      	subs	r3, #35	; 0x23
 8009fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	631a      	str	r2, [r3, #48]	; 0x30
 8009fcc:	e023      	b.n	800a016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	3b41      	subs	r3, #65	; 0x41
 8009fe0:	221f      	movs	r2, #31
 8009fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe6:	43da      	mvns	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	400a      	ands	r2, r1
 8009fee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	3b41      	subs	r3, #65	; 0x41
 800a00a:	fa00 f203 	lsl.w	r2, r0, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	430a      	orrs	r2, r1
 800a014:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a016:	4b29      	ldr	r3, [pc, #164]	; (800a0bc <HAL_ADC_ConfigChannel+0x250>)
 800a018:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a28      	ldr	r2, [pc, #160]	; (800a0c0 <HAL_ADC_ConfigChannel+0x254>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d10f      	bne.n	800a044 <HAL_ADC_ConfigChannel+0x1d8>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b12      	cmp	r3, #18
 800a02a:	d10b      	bne.n	800a044 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a1d      	ldr	r2, [pc, #116]	; (800a0c0 <HAL_ADC_ConfigChannel+0x254>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d12b      	bne.n	800a0a6 <HAL_ADC_ConfigChannel+0x23a>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a1c      	ldr	r2, [pc, #112]	; (800a0c4 <HAL_ADC_ConfigChannel+0x258>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d003      	beq.n	800a060 <HAL_ADC_ConfigChannel+0x1f4>
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b11      	cmp	r3, #17
 800a05e:	d122      	bne.n	800a0a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a11      	ldr	r2, [pc, #68]	; (800a0c4 <HAL_ADC_ConfigChannel+0x258>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d111      	bne.n	800a0a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a082:	4b11      	ldr	r3, [pc, #68]	; (800a0c8 <HAL_ADC_ConfigChannel+0x25c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a11      	ldr	r2, [pc, #68]	; (800a0cc <HAL_ADC_ConfigChannel+0x260>)
 800a088:	fba2 2303 	umull	r2, r3, r2, r3
 800a08c:	0c9a      	lsrs	r2, r3, #18
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a098:	e002      	b.n	800a0a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1f9      	bne.n	800a09a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	40012300 	.word	0x40012300
 800a0c0:	40012000 	.word	0x40012000
 800a0c4:	10000012 	.word	0x10000012
 800a0c8:	20000000 	.word	0x20000000
 800a0cc:	431bde83 	.word	0x431bde83

0800a0d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a0d8:	4b79      	ldr	r3, [pc, #484]	; (800a2c0 <ADC_Init+0x1f0>)
 800a0da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6859      	ldr	r1, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	021a      	lsls	r2, r3, #8
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6859      	ldr	r1, [r3, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a14a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6899      	ldr	r1, [r3, #8]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68da      	ldr	r2, [r3, #12]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	4a58      	ldr	r2, [pc, #352]	; (800a2c4 <ADC_Init+0x1f4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d022      	beq.n	800a1ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a176:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6899      	ldr	r1, [r3, #8]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6899      	ldr	r1, [r3, #8]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	609a      	str	r2, [r3, #8]
 800a1ac:	e00f      	b.n	800a1ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a1bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a1cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f022 0202 	bic.w	r2, r2, #2
 800a1dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6899      	ldr	r1, [r3, #8]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	7e1b      	ldrb	r3, [r3, #24]
 800a1e8:	005a      	lsls	r2, r3, #1
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01b      	beq.n	800a234 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a20a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a21a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6859      	ldr	r1, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	3b01      	subs	r3, #1
 800a228:	035a      	lsls	r2, r3, #13
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	605a      	str	r2, [r3, #4]
 800a232:	e007      	b.n	800a244 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a242:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a252:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	3b01      	subs	r3, #1
 800a260:	051a      	lsls	r2, r3, #20
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6899      	ldr	r1, [r3, #8]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a286:	025a      	lsls	r2, r3, #9
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	430a      	orrs	r2, r1
 800a28e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a29e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6899      	ldr	r1, [r3, #8]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	029a      	lsls	r2, r3, #10
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	430a      	orrs	r2, r1
 800a2b2:	609a      	str	r2, [r3, #8]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	40012300 	.word	0x40012300
 800a2c4:	0f000001 	.word	0x0f000001

0800a2c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d13c      	bne.n	800a35c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d12b      	bne.n	800a354 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a300:	2b00      	cmp	r3, #0
 800a302:	d127      	bne.n	800a354 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d006      	beq.n	800a320 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d119      	bne.n	800a354 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 0220 	bic.w	r2, r2, #32
 800a32e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d105      	bne.n	800a354 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34c:	f043 0201 	orr.w	r2, r3, #1
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7ff fd6b 	bl	8009e30 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a35a:	e00e      	b.n	800a37a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff fd75 	bl	8009e58 <HAL_ADC_ErrorCallback>
}
 800a36e:	e004      	b.n	800a37a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	4798      	blx	r3
}
 800a37a:	bf00      	nop
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f7ff fd57 	bl	8009e44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2240      	movs	r2, #64	; 0x40
 800a3b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b6:	f043 0204 	orr.w	r2, r3, #4
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fd4a 	bl	8009e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a3dc:	4b0c      	ldr	r3, [pc, #48]	; (800a410 <__NVIC_SetPriorityGrouping+0x44>)
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a3f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a3f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a3fe:	4a04      	ldr	r2, [pc, #16]	; (800a410 <__NVIC_SetPriorityGrouping+0x44>)
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	60d3      	str	r3, [r2, #12]
}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	e000ed00 	.word	0xe000ed00

0800a414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a414:	b480      	push	{r7}
 800a416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a418:	4b04      	ldr	r3, [pc, #16]	; (800a42c <__NVIC_GetPriorityGrouping+0x18>)
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	0a1b      	lsrs	r3, r3, #8
 800a41e:	f003 0307 	and.w	r3, r3, #7
}
 800a422:	4618      	mov	r0, r3
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	e000ed00 	.word	0xe000ed00

0800a430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a43a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	db0b      	blt.n	800a45a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	f003 021f 	and.w	r2, r3, #31
 800a448:	4907      	ldr	r1, [pc, #28]	; (800a468 <__NVIC_EnableIRQ+0x38>)
 800a44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a44e:	095b      	lsrs	r3, r3, #5
 800a450:	2001      	movs	r0, #1
 800a452:	fa00 f202 	lsl.w	r2, r0, r2
 800a456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	e000e100 	.word	0xe000e100

0800a46c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	6039      	str	r1, [r7, #0]
 800a476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	db0a      	blt.n	800a496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	b2da      	uxtb	r2, r3
 800a484:	490c      	ldr	r1, [pc, #48]	; (800a4b8 <__NVIC_SetPriority+0x4c>)
 800a486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a48a:	0112      	lsls	r2, r2, #4
 800a48c:	b2d2      	uxtb	r2, r2
 800a48e:	440b      	add	r3, r1
 800a490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a494:	e00a      	b.n	800a4ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	4908      	ldr	r1, [pc, #32]	; (800a4bc <__NVIC_SetPriority+0x50>)
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	3b04      	subs	r3, #4
 800a4a4:	0112      	lsls	r2, r2, #4
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	761a      	strb	r2, [r3, #24]
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	e000e100 	.word	0xe000e100
 800a4bc:	e000ed00 	.word	0xe000ed00

0800a4c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b089      	sub	sp, #36	; 0x24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	f1c3 0307 	rsb	r3, r3, #7
 800a4da:	2b04      	cmp	r3, #4
 800a4dc:	bf28      	it	cs
 800a4de:	2304      	movcs	r3, #4
 800a4e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	2b06      	cmp	r3, #6
 800a4e8:	d902      	bls.n	800a4f0 <NVIC_EncodePriority+0x30>
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	3b03      	subs	r3, #3
 800a4ee:	e000      	b.n	800a4f2 <NVIC_EncodePriority+0x32>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fe:	43da      	mvns	r2, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	401a      	ands	r2, r3
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a508:	f04f 31ff 	mov.w	r1, #4294967295
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	fa01 f303 	lsl.w	r3, r1, r3
 800a512:	43d9      	mvns	r1, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a518:	4313      	orrs	r3, r2
         );
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3724      	adds	r7, #36	; 0x24
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3b01      	subs	r3, #1
 800a534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a538:	d301      	bcc.n	800a53e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a53a:	2301      	movs	r3, #1
 800a53c:	e00f      	b.n	800a55e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a53e:	4a0a      	ldr	r2, [pc, #40]	; (800a568 <SysTick_Config+0x40>)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3b01      	subs	r3, #1
 800a544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a546:	210f      	movs	r1, #15
 800a548:	f04f 30ff 	mov.w	r0, #4294967295
 800a54c:	f7ff ff8e 	bl	800a46c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a550:	4b05      	ldr	r3, [pc, #20]	; (800a568 <SysTick_Config+0x40>)
 800a552:	2200      	movs	r2, #0
 800a554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a556:	4b04      	ldr	r3, [pc, #16]	; (800a568 <SysTick_Config+0x40>)
 800a558:	2207      	movs	r2, #7
 800a55a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	e000e010 	.word	0xe000e010

0800a56c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff ff29 	bl	800a3cc <__NVIC_SetPriorityGrouping>
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a582:	b580      	push	{r7, lr}
 800a584:	b086      	sub	sp, #24
 800a586:	af00      	add	r7, sp, #0
 800a588:	4603      	mov	r3, r0
 800a58a:	60b9      	str	r1, [r7, #8]
 800a58c:	607a      	str	r2, [r7, #4]
 800a58e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a590:	2300      	movs	r3, #0
 800a592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a594:	f7ff ff3e 	bl	800a414 <__NVIC_GetPriorityGrouping>
 800a598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	68b9      	ldr	r1, [r7, #8]
 800a59e:	6978      	ldr	r0, [r7, #20]
 800a5a0:	f7ff ff8e 	bl	800a4c0 <NVIC_EncodePriority>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff ff5d 	bl	800a46c <__NVIC_SetPriority>
}
 800a5b2:	bf00      	nop
 800a5b4:	3718      	adds	r7, #24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a5c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff ff31 	bl	800a430 <__NVIC_EnableIRQ>
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff ffa2 	bl	800a528 <SysTick_Config>
 800a5e4:	4603      	mov	r3, r0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a5fc:	f7ff fab4 	bl	8009b68 <HAL_GetTick>
 800a600:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e099      	b.n	800a740 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2202      	movs	r2, #2
 800a618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0201 	bic.w	r2, r2, #1
 800a62a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a62c:	e00f      	b.n	800a64e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a62e:	f7ff fa9b 	bl	8009b68 <HAL_GetTick>
 800a632:	4602      	mov	r2, r0
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	2b05      	cmp	r3, #5
 800a63a:	d908      	bls.n	800a64e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2220      	movs	r2, #32
 800a640:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2203      	movs	r2, #3
 800a646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e078      	b.n	800a740 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e8      	bne.n	800a62e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	4b38      	ldr	r3, [pc, #224]	; (800a748 <HAL_DMA_Init+0x158>)
 800a668:	4013      	ands	r3, r2
 800a66a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a67a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	2b04      	cmp	r3, #4
 800a6a6:	d107      	bne.n	800a6b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f023 0307 	bic.w	r3, r3, #7
 800a6ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d117      	bne.n	800a712 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00e      	beq.n	800a712 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fa9d 	bl	800ac34 <DMA_CheckFifoParam>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d008      	beq.n	800a712 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2240      	movs	r2, #64	; 0x40
 800a704:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a70e:	2301      	movs	r3, #1
 800a710:	e016      	b.n	800a740 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fa54 	bl	800abc8 <DMA_CalcBaseAndBitshift>
 800a720:	4603      	mov	r3, r0
 800a722:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a728:	223f      	movs	r2, #63	; 0x3f
 800a72a:	409a      	lsls	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	f010803f 	.word	0xf010803f

0800a74c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a762:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d101      	bne.n	800a772 <HAL_DMA_Start_IT+0x26>
 800a76e:	2302      	movs	r3, #2
 800a770:	e040      	b.n	800a7f4 <HAL_DMA_Start_IT+0xa8>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b01      	cmp	r3, #1
 800a784:	d12f      	bne.n	800a7e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2202      	movs	r2, #2
 800a78a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	68b9      	ldr	r1, [r7, #8]
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 f9e6 	bl	800ab6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a4:	223f      	movs	r2, #63	; 0x3f
 800a7a6:	409a      	lsls	r2, r3
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f042 0216 	orr.w	r2, r2, #22
 800a7ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f042 0208 	orr.w	r2, r2, #8
 800a7d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0201 	orr.w	r2, r2, #1
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	e005      	b.n	800a7f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d004      	beq.n	800a81a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2280      	movs	r2, #128	; 0x80
 800a814:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e00c      	b.n	800a834 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2205      	movs	r2, #5
 800a81e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f022 0201 	bic.w	r2, r2, #1
 800a830:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a84c:	4b92      	ldr	r3, [pc, #584]	; (800aa98 <HAL_DMA_IRQHandler+0x258>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a92      	ldr	r2, [pc, #584]	; (800aa9c <HAL_DMA_IRQHandler+0x25c>)
 800a852:	fba2 2303 	umull	r2, r3, r2, r3
 800a856:	0a9b      	lsrs	r3, r3, #10
 800a858:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a86a:	2208      	movs	r2, #8
 800a86c:	409a      	lsls	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4013      	ands	r3, r2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d01a      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b00      	cmp	r3, #0
 800a882:	d013      	beq.n	800a8ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0204 	bic.w	r2, r2, #4
 800a892:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a898:	2208      	movs	r2, #8
 800a89a:	409a      	lsls	r2, r3
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a4:	f043 0201 	orr.w	r2, r3, #1
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	409a      	lsls	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d012      	beq.n	800a8e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00b      	beq.n	800a8e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	409a      	lsls	r2, r3
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8da:	f043 0202 	orr.w	r2, r3, #2
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8e6:	2204      	movs	r2, #4
 800a8e8:	409a      	lsls	r2, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d012      	beq.n	800a918 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0302 	and.w	r3, r3, #2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00b      	beq.n	800a918 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a904:	2204      	movs	r2, #4
 800a906:	409a      	lsls	r2, r3
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a910:	f043 0204 	orr.w	r2, r3, #4
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91c:	2210      	movs	r2, #16
 800a91e:	409a      	lsls	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4013      	ands	r3, r2
 800a924:	2b00      	cmp	r3, #0
 800a926:	d043      	beq.n	800a9b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0308 	and.w	r3, r3, #8
 800a932:	2b00      	cmp	r3, #0
 800a934:	d03c      	beq.n	800a9b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a93a:	2210      	movs	r2, #16
 800a93c:	409a      	lsls	r2, r3
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d018      	beq.n	800a982 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d108      	bne.n	800a970 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a962:	2b00      	cmp	r3, #0
 800a964:	d024      	beq.n	800a9b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	4798      	blx	r3
 800a96e:	e01f      	b.n	800a9b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01b      	beq.n	800a9b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	4798      	blx	r3
 800a980:	e016      	b.n	800a9b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d107      	bne.n	800a9a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f022 0208 	bic.w	r2, r2, #8
 800a99e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	409a      	lsls	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 808e 	beq.w	800aade <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0310 	and.w	r3, r3, #16
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 8086 	beq.w	800aade <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	409a      	lsls	r2, r3
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b05      	cmp	r3, #5
 800a9e8:	d136      	bne.n	800aa58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0216 	bic.w	r2, r2, #22
 800a9f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	695a      	ldr	r2, [r3, #20]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d103      	bne.n	800aa1a <HAL_DMA_IRQHandler+0x1da>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d007      	beq.n	800aa2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f022 0208 	bic.w	r2, r2, #8
 800aa28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa2e:	223f      	movs	r2, #63	; 0x3f
 800aa30:	409a      	lsls	r2, r3
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d07d      	beq.n	800ab4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	4798      	blx	r3
        }
        return;
 800aa56:	e078      	b.n	800ab4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d01c      	beq.n	800aaa0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d108      	bne.n	800aa86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d030      	beq.n	800aade <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	4798      	blx	r3
 800aa84:	e02b      	b.n	800aade <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d027      	beq.n	800aade <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	4798      	blx	r3
 800aa96:	e022      	b.n	800aade <HAL_DMA_IRQHandler+0x29e>
 800aa98:	20000000 	.word	0x20000000
 800aa9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10f      	bne.n	800aace <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f022 0210 	bic.w	r2, r2, #16
 800aabc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d032      	beq.n	800ab4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d022      	beq.n	800ab38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2205      	movs	r2, #5
 800aaf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f022 0201 	bic.w	r2, r2, #1
 800ab08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	60bb      	str	r3, [r7, #8]
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d307      	bcc.n	800ab26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f2      	bne.n	800ab0a <HAL_DMA_IRQHandler+0x2ca>
 800ab24:	e000      	b.n	800ab28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ab26:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d005      	beq.n	800ab4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	4798      	blx	r3
 800ab48:	e000      	b.n	800ab4c <HAL_DMA_IRQHandler+0x30c>
        return;
 800ab4a:	bf00      	nop
    }
  }
}
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop

0800ab54 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	2b40      	cmp	r3, #64	; 0x40
 800ab98:	d108      	bne.n	800abac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800abaa:	e007      	b.n	800abbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	60da      	str	r2, [r3, #12]
}
 800abbc:	bf00      	nop
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	3b10      	subs	r3, #16
 800abd8:	4a14      	ldr	r2, [pc, #80]	; (800ac2c <DMA_CalcBaseAndBitshift+0x64>)
 800abda:	fba2 2303 	umull	r2, r3, r2, r3
 800abde:	091b      	lsrs	r3, r3, #4
 800abe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800abe2:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <DMA_CalcBaseAndBitshift+0x68>)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	461a      	mov	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d909      	bls.n	800ac0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800abfe:	f023 0303 	bic.w	r3, r3, #3
 800ac02:	1d1a      	adds	r2, r3, #4
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	659a      	str	r2, [r3, #88]	; 0x58
 800ac08:	e007      	b.n	800ac1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ac12:	f023 0303 	bic.w	r3, r3, #3
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	aaaaaaab 	.word	0xaaaaaaab
 800ac30:	08018de0 	.word	0x08018de0

0800ac34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d11f      	bne.n	800ac8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d855      	bhi.n	800ad00 <DMA_CheckFifoParam+0xcc>
 800ac54:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <DMA_CheckFifoParam+0x28>)
 800ac56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5a:	bf00      	nop
 800ac5c:	0800ac6d 	.word	0x0800ac6d
 800ac60:	0800ac7f 	.word	0x0800ac7f
 800ac64:	0800ac6d 	.word	0x0800ac6d
 800ac68:	0800ad01 	.word	0x0800ad01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d045      	beq.n	800ad04 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ac7c:	e042      	b.n	800ad04 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ac86:	d13f      	bne.n	800ad08 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ac8c:	e03c      	b.n	800ad08 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac96:	d121      	bne.n	800acdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d836      	bhi.n	800ad0c <DMA_CheckFifoParam+0xd8>
 800ac9e:	a201      	add	r2, pc, #4	; (adr r2, 800aca4 <DMA_CheckFifoParam+0x70>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acb5 	.word	0x0800acb5
 800aca8:	0800acbb 	.word	0x0800acbb
 800acac:	0800acb5 	.word	0x0800acb5
 800acb0:	0800accd 	.word	0x0800accd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	73fb      	strb	r3, [r7, #15]
      break;
 800acb8:	e02f      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d024      	beq.n	800ad10 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800acca:	e021      	b.n	800ad10 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800acd4:	d11e      	bne.n	800ad14 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800acda:	e01b      	b.n	800ad14 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d902      	bls.n	800ace8 <DMA_CheckFifoParam+0xb4>
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d003      	beq.n	800acee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ace6:	e018      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	73fb      	strb	r3, [r7, #15]
      break;
 800acec:	e015      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00e      	beq.n	800ad18 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	73fb      	strb	r3, [r7, #15]
      break;
 800acfe:	e00b      	b.n	800ad18 <DMA_CheckFifoParam+0xe4>
      break;
 800ad00:	bf00      	nop
 800ad02:	e00a      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
      break;
 800ad04:	bf00      	nop
 800ad06:	e008      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
      break;
 800ad08:	bf00      	nop
 800ad0a:	e006      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
      break;
 800ad0c:	bf00      	nop
 800ad0e:	e004      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
      break;
 800ad10:	bf00      	nop
 800ad12:	e002      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
      break;   
 800ad14:	bf00      	nop
 800ad16:	e000      	b.n	800ad1a <DMA_CheckFifoParam+0xe6>
      break;
 800ad18:	bf00      	nop
    }
  } 
  
  return status; 
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b089      	sub	sp, #36	; 0x24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ad3e:	2300      	movs	r3, #0
 800ad40:	61fb      	str	r3, [r7, #28]
 800ad42:	e177      	b.n	800b034 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ad44:	2201      	movs	r2, #1
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	4013      	ands	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ad58:	693a      	ldr	r2, [r7, #16]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	f040 8166 	bne.w	800b02e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d00b      	beq.n	800ad82 <HAL_GPIO_Init+0x5a>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d007      	beq.n	800ad82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad76:	2b11      	cmp	r3, #17
 800ad78:	d003      	beq.n	800ad82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	2b12      	cmp	r3, #18
 800ad80:	d130      	bne.n	800ade4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	2203      	movs	r2, #3
 800ad8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad92:	43db      	mvns	r3, r3
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	4013      	ands	r3, r2
 800ad98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	68da      	ldr	r2, [r3, #12]
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	005b      	lsls	r3, r3, #1
 800ada2:	fa02 f303 	lsl.w	r3, r2, r3
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	69ba      	ldr	r2, [r7, #24]
 800adb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800adb8:	2201      	movs	r2, #1
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	fa02 f303 	lsl.w	r3, r2, r3
 800adc0:	43db      	mvns	r3, r3
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	4013      	ands	r3, r2
 800adc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	091b      	lsrs	r3, r3, #4
 800adce:	f003 0201 	and.w	r2, r3, #1
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	fa02 f303 	lsl.w	r3, r2, r3
 800add8:	69ba      	ldr	r2, [r7, #24]
 800adda:	4313      	orrs	r3, r2
 800addc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	005b      	lsls	r3, r3, #1
 800adee:	2203      	movs	r2, #3
 800adf0:	fa02 f303 	lsl.w	r3, r2, r3
 800adf4:	43db      	mvns	r3, r3
 800adf6:	69ba      	ldr	r2, [r7, #24]
 800adf8:	4013      	ands	r3, r2
 800adfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	fa02 f303 	lsl.w	r3, r2, r3
 800ae08:	69ba      	ldr	r2, [r7, #24]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d003      	beq.n	800ae24 <HAL_GPIO_Init+0xfc>
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	2b12      	cmp	r3, #18
 800ae22:	d123      	bne.n	800ae6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	08da      	lsrs	r2, r3, #3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3208      	adds	r2, #8
 800ae2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	f003 0307 	and.w	r3, r3, #7
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	220f      	movs	r2, #15
 800ae3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae40:	43db      	mvns	r3, r3
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	4013      	ands	r3, r2
 800ae46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	fa02 f303 	lsl.w	r3, r2, r3
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	08da      	lsrs	r2, r3, #3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3208      	adds	r2, #8
 800ae66:	69b9      	ldr	r1, [r7, #24]
 800ae68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	2203      	movs	r2, #3
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	4013      	ands	r3, r2
 800ae82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	f003 0203 	and.w	r2, r3, #3
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	fa02 f303 	lsl.w	r3, r2, r3
 800ae94:	69ba      	ldr	r2, [r7, #24]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69ba      	ldr	r2, [r7, #24]
 800ae9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 80c0 	beq.w	800b02e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	4b65      	ldr	r3, [pc, #404]	; (800b048 <HAL_GPIO_Init+0x320>)
 800aeb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb6:	4a64      	ldr	r2, [pc, #400]	; (800b048 <HAL_GPIO_Init+0x320>)
 800aeb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aebc:	6453      	str	r3, [r2, #68]	; 0x44
 800aebe:	4b62      	ldr	r3, [pc, #392]	; (800b048 <HAL_GPIO_Init+0x320>)
 800aec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aeca:	4a60      	ldr	r2, [pc, #384]	; (800b04c <HAL_GPIO_Init+0x324>)
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	089b      	lsrs	r3, r3, #2
 800aed0:	3302      	adds	r3, #2
 800aed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	f003 0303 	and.w	r3, r3, #3
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	220f      	movs	r2, #15
 800aee2:	fa02 f303 	lsl.w	r3, r2, r3
 800aee6:	43db      	mvns	r3, r3
 800aee8:	69ba      	ldr	r2, [r7, #24]
 800aeea:	4013      	ands	r3, r2
 800aeec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a57      	ldr	r2, [pc, #348]	; (800b050 <HAL_GPIO_Init+0x328>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d037      	beq.n	800af66 <HAL_GPIO_Init+0x23e>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a56      	ldr	r2, [pc, #344]	; (800b054 <HAL_GPIO_Init+0x32c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d031      	beq.n	800af62 <HAL_GPIO_Init+0x23a>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a55      	ldr	r2, [pc, #340]	; (800b058 <HAL_GPIO_Init+0x330>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d02b      	beq.n	800af5e <HAL_GPIO_Init+0x236>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a54      	ldr	r2, [pc, #336]	; (800b05c <HAL_GPIO_Init+0x334>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d025      	beq.n	800af5a <HAL_GPIO_Init+0x232>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a53      	ldr	r2, [pc, #332]	; (800b060 <HAL_GPIO_Init+0x338>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d01f      	beq.n	800af56 <HAL_GPIO_Init+0x22e>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a52      	ldr	r2, [pc, #328]	; (800b064 <HAL_GPIO_Init+0x33c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d019      	beq.n	800af52 <HAL_GPIO_Init+0x22a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a51      	ldr	r2, [pc, #324]	; (800b068 <HAL_GPIO_Init+0x340>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d013      	beq.n	800af4e <HAL_GPIO_Init+0x226>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a50      	ldr	r2, [pc, #320]	; (800b06c <HAL_GPIO_Init+0x344>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d00d      	beq.n	800af4a <HAL_GPIO_Init+0x222>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a4f      	ldr	r2, [pc, #316]	; (800b070 <HAL_GPIO_Init+0x348>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d007      	beq.n	800af46 <HAL_GPIO_Init+0x21e>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a4e      	ldr	r2, [pc, #312]	; (800b074 <HAL_GPIO_Init+0x34c>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d101      	bne.n	800af42 <HAL_GPIO_Init+0x21a>
 800af3e:	2309      	movs	r3, #9
 800af40:	e012      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af42:	230a      	movs	r3, #10
 800af44:	e010      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af46:	2308      	movs	r3, #8
 800af48:	e00e      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af4a:	2307      	movs	r3, #7
 800af4c:	e00c      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af4e:	2306      	movs	r3, #6
 800af50:	e00a      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af52:	2305      	movs	r3, #5
 800af54:	e008      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af56:	2304      	movs	r3, #4
 800af58:	e006      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af5a:	2303      	movs	r3, #3
 800af5c:	e004      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af5e:	2302      	movs	r3, #2
 800af60:	e002      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af62:	2301      	movs	r3, #1
 800af64:	e000      	b.n	800af68 <HAL_GPIO_Init+0x240>
 800af66:	2300      	movs	r3, #0
 800af68:	69fa      	ldr	r2, [r7, #28]
 800af6a:	f002 0203 	and.w	r2, r2, #3
 800af6e:	0092      	lsls	r2, r2, #2
 800af70:	4093      	lsls	r3, r2
 800af72:	69ba      	ldr	r2, [r7, #24]
 800af74:	4313      	orrs	r3, r2
 800af76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af78:	4934      	ldr	r1, [pc, #208]	; (800b04c <HAL_GPIO_Init+0x324>)
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	089b      	lsrs	r3, r3, #2
 800af7e:	3302      	adds	r3, #2
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800af86:	4b3c      	ldr	r3, [pc, #240]	; (800b078 <HAL_GPIO_Init+0x350>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	43db      	mvns	r3, r3
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	4013      	ands	r3, r2
 800af94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800afa2:	69ba      	ldr	r2, [r7, #24]
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800afaa:	4a33      	ldr	r2, [pc, #204]	; (800b078 <HAL_GPIO_Init+0x350>)
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800afb0:	4b31      	ldr	r3, [pc, #196]	; (800b078 <HAL_GPIO_Init+0x350>)
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	43db      	mvns	r3, r3
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	4013      	ands	r3, r2
 800afbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d003      	beq.n	800afd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800afd4:	4a28      	ldr	r2, [pc, #160]	; (800b078 <HAL_GPIO_Init+0x350>)
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800afda:	4b27      	ldr	r3, [pc, #156]	; (800b078 <HAL_GPIO_Init+0x350>)
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	43db      	mvns	r3, r3
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	4013      	ands	r3, r2
 800afe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	4313      	orrs	r3, r2
 800affc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800affe:	4a1e      	ldr	r2, [pc, #120]	; (800b078 <HAL_GPIO_Init+0x350>)
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b004:	4b1c      	ldr	r3, [pc, #112]	; (800b078 <HAL_GPIO_Init+0x350>)
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	43db      	mvns	r3, r3
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	4013      	ands	r3, r2
 800b012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	4313      	orrs	r3, r2
 800b026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b028:	4a13      	ldr	r2, [pc, #76]	; (800b078 <HAL_GPIO_Init+0x350>)
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	3301      	adds	r3, #1
 800b032:	61fb      	str	r3, [r7, #28]
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	2b0f      	cmp	r3, #15
 800b038:	f67f ae84 	bls.w	800ad44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b03c:	bf00      	nop
 800b03e:	3724      	adds	r7, #36	; 0x24
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr
 800b048:	40023800 	.word	0x40023800
 800b04c:	40013800 	.word	0x40013800
 800b050:	40020000 	.word	0x40020000
 800b054:	40020400 	.word	0x40020400
 800b058:	40020800 	.word	0x40020800
 800b05c:	40020c00 	.word	0x40020c00
 800b060:	40021000 	.word	0x40021000
 800b064:	40021400 	.word	0x40021400
 800b068:	40021800 	.word	0x40021800
 800b06c:	40021c00 	.word	0x40021c00
 800b070:	40022000 	.word	0x40022000
 800b074:	40022400 	.word	0x40022400
 800b078:	40013c00 	.word	0x40013c00

0800b07c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	691a      	ldr	r2, [r3, #16]
 800b08c:	887b      	ldrh	r3, [r7, #2]
 800b08e:	4013      	ands	r3, r2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b094:	2301      	movs	r3, #1
 800b096:	73fb      	strb	r3, [r7, #15]
 800b098:	e001      	b.n	800b09e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	807b      	strh	r3, [r7, #2]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b0bc:	787b      	ldrb	r3, [r7, #1]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b0c2:	887a      	ldrh	r2, [r7, #2]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b0c8:	e003      	b.n	800b0d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b0ca:	887b      	ldrh	r3, [r7, #2]
 800b0cc:	041a      	lsls	r2, r3, #16
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	619a      	str	r2, [r3, #24]
}
 800b0d2:	bf00      	nop
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
	...

0800b0e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e11f      	b.n	800b332 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7fb fe32 	bl	8006d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2224      	movs	r2, #36	; 0x24
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f022 0201 	bic.w	r2, r2, #1
 800b122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b144:	f001 f96e 	bl	800c424 <HAL_RCC_GetPCLK1Freq>
 800b148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	4a7b      	ldr	r2, [pc, #492]	; (800b33c <HAL_I2C_Init+0x25c>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d807      	bhi.n	800b164 <HAL_I2C_Init+0x84>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4a7a      	ldr	r2, [pc, #488]	; (800b340 <HAL_I2C_Init+0x260>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	bf94      	ite	ls
 800b15c:	2301      	movls	r3, #1
 800b15e:	2300      	movhi	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	e006      	b.n	800b172 <HAL_I2C_Init+0x92>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4a77      	ldr	r2, [pc, #476]	; (800b344 <HAL_I2C_Init+0x264>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	bf94      	ite	ls
 800b16c:	2301      	movls	r3, #1
 800b16e:	2300      	movhi	r3, #0
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e0db      	b.n	800b332 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	4a72      	ldr	r2, [pc, #456]	; (800b348 <HAL_I2C_Init+0x268>)
 800b17e:	fba2 2303 	umull	r2, r3, r2, r3
 800b182:	0c9b      	lsrs	r3, r3, #18
 800b184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	430a      	orrs	r2, r1
 800b198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4a64      	ldr	r2, [pc, #400]	; (800b33c <HAL_I2C_Init+0x25c>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d802      	bhi.n	800b1b4 <HAL_I2C_Init+0xd4>
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	e009      	b.n	800b1c8 <HAL_I2C_Init+0xe8>
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b1ba:	fb02 f303 	mul.w	r3, r2, r3
 800b1be:	4a63      	ldr	r2, [pc, #396]	; (800b34c <HAL_I2C_Init+0x26c>)
 800b1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c4:	099b      	lsrs	r3, r3, #6
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	430b      	orrs	r3, r1
 800b1ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b1da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	4956      	ldr	r1, [pc, #344]	; (800b33c <HAL_I2C_Init+0x25c>)
 800b1e4:	428b      	cmp	r3, r1
 800b1e6:	d80d      	bhi.n	800b204 <HAL_I2C_Init+0x124>
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	1e59      	subs	r1, r3, #1
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1fc:	2b04      	cmp	r3, #4
 800b1fe:	bf38      	it	cc
 800b200:	2304      	movcc	r3, #4
 800b202:	e04f      	b.n	800b2a4 <HAL_I2C_Init+0x1c4>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d111      	bne.n	800b230 <HAL_I2C_Init+0x150>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	1e58      	subs	r0, r3, #1
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6859      	ldr	r1, [r3, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	440b      	add	r3, r1
 800b21a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b21e:	3301      	adds	r3, #1
 800b220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b224:	2b00      	cmp	r3, #0
 800b226:	bf0c      	ite	eq
 800b228:	2301      	moveq	r3, #1
 800b22a:	2300      	movne	r3, #0
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	e012      	b.n	800b256 <HAL_I2C_Init+0x176>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	1e58      	subs	r0, r3, #1
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6859      	ldr	r1, [r3, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	440b      	add	r3, r1
 800b23e:	0099      	lsls	r1, r3, #2
 800b240:	440b      	add	r3, r1
 800b242:	fbb0 f3f3 	udiv	r3, r0, r3
 800b246:	3301      	adds	r3, #1
 800b248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bf0c      	ite	eq
 800b250:	2301      	moveq	r3, #1
 800b252:	2300      	movne	r3, #0
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <HAL_I2C_Init+0x17e>
 800b25a:	2301      	movs	r3, #1
 800b25c:	e022      	b.n	800b2a4 <HAL_I2C_Init+0x1c4>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10e      	bne.n	800b284 <HAL_I2C_Init+0x1a4>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	1e58      	subs	r0, r3, #1
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6859      	ldr	r1, [r3, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	440b      	add	r3, r1
 800b274:	fbb0 f3f3 	udiv	r3, r0, r3
 800b278:	3301      	adds	r3, #1
 800b27a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b27e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b282:	e00f      	b.n	800b2a4 <HAL_I2C_Init+0x1c4>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	1e58      	subs	r0, r3, #1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6859      	ldr	r1, [r3, #4]
 800b28c:	460b      	mov	r3, r1
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	440b      	add	r3, r1
 800b292:	0099      	lsls	r1, r3, #2
 800b294:	440b      	add	r3, r1
 800b296:	fbb0 f3f3 	udiv	r3, r0, r3
 800b29a:	3301      	adds	r3, #1
 800b29c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	6809      	ldr	r1, [r1, #0]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	69da      	ldr	r2, [r3, #28]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	430a      	orrs	r2, r1
 800b2c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b2d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	6911      	ldr	r1, [r2, #16]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	68d2      	ldr	r2, [r2, #12]
 800b2de:	4311      	orrs	r1, r2
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	6812      	ldr	r2, [r2, #0]
 800b2e4:	430b      	orrs	r3, r1
 800b2e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	695a      	ldr	r2, [r3, #20]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	430a      	orrs	r2, r1
 800b302:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0201 	orr.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2220      	movs	r2, #32
 800b31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	000186a0 	.word	0x000186a0
 800b340:	001e847f 	.word	0x001e847f
 800b344:	003d08ff 	.word	0x003d08ff
 800b348:	431bde83 	.word	0x431bde83
 800b34c:	10624dd3 	.word	0x10624dd3

0800b350 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	607a      	str	r2, [r7, #4]
 800b35a:	461a      	mov	r2, r3
 800b35c:	460b      	mov	r3, r1
 800b35e:	817b      	strh	r3, [r7, #10]
 800b360:	4613      	mov	r3, r2
 800b362:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b364:	f7fe fc00 	bl	8009b68 <HAL_GetTick>
 800b368:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b20      	cmp	r3, #32
 800b374:	f040 80e0 	bne.w	800b538 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2319      	movs	r3, #25
 800b37e:	2201      	movs	r2, #1
 800b380:	4970      	ldr	r1, [pc, #448]	; (800b544 <HAL_I2C_Master_Transmit+0x1f4>)
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f000 fc58 	bl	800bc38 <I2C_WaitOnFlagUntilTimeout>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b38e:	2302      	movs	r3, #2
 800b390:	e0d3      	b.n	800b53a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <HAL_I2C_Master_Transmit+0x50>
 800b39c:	2302      	movs	r3, #2
 800b39e:	e0cc      	b.n	800b53a <HAL_I2C_Master_Transmit+0x1ea>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d007      	beq.n	800b3c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f042 0201 	orr.w	r2, r2, #1
 800b3c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2221      	movs	r2, #33	; 0x21
 800b3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2210      	movs	r2, #16
 800b3e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	893a      	ldrh	r2, [r7, #8]
 800b3f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	4a50      	ldr	r2, [pc, #320]	; (800b548 <HAL_I2C_Master_Transmit+0x1f8>)
 800b406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b408:	8979      	ldrh	r1, [r7, #10]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	6a3a      	ldr	r2, [r7, #32]
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 fac2 	bl	800b998 <I2C_MasterRequestWrite>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e08d      	b.n	800b53a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b41e:	2300      	movs	r3, #0
 800b420:	613b      	str	r3, [r7, #16]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	613b      	str	r3, [r7, #16]
 800b432:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b434:	e066      	b.n	800b504 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	6a39      	ldr	r1, [r7, #32]
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 fcd2 	bl	800bde4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00d      	beq.n	800b462 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d107      	bne.n	800b45e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b45c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e06b      	b.n	800b53a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	781a      	ldrb	r2, [r3, #0]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b48a:	3b01      	subs	r3, #1
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d11b      	bne.n	800b4d8 <HAL_I2C_Master_Transmit+0x188>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d017      	beq.n	800b4d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ac:	781a      	ldrb	r2, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	6a39      	ldr	r1, [r7, #32]
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 fcc2 	bl	800be66 <I2C_WaitOnBTFFlagUntilTimeout>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00d      	beq.n	800b504 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ec:	2b04      	cmp	r3, #4
 800b4ee:	d107      	bne.n	800b500 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e01a      	b.n	800b53a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d194      	bne.n	800b436 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b51a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2220      	movs	r2, #32
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	e000      	b.n	800b53a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b538:	2302      	movs	r3, #2
  }
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	00100002 	.word	0x00100002
 800b548:	ffff0000 	.word	0xffff0000

0800b54c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08c      	sub	sp, #48	; 0x30
 800b550:	af02      	add	r7, sp, #8
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	607a      	str	r2, [r7, #4]
 800b556:	461a      	mov	r2, r3
 800b558:	460b      	mov	r3, r1
 800b55a:	817b      	strh	r3, [r7, #10]
 800b55c:	4613      	mov	r3, r2
 800b55e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b560:	f7fe fb02 	bl	8009b68 <HAL_GetTick>
 800b564:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b20      	cmp	r3, #32
 800b570:	f040 820b 	bne.w	800b98a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	2319      	movs	r3, #25
 800b57a:	2201      	movs	r2, #1
 800b57c:	497c      	ldr	r1, [pc, #496]	; (800b770 <HAL_I2C_Master_Receive+0x224>)
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 fb5a 	bl	800bc38 <I2C_WaitOnFlagUntilTimeout>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b58a:	2302      	movs	r3, #2
 800b58c:	e1fe      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <HAL_I2C_Master_Receive+0x50>
 800b598:	2302      	movs	r3, #2
 800b59a:	e1f7      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d007      	beq.n	800b5c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f042 0201 	orr.w	r2, r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2222      	movs	r2, #34	; 0x22
 800b5d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2210      	movs	r2, #16
 800b5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	893a      	ldrh	r2, [r7, #8]
 800b5f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	4a5c      	ldr	r2, [pc, #368]	; (800b774 <HAL_I2C_Master_Receive+0x228>)
 800b602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b604:	8979      	ldrh	r1, [r7, #10]
 800b606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 fa46 	bl	800ba9c <I2C_MasterRequestRead>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e1b8      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d113      	bne.n	800b64a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b622:	2300      	movs	r3, #0
 800b624:	623b      	str	r3, [r7, #32]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	623b      	str	r3, [r7, #32]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	623b      	str	r3, [r7, #32]
 800b636:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	e18c      	b.n	800b964 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d11b      	bne.n	800b68a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b662:	2300      	movs	r3, #0
 800b664:	61fb      	str	r3, [r7, #28]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	61fb      	str	r3, [r7, #28]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	61fb      	str	r3, [r7, #28]
 800b676:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	e16c      	b.n	800b964 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d11b      	bne.n	800b6ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	61bb      	str	r3, [r7, #24]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	61bb      	str	r3, [r7, #24]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	61bb      	str	r3, [r7, #24]
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	e14c      	b.n	800b964 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	617b      	str	r3, [r7, #20]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	617b      	str	r3, [r7, #20]
 800b6ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b6f0:	e138      	b.n	800b964 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	f200 80f1 	bhi.w	800b8de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b700:	2b01      	cmp	r3, #1
 800b702:	d123      	bne.n	800b74c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 fbed 	bl	800bee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	e139      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	691a      	ldr	r2, [r3, #16]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	b2d2      	uxtb	r2, r2
 800b724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b734:	3b01      	subs	r3, #1
 800b736:	b29a      	uxth	r2, r3
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b740:	b29b      	uxth	r3, r3
 800b742:	3b01      	subs	r3, #1
 800b744:	b29a      	uxth	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b74a:	e10b      	b.n	800b964 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b750:	2b02      	cmp	r3, #2
 800b752:	d14e      	bne.n	800b7f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75a:	2200      	movs	r2, #0
 800b75c:	4906      	ldr	r1, [pc, #24]	; (800b778 <HAL_I2C_Master_Receive+0x22c>)
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 fa6a 	bl	800bc38 <I2C_WaitOnFlagUntilTimeout>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d008      	beq.n	800b77c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e10e      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
 800b76e:	bf00      	nop
 800b770:	00100002 	.word	0x00100002
 800b774:	ffff0000 	.word	0xffff0000
 800b778:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b78a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	691a      	ldr	r2, [r3, #16]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	1c5a      	adds	r2, r3, #1
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	691a      	ldr	r2, [r3, #16]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7f0:	e0b8      	b.n	800b964 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4966      	ldr	r1, [pc, #408]	; (800b994 <HAL_I2C_Master_Receive+0x448>)
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 fa1b 	bl	800bc38 <I2C_WaitOnFlagUntilTimeout>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e0bf      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b81a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	691a      	ldr	r2, [r3, #16]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	b2d2      	uxtb	r2, r2
 800b828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b838:	3b01      	subs	r3, #1
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b844:	b29b      	uxth	r3, r3
 800b846:	3b01      	subs	r3, #1
 800b848:	b29a      	uxth	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	2200      	movs	r2, #0
 800b856:	494f      	ldr	r1, [pc, #316]	; (800b994 <HAL_I2C_Master_Receive+0x448>)
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 f9ed 	bl	800bc38 <I2C_WaitOnFlagUntilTimeout>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e091      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	691a      	ldr	r2, [r3, #16]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	b2d2      	uxtb	r2, r2
 800b884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b894:	3b01      	subs	r3, #1
 800b896:	b29a      	uxth	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	691a      	ldr	r2, [r3, #16]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8dc:	e042      	b.n	800b964 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 fb00 	bl	800bee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e04c      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	691a      	ldr	r2, [r3, #16]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	b2d2      	uxtb	r2, r2
 800b8fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	1c5a      	adds	r2, r3, #1
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b90e:	3b01      	subs	r3, #1
 800b910:	b29a      	uxth	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	3b01      	subs	r3, #1
 800b91e:	b29a      	uxth	r2, r3
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	f003 0304 	and.w	r3, r3, #4
 800b92e:	2b04      	cmp	r3, #4
 800b930:	d118      	bne.n	800b964 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	691a      	ldr	r2, [r3, #16]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	1c5a      	adds	r2, r3, #1
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b94e:	3b01      	subs	r3, #1
 800b950:	b29a      	uxth	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	3b01      	subs	r3, #1
 800b95e:	b29a      	uxth	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f47f aec2 	bne.w	800b6f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2220      	movs	r2, #32
 800b972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	e000      	b.n	800b98c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b98a:	2302      	movs	r3, #2
  }
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3728      	adds	r7, #40	; 0x28
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	00010004 	.word	0x00010004

0800b998 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af02      	add	r7, sp, #8
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	607a      	str	r2, [r7, #4]
 800b9a2:	603b      	str	r3, [r7, #0]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d006      	beq.n	800b9c2 <I2C_MasterRequestWrite+0x2a>
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d003      	beq.n	800b9c2 <I2C_MasterRequestWrite+0x2a>
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b9c0:	d108      	bne.n	800b9d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9d0:	601a      	str	r2, [r3, #0]
 800b9d2:	e00b      	b.n	800b9ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d8:	2b12      	cmp	r3, #18
 800b9da:	d107      	bne.n	800b9ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 f91d 	bl	800bc38 <I2C_WaitOnFlagUntilTimeout>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00d      	beq.n	800ba20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba12:	d103      	bne.n	800ba1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e035      	b.n	800ba8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba28:	d108      	bne.n	800ba3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ba2a:	897b      	ldrh	r3, [r7, #10]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	461a      	mov	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ba38:	611a      	str	r2, [r3, #16]
 800ba3a:	e01b      	b.n	800ba74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ba3c:	897b      	ldrh	r3, [r7, #10]
 800ba3e:	11db      	asrs	r3, r3, #7
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	f003 0306 	and.w	r3, r3, #6
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	f063 030f 	orn	r3, r3, #15
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	490e      	ldr	r1, [pc, #56]	; (800ba94 <I2C_MasterRequestWrite+0xfc>)
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f000 f943 	bl	800bce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e010      	b.n	800ba8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ba6a:	897b      	ldrh	r3, [r7, #10]
 800ba6c:	b2da      	uxtb	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	4907      	ldr	r1, [pc, #28]	; (800ba98 <I2C_MasterRequestWrite+0x100>)
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 f933 	bl	800bce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e000      	b.n	800ba8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3718      	adds	r7, #24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	00010008 	.word	0x00010008
 800ba98:	00010002 	.word	0x00010002

0800ba9c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b088      	sub	sp, #32
 800baa0:	af02      	add	r7, sp, #8
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	607a      	str	r2, [r7, #4]
 800baa6:	603b      	str	r3, [r7, #0]
 800baa8:	460b      	mov	r3, r1
 800baaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bac0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2b08      	cmp	r3, #8
 800bac6:	d006      	beq.n	800bad6 <I2C_MasterRequestRead+0x3a>
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d003      	beq.n	800bad6 <I2C_MasterRequestRead+0x3a>
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bad4:	d108      	bne.n	800bae8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	e00b      	b.n	800bb00 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baec:	2b11      	cmp	r3, #17
 800baee:	d107      	bne.n	800bb00 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bafe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 f893 	bl	800bc38 <I2C_WaitOnFlagUntilTimeout>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00d      	beq.n	800bb34 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb26:	d103      	bne.n	800bb30 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e079      	b.n	800bc28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb3c:	d108      	bne.n	800bb50 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bb3e:	897b      	ldrh	r3, [r7, #10]
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	f043 0301 	orr.w	r3, r3, #1
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	611a      	str	r2, [r3, #16]
 800bb4e:	e05f      	b.n	800bc10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bb50:	897b      	ldrh	r3, [r7, #10]
 800bb52:	11db      	asrs	r3, r3, #7
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	f003 0306 	and.w	r3, r3, #6
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	f063 030f 	orn	r3, r3, #15
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	4930      	ldr	r1, [pc, #192]	; (800bc30 <I2C_MasterRequestRead+0x194>)
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f000 f8b9 	bl	800bce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e054      	b.n	800bc28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bb7e:	897b      	ldrh	r3, [r7, #10]
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	4929      	ldr	r1, [pc, #164]	; (800bc34 <I2C_MasterRequestRead+0x198>)
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f000 f8a9 	bl	800bce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e044      	b.n	800bc28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb9e:	2300      	movs	r3, #0
 800bba0:	613b      	str	r3, [r7, #16]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	613b      	str	r3, [r7, #16]
 800bbb2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbc2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f000 f831 	bl	800bc38 <I2C_WaitOnFlagUntilTimeout>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00d      	beq.n	800bbf8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbea:	d103      	bne.n	800bbf4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbf2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	e017      	b.n	800bc28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bbf8:	897b      	ldrh	r3, [r7, #10]
 800bbfa:	11db      	asrs	r3, r3, #7
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	f003 0306 	and.w	r3, r3, #6
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	f063 030e 	orn	r3, r3, #14
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	4907      	ldr	r1, [pc, #28]	; (800bc34 <I2C_MasterRequestRead+0x198>)
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f000 f865 	bl	800bce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e000      	b.n	800bc28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	00010008 	.word	0x00010008
 800bc34:	00010002 	.word	0x00010002

0800bc38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	603b      	str	r3, [r7, #0]
 800bc44:	4613      	mov	r3, r2
 800bc46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc48:	e025      	b.n	800bc96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc50:	d021      	beq.n	800bc96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc52:	f7fd ff89 	bl	8009b68 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d302      	bcc.n	800bc68 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d116      	bne.n	800bc96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc82:	f043 0220 	orr.w	r2, r3, #32
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e023      	b.n	800bcde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	0c1b      	lsrs	r3, r3, #16
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d10d      	bne.n	800bcbc <I2C_WaitOnFlagUntilTimeout+0x84>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	43da      	mvns	r2, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4013      	ands	r3, r2
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	bf0c      	ite	eq
 800bcb2:	2301      	moveq	r3, #1
 800bcb4:	2300      	movne	r3, #0
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	461a      	mov	r2, r3
 800bcba:	e00c      	b.n	800bcd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	43da      	mvns	r2, r3
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bf0c      	ite	eq
 800bcce:	2301      	moveq	r3, #1
 800bcd0:	2300      	movne	r3, #0
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d0b6      	beq.n	800bc4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b084      	sub	sp, #16
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	60f8      	str	r0, [r7, #12]
 800bcee:	60b9      	str	r1, [r7, #8]
 800bcf0:	607a      	str	r2, [r7, #4]
 800bcf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bcf4:	e051      	b.n	800bd9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd04:	d123      	bne.n	800bd4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3a:	f043 0204 	orr.w	r2, r3, #4
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e046      	b.n	800bddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd54:	d021      	beq.n	800bd9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd56:	f7fd ff07 	bl	8009b68 <HAL_GetTick>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d302      	bcc.n	800bd6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d116      	bne.n	800bd9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2220      	movs	r2, #32
 800bd76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd86:	f043 0220 	orr.w	r2, r3, #32
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e020      	b.n	800bddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	0c1b      	lsrs	r3, r3, #16
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d10c      	bne.n	800bdbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	43da      	mvns	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	4013      	ands	r3, r2
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	bf14      	ite	ne
 800bdb6:	2301      	movne	r3, #1
 800bdb8:	2300      	moveq	r3, #0
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	e00b      	b.n	800bdd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	43da      	mvns	r2, r3
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	4013      	ands	r3, r2
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	bf14      	ite	ne
 800bdd0:	2301      	movne	r3, #1
 800bdd2:	2300      	moveq	r3, #0
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d18d      	bne.n	800bcf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bdf0:	e02d      	b.n	800be4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	f000 f8ce 	bl	800bf94 <I2C_IsAcknowledgeFailed>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d001      	beq.n	800be02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	e02d      	b.n	800be5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be08:	d021      	beq.n	800be4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be0a:	f7fd fead 	bl	8009b68 <HAL_GetTick>
 800be0e:	4602      	mov	r2, r0
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	429a      	cmp	r2, r3
 800be18:	d302      	bcc.n	800be20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d116      	bne.n	800be4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2220      	movs	r2, #32
 800be2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3a:	f043 0220 	orr.w	r2, r3, #32
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e007      	b.n	800be5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be58:	2b80      	cmp	r3, #128	; 0x80
 800be5a:	d1ca      	bne.n	800bdf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	60f8      	str	r0, [r7, #12]
 800be6e:	60b9      	str	r1, [r7, #8]
 800be70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800be72:	e02d      	b.n	800bed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f000 f88d 	bl	800bf94 <I2C_IsAcknowledgeFailed>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e02d      	b.n	800bee0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8a:	d021      	beq.n	800bed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be8c:	f7fd fe6c 	bl	8009b68 <HAL_GetTick>
 800be90:	4602      	mov	r2, r0
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d302      	bcc.n	800bea2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d116      	bne.n	800bed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2200      	movs	r2, #0
 800bea6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2220      	movs	r2, #32
 800beac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	f043 0220 	orr.w	r2, r3, #32
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	e007      	b.n	800bee0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b04      	cmp	r3, #4
 800bedc:	d1ca      	bne.n	800be74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bef4:	e042      	b.n	800bf7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	f003 0310 	and.w	r3, r3, #16
 800bf00:	2b10      	cmp	r3, #16
 800bf02:	d119      	bne.n	800bf38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f06f 0210 	mvn.w	r2, #16
 800bf0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2220      	movs	r2, #32
 800bf18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e029      	b.n	800bf8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf38:	f7fd fe16 	bl	8009b68 <HAL_GetTick>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d302      	bcc.n	800bf4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d116      	bne.n	800bf7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2220      	movs	r2, #32
 800bf58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf68:	f043 0220 	orr.w	r2, r3, #32
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e007      	b.n	800bf8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf86:	2b40      	cmp	r3, #64	; 0x40
 800bf88:	d1b5      	bne.n	800bef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfaa:	d11b      	bne.n	800bfe4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bfb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd0:	f043 0204 	orr.w	r2, r3, #4
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e000      	b.n	800bfe6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
	...

0800bff4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bffa:	2300      	movs	r3, #0
 800bffc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bffe:	2300      	movs	r3, #0
 800c000:	603b      	str	r3, [r7, #0]
 800c002:	4b20      	ldr	r3, [pc, #128]	; (800c084 <HAL_PWREx_EnableOverDrive+0x90>)
 800c004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c006:	4a1f      	ldr	r2, [pc, #124]	; (800c084 <HAL_PWREx_EnableOverDrive+0x90>)
 800c008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c00c:	6413      	str	r3, [r2, #64]	; 0x40
 800c00e:	4b1d      	ldr	r3, [pc, #116]	; (800c084 <HAL_PWREx_EnableOverDrive+0x90>)
 800c010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c016:	603b      	str	r3, [r7, #0]
 800c018:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c01a:	4b1b      	ldr	r3, [pc, #108]	; (800c088 <HAL_PWREx_EnableOverDrive+0x94>)
 800c01c:	2201      	movs	r2, #1
 800c01e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c020:	f7fd fda2 	bl	8009b68 <HAL_GetTick>
 800c024:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c026:	e009      	b.n	800c03c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c028:	f7fd fd9e 	bl	8009b68 <HAL_GetTick>
 800c02c:	4602      	mov	r2, r0
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c036:	d901      	bls.n	800c03c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e01f      	b.n	800c07c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c03c:	4b13      	ldr	r3, [pc, #76]	; (800c08c <HAL_PWREx_EnableOverDrive+0x98>)
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c048:	d1ee      	bne.n	800c028 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c04a:	4b11      	ldr	r3, [pc, #68]	; (800c090 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c04c:	2201      	movs	r2, #1
 800c04e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c050:	f7fd fd8a 	bl	8009b68 <HAL_GetTick>
 800c054:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c056:	e009      	b.n	800c06c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c058:	f7fd fd86 	bl	8009b68 <HAL_GetTick>
 800c05c:	4602      	mov	r2, r0
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c066:	d901      	bls.n	800c06c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e007      	b.n	800c07c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c06c:	4b07      	ldr	r3, [pc, #28]	; (800c08c <HAL_PWREx_EnableOverDrive+0x98>)
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c078:	d1ee      	bne.n	800c058 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	40023800 	.word	0x40023800
 800c088:	420e0040 	.word	0x420e0040
 800c08c:	40007000 	.word	0x40007000
 800c090:	420e0044 	.word	0x420e0044

0800c094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d101      	bne.n	800c0a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e0cc      	b.n	800c242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c0a8:	4b68      	ldr	r3, [pc, #416]	; (800c24c <HAL_RCC_ClockConfig+0x1b8>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 030f 	and.w	r3, r3, #15
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d90c      	bls.n	800c0d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0b6:	4b65      	ldr	r3, [pc, #404]	; (800c24c <HAL_RCC_ClockConfig+0x1b8>)
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0be:	4b63      	ldr	r3, [pc, #396]	; (800c24c <HAL_RCC_ClockConfig+0x1b8>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 030f 	and.w	r3, r3, #15
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d001      	beq.n	800c0d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e0b8      	b.n	800c242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 0302 	and.w	r3, r3, #2
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d020      	beq.n	800c11e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f003 0304 	and.w	r3, r3, #4
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d005      	beq.n	800c0f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c0e8:	4b59      	ldr	r3, [pc, #356]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	4a58      	ldr	r2, [pc, #352]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c0f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 0308 	and.w	r3, r3, #8
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c100:	4b53      	ldr	r3, [pc, #332]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	4a52      	ldr	r2, [pc, #328]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c10a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c10c:	4b50      	ldr	r3, [pc, #320]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	494d      	ldr	r1, [pc, #308]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d044      	beq.n	800c1b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d107      	bne.n	800c142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c132:	4b47      	ldr	r3, [pc, #284]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d119      	bne.n	800c172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e07f      	b.n	800c242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	2b02      	cmp	r3, #2
 800c148:	d003      	beq.n	800c152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c14e:	2b03      	cmp	r3, #3
 800c150:	d107      	bne.n	800c162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c152:	4b3f      	ldr	r3, [pc, #252]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d109      	bne.n	800c172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e06f      	b.n	800c242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c162:	4b3b      	ldr	r3, [pc, #236]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f003 0302 	and.w	r3, r3, #2
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e067      	b.n	800c242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c172:	4b37      	ldr	r3, [pc, #220]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	f023 0203 	bic.w	r2, r3, #3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	4934      	ldr	r1, [pc, #208]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c180:	4313      	orrs	r3, r2
 800c182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c184:	f7fd fcf0 	bl	8009b68 <HAL_GetTick>
 800c188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c18a:	e00a      	b.n	800c1a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c18c:	f7fd fcec 	bl	8009b68 <HAL_GetTick>
 800c190:	4602      	mov	r2, r0
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	f241 3288 	movw	r2, #5000	; 0x1388
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d901      	bls.n	800c1a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e04f      	b.n	800c242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1a2:	4b2b      	ldr	r3, [pc, #172]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	f003 020c 	and.w	r2, r3, #12
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d1eb      	bne.n	800c18c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c1b4:	4b25      	ldr	r3, [pc, #148]	; (800c24c <HAL_RCC_ClockConfig+0x1b8>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 030f 	and.w	r3, r3, #15
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d20c      	bcs.n	800c1dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1c2:	4b22      	ldr	r3, [pc, #136]	; (800c24c <HAL_RCC_ClockConfig+0x1b8>)
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	b2d2      	uxtb	r2, r2
 800c1c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1ca:	4b20      	ldr	r3, [pc, #128]	; (800c24c <HAL_RCC_ClockConfig+0x1b8>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 030f 	and.w	r3, r3, #15
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d001      	beq.n	800c1dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e032      	b.n	800c242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 0304 	and.w	r3, r3, #4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d008      	beq.n	800c1fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c1e8:	4b19      	ldr	r3, [pc, #100]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	4916      	ldr	r1, [pc, #88]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 0308 	and.w	r3, r3, #8
 800c202:	2b00      	cmp	r3, #0
 800c204:	d009      	beq.n	800c21a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c206:	4b12      	ldr	r3, [pc, #72]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	490e      	ldr	r1, [pc, #56]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c216:	4313      	orrs	r3, r2
 800c218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c21a:	f000 f821 	bl	800c260 <HAL_RCC_GetSysClockFreq>
 800c21e:	4601      	mov	r1, r0
 800c220:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <HAL_RCC_ClockConfig+0x1bc>)
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	091b      	lsrs	r3, r3, #4
 800c226:	f003 030f 	and.w	r3, r3, #15
 800c22a:	4a0a      	ldr	r2, [pc, #40]	; (800c254 <HAL_RCC_ClockConfig+0x1c0>)
 800c22c:	5cd3      	ldrb	r3, [r2, r3]
 800c22e:	fa21 f303 	lsr.w	r3, r1, r3
 800c232:	4a09      	ldr	r2, [pc, #36]	; (800c258 <HAL_RCC_ClockConfig+0x1c4>)
 800c234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c236:	4b09      	ldr	r3, [pc, #36]	; (800c25c <HAL_RCC_ClockConfig+0x1c8>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fd fc50 	bl	8009ae0 <HAL_InitTick>

  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	40023c00 	.word	0x40023c00
 800c250:	40023800 	.word	0x40023800
 800c254:	08018dc8 	.word	0x08018dc8
 800c258:	20000000 	.word	0x20000000
 800c25c:	20000004 	.word	0x20000004

0800c260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c266:	2300      	movs	r3, #0
 800c268:	607b      	str	r3, [r7, #4]
 800c26a:	2300      	movs	r3, #0
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	2300      	movs	r3, #0
 800c270:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c272:	2300      	movs	r3, #0
 800c274:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c276:	4b63      	ldr	r3, [pc, #396]	; (800c404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f003 030c 	and.w	r3, r3, #12
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d007      	beq.n	800c292 <HAL_RCC_GetSysClockFreq+0x32>
 800c282:	2b08      	cmp	r3, #8
 800c284:	d008      	beq.n	800c298 <HAL_RCC_GetSysClockFreq+0x38>
 800c286:	2b00      	cmp	r3, #0
 800c288:	f040 80b4 	bne.w	800c3f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c28c:	4b5e      	ldr	r3, [pc, #376]	; (800c408 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c28e:	60bb      	str	r3, [r7, #8]
       break;
 800c290:	e0b3      	b.n	800c3fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c292:	4b5d      	ldr	r3, [pc, #372]	; (800c408 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c294:	60bb      	str	r3, [r7, #8]
      break;
 800c296:	e0b0      	b.n	800c3fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c298:	4b5a      	ldr	r3, [pc, #360]	; (800c404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c2a2:	4b58      	ldr	r3, [pc, #352]	; (800c404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d04a      	beq.n	800c344 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2ae:	4b55      	ldr	r3, [pc, #340]	; (800c404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	099b      	lsrs	r3, r3, #6
 800c2b4:	f04f 0400 	mov.w	r4, #0
 800c2b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c2bc:	f04f 0200 	mov.w	r2, #0
 800c2c0:	ea03 0501 	and.w	r5, r3, r1
 800c2c4:	ea04 0602 	and.w	r6, r4, r2
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4632      	mov	r2, r6
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	f04f 0400 	mov.w	r4, #0
 800c2d4:	0154      	lsls	r4, r2, #5
 800c2d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c2da:	014b      	lsls	r3, r1, #5
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4622      	mov	r2, r4
 800c2e0:	1b49      	subs	r1, r1, r5
 800c2e2:	eb62 0206 	sbc.w	r2, r2, r6
 800c2e6:	f04f 0300 	mov.w	r3, #0
 800c2ea:	f04f 0400 	mov.w	r4, #0
 800c2ee:	0194      	lsls	r4, r2, #6
 800c2f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c2f4:	018b      	lsls	r3, r1, #6
 800c2f6:	1a5b      	subs	r3, r3, r1
 800c2f8:	eb64 0402 	sbc.w	r4, r4, r2
 800c2fc:	f04f 0100 	mov.w	r1, #0
 800c300:	f04f 0200 	mov.w	r2, #0
 800c304:	00e2      	lsls	r2, r4, #3
 800c306:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c30a:	00d9      	lsls	r1, r3, #3
 800c30c:	460b      	mov	r3, r1
 800c30e:	4614      	mov	r4, r2
 800c310:	195b      	adds	r3, r3, r5
 800c312:	eb44 0406 	adc.w	r4, r4, r6
 800c316:	f04f 0100 	mov.w	r1, #0
 800c31a:	f04f 0200 	mov.w	r2, #0
 800c31e:	02a2      	lsls	r2, r4, #10
 800c320:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c324:	0299      	lsls	r1, r3, #10
 800c326:	460b      	mov	r3, r1
 800c328:	4614      	mov	r4, r2
 800c32a:	4618      	mov	r0, r3
 800c32c:	4621      	mov	r1, r4
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f04f 0400 	mov.w	r4, #0
 800c334:	461a      	mov	r2, r3
 800c336:	4623      	mov	r3, r4
 800c338:	f7f4 fcbe 	bl	8000cb8 <__aeabi_uldivmod>
 800c33c:	4603      	mov	r3, r0
 800c33e:	460c      	mov	r4, r1
 800c340:	60fb      	str	r3, [r7, #12]
 800c342:	e049      	b.n	800c3d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c344:	4b2f      	ldr	r3, [pc, #188]	; (800c404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	099b      	lsrs	r3, r3, #6
 800c34a:	f04f 0400 	mov.w	r4, #0
 800c34e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c352:	f04f 0200 	mov.w	r2, #0
 800c356:	ea03 0501 	and.w	r5, r3, r1
 800c35a:	ea04 0602 	and.w	r6, r4, r2
 800c35e:	4629      	mov	r1, r5
 800c360:	4632      	mov	r2, r6
 800c362:	f04f 0300 	mov.w	r3, #0
 800c366:	f04f 0400 	mov.w	r4, #0
 800c36a:	0154      	lsls	r4, r2, #5
 800c36c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c370:	014b      	lsls	r3, r1, #5
 800c372:	4619      	mov	r1, r3
 800c374:	4622      	mov	r2, r4
 800c376:	1b49      	subs	r1, r1, r5
 800c378:	eb62 0206 	sbc.w	r2, r2, r6
 800c37c:	f04f 0300 	mov.w	r3, #0
 800c380:	f04f 0400 	mov.w	r4, #0
 800c384:	0194      	lsls	r4, r2, #6
 800c386:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c38a:	018b      	lsls	r3, r1, #6
 800c38c:	1a5b      	subs	r3, r3, r1
 800c38e:	eb64 0402 	sbc.w	r4, r4, r2
 800c392:	f04f 0100 	mov.w	r1, #0
 800c396:	f04f 0200 	mov.w	r2, #0
 800c39a:	00e2      	lsls	r2, r4, #3
 800c39c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c3a0:	00d9      	lsls	r1, r3, #3
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4614      	mov	r4, r2
 800c3a6:	195b      	adds	r3, r3, r5
 800c3a8:	eb44 0406 	adc.w	r4, r4, r6
 800c3ac:	f04f 0100 	mov.w	r1, #0
 800c3b0:	f04f 0200 	mov.w	r2, #0
 800c3b4:	02a2      	lsls	r2, r4, #10
 800c3b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c3ba:	0299      	lsls	r1, r3, #10
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4614      	mov	r4, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f04f 0400 	mov.w	r4, #0
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	4623      	mov	r3, r4
 800c3ce:	f7f4 fc73 	bl	8000cb8 <__aeabi_uldivmod>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c3d8:	4b0a      	ldr	r3, [pc, #40]	; (800c404 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	0c1b      	lsrs	r3, r3, #16
 800c3de:	f003 0303 	and.w	r3, r3, #3
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3f0:	60bb      	str	r3, [r7, #8]
      break;
 800c3f2:	e002      	b.n	800c3fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c3f4:	4b04      	ldr	r3, [pc, #16]	; (800c408 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c3f6:	60bb      	str	r3, [r7, #8]
      break;
 800c3f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c3fa:	68bb      	ldr	r3, [r7, #8]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c404:	40023800 	.word	0x40023800
 800c408:	00f42400 	.word	0x00f42400

0800c40c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c40c:	b480      	push	{r7}
 800c40e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c410:	4b03      	ldr	r3, [pc, #12]	; (800c420 <HAL_RCC_GetHCLKFreq+0x14>)
 800c412:	681b      	ldr	r3, [r3, #0]
}
 800c414:	4618      	mov	r0, r3
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20000000 	.word	0x20000000

0800c424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c428:	f7ff fff0 	bl	800c40c <HAL_RCC_GetHCLKFreq>
 800c42c:	4601      	mov	r1, r0
 800c42e:	4b05      	ldr	r3, [pc, #20]	; (800c444 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	0a9b      	lsrs	r3, r3, #10
 800c434:	f003 0307 	and.w	r3, r3, #7
 800c438:	4a03      	ldr	r2, [pc, #12]	; (800c448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c43a:	5cd3      	ldrb	r3, [r2, r3]
 800c43c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c440:	4618      	mov	r0, r3
 800c442:	bd80      	pop	{r7, pc}
 800c444:	40023800 	.word	0x40023800
 800c448:	08018dd8 	.word	0x08018dd8

0800c44c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c450:	f7ff ffdc 	bl	800c40c <HAL_RCC_GetHCLKFreq>
 800c454:	4601      	mov	r1, r0
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	0b5b      	lsrs	r3, r3, #13
 800c45c:	f003 0307 	and.w	r3, r3, #7
 800c460:	4a03      	ldr	r2, [pc, #12]	; (800c470 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c462:	5cd3      	ldrb	r3, [r2, r3]
 800c464:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c468:	4618      	mov	r0, r3
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	40023800 	.word	0x40023800
 800c470:	08018dd8 	.word	0x08018dd8

0800c474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b088      	sub	sp, #32
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c47c:	2300      	movs	r3, #0
 800c47e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c480:	2300      	movs	r3, #0
 800c482:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c484:	2300      	movs	r3, #0
 800c486:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c48c:	2300      	movs	r3, #0
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00a      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c49c:	4b66      	ldr	r3, [pc, #408]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4a2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4aa:	4963      	ldr	r1, [pc, #396]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00a      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c4be:	4b5e      	ldr	r3, [pc, #376]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4cc:	495a      	ldr	r1, [pc, #360]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10b      	bne.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d105      	bne.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d075      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c4f8:	4b50      	ldr	r3, [pc, #320]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c4fe:	f7fd fb33 	bl	8009b68 <HAL_GetTick>
 800c502:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c504:	e008      	b.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c506:	f7fd fb2f 	bl	8009b68 <HAL_GetTick>
 800c50a:	4602      	mov	r2, r0
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	2b02      	cmp	r3, #2
 800c512:	d901      	bls.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c514:	2303      	movs	r3, #3
 800c516:	e1dc      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c518:	4b47      	ldr	r3, [pc, #284]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1f0      	bne.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0301 	and.w	r3, r3, #1
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d009      	beq.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	019a      	lsls	r2, r3, #6
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	071b      	lsls	r3, r3, #28
 800c53c:	493e      	ldr	r1, [pc, #248]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c53e:	4313      	orrs	r3, r2
 800c540:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0302 	and.w	r3, r3, #2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d01f      	beq.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c550:	4b39      	ldr	r3, [pc, #228]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c556:	0f1b      	lsrs	r3, r3, #28
 800c558:	f003 0307 	and.w	r3, r3, #7
 800c55c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	019a      	lsls	r2, r3, #6
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	061b      	lsls	r3, r3, #24
 800c56a:	431a      	orrs	r2, r3
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	071b      	lsls	r3, r3, #28
 800c570:	4931      	ldr	r1, [pc, #196]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c572:	4313      	orrs	r3, r2
 800c574:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c578:	4b2f      	ldr	r3, [pc, #188]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c57e:	f023 021f 	bic.w	r2, r3, #31
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	3b01      	subs	r3, #1
 800c588:	492b      	ldr	r1, [pc, #172]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00d      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	019a      	lsls	r2, r3, #6
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	061b      	lsls	r3, r3, #24
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	071b      	lsls	r3, r3, #28
 800c5b0:	4921      	ldr	r1, [pc, #132]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c5b8:	4b20      	ldr	r3, [pc, #128]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5be:	f7fd fad3 	bl	8009b68 <HAL_GetTick>
 800c5c2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c5c4:	e008      	b.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c5c6:	f7fd facf 	bl	8009b68 <HAL_GetTick>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d901      	bls.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	e17c      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c5d8:	4b17      	ldr	r3, [pc, #92]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d0f0      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 0304 	and.w	r3, r3, #4
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d112      	bne.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10c      	bne.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 80ce 	beq.w	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c60e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c612:	f040 80c8 	bne.w	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c616:	4b0a      	ldr	r3, [pc, #40]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c618:	2200      	movs	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c61c:	f7fd faa4 	bl	8009b68 <HAL_GetTick>
 800c620:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c622:	e00f      	b.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c624:	f7fd faa0 	bl	8009b68 <HAL_GetTick>
 800c628:	4602      	mov	r2, r0
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d908      	bls.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	e14d      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c636:	bf00      	nop
 800c638:	40023800 	.word	0x40023800
 800c63c:	42470068 	.word	0x42470068
 800c640:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c644:	4ba5      	ldr	r3, [pc, #660]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c650:	d0e8      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0304 	and.w	r3, r3, #4
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d02e      	beq.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c65e:	4b9f      	ldr	r3, [pc, #636]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c664:	0c1b      	lsrs	r3, r3, #16
 800c666:	f003 0303 	and.w	r3, r3, #3
 800c66a:	3301      	adds	r3, #1
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c670:	4b9a      	ldr	r3, [pc, #616]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c676:	0f1b      	lsrs	r3, r3, #28
 800c678:	f003 0307 	and.w	r3, r3, #7
 800c67c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	019a      	lsls	r2, r3, #6
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	085b      	lsrs	r3, r3, #1
 800c688:	3b01      	subs	r3, #1
 800c68a:	041b      	lsls	r3, r3, #16
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	061b      	lsls	r3, r3, #24
 800c694:	431a      	orrs	r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	071b      	lsls	r3, r3, #28
 800c69a:	4990      	ldr	r1, [pc, #576]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c69c:	4313      	orrs	r3, r2
 800c69e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c6a2:	4b8e      	ldr	r3, [pc, #568]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	021b      	lsls	r3, r3, #8
 800c6b4:	4989      	ldr	r1, [pc, #548]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 0308 	and.w	r3, r3, #8
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d02c      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c6c8:	4b84      	ldr	r3, [pc, #528]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ce:	0c1b      	lsrs	r3, r3, #16
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c6da:	4b80      	ldr	r3, [pc, #512]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6e0:	0e1b      	lsrs	r3, r3, #24
 800c6e2:	f003 030f 	and.w	r3, r3, #15
 800c6e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	019a      	lsls	r2, r3, #6
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	085b      	lsrs	r3, r3, #1
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	041b      	lsls	r3, r3, #16
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	061b      	lsls	r3, r3, #24
 800c6fc:	431a      	orrs	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	071b      	lsls	r3, r3, #28
 800c704:	4975      	ldr	r1, [pc, #468]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c706:	4313      	orrs	r3, r2
 800c708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c70c:	4b73      	ldr	r3, [pc, #460]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c70e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71a:	4970      	ldr	r1, [pc, #448]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c71c:	4313      	orrs	r3, r2
 800c71e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d024      	beq.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c736:	d11f      	bne.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c738:	4b68      	ldr	r3, [pc, #416]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c73e:	0e1b      	lsrs	r3, r3, #24
 800c740:	f003 030f 	and.w	r3, r3, #15
 800c744:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c746:	4b65      	ldr	r3, [pc, #404]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c74c:	0f1b      	lsrs	r3, r3, #28
 800c74e:	f003 0307 	and.w	r3, r3, #7
 800c752:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	019a      	lsls	r2, r3, #6
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	085b      	lsrs	r3, r3, #1
 800c760:	3b01      	subs	r3, #1
 800c762:	041b      	lsls	r3, r3, #16
 800c764:	431a      	orrs	r2, r3
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	061b      	lsls	r3, r3, #24
 800c76a:	431a      	orrs	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	071b      	lsls	r3, r3, #28
 800c770:	495a      	ldr	r1, [pc, #360]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c772:	4313      	orrs	r3, r2
 800c774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c778:	4b59      	ldr	r3, [pc, #356]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c77a:	2201      	movs	r2, #1
 800c77c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c77e:	f7fd f9f3 	bl	8009b68 <HAL_GetTick>
 800c782:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c784:	e008      	b.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c786:	f7fd f9ef 	bl	8009b68 <HAL_GetTick>
 800c78a:	4602      	mov	r2, r0
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	2b02      	cmp	r3, #2
 800c792:	d901      	bls.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	e09c      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c798:	4b50      	ldr	r3, [pc, #320]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7a4:	d1ef      	bne.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0320 	and.w	r3, r3, #32
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 8083 	beq.w	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	60bb      	str	r3, [r7, #8]
 800c7b8:	4b48      	ldr	r3, [pc, #288]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7bc:	4a47      	ldr	r2, [pc, #284]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7c2:	6413      	str	r3, [r2, #64]	; 0x40
 800c7c4:	4b45      	ldr	r3, [pc, #276]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7cc:	60bb      	str	r3, [r7, #8]
 800c7ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c7d0:	4b44      	ldr	r3, [pc, #272]	; (800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a43      	ldr	r2, [pc, #268]	; (800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c7d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7da:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c7dc:	f7fd f9c4 	bl	8009b68 <HAL_GetTick>
 800c7e0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c7e2:	e008      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c7e4:	f7fd f9c0 	bl	8009b68 <HAL_GetTick>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	d901      	bls.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	e06d      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c7f6:	4b3b      	ldr	r3, [pc, #236]	; (800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d0f0      	beq.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c802:	4b36      	ldr	r3, [pc, #216]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c80a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d02f      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c81a:	69ba      	ldr	r2, [r7, #24]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d028      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c820:	4b2e      	ldr	r3, [pc, #184]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c828:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c82a:	4b2f      	ldr	r3, [pc, #188]	; (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c82c:	2201      	movs	r2, #1
 800c82e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c830:	4b2d      	ldr	r3, [pc, #180]	; (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c832:	2200      	movs	r2, #0
 800c834:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c836:	4a29      	ldr	r2, [pc, #164]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c83c:	4b27      	ldr	r3, [pc, #156]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	2b01      	cmp	r3, #1
 800c846:	d114      	bne.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c848:	f7fd f98e 	bl	8009b68 <HAL_GetTick>
 800c84c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c84e:	e00a      	b.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c850:	f7fd f98a 	bl	8009b68 <HAL_GetTick>
 800c854:	4602      	mov	r2, r0
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c85e:	4293      	cmp	r3, r2
 800c860:	d901      	bls.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c862:	2303      	movs	r3, #3
 800c864:	e035      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c866:	4b1d      	ldr	r3, [pc, #116]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c86a:	f003 0302 	and.w	r3, r3, #2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0ee      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c87a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c87e:	d10d      	bne.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c880:	4b16      	ldr	r3, [pc, #88]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c894:	4911      	ldr	r1, [pc, #68]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c896:	4313      	orrs	r3, r2
 800c898:	608b      	str	r3, [r1, #8]
 800c89a:	e005      	b.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c89c:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	4a0e      	ldr	r2, [pc, #56]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c8a6:	6093      	str	r3, [r2, #8]
 800c8a8:	4b0c      	ldr	r3, [pc, #48]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8b4:	4909      	ldr	r1, [pc, #36]	; (800c8dc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 0310 	and.w	r3, r3, #16
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d004      	beq.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c8cc:	4b07      	ldr	r3, [pc, #28]	; (800c8ec <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c8ce:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3720      	adds	r7, #32
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	40023800 	.word	0x40023800
 800c8e0:	42470070 	.word	0x42470070
 800c8e4:	40007000 	.word	0x40007000
 800c8e8:	42470e40 	.word	0x42470e40
 800c8ec:	424711e0 	.word	0x424711e0

0800c8f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	2b00      	cmp	r3, #0
 800c906:	d075      	beq.n	800c9f4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c908:	4ba2      	ldr	r3, [pc, #648]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	f003 030c 	and.w	r3, r3, #12
 800c910:	2b04      	cmp	r3, #4
 800c912:	d00c      	beq.n	800c92e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c914:	4b9f      	ldr	r3, [pc, #636]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c91c:	2b08      	cmp	r3, #8
 800c91e:	d112      	bne.n	800c946 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c920:	4b9c      	ldr	r3, [pc, #624]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c92c:	d10b      	bne.n	800c946 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c92e:	4b99      	ldr	r3, [pc, #612]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c936:	2b00      	cmp	r3, #0
 800c938:	d05b      	beq.n	800c9f2 <HAL_RCC_OscConfig+0x102>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d157      	bne.n	800c9f2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e20b      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c94e:	d106      	bne.n	800c95e <HAL_RCC_OscConfig+0x6e>
 800c950:	4b90      	ldr	r3, [pc, #576]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a8f      	ldr	r2, [pc, #572]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	e01d      	b.n	800c99a <HAL_RCC_OscConfig+0xaa>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c966:	d10c      	bne.n	800c982 <HAL_RCC_OscConfig+0x92>
 800c968:	4b8a      	ldr	r3, [pc, #552]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a89      	ldr	r2, [pc, #548]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c96e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c972:	6013      	str	r3, [r2, #0]
 800c974:	4b87      	ldr	r3, [pc, #540]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a86      	ldr	r2, [pc, #536]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c97a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	e00b      	b.n	800c99a <HAL_RCC_OscConfig+0xaa>
 800c982:	4b84      	ldr	r3, [pc, #528]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a83      	ldr	r2, [pc, #524]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c98c:	6013      	str	r3, [r2, #0]
 800c98e:	4b81      	ldr	r3, [pc, #516]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a80      	ldr	r2, [pc, #512]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c998:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d013      	beq.n	800c9ca <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a2:	f7fd f8e1 	bl	8009b68 <HAL_GetTick>
 800c9a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9a8:	e008      	b.n	800c9bc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c9aa:	f7fd f8dd 	bl	8009b68 <HAL_GetTick>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	2b64      	cmp	r3, #100	; 0x64
 800c9b6:	d901      	bls.n	800c9bc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c9b8:	2303      	movs	r3, #3
 800c9ba:	e1d0      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9bc:	4b75      	ldr	r3, [pc, #468]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d0f0      	beq.n	800c9aa <HAL_RCC_OscConfig+0xba>
 800c9c8:	e014      	b.n	800c9f4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9ca:	f7fd f8cd 	bl	8009b68 <HAL_GetTick>
 800c9ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c9d0:	e008      	b.n	800c9e4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c9d2:	f7fd f8c9 	bl	8009b68 <HAL_GetTick>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	2b64      	cmp	r3, #100	; 0x64
 800c9de:	d901      	bls.n	800c9e4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	e1bc      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c9e4:	4b6b      	ldr	r3, [pc, #428]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1f0      	bne.n	800c9d2 <HAL_RCC_OscConfig+0xe2>
 800c9f0:	e000      	b.n	800c9f4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d063      	beq.n	800cac8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ca00:	4b64      	ldr	r3, [pc, #400]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	f003 030c 	and.w	r3, r3, #12
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00b      	beq.n	800ca24 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca0c:	4b61      	ldr	r3, [pc, #388]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ca14:	2b08      	cmp	r3, #8
 800ca16:	d11c      	bne.n	800ca52 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca18:	4b5e      	ldr	r3, [pc, #376]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d116      	bne.n	800ca52 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca24:	4b5b      	ldr	r3, [pc, #364]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 0302 	and.w	r3, r3, #2
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d005      	beq.n	800ca3c <HAL_RCC_OscConfig+0x14c>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d001      	beq.n	800ca3c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e190      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca3c:	4b55      	ldr	r3, [pc, #340]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	4952      	ldr	r1, [pc, #328]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca50:	e03a      	b.n	800cac8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d020      	beq.n	800ca9c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca5a:	4b4f      	ldr	r3, [pc, #316]	; (800cb98 <HAL_RCC_OscConfig+0x2a8>)
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca60:	f7fd f882 	bl	8009b68 <HAL_GetTick>
 800ca64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca66:	e008      	b.n	800ca7a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca68:	f7fd f87e 	bl	8009b68 <HAL_GetTick>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d901      	bls.n	800ca7a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800ca76:	2303      	movs	r3, #3
 800ca78:	e171      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca7a:	4b46      	ldr	r3, [pc, #280]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f003 0302 	and.w	r3, r3, #2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0f0      	beq.n	800ca68 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca86:	4b43      	ldr	r3, [pc, #268]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	493f      	ldr	r1, [pc, #252]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800ca96:	4313      	orrs	r3, r2
 800ca98:	600b      	str	r3, [r1, #0]
 800ca9a:	e015      	b.n	800cac8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ca9c:	4b3e      	ldr	r3, [pc, #248]	; (800cb98 <HAL_RCC_OscConfig+0x2a8>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caa2:	f7fd f861 	bl	8009b68 <HAL_GetTick>
 800caa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800caa8:	e008      	b.n	800cabc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800caaa:	f7fd f85d 	bl	8009b68 <HAL_GetTick>
 800caae:	4602      	mov	r2, r0
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d901      	bls.n	800cabc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cab8:	2303      	movs	r3, #3
 800caba:	e150      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cabc:	4b35      	ldr	r3, [pc, #212]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f003 0302 	and.w	r3, r3, #2
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1f0      	bne.n	800caaa <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f003 0308 	and.w	r3, r3, #8
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d030      	beq.n	800cb36 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	695b      	ldr	r3, [r3, #20]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d016      	beq.n	800cb0a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cadc:	4b2f      	ldr	r3, [pc, #188]	; (800cb9c <HAL_RCC_OscConfig+0x2ac>)
 800cade:	2201      	movs	r2, #1
 800cae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cae2:	f7fd f841 	bl	8009b68 <HAL_GetTick>
 800cae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cae8:	e008      	b.n	800cafc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800caea:	f7fd f83d 	bl	8009b68 <HAL_GetTick>
 800caee:	4602      	mov	r2, r0
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	2b02      	cmp	r3, #2
 800caf6:	d901      	bls.n	800cafc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800caf8:	2303      	movs	r3, #3
 800cafa:	e130      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cafc:	4b25      	ldr	r3, [pc, #148]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800cafe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb00:	f003 0302 	and.w	r3, r3, #2
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d0f0      	beq.n	800caea <HAL_RCC_OscConfig+0x1fa>
 800cb08:	e015      	b.n	800cb36 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb0a:	4b24      	ldr	r3, [pc, #144]	; (800cb9c <HAL_RCC_OscConfig+0x2ac>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb10:	f7fd f82a 	bl	8009b68 <HAL_GetTick>
 800cb14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb16:	e008      	b.n	800cb2a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb18:	f7fd f826 	bl	8009b68 <HAL_GetTick>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d901      	bls.n	800cb2a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e119      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb2a:	4b1a      	ldr	r3, [pc, #104]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800cb2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb2e:	f003 0302 	and.w	r3, r3, #2
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1f0      	bne.n	800cb18 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0304 	and.w	r3, r3, #4
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f000 809f 	beq.w	800cc82 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb44:	2300      	movs	r3, #0
 800cb46:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb48:	4b12      	ldr	r3, [pc, #72]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800cb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10f      	bne.n	800cb74 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb54:	2300      	movs	r3, #0
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	4b0e      	ldr	r3, [pc, #56]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5c:	4a0d      	ldr	r2, [pc, #52]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800cb5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb62:	6413      	str	r3, [r2, #64]	; 0x40
 800cb64:	4b0b      	ldr	r3, [pc, #44]	; (800cb94 <HAL_RCC_OscConfig+0x2a4>)
 800cb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb6c:	60fb      	str	r3, [r7, #12]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cb70:	2301      	movs	r3, #1
 800cb72:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb74:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <HAL_RCC_OscConfig+0x2b0>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d120      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cb80:	4b07      	ldr	r3, [pc, #28]	; (800cba0 <HAL_RCC_OscConfig+0x2b0>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a06      	ldr	r2, [pc, #24]	; (800cba0 <HAL_RCC_OscConfig+0x2b0>)
 800cb86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cb8c:	f7fc ffec 	bl	8009b68 <HAL_GetTick>
 800cb90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb92:	e010      	b.n	800cbb6 <HAL_RCC_OscConfig+0x2c6>
 800cb94:	40023800 	.word	0x40023800
 800cb98:	42470000 	.word	0x42470000
 800cb9c:	42470e80 	.word	0x42470e80
 800cba0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cba4:	f7fc ffe0 	bl	8009b68 <HAL_GetTick>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d901      	bls.n	800cbb6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e0d3      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbb6:	4b6c      	ldr	r3, [pc, #432]	; (800cd68 <HAL_RCC_OscConfig+0x478>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0f0      	beq.n	800cba4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d106      	bne.n	800cbd8 <HAL_RCC_OscConfig+0x2e8>
 800cbca:	4b68      	ldr	r3, [pc, #416]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbce:	4a67      	ldr	r2, [pc, #412]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cbd0:	f043 0301 	orr.w	r3, r3, #1
 800cbd4:	6713      	str	r3, [r2, #112]	; 0x70
 800cbd6:	e01c      	b.n	800cc12 <HAL_RCC_OscConfig+0x322>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	2b05      	cmp	r3, #5
 800cbde:	d10c      	bne.n	800cbfa <HAL_RCC_OscConfig+0x30a>
 800cbe0:	4b62      	ldr	r3, [pc, #392]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cbe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe4:	4a61      	ldr	r2, [pc, #388]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cbe6:	f043 0304 	orr.w	r3, r3, #4
 800cbea:	6713      	str	r3, [r2, #112]	; 0x70
 800cbec:	4b5f      	ldr	r3, [pc, #380]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cbee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf0:	4a5e      	ldr	r2, [pc, #376]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cbf2:	f043 0301 	orr.w	r3, r3, #1
 800cbf6:	6713      	str	r3, [r2, #112]	; 0x70
 800cbf8:	e00b      	b.n	800cc12 <HAL_RCC_OscConfig+0x322>
 800cbfa:	4b5c      	ldr	r3, [pc, #368]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cbfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbfe:	4a5b      	ldr	r2, [pc, #364]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cc00:	f023 0301 	bic.w	r3, r3, #1
 800cc04:	6713      	str	r3, [r2, #112]	; 0x70
 800cc06:	4b59      	ldr	r3, [pc, #356]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0a:	4a58      	ldr	r2, [pc, #352]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cc0c:	f023 0304 	bic.w	r3, r3, #4
 800cc10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d015      	beq.n	800cc46 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc1a:	f7fc ffa5 	bl	8009b68 <HAL_GetTick>
 800cc1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc20:	e00a      	b.n	800cc38 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc22:	f7fc ffa1 	bl	8009b68 <HAL_GetTick>
 800cc26:	4602      	mov	r2, r0
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	1ad3      	subs	r3, r2, r3
 800cc2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d901      	bls.n	800cc38 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cc34:	2303      	movs	r3, #3
 800cc36:	e092      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc38:	4b4c      	ldr	r3, [pc, #304]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cc3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3c:	f003 0302 	and.w	r3, r3, #2
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0ee      	beq.n	800cc22 <HAL_RCC_OscConfig+0x332>
 800cc44:	e014      	b.n	800cc70 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc46:	f7fc ff8f 	bl	8009b68 <HAL_GetTick>
 800cc4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc4c:	e00a      	b.n	800cc64 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc4e:	f7fc ff8b 	bl	8009b68 <HAL_GetTick>
 800cc52:	4602      	mov	r2, r0
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d901      	bls.n	800cc64 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	e07c      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc64:	4b41      	ldr	r3, [pc, #260]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc68:	f003 0302 	and.w	r3, r3, #2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1ee      	bne.n	800cc4e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d105      	bne.n	800cc82 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cc76:	4b3d      	ldr	r3, [pc, #244]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc7a:	4a3c      	ldr	r2, [pc, #240]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cc7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	699b      	ldr	r3, [r3, #24]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d068      	beq.n	800cd5c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cc8a:	4b38      	ldr	r3, [pc, #224]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f003 030c 	and.w	r3, r3, #12
 800cc92:	2b08      	cmp	r3, #8
 800cc94:	d060      	beq.n	800cd58 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d145      	bne.n	800cd2a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc9e:	4b34      	ldr	r3, [pc, #208]	; (800cd70 <HAL_RCC_OscConfig+0x480>)
 800cca0:	2200      	movs	r2, #0
 800cca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cca4:	f7fc ff60 	bl	8009b68 <HAL_GetTick>
 800cca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccaa:	e008      	b.n	800ccbe <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ccac:	f7fc ff5c 	bl	8009b68 <HAL_GetTick>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d901      	bls.n	800ccbe <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e04f      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccbe:	4b2b      	ldr	r3, [pc, #172]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1f0      	bne.n	800ccac <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	69da      	ldr	r2, [r3, #28]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a1b      	ldr	r3, [r3, #32]
 800ccd2:	431a      	orrs	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	019b      	lsls	r3, r3, #6
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce0:	085b      	lsrs	r3, r3, #1
 800cce2:	3b01      	subs	r3, #1
 800cce4:	041b      	lsls	r3, r3, #16
 800cce6:	431a      	orrs	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccec:	061b      	lsls	r3, r3, #24
 800ccee:	431a      	orrs	r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf4:	071b      	lsls	r3, r3, #28
 800ccf6:	491d      	ldr	r1, [pc, #116]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ccfc:	4b1c      	ldr	r3, [pc, #112]	; (800cd70 <HAL_RCC_OscConfig+0x480>)
 800ccfe:	2201      	movs	r2, #1
 800cd00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd02:	f7fc ff31 	bl	8009b68 <HAL_GetTick>
 800cd06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd08:	e008      	b.n	800cd1c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd0a:	f7fc ff2d 	bl	8009b68 <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d901      	bls.n	800cd1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e020      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd1c:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0f0      	beq.n	800cd0a <HAL_RCC_OscConfig+0x41a>
 800cd28:	e018      	b.n	800cd5c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd2a:	4b11      	ldr	r3, [pc, #68]	; (800cd70 <HAL_RCC_OscConfig+0x480>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd30:	f7fc ff1a 	bl	8009b68 <HAL_GetTick>
 800cd34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd36:	e008      	b.n	800cd4a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd38:	f7fc ff16 	bl	8009b68 <HAL_GetTick>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d901      	bls.n	800cd4a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cd46:	2303      	movs	r3, #3
 800cd48:	e009      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd4a:	4b08      	ldr	r3, [pc, #32]	; (800cd6c <HAL_RCC_OscConfig+0x47c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1f0      	bne.n	800cd38 <HAL_RCC_OscConfig+0x448>
 800cd56:	e001      	b.n	800cd5c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e000      	b.n	800cd5e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	40007000 	.word	0x40007000
 800cd6c:	40023800 	.word	0x40023800
 800cd70:	42470060 	.word	0x42470060

0800cd74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	e022      	b.n	800cdcc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d105      	bne.n	800cd9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7fa f865 	bl	8006e68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2203      	movs	r2, #3
 800cda2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f814 	bl	800cdd4 <HAL_SD_InitCard>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e00a      	b.n	800cdcc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cdd4:	b5b0      	push	{r4, r5, r7, lr}
 800cdd6:	b08e      	sub	sp, #56	; 0x38
 800cdd8:	af04      	add	r7, sp, #16
 800cdda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cddc:	2300      	movs	r3, #0
 800cdde:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cde0:	2300      	movs	r3, #0
 800cde2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cde4:	2300      	movs	r3, #0
 800cde6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cde8:	2300      	movs	r3, #0
 800cdea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cdec:	2300      	movs	r3, #0
 800cdee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cdf0:	2376      	movs	r3, #118	; 0x76
 800cdf2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681d      	ldr	r5, [r3, #0]
 800cdf8:	466c      	mov	r4, sp
 800cdfa:	f107 0314 	add.w	r3, r7, #20
 800cdfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ce06:	f107 0308 	add.w	r3, r7, #8
 800ce0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	f003 fa87 	bl	8010320 <SDIO_Init>
 800ce12:	4603      	mov	r3, r0
 800ce14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ce18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	e031      	b.n	800ce88 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ce24:	4b1a      	ldr	r3, [pc, #104]	; (800ce90 <HAL_SD_InitCard+0xbc>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f003 fabf 	bl	80103b2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ce34:	4b16      	ldr	r3, [pc, #88]	; (800ce90 <HAL_SD_InitCard+0xbc>)
 800ce36:	2201      	movs	r2, #1
 800ce38:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 ffc6 	bl	800ddcc <SD_PowerON>
 800ce40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce42:	6a3b      	ldr	r3, [r7, #32]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00b      	beq.n	800ce60 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	431a      	orrs	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	e013      	b.n	800ce88 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 fee5 	bl	800dc30 <SD_InitCard>
 800ce66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce68:	6a3b      	ldr	r3, [r7, #32]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00b      	beq.n	800ce86 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e000      	b.n	800ce88 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3728      	adds	r7, #40	; 0x28
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bdb0      	pop	{r4, r5, r7, pc}
 800ce90:	422580a0 	.word	0x422580a0

0800ce94 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b08c      	sub	sp, #48	; 0x30
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d107      	bne.n	800cebc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e0c7      	b.n	800d04c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	f040 80c0 	bne.w	800d04a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ced0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	441a      	add	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d907      	bls.n	800ceee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e0ae      	b.n	800d04c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2203      	movs	r2, #3
 800cef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2200      	movs	r2, #0
 800cefc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cf0c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf12:	4a50      	ldr	r2, [pc, #320]	; (800d054 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cf14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1a:	4a4f      	ldr	r2, [pc, #316]	; (800d058 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cf1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf22:	2200      	movs	r2, #0
 800cf24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3380      	adds	r3, #128	; 0x80
 800cf30:	4619      	mov	r1, r3
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	025b      	lsls	r3, r3, #9
 800cf38:	089b      	lsrs	r3, r3, #2
 800cf3a:	f7fd fc07 	bl	800a74c <HAL_DMA_Start_IT>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d017      	beq.n	800cf74 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cf52:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a40      	ldr	r2, [pc, #256]	; (800d05c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cf5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e06b      	b.n	800d04c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cf74:	4b3a      	ldr	r3, [pc, #232]	; (800d060 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cf76:	2201      	movs	r2, #1
 800cf78:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d002      	beq.n	800cf88 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf84:	025b      	lsls	r3, r3, #9
 800cf86:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf90:	4618      	mov	r0, r3
 800cf92:	f003 faa1 	bl	80104d8 <SDMMC_CmdBlockLength>
 800cf96:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00f      	beq.n	800cfbe <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a2e      	ldr	r2, [pc, #184]	; (800d05c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cfa4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfac:	431a      	orrs	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e046      	b.n	800d04c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	025b      	lsls	r3, r3, #9
 800cfc8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cfca:	2390      	movs	r3, #144	; 0x90
 800cfcc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cfce:	2302      	movs	r3, #2
 800cfd0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f107 0210 	add.w	r2, r7, #16
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f003 fa4b 	bl	8010480 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d90a      	bls.n	800d006 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2282      	movs	r2, #130	; 0x82
 800cff4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cffc:	4618      	mov	r0, r3
 800cffe:	f003 faaf 	bl	8010560 <SDMMC_CmdReadMultiBlock>
 800d002:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d004:	e009      	b.n	800d01a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2281      	movs	r2, #129	; 0x81
 800d00a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d012:	4618      	mov	r0, r3
 800d014:	f003 fa82 	bl	801051c <SDMMC_CmdReadSingleBlock>
 800d018:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d012      	beq.n	800d046 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a0d      	ldr	r2, [pc, #52]	; (800d05c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d026:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	431a      	orrs	r2, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e002      	b.n	800d04c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	e000      	b.n	800d04c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d04a:	2302      	movs	r3, #2
  }
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3730      	adds	r7, #48	; 0x30
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	0800da3f 	.word	0x0800da3f
 800d058:	0800dab1 	.word	0x0800dab1
 800d05c:	004005ff 	.word	0x004005ff
 800d060:	4225858c 	.word	0x4225858c

0800d064 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b08c      	sub	sp, #48	; 0x30
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
 800d070:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d107      	bne.n	800d08c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d080:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e0ca      	b.n	800d222 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b01      	cmp	r3, #1
 800d096:	f040 80c3 	bne.w	800d220 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2200      	movs	r2, #0
 800d09e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	441a      	add	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d907      	bls.n	800d0be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e0b1      	b.n	800d222 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2203      	movs	r2, #3
 800d0c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f042 021a 	orr.w	r2, r2, #26
 800d0dc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e2:	4a52      	ldr	r2, [pc, #328]	; (800d22c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d0e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ea:	4a51      	ldr	r2, [pc, #324]	; (800d230 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d0ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d002      	beq.n	800d104 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d100:	025b      	lsls	r3, r3, #9
 800d102:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d10c:	4618      	mov	r0, r3
 800d10e:	f003 f9e3 	bl	80104d8 <SDMMC_CmdBlockLength>
 800d112:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00f      	beq.n	800d13a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a45      	ldr	r2, [pc, #276]	; (800d234 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d120:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	431a      	orrs	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2201      	movs	r2, #1
 800d132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e073      	b.n	800d222 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d90a      	bls.n	800d156 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	22a0      	movs	r2, #160	; 0xa0
 800d144:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d14c:	4618      	mov	r0, r3
 800d14e:	f003 fa4b 	bl	80105e8 <SDMMC_CmdWriteMultiBlock>
 800d152:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d154:	e009      	b.n	800d16a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2290      	movs	r2, #144	; 0x90
 800d15a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d162:	4618      	mov	r0, r3
 800d164:	f003 fa1e 	bl	80105a4 <SDMMC_CmdWriteSingleBlock>
 800d168:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d012      	beq.n	800d196 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a2f      	ldr	r2, [pc, #188]	; (800d234 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17e:	431a      	orrs	r2, r3
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2200      	movs	r2, #0
 800d190:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	e045      	b.n	800d222 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d196:	4b28      	ldr	r3, [pc, #160]	; (800d238 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d198:	2201      	movs	r2, #1
 800d19a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d1a0:	68b9      	ldr	r1, [r7, #8]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3380      	adds	r3, #128	; 0x80
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	025b      	lsls	r3, r3, #9
 800d1ae:	089b      	lsrs	r3, r3, #2
 800d1b0:	f7fd facc 	bl	800a74c <HAL_DMA_Start_IT>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d01a      	beq.n	800d1f0 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f022 021a 	bic.w	r2, r2, #26
 800d1c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a19      	ldr	r2, [pc, #100]	; (800d234 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d1d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e018      	b.n	800d222 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	025b      	lsls	r3, r3, #9
 800d1fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d1fc:	2390      	movs	r3, #144	; 0x90
 800d1fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d200:	2300      	movs	r3, #0
 800d202:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d204:	2300      	movs	r3, #0
 800d206:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d208:	2301      	movs	r3, #1
 800d20a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f107 0210 	add.w	r2, r7, #16
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f003 f932 	bl	8010480 <SDIO_ConfigData>

      return HAL_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	e000      	b.n	800d222 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d220:	2302      	movs	r3, #2
  }
}
 800d222:	4618      	mov	r0, r3
 800d224:	3730      	adds	r7, #48	; 0x30
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	0800da15 	.word	0x0800da15
 800d230:	0800dab1 	.word	0x0800dab1
 800d234:	004005ff 	.word	0x004005ff
 800d238:	4225858c 	.word	0x4225858c

0800d23c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d248:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d254:	2b00      	cmp	r3, #0
 800d256:	d008      	beq.n	800d26a <HAL_SD_IRQHandler+0x2e>
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f003 0308 	and.w	r3, r3, #8
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d003      	beq.n	800d26a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 ffc8 	bl	800e1f8 <SD_Read_IT>
 800d268:	e155      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d274:	2b00      	cmp	r3, #0
 800d276:	f000 808f 	beq.w	800d398 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d282:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	6812      	ldr	r2, [r2, #0]
 800d28e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d292:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d296:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f022 0201 	bic.w	r2, r2, #1
 800d2a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f003 0308 	and.w	r3, r3, #8
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d039      	beq.n	800d326 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f003 0302 	and.w	r3, r3, #2
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d104      	bne.n	800d2c6 <HAL_SD_IRQHandler+0x8a>
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f003 0320 	and.w	r3, r3, #32
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d011      	beq.n	800d2ea <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f003 f9ae 	bl	801062c <SDMMC_CmdStopTransfer>
 800d2d0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d008      	beq.n	800d2ea <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	431a      	orrs	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f91f 	bl	800d528 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f240 523a 	movw	r2, #1338	; 0x53a
 800d2f2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d104      	bne.n	800d316 <HAL_SD_IRQHandler+0xda>
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f003 0302 	and.w	r3, r3, #2
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f003 fe04 	bl	8010f24 <HAL_SD_RxCpltCallback>
 800d31c:	e0fb      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f003 fdf6 	bl	8010f10 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d324:	e0f7      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 80f2 	beq.w	800d516 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f003 0320 	and.w	r3, r3, #32
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d011      	beq.n	800d360 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4618      	mov	r0, r3
 800d342:	f003 f973 	bl	801062c <SDMMC_CmdStopTransfer>
 800d346:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d008      	beq.n	800d360 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	431a      	orrs	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f8e4 	bl	800d528 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f003 0301 	and.w	r3, r3, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	f040 80d5 	bne.w	800d516 <HAL_SD_IRQHandler+0x2da>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f003 0302 	and.w	r3, r3, #2
 800d372:	2b00      	cmp	r3, #0
 800d374:	f040 80cf 	bne.w	800d516 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f022 0208 	bic.w	r2, r2, #8
 800d386:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f003 fdbd 	bl	8010f10 <HAL_SD_TxCpltCallback>
}
 800d396:	e0be      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d008      	beq.n	800d3b8 <HAL_SD_IRQHandler+0x17c>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f003 0308 	and.w	r3, r3, #8
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d003      	beq.n	800d3b8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 ff72 	bl	800e29a <SD_Write_IT>
 800d3b6:	e0ae      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3be:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 80a7 	beq.w	800d516 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ce:	f003 0302 	and.w	r3, r3, #2
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d005      	beq.n	800d3e2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3da:	f043 0202 	orr.w	r2, r3, #2
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e8:	f003 0308 	and.w	r3, r3, #8
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d005      	beq.n	800d3fc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f4:	f043 0208 	orr.w	r2, r3, #8
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d402:	f003 0320 	and.w	r3, r3, #32
 800d406:	2b00      	cmp	r3, #0
 800d408:	d005      	beq.n	800d416 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40e:	f043 0220 	orr.w	r2, r3, #32
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41c:	f003 0310 	and.w	r3, r3, #16
 800d420:	2b00      	cmp	r3, #0
 800d422:	d005      	beq.n	800d430 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d428:	f043 0210 	orr.w	r2, r3, #16
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f240 523a 	movw	r2, #1338	; 0x53a
 800d438:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d448:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4618      	mov	r0, r3
 800d450:	f003 f8ec 	bl	801062c <SDMMC_CmdStopTransfer>
 800d454:	4602      	mov	r2, r0
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	431a      	orrs	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f003 0308 	and.w	r3, r3, #8
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00a      	beq.n	800d480 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 f855 	bl	800d528 <HAL_SD_ErrorCallback>
}
 800d47e:	e04a      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d486:	2b00      	cmp	r3, #0
 800d488:	d045      	beq.n	800d516 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f003 0310 	and.w	r3, r3, #16
 800d490:	2b00      	cmp	r3, #0
 800d492:	d104      	bne.n	800d49e <HAL_SD_IRQHandler+0x262>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f003 0320 	and.w	r3, r3, #32
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d011      	beq.n	800d4c2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a2:	4a1f      	ldr	r2, [pc, #124]	; (800d520 <HAL_SD_IRQHandler+0x2e4>)
 800d4a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fd f9a6 	bl	800a7fc <HAL_DMA_Abort_IT>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d02f      	beq.n	800d516 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f000 fb4a 	bl	800db54 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d4c0:	e029      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f003 0301 	and.w	r3, r3, #1
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d104      	bne.n	800d4d6 <HAL_SD_IRQHandler+0x29a>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f003 0302 	and.w	r3, r3, #2
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d011      	beq.n	800d4fa <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4da:	4a12      	ldr	r2, [pc, #72]	; (800d524 <HAL_SD_IRQHandler+0x2e8>)
 800d4dc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fd f98a 	bl	800a7fc <HAL_DMA_Abort_IT>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d013      	beq.n	800d516 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f000 fb65 	bl	800dbc2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d4f8:	e00d      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f003 fcf4 	bl	8010efc <HAL_SD_AbortCallback>
}
 800d514:	e7ff      	b.n	800d516 <HAL_SD_IRQHandler+0x2da>
 800d516:	bf00      	nop
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	0800db55 	.word	0x0800db55
 800d524:	0800dbc3 	.word	0x0800dbc3

0800d528 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d54a:	0f9b      	lsrs	r3, r3, #30
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d556:	0e9b      	lsrs	r3, r3, #26
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	f003 030f 	and.w	r3, r3, #15
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d568:	0e1b      	lsrs	r3, r3, #24
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	f003 0303 	and.w	r3, r3, #3
 800d570:	b2da      	uxtb	r2, r3
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d57a:	0c1b      	lsrs	r3, r3, #16
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d586:	0a1b      	lsrs	r3, r3, #8
 800d588:	b2da      	uxtb	r2, r3
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d592:	b2da      	uxtb	r2, r3
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d59c:	0d1b      	lsrs	r3, r3, #20
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5a8:	0c1b      	lsrs	r3, r3, #16
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	f003 030f 	and.w	r3, r3, #15
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5ba:	0bdb      	lsrs	r3, r3, #15
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5cc:	0b9b      	lsrs	r3, r3, #14
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5de:	0b5b      	lsrs	r3, r3, #13
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5f0:	0b1b      	lsrs	r3, r3, #12
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f003 0301 	and.w	r3, r3, #1
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2200      	movs	r2, #0
 800d602:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d163      	bne.n	800d6d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d610:	009a      	lsls	r2, r3, #2
 800d612:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d616:	4013      	ands	r3, r2
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d61c:	0f92      	lsrs	r2, r2, #30
 800d61e:	431a      	orrs	r2, r3
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d628:	0edb      	lsrs	r3, r3, #27
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	f003 0307 	and.w	r3, r3, #7
 800d630:	b2da      	uxtb	r2, r3
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d63a:	0e1b      	lsrs	r3, r3, #24
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	f003 0307 	and.w	r3, r3, #7
 800d642:	b2da      	uxtb	r2, r3
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d64c:	0d5b      	lsrs	r3, r3, #21
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	f003 0307 	and.w	r3, r3, #7
 800d654:	b2da      	uxtb	r2, r3
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d65e:	0c9b      	lsrs	r3, r3, #18
 800d660:	b2db      	uxtb	r3, r3
 800d662:	f003 0307 	and.w	r3, r3, #7
 800d666:	b2da      	uxtb	r2, r3
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d670:	0bdb      	lsrs	r3, r3, #15
 800d672:	b2db      	uxtb	r3, r3
 800d674:	f003 0307 	and.w	r3, r3, #7
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	691b      	ldr	r3, [r3, #16]
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	7e1b      	ldrb	r3, [r3, #24]
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	f003 0307 	and.w	r3, r3, #7
 800d692:	3302      	adds	r3, #2
 800d694:	2201      	movs	r2, #1
 800d696:	fa02 f303 	lsl.w	r3, r2, r3
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d69e:	fb02 f203 	mul.w	r2, r2, r3
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	7a1b      	ldrb	r3, [r3, #8]
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	f003 030f 	and.w	r3, r3, #15
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	409a      	lsls	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d6c0:	0a52      	lsrs	r2, r2, #9
 800d6c2:	fb02 f203 	mul.w	r2, r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6d0:	661a      	str	r2, [r3, #96]	; 0x60
 800d6d2:	e031      	b.n	800d738 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d11d      	bne.n	800d718 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6e0:	041b      	lsls	r3, r3, #16
 800d6e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6ea:	0c1b      	lsrs	r3, r3, #16
 800d6ec:	431a      	orrs	r2, r3
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	029a      	lsls	r2, r3, #10
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d70c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	661a      	str	r2, [r3, #96]	; 0x60
 800d716:	e00f      	b.n	800d738 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a58      	ldr	r2, [pc, #352]	; (800d880 <HAL_SD_GetCardCSD+0x344>)
 800d71e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	e09d      	b.n	800d874 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d73c:	0b9b      	lsrs	r3, r3, #14
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	f003 0301 	and.w	r3, r3, #1
 800d744:	b2da      	uxtb	r2, r3
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d74e:	09db      	lsrs	r3, r3, #7
 800d750:	b2db      	uxtb	r3, r3
 800d752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d756:	b2da      	uxtb	r2, r3
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d760:	b2db      	uxtb	r3, r3
 800d762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d766:	b2da      	uxtb	r2, r3
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d770:	0fdb      	lsrs	r3, r3, #31
 800d772:	b2da      	uxtb	r2, r3
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d77c:	0f5b      	lsrs	r3, r3, #29
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	f003 0303 	and.w	r3, r3, #3
 800d784:	b2da      	uxtb	r2, r3
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d78e:	0e9b      	lsrs	r3, r3, #26
 800d790:	b2db      	uxtb	r3, r3
 800d792:	f003 0307 	and.w	r3, r3, #7
 800d796:	b2da      	uxtb	r2, r3
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a0:	0d9b      	lsrs	r3, r3, #22
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	f003 030f 	and.w	r3, r3, #15
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7b2:	0d5b      	lsrs	r3, r3, #21
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	f003 0301 	and.w	r3, r3, #1
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ce:	0c1b      	lsrs	r3, r3, #16
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7e2:	0bdb      	lsrs	r3, r3, #15
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f6:	0b9b      	lsrs	r3, r3, #14
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d80a:	0b5b      	lsrs	r3, r3, #13
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	f003 0301 	and.w	r3, r3, #1
 800d812:	b2da      	uxtb	r2, r3
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d81e:	0b1b      	lsrs	r3, r3, #12
 800d820:	b2db      	uxtb	r3, r3
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	b2da      	uxtb	r2, r3
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d832:	0a9b      	lsrs	r3, r3, #10
 800d834:	b2db      	uxtb	r3, r3
 800d836:	f003 0303 	and.w	r3, r3, #3
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d846:	0a1b      	lsrs	r3, r3, #8
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	f003 0303 	and.w	r3, r3, #3
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d85a:	085b      	lsrs	r3, r3, #1
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d862:	b2da      	uxtb	r2, r3
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d872:	2300      	movs	r3, #0
}
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	004005ff 	.word	0x004005ff

0800d884 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d8dc:	b5b0      	push	{r4, r5, r7, lr}
 800d8de:	b08e      	sub	sp, #56	; 0x38
 800d8e0:	af04      	add	r7, sp, #16
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2203      	movs	r2, #3
 800d8ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	d02e      	beq.n	800d954 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8fc:	d106      	bne.n	800d90c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d902:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	639a      	str	r2, [r3, #56]	; 0x38
 800d90a:	e029      	b.n	800d960 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d912:	d10a      	bne.n	800d92a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fb0f 	bl	800df38 <SD_WideBus_Enable>
 800d91a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	431a      	orrs	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	639a      	str	r2, [r3, #56]	; 0x38
 800d928:	e01a      	b.n	800d960 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10a      	bne.n	800d946 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fb4c 	bl	800dfce <SD_WideBus_Disable>
 800d936:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	431a      	orrs	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	639a      	str	r2, [r3, #56]	; 0x38
 800d944:	e00c      	b.n	800d960 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	639a      	str	r2, [r3, #56]	; 0x38
 800d952:	e005      	b.n	800d960 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d964:	2b00      	cmp	r3, #0
 800d966:	d009      	beq.n	800d97c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a18      	ldr	r2, [pc, #96]	; (800d9d0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d96e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d978:	2301      	movs	r3, #1
 800d97a:	e024      	b.n	800d9c6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681d      	ldr	r5, [r3, #0]
 800d9a2:	466c      	mov	r4, sp
 800d9a4:	f107 0318 	add.w	r3, r7, #24
 800d9a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d9b0:	f107 030c 	add.w	r3, r7, #12
 800d9b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f002 fcb2 	bl	8010320 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3728      	adds	r7, #40	; 0x28
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	004005ff 	.word	0x004005ff

0800d9d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d9e0:	f107 030c 	add.w	r3, r7, #12
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa7e 	bl	800dee8 <SD_SendStatus>
 800d9ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d005      	beq.n	800da00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	0a5b      	lsrs	r3, r3, #9
 800da04:	f003 030f 	and.w	r3, r3, #15
 800da08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800da0a:	693b      	ldr	r3, [r7, #16]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800da32:	bf00      	nop
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da4a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da50:	2b82      	cmp	r3, #130	; 0x82
 800da52:	d111      	bne.n	800da78 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4618      	mov	r0, r3
 800da5a:	f002 fde7 	bl	801062c <SDMMC_CmdStopTransfer>
 800da5e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d008      	beq.n	800da78 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	431a      	orrs	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f7ff fd58 	bl	800d528 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f022 0208 	bic.w	r2, r2, #8
 800da86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f240 523a 	movw	r2, #1338	; 0x53a
 800da90:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2201      	movs	r2, #1
 800da96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f003 fa3f 	bl	8010f24 <HAL_SD_RxCpltCallback>
#endif
}
 800daa6:	bf00      	nop
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
	...

0800dab0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7fd f848 	bl	800ab54 <HAL_DMA_GetError>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d03e      	beq.n	800db48 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dad0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dad8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d002      	beq.n	800dae6 <SD_DMAError+0x36>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d12d      	bne.n	800db42 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a19      	ldr	r2, [pc, #100]	; (800db50 <SD_DMAError+0xa0>)
 800daec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dafc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800db0a:	6978      	ldr	r0, [r7, #20]
 800db0c:	f7ff ff62 	bl	800d9d4 <HAL_SD_GetCardState>
 800db10:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	2b06      	cmp	r3, #6
 800db16:	d002      	beq.n	800db1e <SD_DMAError+0x6e>
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	2b05      	cmp	r3, #5
 800db1c:	d10a      	bne.n	800db34 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4618      	mov	r0, r3
 800db24:	f002 fd82 	bl	801062c <SDMMC_CmdStopTransfer>
 800db28:	4602      	mov	r2, r0
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2e:	431a      	orrs	r2, r3
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	2200      	movs	r2, #0
 800db40:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800db42:	6978      	ldr	r0, [r7, #20]
 800db44:	f7ff fcf0 	bl	800d528 <HAL_SD_ErrorCallback>
#endif
  }
}
 800db48:	bf00      	nop
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	004005ff 	.word	0x004005ff

0800db54 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db60:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f240 523a 	movw	r2, #1338	; 0x53a
 800db6a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f7ff ff31 	bl	800d9d4 <HAL_SD_GetCardState>
 800db72:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2200      	movs	r2, #0
 800db80:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	2b06      	cmp	r3, #6
 800db86:	d002      	beq.n	800db8e <SD_DMATxAbort+0x3a>
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	2b05      	cmp	r3, #5
 800db8c:	d10a      	bne.n	800dba4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4618      	mov	r0, r3
 800db94:	f002 fd4a 	bl	801062c <SDMMC_CmdStopTransfer>
 800db98:	4602      	mov	r2, r0
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db9e:	431a      	orrs	r2, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d103      	bne.n	800dbb4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f003 f9a5 	bl	8010efc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dbb2:	e002      	b.n	800dbba <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	f7ff fcb7 	bl	800d528 <HAL_SD_ErrorCallback>
}
 800dbba:	bf00      	nop
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b084      	sub	sp, #16
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbce:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f240 523a 	movw	r2, #1338	; 0x53a
 800dbd8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7ff fefa 	bl	800d9d4 <HAL_SD_GetCardState>
 800dbe0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	2b06      	cmp	r3, #6
 800dbf4:	d002      	beq.n	800dbfc <SD_DMARxAbort+0x3a>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b05      	cmp	r3, #5
 800dbfa:	d10a      	bne.n	800dc12 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f002 fd13 	bl	801062c <SDMMC_CmdStopTransfer>
 800dc06:	4602      	mov	r2, r0
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0c:	431a      	orrs	r2, r3
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d103      	bne.n	800dc22 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f003 f96e 	bl	8010efc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dc20:	e002      	b.n	800dc28 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f7ff fc80 	bl	800d528 <HAL_SD_ErrorCallback>
}
 800dc28:	bf00      	nop
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dc30:	b5b0      	push	{r4, r5, r7, lr}
 800dc32:	b094      	sub	sp, #80	; 0x50
 800dc34:	af04      	add	r7, sp, #16
 800dc36:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f002 fbc5 	bl	80103d0 <SDIO_GetPowerState>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d102      	bne.n	800dc52 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dc50:	e0b7      	b.n	800ddc2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d02f      	beq.n	800dcba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f002 fdee 	bl	8010840 <SDMMC_CmdSendCID>
 800dc64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d001      	beq.n	800dc70 <SD_InitCard+0x40>
    {
      return errorstate;
 800dc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc6e:	e0a8      	b.n	800ddc2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2100      	movs	r1, #0
 800dc76:	4618      	mov	r0, r3
 800dc78:	f002 fbef 	bl	801045a <SDIO_GetResponse>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2104      	movs	r1, #4
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f002 fbe6 	bl	801045a <SDIO_GetResponse>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2108      	movs	r1, #8
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f002 fbdd 	bl	801045a <SDIO_GetResponse>
 800dca0:	4602      	mov	r2, r0
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	210c      	movs	r1, #12
 800dcac:	4618      	mov	r0, r3
 800dcae:	f002 fbd4 	bl	801045a <SDIO_GetResponse>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcbe:	2b03      	cmp	r3, #3
 800dcc0:	d00d      	beq.n	800dcde <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f107 020e 	add.w	r2, r7, #14
 800dcca:	4611      	mov	r1, r2
 800dccc:	4618      	mov	r0, r3
 800dcce:	f002 fdf4 	bl	80108ba <SDMMC_CmdSetRelAdd>
 800dcd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d001      	beq.n	800dcde <SD_InitCard+0xae>
    {
      return errorstate;
 800dcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcdc:	e071      	b.n	800ddc2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dce2:	2b03      	cmp	r3, #3
 800dce4:	d036      	beq.n	800dd54 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dce6:	89fb      	ldrh	r3, [r7, #14]
 800dce8:	461a      	mov	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcf6:	041b      	lsls	r3, r3, #16
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	f002 fdbe 	bl	801087c <SDMMC_CmdSendCSD>
 800dd00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d001      	beq.n	800dd0c <SD_InitCard+0xdc>
    {
      return errorstate;
 800dd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd0a:	e05a      	b.n	800ddc2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2100      	movs	r1, #0
 800dd12:	4618      	mov	r0, r3
 800dd14:	f002 fba1 	bl	801045a <SDIO_GetResponse>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2104      	movs	r1, #4
 800dd24:	4618      	mov	r0, r3
 800dd26:	f002 fb98 	bl	801045a <SDIO_GetResponse>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2108      	movs	r1, #8
 800dd36:	4618      	mov	r0, r3
 800dd38:	f002 fb8f 	bl	801045a <SDIO_GetResponse>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	210c      	movs	r1, #12
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f002 fb86 	bl	801045a <SDIO_GetResponse>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2104      	movs	r1, #4
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f002 fb7d 	bl	801045a <SDIO_GetResponse>
 800dd60:	4603      	mov	r3, r0
 800dd62:	0d1a      	lsrs	r2, r3, #20
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dd68:	f107 0310 	add.w	r3, r7, #16
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7ff fbe4 	bl	800d53c <HAL_SD_GetCardCSD>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d002      	beq.n	800dd80 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dd7e:	e020      	b.n	800ddc2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6819      	ldr	r1, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd88:	041b      	lsls	r3, r3, #16
 800dd8a:	f04f 0400 	mov.w	r4, #0
 800dd8e:	461a      	mov	r2, r3
 800dd90:	4623      	mov	r3, r4
 800dd92:	4608      	mov	r0, r1
 800dd94:	f002 fc6c 	bl	8010670 <SDMMC_CmdSelDesel>
 800dd98:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <SD_InitCard+0x174>
  {
    return errorstate;
 800dda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda2:	e00e      	b.n	800ddc2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681d      	ldr	r5, [r3, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	466c      	mov	r4, sp
 800ddac:	f103 0210 	add.w	r2, r3, #16
 800ddb0:	ca07      	ldmia	r2, {r0, r1, r2}
 800ddb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ddba:	4628      	mov	r0, r5
 800ddbc:	f002 fab0 	bl	8010320 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3740      	adds	r7, #64	; 0x40
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ddcc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	2300      	movs	r3, #0
 800ddde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f002 fc66 	bl	80106b6 <SDMMC_CmdGoIdleState>
 800ddea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	e072      	b.n	800dedc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f002 fc79 	bl	80106f2 <SDMMC_CmdOperCond>
 800de00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00d      	beq.n	800de24 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4618      	mov	r0, r3
 800de14:	f002 fc4f 	bl	80106b6 <SDMMC_CmdGoIdleState>
 800de18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d004      	beq.n	800de2a <SD_PowerON+0x5e>
    {
      return errorstate;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	e05b      	b.n	800dedc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2201      	movs	r2, #1
 800de28:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d137      	bne.n	800dea2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2100      	movs	r1, #0
 800de38:	4618      	mov	r0, r3
 800de3a:	f002 fc79 	bl	8010730 <SDMMC_CmdAppCommand>
 800de3e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d02d      	beq.n	800dea2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de4a:	e047      	b.n	800dedc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2100      	movs	r1, #0
 800de52:	4618      	mov	r0, r3
 800de54:	f002 fc6c 	bl	8010730 <SDMMC_CmdAppCommand>
 800de58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <SD_PowerON+0x98>
    {
      return errorstate;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	e03b      	b.n	800dedc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	491e      	ldr	r1, [pc, #120]	; (800dee4 <SD_PowerON+0x118>)
 800de6a:	4618      	mov	r0, r3
 800de6c:	f002 fc82 	bl	8010774 <SDMMC_CmdAppOperCommand>
 800de70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d002      	beq.n	800de7e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de7c:	e02e      	b.n	800dedc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2100      	movs	r1, #0
 800de84:	4618      	mov	r0, r3
 800de86:	f002 fae8 	bl	801045a <SDIO_GetResponse>
 800de8a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	0fdb      	lsrs	r3, r3, #31
 800de90:	2b01      	cmp	r3, #1
 800de92:	d101      	bne.n	800de98 <SD_PowerON+0xcc>
 800de94:	2301      	movs	r3, #1
 800de96:	e000      	b.n	800de9a <SD_PowerON+0xce>
 800de98:	2300      	movs	r3, #0
 800de9a:	613b      	str	r3, [r7, #16]

    count++;
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	3301      	adds	r3, #1
 800dea0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d802      	bhi.n	800deb2 <SD_PowerON+0xe6>
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d0cc      	beq.n	800de4c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800deb8:	4293      	cmp	r3, r2
 800deba:	d902      	bls.n	800dec2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800debc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dec0:	e00c      	b.n	800dedc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d003      	beq.n	800ded4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	645a      	str	r2, [r3, #68]	; 0x44
 800ded2:	e002      	b.n	800deda <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	c1100000 	.word	0xc1100000

0800dee8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d102      	bne.n	800defe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800def8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800defc:	e018      	b.n	800df30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df06:	041b      	lsls	r3, r3, #16
 800df08:	4619      	mov	r1, r3
 800df0a:	4610      	mov	r0, r2
 800df0c:	f002 fcf6 	bl	80108fc <SDMMC_CmdSendStatus>
 800df10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <SD_SendStatus+0x34>
  {
    return errorstate;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	e009      	b.n	800df30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2100      	movs	r1, #0
 800df22:	4618      	mov	r0, r3
 800df24:	f002 fa99 	bl	801045a <SDIO_GetResponse>
 800df28:	4602      	mov	r2, r0
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800df40:	2300      	movs	r3, #0
 800df42:	60fb      	str	r3, [r7, #12]
 800df44:	2300      	movs	r3, #0
 800df46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2100      	movs	r1, #0
 800df4e:	4618      	mov	r0, r3
 800df50:	f002 fa83 	bl	801045a <SDIO_GetResponse>
 800df54:	4603      	mov	r3, r0
 800df56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df5e:	d102      	bne.n	800df66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800df60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df64:	e02f      	b.n	800dfc6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800df66:	f107 030c 	add.w	r3, r7, #12
 800df6a:	4619      	mov	r1, r3
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 f879 	bl	800e064 <SD_FindSCR>
 800df72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	e023      	b.n	800dfc6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df84:	2b00      	cmp	r3, #0
 800df86:	d01c      	beq.n	800dfc2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df90:	041b      	lsls	r3, r3, #16
 800df92:	4619      	mov	r1, r3
 800df94:	4610      	mov	r0, r2
 800df96:	f002 fbcb 	bl	8010730 <SDMMC_CmdAppCommand>
 800df9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	e00f      	b.n	800dfc6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2102      	movs	r1, #2
 800dfac:	4618      	mov	r0, r3
 800dfae:	f002 fc04 	bl	80107ba <SDMMC_CmdBusWidth>
 800dfb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	e003      	b.n	800dfc6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e001      	b.n	800dfc6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3718      	adds	r7, #24
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b086      	sub	sp, #24
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	60fb      	str	r3, [r7, #12]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f002 fa38 	bl	801045a <SDIO_GetResponse>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dff4:	d102      	bne.n	800dffc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dffa:	e02f      	b.n	800e05c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dffc:	f107 030c 	add.w	r3, r7, #12
 800e000:	4619      	mov	r1, r3
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f82e 	bl	800e064 <SD_FindSCR>
 800e008:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	e023      	b.n	800e05c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d01c      	beq.n	800e058 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e026:	041b      	lsls	r3, r3, #16
 800e028:	4619      	mov	r1, r3
 800e02a:	4610      	mov	r0, r2
 800e02c:	f002 fb80 	bl	8010730 <SDMMC_CmdAppCommand>
 800e030:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d001      	beq.n	800e03c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	e00f      	b.n	800e05c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2100      	movs	r1, #0
 800e042:	4618      	mov	r0, r3
 800e044:	f002 fbb9 	bl	80107ba <SDMMC_CmdBusWidth>
 800e048:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	e003      	b.n	800e05c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e054:	2300      	movs	r3, #0
 800e056:	e001      	b.n	800e05c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e058:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e064:	b590      	push	{r4, r7, lr}
 800e066:	b08f      	sub	sp, #60	; 0x3c
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e06e:	f7fb fd7b 	bl	8009b68 <HAL_GetTick>
 800e072:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e074:	2300      	movs	r3, #0
 800e076:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e078:	2300      	movs	r3, #0
 800e07a:	60bb      	str	r3, [r7, #8]
 800e07c:	2300      	movs	r3, #0
 800e07e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2108      	movs	r1, #8
 800e08a:	4618      	mov	r0, r3
 800e08c:	f002 fa24 	bl	80104d8 <SDMMC_CmdBlockLength>
 800e090:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e094:	2b00      	cmp	r3, #0
 800e096:	d001      	beq.n	800e09c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09a:	e0a9      	b.n	800e1f0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0a4:	041b      	lsls	r3, r3, #16
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	f002 fb41 	bl	8010730 <SDMMC_CmdAppCommand>
 800e0ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d001      	beq.n	800e0ba <SD_FindSCR+0x56>
  {
    return errorstate;
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	e09a      	b.n	800e1f0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e0be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e0c0:	2308      	movs	r3, #8
 800e0c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e0c4:	2330      	movs	r3, #48	; 0x30
 800e0c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f107 0210 	add.w	r2, r7, #16
 800e0dc:	4611      	mov	r1, r2
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f002 f9ce 	bl	8010480 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f002 fb88 	bl	80107fe <SDMMC_CmdSendSCR>
 800e0ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d022      	beq.n	800e13c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f8:	e07a      	b.n	800e1f0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00e      	beq.n	800e126 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6819      	ldr	r1, [r3, #0]
 800e10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	f107 0208 	add.w	r2, r7, #8
 800e114:	18d4      	adds	r4, r2, r3
 800e116:	4608      	mov	r0, r1
 800e118:	f002 f92d 	bl	8010376 <SDIO_ReadFIFO>
 800e11c:	4603      	mov	r3, r0
 800e11e:	6023      	str	r3, [r4, #0]
      index++;
 800e120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e122:	3301      	adds	r3, #1
 800e124:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e126:	f7fb fd1f 	bl	8009b68 <HAL_GetTick>
 800e12a:	4602      	mov	r2, r0
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e134:	d102      	bne.n	800e13c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e136:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e13a:	e059      	b.n	800e1f0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e142:	f240 432a 	movw	r3, #1066	; 0x42a
 800e146:	4013      	ands	r3, r2
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d0d6      	beq.n	800e0fa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e152:	f003 0308 	and.w	r3, r3, #8
 800e156:	2b00      	cmp	r3, #0
 800e158:	d005      	beq.n	800e166 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2208      	movs	r2, #8
 800e160:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e162:	2308      	movs	r3, #8
 800e164:	e044      	b.n	800e1f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e16c:	f003 0302 	and.w	r3, r3, #2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d005      	beq.n	800e180 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2202      	movs	r2, #2
 800e17a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e17c:	2302      	movs	r3, #2
 800e17e:	e037      	b.n	800e1f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e186:	f003 0320 	and.w	r3, r3, #32
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d005      	beq.n	800e19a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2220      	movs	r2, #32
 800e194:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e196:	2320      	movs	r3, #32
 800e198:	e02a      	b.n	800e1f0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e1a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	061a      	lsls	r2, r3, #24
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	021b      	lsls	r3, r3, #8
 800e1ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	0a1b      	lsrs	r3, r3, #8
 800e1b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e1ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	0e1b      	lsrs	r3, r3, #24
 800e1c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	601a      	str	r2, [r3, #0]
    scr++;
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	3304      	adds	r3, #4
 800e1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	061a      	lsls	r2, r3, #24
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	021b      	lsls	r3, r3, #8
 800e1d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	0a1b      	lsrs	r3, r3, #8
 800e1de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e1e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	0e1b      	lsrs	r3, r3, #24
 800e1e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	373c      	adds	r7, #60	; 0x3c
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd90      	pop	{r4, r7, pc}

0800e1f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e204:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d03f      	beq.n	800e292 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e212:	2300      	movs	r3, #0
 800e214:	617b      	str	r3, [r7, #20]
 800e216:	e033      	b.n	800e280 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f002 f8aa 	bl	8010376 <SDIO_ReadFIFO>
 800e222:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	b2da      	uxtb	r2, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	3301      	adds	r3, #1
 800e230:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	3b01      	subs	r3, #1
 800e236:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	0a1b      	lsrs	r3, r3, #8
 800e23c:	b2da      	uxtb	r2, r3
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3301      	adds	r3, #1
 800e246:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	3b01      	subs	r3, #1
 800e24c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	0c1b      	lsrs	r3, r3, #16
 800e252:	b2da      	uxtb	r2, r3
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	3301      	adds	r3, #1
 800e25c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	3b01      	subs	r3, #1
 800e262:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	0e1b      	lsrs	r3, r3, #24
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	3301      	adds	r3, #1
 800e272:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	3b01      	subs	r3, #1
 800e278:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	3301      	adds	r3, #1
 800e27e:	617b      	str	r3, [r7, #20]
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	2b07      	cmp	r3, #7
 800e284:	d9c8      	bls.n	800e218 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	693a      	ldr	r2, [r7, #16]
 800e290:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e292:	bf00      	nop
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b086      	sub	sp, #24
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d043      	beq.n	800e33c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	617b      	str	r3, [r7, #20]
 800e2b8:	e037      	b.n	800e32a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	021a      	lsls	r2, r3, #8
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	041a      	lsls	r2, r3, #16
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	061a      	lsls	r2, r3, #24
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	4313      	orrs	r3, r2
 800e306:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	3301      	adds	r3, #1
 800e30c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	3b01      	subs	r3, #1
 800e312:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f107 0208 	add.w	r2, r7, #8
 800e31c:	4611      	mov	r1, r2
 800e31e:	4618      	mov	r0, r3
 800e320:	f002 f836 	bl	8010390 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	3301      	adds	r3, #1
 800e328:	617b      	str	r3, [r7, #20]
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2b07      	cmp	r3, #7
 800e32e:	d9c4      	bls.n	800e2ba <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	693a      	ldr	r2, [r7, #16]
 800e33a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e33c:	bf00      	nop
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d101      	bne.n	800e356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e352:	2301      	movs	r3, #1
 800e354:	e056      	b.n	800e404 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e362:	b2db      	uxtb	r3, r3
 800e364:	2b00      	cmp	r3, #0
 800e366:	d106      	bne.n	800e376 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7f8 fe6b 	bl	800704c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2202      	movs	r2, #2
 800e37a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e38c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	685a      	ldr	r2, [r3, #4]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	431a      	orrs	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	431a      	orrs	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	431a      	orrs	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	431a      	orrs	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e3b2:	431a      	orrs	r2, r3
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	69db      	ldr	r3, [r3, #28]
 800e3b8:	431a      	orrs	r2, r3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6a1b      	ldr	r3, [r3, #32]
 800e3be:	ea42 0103 	orr.w	r1, r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	430a      	orrs	r2, r1
 800e3cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	0c1b      	lsrs	r3, r3, #16
 800e3d4:	f003 0104 	and.w	r1, r3, #4
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	430a      	orrs	r2, r1
 800e3e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	69da      	ldr	r2, [r3, #28]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e3f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b088      	sub	sp, #32
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	603b      	str	r3, [r7, #0]
 800e418:	4613      	mov	r3, r2
 800e41a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e426:	2b01      	cmp	r3, #1
 800e428:	d101      	bne.n	800e42e <HAL_SPI_Transmit+0x22>
 800e42a:	2302      	movs	r3, #2
 800e42c:	e11e      	b.n	800e66c <HAL_SPI_Transmit+0x260>
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2201      	movs	r2, #1
 800e432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e436:	f7fb fb97 	bl	8009b68 <HAL_GetTick>
 800e43a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e43c:	88fb      	ldrh	r3, [r7, #6]
 800e43e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d002      	beq.n	800e452 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e44c:	2302      	movs	r3, #2
 800e44e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e450:	e103      	b.n	800e65a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <HAL_SPI_Transmit+0x52>
 800e458:	88fb      	ldrh	r3, [r7, #6]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d102      	bne.n	800e464 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e462:	e0fa      	b.n	800e65a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2203      	movs	r2, #3
 800e468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2200      	movs	r2, #0
 800e470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	88fa      	ldrh	r2, [r7, #6]
 800e47c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	88fa      	ldrh	r2, [r7, #6]
 800e482:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2200      	movs	r2, #0
 800e488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2200      	movs	r2, #0
 800e49a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4aa:	d107      	bne.n	800e4bc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e4ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c6:	2b40      	cmp	r3, #64	; 0x40
 800e4c8:	d007      	beq.n	800e4da <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4e2:	d14b      	bne.n	800e57c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d002      	beq.n	800e4f2 <HAL_SPI_Transmit+0xe6>
 800e4ec:	8afb      	ldrh	r3, [r7, #22]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d13e      	bne.n	800e570 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f6:	881a      	ldrh	r2, [r3, #0]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e502:	1c9a      	adds	r2, r3, #2
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	3b01      	subs	r3, #1
 800e510:	b29a      	uxth	r2, r3
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e516:	e02b      	b.n	800e570 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	f003 0302 	and.w	r3, r3, #2
 800e522:	2b02      	cmp	r3, #2
 800e524:	d112      	bne.n	800e54c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52a:	881a      	ldrh	r2, [r3, #0]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e536:	1c9a      	adds	r2, r3, #2
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e540:	b29b      	uxth	r3, r3
 800e542:	3b01      	subs	r3, #1
 800e544:	b29a      	uxth	r2, r3
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	86da      	strh	r2, [r3, #54]	; 0x36
 800e54a:	e011      	b.n	800e570 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e54c:	f7fb fb0c 	bl	8009b68 <HAL_GetTick>
 800e550:	4602      	mov	r2, r0
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	683a      	ldr	r2, [r7, #0]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d803      	bhi.n	800e564 <HAL_SPI_Transmit+0x158>
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e562:	d102      	bne.n	800e56a <HAL_SPI_Transmit+0x15e>
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d102      	bne.n	800e570 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e56a:	2303      	movs	r3, #3
 800e56c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e56e:	e074      	b.n	800e65a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e574:	b29b      	uxth	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1ce      	bne.n	800e518 <HAL_SPI_Transmit+0x10c>
 800e57a:	e04c      	b.n	800e616 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d002      	beq.n	800e58a <HAL_SPI_Transmit+0x17e>
 800e584:	8afb      	ldrh	r3, [r7, #22]
 800e586:	2b01      	cmp	r3, #1
 800e588:	d140      	bne.n	800e60c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	330c      	adds	r3, #12
 800e594:	7812      	ldrb	r2, [r2, #0]
 800e596:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e5b0:	e02c      	b.n	800e60c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	f003 0302 	and.w	r3, r3, #2
 800e5bc:	2b02      	cmp	r3, #2
 800e5be:	d113      	bne.n	800e5e8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	330c      	adds	r3, #12
 800e5ca:	7812      	ldrb	r2, [r2, #0]
 800e5cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	86da      	strh	r2, [r3, #54]	; 0x36
 800e5e6:	e011      	b.n	800e60c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5e8:	f7fb fabe 	bl	8009b68 <HAL_GetTick>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	683a      	ldr	r2, [r7, #0]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d803      	bhi.n	800e600 <HAL_SPI_Transmit+0x1f4>
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5fe:	d102      	bne.n	800e606 <HAL_SPI_Transmit+0x1fa>
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d102      	bne.n	800e60c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e606:	2303      	movs	r3, #3
 800e608:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e60a:	e026      	b.n	800e65a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e610:	b29b      	uxth	r3, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1cd      	bne.n	800e5b2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e616:	69ba      	ldr	r2, [r7, #24]
 800e618:	6839      	ldr	r1, [r7, #0]
 800e61a:	68f8      	ldr	r0, [r7, #12]
 800e61c:	f000 fba4 	bl	800ed68 <SPI_EndRxTxTransaction>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d002      	beq.n	800e62c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2220      	movs	r2, #32
 800e62a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10a      	bne.n	800e64a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e634:	2300      	movs	r3, #0
 800e636:	613b      	str	r3, [r7, #16]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	613b      	str	r3, [r7, #16]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	613b      	str	r3, [r7, #16]
 800e648:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d002      	beq.n	800e658 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	77fb      	strb	r3, [r7, #31]
 800e656:	e000      	b.n	800e65a <HAL_SPI_Transmit+0x24e>
  }

error:
 800e658:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2201      	movs	r2, #1
 800e65e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e66a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3720      	adds	r7, #32
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b088      	sub	sp, #32
 800e678:	af02      	add	r7, sp, #8
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	603b      	str	r3, [r7, #0]
 800e680:	4613      	mov	r3, r2
 800e682:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e684:	2300      	movs	r3, #0
 800e686:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e690:	d112      	bne.n	800e6b8 <HAL_SPI_Receive+0x44>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10e      	bne.n	800e6b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2204      	movs	r2, #4
 800e69e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e6a2:	88fa      	ldrh	r2, [r7, #6]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	68ba      	ldr	r2, [r7, #8]
 800e6ac:	68b9      	ldr	r1, [r7, #8]
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f000 f8e9 	bl	800e886 <HAL_SPI_TransmitReceive>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	e0e2      	b.n	800e87e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d101      	bne.n	800e6c6 <HAL_SPI_Receive+0x52>
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	e0db      	b.n	800e87e <HAL_SPI_Receive+0x20a>
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6ce:	f7fb fa4b 	bl	8009b68 <HAL_GetTick>
 800e6d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d002      	beq.n	800e6e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e6e4:	e0c2      	b.n	800e86c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d002      	beq.n	800e6f2 <HAL_SPI_Receive+0x7e>
 800e6ec:	88fb      	ldrh	r3, [r7, #6]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d102      	bne.n	800e6f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e6f6:	e0b9      	b.n	800e86c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2204      	movs	r2, #4
 800e6fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2200      	movs	r2, #0
 800e704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	88fa      	ldrh	r2, [r7, #6]
 800e710:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	88fa      	ldrh	r2, [r7, #6]
 800e716:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2200      	movs	r2, #0
 800e71c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2200      	movs	r2, #0
 800e728:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2200      	movs	r2, #0
 800e72e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e73e:	d107      	bne.n	800e750 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e74e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e75a:	2b40      	cmp	r3, #64	; 0x40
 800e75c:	d007      	beq.n	800e76e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e76c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d162      	bne.n	800e83c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e776:	e02e      	b.n	800e7d6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b01      	cmp	r3, #1
 800e784:	d115      	bne.n	800e7b2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f103 020c 	add.w	r2, r3, #12
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e792:	7812      	ldrb	r2, [r2, #0]
 800e794:	b2d2      	uxtb	r2, r2
 800e796:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79c:	1c5a      	adds	r2, r3, #1
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e7b0:	e011      	b.n	800e7d6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7b2:	f7fb f9d9 	bl	8009b68 <HAL_GetTick>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	1ad3      	subs	r3, r2, r3
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d803      	bhi.n	800e7ca <HAL_SPI_Receive+0x156>
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c8:	d102      	bne.n	800e7d0 <HAL_SPI_Receive+0x15c>
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d102      	bne.n	800e7d6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e7d4:	e04a      	b.n	800e86c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1cb      	bne.n	800e778 <HAL_SPI_Receive+0x104>
 800e7e0:	e031      	b.n	800e846 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	f003 0301 	and.w	r3, r3, #1
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d113      	bne.n	800e818 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68da      	ldr	r2, [r3, #12]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fa:	b292      	uxth	r2, r2
 800e7fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	1c9a      	adds	r2, r3, #2
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	3b01      	subs	r3, #1
 800e810:	b29a      	uxth	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e816:	e011      	b.n	800e83c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e818:	f7fb f9a6 	bl	8009b68 <HAL_GetTick>
 800e81c:	4602      	mov	r2, r0
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	1ad3      	subs	r3, r2, r3
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	429a      	cmp	r2, r3
 800e826:	d803      	bhi.n	800e830 <HAL_SPI_Receive+0x1bc>
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82e:	d102      	bne.n	800e836 <HAL_SPI_Receive+0x1c2>
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d102      	bne.n	800e83c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e836:	2303      	movs	r3, #3
 800e838:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e83a:	e017      	b.n	800e86c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e840:	b29b      	uxth	r3, r3
 800e842:	2b00      	cmp	r3, #0
 800e844:	d1cd      	bne.n	800e7e2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e846:	693a      	ldr	r2, [r7, #16]
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	68f8      	ldr	r0, [r7, #12]
 800e84c:	f000 fa27 	bl	800ec9e <SPI_EndRxTransaction>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2220      	movs	r2, #32
 800e85a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e860:	2b00      	cmp	r3, #0
 800e862:	d002      	beq.n	800e86a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e864:	2301      	movs	r3, #1
 800e866:	75fb      	strb	r3, [r7, #23]
 800e868:	e000      	b.n	800e86c <HAL_SPI_Receive+0x1f8>
  }

error :
 800e86a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3718      	adds	r7, #24
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b08c      	sub	sp, #48	; 0x30
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	60f8      	str	r0, [r7, #12]
 800e88e:	60b9      	str	r1, [r7, #8]
 800e890:	607a      	str	r2, [r7, #4]
 800e892:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e894:	2301      	movs	r3, #1
 800e896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e898:	2300      	movs	r3, #0
 800e89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d101      	bne.n	800e8ac <HAL_SPI_TransmitReceive+0x26>
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	e18a      	b.n	800ebc2 <HAL_SPI_TransmitReceive+0x33c>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8b4:	f7fb f958 	bl	8009b68 <HAL_GetTick>
 800e8b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e8ca:	887b      	ldrh	r3, [r7, #2]
 800e8cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e8ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d00f      	beq.n	800e8f6 <HAL_SPI_TransmitReceive+0x70>
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8dc:	d107      	bne.n	800e8ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d103      	bne.n	800e8ee <HAL_SPI_TransmitReceive+0x68>
 800e8e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8ea:	2b04      	cmp	r3, #4
 800e8ec:	d003      	beq.n	800e8f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e8f4:	e15b      	b.n	800ebae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d005      	beq.n	800e908 <HAL_SPI_TransmitReceive+0x82>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d002      	beq.n	800e908 <HAL_SPI_TransmitReceive+0x82>
 800e902:	887b      	ldrh	r3, [r7, #2]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d103      	bne.n	800e910 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e90e:	e14e      	b.n	800ebae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e916:	b2db      	uxtb	r3, r3
 800e918:	2b04      	cmp	r3, #4
 800e91a:	d003      	beq.n	800e924 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2205      	movs	r2, #5
 800e920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2200      	movs	r2, #0
 800e928:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	887a      	ldrh	r2, [r7, #2]
 800e934:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	887a      	ldrh	r2, [r7, #2]
 800e93a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	887a      	ldrh	r2, [r7, #2]
 800e946:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	887a      	ldrh	r2, [r7, #2]
 800e94c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e964:	2b40      	cmp	r3, #64	; 0x40
 800e966:	d007      	beq.n	800e978 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e980:	d178      	bne.n	800ea74 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <HAL_SPI_TransmitReceive+0x10a>
 800e98a:	8b7b      	ldrh	r3, [r7, #26]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d166      	bne.n	800ea5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e994:	881a      	ldrh	r2, [r3, #0]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a0:	1c9a      	adds	r2, r3, #2
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e9b4:	e053      	b.n	800ea5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	f003 0302 	and.w	r3, r3, #2
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	d11b      	bne.n	800e9fc <HAL_SPI_TransmitReceive+0x176>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d016      	beq.n	800e9fc <HAL_SPI_TransmitReceive+0x176>
 800e9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d113      	bne.n	800e9fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d8:	881a      	ldrh	r2, [r3, #0]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e4:	1c9a      	adds	r2, r3, #2
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d119      	bne.n	800ea3e <HAL_SPI_TransmitReceive+0x1b8>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d014      	beq.n	800ea3e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	68da      	ldr	r2, [r3, #12]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea1e:	b292      	uxth	r2, r2
 800ea20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea26:	1c9a      	adds	r2, r3, #2
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	3b01      	subs	r3, #1
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ea3e:	f7fb f893 	bl	8009b68 <HAL_GetTick>
 800ea42:	4602      	mov	r2, r0
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	1ad3      	subs	r3, r2, r3
 800ea48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d807      	bhi.n	800ea5e <HAL_SPI_TransmitReceive+0x1d8>
 800ea4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea54:	d003      	beq.n	800ea5e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ea56:	2303      	movs	r3, #3
 800ea58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ea5c:	e0a7      	b.n	800ebae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d1a6      	bne.n	800e9b6 <HAL_SPI_TransmitReceive+0x130>
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1a1      	bne.n	800e9b6 <HAL_SPI_TransmitReceive+0x130>
 800ea72:	e07c      	b.n	800eb6e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d002      	beq.n	800ea82 <HAL_SPI_TransmitReceive+0x1fc>
 800ea7c:	8b7b      	ldrh	r3, [r7, #26]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d16b      	bne.n	800eb5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	330c      	adds	r3, #12
 800ea8c:	7812      	ldrb	r2, [r2, #0]
 800ea8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea94:	1c5a      	adds	r2, r3, #1
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eaa8:	e057      	b.n	800eb5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	689b      	ldr	r3, [r3, #8]
 800eab0:	f003 0302 	and.w	r3, r3, #2
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d11c      	bne.n	800eaf2 <HAL_SPI_TransmitReceive+0x26c>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d017      	beq.n	800eaf2 <HAL_SPI_TransmitReceive+0x26c>
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d114      	bne.n	800eaf2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	330c      	adds	r3, #12
 800ead2:	7812      	ldrb	r2, [r2, #0]
 800ead4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eada:	1c5a      	adds	r2, r3, #1
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	3b01      	subs	r3, #1
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	f003 0301 	and.w	r3, r3, #1
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d119      	bne.n	800eb34 <HAL_SPI_TransmitReceive+0x2ae>
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d014      	beq.n	800eb34 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68da      	ldr	r2, [r3, #12]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb14:	b2d2      	uxtb	r2, r2
 800eb16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1c:	1c5a      	adds	r2, r3, #1
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eb30:	2301      	movs	r3, #1
 800eb32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eb34:	f7fb f818 	bl	8009b68 <HAL_GetTick>
 800eb38:	4602      	mov	r2, r0
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d803      	bhi.n	800eb4c <HAL_SPI_TransmitReceive+0x2c6>
 800eb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb4a:	d102      	bne.n	800eb52 <HAL_SPI_TransmitReceive+0x2cc>
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d103      	bne.n	800eb5a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800eb52:	2303      	movs	r3, #3
 800eb54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eb58:	e029      	b.n	800ebae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d1a2      	bne.n	800eaaa <HAL_SPI_TransmitReceive+0x224>
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d19d      	bne.n	800eaaa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eb6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	f000 f8f8 	bl	800ed68 <SPI_EndRxTxTransaction>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d006      	beq.n	800eb8c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2220      	movs	r2, #32
 800eb88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800eb8a:	e010      	b.n	800ebae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10b      	bne.n	800ebac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb94:	2300      	movs	r3, #0
 800eb96:	617b      	str	r3, [r7, #20]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	617b      	str	r3, [r7, #20]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	617b      	str	r3, [r7, #20]
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	e000      	b.n	800ebae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ebac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ebbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3730      	adds	r7, #48	; 0x30
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	60f8      	str	r0, [r7, #12]
 800ebd2:	60b9      	str	r1, [r7, #8]
 800ebd4:	603b      	str	r3, [r7, #0]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ebda:	e04c      	b.n	800ec76 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe2:	d048      	beq.n	800ec76 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ebe4:	f7fa ffc0 	bl	8009b68 <HAL_GetTick>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	1ad3      	subs	r3, r2, r3
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d902      	bls.n	800ebfa <SPI_WaitFlagStateUntilTimeout+0x30>
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d13d      	bne.n	800ec76 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	685a      	ldr	r2, [r3, #4]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ec08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec12:	d111      	bne.n	800ec38 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	689b      	ldr	r3, [r3, #8]
 800ec18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec1c:	d004      	beq.n	800ec28 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	689b      	ldr	r3, [r3, #8]
 800ec22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec26:	d107      	bne.n	800ec38 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec40:	d10f      	bne.n	800ec62 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ec60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e00f      	b.n	800ec96 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	689a      	ldr	r2, [r3, #8]
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	4013      	ands	r3, r2
 800ec80:	68ba      	ldr	r2, [r7, #8]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	bf0c      	ite	eq
 800ec86:	2301      	moveq	r3, #1
 800ec88:	2300      	movne	r3, #0
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	79fb      	ldrb	r3, [r7, #7]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d1a3      	bne.n	800ebdc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ec94:	2300      	movs	r3, #0
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b086      	sub	sp, #24
 800eca2:	af02      	add	r7, sp, #8
 800eca4:	60f8      	str	r0, [r7, #12]
 800eca6:	60b9      	str	r1, [r7, #8]
 800eca8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecb2:	d111      	bne.n	800ecd8 <SPI_EndRxTransaction+0x3a>
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecbc:	d004      	beq.n	800ecc8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecc6:	d107      	bne.n	800ecd8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecd6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ece0:	d12a      	bne.n	800ed38 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecea:	d012      	beq.n	800ed12 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	2180      	movs	r1, #128	; 0x80
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f7ff ff67 	bl	800ebca <SPI_WaitFlagStateUntilTimeout>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d02d      	beq.n	800ed5e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed06:	f043 0220 	orr.w	r2, r3, #32
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	e026      	b.n	800ed60 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	2101      	movs	r1, #1
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f7ff ff54 	bl	800ebca <SPI_WaitFlagStateUntilTimeout>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d01a      	beq.n	800ed5e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed2c:	f043 0220 	orr.w	r2, r3, #32
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ed34:	2303      	movs	r3, #3
 800ed36:	e013      	b.n	800ed60 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	9300      	str	r3, [sp, #0]
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	2101      	movs	r1, #1
 800ed42:	68f8      	ldr	r0, [r7, #12]
 800ed44:	f7ff ff41 	bl	800ebca <SPI_WaitFlagStateUntilTimeout>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d007      	beq.n	800ed5e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed52:	f043 0220 	orr.w	r2, r3, #32
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	e000      	b.n	800ed60 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ed5e:	2300      	movs	r3, #0
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3710      	adds	r7, #16
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b088      	sub	sp, #32
 800ed6c:	af02      	add	r7, sp, #8
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ed74:	4b1b      	ldr	r3, [pc, #108]	; (800ede4 <SPI_EndRxTxTransaction+0x7c>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a1b      	ldr	r2, [pc, #108]	; (800ede8 <SPI_EndRxTxTransaction+0x80>)
 800ed7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed7e:	0d5b      	lsrs	r3, r3, #21
 800ed80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed84:	fb02 f303 	mul.w	r3, r2, r3
 800ed88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed92:	d112      	bne.n	800edba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	2180      	movs	r1, #128	; 0x80
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f7ff ff13 	bl	800ebca <SPI_WaitFlagStateUntilTimeout>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d016      	beq.n	800edd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edae:	f043 0220 	orr.w	r2, r3, #32
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e00f      	b.n	800edda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00a      	beq.n	800edd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	3b01      	subs	r3, #1
 800edc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edd0:	2b80      	cmp	r3, #128	; 0x80
 800edd2:	d0f2      	beq.n	800edba <SPI_EndRxTxTransaction+0x52>
 800edd4:	e000      	b.n	800edd8 <SPI_EndRxTxTransaction+0x70>
        break;
 800edd6:	bf00      	nop
  }

  return HAL_OK;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	20000000 	.word	0x20000000
 800ede8:	165e9f81 	.word	0x165e9f81

0800edec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d101      	bne.n	800edfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	e01d      	b.n	800ee3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d106      	bne.n	800ee18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f7f8 f9d6 	bl	80071c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	3304      	adds	r3, #4
 800ee28:	4619      	mov	r1, r3
 800ee2a:	4610      	mov	r0, r2
 800ee2c:	f000 fb56 	bl	800f4dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ee42:	b480      	push	{r7}
 800ee44:	b085      	sub	sp, #20
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	68da      	ldr	r2, [r3, #12]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f042 0201 	orr.w	r2, r2, #1
 800ee58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	f003 0307 	and.w	r3, r3, #7
 800ee64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2b06      	cmp	r3, #6
 800ee6a:	d007      	beq.n	800ee7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f042 0201 	orr.w	r2, r2, #1
 800ee7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ee7c:	2300      	movs	r3, #0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3714      	adds	r7, #20
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr

0800ee8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b082      	sub	sp, #8
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d101      	bne.n	800ee9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e01d      	b.n	800eed8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d106      	bne.n	800eeb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7f8 f913 	bl	80070dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2202      	movs	r2, #2
 800eeba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3304      	adds	r3, #4
 800eec6:	4619      	mov	r1, r3
 800eec8:	4610      	mov	r0, r2
 800eeca:	f000 fb07 	bl	800f4dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2201      	movs	r2, #1
 800eed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eed6:	2300      	movs	r3, #0
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2201      	movs	r2, #1
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f000 fd42 	bl	800f97c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a15      	ldr	r2, [pc, #84]	; (800ef54 <HAL_TIM_PWM_Start+0x74>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d004      	beq.n	800ef0c <HAL_TIM_PWM_Start+0x2c>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a14      	ldr	r2, [pc, #80]	; (800ef58 <HAL_TIM_PWM_Start+0x78>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d101      	bne.n	800ef10 <HAL_TIM_PWM_Start+0x30>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e000      	b.n	800ef12 <HAL_TIM_PWM_Start+0x32>
 800ef10:	2300      	movs	r3, #0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d007      	beq.n	800ef26 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	f003 0307 	and.w	r3, r3, #7
 800ef30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2b06      	cmp	r3, #6
 800ef36:	d007      	beq.n	800ef48 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f042 0201 	orr.w	r2, r2, #1
 800ef46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	40010000 	.word	0x40010000
 800ef58:	40010400 	.word	0x40010400

0800ef5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b086      	sub	sp, #24
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d101      	bne.n	800ef70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e083      	b.n	800f078 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d106      	bne.n	800ef8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f7f8 f9ad 	bl	80072e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2202      	movs	r2, #2
 800ef8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	6812      	ldr	r2, [r2, #0]
 800ef9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800efa0:	f023 0307 	bic.w	r3, r3, #7
 800efa4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	3304      	adds	r3, #4
 800efae:	4619      	mov	r1, r3
 800efb0:	4610      	mov	r0, r2
 800efb2:	f000 fa93 	bl	800f4dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	6a1b      	ldr	r3, [r3, #32]
 800efcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	4313      	orrs	r3, r2
 800efd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efde:	f023 0303 	bic.w	r3, r3, #3
 800efe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	689a      	ldr	r2, [r3, #8]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	699b      	ldr	r3, [r3, #24]
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	4313      	orrs	r3, r2
 800eff0:	693a      	ldr	r2, [r7, #16]
 800eff2:	4313      	orrs	r3, r2
 800eff4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800effc:	f023 030c 	bic.w	r3, r3, #12
 800f000:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f00c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	68da      	ldr	r2, [r3, #12]
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	69db      	ldr	r3, [r3, #28]
 800f016:	021b      	lsls	r3, r3, #8
 800f018:	4313      	orrs	r3, r2
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	011a      	lsls	r2, r3, #4
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	6a1b      	ldr	r3, [r3, #32]
 800f02a:	031b      	lsls	r3, r3, #12
 800f02c:	4313      	orrs	r3, r2
 800f02e:	693a      	ldr	r2, [r7, #16]
 800f030:	4313      	orrs	r3, r2
 800f032:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f03a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f042:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	695b      	ldr	r3, [r3, #20]
 800f04c:	011b      	lsls	r3, r3, #4
 800f04e:	4313      	orrs	r3, r2
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	4313      	orrs	r3, r2
 800f054:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	693a      	ldr	r2, [r7, #16]
 800f064:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2201      	movs	r2, #1
 800f072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3718      	adds	r7, #24
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d002      	beq.n	800f096 <HAL_TIM_Encoder_Start+0x16>
 800f090:	2b04      	cmp	r3, #4
 800f092:	d008      	beq.n	800f0a6 <HAL_TIM_Encoder_Start+0x26>
 800f094:	e00f      	b.n	800f0b6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2201      	movs	r2, #1
 800f09c:	2100      	movs	r1, #0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 fc6c 	bl	800f97c <TIM_CCxChannelCmd>
      break;
 800f0a4:	e016      	b.n	800f0d4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	2104      	movs	r1, #4
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f000 fc64 	bl	800f97c <TIM_CCxChannelCmd>
      break;
 800f0b4:	e00e      	b.n	800f0d4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	2100      	movs	r1, #0
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 fc5c 	bl	800f97c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	2104      	movs	r1, #4
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f000 fc55 	bl	800f97c <TIM_CCxChannelCmd>
      break;
 800f0d2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f042 0201 	orr.w	r2, r2, #1
 800f0e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3708      	adds	r7, #8
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b082      	sub	sp, #8
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	f003 0302 	and.w	r3, r3, #2
 800f100:	2b02      	cmp	r3, #2
 800f102:	d122      	bne.n	800f14a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	f003 0302 	and.w	r3, r3, #2
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d11b      	bne.n	800f14a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f06f 0202 	mvn.w	r2, #2
 800f11a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	699b      	ldr	r3, [r3, #24]
 800f128:	f003 0303 	and.w	r3, r3, #3
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d003      	beq.n	800f138 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f9b5 	bl	800f4a0 <HAL_TIM_IC_CaptureCallback>
 800f136:	e005      	b.n	800f144 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f9a7 	bl	800f48c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f9b8 	bl	800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	f003 0304 	and.w	r3, r3, #4
 800f154:	2b04      	cmp	r3, #4
 800f156:	d122      	bne.n	800f19e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	f003 0304 	and.w	r3, r3, #4
 800f162:	2b04      	cmp	r3, #4
 800f164:	d11b      	bne.n	800f19e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f06f 0204 	mvn.w	r2, #4
 800f16e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2202      	movs	r2, #2
 800f174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	699b      	ldr	r3, [r3, #24]
 800f17c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f180:	2b00      	cmp	r3, #0
 800f182:	d003      	beq.n	800f18c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 f98b 	bl	800f4a0 <HAL_TIM_IC_CaptureCallback>
 800f18a:	e005      	b.n	800f198 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 f97d 	bl	800f48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 f98e 	bl	800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	f003 0308 	and.w	r3, r3, #8
 800f1a8:	2b08      	cmp	r3, #8
 800f1aa:	d122      	bne.n	800f1f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	f003 0308 	and.w	r3, r3, #8
 800f1b6:	2b08      	cmp	r3, #8
 800f1b8:	d11b      	bne.n	800f1f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f06f 0208 	mvn.w	r2, #8
 800f1c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2204      	movs	r2, #4
 800f1c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	69db      	ldr	r3, [r3, #28]
 800f1d0:	f003 0303 	and.w	r3, r3, #3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d003      	beq.n	800f1e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 f961 	bl	800f4a0 <HAL_TIM_IC_CaptureCallback>
 800f1de:	e005      	b.n	800f1ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 f953 	bl	800f48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f964 	bl	800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	f003 0310 	and.w	r3, r3, #16
 800f1fc:	2b10      	cmp	r3, #16
 800f1fe:	d122      	bne.n	800f246 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	f003 0310 	and.w	r3, r3, #16
 800f20a:	2b10      	cmp	r3, #16
 800f20c:	d11b      	bne.n	800f246 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f06f 0210 	mvn.w	r2, #16
 800f216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2208      	movs	r2, #8
 800f21c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	69db      	ldr	r3, [r3, #28]
 800f224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d003      	beq.n	800f234 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f937 	bl	800f4a0 <HAL_TIM_IC_CaptureCallback>
 800f232:	e005      	b.n	800f240 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f000 f929 	bl	800f48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 f93a 	bl	800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	f003 0301 	and.w	r3, r3, #1
 800f250:	2b01      	cmp	r3, #1
 800f252:	d10e      	bne.n	800f272 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d107      	bne.n	800f272 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f06f 0201 	mvn.w	r2, #1
 800f26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7f6 fd23 	bl	8005cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f27c:	2b80      	cmp	r3, #128	; 0x80
 800f27e:	d10e      	bne.n	800f29e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f28a:	2b80      	cmp	r3, #128	; 0x80
 800f28c:	d107      	bne.n	800f29e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 fc6d 	bl	800fb78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2a8:	2b40      	cmp	r3, #64	; 0x40
 800f2aa:	d10e      	bne.n	800f2ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2b6:	2b40      	cmp	r3, #64	; 0x40
 800f2b8:	d107      	bne.n	800f2ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f2c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 f8ff 	bl	800f4c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	691b      	ldr	r3, [r3, #16]
 800f2d0:	f003 0320 	and.w	r3, r3, #32
 800f2d4:	2b20      	cmp	r3, #32
 800f2d6:	d10e      	bne.n	800f2f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	68db      	ldr	r3, [r3, #12]
 800f2de:	f003 0320 	and.w	r3, r3, #32
 800f2e2:	2b20      	cmp	r3, #32
 800f2e4:	d107      	bne.n	800f2f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f06f 0220 	mvn.w	r2, #32
 800f2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fc37 	bl	800fb64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f2f6:	bf00      	nop
 800f2f8:	3708      	adds	r7, #8
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
	...

0800f300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f312:	2b01      	cmp	r3, #1
 800f314:	d101      	bne.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f316:	2302      	movs	r3, #2
 800f318:	e0b4      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2201      	movs	r2, #1
 800f31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2202      	movs	r2, #2
 800f326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2b0c      	cmp	r3, #12
 800f32e:	f200 809f 	bhi.w	800f470 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f332:	a201      	add	r2, pc, #4	; (adr r2, 800f338 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f338:	0800f36d 	.word	0x0800f36d
 800f33c:	0800f471 	.word	0x0800f471
 800f340:	0800f471 	.word	0x0800f471
 800f344:	0800f471 	.word	0x0800f471
 800f348:	0800f3ad 	.word	0x0800f3ad
 800f34c:	0800f471 	.word	0x0800f471
 800f350:	0800f471 	.word	0x0800f471
 800f354:	0800f471 	.word	0x0800f471
 800f358:	0800f3ef 	.word	0x0800f3ef
 800f35c:	0800f471 	.word	0x0800f471
 800f360:	0800f471 	.word	0x0800f471
 800f364:	0800f471 	.word	0x0800f471
 800f368:	0800f42f 	.word	0x0800f42f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	68b9      	ldr	r1, [r7, #8]
 800f372:	4618      	mov	r0, r3
 800f374:	f000 f952 	bl	800f61c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	699a      	ldr	r2, [r3, #24]
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f042 0208 	orr.w	r2, r2, #8
 800f386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	699a      	ldr	r2, [r3, #24]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f022 0204 	bic.w	r2, r2, #4
 800f396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6999      	ldr	r1, [r3, #24]
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	691a      	ldr	r2, [r3, #16]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	430a      	orrs	r2, r1
 800f3a8:	619a      	str	r2, [r3, #24]
      break;
 800f3aa:	e062      	b.n	800f472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	68b9      	ldr	r1, [r7, #8]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 f9a2 	bl	800f6fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	699a      	ldr	r2, [r3, #24]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	699a      	ldr	r2, [r3, #24]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	6999      	ldr	r1, [r3, #24]
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	021a      	lsls	r2, r3, #8
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	430a      	orrs	r2, r1
 800f3ea:	619a      	str	r2, [r3, #24]
      break;
 800f3ec:	e041      	b.n	800f472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	68b9      	ldr	r1, [r7, #8]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 f9f7 	bl	800f7e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	69da      	ldr	r2, [r3, #28]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f042 0208 	orr.w	r2, r2, #8
 800f408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	69da      	ldr	r2, [r3, #28]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f022 0204 	bic.w	r2, r2, #4
 800f418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	69d9      	ldr	r1, [r3, #28]
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	691a      	ldr	r2, [r3, #16]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	430a      	orrs	r2, r1
 800f42a:	61da      	str	r2, [r3, #28]
      break;
 800f42c:	e021      	b.n	800f472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	68b9      	ldr	r1, [r7, #8]
 800f434:	4618      	mov	r0, r3
 800f436:	f000 fa4b 	bl	800f8d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	69da      	ldr	r2, [r3, #28]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	69da      	ldr	r2, [r3, #28]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	69d9      	ldr	r1, [r3, #28]
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	021a      	lsls	r2, r3, #8
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	430a      	orrs	r2, r1
 800f46c:	61da      	str	r2, [r3, #28]
      break;
 800f46e:	e000      	b.n	800f472 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f470:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2201      	movs	r2, #1
 800f476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3710      	adds	r7, #16
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f4a8:	bf00      	nop
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4d0:	bf00      	nop
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a40      	ldr	r2, [pc, #256]	; (800f5f0 <TIM_Base_SetConfig+0x114>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d013      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4fa:	d00f      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a3d      	ldr	r2, [pc, #244]	; (800f5f4 <TIM_Base_SetConfig+0x118>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d00b      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a3c      	ldr	r2, [pc, #240]	; (800f5f8 <TIM_Base_SetConfig+0x11c>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d007      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4a3b      	ldr	r2, [pc, #236]	; (800f5fc <TIM_Base_SetConfig+0x120>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d003      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4a3a      	ldr	r2, [pc, #232]	; (800f600 <TIM_Base_SetConfig+0x124>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d108      	bne.n	800f52e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	4313      	orrs	r3, r2
 800f52c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a2f      	ldr	r2, [pc, #188]	; (800f5f0 <TIM_Base_SetConfig+0x114>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d02b      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f53c:	d027      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a2c      	ldr	r2, [pc, #176]	; (800f5f4 <TIM_Base_SetConfig+0x118>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d023      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a2b      	ldr	r2, [pc, #172]	; (800f5f8 <TIM_Base_SetConfig+0x11c>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d01f      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a2a      	ldr	r2, [pc, #168]	; (800f5fc <TIM_Base_SetConfig+0x120>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d01b      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a29      	ldr	r2, [pc, #164]	; (800f600 <TIM_Base_SetConfig+0x124>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d017      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a28      	ldr	r2, [pc, #160]	; (800f604 <TIM_Base_SetConfig+0x128>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d013      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a27      	ldr	r2, [pc, #156]	; (800f608 <TIM_Base_SetConfig+0x12c>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d00f      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a26      	ldr	r2, [pc, #152]	; (800f60c <TIM_Base_SetConfig+0x130>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d00b      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4a25      	ldr	r2, [pc, #148]	; (800f610 <TIM_Base_SetConfig+0x134>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d007      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a24      	ldr	r2, [pc, #144]	; (800f614 <TIM_Base_SetConfig+0x138>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d003      	beq.n	800f58e <TIM_Base_SetConfig+0xb2>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a23      	ldr	r2, [pc, #140]	; (800f618 <TIM_Base_SetConfig+0x13c>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d108      	bne.n	800f5a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	695b      	ldr	r3, [r3, #20]
 800f5aa:	4313      	orrs	r3, r2
 800f5ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	689a      	ldr	r2, [r3, #8]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a0a      	ldr	r2, [pc, #40]	; (800f5f0 <TIM_Base_SetConfig+0x114>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d003      	beq.n	800f5d4 <TIM_Base_SetConfig+0xf8>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a0c      	ldr	r2, [pc, #48]	; (800f600 <TIM_Base_SetConfig+0x124>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d103      	bne.n	800f5dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	691a      	ldr	r2, [r3, #16]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	615a      	str	r2, [r3, #20]
}
 800f5e2:	bf00      	nop
 800f5e4:	3714      	adds	r7, #20
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop
 800f5f0:	40010000 	.word	0x40010000
 800f5f4:	40000400 	.word	0x40000400
 800f5f8:	40000800 	.word	0x40000800
 800f5fc:	40000c00 	.word	0x40000c00
 800f600:	40010400 	.word	0x40010400
 800f604:	40014000 	.word	0x40014000
 800f608:	40014400 	.word	0x40014400
 800f60c:	40014800 	.word	0x40014800
 800f610:	40001800 	.word	0x40001800
 800f614:	40001c00 	.word	0x40001c00
 800f618:	40002000 	.word	0x40002000

0800f61c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b087      	sub	sp, #28
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a1b      	ldr	r3, [r3, #32]
 800f62a:	f023 0201 	bic.w	r2, r3, #1
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6a1b      	ldr	r3, [r3, #32]
 800f636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	699b      	ldr	r3, [r3, #24]
 800f642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f64a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f023 0303 	bic.w	r3, r3, #3
 800f652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	f023 0302 	bic.w	r3, r3, #2
 800f664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	697a      	ldr	r2, [r7, #20]
 800f66c:	4313      	orrs	r3, r2
 800f66e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a20      	ldr	r2, [pc, #128]	; (800f6f4 <TIM_OC1_SetConfig+0xd8>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d003      	beq.n	800f680 <TIM_OC1_SetConfig+0x64>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a1f      	ldr	r2, [pc, #124]	; (800f6f8 <TIM_OC1_SetConfig+0xdc>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d10c      	bne.n	800f69a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f023 0308 	bic.w	r3, r3, #8
 800f686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	697a      	ldr	r2, [r7, #20]
 800f68e:	4313      	orrs	r3, r2
 800f690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	f023 0304 	bic.w	r3, r3, #4
 800f698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4a15      	ldr	r2, [pc, #84]	; (800f6f4 <TIM_OC1_SetConfig+0xd8>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d003      	beq.n	800f6aa <TIM_OC1_SetConfig+0x8e>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4a14      	ldr	r2, [pc, #80]	; (800f6f8 <TIM_OC1_SetConfig+0xdc>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d111      	bne.n	800f6ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	695b      	ldr	r3, [r3, #20]
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	699b      	ldr	r3, [r3, #24]
 800f6c8:	693a      	ldr	r2, [r7, #16]
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	693a      	ldr	r2, [r7, #16]
 800f6d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	685a      	ldr	r2, [r3, #4]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	697a      	ldr	r2, [r7, #20]
 800f6e6:	621a      	str	r2, [r3, #32]
}
 800f6e8:	bf00      	nop
 800f6ea:	371c      	adds	r7, #28
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	40010000 	.word	0x40010000
 800f6f8:	40010400 	.word	0x40010400

0800f6fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	f023 0210 	bic.w	r2, r3, #16
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a1b      	ldr	r3, [r3, #32]
 800f716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	699b      	ldr	r3, [r3, #24]
 800f722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f72a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	021b      	lsls	r3, r3, #8
 800f73a:	68fa      	ldr	r2, [r7, #12]
 800f73c:	4313      	orrs	r3, r2
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	f023 0320 	bic.w	r3, r3, #32
 800f746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	011b      	lsls	r3, r3, #4
 800f74e:	697a      	ldr	r2, [r7, #20]
 800f750:	4313      	orrs	r3, r2
 800f752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4a22      	ldr	r2, [pc, #136]	; (800f7e0 <TIM_OC2_SetConfig+0xe4>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d003      	beq.n	800f764 <TIM_OC2_SetConfig+0x68>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4a21      	ldr	r2, [pc, #132]	; (800f7e4 <TIM_OC2_SetConfig+0xe8>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d10d      	bne.n	800f780 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f76a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	011b      	lsls	r3, r3, #4
 800f772:	697a      	ldr	r2, [r7, #20]
 800f774:	4313      	orrs	r3, r2
 800f776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f77e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	4a17      	ldr	r2, [pc, #92]	; (800f7e0 <TIM_OC2_SetConfig+0xe4>)
 800f784:	4293      	cmp	r3, r2
 800f786:	d003      	beq.n	800f790 <TIM_OC2_SetConfig+0x94>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4a16      	ldr	r2, [pc, #88]	; (800f7e4 <TIM_OC2_SetConfig+0xe8>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d113      	bne.n	800f7b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f79e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	693a      	ldr	r2, [r7, #16]
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	699b      	ldr	r3, [r3, #24]
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	693a      	ldr	r2, [r7, #16]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	685a      	ldr	r2, [r3, #4]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	697a      	ldr	r2, [r7, #20]
 800f7d0:	621a      	str	r2, [r3, #32]
}
 800f7d2:	bf00      	nop
 800f7d4:	371c      	adds	r7, #28
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	40010000 	.word	0x40010000
 800f7e4:	40010400 	.word	0x40010400

0800f7e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a1b      	ldr	r3, [r3, #32]
 800f7f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	69db      	ldr	r3, [r3, #28]
 800f80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f023 0303 	bic.w	r3, r3, #3
 800f81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	4313      	orrs	r3, r2
 800f828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	689b      	ldr	r3, [r3, #8]
 800f836:	021b      	lsls	r3, r3, #8
 800f838:	697a      	ldr	r2, [r7, #20]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a21      	ldr	r2, [pc, #132]	; (800f8c8 <TIM_OC3_SetConfig+0xe0>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d003      	beq.n	800f84e <TIM_OC3_SetConfig+0x66>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a20      	ldr	r2, [pc, #128]	; (800f8cc <TIM_OC3_SetConfig+0xe4>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d10d      	bne.n	800f86a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	021b      	lsls	r3, r3, #8
 800f85c:	697a      	ldr	r2, [r7, #20]
 800f85e:	4313      	orrs	r3, r2
 800f860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4a16      	ldr	r2, [pc, #88]	; (800f8c8 <TIM_OC3_SetConfig+0xe0>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d003      	beq.n	800f87a <TIM_OC3_SetConfig+0x92>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4a15      	ldr	r2, [pc, #84]	; (800f8cc <TIM_OC3_SetConfig+0xe4>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d113      	bne.n	800f8a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	695b      	ldr	r3, [r3, #20]
 800f88e:	011b      	lsls	r3, r3, #4
 800f890:	693a      	ldr	r2, [r7, #16]
 800f892:	4313      	orrs	r3, r2
 800f894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	699b      	ldr	r3, [r3, #24]
 800f89a:	011b      	lsls	r3, r3, #4
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	693a      	ldr	r2, [r7, #16]
 800f8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	685a      	ldr	r2, [r3, #4]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	697a      	ldr	r2, [r7, #20]
 800f8ba:	621a      	str	r2, [r3, #32]
}
 800f8bc:	bf00      	nop
 800f8be:	371c      	adds	r7, #28
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr
 800f8c8:	40010000 	.word	0x40010000
 800f8cc:	40010400 	.word	0x40010400

0800f8d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b087      	sub	sp, #28
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a1b      	ldr	r3, [r3, #32]
 800f8de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6a1b      	ldr	r3, [r3, #32]
 800f8ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	69db      	ldr	r3, [r3, #28]
 800f8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	021b      	lsls	r3, r3, #8
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	4313      	orrs	r3, r2
 800f912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f91a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	031b      	lsls	r3, r3, #12
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	4313      	orrs	r3, r2
 800f926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4a12      	ldr	r2, [pc, #72]	; (800f974 <TIM_OC4_SetConfig+0xa4>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d003      	beq.n	800f938 <TIM_OC4_SetConfig+0x68>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4a11      	ldr	r2, [pc, #68]	; (800f978 <TIM_OC4_SetConfig+0xa8>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d109      	bne.n	800f94c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f93e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	695b      	ldr	r3, [r3, #20]
 800f944:	019b      	lsls	r3, r3, #6
 800f946:	697a      	ldr	r2, [r7, #20]
 800f948:	4313      	orrs	r3, r2
 800f94a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	697a      	ldr	r2, [r7, #20]
 800f950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	685a      	ldr	r2, [r3, #4]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	621a      	str	r2, [r3, #32]
}
 800f966:	bf00      	nop
 800f968:	371c      	adds	r7, #28
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	40010000 	.word	0x40010000
 800f978:	40010400 	.word	0x40010400

0800f97c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b087      	sub	sp, #28
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	f003 031f 	and.w	r3, r3, #31
 800f98e:	2201      	movs	r2, #1
 800f990:	fa02 f303 	lsl.w	r3, r2, r3
 800f994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6a1a      	ldr	r2, [r3, #32]
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	43db      	mvns	r3, r3
 800f99e:	401a      	ands	r2, r3
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6a1a      	ldr	r2, [r3, #32]
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	f003 031f 	and.w	r3, r3, #31
 800f9ae:	6879      	ldr	r1, [r7, #4]
 800f9b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f9b4:	431a      	orrs	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	621a      	str	r2, [r3, #32]
}
 800f9ba:	bf00      	nop
 800f9bc:	371c      	adds	r7, #28
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c4:	4770      	bx	lr
	...

0800f9c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d101      	bne.n	800f9e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f9dc:	2302      	movs	r3, #2
 800f9de:	e05a      	b.n	800fa96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2202      	movs	r2, #2
 800f9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	689b      	ldr	r3, [r3, #8]
 800f9fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a21      	ldr	r2, [pc, #132]	; (800faa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d022      	beq.n	800fa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa2c:	d01d      	beq.n	800fa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a1d      	ldr	r2, [pc, #116]	; (800faa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d018      	beq.n	800fa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a1b      	ldr	r2, [pc, #108]	; (800faac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d013      	beq.n	800fa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4a1a      	ldr	r2, [pc, #104]	; (800fab0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d00e      	beq.n	800fa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a18      	ldr	r2, [pc, #96]	; (800fab4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d009      	beq.n	800fa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a17      	ldr	r2, [pc, #92]	; (800fab8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d004      	beq.n	800fa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a15      	ldr	r2, [pc, #84]	; (800fabc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d10c      	bne.n	800fa84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68ba      	ldr	r2, [r7, #8]
 800fa82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2201      	movs	r2, #1
 800fa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa94:	2300      	movs	r3, #0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3714      	adds	r7, #20
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	40010000 	.word	0x40010000
 800faa8:	40000400 	.word	0x40000400
 800faac:	40000800 	.word	0x40000800
 800fab0:	40000c00 	.word	0x40000c00
 800fab4:	40010400 	.word	0x40010400
 800fab8:	40014000 	.word	0x40014000
 800fabc:	40001800 	.word	0x40001800

0800fac0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800faca:	2300      	movs	r3, #0
 800facc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d101      	bne.n	800fadc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fad8:	2302      	movs	r3, #2
 800fada:	e03d      	b.n	800fb58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	4313      	orrs	r3, r2
 800faf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	4313      	orrs	r3, r2
 800fb28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	695b      	ldr	r3, [r3, #20]
 800fb34:	4313      	orrs	r3, r2
 800fb36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	69db      	ldr	r3, [r3, #28]
 800fb42:	4313      	orrs	r3, r2
 800fb44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	68fa      	ldr	r2, [r7, #12]
 800fb4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb56:	2300      	movs	r3, #0
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3714      	adds	r7, #20
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fb6c:	bf00      	nop
 800fb6e:	370c      	adds	r7, #12
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr

0800fb78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fb80:	bf00      	nop
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d101      	bne.n	800fb9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e03f      	b.n	800fc1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d106      	bne.n	800fbb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7f7 fcc0 	bl	8007538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2224      	movs	r2, #36	; 0x24
 800fbbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	68da      	ldr	r2, [r3, #12]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fbce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 f829 	bl	800fc28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	691a      	ldr	r2, [r3, #16]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fbe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	695a      	ldr	r2, [r3, #20]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fbf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68da      	ldr	r2, [r3, #12]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fc04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2220      	movs	r2, #32
 800fc10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2220      	movs	r2, #32
 800fc18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
	...

0800fc28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2c:	b085      	sub	sp, #20
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	68da      	ldr	r2, [r3, #12]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	430a      	orrs	r2, r1
 800fc46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	689a      	ldr	r2, [r3, #8]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	431a      	orrs	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	695b      	ldr	r3, [r3, #20]
 800fc56:	431a      	orrs	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	69db      	ldr	r3, [r3, #28]
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fc6a:	f023 030c 	bic.w	r3, r3, #12
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	6812      	ldr	r2, [r2, #0]
 800fc72:	68f9      	ldr	r1, [r7, #12]
 800fc74:	430b      	orrs	r3, r1
 800fc76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	695b      	ldr	r3, [r3, #20]
 800fc7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	699a      	ldr	r2, [r3, #24]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	430a      	orrs	r2, r1
 800fc8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	69db      	ldr	r3, [r3, #28]
 800fc92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc96:	f040 818b 	bne.w	800ffb0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	4ac1      	ldr	r2, [pc, #772]	; (800ffa4 <UART_SetConfig+0x37c>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d005      	beq.n	800fcb0 <UART_SetConfig+0x88>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4abf      	ldr	r2, [pc, #764]	; (800ffa8 <UART_SetConfig+0x380>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	f040 80bd 	bne.w	800fe2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fcb0:	f7fc fbcc 	bl	800c44c <HAL_RCC_GetPCLK2Freq>
 800fcb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	461d      	mov	r5, r3
 800fcba:	f04f 0600 	mov.w	r6, #0
 800fcbe:	46a8      	mov	r8, r5
 800fcc0:	46b1      	mov	r9, r6
 800fcc2:	eb18 0308 	adds.w	r3, r8, r8
 800fcc6:	eb49 0409 	adc.w	r4, r9, r9
 800fcca:	4698      	mov	r8, r3
 800fccc:	46a1      	mov	r9, r4
 800fcce:	eb18 0805 	adds.w	r8, r8, r5
 800fcd2:	eb49 0906 	adc.w	r9, r9, r6
 800fcd6:	f04f 0100 	mov.w	r1, #0
 800fcda:	f04f 0200 	mov.w	r2, #0
 800fcde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fce2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fce6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fcea:	4688      	mov	r8, r1
 800fcec:	4691      	mov	r9, r2
 800fcee:	eb18 0005 	adds.w	r0, r8, r5
 800fcf2:	eb49 0106 	adc.w	r1, r9, r6
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	461d      	mov	r5, r3
 800fcfc:	f04f 0600 	mov.w	r6, #0
 800fd00:	196b      	adds	r3, r5, r5
 800fd02:	eb46 0406 	adc.w	r4, r6, r6
 800fd06:	461a      	mov	r2, r3
 800fd08:	4623      	mov	r3, r4
 800fd0a:	f7f0 ffd5 	bl	8000cb8 <__aeabi_uldivmod>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	460c      	mov	r4, r1
 800fd12:	461a      	mov	r2, r3
 800fd14:	4ba5      	ldr	r3, [pc, #660]	; (800ffac <UART_SetConfig+0x384>)
 800fd16:	fba3 2302 	umull	r2, r3, r3, r2
 800fd1a:	095b      	lsrs	r3, r3, #5
 800fd1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	461d      	mov	r5, r3
 800fd24:	f04f 0600 	mov.w	r6, #0
 800fd28:	46a9      	mov	r9, r5
 800fd2a:	46b2      	mov	sl, r6
 800fd2c:	eb19 0309 	adds.w	r3, r9, r9
 800fd30:	eb4a 040a 	adc.w	r4, sl, sl
 800fd34:	4699      	mov	r9, r3
 800fd36:	46a2      	mov	sl, r4
 800fd38:	eb19 0905 	adds.w	r9, r9, r5
 800fd3c:	eb4a 0a06 	adc.w	sl, sl, r6
 800fd40:	f04f 0100 	mov.w	r1, #0
 800fd44:	f04f 0200 	mov.w	r2, #0
 800fd48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd54:	4689      	mov	r9, r1
 800fd56:	4692      	mov	sl, r2
 800fd58:	eb19 0005 	adds.w	r0, r9, r5
 800fd5c:	eb4a 0106 	adc.w	r1, sl, r6
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	461d      	mov	r5, r3
 800fd66:	f04f 0600 	mov.w	r6, #0
 800fd6a:	196b      	adds	r3, r5, r5
 800fd6c:	eb46 0406 	adc.w	r4, r6, r6
 800fd70:	461a      	mov	r2, r3
 800fd72:	4623      	mov	r3, r4
 800fd74:	f7f0 ffa0 	bl	8000cb8 <__aeabi_uldivmod>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	460c      	mov	r4, r1
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	4b8b      	ldr	r3, [pc, #556]	; (800ffac <UART_SetConfig+0x384>)
 800fd80:	fba3 1302 	umull	r1, r3, r3, r2
 800fd84:	095b      	lsrs	r3, r3, #5
 800fd86:	2164      	movs	r1, #100	; 0x64
 800fd88:	fb01 f303 	mul.w	r3, r1, r3
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	00db      	lsls	r3, r3, #3
 800fd90:	3332      	adds	r3, #50	; 0x32
 800fd92:	4a86      	ldr	r2, [pc, #536]	; (800ffac <UART_SetConfig+0x384>)
 800fd94:	fba2 2303 	umull	r2, r3, r2, r3
 800fd98:	095b      	lsrs	r3, r3, #5
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fda0:	4498      	add	r8, r3
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	461d      	mov	r5, r3
 800fda6:	f04f 0600 	mov.w	r6, #0
 800fdaa:	46a9      	mov	r9, r5
 800fdac:	46b2      	mov	sl, r6
 800fdae:	eb19 0309 	adds.w	r3, r9, r9
 800fdb2:	eb4a 040a 	adc.w	r4, sl, sl
 800fdb6:	4699      	mov	r9, r3
 800fdb8:	46a2      	mov	sl, r4
 800fdba:	eb19 0905 	adds.w	r9, r9, r5
 800fdbe:	eb4a 0a06 	adc.w	sl, sl, r6
 800fdc2:	f04f 0100 	mov.w	r1, #0
 800fdc6:	f04f 0200 	mov.w	r2, #0
 800fdca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fdce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fdd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdd6:	4689      	mov	r9, r1
 800fdd8:	4692      	mov	sl, r2
 800fdda:	eb19 0005 	adds.w	r0, r9, r5
 800fdde:	eb4a 0106 	adc.w	r1, sl, r6
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	461d      	mov	r5, r3
 800fde8:	f04f 0600 	mov.w	r6, #0
 800fdec:	196b      	adds	r3, r5, r5
 800fdee:	eb46 0406 	adc.w	r4, r6, r6
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	4623      	mov	r3, r4
 800fdf6:	f7f0 ff5f 	bl	8000cb8 <__aeabi_uldivmod>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	460c      	mov	r4, r1
 800fdfe:	461a      	mov	r2, r3
 800fe00:	4b6a      	ldr	r3, [pc, #424]	; (800ffac <UART_SetConfig+0x384>)
 800fe02:	fba3 1302 	umull	r1, r3, r3, r2
 800fe06:	095b      	lsrs	r3, r3, #5
 800fe08:	2164      	movs	r1, #100	; 0x64
 800fe0a:	fb01 f303 	mul.w	r3, r1, r3
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	00db      	lsls	r3, r3, #3
 800fe12:	3332      	adds	r3, #50	; 0x32
 800fe14:	4a65      	ldr	r2, [pc, #404]	; (800ffac <UART_SetConfig+0x384>)
 800fe16:	fba2 2303 	umull	r2, r3, r2, r3
 800fe1a:	095b      	lsrs	r3, r3, #5
 800fe1c:	f003 0207 	and.w	r2, r3, #7
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4442      	add	r2, r8
 800fe26:	609a      	str	r2, [r3, #8]
 800fe28:	e26f      	b.n	801030a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fe2a:	f7fc fafb 	bl	800c424 <HAL_RCC_GetPCLK1Freq>
 800fe2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	461d      	mov	r5, r3
 800fe34:	f04f 0600 	mov.w	r6, #0
 800fe38:	46a8      	mov	r8, r5
 800fe3a:	46b1      	mov	r9, r6
 800fe3c:	eb18 0308 	adds.w	r3, r8, r8
 800fe40:	eb49 0409 	adc.w	r4, r9, r9
 800fe44:	4698      	mov	r8, r3
 800fe46:	46a1      	mov	r9, r4
 800fe48:	eb18 0805 	adds.w	r8, r8, r5
 800fe4c:	eb49 0906 	adc.w	r9, r9, r6
 800fe50:	f04f 0100 	mov.w	r1, #0
 800fe54:	f04f 0200 	mov.w	r2, #0
 800fe58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fe5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fe60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fe64:	4688      	mov	r8, r1
 800fe66:	4691      	mov	r9, r2
 800fe68:	eb18 0005 	adds.w	r0, r8, r5
 800fe6c:	eb49 0106 	adc.w	r1, r9, r6
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	461d      	mov	r5, r3
 800fe76:	f04f 0600 	mov.w	r6, #0
 800fe7a:	196b      	adds	r3, r5, r5
 800fe7c:	eb46 0406 	adc.w	r4, r6, r6
 800fe80:	461a      	mov	r2, r3
 800fe82:	4623      	mov	r3, r4
 800fe84:	f7f0 ff18 	bl	8000cb8 <__aeabi_uldivmod>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	460c      	mov	r4, r1
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	4b47      	ldr	r3, [pc, #284]	; (800ffac <UART_SetConfig+0x384>)
 800fe90:	fba3 2302 	umull	r2, r3, r3, r2
 800fe94:	095b      	lsrs	r3, r3, #5
 800fe96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	461d      	mov	r5, r3
 800fe9e:	f04f 0600 	mov.w	r6, #0
 800fea2:	46a9      	mov	r9, r5
 800fea4:	46b2      	mov	sl, r6
 800fea6:	eb19 0309 	adds.w	r3, r9, r9
 800feaa:	eb4a 040a 	adc.w	r4, sl, sl
 800feae:	4699      	mov	r9, r3
 800feb0:	46a2      	mov	sl, r4
 800feb2:	eb19 0905 	adds.w	r9, r9, r5
 800feb6:	eb4a 0a06 	adc.w	sl, sl, r6
 800feba:	f04f 0100 	mov.w	r1, #0
 800febe:	f04f 0200 	mov.w	r2, #0
 800fec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800feca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fece:	4689      	mov	r9, r1
 800fed0:	4692      	mov	sl, r2
 800fed2:	eb19 0005 	adds.w	r0, r9, r5
 800fed6:	eb4a 0106 	adc.w	r1, sl, r6
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	461d      	mov	r5, r3
 800fee0:	f04f 0600 	mov.w	r6, #0
 800fee4:	196b      	adds	r3, r5, r5
 800fee6:	eb46 0406 	adc.w	r4, r6, r6
 800feea:	461a      	mov	r2, r3
 800feec:	4623      	mov	r3, r4
 800feee:	f7f0 fee3 	bl	8000cb8 <__aeabi_uldivmod>
 800fef2:	4603      	mov	r3, r0
 800fef4:	460c      	mov	r4, r1
 800fef6:	461a      	mov	r2, r3
 800fef8:	4b2c      	ldr	r3, [pc, #176]	; (800ffac <UART_SetConfig+0x384>)
 800fefa:	fba3 1302 	umull	r1, r3, r3, r2
 800fefe:	095b      	lsrs	r3, r3, #5
 800ff00:	2164      	movs	r1, #100	; 0x64
 800ff02:	fb01 f303 	mul.w	r3, r1, r3
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	00db      	lsls	r3, r3, #3
 800ff0a:	3332      	adds	r3, #50	; 0x32
 800ff0c:	4a27      	ldr	r2, [pc, #156]	; (800ffac <UART_SetConfig+0x384>)
 800ff0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff12:	095b      	lsrs	r3, r3, #5
 800ff14:	005b      	lsls	r3, r3, #1
 800ff16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ff1a:	4498      	add	r8, r3
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	461d      	mov	r5, r3
 800ff20:	f04f 0600 	mov.w	r6, #0
 800ff24:	46a9      	mov	r9, r5
 800ff26:	46b2      	mov	sl, r6
 800ff28:	eb19 0309 	adds.w	r3, r9, r9
 800ff2c:	eb4a 040a 	adc.w	r4, sl, sl
 800ff30:	4699      	mov	r9, r3
 800ff32:	46a2      	mov	sl, r4
 800ff34:	eb19 0905 	adds.w	r9, r9, r5
 800ff38:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff3c:	f04f 0100 	mov.w	r1, #0
 800ff40:	f04f 0200 	mov.w	r2, #0
 800ff44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff50:	4689      	mov	r9, r1
 800ff52:	4692      	mov	sl, r2
 800ff54:	eb19 0005 	adds.w	r0, r9, r5
 800ff58:	eb4a 0106 	adc.w	r1, sl, r6
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	461d      	mov	r5, r3
 800ff62:	f04f 0600 	mov.w	r6, #0
 800ff66:	196b      	adds	r3, r5, r5
 800ff68:	eb46 0406 	adc.w	r4, r6, r6
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	4623      	mov	r3, r4
 800ff70:	f7f0 fea2 	bl	8000cb8 <__aeabi_uldivmod>
 800ff74:	4603      	mov	r3, r0
 800ff76:	460c      	mov	r4, r1
 800ff78:	461a      	mov	r2, r3
 800ff7a:	4b0c      	ldr	r3, [pc, #48]	; (800ffac <UART_SetConfig+0x384>)
 800ff7c:	fba3 1302 	umull	r1, r3, r3, r2
 800ff80:	095b      	lsrs	r3, r3, #5
 800ff82:	2164      	movs	r1, #100	; 0x64
 800ff84:	fb01 f303 	mul.w	r3, r1, r3
 800ff88:	1ad3      	subs	r3, r2, r3
 800ff8a:	00db      	lsls	r3, r3, #3
 800ff8c:	3332      	adds	r3, #50	; 0x32
 800ff8e:	4a07      	ldr	r2, [pc, #28]	; (800ffac <UART_SetConfig+0x384>)
 800ff90:	fba2 2303 	umull	r2, r3, r2, r3
 800ff94:	095b      	lsrs	r3, r3, #5
 800ff96:	f003 0207 	and.w	r2, r3, #7
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4442      	add	r2, r8
 800ffa0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ffa2:	e1b2      	b.n	801030a <UART_SetConfig+0x6e2>
 800ffa4:	40011000 	.word	0x40011000
 800ffa8:	40011400 	.word	0x40011400
 800ffac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4ad7      	ldr	r2, [pc, #860]	; (8010314 <UART_SetConfig+0x6ec>)
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d005      	beq.n	800ffc6 <UART_SetConfig+0x39e>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4ad6      	ldr	r2, [pc, #856]	; (8010318 <UART_SetConfig+0x6f0>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	f040 80d1 	bne.w	8010168 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ffc6:	f7fc fa41 	bl	800c44c <HAL_RCC_GetPCLK2Freq>
 800ffca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	469a      	mov	sl, r3
 800ffd0:	f04f 0b00 	mov.w	fp, #0
 800ffd4:	46d0      	mov	r8, sl
 800ffd6:	46d9      	mov	r9, fp
 800ffd8:	eb18 0308 	adds.w	r3, r8, r8
 800ffdc:	eb49 0409 	adc.w	r4, r9, r9
 800ffe0:	4698      	mov	r8, r3
 800ffe2:	46a1      	mov	r9, r4
 800ffe4:	eb18 080a 	adds.w	r8, r8, sl
 800ffe8:	eb49 090b 	adc.w	r9, r9, fp
 800ffec:	f04f 0100 	mov.w	r1, #0
 800fff0:	f04f 0200 	mov.w	r2, #0
 800fff4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fff8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fffc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010000:	4688      	mov	r8, r1
 8010002:	4691      	mov	r9, r2
 8010004:	eb1a 0508 	adds.w	r5, sl, r8
 8010008:	eb4b 0609 	adc.w	r6, fp, r9
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	4619      	mov	r1, r3
 8010012:	f04f 0200 	mov.w	r2, #0
 8010016:	f04f 0300 	mov.w	r3, #0
 801001a:	f04f 0400 	mov.w	r4, #0
 801001e:	0094      	lsls	r4, r2, #2
 8010020:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010024:	008b      	lsls	r3, r1, #2
 8010026:	461a      	mov	r2, r3
 8010028:	4623      	mov	r3, r4
 801002a:	4628      	mov	r0, r5
 801002c:	4631      	mov	r1, r6
 801002e:	f7f0 fe43 	bl	8000cb8 <__aeabi_uldivmod>
 8010032:	4603      	mov	r3, r0
 8010034:	460c      	mov	r4, r1
 8010036:	461a      	mov	r2, r3
 8010038:	4bb8      	ldr	r3, [pc, #736]	; (801031c <UART_SetConfig+0x6f4>)
 801003a:	fba3 2302 	umull	r2, r3, r3, r2
 801003e:	095b      	lsrs	r3, r3, #5
 8010040:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	469b      	mov	fp, r3
 8010048:	f04f 0c00 	mov.w	ip, #0
 801004c:	46d9      	mov	r9, fp
 801004e:	46e2      	mov	sl, ip
 8010050:	eb19 0309 	adds.w	r3, r9, r9
 8010054:	eb4a 040a 	adc.w	r4, sl, sl
 8010058:	4699      	mov	r9, r3
 801005a:	46a2      	mov	sl, r4
 801005c:	eb19 090b 	adds.w	r9, r9, fp
 8010060:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010064:	f04f 0100 	mov.w	r1, #0
 8010068:	f04f 0200 	mov.w	r2, #0
 801006c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010070:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010074:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010078:	4689      	mov	r9, r1
 801007a:	4692      	mov	sl, r2
 801007c:	eb1b 0509 	adds.w	r5, fp, r9
 8010080:	eb4c 060a 	adc.w	r6, ip, sl
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	4619      	mov	r1, r3
 801008a:	f04f 0200 	mov.w	r2, #0
 801008e:	f04f 0300 	mov.w	r3, #0
 8010092:	f04f 0400 	mov.w	r4, #0
 8010096:	0094      	lsls	r4, r2, #2
 8010098:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801009c:	008b      	lsls	r3, r1, #2
 801009e:	461a      	mov	r2, r3
 80100a0:	4623      	mov	r3, r4
 80100a2:	4628      	mov	r0, r5
 80100a4:	4631      	mov	r1, r6
 80100a6:	f7f0 fe07 	bl	8000cb8 <__aeabi_uldivmod>
 80100aa:	4603      	mov	r3, r0
 80100ac:	460c      	mov	r4, r1
 80100ae:	461a      	mov	r2, r3
 80100b0:	4b9a      	ldr	r3, [pc, #616]	; (801031c <UART_SetConfig+0x6f4>)
 80100b2:	fba3 1302 	umull	r1, r3, r3, r2
 80100b6:	095b      	lsrs	r3, r3, #5
 80100b8:	2164      	movs	r1, #100	; 0x64
 80100ba:	fb01 f303 	mul.w	r3, r1, r3
 80100be:	1ad3      	subs	r3, r2, r3
 80100c0:	011b      	lsls	r3, r3, #4
 80100c2:	3332      	adds	r3, #50	; 0x32
 80100c4:	4a95      	ldr	r2, [pc, #596]	; (801031c <UART_SetConfig+0x6f4>)
 80100c6:	fba2 2303 	umull	r2, r3, r2, r3
 80100ca:	095b      	lsrs	r3, r3, #5
 80100cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100d0:	4498      	add	r8, r3
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	469b      	mov	fp, r3
 80100d6:	f04f 0c00 	mov.w	ip, #0
 80100da:	46d9      	mov	r9, fp
 80100dc:	46e2      	mov	sl, ip
 80100de:	eb19 0309 	adds.w	r3, r9, r9
 80100e2:	eb4a 040a 	adc.w	r4, sl, sl
 80100e6:	4699      	mov	r9, r3
 80100e8:	46a2      	mov	sl, r4
 80100ea:	eb19 090b 	adds.w	r9, r9, fp
 80100ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80100f2:	f04f 0100 	mov.w	r1, #0
 80100f6:	f04f 0200 	mov.w	r2, #0
 80100fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010106:	4689      	mov	r9, r1
 8010108:	4692      	mov	sl, r2
 801010a:	eb1b 0509 	adds.w	r5, fp, r9
 801010e:	eb4c 060a 	adc.w	r6, ip, sl
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	4619      	mov	r1, r3
 8010118:	f04f 0200 	mov.w	r2, #0
 801011c:	f04f 0300 	mov.w	r3, #0
 8010120:	f04f 0400 	mov.w	r4, #0
 8010124:	0094      	lsls	r4, r2, #2
 8010126:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801012a:	008b      	lsls	r3, r1, #2
 801012c:	461a      	mov	r2, r3
 801012e:	4623      	mov	r3, r4
 8010130:	4628      	mov	r0, r5
 8010132:	4631      	mov	r1, r6
 8010134:	f7f0 fdc0 	bl	8000cb8 <__aeabi_uldivmod>
 8010138:	4603      	mov	r3, r0
 801013a:	460c      	mov	r4, r1
 801013c:	461a      	mov	r2, r3
 801013e:	4b77      	ldr	r3, [pc, #476]	; (801031c <UART_SetConfig+0x6f4>)
 8010140:	fba3 1302 	umull	r1, r3, r3, r2
 8010144:	095b      	lsrs	r3, r3, #5
 8010146:	2164      	movs	r1, #100	; 0x64
 8010148:	fb01 f303 	mul.w	r3, r1, r3
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	011b      	lsls	r3, r3, #4
 8010150:	3332      	adds	r3, #50	; 0x32
 8010152:	4a72      	ldr	r2, [pc, #456]	; (801031c <UART_SetConfig+0x6f4>)
 8010154:	fba2 2303 	umull	r2, r3, r2, r3
 8010158:	095b      	lsrs	r3, r3, #5
 801015a:	f003 020f 	and.w	r2, r3, #15
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4442      	add	r2, r8
 8010164:	609a      	str	r2, [r3, #8]
 8010166:	e0d0      	b.n	801030a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010168:	f7fc f95c 	bl	800c424 <HAL_RCC_GetPCLK1Freq>
 801016c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	469a      	mov	sl, r3
 8010172:	f04f 0b00 	mov.w	fp, #0
 8010176:	46d0      	mov	r8, sl
 8010178:	46d9      	mov	r9, fp
 801017a:	eb18 0308 	adds.w	r3, r8, r8
 801017e:	eb49 0409 	adc.w	r4, r9, r9
 8010182:	4698      	mov	r8, r3
 8010184:	46a1      	mov	r9, r4
 8010186:	eb18 080a 	adds.w	r8, r8, sl
 801018a:	eb49 090b 	adc.w	r9, r9, fp
 801018e:	f04f 0100 	mov.w	r1, #0
 8010192:	f04f 0200 	mov.w	r2, #0
 8010196:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801019a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801019e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80101a2:	4688      	mov	r8, r1
 80101a4:	4691      	mov	r9, r2
 80101a6:	eb1a 0508 	adds.w	r5, sl, r8
 80101aa:	eb4b 0609 	adc.w	r6, fp, r9
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	4619      	mov	r1, r3
 80101b4:	f04f 0200 	mov.w	r2, #0
 80101b8:	f04f 0300 	mov.w	r3, #0
 80101bc:	f04f 0400 	mov.w	r4, #0
 80101c0:	0094      	lsls	r4, r2, #2
 80101c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80101c6:	008b      	lsls	r3, r1, #2
 80101c8:	461a      	mov	r2, r3
 80101ca:	4623      	mov	r3, r4
 80101cc:	4628      	mov	r0, r5
 80101ce:	4631      	mov	r1, r6
 80101d0:	f7f0 fd72 	bl	8000cb8 <__aeabi_uldivmod>
 80101d4:	4603      	mov	r3, r0
 80101d6:	460c      	mov	r4, r1
 80101d8:	461a      	mov	r2, r3
 80101da:	4b50      	ldr	r3, [pc, #320]	; (801031c <UART_SetConfig+0x6f4>)
 80101dc:	fba3 2302 	umull	r2, r3, r3, r2
 80101e0:	095b      	lsrs	r3, r3, #5
 80101e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	469b      	mov	fp, r3
 80101ea:	f04f 0c00 	mov.w	ip, #0
 80101ee:	46d9      	mov	r9, fp
 80101f0:	46e2      	mov	sl, ip
 80101f2:	eb19 0309 	adds.w	r3, r9, r9
 80101f6:	eb4a 040a 	adc.w	r4, sl, sl
 80101fa:	4699      	mov	r9, r3
 80101fc:	46a2      	mov	sl, r4
 80101fe:	eb19 090b 	adds.w	r9, r9, fp
 8010202:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010206:	f04f 0100 	mov.w	r1, #0
 801020a:	f04f 0200 	mov.w	r2, #0
 801020e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010212:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010216:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801021a:	4689      	mov	r9, r1
 801021c:	4692      	mov	sl, r2
 801021e:	eb1b 0509 	adds.w	r5, fp, r9
 8010222:	eb4c 060a 	adc.w	r6, ip, sl
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	4619      	mov	r1, r3
 801022c:	f04f 0200 	mov.w	r2, #0
 8010230:	f04f 0300 	mov.w	r3, #0
 8010234:	f04f 0400 	mov.w	r4, #0
 8010238:	0094      	lsls	r4, r2, #2
 801023a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801023e:	008b      	lsls	r3, r1, #2
 8010240:	461a      	mov	r2, r3
 8010242:	4623      	mov	r3, r4
 8010244:	4628      	mov	r0, r5
 8010246:	4631      	mov	r1, r6
 8010248:	f7f0 fd36 	bl	8000cb8 <__aeabi_uldivmod>
 801024c:	4603      	mov	r3, r0
 801024e:	460c      	mov	r4, r1
 8010250:	461a      	mov	r2, r3
 8010252:	4b32      	ldr	r3, [pc, #200]	; (801031c <UART_SetConfig+0x6f4>)
 8010254:	fba3 1302 	umull	r1, r3, r3, r2
 8010258:	095b      	lsrs	r3, r3, #5
 801025a:	2164      	movs	r1, #100	; 0x64
 801025c:	fb01 f303 	mul.w	r3, r1, r3
 8010260:	1ad3      	subs	r3, r2, r3
 8010262:	011b      	lsls	r3, r3, #4
 8010264:	3332      	adds	r3, #50	; 0x32
 8010266:	4a2d      	ldr	r2, [pc, #180]	; (801031c <UART_SetConfig+0x6f4>)
 8010268:	fba2 2303 	umull	r2, r3, r2, r3
 801026c:	095b      	lsrs	r3, r3, #5
 801026e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010272:	4498      	add	r8, r3
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	469b      	mov	fp, r3
 8010278:	f04f 0c00 	mov.w	ip, #0
 801027c:	46d9      	mov	r9, fp
 801027e:	46e2      	mov	sl, ip
 8010280:	eb19 0309 	adds.w	r3, r9, r9
 8010284:	eb4a 040a 	adc.w	r4, sl, sl
 8010288:	4699      	mov	r9, r3
 801028a:	46a2      	mov	sl, r4
 801028c:	eb19 090b 	adds.w	r9, r9, fp
 8010290:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010294:	f04f 0100 	mov.w	r1, #0
 8010298:	f04f 0200 	mov.w	r2, #0
 801029c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102a8:	4689      	mov	r9, r1
 80102aa:	4692      	mov	sl, r2
 80102ac:	eb1b 0509 	adds.w	r5, fp, r9
 80102b0:	eb4c 060a 	adc.w	r6, ip, sl
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	4619      	mov	r1, r3
 80102ba:	f04f 0200 	mov.w	r2, #0
 80102be:	f04f 0300 	mov.w	r3, #0
 80102c2:	f04f 0400 	mov.w	r4, #0
 80102c6:	0094      	lsls	r4, r2, #2
 80102c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102cc:	008b      	lsls	r3, r1, #2
 80102ce:	461a      	mov	r2, r3
 80102d0:	4623      	mov	r3, r4
 80102d2:	4628      	mov	r0, r5
 80102d4:	4631      	mov	r1, r6
 80102d6:	f7f0 fcef 	bl	8000cb8 <__aeabi_uldivmod>
 80102da:	4603      	mov	r3, r0
 80102dc:	460c      	mov	r4, r1
 80102de:	461a      	mov	r2, r3
 80102e0:	4b0e      	ldr	r3, [pc, #56]	; (801031c <UART_SetConfig+0x6f4>)
 80102e2:	fba3 1302 	umull	r1, r3, r3, r2
 80102e6:	095b      	lsrs	r3, r3, #5
 80102e8:	2164      	movs	r1, #100	; 0x64
 80102ea:	fb01 f303 	mul.w	r3, r1, r3
 80102ee:	1ad3      	subs	r3, r2, r3
 80102f0:	011b      	lsls	r3, r3, #4
 80102f2:	3332      	adds	r3, #50	; 0x32
 80102f4:	4a09      	ldr	r2, [pc, #36]	; (801031c <UART_SetConfig+0x6f4>)
 80102f6:	fba2 2303 	umull	r2, r3, r2, r3
 80102fa:	095b      	lsrs	r3, r3, #5
 80102fc:	f003 020f 	and.w	r2, r3, #15
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4442      	add	r2, r8
 8010306:	609a      	str	r2, [r3, #8]
}
 8010308:	e7ff      	b.n	801030a <UART_SetConfig+0x6e2>
 801030a:	bf00      	nop
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010314:	40011000 	.word	0x40011000
 8010318:	40011400 	.word	0x40011400
 801031c:	51eb851f 	.word	0x51eb851f

08010320 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010320:	b084      	sub	sp, #16
 8010322:	b480      	push	{r7}
 8010324:	b085      	sub	sp, #20
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
 801032a:	f107 001c 	add.w	r0, r7, #28
 801032e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010336:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010338:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801033a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801033e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010340:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010342:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010346:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801034a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	4313      	orrs	r3, r2
 8010350:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801035a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801035e:	68fa      	ldr	r2, [r7, #12]
 8010360:	431a      	orrs	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010366:	2300      	movs	r3, #0
}
 8010368:	4618      	mov	r0, r3
 801036a:	3714      	adds	r7, #20
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	b004      	add	sp, #16
 8010374:	4770      	bx	lr

08010376 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010376:	b480      	push	{r7}
 8010378:	b083      	sub	sp, #12
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010384:	4618      	mov	r0, r3
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80103a4:	2300      	movs	r3, #0
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	370c      	adds	r7, #12
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr

080103b2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b082      	sub	sp, #8
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2203      	movs	r2, #3
 80103be:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80103c0:	2002      	movs	r0, #2
 80103c2:	f7f9 fbdd 	bl	8009b80 <HAL_Delay>
  
  return HAL_OK;
 80103c6:	2300      	movs	r3, #0
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3708      	adds	r7, #8
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f003 0303 	and.w	r3, r3, #3
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801040a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010410:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010416:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	4313      	orrs	r3, r2
 801041c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010426:	f023 030f 	bic.w	r3, r3, #15
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	431a      	orrs	r2, r3
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010432:	2300      	movs	r3, #0
}
 8010434:	4618      	mov	r0, r3
 8010436:	3714      	adds	r7, #20
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	691b      	ldr	r3, [r3, #16]
 801044c:	b2db      	uxtb	r3, r3
}
 801044e:	4618      	mov	r0, r3
 8010450:	370c      	adds	r7, #12
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr

0801045a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801045a:	b480      	push	{r7}
 801045c:	b085      	sub	sp, #20
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	3314      	adds	r3, #20
 8010468:	461a      	mov	r2, r3
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	4413      	add	r3, r2
 801046e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
}  
 8010474:	4618      	mov	r0, r3
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr

08010480 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010480:	b480      	push	{r7}
 8010482:	b085      	sub	sp, #20
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801048a:	2300      	movs	r3, #0
 801048c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	685a      	ldr	r2, [r3, #4]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80104a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80104ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80104b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	4313      	orrs	r3, r2
 80104b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104be:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	431a      	orrs	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80104ca:	2300      	movs	r3, #0

}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3714      	adds	r7, #20
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr

080104d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b088      	sub	sp, #32
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80104e6:	2310      	movs	r3, #16
 80104e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104ea:	2340      	movs	r3, #64	; 0x40
 80104ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104ee:	2300      	movs	r3, #0
 80104f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104f8:	f107 0308 	add.w	r3, r7, #8
 80104fc:	4619      	mov	r1, r3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7ff ff74 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010504:	f241 3288 	movw	r2, #5000	; 0x1388
 8010508:	2110      	movs	r1, #16
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 fa40 	bl	8010990 <SDMMC_GetCmdResp1>
 8010510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010512:	69fb      	ldr	r3, [r7, #28]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3720      	adds	r7, #32
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b088      	sub	sp, #32
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801052a:	2311      	movs	r3, #17
 801052c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801052e:	2340      	movs	r3, #64	; 0x40
 8010530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010532:	2300      	movs	r3, #0
 8010534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801053a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801053c:	f107 0308 	add.w	r3, r7, #8
 8010540:	4619      	mov	r1, r3
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7ff ff52 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010548:	f241 3288 	movw	r2, #5000	; 0x1388
 801054c:	2111      	movs	r1, #17
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 fa1e 	bl	8010990 <SDMMC_GetCmdResp1>
 8010554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010556:	69fb      	ldr	r3, [r7, #28]
}
 8010558:	4618      	mov	r0, r3
 801055a:	3720      	adds	r7, #32
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}

08010560 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801056e:	2312      	movs	r3, #18
 8010570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010572:	2340      	movs	r3, #64	; 0x40
 8010574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010576:	2300      	movs	r3, #0
 8010578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801057e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010580:	f107 0308 	add.w	r3, r7, #8
 8010584:	4619      	mov	r1, r3
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f7ff ff30 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801058c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010590:	2112      	movs	r1, #18
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 f9fc 	bl	8010990 <SDMMC_GetCmdResp1>
 8010598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801059a:	69fb      	ldr	r3, [r7, #28]
}
 801059c:	4618      	mov	r0, r3
 801059e:	3720      	adds	r7, #32
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b088      	sub	sp, #32
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80105b2:	2318      	movs	r3, #24
 80105b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105b6:	2340      	movs	r3, #64	; 0x40
 80105b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105ba:	2300      	movs	r3, #0
 80105bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105c4:	f107 0308 	add.w	r3, r7, #8
 80105c8:	4619      	mov	r1, r3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7ff ff0e 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80105d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80105d4:	2118      	movs	r1, #24
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 f9da 	bl	8010990 <SDMMC_GetCmdResp1>
 80105dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105de:	69fb      	ldr	r3, [r7, #28]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3720      	adds	r7, #32
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b088      	sub	sp, #32
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80105f6:	2319      	movs	r3, #25
 80105f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105fa:	2340      	movs	r3, #64	; 0x40
 80105fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105fe:	2300      	movs	r3, #0
 8010600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010606:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010608:	f107 0308 	add.w	r3, r7, #8
 801060c:	4619      	mov	r1, r3
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f7ff feec 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010614:	f241 3288 	movw	r2, #5000	; 0x1388
 8010618:	2119      	movs	r1, #25
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 f9b8 	bl	8010990 <SDMMC_GetCmdResp1>
 8010620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010622:	69fb      	ldr	r3, [r7, #28]
}
 8010624:	4618      	mov	r0, r3
 8010626:	3720      	adds	r7, #32
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b088      	sub	sp, #32
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010634:	2300      	movs	r3, #0
 8010636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010638:	230c      	movs	r3, #12
 801063a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801063c:	2340      	movs	r3, #64	; 0x40
 801063e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010640:	2300      	movs	r3, #0
 8010642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010648:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801064a:	f107 0308 	add.w	r3, r7, #8
 801064e:	4619      	mov	r1, r3
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7ff fecb 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010656:	4a05      	ldr	r2, [pc, #20]	; (801066c <SDMMC_CmdStopTransfer+0x40>)
 8010658:	210c      	movs	r1, #12
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 f998 	bl	8010990 <SDMMC_GetCmdResp1>
 8010660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010662:	69fb      	ldr	r3, [r7, #28]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3720      	adds	r7, #32
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	05f5e100 	.word	0x05f5e100

08010670 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b08a      	sub	sp, #40	; 0x28
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010680:	2307      	movs	r3, #7
 8010682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010684:	2340      	movs	r3, #64	; 0x40
 8010686:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010688:	2300      	movs	r3, #0
 801068a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801068c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010690:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010692:	f107 0310 	add.w	r3, r7, #16
 8010696:	4619      	mov	r1, r3
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f7ff fea7 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801069e:	f241 3288 	movw	r2, #5000	; 0x1388
 80106a2:	2107      	movs	r1, #7
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f000 f973 	bl	8010990 <SDMMC_GetCmdResp1>
 80106aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80106ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3728      	adds	r7, #40	; 0x28
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b088      	sub	sp, #32
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80106be:	2300      	movs	r3, #0
 80106c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80106c2:	2300      	movs	r3, #0
 80106c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80106c6:	2300      	movs	r3, #0
 80106c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106d4:	f107 0308 	add.w	r3, r7, #8
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7ff fe86 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 f92d 	bl	8010940 <SDMMC_GetCmdError>
 80106e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106e8:	69fb      	ldr	r3, [r7, #28]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3720      	adds	r7, #32
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b088      	sub	sp, #32
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80106fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80106fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010700:	2308      	movs	r3, #8
 8010702:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010704:	2340      	movs	r3, #64	; 0x40
 8010706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010708:	2300      	movs	r3, #0
 801070a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010710:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010712:	f107 0308 	add.w	r3, r7, #8
 8010716:	4619      	mov	r1, r3
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f7ff fe67 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 fb16 	bl	8010d50 <SDMMC_GetCmdResp7>
 8010724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010726:	69fb      	ldr	r3, [r7, #28]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3720      	adds	r7, #32
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b088      	sub	sp, #32
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801073e:	2337      	movs	r3, #55	; 0x37
 8010740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010742:	2340      	movs	r3, #64	; 0x40
 8010744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010746:	2300      	movs	r3, #0
 8010748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801074e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010750:	f107 0308 	add.w	r3, r7, #8
 8010754:	4619      	mov	r1, r3
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7ff fe48 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801075c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010760:	2137      	movs	r1, #55	; 0x37
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 f914 	bl	8010990 <SDMMC_GetCmdResp1>
 8010768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801076a:	69fb      	ldr	r3, [r7, #28]
}
 801076c:	4618      	mov	r0, r3
 801076e:	3720      	adds	r7, #32
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b088      	sub	sp, #32
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801078a:	2329      	movs	r3, #41	; 0x29
 801078c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801078e:	2340      	movs	r3, #64	; 0x40
 8010790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010792:	2300      	movs	r3, #0
 8010794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801079a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801079c:	f107 0308 	add.w	r3, r7, #8
 80107a0:	4619      	mov	r1, r3
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f7ff fe22 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f000 fa23 	bl	8010bf4 <SDMMC_GetCmdResp3>
 80107ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107b0:	69fb      	ldr	r3, [r7, #28]
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3720      	adds	r7, #32
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b088      	sub	sp, #32
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
 80107c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80107c8:	2306      	movs	r3, #6
 80107ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107cc:	2340      	movs	r3, #64	; 0x40
 80107ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107d0:	2300      	movs	r3, #0
 80107d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107da:	f107 0308 	add.w	r3, r7, #8
 80107de:	4619      	mov	r1, r3
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7ff fe03 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80107e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80107ea:	2106      	movs	r1, #6
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f000 f8cf 	bl	8010990 <SDMMC_GetCmdResp1>
 80107f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107f4:	69fb      	ldr	r3, [r7, #28]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3720      	adds	r7, #32
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80107fe:	b580      	push	{r7, lr}
 8010800:	b088      	sub	sp, #32
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010806:	2300      	movs	r3, #0
 8010808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801080a:	2333      	movs	r3, #51	; 0x33
 801080c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801080e:	2340      	movs	r3, #64	; 0x40
 8010810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010812:	2300      	movs	r3, #0
 8010814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801081a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801081c:	f107 0308 	add.w	r3, r7, #8
 8010820:	4619      	mov	r1, r3
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7ff fde2 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010828:	f241 3288 	movw	r2, #5000	; 0x1388
 801082c:	2133      	movs	r1, #51	; 0x33
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f8ae 	bl	8010990 <SDMMC_GetCmdResp1>
 8010834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010836:	69fb      	ldr	r3, [r7, #28]
}
 8010838:	4618      	mov	r0, r3
 801083a:	3720      	adds	r7, #32
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010848:	2300      	movs	r3, #0
 801084a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801084c:	2302      	movs	r3, #2
 801084e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010850:	23c0      	movs	r3, #192	; 0xc0
 8010852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010854:	2300      	movs	r3, #0
 8010856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801085c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801085e:	f107 0308 	add.w	r3, r7, #8
 8010862:	4619      	mov	r1, r3
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f7ff fdc1 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 f97c 	bl	8010b68 <SDMMC_GetCmdResp2>
 8010870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010872:	69fb      	ldr	r3, [r7, #28]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3720      	adds	r7, #32
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b088      	sub	sp, #32
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801088a:	2309      	movs	r3, #9
 801088c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801088e:	23c0      	movs	r3, #192	; 0xc0
 8010890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010892:	2300      	movs	r3, #0
 8010894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801089a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801089c:	f107 0308 	add.w	r3, r7, #8
 80108a0:	4619      	mov	r1, r3
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff fda2 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f000 f95d 	bl	8010b68 <SDMMC_GetCmdResp2>
 80108ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108b0:	69fb      	ldr	r3, [r7, #28]
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3720      	adds	r7, #32
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b088      	sub	sp, #32
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80108c4:	2300      	movs	r3, #0
 80108c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80108c8:	2303      	movs	r3, #3
 80108ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108cc:	2340      	movs	r3, #64	; 0x40
 80108ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108d0:	2300      	movs	r3, #0
 80108d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108da:	f107 0308 	add.w	r3, r7, #8
 80108de:	4619      	mov	r1, r3
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7ff fd83 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80108e6:	683a      	ldr	r2, [r7, #0]
 80108e8:	2103      	movs	r1, #3
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f9bc 	bl	8010c68 <SDMMC_GetCmdResp6>
 80108f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108f2:	69fb      	ldr	r3, [r7, #28]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3720      	adds	r7, #32
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b088      	sub	sp, #32
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801090a:	230d      	movs	r3, #13
 801090c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801090e:	2340      	movs	r3, #64	; 0x40
 8010910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010912:	2300      	movs	r3, #0
 8010914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801091a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801091c:	f107 0308 	add.w	r3, r7, #8
 8010920:	4619      	mov	r1, r3
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7ff fd62 	bl	80103ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010928:	f241 3288 	movw	r2, #5000	; 0x1388
 801092c:	210d      	movs	r1, #13
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f82e 	bl	8010990 <SDMMC_GetCmdResp1>
 8010934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010936:	69fb      	ldr	r3, [r7, #28]
}
 8010938:	4618      	mov	r0, r3
 801093a:	3720      	adds	r7, #32
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010940:	b490      	push	{r4, r7}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010948:	4b0f      	ldr	r3, [pc, #60]	; (8010988 <SDMMC_GetCmdError+0x48>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a0f      	ldr	r2, [pc, #60]	; (801098c <SDMMC_GetCmdError+0x4c>)
 801094e:	fba2 2303 	umull	r2, r3, r2, r3
 8010952:	0a5b      	lsrs	r3, r3, #9
 8010954:	f241 3288 	movw	r2, #5000	; 0x1388
 8010958:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801095c:	4623      	mov	r3, r4
 801095e:	1e5c      	subs	r4, r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	d102      	bne.n	801096a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010968:	e009      	b.n	801097e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010972:	2b00      	cmp	r3, #0
 8010974:	d0f2      	beq.n	801095c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	22c5      	movs	r2, #197	; 0xc5
 801097a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801097c:	2300      	movs	r3, #0
}
 801097e:	4618      	mov	r0, r3
 8010980:	3708      	adds	r7, #8
 8010982:	46bd      	mov	sp, r7
 8010984:	bc90      	pop	{r4, r7}
 8010986:	4770      	bx	lr
 8010988:	20000000 	.word	0x20000000
 801098c:	10624dd3 	.word	0x10624dd3

08010990 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010990:	b590      	push	{r4, r7, lr}
 8010992:	b087      	sub	sp, #28
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	460b      	mov	r3, r1
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801099e:	4b6f      	ldr	r3, [pc, #444]	; (8010b5c <SDMMC_GetCmdResp1+0x1cc>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	4a6f      	ldr	r2, [pc, #444]	; (8010b60 <SDMMC_GetCmdResp1+0x1d0>)
 80109a4:	fba2 2303 	umull	r2, r3, r2, r3
 80109a8:	0a5b      	lsrs	r3, r3, #9
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80109b0:	4623      	mov	r3, r4
 80109b2:	1e5c      	subs	r4, r3, #1
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d102      	bne.n	80109be <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109bc:	e0c9      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d0f0      	beq.n	80109b0 <SDMMC_GetCmdResp1+0x20>
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d1eb      	bne.n	80109b0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109dc:	f003 0304 	and.w	r3, r3, #4
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d004      	beq.n	80109ee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2204      	movs	r2, #4
 80109e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109ea:	2304      	movs	r3, #4
 80109ec:	e0b1      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f2:	f003 0301 	and.w	r3, r3, #1
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d004      	beq.n	8010a04 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2201      	movs	r2, #1
 80109fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a00:	2301      	movs	r3, #1
 8010a02:	e0a6      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	22c5      	movs	r2, #197	; 0xc5
 8010a08:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010a0a:	68f8      	ldr	r0, [r7, #12]
 8010a0c:	f7ff fd18 	bl	8010440 <SDIO_GetCommandResponse>
 8010a10:	4603      	mov	r3, r0
 8010a12:	461a      	mov	r2, r3
 8010a14:	7afb      	ldrb	r3, [r7, #11]
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d001      	beq.n	8010a1e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e099      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010a1e:	2100      	movs	r1, #0
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f7ff fd1a 	bl	801045a <SDIO_GetResponse>
 8010a26:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010a28:	693a      	ldr	r2, [r7, #16]
 8010a2a:	4b4e      	ldr	r3, [pc, #312]	; (8010b64 <SDMMC_GetCmdResp1+0x1d4>)
 8010a2c:	4013      	ands	r3, r2
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d101      	bne.n	8010a36 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010a32:	2300      	movs	r3, #0
 8010a34:	e08d      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	da02      	bge.n	8010a42 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010a40:	e087      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d001      	beq.n	8010a50 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010a4c:	2340      	movs	r3, #64	; 0x40
 8010a4e:	e080      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d001      	beq.n	8010a5e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010a5a:	2380      	movs	r3, #128	; 0x80
 8010a5c:	e079      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d002      	beq.n	8010a6e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a6c:	e071      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d002      	beq.n	8010a7e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a7c:	e069      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d002      	beq.n	8010a8e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a8c:	e061      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d002      	beq.n	8010a9e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a9c:	e059      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d002      	beq.n	8010aae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010aac:	e051      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d002      	beq.n	8010abe <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010abc:	e049      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d002      	beq.n	8010ace <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010acc:	e041      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d002      	beq.n	8010ade <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010adc:	e039      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d002      	beq.n	8010aee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010aec:	e031      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d002      	beq.n	8010afe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010af8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010afc:	e029      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d002      	beq.n	8010b0e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010b08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010b0c:	e021      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010b18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010b1c:	e019      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010b28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010b2c:	e011      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d002      	beq.n	8010b3e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010b38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010b3c:	e009      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	f003 0308 	and.w	r3, r3, #8
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010b48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010b4c:	e001      	b.n	8010b52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	371c      	adds	r7, #28
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd90      	pop	{r4, r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	20000000 	.word	0x20000000
 8010b60:	10624dd3 	.word	0x10624dd3
 8010b64:	fdffe008 	.word	0xfdffe008

08010b68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010b68:	b490      	push	{r4, r7}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b70:	4b1e      	ldr	r3, [pc, #120]	; (8010bec <SDMMC_GetCmdResp2+0x84>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a1e      	ldr	r2, [pc, #120]	; (8010bf0 <SDMMC_GetCmdResp2+0x88>)
 8010b76:	fba2 2303 	umull	r2, r3, r2, r3
 8010b7a:	0a5b      	lsrs	r3, r3, #9
 8010b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b84:	4623      	mov	r3, r4
 8010b86:	1e5c      	subs	r4, r3, #1
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d102      	bne.n	8010b92 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b90:	e026      	b.n	8010be0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d0f0      	beq.n	8010b84 <SDMMC_GetCmdResp2+0x1c>
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d1eb      	bne.n	8010b84 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bb0:	f003 0304 	and.w	r3, r3, #4
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d004      	beq.n	8010bc2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2204      	movs	r2, #4
 8010bbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bbe:	2304      	movs	r3, #4
 8010bc0:	e00e      	b.n	8010be0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc6:	f003 0301 	and.w	r3, r3, #1
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d004      	beq.n	8010bd8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	e003      	b.n	8010be0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	22c5      	movs	r2, #197	; 0xc5
 8010bdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3710      	adds	r7, #16
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bc90      	pop	{r4, r7}
 8010be8:	4770      	bx	lr
 8010bea:	bf00      	nop
 8010bec:	20000000 	.word	0x20000000
 8010bf0:	10624dd3 	.word	0x10624dd3

08010bf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010bf4:	b490      	push	{r4, r7}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010bfc:	4b18      	ldr	r3, [pc, #96]	; (8010c60 <SDMMC_GetCmdResp3+0x6c>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a18      	ldr	r2, [pc, #96]	; (8010c64 <SDMMC_GetCmdResp3+0x70>)
 8010c02:	fba2 2303 	umull	r2, r3, r2, r3
 8010c06:	0a5b      	lsrs	r3, r3, #9
 8010c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010c10:	4623      	mov	r3, r4
 8010c12:	1e5c      	subs	r4, r3, #1
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d102      	bne.n	8010c1e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c1c:	e01b      	b.n	8010c56 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d0f0      	beq.n	8010c10 <SDMMC_GetCmdResp3+0x1c>
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1eb      	bne.n	8010c10 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c3c:	f003 0304 	and.w	r3, r3, #4
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d004      	beq.n	8010c4e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2204      	movs	r2, #4
 8010c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c4a:	2304      	movs	r3, #4
 8010c4c:	e003      	b.n	8010c56 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	22c5      	movs	r2, #197	; 0xc5
 8010c52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010c54:	2300      	movs	r3, #0
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3710      	adds	r7, #16
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bc90      	pop	{r4, r7}
 8010c5e:	4770      	bx	lr
 8010c60:	20000000 	.word	0x20000000
 8010c64:	10624dd3 	.word	0x10624dd3

08010c68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010c68:	b590      	push	{r4, r7, lr}
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	460b      	mov	r3, r1
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c76:	4b34      	ldr	r3, [pc, #208]	; (8010d48 <SDMMC_GetCmdResp6+0xe0>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	4a34      	ldr	r2, [pc, #208]	; (8010d4c <SDMMC_GetCmdResp6+0xe4>)
 8010c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8010c80:	0a5b      	lsrs	r3, r3, #9
 8010c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c86:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010c8a:	4623      	mov	r3, r4
 8010c8c:	1e5c      	subs	r4, r3, #1
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d102      	bne.n	8010c98 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c96:	e052      	b.n	8010d3e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c9c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d0f0      	beq.n	8010c8a <SDMMC_GetCmdResp6+0x22>
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1eb      	bne.n	8010c8a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cb6:	f003 0304 	and.w	r3, r3, #4
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d004      	beq.n	8010cc8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2204      	movs	r2, #4
 8010cc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010cc4:	2304      	movs	r3, #4
 8010cc6:	e03a      	b.n	8010d3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ccc:	f003 0301 	and.w	r3, r3, #1
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d004      	beq.n	8010cde <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e02f      	b.n	8010d3e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010cde:	68f8      	ldr	r0, [r7, #12]
 8010ce0:	f7ff fbae 	bl	8010440 <SDIO_GetCommandResponse>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	7afb      	ldrb	r3, [r7, #11]
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d001      	beq.n	8010cf2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e025      	b.n	8010d3e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	22c5      	movs	r2, #197	; 0xc5
 8010cf6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f7ff fbad 	bl	801045a <SDIO_GetResponse>
 8010d00:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d106      	bne.n	8010d1a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	0c1b      	lsrs	r3, r3, #16
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010d16:	2300      	movs	r3, #0
 8010d18:	e011      	b.n	8010d3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d002      	beq.n	8010d2a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d28:	e009      	b.n	8010d3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d38:	e001      	b.n	8010d3e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	371c      	adds	r7, #28
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd90      	pop	{r4, r7, pc}
 8010d46:	bf00      	nop
 8010d48:	20000000 	.word	0x20000000
 8010d4c:	10624dd3 	.word	0x10624dd3

08010d50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010d50:	b490      	push	{r4, r7}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d58:	4b21      	ldr	r3, [pc, #132]	; (8010de0 <SDMMC_GetCmdResp7+0x90>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4a21      	ldr	r2, [pc, #132]	; (8010de4 <SDMMC_GetCmdResp7+0x94>)
 8010d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8010d62:	0a5b      	lsrs	r3, r3, #9
 8010d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d6c:	4623      	mov	r3, r4
 8010d6e:	1e5c      	subs	r4, r3, #1
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d102      	bne.n	8010d7a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d78:	e02c      	b.n	8010dd4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d0f0      	beq.n	8010d6c <SDMMC_GetCmdResp7+0x1c>
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d1eb      	bne.n	8010d6c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d98:	f003 0304 	and.w	r3, r3, #4
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d004      	beq.n	8010daa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2204      	movs	r2, #4
 8010da4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010da6:	2304      	movs	r3, #4
 8010da8:	e014      	b.n	8010dd4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dae:	f003 0301 	and.w	r3, r3, #1
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d004      	beq.n	8010dc0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2201      	movs	r2, #1
 8010dba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	e009      	b.n	8010dd4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2240      	movs	r2, #64	; 0x40
 8010dd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010dd2:	2300      	movs	r3, #0
  
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3710      	adds	r7, #16
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bc90      	pop	{r4, r7}
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	20000000 	.word	0x20000000
 8010de4:	10624dd3 	.word	0x10624dd3

08010de8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010dec:	4904      	ldr	r1, [pc, #16]	; (8010e00 <MX_FATFS_Init+0x18>)
 8010dee:	4805      	ldr	r0, [pc, #20]	; (8010e04 <MX_FATFS_Init+0x1c>)
 8010df0:	f003 fb9c 	bl	801452c <FATFS_LinkDriver>
 8010df4:	4603      	mov	r3, r0
 8010df6:	461a      	mov	r2, r3
 8010df8:	4b03      	ldr	r3, [pc, #12]	; (8010e08 <MX_FATFS_Init+0x20>)
 8010dfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010dfc:	bf00      	nop
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	2004ab00 	.word	0x2004ab00
 8010e04:	08018de8 	.word	0x08018de8
 8010e08:	2004aafc 	.word	0x2004aafc

08010e0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010e12:	2300      	movs	r3, #0
 8010e14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010e16:	f000 f896 	bl	8010f46 <BSP_SD_IsDetected>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d001      	beq.n	8010e24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	e012      	b.n	8010e4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010e24:	480b      	ldr	r0, [pc, #44]	; (8010e54 <BSP_SD_Init+0x48>)
 8010e26:	f7fb ffa5 	bl	800cd74 <HAL_SD_Init>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010e2e:	79fb      	ldrb	r3, [r7, #7]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d109      	bne.n	8010e48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010e38:	4806      	ldr	r0, [pc, #24]	; (8010e54 <BSP_SD_Init+0x48>)
 8010e3a:	f7fc fd4f 	bl	800d8dc <HAL_SD_ConfigWideBusOperation>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d001      	beq.n	8010e48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010e44:	2301      	movs	r3, #1
 8010e46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010e48:	79fb      	ldrb	r3, [r7, #7]
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3708      	adds	r7, #8
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	2004a8fc 	.word	0x2004a8fc

08010e58 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b086      	sub	sp, #24
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010e64:	2300      	movs	r3, #0
 8010e66:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	68f9      	ldr	r1, [r7, #12]
 8010e6e:	4806      	ldr	r0, [pc, #24]	; (8010e88 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010e70:	f7fc f810 	bl	800ce94 <HAL_SD_ReadBlocks_DMA>
 8010e74:	4603      	mov	r3, r0
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d001      	beq.n	8010e7e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3718      	adds	r7, #24
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	2004a8fc 	.word	0x2004a8fc

08010e8c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	60f8      	str	r0, [r7, #12]
 8010e94:	60b9      	str	r1, [r7, #8]
 8010e96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	68ba      	ldr	r2, [r7, #8]
 8010ea0:	68f9      	ldr	r1, [r7, #12]
 8010ea2:	4806      	ldr	r0, [pc, #24]	; (8010ebc <BSP_SD_WriteBlocks_DMA+0x30>)
 8010ea4:	f7fc f8de 	bl	800d064 <HAL_SD_WriteBlocks_DMA>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d001      	beq.n	8010eb2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3718      	adds	r7, #24
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	2004a8fc 	.word	0x2004a8fc

08010ec0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010ec4:	4805      	ldr	r0, [pc, #20]	; (8010edc <BSP_SD_GetCardState+0x1c>)
 8010ec6:	f7fc fd85 	bl	800d9d4 <HAL_SD_GetCardState>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b04      	cmp	r3, #4
 8010ece:	bf14      	ite	ne
 8010ed0:	2301      	movne	r3, #1
 8010ed2:	2300      	moveq	r3, #0
 8010ed4:	b2db      	uxtb	r3, r3
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	2004a8fc 	.word	0x2004a8fc

08010ee0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010ee8:	6879      	ldr	r1, [r7, #4]
 8010eea:	4803      	ldr	r0, [pc, #12]	; (8010ef8 <BSP_SD_GetCardInfo+0x18>)
 8010eec:	f7fc fcca 	bl	800d884 <HAL_SD_GetCardInfo>
}
 8010ef0:	bf00      	nop
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}
 8010ef8:	2004a8fc 	.word	0x2004a8fc

08010efc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b082      	sub	sp, #8
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010f04:	f000 f818 	bl	8010f38 <BSP_SD_AbortCallback>
}
 8010f08:	bf00      	nop
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010f18:	f000 f9a8 	bl	801126c <BSP_SD_WriteCpltCallback>
}
 8010f1c:	bf00      	nop
 8010f1e:	3708      	adds	r7, #8
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010f2c:	f000 f9aa 	bl	8011284 <BSP_SD_ReadCpltCallback>
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	af00      	add	r7, sp, #0

}
 8010f3c:	bf00      	nop
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b082      	sub	sp, #8
 8010f4a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010f50:	f000 f80c 	bl	8010f6c <BSP_PlatformIsDetected>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d101      	bne.n	8010f5e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010f5e:	79fb      	ldrb	r3, [r7, #7]
 8010f60:	b2db      	uxtb	r3, r3
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3708      	adds	r7, #8
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
	...

08010f6c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010f72:	2301      	movs	r3, #1
 8010f74:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010f7a:	4806      	ldr	r0, [pc, #24]	; (8010f94 <BSP_PlatformIsDetected+0x28>)
 8010f7c:	f7fa f87e 	bl	800b07c <HAL_GPIO_ReadPin>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d001      	beq.n	8010f8a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010f86:	2300      	movs	r3, #0
 8010f88:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	40020000 	.word	0x40020000

08010f98 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010fa0:	f7f8 fde2 	bl	8009b68 <HAL_GetTick>
 8010fa4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010fa6:	e006      	b.n	8010fb6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010fa8:	f7ff ff8a 	bl	8010ec0 <BSP_SD_GetCardState>
 8010fac:	4603      	mov	r3, r0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d101      	bne.n	8010fb6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e009      	b.n	8010fca <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010fb6:	f7f8 fdd7 	bl	8009b68 <HAL_GetTick>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d8f0      	bhi.n	8010fa8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
	...

08010fd4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	4603      	mov	r3, r0
 8010fdc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010fde:	4b0b      	ldr	r3, [pc, #44]	; (801100c <SD_CheckStatus+0x38>)
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010fe4:	f7ff ff6c 	bl	8010ec0 <BSP_SD_GetCardState>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d107      	bne.n	8010ffe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010fee:	4b07      	ldr	r3, [pc, #28]	; (801100c <SD_CheckStatus+0x38>)
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	f023 0301 	bic.w	r3, r3, #1
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	4b04      	ldr	r3, [pc, #16]	; (801100c <SD_CheckStatus+0x38>)
 8010ffc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010ffe:	4b03      	ldr	r3, [pc, #12]	; (801100c <SD_CheckStatus+0x38>)
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	b2db      	uxtb	r3, r3
}
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	20000009 	.word	0x20000009

08011010 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	4603      	mov	r3, r0
 8011018:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801101a:	f7ff fef7 	bl	8010e0c <BSP_SD_Init>
 801101e:	4603      	mov	r3, r0
 8011020:	2b00      	cmp	r3, #0
 8011022:	d107      	bne.n	8011034 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011024:	79fb      	ldrb	r3, [r7, #7]
 8011026:	4618      	mov	r0, r3
 8011028:	f7ff ffd4 	bl	8010fd4 <SD_CheckStatus>
 801102c:	4603      	mov	r3, r0
 801102e:	461a      	mov	r2, r3
 8011030:	4b04      	ldr	r3, [pc, #16]	; (8011044 <SD_initialize+0x34>)
 8011032:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011034:	4b03      	ldr	r3, [pc, #12]	; (8011044 <SD_initialize+0x34>)
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	b2db      	uxtb	r3, r3
}
 801103a:	4618      	mov	r0, r3
 801103c:	3708      	adds	r7, #8
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	20000009 	.word	0x20000009

08011048 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	4603      	mov	r3, r0
 8011050:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011052:	79fb      	ldrb	r3, [r7, #7]
 8011054:	4618      	mov	r0, r3
 8011056:	f7ff ffbd 	bl	8010fd4 <SD_CheckStatus>
 801105a:	4603      	mov	r3, r0
}
 801105c:	4618      	mov	r0, r3
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	60b9      	str	r1, [r7, #8]
 801106c:	607a      	str	r2, [r7, #4]
 801106e:	603b      	str	r3, [r7, #0]
 8011070:	4603      	mov	r3, r0
 8011072:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011074:	2301      	movs	r3, #1
 8011076:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011078:	f247 5030 	movw	r0, #30000	; 0x7530
 801107c:	f7ff ff8c 	bl	8010f98 <SD_CheckStatusWithTimeout>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	da01      	bge.n	801108a <SD_read+0x26>
  {
    return res;
 8011086:	7dfb      	ldrb	r3, [r7, #23]
 8011088:	e03b      	b.n	8011102 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801108a:	683a      	ldr	r2, [r7, #0]
 801108c:	6879      	ldr	r1, [r7, #4]
 801108e:	68b8      	ldr	r0, [r7, #8]
 8011090:	f7ff fee2 	bl	8010e58 <BSP_SD_ReadBlocks_DMA>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d132      	bne.n	8011100 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801109a:	4b1c      	ldr	r3, [pc, #112]	; (801110c <SD_read+0xa8>)
 801109c:	2200      	movs	r2, #0
 801109e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80110a0:	f7f8 fd62 	bl	8009b68 <HAL_GetTick>
 80110a4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80110a6:	bf00      	nop
 80110a8:	4b18      	ldr	r3, [pc, #96]	; (801110c <SD_read+0xa8>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d108      	bne.n	80110c2 <SD_read+0x5e>
 80110b0:	f7f8 fd5a 	bl	8009b68 <HAL_GetTick>
 80110b4:	4602      	mov	r2, r0
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	1ad3      	subs	r3, r2, r3
 80110ba:	f247 522f 	movw	r2, #29999	; 0x752f
 80110be:	4293      	cmp	r3, r2
 80110c0:	d9f2      	bls.n	80110a8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80110c2:	4b12      	ldr	r3, [pc, #72]	; (801110c <SD_read+0xa8>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d102      	bne.n	80110d0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80110ca:	2301      	movs	r3, #1
 80110cc:	75fb      	strb	r3, [r7, #23]
 80110ce:	e017      	b.n	8011100 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80110d0:	4b0e      	ldr	r3, [pc, #56]	; (801110c <SD_read+0xa8>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80110d6:	f7f8 fd47 	bl	8009b68 <HAL_GetTick>
 80110da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80110dc:	e007      	b.n	80110ee <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80110de:	f7ff feef 	bl	8010ec0 <BSP_SD_GetCardState>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d102      	bne.n	80110ee <SD_read+0x8a>
          {
            res = RES_OK;
 80110e8:	2300      	movs	r3, #0
 80110ea:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80110ec:	e008      	b.n	8011100 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80110ee:	f7f8 fd3b 	bl	8009b68 <HAL_GetTick>
 80110f2:	4602      	mov	r2, r0
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	1ad3      	subs	r3, r2, r3
 80110f8:	f247 522f 	movw	r2, #29999	; 0x752f
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d9ee      	bls.n	80110de <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011100:	7dfb      	ldrb	r3, [r7, #23]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	20048198 	.word	0x20048198

08011110 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	60b9      	str	r1, [r7, #8]
 8011118:	607a      	str	r2, [r7, #4]
 801111a:	603b      	str	r3, [r7, #0]
 801111c:	4603      	mov	r3, r0
 801111e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011120:	2301      	movs	r3, #1
 8011122:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011124:	4b24      	ldr	r3, [pc, #144]	; (80111b8 <SD_write+0xa8>)
 8011126:	2200      	movs	r2, #0
 8011128:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801112a:	f247 5030 	movw	r0, #30000	; 0x7530
 801112e:	f7ff ff33 	bl	8010f98 <SD_CheckStatusWithTimeout>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	da01      	bge.n	801113c <SD_write+0x2c>
  {
    return res;
 8011138:	7dfb      	ldrb	r3, [r7, #23]
 801113a:	e038      	b.n	80111ae <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	6879      	ldr	r1, [r7, #4]
 8011140:	68b8      	ldr	r0, [r7, #8]
 8011142:	f7ff fea3 	bl	8010e8c <BSP_SD_WriteBlocks_DMA>
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d12f      	bne.n	80111ac <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801114c:	f7f8 fd0c 	bl	8009b68 <HAL_GetTick>
 8011150:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011152:	bf00      	nop
 8011154:	4b18      	ldr	r3, [pc, #96]	; (80111b8 <SD_write+0xa8>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d108      	bne.n	801116e <SD_write+0x5e>
 801115c:	f7f8 fd04 	bl	8009b68 <HAL_GetTick>
 8011160:	4602      	mov	r2, r0
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	1ad3      	subs	r3, r2, r3
 8011166:	f247 522f 	movw	r2, #29999	; 0x752f
 801116a:	4293      	cmp	r3, r2
 801116c:	d9f2      	bls.n	8011154 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801116e:	4b12      	ldr	r3, [pc, #72]	; (80111b8 <SD_write+0xa8>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d102      	bne.n	801117c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011176:	2301      	movs	r3, #1
 8011178:	75fb      	strb	r3, [r7, #23]
 801117a:	e017      	b.n	80111ac <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801117c:	4b0e      	ldr	r3, [pc, #56]	; (80111b8 <SD_write+0xa8>)
 801117e:	2200      	movs	r2, #0
 8011180:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011182:	f7f8 fcf1 	bl	8009b68 <HAL_GetTick>
 8011186:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011188:	e007      	b.n	801119a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801118a:	f7ff fe99 	bl	8010ec0 <BSP_SD_GetCardState>
 801118e:	4603      	mov	r3, r0
 8011190:	2b00      	cmp	r3, #0
 8011192:	d102      	bne.n	801119a <SD_write+0x8a>
          {
            res = RES_OK;
 8011194:	2300      	movs	r3, #0
 8011196:	75fb      	strb	r3, [r7, #23]
            break;
 8011198:	e008      	b.n	80111ac <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801119a:	f7f8 fce5 	bl	8009b68 <HAL_GetTick>
 801119e:	4602      	mov	r2, r0
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d9ee      	bls.n	801118a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80111ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3718      	adds	r7, #24
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	20048194 	.word	0x20048194

080111bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b08c      	sub	sp, #48	; 0x30
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	4603      	mov	r3, r0
 80111c4:	603a      	str	r2, [r7, #0]
 80111c6:	71fb      	strb	r3, [r7, #7]
 80111c8:	460b      	mov	r3, r1
 80111ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80111cc:	2301      	movs	r3, #1
 80111ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80111d2:	4b25      	ldr	r3, [pc, #148]	; (8011268 <SD_ioctl+0xac>)
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	f003 0301 	and.w	r3, r3, #1
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d001      	beq.n	80111e4 <SD_ioctl+0x28>
 80111e0:	2303      	movs	r3, #3
 80111e2:	e03c      	b.n	801125e <SD_ioctl+0xa2>

  switch (cmd)
 80111e4:	79bb      	ldrb	r3, [r7, #6]
 80111e6:	2b03      	cmp	r3, #3
 80111e8:	d834      	bhi.n	8011254 <SD_ioctl+0x98>
 80111ea:	a201      	add	r2, pc, #4	; (adr r2, 80111f0 <SD_ioctl+0x34>)
 80111ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111f0:	08011201 	.word	0x08011201
 80111f4:	08011209 	.word	0x08011209
 80111f8:	08011221 	.word	0x08011221
 80111fc:	0801123b 	.word	0x0801123b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011200:	2300      	movs	r3, #0
 8011202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011206:	e028      	b.n	801125a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011208:	f107 030c 	add.w	r3, r7, #12
 801120c:	4618      	mov	r0, r3
 801120e:	f7ff fe67 	bl	8010ee0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011218:	2300      	movs	r3, #0
 801121a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801121e:	e01c      	b.n	801125a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011220:	f107 030c 	add.w	r3, r7, #12
 8011224:	4618      	mov	r0, r3
 8011226:	f7ff fe5b 	bl	8010ee0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122c:	b29a      	uxth	r2, r3
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011238:	e00f      	b.n	801125a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801123a:	f107 030c 	add.w	r3, r7, #12
 801123e:	4618      	mov	r0, r3
 8011240:	f7ff fe4e 	bl	8010ee0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011246:	0a5a      	lsrs	r2, r3, #9
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801124c:	2300      	movs	r3, #0
 801124e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011252:	e002      	b.n	801125a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011254:	2304      	movs	r3, #4
 8011256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801125a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801125e:	4618      	mov	r0, r3
 8011260:	3730      	adds	r7, #48	; 0x30
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	20000009 	.word	0x20000009

0801126c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801126c:	b480      	push	{r7}
 801126e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011270:	4b03      	ldr	r3, [pc, #12]	; (8011280 <BSP_SD_WriteCpltCallback+0x14>)
 8011272:	2201      	movs	r2, #1
 8011274:	601a      	str	r2, [r3, #0]
}
 8011276:	bf00      	nop
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr
 8011280:	20048194 	.word	0x20048194

08011284 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011284:	b480      	push	{r7}
 8011286:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011288:	4b03      	ldr	r3, [pc, #12]	; (8011298 <BSP_SD_ReadCpltCallback+0x14>)
 801128a:	2201      	movs	r2, #1
 801128c:	601a      	str	r2, [r3, #0]
}
 801128e:	bf00      	nop
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr
 8011298:	20048198 	.word	0x20048198

0801129c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	4603      	mov	r3, r0
 80112a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80112a6:	79fb      	ldrb	r3, [r7, #7]
 80112a8:	4a08      	ldr	r2, [pc, #32]	; (80112cc <disk_status+0x30>)
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	4413      	add	r3, r2
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	79fa      	ldrb	r2, [r7, #7]
 80112b4:	4905      	ldr	r1, [pc, #20]	; (80112cc <disk_status+0x30>)
 80112b6:	440a      	add	r2, r1
 80112b8:	7a12      	ldrb	r2, [r2, #8]
 80112ba:	4610      	mov	r0, r2
 80112bc:	4798      	blx	r3
 80112be:	4603      	mov	r3, r0
 80112c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80112c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3710      	adds	r7, #16
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	200481c4 	.word	0x200481c4

080112d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	4603      	mov	r3, r0
 80112d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80112da:	2300      	movs	r3, #0
 80112dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80112de:	79fb      	ldrb	r3, [r7, #7]
 80112e0:	4a0d      	ldr	r2, [pc, #52]	; (8011318 <disk_initialize+0x48>)
 80112e2:	5cd3      	ldrb	r3, [r2, r3]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d111      	bne.n	801130c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80112e8:	79fb      	ldrb	r3, [r7, #7]
 80112ea:	4a0b      	ldr	r2, [pc, #44]	; (8011318 <disk_initialize+0x48>)
 80112ec:	2101      	movs	r1, #1
 80112ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80112f0:	79fb      	ldrb	r3, [r7, #7]
 80112f2:	4a09      	ldr	r2, [pc, #36]	; (8011318 <disk_initialize+0x48>)
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4413      	add	r3, r2
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	79fa      	ldrb	r2, [r7, #7]
 80112fe:	4906      	ldr	r1, [pc, #24]	; (8011318 <disk_initialize+0x48>)
 8011300:	440a      	add	r2, r1
 8011302:	7a12      	ldrb	r2, [r2, #8]
 8011304:	4610      	mov	r0, r2
 8011306:	4798      	blx	r3
 8011308:	4603      	mov	r3, r0
 801130a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801130c:	7bfb      	ldrb	r3, [r7, #15]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	200481c4 	.word	0x200481c4

0801131c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801131c:	b590      	push	{r4, r7, lr}
 801131e:	b087      	sub	sp, #28
 8011320:	af00      	add	r7, sp, #0
 8011322:	60b9      	str	r1, [r7, #8]
 8011324:	607a      	str	r2, [r7, #4]
 8011326:	603b      	str	r3, [r7, #0]
 8011328:	4603      	mov	r3, r0
 801132a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801132c:	7bfb      	ldrb	r3, [r7, #15]
 801132e:	4a0a      	ldr	r2, [pc, #40]	; (8011358 <disk_read+0x3c>)
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	4413      	add	r3, r2
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	689c      	ldr	r4, [r3, #8]
 8011338:	7bfb      	ldrb	r3, [r7, #15]
 801133a:	4a07      	ldr	r2, [pc, #28]	; (8011358 <disk_read+0x3c>)
 801133c:	4413      	add	r3, r2
 801133e:	7a18      	ldrb	r0, [r3, #8]
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	68b9      	ldr	r1, [r7, #8]
 8011346:	47a0      	blx	r4
 8011348:	4603      	mov	r3, r0
 801134a:	75fb      	strb	r3, [r7, #23]
  return res;
 801134c:	7dfb      	ldrb	r3, [r7, #23]
}
 801134e:	4618      	mov	r0, r3
 8011350:	371c      	adds	r7, #28
 8011352:	46bd      	mov	sp, r7
 8011354:	bd90      	pop	{r4, r7, pc}
 8011356:	bf00      	nop
 8011358:	200481c4 	.word	0x200481c4

0801135c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801135c:	b590      	push	{r4, r7, lr}
 801135e:	b087      	sub	sp, #28
 8011360:	af00      	add	r7, sp, #0
 8011362:	60b9      	str	r1, [r7, #8]
 8011364:	607a      	str	r2, [r7, #4]
 8011366:	603b      	str	r3, [r7, #0]
 8011368:	4603      	mov	r3, r0
 801136a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801136c:	7bfb      	ldrb	r3, [r7, #15]
 801136e:	4a0a      	ldr	r2, [pc, #40]	; (8011398 <disk_write+0x3c>)
 8011370:	009b      	lsls	r3, r3, #2
 8011372:	4413      	add	r3, r2
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	68dc      	ldr	r4, [r3, #12]
 8011378:	7bfb      	ldrb	r3, [r7, #15]
 801137a:	4a07      	ldr	r2, [pc, #28]	; (8011398 <disk_write+0x3c>)
 801137c:	4413      	add	r3, r2
 801137e:	7a18      	ldrb	r0, [r3, #8]
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	68b9      	ldr	r1, [r7, #8]
 8011386:	47a0      	blx	r4
 8011388:	4603      	mov	r3, r0
 801138a:	75fb      	strb	r3, [r7, #23]
  return res;
 801138c:	7dfb      	ldrb	r3, [r7, #23]
}
 801138e:	4618      	mov	r0, r3
 8011390:	371c      	adds	r7, #28
 8011392:	46bd      	mov	sp, r7
 8011394:	bd90      	pop	{r4, r7, pc}
 8011396:	bf00      	nop
 8011398:	200481c4 	.word	0x200481c4

0801139c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	4603      	mov	r3, r0
 80113a4:	603a      	str	r2, [r7, #0]
 80113a6:	71fb      	strb	r3, [r7, #7]
 80113a8:	460b      	mov	r3, r1
 80113aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80113ac:	79fb      	ldrb	r3, [r7, #7]
 80113ae:	4a09      	ldr	r2, [pc, #36]	; (80113d4 <disk_ioctl+0x38>)
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	4413      	add	r3, r2
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	79fa      	ldrb	r2, [r7, #7]
 80113ba:	4906      	ldr	r1, [pc, #24]	; (80113d4 <disk_ioctl+0x38>)
 80113bc:	440a      	add	r2, r1
 80113be:	7a10      	ldrb	r0, [r2, #8]
 80113c0:	79b9      	ldrb	r1, [r7, #6]
 80113c2:	683a      	ldr	r2, [r7, #0]
 80113c4:	4798      	blx	r3
 80113c6:	4603      	mov	r3, r0
 80113c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80113ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3710      	adds	r7, #16
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	200481c4 	.word	0x200481c4

080113d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80113d8:	b480      	push	{r7}
 80113da:	b085      	sub	sp, #20
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	3301      	adds	r3, #1
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80113e8:	89fb      	ldrh	r3, [r7, #14]
 80113ea:	021b      	lsls	r3, r3, #8
 80113ec:	b21a      	sxth	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	b21b      	sxth	r3, r3
 80113f4:	4313      	orrs	r3, r2
 80113f6:	b21b      	sxth	r3, r3
 80113f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80113fa:	89fb      	ldrh	r3, [r7, #14]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3714      	adds	r7, #20
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	3303      	adds	r3, #3
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	021b      	lsls	r3, r3, #8
 801141c:	687a      	ldr	r2, [r7, #4]
 801141e:	3202      	adds	r2, #2
 8011420:	7812      	ldrb	r2, [r2, #0]
 8011422:	4313      	orrs	r3, r2
 8011424:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	021b      	lsls	r3, r3, #8
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	3201      	adds	r2, #1
 801142e:	7812      	ldrb	r2, [r2, #0]
 8011430:	4313      	orrs	r3, r2
 8011432:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	021b      	lsls	r3, r3, #8
 8011438:	687a      	ldr	r2, [r7, #4]
 801143a:	7812      	ldrb	r2, [r2, #0]
 801143c:	4313      	orrs	r3, r2
 801143e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011440:	68fb      	ldr	r3, [r7, #12]
}
 8011442:	4618      	mov	r0, r3
 8011444:	3714      	adds	r7, #20
 8011446:	46bd      	mov	sp, r7
 8011448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144c:	4770      	bx	lr

0801144e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801144e:	b480      	push	{r7}
 8011450:	b083      	sub	sp, #12
 8011452:	af00      	add	r7, sp, #0
 8011454:	6078      	str	r0, [r7, #4]
 8011456:	460b      	mov	r3, r1
 8011458:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	1c5a      	adds	r2, r3, #1
 801145e:	607a      	str	r2, [r7, #4]
 8011460:	887a      	ldrh	r2, [r7, #2]
 8011462:	b2d2      	uxtb	r2, r2
 8011464:	701a      	strb	r2, [r3, #0]
 8011466:	887b      	ldrh	r3, [r7, #2]
 8011468:	0a1b      	lsrs	r3, r3, #8
 801146a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	1c5a      	adds	r2, r3, #1
 8011470:	607a      	str	r2, [r7, #4]
 8011472:	887a      	ldrh	r2, [r7, #2]
 8011474:	b2d2      	uxtb	r2, r2
 8011476:	701a      	strb	r2, [r3, #0]
}
 8011478:	bf00      	nop
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr

08011484 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	1c5a      	adds	r2, r3, #1
 8011492:	607a      	str	r2, [r7, #4]
 8011494:	683a      	ldr	r2, [r7, #0]
 8011496:	b2d2      	uxtb	r2, r2
 8011498:	701a      	strb	r2, [r3, #0]
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	0a1b      	lsrs	r3, r3, #8
 801149e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	1c5a      	adds	r2, r3, #1
 80114a4:	607a      	str	r2, [r7, #4]
 80114a6:	683a      	ldr	r2, [r7, #0]
 80114a8:	b2d2      	uxtb	r2, r2
 80114aa:	701a      	strb	r2, [r3, #0]
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	0a1b      	lsrs	r3, r3, #8
 80114b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	1c5a      	adds	r2, r3, #1
 80114b6:	607a      	str	r2, [r7, #4]
 80114b8:	683a      	ldr	r2, [r7, #0]
 80114ba:	b2d2      	uxtb	r2, r2
 80114bc:	701a      	strb	r2, [r3, #0]
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	0a1b      	lsrs	r3, r3, #8
 80114c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	1c5a      	adds	r2, r3, #1
 80114c8:	607a      	str	r2, [r7, #4]
 80114ca:	683a      	ldr	r2, [r7, #0]
 80114cc:	b2d2      	uxtb	r2, r2
 80114ce:	701a      	strb	r2, [r3, #0]
}
 80114d0:	bf00      	nop
 80114d2:	370c      	adds	r7, #12
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80114dc:	b480      	push	{r7}
 80114de:	b087      	sub	sp, #28
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00d      	beq.n	8011512 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80114f6:	693a      	ldr	r2, [r7, #16]
 80114f8:	1c53      	adds	r3, r2, #1
 80114fa:	613b      	str	r3, [r7, #16]
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	1c59      	adds	r1, r3, #1
 8011500:	6179      	str	r1, [r7, #20]
 8011502:	7812      	ldrb	r2, [r2, #0]
 8011504:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	3b01      	subs	r3, #1
 801150a:	607b      	str	r3, [r7, #4]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1f1      	bne.n	80114f6 <mem_cpy+0x1a>
	}
}
 8011512:	bf00      	nop
 8011514:	371c      	adds	r7, #28
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801151e:	b480      	push	{r7}
 8011520:	b087      	sub	sp, #28
 8011522:	af00      	add	r7, sp, #0
 8011524:	60f8      	str	r0, [r7, #12]
 8011526:	60b9      	str	r1, [r7, #8]
 8011528:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	1c5a      	adds	r2, r3, #1
 8011532:	617a      	str	r2, [r7, #20]
 8011534:	68ba      	ldr	r2, [r7, #8]
 8011536:	b2d2      	uxtb	r2, r2
 8011538:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	3b01      	subs	r3, #1
 801153e:	607b      	str	r3, [r7, #4]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d1f3      	bne.n	801152e <mem_set+0x10>
}
 8011546:	bf00      	nop
 8011548:	371c      	adds	r7, #28
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr

08011552 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011552:	b480      	push	{r7}
 8011554:	b089      	sub	sp, #36	; 0x24
 8011556:	af00      	add	r7, sp, #0
 8011558:	60f8      	str	r0, [r7, #12]
 801155a:	60b9      	str	r1, [r7, #8]
 801155c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	61fb      	str	r3, [r7, #28]
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011566:	2300      	movs	r3, #0
 8011568:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	1c5a      	adds	r2, r3, #1
 801156e:	61fa      	str	r2, [r7, #28]
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	4619      	mov	r1, r3
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	1c5a      	adds	r2, r3, #1
 8011578:	61ba      	str	r2, [r7, #24]
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	1acb      	subs	r3, r1, r3
 801157e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	3b01      	subs	r3, #1
 8011584:	607b      	str	r3, [r7, #4]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d002      	beq.n	8011592 <mem_cmp+0x40>
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d0eb      	beq.n	801156a <mem_cmp+0x18>

	return r;
 8011592:	697b      	ldr	r3, [r7, #20]
}
 8011594:	4618      	mov	r0, r3
 8011596:	3724      	adds	r7, #36	; 0x24
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80115aa:	e002      	b.n	80115b2 <chk_chr+0x12>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	3301      	adds	r3, #1
 80115b0:	607b      	str	r3, [r7, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d005      	beq.n	80115c6 <chk_chr+0x26>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	461a      	mov	r2, r3
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d1f2      	bne.n	80115ac <chk_chr+0xc>
	return *str;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	781b      	ldrb	r3, [r3, #0]
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	370c      	adds	r7, #12
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr
	...

080115d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80115d8:	b480      	push	{r7}
 80115da:	b085      	sub	sp, #20
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80115e2:	2300      	movs	r3, #0
 80115e4:	60bb      	str	r3, [r7, #8]
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	60fb      	str	r3, [r7, #12]
 80115ea:	e029      	b.n	8011640 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80115ec:	4a27      	ldr	r2, [pc, #156]	; (801168c <chk_lock+0xb4>)
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	011b      	lsls	r3, r3, #4
 80115f2:	4413      	add	r3, r2
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d01d      	beq.n	8011636 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80115fa:	4a24      	ldr	r2, [pc, #144]	; (801168c <chk_lock+0xb4>)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	011b      	lsls	r3, r3, #4
 8011600:	4413      	add	r3, r2
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	429a      	cmp	r2, r3
 801160a:	d116      	bne.n	801163a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801160c:	4a1f      	ldr	r2, [pc, #124]	; (801168c <chk_lock+0xb4>)
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	011b      	lsls	r3, r3, #4
 8011612:	4413      	add	r3, r2
 8011614:	3304      	adds	r3, #4
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801161c:	429a      	cmp	r2, r3
 801161e:	d10c      	bne.n	801163a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011620:	4a1a      	ldr	r2, [pc, #104]	; (801168c <chk_lock+0xb4>)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	011b      	lsls	r3, r3, #4
 8011626:	4413      	add	r3, r2
 8011628:	3308      	adds	r3, #8
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011630:	429a      	cmp	r2, r3
 8011632:	d102      	bne.n	801163a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011634:	e007      	b.n	8011646 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011636:	2301      	movs	r3, #1
 8011638:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	3301      	adds	r3, #1
 801163e:	60fb      	str	r3, [r7, #12]
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2b01      	cmp	r3, #1
 8011644:	d9d2      	bls.n	80115ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b02      	cmp	r3, #2
 801164a:	d109      	bne.n	8011660 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d102      	bne.n	8011658 <chk_lock+0x80>
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2b02      	cmp	r3, #2
 8011656:	d101      	bne.n	801165c <chk_lock+0x84>
 8011658:	2300      	movs	r3, #0
 801165a:	e010      	b.n	801167e <chk_lock+0xa6>
 801165c:	2312      	movs	r3, #18
 801165e:	e00e      	b.n	801167e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d108      	bne.n	8011678 <chk_lock+0xa0>
 8011666:	4a09      	ldr	r2, [pc, #36]	; (801168c <chk_lock+0xb4>)
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	011b      	lsls	r3, r3, #4
 801166c:	4413      	add	r3, r2
 801166e:	330c      	adds	r3, #12
 8011670:	881b      	ldrh	r3, [r3, #0]
 8011672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011676:	d101      	bne.n	801167c <chk_lock+0xa4>
 8011678:	2310      	movs	r3, #16
 801167a:	e000      	b.n	801167e <chk_lock+0xa6>
 801167c:	2300      	movs	r3, #0
}
 801167e:	4618      	mov	r0, r3
 8011680:	3714      	adds	r7, #20
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
 801168a:	bf00      	nop
 801168c:	200481a4 	.word	0x200481a4

08011690 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011696:	2300      	movs	r3, #0
 8011698:	607b      	str	r3, [r7, #4]
 801169a:	e002      	b.n	80116a2 <enq_lock+0x12>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	3301      	adds	r3, #1
 80116a0:	607b      	str	r3, [r7, #4]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2b01      	cmp	r3, #1
 80116a6:	d806      	bhi.n	80116b6 <enq_lock+0x26>
 80116a8:	4a09      	ldr	r2, [pc, #36]	; (80116d0 <enq_lock+0x40>)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	011b      	lsls	r3, r3, #4
 80116ae:	4413      	add	r3, r2
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1f2      	bne.n	801169c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2b02      	cmp	r3, #2
 80116ba:	bf14      	ite	ne
 80116bc:	2301      	movne	r3, #1
 80116be:	2300      	moveq	r3, #0
 80116c0:	b2db      	uxtb	r3, r3
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	370c      	adds	r7, #12
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr
 80116ce:	bf00      	nop
 80116d0:	200481a4 	.word	0x200481a4

080116d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80116de:	2300      	movs	r3, #0
 80116e0:	60fb      	str	r3, [r7, #12]
 80116e2:	e01f      	b.n	8011724 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80116e4:	4a41      	ldr	r2, [pc, #260]	; (80117ec <inc_lock+0x118>)
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	011b      	lsls	r3, r3, #4
 80116ea:	4413      	add	r3, r2
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d113      	bne.n	801171e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80116f6:	4a3d      	ldr	r2, [pc, #244]	; (80117ec <inc_lock+0x118>)
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	011b      	lsls	r3, r3, #4
 80116fc:	4413      	add	r3, r2
 80116fe:	3304      	adds	r3, #4
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011706:	429a      	cmp	r2, r3
 8011708:	d109      	bne.n	801171e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801170a:	4a38      	ldr	r2, [pc, #224]	; (80117ec <inc_lock+0x118>)
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	011b      	lsls	r3, r3, #4
 8011710:	4413      	add	r3, r2
 8011712:	3308      	adds	r3, #8
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801171a:	429a      	cmp	r2, r3
 801171c:	d006      	beq.n	801172c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	3301      	adds	r3, #1
 8011722:	60fb      	str	r3, [r7, #12]
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2b01      	cmp	r3, #1
 8011728:	d9dc      	bls.n	80116e4 <inc_lock+0x10>
 801172a:	e000      	b.n	801172e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801172c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2b02      	cmp	r3, #2
 8011732:	d132      	bne.n	801179a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011734:	2300      	movs	r3, #0
 8011736:	60fb      	str	r3, [r7, #12]
 8011738:	e002      	b.n	8011740 <inc_lock+0x6c>
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	3301      	adds	r3, #1
 801173e:	60fb      	str	r3, [r7, #12]
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2b01      	cmp	r3, #1
 8011744:	d806      	bhi.n	8011754 <inc_lock+0x80>
 8011746:	4a29      	ldr	r2, [pc, #164]	; (80117ec <inc_lock+0x118>)
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	011b      	lsls	r3, r3, #4
 801174c:	4413      	add	r3, r2
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d1f2      	bne.n	801173a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2b02      	cmp	r3, #2
 8011758:	d101      	bne.n	801175e <inc_lock+0x8a>
 801175a:	2300      	movs	r3, #0
 801175c:	e040      	b.n	80117e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	4922      	ldr	r1, [pc, #136]	; (80117ec <inc_lock+0x118>)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	011b      	lsls	r3, r3, #4
 8011768:	440b      	add	r3, r1
 801176a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	689a      	ldr	r2, [r3, #8]
 8011770:	491e      	ldr	r1, [pc, #120]	; (80117ec <inc_lock+0x118>)
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	011b      	lsls	r3, r3, #4
 8011776:	440b      	add	r3, r1
 8011778:	3304      	adds	r3, #4
 801177a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	695a      	ldr	r2, [r3, #20]
 8011780:	491a      	ldr	r1, [pc, #104]	; (80117ec <inc_lock+0x118>)
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	011b      	lsls	r3, r3, #4
 8011786:	440b      	add	r3, r1
 8011788:	3308      	adds	r3, #8
 801178a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801178c:	4a17      	ldr	r2, [pc, #92]	; (80117ec <inc_lock+0x118>)
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	011b      	lsls	r3, r3, #4
 8011792:	4413      	add	r3, r2
 8011794:	330c      	adds	r3, #12
 8011796:	2200      	movs	r2, #0
 8011798:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d009      	beq.n	80117b4 <inc_lock+0xe0>
 80117a0:	4a12      	ldr	r2, [pc, #72]	; (80117ec <inc_lock+0x118>)
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	011b      	lsls	r3, r3, #4
 80117a6:	4413      	add	r3, r2
 80117a8:	330c      	adds	r3, #12
 80117aa:	881b      	ldrh	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <inc_lock+0xe0>
 80117b0:	2300      	movs	r3, #0
 80117b2:	e015      	b.n	80117e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d108      	bne.n	80117cc <inc_lock+0xf8>
 80117ba:	4a0c      	ldr	r2, [pc, #48]	; (80117ec <inc_lock+0x118>)
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	011b      	lsls	r3, r3, #4
 80117c0:	4413      	add	r3, r2
 80117c2:	330c      	adds	r3, #12
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	3301      	adds	r3, #1
 80117c8:	b29a      	uxth	r2, r3
 80117ca:	e001      	b.n	80117d0 <inc_lock+0xfc>
 80117cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80117d0:	4906      	ldr	r1, [pc, #24]	; (80117ec <inc_lock+0x118>)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	011b      	lsls	r3, r3, #4
 80117d6:	440b      	add	r3, r1
 80117d8:	330c      	adds	r3, #12
 80117da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	3301      	adds	r3, #1
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3714      	adds	r7, #20
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr
 80117ec:	200481a4 	.word	0x200481a4

080117f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	3b01      	subs	r3, #1
 80117fc:	607b      	str	r3, [r7, #4]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2b01      	cmp	r3, #1
 8011802:	d825      	bhi.n	8011850 <dec_lock+0x60>
		n = Files[i].ctr;
 8011804:	4a17      	ldr	r2, [pc, #92]	; (8011864 <dec_lock+0x74>)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	011b      	lsls	r3, r3, #4
 801180a:	4413      	add	r3, r2
 801180c:	330c      	adds	r3, #12
 801180e:	881b      	ldrh	r3, [r3, #0]
 8011810:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011812:	89fb      	ldrh	r3, [r7, #14]
 8011814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011818:	d101      	bne.n	801181e <dec_lock+0x2e>
 801181a:	2300      	movs	r3, #0
 801181c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801181e:	89fb      	ldrh	r3, [r7, #14]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d002      	beq.n	801182a <dec_lock+0x3a>
 8011824:	89fb      	ldrh	r3, [r7, #14]
 8011826:	3b01      	subs	r3, #1
 8011828:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801182a:	4a0e      	ldr	r2, [pc, #56]	; (8011864 <dec_lock+0x74>)
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	011b      	lsls	r3, r3, #4
 8011830:	4413      	add	r3, r2
 8011832:	330c      	adds	r3, #12
 8011834:	89fa      	ldrh	r2, [r7, #14]
 8011836:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011838:	89fb      	ldrh	r3, [r7, #14]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d105      	bne.n	801184a <dec_lock+0x5a>
 801183e:	4a09      	ldr	r2, [pc, #36]	; (8011864 <dec_lock+0x74>)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	011b      	lsls	r3, r3, #4
 8011844:	4413      	add	r3, r2
 8011846:	2200      	movs	r2, #0
 8011848:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801184a:	2300      	movs	r3, #0
 801184c:	737b      	strb	r3, [r7, #13]
 801184e:	e001      	b.n	8011854 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011850:	2302      	movs	r3, #2
 8011852:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011854:	7b7b      	ldrb	r3, [r7, #13]
}
 8011856:	4618      	mov	r0, r3
 8011858:	3714      	adds	r7, #20
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	200481a4 	.word	0x200481a4

08011868 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011870:	2300      	movs	r3, #0
 8011872:	60fb      	str	r3, [r7, #12]
 8011874:	e010      	b.n	8011898 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011876:	4a0d      	ldr	r2, [pc, #52]	; (80118ac <clear_lock+0x44>)
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	011b      	lsls	r3, r3, #4
 801187c:	4413      	add	r3, r2
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	429a      	cmp	r2, r3
 8011884:	d105      	bne.n	8011892 <clear_lock+0x2a>
 8011886:	4a09      	ldr	r2, [pc, #36]	; (80118ac <clear_lock+0x44>)
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	011b      	lsls	r3, r3, #4
 801188c:	4413      	add	r3, r2
 801188e:	2200      	movs	r2, #0
 8011890:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	3301      	adds	r3, #1
 8011896:	60fb      	str	r3, [r7, #12]
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b01      	cmp	r3, #1
 801189c:	d9eb      	bls.n	8011876 <clear_lock+0xe>
	}
}
 801189e:	bf00      	nop
 80118a0:	3714      	adds	r7, #20
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr
 80118aa:	bf00      	nop
 80118ac:	200481a4 	.word	0x200481a4

080118b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b086      	sub	sp, #24
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80118b8:	2300      	movs	r3, #0
 80118ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	78db      	ldrb	r3, [r3, #3]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d034      	beq.n	801192e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	7858      	ldrb	r0, [r3, #1]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118d4:	2301      	movs	r3, #1
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	f7ff fd40 	bl	801135c <disk_write>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d002      	beq.n	80118e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80118e2:	2301      	movs	r3, #1
 80118e4:	73fb      	strb	r3, [r7, #15]
 80118e6:	e022      	b.n	801192e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118f2:	697a      	ldr	r2, [r7, #20]
 80118f4:	1ad2      	subs	r2, r2, r3
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6a1b      	ldr	r3, [r3, #32]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d217      	bcs.n	801192e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	789b      	ldrb	r3, [r3, #2]
 8011902:	613b      	str	r3, [r7, #16]
 8011904:	e010      	b.n	8011928 <sync_window+0x78>
					wsect += fs->fsize;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a1b      	ldr	r3, [r3, #32]
 801190a:	697a      	ldr	r2, [r7, #20]
 801190c:	4413      	add	r3, r2
 801190e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	7858      	ldrb	r0, [r3, #1]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801191a:	2301      	movs	r3, #1
 801191c:	697a      	ldr	r2, [r7, #20]
 801191e:	f7ff fd1d 	bl	801135c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	3b01      	subs	r3, #1
 8011926:	613b      	str	r3, [r7, #16]
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	2b01      	cmp	r3, #1
 801192c:	d8eb      	bhi.n	8011906 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3718      	adds	r7, #24
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011942:	2300      	movs	r3, #0
 8011944:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801194a:	683a      	ldr	r2, [r7, #0]
 801194c:	429a      	cmp	r2, r3
 801194e:	d01b      	beq.n	8011988 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f7ff ffad 	bl	80118b0 <sync_window>
 8011956:	4603      	mov	r3, r0
 8011958:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801195a:	7bfb      	ldrb	r3, [r7, #15]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d113      	bne.n	8011988 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	7858      	ldrb	r0, [r3, #1]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801196a:	2301      	movs	r3, #1
 801196c:	683a      	ldr	r2, [r7, #0]
 801196e:	f7ff fcd5 	bl	801131c <disk_read>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d004      	beq.n	8011982 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011978:	f04f 33ff 	mov.w	r3, #4294967295
 801197c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801197e:	2301      	movs	r3, #1
 8011980:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	683a      	ldr	r2, [r7, #0]
 8011986:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011988:	7bfb      	ldrb	r3, [r7, #15]
}
 801198a:	4618      	mov	r0, r3
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
	...

08011994 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b084      	sub	sp, #16
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7ff ff87 	bl	80118b0 <sync_window>
 80119a2:	4603      	mov	r3, r0
 80119a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80119a6:	7bfb      	ldrb	r3, [r7, #15]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d159      	bne.n	8011a60 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	2b03      	cmp	r3, #3
 80119b2:	d149      	bne.n	8011a48 <sync_fs+0xb4>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	791b      	ldrb	r3, [r3, #4]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d145      	bne.n	8011a48 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	899b      	ldrh	r3, [r3, #12]
 80119c6:	461a      	mov	r2, r3
 80119c8:	2100      	movs	r1, #0
 80119ca:	f7ff fda8 	bl	801151e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	3338      	adds	r3, #56	; 0x38
 80119d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80119d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80119da:	4618      	mov	r0, r3
 80119dc:	f7ff fd37 	bl	801144e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	3338      	adds	r3, #56	; 0x38
 80119e4:	4921      	ldr	r1, [pc, #132]	; (8011a6c <sync_fs+0xd8>)
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7ff fd4c 	bl	8011484 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	3338      	adds	r3, #56	; 0x38
 80119f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80119f4:	491e      	ldr	r1, [pc, #120]	; (8011a70 <sync_fs+0xdc>)
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ff fd44 	bl	8011484 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	3338      	adds	r3, #56	; 0x38
 8011a00:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	695b      	ldr	r3, [r3, #20]
 8011a08:	4619      	mov	r1, r3
 8011a0a:	4610      	mov	r0, r2
 8011a0c:	f7ff fd3a 	bl	8011484 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	3338      	adds	r3, #56	; 0x38
 8011a14:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	691b      	ldr	r3, [r3, #16]
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	4610      	mov	r0, r2
 8011a20:	f7ff fd30 	bl	8011484 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a28:	1c5a      	adds	r2, r3, #1
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	7858      	ldrb	r0, [r3, #1]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	f7ff fc8d 	bl	801135c <disk_write>
			fs->fsi_flag = 0;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2200      	movs	r2, #0
 8011a46:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	785b      	ldrb	r3, [r3, #1]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	2100      	movs	r1, #0
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7ff fca3 	bl	801139c <disk_ioctl>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <sync_fs+0xcc>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	41615252 	.word	0x41615252
 8011a70:	61417272 	.word	0x61417272

08011a74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	3b02      	subs	r3, #2
 8011a82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	69db      	ldr	r3, [r3, #28]
 8011a88:	3b02      	subs	r3, #2
 8011a8a:	683a      	ldr	r2, [r7, #0]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d301      	bcc.n	8011a94 <clust2sect+0x20>
 8011a90:	2300      	movs	r3, #0
 8011a92:	e008      	b.n	8011aa6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	895b      	ldrh	r3, [r3, #10]
 8011a98:	461a      	mov	r2, r3
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	fb03 f202 	mul.w	r2, r3, r2
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aa4:	4413      	add	r3, r2
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	370c      	adds	r7, #12
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr

08011ab2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011ab2:	b580      	push	{r7, lr}
 8011ab4:	b086      	sub	sp, #24
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	6078      	str	r0, [r7, #4]
 8011aba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d904      	bls.n	8011ad2 <get_fat+0x20>
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	69db      	ldr	r3, [r3, #28]
 8011acc:	683a      	ldr	r2, [r7, #0]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d302      	bcc.n	8011ad8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	617b      	str	r3, [r7, #20]
 8011ad6:	e0b7      	b.n	8011c48 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8011adc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	2b02      	cmp	r3, #2
 8011ae4:	d05a      	beq.n	8011b9c <get_fat+0xea>
 8011ae6:	2b03      	cmp	r3, #3
 8011ae8:	d07d      	beq.n	8011be6 <get_fat+0x134>
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	f040 80a2 	bne.w	8011c34 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	085b      	lsrs	r3, r3, #1
 8011af8:	68fa      	ldr	r2, [r7, #12]
 8011afa:	4413      	add	r3, r2
 8011afc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	899b      	ldrh	r3, [r3, #12]
 8011b06:	4619      	mov	r1, r3
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b0e:	4413      	add	r3, r2
 8011b10:	4619      	mov	r1, r3
 8011b12:	6938      	ldr	r0, [r7, #16]
 8011b14:	f7ff ff10 	bl	8011938 <move_window>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f040 808d 	bne.w	8011c3a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	1c5a      	adds	r2, r3, #1
 8011b24:	60fa      	str	r2, [r7, #12]
 8011b26:	693a      	ldr	r2, [r7, #16]
 8011b28:	8992      	ldrh	r2, [r2, #12]
 8011b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b2e:	fb02 f201 	mul.w	r2, r2, r1
 8011b32:	1a9b      	subs	r3, r3, r2
 8011b34:	693a      	ldr	r2, [r7, #16]
 8011b36:	4413      	add	r3, r2
 8011b38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011b3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	899b      	ldrh	r3, [r3, #12]
 8011b46:	4619      	mov	r1, r3
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b4e:	4413      	add	r3, r2
 8011b50:	4619      	mov	r1, r3
 8011b52:	6938      	ldr	r0, [r7, #16]
 8011b54:	f7ff fef0 	bl	8011938 <move_window>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d16f      	bne.n	8011c3e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	899b      	ldrh	r3, [r3, #12]
 8011b62:	461a      	mov	r2, r3
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b6a:	fb02 f201 	mul.w	r2, r2, r1
 8011b6e:	1a9b      	subs	r3, r3, r2
 8011b70:	693a      	ldr	r2, [r7, #16]
 8011b72:	4413      	add	r3, r2
 8011b74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011b78:	021b      	lsls	r3, r3, #8
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	4313      	orrs	r3, r2
 8011b80:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	f003 0301 	and.w	r3, r3, #1
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d002      	beq.n	8011b92 <get_fat+0xe0>
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	091b      	lsrs	r3, r3, #4
 8011b90:	e002      	b.n	8011b98 <get_fat+0xe6>
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011b98:	617b      	str	r3, [r7, #20]
			break;
 8011b9a:	e055      	b.n	8011c48 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	899b      	ldrh	r3, [r3, #12]
 8011ba4:	085b      	lsrs	r3, r3, #1
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	4619      	mov	r1, r3
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bb0:	4413      	add	r3, r2
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	6938      	ldr	r0, [r7, #16]
 8011bb6:	f7ff febf 	bl	8011938 <move_window>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d140      	bne.n	8011c42 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	005b      	lsls	r3, r3, #1
 8011bca:	693a      	ldr	r2, [r7, #16]
 8011bcc:	8992      	ldrh	r2, [r2, #12]
 8011bce:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bd2:	fb02 f200 	mul.w	r2, r2, r0
 8011bd6:	1a9b      	subs	r3, r3, r2
 8011bd8:	440b      	add	r3, r1
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7ff fbfc 	bl	80113d8 <ld_word>
 8011be0:	4603      	mov	r3, r0
 8011be2:	617b      	str	r3, [r7, #20]
			break;
 8011be4:	e030      	b.n	8011c48 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	899b      	ldrh	r3, [r3, #12]
 8011bee:	089b      	lsrs	r3, r3, #2
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bfa:	4413      	add	r3, r2
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	6938      	ldr	r0, [r7, #16]
 8011c00:	f7ff fe9a 	bl	8011938 <move_window>
 8011c04:	4603      	mov	r3, r0
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d11d      	bne.n	8011c46 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	693a      	ldr	r2, [r7, #16]
 8011c16:	8992      	ldrh	r2, [r2, #12]
 8011c18:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c1c:	fb02 f200 	mul.w	r2, r2, r0
 8011c20:	1a9b      	subs	r3, r3, r2
 8011c22:	440b      	add	r3, r1
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7ff fbef 	bl	8011408 <ld_dword>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011c30:	617b      	str	r3, [r7, #20]
			break;
 8011c32:	e009      	b.n	8011c48 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011c34:	2301      	movs	r3, #1
 8011c36:	617b      	str	r3, [r7, #20]
 8011c38:	e006      	b.n	8011c48 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c3a:	bf00      	nop
 8011c3c:	e004      	b.n	8011c48 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c3e:	bf00      	nop
 8011c40:	e002      	b.n	8011c48 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011c42:	bf00      	nop
 8011c44:	e000      	b.n	8011c48 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011c46:	bf00      	nop
		}
	}

	return val;
 8011c48:	697b      	ldr	r3, [r7, #20]
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3718      	adds	r7, #24
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}

08011c52 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011c52:	b590      	push	{r4, r7, lr}
 8011c54:	b089      	sub	sp, #36	; 0x24
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	60f8      	str	r0, [r7, #12]
 8011c5a:	60b9      	str	r1, [r7, #8]
 8011c5c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011c5e:	2302      	movs	r3, #2
 8011c60:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	f240 8106 	bls.w	8011e76 <put_fat+0x224>
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	69db      	ldr	r3, [r3, #28]
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	f080 8100 	bcs.w	8011e76 <put_fat+0x224>
		switch (fs->fs_type) {
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	2b02      	cmp	r3, #2
 8011c7c:	f000 8088 	beq.w	8011d90 <put_fat+0x13e>
 8011c80:	2b03      	cmp	r3, #3
 8011c82:	f000 80b0 	beq.w	8011de6 <put_fat+0x194>
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	f040 80f5 	bne.w	8011e76 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	61bb      	str	r3, [r7, #24]
 8011c90:	69bb      	ldr	r3, [r7, #24]
 8011c92:	085b      	lsrs	r3, r3, #1
 8011c94:	69ba      	ldr	r2, [r7, #24]
 8011c96:	4413      	add	r3, r2
 8011c98:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	899b      	ldrh	r3, [r3, #12]
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011caa:	4413      	add	r3, r2
 8011cac:	4619      	mov	r1, r3
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f7ff fe42 	bl	8011938 <move_window>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011cb8:	7ffb      	ldrb	r3, [r7, #31]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f040 80d4 	bne.w	8011e68 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	1c5a      	adds	r2, r3, #1
 8011cca:	61ba      	str	r2, [r7, #24]
 8011ccc:	68fa      	ldr	r2, [r7, #12]
 8011cce:	8992      	ldrh	r2, [r2, #12]
 8011cd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cd4:	fb02 f200 	mul.w	r2, r2, r0
 8011cd8:	1a9b      	subs	r3, r3, r2
 8011cda:	440b      	add	r3, r1
 8011cdc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	f003 0301 	and.w	r3, r3, #1
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00d      	beq.n	8011d04 <put_fat+0xb2>
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	b25b      	sxtb	r3, r3
 8011cee:	f003 030f 	and.w	r3, r3, #15
 8011cf2:	b25a      	sxtb	r2, r3
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	011b      	lsls	r3, r3, #4
 8011cfa:	b25b      	sxtb	r3, r3
 8011cfc:	4313      	orrs	r3, r2
 8011cfe:	b25b      	sxtb	r3, r3
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	e001      	b.n	8011d08 <put_fat+0xb6>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	697a      	ldr	r2, [r7, #20]
 8011d0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2201      	movs	r2, #1
 8011d10:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	899b      	ldrh	r3, [r3, #12]
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d22:	4413      	add	r3, r2
 8011d24:	4619      	mov	r1, r3
 8011d26:	68f8      	ldr	r0, [r7, #12]
 8011d28:	f7ff fe06 	bl	8011938 <move_window>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011d30:	7ffb      	ldrb	r3, [r7, #31]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f040 809a 	bne.w	8011e6c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	899b      	ldrh	r3, [r3, #12]
 8011d42:	461a      	mov	r2, r3
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d4a:	fb02 f200 	mul.w	r2, r2, r0
 8011d4e:	1a9b      	subs	r3, r3, r2
 8011d50:	440b      	add	r3, r1
 8011d52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	f003 0301 	and.w	r3, r3, #1
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d003      	beq.n	8011d66 <put_fat+0x114>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	091b      	lsrs	r3, r3, #4
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	e00e      	b.n	8011d84 <put_fat+0x132>
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	b25b      	sxtb	r3, r3
 8011d6c:	f023 030f 	bic.w	r3, r3, #15
 8011d70:	b25a      	sxtb	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	0a1b      	lsrs	r3, r3, #8
 8011d76:	b25b      	sxtb	r3, r3
 8011d78:	f003 030f 	and.w	r3, r3, #15
 8011d7c:	b25b      	sxtb	r3, r3
 8011d7e:	4313      	orrs	r3, r2
 8011d80:	b25b      	sxtb	r3, r3
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	697a      	ldr	r2, [r7, #20]
 8011d86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	70da      	strb	r2, [r3, #3]
			break;
 8011d8e:	e072      	b.n	8011e76 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	899b      	ldrh	r3, [r3, #12]
 8011d98:	085b      	lsrs	r3, r3, #1
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8011da4:	4413      	add	r3, r2
 8011da6:	4619      	mov	r1, r3
 8011da8:	68f8      	ldr	r0, [r7, #12]
 8011daa:	f7ff fdc5 	bl	8011938 <move_window>
 8011dae:	4603      	mov	r3, r0
 8011db0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011db2:	7ffb      	ldrb	r3, [r7, #31]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d15b      	bne.n	8011e70 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	005b      	lsls	r3, r3, #1
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	8992      	ldrh	r2, [r2, #12]
 8011dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dca:	fb02 f200 	mul.w	r2, r2, r0
 8011dce:	1a9b      	subs	r3, r3, r2
 8011dd0:	440b      	add	r3, r1
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	b292      	uxth	r2, r2
 8011dd6:	4611      	mov	r1, r2
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7ff fb38 	bl	801144e <st_word>
			fs->wflag = 1;
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	2201      	movs	r2, #1
 8011de2:	70da      	strb	r2, [r3, #3]
			break;
 8011de4:	e047      	b.n	8011e76 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	899b      	ldrh	r3, [r3, #12]
 8011dee:	089b      	lsrs	r3, r3, #2
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	4619      	mov	r1, r3
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dfa:	4413      	add	r3, r2
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	68f8      	ldr	r0, [r7, #12]
 8011e00:	f7ff fd9a 	bl	8011938 <move_window>
 8011e04:	4603      	mov	r3, r0
 8011e06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e08:	7ffb      	ldrb	r3, [r7, #31]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d132      	bne.n	8011e74 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	8992      	ldrh	r2, [r2, #12]
 8011e22:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e26:	fb02 f200 	mul.w	r2, r2, r0
 8011e2a:	1a9b      	subs	r3, r3, r2
 8011e2c:	440b      	add	r3, r1
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7ff faea 	bl	8011408 <ld_dword>
 8011e34:	4603      	mov	r3, r0
 8011e36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011e3a:	4323      	orrs	r3, r4
 8011e3c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	68fa      	ldr	r2, [r7, #12]
 8011e4a:	8992      	ldrh	r2, [r2, #12]
 8011e4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e50:	fb02 f200 	mul.w	r2, r2, r0
 8011e54:	1a9b      	subs	r3, r3, r2
 8011e56:	440b      	add	r3, r1
 8011e58:	6879      	ldr	r1, [r7, #4]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7ff fb12 	bl	8011484 <st_dword>
			fs->wflag = 1;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	2201      	movs	r2, #1
 8011e64:	70da      	strb	r2, [r3, #3]
			break;
 8011e66:	e006      	b.n	8011e76 <put_fat+0x224>
			if (res != FR_OK) break;
 8011e68:	bf00      	nop
 8011e6a:	e004      	b.n	8011e76 <put_fat+0x224>
			if (res != FR_OK) break;
 8011e6c:	bf00      	nop
 8011e6e:	e002      	b.n	8011e76 <put_fat+0x224>
			if (res != FR_OK) break;
 8011e70:	bf00      	nop
 8011e72:	e000      	b.n	8011e76 <put_fat+0x224>
			if (res != FR_OK) break;
 8011e74:	bf00      	nop
		}
	}
	return res;
 8011e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3724      	adds	r7, #36	; 0x24
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd90      	pop	{r4, r7, pc}

08011e80 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b088      	sub	sp, #32
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	60b9      	str	r1, [r7, #8]
 8011e8a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	d904      	bls.n	8011ea6 <remove_chain+0x26>
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	69db      	ldr	r3, [r3, #28]
 8011ea0:	68ba      	ldr	r2, [r7, #8]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d301      	bcc.n	8011eaa <remove_chain+0x2a>
 8011ea6:	2302      	movs	r3, #2
 8011ea8:	e04b      	b.n	8011f42 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d00c      	beq.n	8011eca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb4:	6879      	ldr	r1, [r7, #4]
 8011eb6:	69b8      	ldr	r0, [r7, #24]
 8011eb8:	f7ff fecb 	bl	8011c52 <put_fat>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011ec0:	7ffb      	ldrb	r3, [r7, #31]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d001      	beq.n	8011eca <remove_chain+0x4a>
 8011ec6:	7ffb      	ldrb	r3, [r7, #31]
 8011ec8:	e03b      	b.n	8011f42 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011eca:	68b9      	ldr	r1, [r7, #8]
 8011ecc:	68f8      	ldr	r0, [r7, #12]
 8011ece:	f7ff fdf0 	bl	8011ab2 <get_fat>
 8011ed2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d031      	beq.n	8011f3e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d101      	bne.n	8011ee4 <remove_chain+0x64>
 8011ee0:	2302      	movs	r3, #2
 8011ee2:	e02e      	b.n	8011f42 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eea:	d101      	bne.n	8011ef0 <remove_chain+0x70>
 8011eec:	2301      	movs	r3, #1
 8011eee:	e028      	b.n	8011f42 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	68b9      	ldr	r1, [r7, #8]
 8011ef4:	69b8      	ldr	r0, [r7, #24]
 8011ef6:	f7ff feac 	bl	8011c52 <put_fat>
 8011efa:	4603      	mov	r3, r0
 8011efc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011efe:	7ffb      	ldrb	r3, [r7, #31]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <remove_chain+0x88>
 8011f04:	7ffb      	ldrb	r3, [r7, #31]
 8011f06:	e01c      	b.n	8011f42 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	695a      	ldr	r2, [r3, #20]
 8011f0c:	69bb      	ldr	r3, [r7, #24]
 8011f0e:	69db      	ldr	r3, [r3, #28]
 8011f10:	3b02      	subs	r3, #2
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d20b      	bcs.n	8011f2e <remove_chain+0xae>
			fs->free_clst++;
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	695b      	ldr	r3, [r3, #20]
 8011f1a:	1c5a      	adds	r2, r3, #1
 8011f1c:	69bb      	ldr	r3, [r7, #24]
 8011f1e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	791b      	ldrb	r3, [r3, #4]
 8011f24:	f043 0301 	orr.w	r3, r3, #1
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	69bb      	ldr	r3, [r7, #24]
 8011f2c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011f32:	69bb      	ldr	r3, [r7, #24]
 8011f34:	69db      	ldr	r3, [r3, #28]
 8011f36:	68ba      	ldr	r2, [r7, #8]
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d3c6      	bcc.n	8011eca <remove_chain+0x4a>
 8011f3c:	e000      	b.n	8011f40 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011f3e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011f40:	2300      	movs	r3, #0
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3720      	adds	r7, #32
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}

08011f4a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011f4a:	b580      	push	{r7, lr}
 8011f4c:	b088      	sub	sp, #32
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	6078      	str	r0, [r7, #4]
 8011f52:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d10d      	bne.n	8011f7c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	691b      	ldr	r3, [r3, #16]
 8011f64:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011f66:	69bb      	ldr	r3, [r7, #24]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d004      	beq.n	8011f76 <create_chain+0x2c>
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	69db      	ldr	r3, [r3, #28]
 8011f70:	69ba      	ldr	r2, [r7, #24]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d31b      	bcc.n	8011fae <create_chain+0x64>
 8011f76:	2301      	movs	r3, #1
 8011f78:	61bb      	str	r3, [r7, #24]
 8011f7a:	e018      	b.n	8011fae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7ff fd97 	bl	8011ab2 <get_fat>
 8011f84:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d801      	bhi.n	8011f90 <create_chain+0x46>
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	e070      	b.n	8012072 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f96:	d101      	bne.n	8011f9c <create_chain+0x52>
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	e06a      	b.n	8012072 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	69db      	ldr	r3, [r3, #28]
 8011fa0:	68fa      	ldr	r2, [r7, #12]
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d201      	bcs.n	8011faa <create_chain+0x60>
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	e063      	b.n	8012072 <create_chain+0x128>
		scl = clst;
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	69db      	ldr	r3, [r3, #28]
 8011fbc:	69fa      	ldr	r2, [r7, #28]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d307      	bcc.n	8011fd2 <create_chain+0x88>
				ncl = 2;
 8011fc2:	2302      	movs	r3, #2
 8011fc4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011fc6:	69fa      	ldr	r2, [r7, #28]
 8011fc8:	69bb      	ldr	r3, [r7, #24]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d901      	bls.n	8011fd2 <create_chain+0x88>
 8011fce:	2300      	movs	r3, #0
 8011fd0:	e04f      	b.n	8012072 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011fd2:	69f9      	ldr	r1, [r7, #28]
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f7ff fd6c 	bl	8011ab2 <get_fat>
 8011fda:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d00e      	beq.n	8012000 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	d003      	beq.n	8011ff0 <create_chain+0xa6>
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fee:	d101      	bne.n	8011ff4 <create_chain+0xaa>
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	e03e      	b.n	8012072 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011ff4:	69fa      	ldr	r2, [r7, #28]
 8011ff6:	69bb      	ldr	r3, [r7, #24]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d1da      	bne.n	8011fb2 <create_chain+0x68>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	e038      	b.n	8012072 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012000:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012002:	f04f 32ff 	mov.w	r2, #4294967295
 8012006:	69f9      	ldr	r1, [r7, #28]
 8012008:	6938      	ldr	r0, [r7, #16]
 801200a:	f7ff fe22 	bl	8011c52 <put_fat>
 801200e:	4603      	mov	r3, r0
 8012010:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012012:	7dfb      	ldrb	r3, [r7, #23]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d109      	bne.n	801202c <create_chain+0xe2>
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d006      	beq.n	801202c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801201e:	69fa      	ldr	r2, [r7, #28]
 8012020:	6839      	ldr	r1, [r7, #0]
 8012022:	6938      	ldr	r0, [r7, #16]
 8012024:	f7ff fe15 	bl	8011c52 <put_fat>
 8012028:	4603      	mov	r3, r0
 801202a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801202c:	7dfb      	ldrb	r3, [r7, #23]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d116      	bne.n	8012060 <create_chain+0x116>
		fs->last_clst = ncl;
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	69fa      	ldr	r2, [r7, #28]
 8012036:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	695a      	ldr	r2, [r3, #20]
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	69db      	ldr	r3, [r3, #28]
 8012040:	3b02      	subs	r3, #2
 8012042:	429a      	cmp	r2, r3
 8012044:	d804      	bhi.n	8012050 <create_chain+0x106>
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	695b      	ldr	r3, [r3, #20]
 801204a:	1e5a      	subs	r2, r3, #1
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	791b      	ldrb	r3, [r3, #4]
 8012054:	f043 0301 	orr.w	r3, r3, #1
 8012058:	b2da      	uxtb	r2, r3
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	711a      	strb	r2, [r3, #4]
 801205e:	e007      	b.n	8012070 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012060:	7dfb      	ldrb	r3, [r7, #23]
 8012062:	2b01      	cmp	r3, #1
 8012064:	d102      	bne.n	801206c <create_chain+0x122>
 8012066:	f04f 33ff 	mov.w	r3, #4294967295
 801206a:	e000      	b.n	801206e <create_chain+0x124>
 801206c:	2301      	movs	r3, #1
 801206e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012070:	69fb      	ldr	r3, [r7, #28]
}
 8012072:	4618      	mov	r0, r3
 8012074:	3720      	adds	r7, #32
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801207a:	b480      	push	{r7}
 801207c:	b087      	sub	sp, #28
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
 8012082:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801208e:	3304      	adds	r3, #4
 8012090:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	899b      	ldrh	r3, [r3, #12]
 8012096:	461a      	mov	r2, r3
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	fbb3 f3f2 	udiv	r3, r3, r2
 801209e:	68fa      	ldr	r2, [r7, #12]
 80120a0:	8952      	ldrh	r2, [r2, #10]
 80120a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80120a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	1d1a      	adds	r2, r3, #4
 80120ac:	613a      	str	r2, [r7, #16]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d101      	bne.n	80120bc <clmt_clust+0x42>
 80120b8:	2300      	movs	r3, #0
 80120ba:	e010      	b.n	80120de <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80120bc:	697a      	ldr	r2, [r7, #20]
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d307      	bcc.n	80120d4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80120c4:	697a      	ldr	r2, [r7, #20]
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	1ad3      	subs	r3, r2, r3
 80120ca:	617b      	str	r3, [r7, #20]
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	3304      	adds	r3, #4
 80120d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80120d2:	e7e9      	b.n	80120a8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80120d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	4413      	add	r3, r2
}
 80120de:	4618      	mov	r0, r3
 80120e0:	371c      	adds	r7, #28
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr

080120ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80120ea:	b580      	push	{r7, lr}
 80120ec:	b086      	sub	sp, #24
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
 80120f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012100:	d204      	bcs.n	801210c <dir_sdi+0x22>
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	f003 031f 	and.w	r3, r3, #31
 8012108:	2b00      	cmp	r3, #0
 801210a:	d001      	beq.n	8012110 <dir_sdi+0x26>
		return FR_INT_ERR;
 801210c:	2302      	movs	r3, #2
 801210e:	e071      	b.n	80121f4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	683a      	ldr	r2, [r7, #0]
 8012114:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d106      	bne.n	8012130 <dir_sdi+0x46>
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	2b02      	cmp	r3, #2
 8012128:	d902      	bls.n	8012130 <dir_sdi+0x46>
		clst = fs->dirbase;
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801212e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d10c      	bne.n	8012150 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	095b      	lsrs	r3, r3, #5
 801213a:	693a      	ldr	r2, [r7, #16]
 801213c:	8912      	ldrh	r2, [r2, #8]
 801213e:	4293      	cmp	r3, r2
 8012140:	d301      	bcc.n	8012146 <dir_sdi+0x5c>
 8012142:	2302      	movs	r3, #2
 8012144:	e056      	b.n	80121f4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	61da      	str	r2, [r3, #28]
 801214e:	e02d      	b.n	80121ac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	895b      	ldrh	r3, [r3, #10]
 8012154:	461a      	mov	r2, r3
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	899b      	ldrh	r3, [r3, #12]
 801215a:	fb03 f302 	mul.w	r3, r3, r2
 801215e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012160:	e019      	b.n	8012196 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6979      	ldr	r1, [r7, #20]
 8012166:	4618      	mov	r0, r3
 8012168:	f7ff fca3 	bl	8011ab2 <get_fat>
 801216c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012174:	d101      	bne.n	801217a <dir_sdi+0x90>
 8012176:	2301      	movs	r3, #1
 8012178:	e03c      	b.n	80121f4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	2b01      	cmp	r3, #1
 801217e:	d904      	bls.n	801218a <dir_sdi+0xa0>
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	69db      	ldr	r3, [r3, #28]
 8012184:	697a      	ldr	r2, [r7, #20]
 8012186:	429a      	cmp	r2, r3
 8012188:	d301      	bcc.n	801218e <dir_sdi+0xa4>
 801218a:	2302      	movs	r3, #2
 801218c:	e032      	b.n	80121f4 <dir_sdi+0x10a>
			ofs -= csz;
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	1ad3      	subs	r3, r2, r3
 8012194:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012196:	683a      	ldr	r2, [r7, #0]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	429a      	cmp	r2, r3
 801219c:	d2e1      	bcs.n	8012162 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801219e:	6979      	ldr	r1, [r7, #20]
 80121a0:	6938      	ldr	r0, [r7, #16]
 80121a2:	f7ff fc67 	bl	8011a74 <clust2sect>
 80121a6:	4602      	mov	r2, r0
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	697a      	ldr	r2, [r7, #20]
 80121b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	69db      	ldr	r3, [r3, #28]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d101      	bne.n	80121be <dir_sdi+0xd4>
 80121ba:	2302      	movs	r3, #2
 80121bc:	e01a      	b.n	80121f4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	69da      	ldr	r2, [r3, #28]
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	899b      	ldrh	r3, [r3, #12]
 80121c6:	4619      	mov	r1, r3
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80121ce:	441a      	add	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	899b      	ldrh	r3, [r3, #12]
 80121de:	461a      	mov	r2, r3
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80121e6:	fb02 f200 	mul.w	r2, r2, r0
 80121ea:	1a9b      	subs	r3, r3, r2
 80121ec:	18ca      	adds	r2, r1, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80121f2:	2300      	movs	r3, #0
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3718      	adds	r7, #24
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b086      	sub	sp, #24
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	695b      	ldr	r3, [r3, #20]
 8012210:	3320      	adds	r3, #32
 8012212:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	69db      	ldr	r3, [r3, #28]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d003      	beq.n	8012224 <dir_next+0x28>
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012222:	d301      	bcc.n	8012228 <dir_next+0x2c>
 8012224:	2304      	movs	r3, #4
 8012226:	e0bb      	b.n	80123a0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	899b      	ldrh	r3, [r3, #12]
 801222c:	461a      	mov	r2, r3
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	fbb3 f1f2 	udiv	r1, r3, r2
 8012234:	fb02 f201 	mul.w	r2, r2, r1
 8012238:	1a9b      	subs	r3, r3, r2
 801223a:	2b00      	cmp	r3, #0
 801223c:	f040 809d 	bne.w	801237a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	69db      	ldr	r3, [r3, #28]
 8012244:	1c5a      	adds	r2, r3, #1
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	699b      	ldr	r3, [r3, #24]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d10b      	bne.n	801226a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	095b      	lsrs	r3, r3, #5
 8012256:	68fa      	ldr	r2, [r7, #12]
 8012258:	8912      	ldrh	r2, [r2, #8]
 801225a:	4293      	cmp	r3, r2
 801225c:	f0c0 808d 	bcc.w	801237a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	61da      	str	r2, [r3, #28]
 8012266:	2304      	movs	r3, #4
 8012268:	e09a      	b.n	80123a0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	899b      	ldrh	r3, [r3, #12]
 801226e:	461a      	mov	r2, r3
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	fbb3 f3f2 	udiv	r3, r3, r2
 8012276:	68fa      	ldr	r2, [r7, #12]
 8012278:	8952      	ldrh	r2, [r2, #10]
 801227a:	3a01      	subs	r2, #1
 801227c:	4013      	ands	r3, r2
 801227e:	2b00      	cmp	r3, #0
 8012280:	d17b      	bne.n	801237a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012282:	687a      	ldr	r2, [r7, #4]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	699b      	ldr	r3, [r3, #24]
 8012288:	4619      	mov	r1, r3
 801228a:	4610      	mov	r0, r2
 801228c:	f7ff fc11 	bl	8011ab2 <get_fat>
 8012290:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	2b01      	cmp	r3, #1
 8012296:	d801      	bhi.n	801229c <dir_next+0xa0>
 8012298:	2302      	movs	r3, #2
 801229a:	e081      	b.n	80123a0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a2:	d101      	bne.n	80122a8 <dir_next+0xac>
 80122a4:	2301      	movs	r3, #1
 80122a6:	e07b      	b.n	80123a0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	69db      	ldr	r3, [r3, #28]
 80122ac:	697a      	ldr	r2, [r7, #20]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d359      	bcc.n	8012366 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d104      	bne.n	80122c2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2200      	movs	r2, #0
 80122bc:	61da      	str	r2, [r3, #28]
 80122be:	2304      	movs	r3, #4
 80122c0:	e06e      	b.n	80123a0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	699b      	ldr	r3, [r3, #24]
 80122c8:	4619      	mov	r1, r3
 80122ca:	4610      	mov	r0, r2
 80122cc:	f7ff fe3d 	bl	8011f4a <create_chain>
 80122d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d101      	bne.n	80122dc <dir_next+0xe0>
 80122d8:	2307      	movs	r3, #7
 80122da:	e061      	b.n	80123a0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d101      	bne.n	80122e6 <dir_next+0xea>
 80122e2:	2302      	movs	r3, #2
 80122e4:	e05c      	b.n	80123a0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ec:	d101      	bne.n	80122f2 <dir_next+0xf6>
 80122ee:	2301      	movs	r3, #1
 80122f0:	e056      	b.n	80123a0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80122f2:	68f8      	ldr	r0, [r7, #12]
 80122f4:	f7ff fadc 	bl	80118b0 <sync_window>
 80122f8:	4603      	mov	r3, r0
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <dir_next+0x106>
 80122fe:	2301      	movs	r3, #1
 8012300:	e04e      	b.n	80123a0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	899b      	ldrh	r3, [r3, #12]
 801230c:	461a      	mov	r2, r3
 801230e:	2100      	movs	r1, #0
 8012310:	f7ff f905 	bl	801151e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012314:	2300      	movs	r3, #0
 8012316:	613b      	str	r3, [r7, #16]
 8012318:	6979      	ldr	r1, [r7, #20]
 801231a:	68f8      	ldr	r0, [r7, #12]
 801231c:	f7ff fbaa 	bl	8011a74 <clust2sect>
 8012320:	4602      	mov	r2, r0
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	635a      	str	r2, [r3, #52]	; 0x34
 8012326:	e012      	b.n	801234e <dir_next+0x152>
						fs->wflag = 1;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2201      	movs	r2, #1
 801232c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801232e:	68f8      	ldr	r0, [r7, #12]
 8012330:	f7ff fabe 	bl	80118b0 <sync_window>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <dir_next+0x142>
 801233a:	2301      	movs	r3, #1
 801233c:	e030      	b.n	80123a0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	3301      	adds	r3, #1
 8012342:	613b      	str	r3, [r7, #16]
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012348:	1c5a      	adds	r2, r3, #1
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	635a      	str	r2, [r3, #52]	; 0x34
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	895b      	ldrh	r3, [r3, #10]
 8012352:	461a      	mov	r2, r3
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	4293      	cmp	r3, r2
 8012358:	d3e6      	bcc.n	8012328 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	1ad2      	subs	r2, r2, r3
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	697a      	ldr	r2, [r7, #20]
 801236a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801236c:	6979      	ldr	r1, [r7, #20]
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f7ff fb80 	bl	8011a74 <clust2sect>
 8012374:	4602      	mov	r2, r0
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	68ba      	ldr	r2, [r7, #8]
 801237e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	899b      	ldrh	r3, [r3, #12]
 801238a:	461a      	mov	r2, r3
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012392:	fb02 f200 	mul.w	r2, r2, r0
 8012396:	1a9b      	subs	r3, r3, r2
 8012398:	18ca      	adds	r2, r1, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801239e:	2300      	movs	r3, #0
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3718      	adds	r7, #24
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b086      	sub	sp, #24
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80123b8:	2100      	movs	r1, #0
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f7ff fe95 	bl	80120ea <dir_sdi>
 80123c0:	4603      	mov	r3, r0
 80123c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80123c4:	7dfb      	ldrb	r3, [r7, #23]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d12b      	bne.n	8012422 <dir_alloc+0x7a>
		n = 0;
 80123ca:	2300      	movs	r3, #0
 80123cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	69db      	ldr	r3, [r3, #28]
 80123d2:	4619      	mov	r1, r3
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f7ff faaf 	bl	8011938 <move_window>
 80123da:	4603      	mov	r3, r0
 80123dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80123de:	7dfb      	ldrb	r3, [r7, #23]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d11d      	bne.n	8012420 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6a1b      	ldr	r3, [r3, #32]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	2be5      	cmp	r3, #229	; 0xe5
 80123ec:	d004      	beq.n	80123f8 <dir_alloc+0x50>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6a1b      	ldr	r3, [r3, #32]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d107      	bne.n	8012408 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	3301      	adds	r3, #1
 80123fc:	613b      	str	r3, [r7, #16]
 80123fe:	693a      	ldr	r2, [r7, #16]
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	429a      	cmp	r2, r3
 8012404:	d102      	bne.n	801240c <dir_alloc+0x64>
 8012406:	e00c      	b.n	8012422 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012408:	2300      	movs	r3, #0
 801240a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801240c:	2101      	movs	r1, #1
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7ff fef4 	bl	80121fc <dir_next>
 8012414:	4603      	mov	r3, r0
 8012416:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012418:	7dfb      	ldrb	r3, [r7, #23]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d0d7      	beq.n	80123ce <dir_alloc+0x26>
 801241e:	e000      	b.n	8012422 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012420:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012422:	7dfb      	ldrb	r3, [r7, #23]
 8012424:	2b04      	cmp	r3, #4
 8012426:	d101      	bne.n	801242c <dir_alloc+0x84>
 8012428:	2307      	movs	r3, #7
 801242a:	75fb      	strb	r3, [r7, #23]
	return res;
 801242c:	7dfb      	ldrb	r3, [r7, #23]
}
 801242e:	4618      	mov	r0, r3
 8012430:	3718      	adds	r7, #24
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}

08012436 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012436:	b580      	push	{r7, lr}
 8012438:	b084      	sub	sp, #16
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
 801243e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	331a      	adds	r3, #26
 8012444:	4618      	mov	r0, r3
 8012446:	f7fe ffc7 	bl	80113d8 <ld_word>
 801244a:	4603      	mov	r3, r0
 801244c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	2b03      	cmp	r3, #3
 8012454:	d109      	bne.n	801246a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	3314      	adds	r3, #20
 801245a:	4618      	mov	r0, r3
 801245c:	f7fe ffbc 	bl	80113d8 <ld_word>
 8012460:	4603      	mov	r3, r0
 8012462:	041b      	lsls	r3, r3, #16
 8012464:	68fa      	ldr	r2, [r7, #12]
 8012466:	4313      	orrs	r3, r2
 8012468:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801246a:	68fb      	ldr	r3, [r7, #12]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3710      	adds	r7, #16
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	331a      	adds	r3, #26
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	b292      	uxth	r2, r2
 8012488:	4611      	mov	r1, r2
 801248a:	4618      	mov	r0, r3
 801248c:	f7fe ffdf 	bl	801144e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	2b03      	cmp	r3, #3
 8012496:	d109      	bne.n	80124ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	f103 0214 	add.w	r2, r3, #20
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	0c1b      	lsrs	r3, r3, #16
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	4619      	mov	r1, r3
 80124a6:	4610      	mov	r0, r2
 80124a8:	f7fe ffd1 	bl	801144e <st_word>
	}
}
 80124ac:	bf00      	nop
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b086      	sub	sp, #24
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80124be:	2304      	movs	r3, #4
 80124c0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80124c8:	e03c      	b.n	8012544 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	69db      	ldr	r3, [r3, #28]
 80124ce:	4619      	mov	r1, r3
 80124d0:	6938      	ldr	r0, [r7, #16]
 80124d2:	f7ff fa31 	bl	8011938 <move_window>
 80124d6:	4603      	mov	r3, r0
 80124d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80124da:	7dfb      	ldrb	r3, [r7, #23]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d136      	bne.n	801254e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6a1b      	ldr	r3, [r3, #32]
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80124e8:	7bfb      	ldrb	r3, [r7, #15]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d102      	bne.n	80124f4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80124ee:	2304      	movs	r3, #4
 80124f0:	75fb      	strb	r3, [r7, #23]
 80124f2:	e031      	b.n	8012558 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6a1b      	ldr	r3, [r3, #32]
 80124f8:	330b      	adds	r3, #11
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012500:	73bb      	strb	r3, [r7, #14]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	7bba      	ldrb	r2, [r7, #14]
 8012506:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012508:	7bfb      	ldrb	r3, [r7, #15]
 801250a:	2be5      	cmp	r3, #229	; 0xe5
 801250c:	d011      	beq.n	8012532 <dir_read+0x7e>
 801250e:	7bfb      	ldrb	r3, [r7, #15]
 8012510:	2b2e      	cmp	r3, #46	; 0x2e
 8012512:	d00e      	beq.n	8012532 <dir_read+0x7e>
 8012514:	7bbb      	ldrb	r3, [r7, #14]
 8012516:	2b0f      	cmp	r3, #15
 8012518:	d00b      	beq.n	8012532 <dir_read+0x7e>
 801251a:	7bbb      	ldrb	r3, [r7, #14]
 801251c:	f023 0320 	bic.w	r3, r3, #32
 8012520:	2b08      	cmp	r3, #8
 8012522:	bf0c      	ite	eq
 8012524:	2301      	moveq	r3, #1
 8012526:	2300      	movne	r3, #0
 8012528:	b2db      	uxtb	r3, r3
 801252a:	461a      	mov	r2, r3
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	4293      	cmp	r3, r2
 8012530:	d00f      	beq.n	8012552 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012532:	2100      	movs	r1, #0
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f7ff fe61 	bl	80121fc <dir_next>
 801253a:	4603      	mov	r3, r0
 801253c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801253e:	7dfb      	ldrb	r3, [r7, #23]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d108      	bne.n	8012556 <dir_read+0xa2>
	while (dp->sect) {
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	69db      	ldr	r3, [r3, #28]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d1be      	bne.n	80124ca <dir_read+0x16>
 801254c:	e004      	b.n	8012558 <dir_read+0xa4>
		if (res != FR_OK) break;
 801254e:	bf00      	nop
 8012550:	e002      	b.n	8012558 <dir_read+0xa4>
				break;
 8012552:	bf00      	nop
 8012554:	e000      	b.n	8012558 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012556:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012558:	7dfb      	ldrb	r3, [r7, #23]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d002      	beq.n	8012564 <dir_read+0xb0>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2200      	movs	r2, #0
 8012562:	61da      	str	r2, [r3, #28]
	return res;
 8012564:	7dfb      	ldrb	r3, [r7, #23]
}
 8012566:	4618      	mov	r0, r3
 8012568:	3718      	adds	r7, #24
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b086      	sub	sp, #24
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801257c:	2100      	movs	r1, #0
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff fdb3 	bl	80120ea <dir_sdi>
 8012584:	4603      	mov	r3, r0
 8012586:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012588:	7dfb      	ldrb	r3, [r7, #23]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <dir_find+0x24>
 801258e:	7dfb      	ldrb	r3, [r7, #23]
 8012590:	e03e      	b.n	8012610 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	69db      	ldr	r3, [r3, #28]
 8012596:	4619      	mov	r1, r3
 8012598:	6938      	ldr	r0, [r7, #16]
 801259a:	f7ff f9cd 	bl	8011938 <move_window>
 801259e:	4603      	mov	r3, r0
 80125a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80125a2:	7dfb      	ldrb	r3, [r7, #23]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d12f      	bne.n	8012608 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6a1b      	ldr	r3, [r3, #32]
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80125b0:	7bfb      	ldrb	r3, [r7, #15]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d102      	bne.n	80125bc <dir_find+0x4e>
 80125b6:	2304      	movs	r3, #4
 80125b8:	75fb      	strb	r3, [r7, #23]
 80125ba:	e028      	b.n	801260e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6a1b      	ldr	r3, [r3, #32]
 80125c0:	330b      	adds	r3, #11
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6a1b      	ldr	r3, [r3, #32]
 80125d2:	330b      	adds	r3, #11
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	f003 0308 	and.w	r3, r3, #8
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d10a      	bne.n	80125f4 <dir_find+0x86>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6a18      	ldr	r0, [r3, #32]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	3324      	adds	r3, #36	; 0x24
 80125e6:	220b      	movs	r2, #11
 80125e8:	4619      	mov	r1, r3
 80125ea:	f7fe ffb2 	bl	8011552 <mem_cmp>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d00b      	beq.n	801260c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80125f4:	2100      	movs	r1, #0
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f7ff fe00 	bl	80121fc <dir_next>
 80125fc:	4603      	mov	r3, r0
 80125fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012600:	7dfb      	ldrb	r3, [r7, #23]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d0c5      	beq.n	8012592 <dir_find+0x24>
 8012606:	e002      	b.n	801260e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012608:	bf00      	nop
 801260a:	e000      	b.n	801260e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801260c:	bf00      	nop

	return res;
 801260e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b084      	sub	sp, #16
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012626:	2101      	movs	r1, #1
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f7ff febd 	bl	80123a8 <dir_alloc>
 801262e:	4603      	mov	r3, r0
 8012630:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012632:	7bfb      	ldrb	r3, [r7, #15]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d11c      	bne.n	8012672 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	69db      	ldr	r3, [r3, #28]
 801263c:	4619      	mov	r1, r3
 801263e:	68b8      	ldr	r0, [r7, #8]
 8012640:	f7ff f97a 	bl	8011938 <move_window>
 8012644:	4603      	mov	r3, r0
 8012646:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012648:	7bfb      	ldrb	r3, [r7, #15]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d111      	bne.n	8012672 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6a1b      	ldr	r3, [r3, #32]
 8012652:	2220      	movs	r2, #32
 8012654:	2100      	movs	r1, #0
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe ff61 	bl	801151e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6a18      	ldr	r0, [r3, #32]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	3324      	adds	r3, #36	; 0x24
 8012664:	220b      	movs	r2, #11
 8012666:	4619      	mov	r1, r3
 8012668:	f7fe ff38 	bl	80114dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	2201      	movs	r2, #1
 8012670:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012672:	7bfb      	ldrb	r3, [r7, #15]
}
 8012674:	4618      	mov	r0, r3
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	69db      	ldr	r3, [r3, #28]
 801268e:	4619      	mov	r1, r3
 8012690:	68f8      	ldr	r0, [r7, #12]
 8012692:	f7ff f951 	bl	8011938 <move_window>
 8012696:	4603      	mov	r3, r0
 8012698:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801269a:	7afb      	ldrb	r3, [r7, #11]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d106      	bne.n	80126ae <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6a1b      	ldr	r3, [r3, #32]
 80126a4:	22e5      	movs	r2, #229	; 0xe5
 80126a6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	2201      	movs	r2, #1
 80126ac:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80126ae:	7afb      	ldrb	r3, [r7, #11]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3710      	adds	r7, #16
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b088      	sub	sp, #32
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	60fb      	str	r3, [r7, #12]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	3324      	adds	r3, #36	; 0x24
 80126cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80126ce:	220b      	movs	r2, #11
 80126d0:	2120      	movs	r1, #32
 80126d2:	68b8      	ldr	r0, [r7, #8]
 80126d4:	f7fe ff23 	bl	801151e <mem_set>
	si = i = 0; ni = 8;
 80126d8:	2300      	movs	r3, #0
 80126da:	613b      	str	r3, [r7, #16]
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	617b      	str	r3, [r7, #20]
 80126e0:	2308      	movs	r3, #8
 80126e2:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	4413      	add	r3, r2
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	2b2e      	cmp	r3, #46	; 0x2e
 80126ee:	d12f      	bne.n	8012750 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	1c5a      	adds	r2, r3, #1
 80126f4:	617a      	str	r2, [r7, #20]
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	4413      	add	r3, r2
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80126fe:	7ffb      	ldrb	r3, [r7, #31]
 8012700:	2b2e      	cmp	r3, #46	; 0x2e
 8012702:	d10a      	bne.n	801271a <create_name+0x62>
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	2b02      	cmp	r3, #2
 8012708:	d807      	bhi.n	801271a <create_name+0x62>
			sfn[i++] = c;
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	1c5a      	adds	r2, r3, #1
 801270e:	613a      	str	r2, [r7, #16]
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	4413      	add	r3, r2
 8012714:	7ffa      	ldrb	r2, [r7, #31]
 8012716:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012718:	e7ea      	b.n	80126f0 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801271a:	7ffb      	ldrb	r3, [r7, #31]
 801271c:	2b2f      	cmp	r3, #47	; 0x2f
 801271e:	d007      	beq.n	8012730 <create_name+0x78>
 8012720:	7ffb      	ldrb	r3, [r7, #31]
 8012722:	2b5c      	cmp	r3, #92	; 0x5c
 8012724:	d004      	beq.n	8012730 <create_name+0x78>
 8012726:	7ffb      	ldrb	r3, [r7, #31]
 8012728:	2b20      	cmp	r3, #32
 801272a:	d901      	bls.n	8012730 <create_name+0x78>
 801272c:	2306      	movs	r3, #6
 801272e:	e084      	b.n	801283a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012730:	68fa      	ldr	r2, [r7, #12]
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	441a      	add	r2, r3
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801273a:	7ffb      	ldrb	r3, [r7, #31]
 801273c:	2b20      	cmp	r3, #32
 801273e:	d801      	bhi.n	8012744 <create_name+0x8c>
 8012740:	2224      	movs	r2, #36	; 0x24
 8012742:	e000      	b.n	8012746 <create_name+0x8e>
 8012744:	2220      	movs	r2, #32
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	330b      	adds	r3, #11
 801274a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801274c:	2300      	movs	r3, #0
 801274e:	e074      	b.n	801283a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	1c5a      	adds	r2, r3, #1
 8012754:	617a      	str	r2, [r7, #20]
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	4413      	add	r3, r2
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801275e:	7ffb      	ldrb	r3, [r7, #31]
 8012760:	2b20      	cmp	r3, #32
 8012762:	d94e      	bls.n	8012802 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012764:	7ffb      	ldrb	r3, [r7, #31]
 8012766:	2b2f      	cmp	r3, #47	; 0x2f
 8012768:	d006      	beq.n	8012778 <create_name+0xc0>
 801276a:	7ffb      	ldrb	r3, [r7, #31]
 801276c:	2b5c      	cmp	r3, #92	; 0x5c
 801276e:	d110      	bne.n	8012792 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012770:	e002      	b.n	8012778 <create_name+0xc0>
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	3301      	adds	r3, #1
 8012776:	617b      	str	r3, [r7, #20]
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	4413      	add	r3, r2
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	2b2f      	cmp	r3, #47	; 0x2f
 8012782:	d0f6      	beq.n	8012772 <create_name+0xba>
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	4413      	add	r3, r2
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	2b5c      	cmp	r3, #92	; 0x5c
 801278e:	d0f0      	beq.n	8012772 <create_name+0xba>
			break;
 8012790:	e038      	b.n	8012804 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012792:	7ffb      	ldrb	r3, [r7, #31]
 8012794:	2b2e      	cmp	r3, #46	; 0x2e
 8012796:	d003      	beq.n	80127a0 <create_name+0xe8>
 8012798:	693a      	ldr	r2, [r7, #16]
 801279a:	69bb      	ldr	r3, [r7, #24]
 801279c:	429a      	cmp	r2, r3
 801279e:	d30c      	bcc.n	80127ba <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	2b0b      	cmp	r3, #11
 80127a4:	d002      	beq.n	80127ac <create_name+0xf4>
 80127a6:	7ffb      	ldrb	r3, [r7, #31]
 80127a8:	2b2e      	cmp	r3, #46	; 0x2e
 80127aa:	d001      	beq.n	80127b0 <create_name+0xf8>
 80127ac:	2306      	movs	r3, #6
 80127ae:	e044      	b.n	801283a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80127b0:	2308      	movs	r3, #8
 80127b2:	613b      	str	r3, [r7, #16]
 80127b4:	230b      	movs	r3, #11
 80127b6:	61bb      	str	r3, [r7, #24]
			continue;
 80127b8:	e022      	b.n	8012800 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80127ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	da04      	bge.n	80127cc <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80127c2:	7ffb      	ldrb	r3, [r7, #31]
 80127c4:	3b80      	subs	r3, #128	; 0x80
 80127c6:	4a1f      	ldr	r2, [pc, #124]	; (8012844 <create_name+0x18c>)
 80127c8:	5cd3      	ldrb	r3, [r2, r3]
 80127ca:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80127cc:	7ffb      	ldrb	r3, [r7, #31]
 80127ce:	4619      	mov	r1, r3
 80127d0:	481d      	ldr	r0, [pc, #116]	; (8012848 <create_name+0x190>)
 80127d2:	f7fe fee5 	bl	80115a0 <chk_chr>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d001      	beq.n	80127e0 <create_name+0x128>
 80127dc:	2306      	movs	r3, #6
 80127de:	e02c      	b.n	801283a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80127e0:	7ffb      	ldrb	r3, [r7, #31]
 80127e2:	2b60      	cmp	r3, #96	; 0x60
 80127e4:	d905      	bls.n	80127f2 <create_name+0x13a>
 80127e6:	7ffb      	ldrb	r3, [r7, #31]
 80127e8:	2b7a      	cmp	r3, #122	; 0x7a
 80127ea:	d802      	bhi.n	80127f2 <create_name+0x13a>
 80127ec:	7ffb      	ldrb	r3, [r7, #31]
 80127ee:	3b20      	subs	r3, #32
 80127f0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	1c5a      	adds	r2, r3, #1
 80127f6:	613a      	str	r2, [r7, #16]
 80127f8:	68ba      	ldr	r2, [r7, #8]
 80127fa:	4413      	add	r3, r2
 80127fc:	7ffa      	ldrb	r2, [r7, #31]
 80127fe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012800:	e7a6      	b.n	8012750 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012802:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012804:	68fa      	ldr	r2, [r7, #12]
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	441a      	add	r2, r3
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d101      	bne.n	8012818 <create_name+0x160>
 8012814:	2306      	movs	r3, #6
 8012816:	e010      	b.n	801283a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	2be5      	cmp	r3, #229	; 0xe5
 801281e:	d102      	bne.n	8012826 <create_name+0x16e>
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	2205      	movs	r2, #5
 8012824:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012826:	7ffb      	ldrb	r3, [r7, #31]
 8012828:	2b20      	cmp	r3, #32
 801282a:	d801      	bhi.n	8012830 <create_name+0x178>
 801282c:	2204      	movs	r2, #4
 801282e:	e000      	b.n	8012832 <create_name+0x17a>
 8012830:	2200      	movs	r2, #0
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	330b      	adds	r3, #11
 8012836:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012838:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801283a:	4618      	mov	r0, r3
 801283c:	3720      	adds	r7, #32
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	08018dfc 	.word	0x08018dfc
 8012848:	08018dac 	.word	0x08018dac

0801284c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b086      	sub	sp, #24
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	2b2f      	cmp	r3, #47	; 0x2f
 8012866:	d00b      	beq.n	8012880 <follow_path+0x34>
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	2b5c      	cmp	r3, #92	; 0x5c
 801286e:	d007      	beq.n	8012880 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	699a      	ldr	r2, [r3, #24]
 8012874:	693b      	ldr	r3, [r7, #16]
 8012876:	609a      	str	r2, [r3, #8]
 8012878:	e00d      	b.n	8012896 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	3301      	adds	r3, #1
 801287e:	603b      	str	r3, [r7, #0]
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b2f      	cmp	r3, #47	; 0x2f
 8012886:	d0f8      	beq.n	801287a <follow_path+0x2e>
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	2b5c      	cmp	r3, #92	; 0x5c
 801288e:	d0f4      	beq.n	801287a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	2200      	movs	r2, #0
 8012894:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	2b1f      	cmp	r3, #31
 801289c:	d80a      	bhi.n	80128b4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2280      	movs	r2, #128	; 0x80
 80128a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80128a6:	2100      	movs	r1, #0
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f7ff fc1e 	bl	80120ea <dir_sdi>
 80128ae:	4603      	mov	r3, r0
 80128b0:	75fb      	strb	r3, [r7, #23]
 80128b2:	e05b      	b.n	801296c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80128b4:	463b      	mov	r3, r7
 80128b6:	4619      	mov	r1, r3
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7ff fefd 	bl	80126b8 <create_name>
 80128be:	4603      	mov	r3, r0
 80128c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80128c2:	7dfb      	ldrb	r3, [r7, #23]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d14c      	bne.n	8012962 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f7ff fe50 	bl	801256e <dir_find>
 80128ce:	4603      	mov	r3, r0
 80128d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80128d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80128da:	7dfb      	ldrb	r3, [r7, #23]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d01b      	beq.n	8012918 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80128e0:	7dfb      	ldrb	r3, [r7, #23]
 80128e2:	2b04      	cmp	r3, #4
 80128e4:	d13f      	bne.n	8012966 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80128e6:	7afb      	ldrb	r3, [r7, #11]
 80128e8:	f003 0320 	and.w	r3, r3, #32
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d00b      	beq.n	8012908 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80128f0:	7afb      	ldrb	r3, [r7, #11]
 80128f2:	f003 0304 	and.w	r3, r3, #4
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d031      	beq.n	801295e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2280      	movs	r2, #128	; 0x80
 80128fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012902:	2300      	movs	r3, #0
 8012904:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012906:	e02e      	b.n	8012966 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012908:	7afb      	ldrb	r3, [r7, #11]
 801290a:	f003 0304 	and.w	r3, r3, #4
 801290e:	2b00      	cmp	r3, #0
 8012910:	d129      	bne.n	8012966 <follow_path+0x11a>
 8012912:	2305      	movs	r3, #5
 8012914:	75fb      	strb	r3, [r7, #23]
				break;
 8012916:	e026      	b.n	8012966 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012918:	7afb      	ldrb	r3, [r7, #11]
 801291a:	f003 0304 	and.w	r3, r3, #4
 801291e:	2b00      	cmp	r3, #0
 8012920:	d123      	bne.n	801296a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	799b      	ldrb	r3, [r3, #6]
 8012926:	f003 0310 	and.w	r3, r3, #16
 801292a:	2b00      	cmp	r3, #0
 801292c:	d102      	bne.n	8012934 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801292e:	2305      	movs	r3, #5
 8012930:	75fb      	strb	r3, [r7, #23]
 8012932:	e01b      	b.n	801296c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	695b      	ldr	r3, [r3, #20]
 801293e:	68fa      	ldr	r2, [r7, #12]
 8012940:	8992      	ldrh	r2, [r2, #12]
 8012942:	fbb3 f0f2 	udiv	r0, r3, r2
 8012946:	fb02 f200 	mul.w	r2, r2, r0
 801294a:	1a9b      	subs	r3, r3, r2
 801294c:	440b      	add	r3, r1
 801294e:	4619      	mov	r1, r3
 8012950:	68f8      	ldr	r0, [r7, #12]
 8012952:	f7ff fd70 	bl	8012436 <ld_clust>
 8012956:	4602      	mov	r2, r0
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	609a      	str	r2, [r3, #8]
 801295c:	e7aa      	b.n	80128b4 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801295e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012960:	e7a8      	b.n	80128b4 <follow_path+0x68>
			if (res != FR_OK) break;
 8012962:	bf00      	nop
 8012964:	e002      	b.n	801296c <follow_path+0x120>
				break;
 8012966:	bf00      	nop
 8012968:	e000      	b.n	801296c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801296a:	bf00      	nop
			}
		}
	}

	return res;
 801296c:	7dfb      	ldrb	r3, [r7, #23]
}
 801296e:	4618      	mov	r0, r3
 8012970:	3718      	adds	r7, #24
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}

08012976 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012976:	b480      	push	{r7}
 8012978:	b087      	sub	sp, #28
 801297a:	af00      	add	r7, sp, #0
 801297c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801297e:	f04f 33ff 	mov.w	r3, #4294967295
 8012982:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d031      	beq.n	80129f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	617b      	str	r3, [r7, #20]
 8012992:	e002      	b.n	801299a <get_ldnumber+0x24>
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	3301      	adds	r3, #1
 8012998:	617b      	str	r3, [r7, #20]
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	781b      	ldrb	r3, [r3, #0]
 801299e:	2b20      	cmp	r3, #32
 80129a0:	d903      	bls.n	80129aa <get_ldnumber+0x34>
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	2b3a      	cmp	r3, #58	; 0x3a
 80129a8:	d1f4      	bne.n	8012994 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	781b      	ldrb	r3, [r3, #0]
 80129ae:	2b3a      	cmp	r3, #58	; 0x3a
 80129b0:	d11c      	bne.n	80129ec <get_ldnumber+0x76>
			tp = *path;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	1c5a      	adds	r2, r3, #1
 80129bc:	60fa      	str	r2, [r7, #12]
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	3b30      	subs	r3, #48	; 0x30
 80129c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	2b09      	cmp	r3, #9
 80129c8:	d80e      	bhi.n	80129e8 <get_ldnumber+0x72>
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d10a      	bne.n	80129e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d107      	bne.n	80129e8 <get_ldnumber+0x72>
					vol = (int)i;
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	3301      	adds	r3, #1
 80129e0:	617b      	str	r3, [r7, #20]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	697a      	ldr	r2, [r7, #20]
 80129e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	e002      	b.n	80129f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80129ec:	2300      	movs	r3, #0
 80129ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80129f0:	693b      	ldr	r3, [r7, #16]
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	371c      	adds	r7, #28
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr
	...

08012a00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	70da      	strb	r2, [r3, #3]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f04f 32ff 	mov.w	r2, #4294967295
 8012a16:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012a18:	6839      	ldr	r1, [r7, #0]
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f7fe ff8c 	bl	8011938 <move_window>
 8012a20:	4603      	mov	r3, r0
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d001      	beq.n	8012a2a <check_fs+0x2a>
 8012a26:	2304      	movs	r3, #4
 8012a28:	e038      	b.n	8012a9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	3338      	adds	r3, #56	; 0x38
 8012a2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7fe fcd0 	bl	80113d8 <ld_word>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d001      	beq.n	8012a48 <check_fs+0x48>
 8012a44:	2303      	movs	r3, #3
 8012a46:	e029      	b.n	8012a9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012a4e:	2be9      	cmp	r3, #233	; 0xe9
 8012a50:	d009      	beq.n	8012a66 <check_fs+0x66>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012a58:	2beb      	cmp	r3, #235	; 0xeb
 8012a5a:	d11e      	bne.n	8012a9a <check_fs+0x9a>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012a62:	2b90      	cmp	r3, #144	; 0x90
 8012a64:	d119      	bne.n	8012a9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	3338      	adds	r3, #56	; 0x38
 8012a6a:	3336      	adds	r3, #54	; 0x36
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7fe fccb 	bl	8011408 <ld_dword>
 8012a72:	4603      	mov	r3, r0
 8012a74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012a78:	4a0a      	ldr	r2, [pc, #40]	; (8012aa4 <check_fs+0xa4>)
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	d101      	bne.n	8012a82 <check_fs+0x82>
 8012a7e:	2300      	movs	r3, #0
 8012a80:	e00c      	b.n	8012a9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	3338      	adds	r3, #56	; 0x38
 8012a86:	3352      	adds	r3, #82	; 0x52
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fe fcbd 	bl	8011408 <ld_dword>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	4b05      	ldr	r3, [pc, #20]	; (8012aa8 <check_fs+0xa8>)
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d101      	bne.n	8012a9a <check_fs+0x9a>
 8012a96:	2300      	movs	r3, #0
 8012a98:	e000      	b.n	8012a9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012a9a:	2302      	movs	r3, #2
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3708      	adds	r7, #8
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	00544146 	.word	0x00544146
 8012aa8:	33544146 	.word	0x33544146

08012aac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b096      	sub	sp, #88	; 0x58
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	60f8      	str	r0, [r7, #12]
 8012ab4:	60b9      	str	r1, [r7, #8]
 8012ab6:	4613      	mov	r3, r2
 8012ab8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	2200      	movs	r2, #0
 8012abe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012ac0:	68f8      	ldr	r0, [r7, #12]
 8012ac2:	f7ff ff58 	bl	8012976 <get_ldnumber>
 8012ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	da01      	bge.n	8012ad2 <find_volume+0x26>
 8012ace:	230b      	movs	r3, #11
 8012ad0:	e268      	b.n	8012fa4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012ad2:	4ab0      	ldr	r2, [pc, #704]	; (8012d94 <find_volume+0x2e8>)
 8012ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ada:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d101      	bne.n	8012ae6 <find_volume+0x3a>
 8012ae2:	230c      	movs	r3, #12
 8012ae4:	e25e      	b.n	8012fa4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012aea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012aec:	79fb      	ldrb	r3, [r7, #7]
 8012aee:	f023 0301 	bic.w	r3, r3, #1
 8012af2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d01a      	beq.n	8012b32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afe:	785b      	ldrb	r3, [r3, #1]
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7fe fbcb 	bl	801129c <disk_status>
 8012b06:	4603      	mov	r3, r0
 8012b08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012b0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b10:	f003 0301 	and.w	r3, r3, #1
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d10c      	bne.n	8012b32 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012b18:	79fb      	ldrb	r3, [r7, #7]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d007      	beq.n	8012b2e <find_volume+0x82>
 8012b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b22:	f003 0304 	and.w	r3, r3, #4
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d001      	beq.n	8012b2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012b2a:	230a      	movs	r3, #10
 8012b2c:	e23a      	b.n	8012fa4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012b2e:	2300      	movs	r3, #0
 8012b30:	e238      	b.n	8012fa4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b34:	2200      	movs	r2, #0
 8012b36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b42:	785b      	ldrb	r3, [r3, #1]
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7fe fbc3 	bl	80112d0 <disk_initialize>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012b50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b54:	f003 0301 	and.w	r3, r3, #1
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d001      	beq.n	8012b60 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012b5c:	2303      	movs	r3, #3
 8012b5e:	e221      	b.n	8012fa4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012b60:	79fb      	ldrb	r3, [r7, #7]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d007      	beq.n	8012b76 <find_volume+0xca>
 8012b66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b6a:	f003 0304 	and.w	r3, r3, #4
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012b72:	230a      	movs	r3, #10
 8012b74:	e216      	b.n	8012fa4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b78:	7858      	ldrb	r0, [r3, #1]
 8012b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7c:	330c      	adds	r3, #12
 8012b7e:	461a      	mov	r2, r3
 8012b80:	2102      	movs	r1, #2
 8012b82:	f7fe fc0b 	bl	801139c <disk_ioctl>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d001      	beq.n	8012b90 <find_volume+0xe4>
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	e209      	b.n	8012fa4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b92:	899b      	ldrh	r3, [r3, #12]
 8012b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b98:	d80d      	bhi.n	8012bb6 <find_volume+0x10a>
 8012b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9c:	899b      	ldrh	r3, [r3, #12]
 8012b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ba2:	d308      	bcc.n	8012bb6 <find_volume+0x10a>
 8012ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba6:	899b      	ldrh	r3, [r3, #12]
 8012ba8:	461a      	mov	r2, r3
 8012baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bac:	899b      	ldrh	r3, [r3, #12]
 8012bae:	3b01      	subs	r3, #1
 8012bb0:	4013      	ands	r3, r2
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d001      	beq.n	8012bba <find_volume+0x10e>
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e1f4      	b.n	8012fa4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012bbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012bc2:	f7ff ff1d 	bl	8012a00 <check_fs>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012bd0:	2b02      	cmp	r3, #2
 8012bd2:	d14b      	bne.n	8012c6c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8012bd8:	e01f      	b.n	8012c1a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bdc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012be2:	011b      	lsls	r3, r3, #4
 8012be4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012be8:	4413      	add	r3, r2
 8012bea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bee:	3304      	adds	r3, #4
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d006      	beq.n	8012c04 <find_volume+0x158>
 8012bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf8:	3308      	adds	r3, #8
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7fe fc04 	bl	8011408 <ld_dword>
 8012c00:	4602      	mov	r2, r0
 8012c02:	e000      	b.n	8012c06 <find_volume+0x15a>
 8012c04:	2200      	movs	r2, #0
 8012c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012c0e:	440b      	add	r3, r1
 8012c10:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c16:	3301      	adds	r3, #1
 8012c18:	643b      	str	r3, [r7, #64]	; 0x40
 8012c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c1c:	2b03      	cmp	r3, #3
 8012c1e:	d9dc      	bls.n	8012bda <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012c20:	2300      	movs	r3, #0
 8012c22:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d002      	beq.n	8012c30 <find_volume+0x184>
 8012c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c2c:	3b01      	subs	r3, #1
 8012c2e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012c38:	4413      	add	r3, r2
 8012c3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012c3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d005      	beq.n	8012c52 <find_volume+0x1a6>
 8012c46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c4a:	f7ff fed9 	bl	8012a00 <check_fs>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	e000      	b.n	8012c54 <find_volume+0x1a8>
 8012c52:	2303      	movs	r3, #3
 8012c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d905      	bls.n	8012c6c <find_volume+0x1c0>
 8012c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c62:	3301      	adds	r3, #1
 8012c64:	643b      	str	r3, [r7, #64]	; 0x40
 8012c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c68:	2b03      	cmp	r3, #3
 8012c6a:	d9e1      	bls.n	8012c30 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c70:	2b04      	cmp	r3, #4
 8012c72:	d101      	bne.n	8012c78 <find_volume+0x1cc>
 8012c74:	2301      	movs	r3, #1
 8012c76:	e195      	b.n	8012fa4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012c78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d901      	bls.n	8012c84 <find_volume+0x1d8>
 8012c80:	230d      	movs	r3, #13
 8012c82:	e18f      	b.n	8012fa4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c86:	3338      	adds	r3, #56	; 0x38
 8012c88:	330b      	adds	r3, #11
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7fe fba4 	bl	80113d8 <ld_word>
 8012c90:	4603      	mov	r3, r0
 8012c92:	461a      	mov	r2, r3
 8012c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c96:	899b      	ldrh	r3, [r3, #12]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d001      	beq.n	8012ca0 <find_volume+0x1f4>
 8012c9c:	230d      	movs	r3, #13
 8012c9e:	e181      	b.n	8012fa4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca2:	3338      	adds	r3, #56	; 0x38
 8012ca4:	3316      	adds	r3, #22
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7fe fb96 	bl	80113d8 <ld_word>
 8012cac:	4603      	mov	r3, r0
 8012cae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d106      	bne.n	8012cc4 <find_volume+0x218>
 8012cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb8:	3338      	adds	r3, #56	; 0x38
 8012cba:	3324      	adds	r3, #36	; 0x24
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7fe fba3 	bl	8011408 <ld_dword>
 8012cc2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012cc8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ccc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd6:	789b      	ldrb	r3, [r3, #2]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	d005      	beq.n	8012ce8 <find_volume+0x23c>
 8012cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cde:	789b      	ldrb	r3, [r3, #2]
 8012ce0:	2b02      	cmp	r3, #2
 8012ce2:	d001      	beq.n	8012ce8 <find_volume+0x23c>
 8012ce4:	230d      	movs	r3, #13
 8012ce6:	e15d      	b.n	8012fa4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cea:	789b      	ldrb	r3, [r3, #2]
 8012cec:	461a      	mov	r2, r3
 8012cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cf0:	fb02 f303 	mul.w	r3, r2, r3
 8012cf4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cfc:	b29a      	uxth	r2, r3
 8012cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d00:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d04:	895b      	ldrh	r3, [r3, #10]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d008      	beq.n	8012d1c <find_volume+0x270>
 8012d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0c:	895b      	ldrh	r3, [r3, #10]
 8012d0e:	461a      	mov	r2, r3
 8012d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d12:	895b      	ldrh	r3, [r3, #10]
 8012d14:	3b01      	subs	r3, #1
 8012d16:	4013      	ands	r3, r2
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d001      	beq.n	8012d20 <find_volume+0x274>
 8012d1c:	230d      	movs	r3, #13
 8012d1e:	e141      	b.n	8012fa4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	3338      	adds	r3, #56	; 0x38
 8012d24:	3311      	adds	r3, #17
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7fe fb56 	bl	80113d8 <ld_word>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	461a      	mov	r2, r3
 8012d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d32:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d36:	891b      	ldrh	r3, [r3, #8]
 8012d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d3a:	8992      	ldrh	r2, [r2, #12]
 8012d3c:	0952      	lsrs	r2, r2, #5
 8012d3e:	b292      	uxth	r2, r2
 8012d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d44:	fb02 f201 	mul.w	r2, r2, r1
 8012d48:	1a9b      	subs	r3, r3, r2
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d001      	beq.n	8012d54 <find_volume+0x2a8>
 8012d50:	230d      	movs	r3, #13
 8012d52:	e127      	b.n	8012fa4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d56:	3338      	adds	r3, #56	; 0x38
 8012d58:	3313      	adds	r3, #19
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7fe fb3c 	bl	80113d8 <ld_word>
 8012d60:	4603      	mov	r3, r0
 8012d62:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d106      	bne.n	8012d78 <find_volume+0x2cc>
 8012d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6c:	3338      	adds	r3, #56	; 0x38
 8012d6e:	3320      	adds	r3, #32
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fe fb49 	bl	8011408 <ld_dword>
 8012d76:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7a:	3338      	adds	r3, #56	; 0x38
 8012d7c:	330e      	adds	r3, #14
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fe fb2a 	bl	80113d8 <ld_word>
 8012d84:	4603      	mov	r3, r0
 8012d86:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012d88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d104      	bne.n	8012d98 <find_volume+0x2ec>
 8012d8e:	230d      	movs	r3, #13
 8012d90:	e108      	b.n	8012fa4 <find_volume+0x4f8>
 8012d92:	bf00      	nop
 8012d94:	2004819c 	.word	0x2004819c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012d98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d9c:	4413      	add	r3, r2
 8012d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012da0:	8911      	ldrh	r1, [r2, #8]
 8012da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012da4:	8992      	ldrh	r2, [r2, #12]
 8012da6:	0952      	lsrs	r2, r2, #5
 8012da8:	b292      	uxth	r2, r2
 8012daa:	fbb1 f2f2 	udiv	r2, r1, r2
 8012dae:	b292      	uxth	r2, r2
 8012db0:	4413      	add	r3, r2
 8012db2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d201      	bcs.n	8012dc0 <find_volume+0x314>
 8012dbc:	230d      	movs	r3, #13
 8012dbe:	e0f1      	b.n	8012fa4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc4:	1ad3      	subs	r3, r2, r3
 8012dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012dc8:	8952      	ldrh	r2, [r2, #10]
 8012dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8012dce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d101      	bne.n	8012dda <find_volume+0x32e>
 8012dd6:	230d      	movs	r3, #13
 8012dd8:	e0e4      	b.n	8012fa4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012dda:	2303      	movs	r3, #3
 8012ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d802      	bhi.n	8012df0 <find_volume+0x344>
 8012dea:	2302      	movs	r3, #2
 8012dec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d802      	bhi.n	8012e00 <find_volume+0x354>
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e02:	1c9a      	adds	r2, r3, #2
 8012e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e06:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e0c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012e0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e12:	441a      	add	r2, r3
 8012e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e16:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012e18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1c:	441a      	add	r2, r3
 8012e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e20:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012e22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e26:	2b03      	cmp	r3, #3
 8012e28:	d11e      	bne.n	8012e68 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2c:	3338      	adds	r3, #56	; 0x38
 8012e2e:	332a      	adds	r3, #42	; 0x2a
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fe fad1 	bl	80113d8 <ld_word>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d001      	beq.n	8012e40 <find_volume+0x394>
 8012e3c:	230d      	movs	r3, #13
 8012e3e:	e0b1      	b.n	8012fa4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e42:	891b      	ldrh	r3, [r3, #8]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <find_volume+0x3a0>
 8012e48:	230d      	movs	r3, #13
 8012e4a:	e0ab      	b.n	8012fa4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4e:	3338      	adds	r3, #56	; 0x38
 8012e50:	332c      	adds	r3, #44	; 0x2c
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fe fad8 	bl	8011408 <ld_dword>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e60:	69db      	ldr	r3, [r3, #28]
 8012e62:	009b      	lsls	r3, r3, #2
 8012e64:	647b      	str	r3, [r7, #68]	; 0x44
 8012e66:	e01f      	b.n	8012ea8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6a:	891b      	ldrh	r3, [r3, #8]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d101      	bne.n	8012e74 <find_volume+0x3c8>
 8012e70:	230d      	movs	r3, #13
 8012e72:	e097      	b.n	8012fa4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e7a:	441a      	add	r2, r3
 8012e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e84:	2b02      	cmp	r3, #2
 8012e86:	d103      	bne.n	8012e90 <find_volume+0x3e4>
 8012e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8a:	69db      	ldr	r3, [r3, #28]
 8012e8c:	005b      	lsls	r3, r3, #1
 8012e8e:	e00a      	b.n	8012ea6 <find_volume+0x3fa>
 8012e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e92:	69da      	ldr	r2, [r3, #28]
 8012e94:	4613      	mov	r3, r2
 8012e96:	005b      	lsls	r3, r3, #1
 8012e98:	4413      	add	r3, r2
 8012e9a:	085a      	lsrs	r2, r3, #1
 8012e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9e:	69db      	ldr	r3, [r3, #28]
 8012ea0:	f003 0301 	and.w	r3, r3, #1
 8012ea4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012ea6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eaa:	6a1a      	ldr	r2, [r3, #32]
 8012eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eae:	899b      	ldrh	r3, [r3, #12]
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eb4:	440b      	add	r3, r1
 8012eb6:	3b01      	subs	r3, #1
 8012eb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012eba:	8989      	ldrh	r1, [r1, #12]
 8012ebc:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d201      	bcs.n	8012ec8 <find_volume+0x41c>
 8012ec4:	230d      	movs	r3, #13
 8012ec6:	e06d      	b.n	8012fa4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eca:	f04f 32ff 	mov.w	r2, #4294967295
 8012ece:	615a      	str	r2, [r3, #20]
 8012ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed2:	695a      	ldr	r2, [r3, #20]
 8012ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eda:	2280      	movs	r2, #128	; 0x80
 8012edc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012ede:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ee2:	2b03      	cmp	r3, #3
 8012ee4:	d149      	bne.n	8012f7a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee8:	3338      	adds	r3, #56	; 0x38
 8012eea:	3330      	adds	r3, #48	; 0x30
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fe fa73 	bl	80113d8 <ld_word>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d140      	bne.n	8012f7a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012efa:	3301      	adds	r3, #1
 8012efc:	4619      	mov	r1, r3
 8012efe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f00:	f7fe fd1a 	bl	8011938 <move_window>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d137      	bne.n	8012f7a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f12:	3338      	adds	r3, #56	; 0x38
 8012f14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7fe fa5d 	bl	80113d8 <ld_word>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	461a      	mov	r2, r3
 8012f22:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d127      	bne.n	8012f7a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2c:	3338      	adds	r3, #56	; 0x38
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fe fa6a 	bl	8011408 <ld_dword>
 8012f34:	4602      	mov	r2, r0
 8012f36:	4b1d      	ldr	r3, [pc, #116]	; (8012fac <find_volume+0x500>)
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	d11e      	bne.n	8012f7a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3e:	3338      	adds	r3, #56	; 0x38
 8012f40:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fe fa5f 	bl	8011408 <ld_dword>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	4b18      	ldr	r3, [pc, #96]	; (8012fb0 <find_volume+0x504>)
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d113      	bne.n	8012f7a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f54:	3338      	adds	r3, #56	; 0x38
 8012f56:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7fe fa54 	bl	8011408 <ld_dword>
 8012f60:	4602      	mov	r2, r0
 8012f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f64:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f68:	3338      	adds	r3, #56	; 0x38
 8012f6a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fe fa4a 	bl	8011408 <ld_dword>
 8012f74:	4602      	mov	r2, r0
 8012f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f78:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012f80:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012f82:	4b0c      	ldr	r3, [pc, #48]	; (8012fb4 <find_volume+0x508>)
 8012f84:	881b      	ldrh	r3, [r3, #0]
 8012f86:	3301      	adds	r3, #1
 8012f88:	b29a      	uxth	r2, r3
 8012f8a:	4b0a      	ldr	r3, [pc, #40]	; (8012fb4 <find_volume+0x508>)
 8012f8c:	801a      	strh	r2, [r3, #0]
 8012f8e:	4b09      	ldr	r3, [pc, #36]	; (8012fb4 <find_volume+0x508>)
 8012f90:	881a      	ldrh	r2, [r3, #0]
 8012f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f94:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f98:	2200      	movs	r2, #0
 8012f9a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f9e:	f7fe fc63 	bl	8011868 <clear_lock>
#endif
	return FR_OK;
 8012fa2:	2300      	movs	r3, #0
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3758      	adds	r7, #88	; 0x58
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	41615252 	.word	0x41615252
 8012fb0:	61417272 	.word	0x61417272
 8012fb4:	200481a0 	.word	0x200481a0

08012fb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012fc2:	2309      	movs	r3, #9
 8012fc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d01c      	beq.n	8013006 <validate+0x4e>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d018      	beq.n	8013006 <validate+0x4e>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d013      	beq.n	8013006 <validate+0x4e>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	889a      	ldrh	r2, [r3, #4]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	88db      	ldrh	r3, [r3, #6]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d10c      	bne.n	8013006 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	785b      	ldrb	r3, [r3, #1]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fe f952 	bl	801129c <disk_status>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	f003 0301 	and.w	r3, r3, #1
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d101      	bne.n	8013006 <validate+0x4e>
			res = FR_OK;
 8013002:	2300      	movs	r3, #0
 8013004:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013006:	7bfb      	ldrb	r3, [r7, #15]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d102      	bne.n	8013012 <validate+0x5a>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	e000      	b.n	8013014 <validate+0x5c>
 8013012:	2300      	movs	r3, #0
 8013014:	683a      	ldr	r2, [r7, #0]
 8013016:	6013      	str	r3, [r2, #0]
	return res;
 8013018:	7bfb      	ldrb	r3, [r7, #15]
}
 801301a:	4618      	mov	r0, r3
 801301c:	3710      	adds	r7, #16
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
	...

08013024 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b088      	sub	sp, #32
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	4613      	mov	r3, r2
 8013030:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013036:	f107 0310 	add.w	r3, r7, #16
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff fc9b 	bl	8012976 <get_ldnumber>
 8013040:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	2b00      	cmp	r3, #0
 8013046:	da01      	bge.n	801304c <f_mount+0x28>
 8013048:	230b      	movs	r3, #11
 801304a:	e02b      	b.n	80130a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801304c:	4a17      	ldr	r2, [pc, #92]	; (80130ac <f_mount+0x88>)
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013054:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d005      	beq.n	8013068 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801305c:	69b8      	ldr	r0, [r7, #24]
 801305e:	f7fe fc03 	bl	8011868 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	2200      	movs	r2, #0
 8013066:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d002      	beq.n	8013074 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2200      	movs	r2, #0
 8013072:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013074:	68fa      	ldr	r2, [r7, #12]
 8013076:	490d      	ldr	r1, [pc, #52]	; (80130ac <f_mount+0x88>)
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d002      	beq.n	801308a <f_mount+0x66>
 8013084:	79fb      	ldrb	r3, [r7, #7]
 8013086:	2b01      	cmp	r3, #1
 8013088:	d001      	beq.n	801308e <f_mount+0x6a>
 801308a:	2300      	movs	r3, #0
 801308c:	e00a      	b.n	80130a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801308e:	f107 010c 	add.w	r1, r7, #12
 8013092:	f107 0308 	add.w	r3, r7, #8
 8013096:	2200      	movs	r2, #0
 8013098:	4618      	mov	r0, r3
 801309a:	f7ff fd07 	bl	8012aac <find_volume>
 801309e:	4603      	mov	r3, r0
 80130a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80130a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3720      	adds	r7, #32
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	2004819c 	.word	0x2004819c

080130b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b098      	sub	sp, #96	; 0x60
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60f8      	str	r0, [r7, #12]
 80130b8:	60b9      	str	r1, [r7, #8]
 80130ba:	4613      	mov	r3, r2
 80130bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d101      	bne.n	80130c8 <f_open+0x18>
 80130c4:	2309      	movs	r3, #9
 80130c6:	e1ba      	b.n	801343e <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80130c8:	79fb      	ldrb	r3, [r7, #7]
 80130ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80130d0:	79fa      	ldrb	r2, [r7, #7]
 80130d2:	f107 0110 	add.w	r1, r7, #16
 80130d6:	f107 0308 	add.w	r3, r7, #8
 80130da:	4618      	mov	r0, r3
 80130dc:	f7ff fce6 	bl	8012aac <find_volume>
 80130e0:	4603      	mov	r3, r0
 80130e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80130e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	f040 819e 	bne.w	801342c <f_open+0x37c>
		dj.obj.fs = fs;
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80130f4:	68ba      	ldr	r2, [r7, #8]
 80130f6:	f107 0314 	add.w	r3, r7, #20
 80130fa:	4611      	mov	r1, r2
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7ff fba5 	bl	801284c <follow_path>
 8013102:	4603      	mov	r3, r0
 8013104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801310c:	2b00      	cmp	r3, #0
 801310e:	d11a      	bne.n	8013146 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013110:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013114:	b25b      	sxtb	r3, r3
 8013116:	2b00      	cmp	r3, #0
 8013118:	da03      	bge.n	8013122 <f_open+0x72>
				res = FR_INVALID_NAME;
 801311a:	2306      	movs	r3, #6
 801311c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013120:	e011      	b.n	8013146 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013122:	79fb      	ldrb	r3, [r7, #7]
 8013124:	f023 0301 	bic.w	r3, r3, #1
 8013128:	2b00      	cmp	r3, #0
 801312a:	bf14      	ite	ne
 801312c:	2301      	movne	r3, #1
 801312e:	2300      	moveq	r3, #0
 8013130:	b2db      	uxtb	r3, r3
 8013132:	461a      	mov	r2, r3
 8013134:	f107 0314 	add.w	r3, r7, #20
 8013138:	4611      	mov	r1, r2
 801313a:	4618      	mov	r0, r3
 801313c:	f7fe fa4c 	bl	80115d8 <chk_lock>
 8013140:	4603      	mov	r3, r0
 8013142:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013146:	79fb      	ldrb	r3, [r7, #7]
 8013148:	f003 031c 	and.w	r3, r3, #28
 801314c:	2b00      	cmp	r3, #0
 801314e:	d07e      	beq.n	801324e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013154:	2b00      	cmp	r3, #0
 8013156:	d017      	beq.n	8013188 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801315c:	2b04      	cmp	r3, #4
 801315e:	d10e      	bne.n	801317e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013160:	f7fe fa96 	bl	8011690 <enq_lock>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
 8013168:	d006      	beq.n	8013178 <f_open+0xc8>
 801316a:	f107 0314 	add.w	r3, r7, #20
 801316e:	4618      	mov	r0, r3
 8013170:	f7ff fa52 	bl	8012618 <dir_register>
 8013174:	4603      	mov	r3, r0
 8013176:	e000      	b.n	801317a <f_open+0xca>
 8013178:	2312      	movs	r3, #18
 801317a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801317e:	79fb      	ldrb	r3, [r7, #7]
 8013180:	f043 0308 	orr.w	r3, r3, #8
 8013184:	71fb      	strb	r3, [r7, #7]
 8013186:	e010      	b.n	80131aa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013188:	7ebb      	ldrb	r3, [r7, #26]
 801318a:	f003 0311 	and.w	r3, r3, #17
 801318e:	2b00      	cmp	r3, #0
 8013190:	d003      	beq.n	801319a <f_open+0xea>
					res = FR_DENIED;
 8013192:	2307      	movs	r3, #7
 8013194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013198:	e007      	b.n	80131aa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801319a:	79fb      	ldrb	r3, [r7, #7]
 801319c:	f003 0304 	and.w	r3, r3, #4
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d002      	beq.n	80131aa <f_open+0xfa>
 80131a4:	2308      	movs	r3, #8
 80131a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80131aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d167      	bne.n	8013282 <f_open+0x1d2>
 80131b2:	79fb      	ldrb	r3, [r7, #7]
 80131b4:	f003 0308 	and.w	r3, r3, #8
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d062      	beq.n	8013282 <f_open+0x1d2>
				dw = GET_FATTIME();
 80131bc:	4ba2      	ldr	r3, [pc, #648]	; (8013448 <f_open+0x398>)
 80131be:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80131c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131c2:	330e      	adds	r3, #14
 80131c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7fe f95c 	bl	8011484 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80131cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ce:	3316      	adds	r3, #22
 80131d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7fe f956 	bl	8011484 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80131d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131da:	330b      	adds	r3, #11
 80131dc:	2220      	movs	r2, #32
 80131de:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131e4:	4611      	mov	r1, r2
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7ff f925 	bl	8012436 <ld_clust>
 80131ec:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131f2:	2200      	movs	r2, #0
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7ff f93d 	bl	8012474 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80131fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fc:	331c      	adds	r3, #28
 80131fe:	2100      	movs	r1, #0
 8013200:	4618      	mov	r0, r3
 8013202:	f7fe f93f 	bl	8011484 <st_dword>
					fs->wflag = 1;
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	2201      	movs	r2, #1
 801320a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801320c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801320e:	2b00      	cmp	r3, #0
 8013210:	d037      	beq.n	8013282 <f_open+0x1d2>
						dw = fs->winsect;
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013216:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013218:	f107 0314 	add.w	r3, r7, #20
 801321c:	2200      	movs	r2, #0
 801321e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013220:	4618      	mov	r0, r3
 8013222:	f7fe fe2d 	bl	8011e80 <remove_chain>
 8013226:	4603      	mov	r3, r0
 8013228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801322c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013230:	2b00      	cmp	r3, #0
 8013232:	d126      	bne.n	8013282 <f_open+0x1d2>
							res = move_window(fs, dw);
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013238:	4618      	mov	r0, r3
 801323a:	f7fe fb7d 	bl	8011938 <move_window>
 801323e:	4603      	mov	r3, r0
 8013240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013248:	3a01      	subs	r2, #1
 801324a:	611a      	str	r2, [r3, #16]
 801324c:	e019      	b.n	8013282 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801324e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013252:	2b00      	cmp	r3, #0
 8013254:	d115      	bne.n	8013282 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013256:	7ebb      	ldrb	r3, [r7, #26]
 8013258:	f003 0310 	and.w	r3, r3, #16
 801325c:	2b00      	cmp	r3, #0
 801325e:	d003      	beq.n	8013268 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013260:	2304      	movs	r3, #4
 8013262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013266:	e00c      	b.n	8013282 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013268:	79fb      	ldrb	r3, [r7, #7]
 801326a:	f003 0302 	and.w	r3, r3, #2
 801326e:	2b00      	cmp	r3, #0
 8013270:	d007      	beq.n	8013282 <f_open+0x1d2>
 8013272:	7ebb      	ldrb	r3, [r7, #26]
 8013274:	f003 0301 	and.w	r3, r3, #1
 8013278:	2b00      	cmp	r3, #0
 801327a:	d002      	beq.n	8013282 <f_open+0x1d2>
						res = FR_DENIED;
 801327c:	2307      	movs	r3, #7
 801327e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013286:	2b00      	cmp	r3, #0
 8013288:	d128      	bne.n	80132dc <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801328a:	79fb      	ldrb	r3, [r7, #7]
 801328c:	f003 0308 	and.w	r3, r3, #8
 8013290:	2b00      	cmp	r3, #0
 8013292:	d003      	beq.n	801329c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013294:	79fb      	ldrb	r3, [r7, #7]
 8013296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801329a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80132a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80132aa:	79fb      	ldrb	r3, [r7, #7]
 80132ac:	f023 0301 	bic.w	r3, r3, #1
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	bf14      	ite	ne
 80132b4:	2301      	movne	r3, #1
 80132b6:	2300      	moveq	r3, #0
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	461a      	mov	r2, r3
 80132bc:	f107 0314 	add.w	r3, r7, #20
 80132c0:	4611      	mov	r1, r2
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fe fa06 	bl	80116d4 <inc_lock>
 80132c8:	4602      	mov	r2, r0
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	691b      	ldr	r3, [r3, #16]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d102      	bne.n	80132dc <f_open+0x22c>
 80132d6:	2302      	movs	r3, #2
 80132d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80132dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	f040 80a3 	bne.w	801342c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132ea:	4611      	mov	r1, r2
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7ff f8a2 	bl	8012436 <ld_clust>
 80132f2:	4602      	mov	r2, r0
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80132f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132fa:	331c      	adds	r3, #28
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7fe f883 	bl	8011408 <ld_dword>
 8013302:	4602      	mov	r2, r0
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2200      	movs	r2, #0
 801330c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801330e:	693a      	ldr	r2, [r7, #16]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	88da      	ldrh	r2, [r3, #6]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	79fa      	ldrb	r2, [r7, #7]
 8013320:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	2200      	movs	r2, #0
 8013326:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2200      	movs	r2, #0
 801332c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2200      	movs	r2, #0
 8013332:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	3330      	adds	r3, #48	; 0x30
 8013338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801333c:	2100      	movs	r1, #0
 801333e:	4618      	mov	r0, r3
 8013340:	f7fe f8ed 	bl	801151e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013344:	79fb      	ldrb	r3, [r7, #7]
 8013346:	f003 0320 	and.w	r3, r3, #32
 801334a:	2b00      	cmp	r3, #0
 801334c:	d06e      	beq.n	801342c <f_open+0x37c>
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d06a      	beq.n	801342c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	68da      	ldr	r2, [r3, #12]
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	895b      	ldrh	r3, [r3, #10]
 8013362:	461a      	mov	r2, r3
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	899b      	ldrh	r3, [r3, #12]
 8013368:	fb03 f302 	mul.w	r3, r3, r2
 801336c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	689b      	ldr	r3, [r3, #8]
 8013372:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	68db      	ldr	r3, [r3, #12]
 8013378:	657b      	str	r3, [r7, #84]	; 0x54
 801337a:	e016      	b.n	80133aa <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013380:	4618      	mov	r0, r3
 8013382:	f7fe fb96 	bl	8011ab2 <get_fat>
 8013386:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801338a:	2b01      	cmp	r3, #1
 801338c:	d802      	bhi.n	8013394 <f_open+0x2e4>
 801338e:	2302      	movs	r3, #2
 8013390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801339a:	d102      	bne.n	80133a2 <f_open+0x2f2>
 801339c:	2301      	movs	r3, #1
 801339e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80133a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80133a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133a6:	1ad3      	subs	r3, r2, r3
 80133a8:	657b      	str	r3, [r7, #84]	; 0x54
 80133aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d103      	bne.n	80133ba <f_open+0x30a>
 80133b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80133b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d8e0      	bhi.n	801337c <f_open+0x2cc>
				}
				fp->clust = clst;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80133be:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80133c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d131      	bne.n	801342c <f_open+0x37c>
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	899b      	ldrh	r3, [r3, #12]
 80133cc:	461a      	mov	r2, r3
 80133ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80133d4:	fb02 f201 	mul.w	r2, r2, r1
 80133d8:	1a9b      	subs	r3, r3, r2
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d026      	beq.n	801342c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7fe fb46 	bl	8011a74 <clust2sect>
 80133e8:	6478      	str	r0, [r7, #68]	; 0x44
 80133ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d103      	bne.n	80133f8 <f_open+0x348>
						res = FR_INT_ERR;
 80133f0:	2302      	movs	r3, #2
 80133f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80133f6:	e019      	b.n	801342c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	899b      	ldrh	r3, [r3, #12]
 80133fc:	461a      	mov	r2, r3
 80133fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013400:	fbb3 f2f2 	udiv	r2, r3, r2
 8013404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013406:	441a      	add	r2, r3
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	7858      	ldrb	r0, [r3, #1]
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	6a1a      	ldr	r2, [r3, #32]
 801341a:	2301      	movs	r3, #1
 801341c:	f7fd ff7e 	bl	801131c <disk_read>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d002      	beq.n	801342c <f_open+0x37c>
 8013426:	2301      	movs	r3, #1
 8013428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801342c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013430:	2b00      	cmp	r3, #0
 8013432:	d002      	beq.n	801343a <f_open+0x38a>
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2200      	movs	r2, #0
 8013438:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801343a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801343e:	4618      	mov	r0, r3
 8013440:	3760      	adds	r7, #96	; 0x60
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	274a0000 	.word	0x274a0000

0801344c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b08e      	sub	sp, #56	; 0x38
 8013450:	af00      	add	r7, sp, #0
 8013452:	60f8      	str	r0, [r7, #12]
 8013454:	60b9      	str	r1, [r7, #8]
 8013456:	607a      	str	r2, [r7, #4]
 8013458:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	2200      	movs	r2, #0
 8013462:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	f107 0214 	add.w	r2, r7, #20
 801346a:	4611      	mov	r1, r2
 801346c:	4618      	mov	r0, r3
 801346e:	f7ff fda3 	bl	8012fb8 <validate>
 8013472:	4603      	mov	r3, r0
 8013474:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801347c:	2b00      	cmp	r3, #0
 801347e:	d107      	bne.n	8013490 <f_read+0x44>
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	7d5b      	ldrb	r3, [r3, #21]
 8013484:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013488:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801348c:	2b00      	cmp	r3, #0
 801348e:	d002      	beq.n	8013496 <f_read+0x4a>
 8013490:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013494:	e135      	b.n	8013702 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	7d1b      	ldrb	r3, [r3, #20]
 801349a:	f003 0301 	and.w	r3, r3, #1
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d101      	bne.n	80134a6 <f_read+0x5a>
 80134a2:	2307      	movs	r3, #7
 80134a4:	e12d      	b.n	8013702 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	68da      	ldr	r2, [r3, #12]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	699b      	ldr	r3, [r3, #24]
 80134ae:	1ad3      	subs	r3, r2, r3
 80134b0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	6a3b      	ldr	r3, [r7, #32]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	f240 811e 	bls.w	80136f8 <f_read+0x2ac>
 80134bc:	6a3b      	ldr	r3, [r7, #32]
 80134be:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80134c0:	e11a      	b.n	80136f8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	699b      	ldr	r3, [r3, #24]
 80134c6:	697a      	ldr	r2, [r7, #20]
 80134c8:	8992      	ldrh	r2, [r2, #12]
 80134ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80134ce:	fb02 f201 	mul.w	r2, r2, r1
 80134d2:	1a9b      	subs	r3, r3, r2
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f040 80d5 	bne.w	8013684 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	699b      	ldr	r3, [r3, #24]
 80134de:	697a      	ldr	r2, [r7, #20]
 80134e0:	8992      	ldrh	r2, [r2, #12]
 80134e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80134e6:	697a      	ldr	r2, [r7, #20]
 80134e8:	8952      	ldrh	r2, [r2, #10]
 80134ea:	3a01      	subs	r2, #1
 80134ec:	4013      	ands	r3, r2
 80134ee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80134f0:	69fb      	ldr	r3, [r7, #28]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d12f      	bne.n	8013556 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	699b      	ldr	r3, [r3, #24]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d103      	bne.n	8013506 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	689b      	ldr	r3, [r3, #8]
 8013502:	633b      	str	r3, [r7, #48]	; 0x30
 8013504:	e013      	b.n	801352e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801350a:	2b00      	cmp	r3, #0
 801350c:	d007      	beq.n	801351e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	699b      	ldr	r3, [r3, #24]
 8013512:	4619      	mov	r1, r3
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f7fe fdb0 	bl	801207a <clmt_clust>
 801351a:	6338      	str	r0, [r7, #48]	; 0x30
 801351c:	e007      	b.n	801352e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801351e:	68fa      	ldr	r2, [r7, #12]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	69db      	ldr	r3, [r3, #28]
 8013524:	4619      	mov	r1, r3
 8013526:	4610      	mov	r0, r2
 8013528:	f7fe fac3 	bl	8011ab2 <get_fat>
 801352c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013530:	2b01      	cmp	r3, #1
 8013532:	d804      	bhi.n	801353e <f_read+0xf2>
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2202      	movs	r2, #2
 8013538:	755a      	strb	r2, [r3, #21]
 801353a:	2302      	movs	r3, #2
 801353c:	e0e1      	b.n	8013702 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013544:	d104      	bne.n	8013550 <f_read+0x104>
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	2201      	movs	r2, #1
 801354a:	755a      	strb	r2, [r3, #21]
 801354c:	2301      	movs	r3, #1
 801354e:	e0d8      	b.n	8013702 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013554:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	69db      	ldr	r3, [r3, #28]
 801355c:	4619      	mov	r1, r3
 801355e:	4610      	mov	r0, r2
 8013560:	f7fe fa88 	bl	8011a74 <clust2sect>
 8013564:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013566:	69bb      	ldr	r3, [r7, #24]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d104      	bne.n	8013576 <f_read+0x12a>
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2202      	movs	r2, #2
 8013570:	755a      	strb	r2, [r3, #21]
 8013572:	2302      	movs	r3, #2
 8013574:	e0c5      	b.n	8013702 <f_read+0x2b6>
			sect += csect;
 8013576:	69ba      	ldr	r2, [r7, #24]
 8013578:	69fb      	ldr	r3, [r7, #28]
 801357a:	4413      	add	r3, r2
 801357c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	899b      	ldrh	r3, [r3, #12]
 8013582:	461a      	mov	r2, r3
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	fbb3 f3f2 	udiv	r3, r3, r2
 801358a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358e:	2b00      	cmp	r3, #0
 8013590:	d041      	beq.n	8013616 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013592:	69fa      	ldr	r2, [r7, #28]
 8013594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013596:	4413      	add	r3, r2
 8013598:	697a      	ldr	r2, [r7, #20]
 801359a:	8952      	ldrh	r2, [r2, #10]
 801359c:	4293      	cmp	r3, r2
 801359e:	d905      	bls.n	80135ac <f_read+0x160>
					cc = fs->csize - csect;
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	895b      	ldrh	r3, [r3, #10]
 80135a4:	461a      	mov	r2, r3
 80135a6:	69fb      	ldr	r3, [r7, #28]
 80135a8:	1ad3      	subs	r3, r2, r3
 80135aa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	7858      	ldrb	r0, [r3, #1]
 80135b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b2:	69ba      	ldr	r2, [r7, #24]
 80135b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135b6:	f7fd feb1 	bl	801131c <disk_read>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d004      	beq.n	80135ca <f_read+0x17e>
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2201      	movs	r2, #1
 80135c4:	755a      	strb	r2, [r3, #21]
 80135c6:	2301      	movs	r3, #1
 80135c8:	e09b      	b.n	8013702 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	7d1b      	ldrb	r3, [r3, #20]
 80135ce:	b25b      	sxtb	r3, r3
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	da18      	bge.n	8013606 <f_read+0x1ba>
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	6a1a      	ldr	r2, [r3, #32]
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	1ad3      	subs	r3, r2, r3
 80135dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135de:	429a      	cmp	r2, r3
 80135e0:	d911      	bls.n	8013606 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	6a1a      	ldr	r2, [r3, #32]
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	1ad3      	subs	r3, r2, r3
 80135ea:	697a      	ldr	r2, [r7, #20]
 80135ec:	8992      	ldrh	r2, [r2, #12]
 80135ee:	fb02 f303 	mul.w	r3, r2, r3
 80135f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135f4:	18d0      	adds	r0, r2, r3
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	899b      	ldrh	r3, [r3, #12]
 8013600:	461a      	mov	r2, r3
 8013602:	f7fd ff6b 	bl	80114dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	899b      	ldrh	r3, [r3, #12]
 801360a:	461a      	mov	r2, r3
 801360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360e:	fb02 f303 	mul.w	r3, r2, r3
 8013612:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013614:	e05c      	b.n	80136d0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	6a1b      	ldr	r3, [r3, #32]
 801361a:	69ba      	ldr	r2, [r7, #24]
 801361c:	429a      	cmp	r2, r3
 801361e:	d02e      	beq.n	801367e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	7d1b      	ldrb	r3, [r3, #20]
 8013624:	b25b      	sxtb	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	da18      	bge.n	801365c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	7858      	ldrb	r0, [r3, #1]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	6a1a      	ldr	r2, [r3, #32]
 8013638:	2301      	movs	r3, #1
 801363a:	f7fd fe8f 	bl	801135c <disk_write>
 801363e:	4603      	mov	r3, r0
 8013640:	2b00      	cmp	r3, #0
 8013642:	d004      	beq.n	801364e <f_read+0x202>
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2201      	movs	r2, #1
 8013648:	755a      	strb	r2, [r3, #21]
 801364a:	2301      	movs	r3, #1
 801364c:	e059      	b.n	8013702 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	7d1b      	ldrb	r3, [r3, #20]
 8013652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013656:	b2da      	uxtb	r2, r3
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	7858      	ldrb	r0, [r3, #1]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013666:	2301      	movs	r3, #1
 8013668:	69ba      	ldr	r2, [r7, #24]
 801366a:	f7fd fe57 	bl	801131c <disk_read>
 801366e:	4603      	mov	r3, r0
 8013670:	2b00      	cmp	r3, #0
 8013672:	d004      	beq.n	801367e <f_read+0x232>
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2201      	movs	r2, #1
 8013678:	755a      	strb	r2, [r3, #21]
 801367a:	2301      	movs	r3, #1
 801367c:	e041      	b.n	8013702 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	69ba      	ldr	r2, [r7, #24]
 8013682:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013684:	697b      	ldr	r3, [r7, #20]
 8013686:	899b      	ldrh	r3, [r3, #12]
 8013688:	4618      	mov	r0, r3
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	699b      	ldr	r3, [r3, #24]
 801368e:	697a      	ldr	r2, [r7, #20]
 8013690:	8992      	ldrh	r2, [r2, #12]
 8013692:	fbb3 f1f2 	udiv	r1, r3, r2
 8013696:	fb02 f201 	mul.w	r2, r2, r1
 801369a:	1a9b      	subs	r3, r3, r2
 801369c:	1ac3      	subs	r3, r0, r3
 801369e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80136a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d901      	bls.n	80136ac <f_read+0x260>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	699b      	ldr	r3, [r3, #24]
 80136b6:	697a      	ldr	r2, [r7, #20]
 80136b8:	8992      	ldrh	r2, [r2, #12]
 80136ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80136be:	fb02 f200 	mul.w	r2, r2, r0
 80136c2:	1a9b      	subs	r3, r3, r2
 80136c4:	440b      	add	r3, r1
 80136c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136c8:	4619      	mov	r1, r3
 80136ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136cc:	f7fd ff06 	bl	80114dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80136d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d4:	4413      	add	r3, r2
 80136d6:	627b      	str	r3, [r7, #36]	; 0x24
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	699a      	ldr	r2, [r3, #24]
 80136dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136de:	441a      	add	r2, r3
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	619a      	str	r2, [r3, #24]
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ea:	441a      	add	r2, r3
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	601a      	str	r2, [r3, #0]
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f4:	1ad3      	subs	r3, r2, r3
 80136f6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f47f aee1 	bne.w	80134c2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013700:	2300      	movs	r3, #0
}
 8013702:	4618      	mov	r0, r3
 8013704:	3738      	adds	r7, #56	; 0x38
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801370a:	b580      	push	{r7, lr}
 801370c:	b08c      	sub	sp, #48	; 0x30
 801370e:	af00      	add	r7, sp, #0
 8013710:	60f8      	str	r0, [r7, #12]
 8013712:	60b9      	str	r1, [r7, #8]
 8013714:	607a      	str	r2, [r7, #4]
 8013716:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	2200      	movs	r2, #0
 8013720:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f107 0210 	add.w	r2, r7, #16
 8013728:	4611      	mov	r1, r2
 801372a:	4618      	mov	r0, r3
 801372c:	f7ff fc44 	bl	8012fb8 <validate>
 8013730:	4603      	mov	r3, r0
 8013732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801373a:	2b00      	cmp	r3, #0
 801373c:	d107      	bne.n	801374e <f_write+0x44>
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	7d5b      	ldrb	r3, [r3, #21]
 8013742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801374a:	2b00      	cmp	r3, #0
 801374c:	d002      	beq.n	8013754 <f_write+0x4a>
 801374e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013752:	e16a      	b.n	8013a2a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	7d1b      	ldrb	r3, [r3, #20]
 8013758:	f003 0302 	and.w	r3, r3, #2
 801375c:	2b00      	cmp	r3, #0
 801375e:	d101      	bne.n	8013764 <f_write+0x5a>
 8013760:	2307      	movs	r3, #7
 8013762:	e162      	b.n	8013a2a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	699a      	ldr	r2, [r3, #24]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	441a      	add	r2, r3
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	699b      	ldr	r3, [r3, #24]
 8013770:	429a      	cmp	r2, r3
 8013772:	f080 814c 	bcs.w	8013a0e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	699b      	ldr	r3, [r3, #24]
 801377a:	43db      	mvns	r3, r3
 801377c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801377e:	e146      	b.n	8013a0e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	699b      	ldr	r3, [r3, #24]
 8013784:	693a      	ldr	r2, [r7, #16]
 8013786:	8992      	ldrh	r2, [r2, #12]
 8013788:	fbb3 f1f2 	udiv	r1, r3, r2
 801378c:	fb02 f201 	mul.w	r2, r2, r1
 8013790:	1a9b      	subs	r3, r3, r2
 8013792:	2b00      	cmp	r3, #0
 8013794:	f040 80f1 	bne.w	801397a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	699b      	ldr	r3, [r3, #24]
 801379c:	693a      	ldr	r2, [r7, #16]
 801379e:	8992      	ldrh	r2, [r2, #12]
 80137a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80137a4:	693a      	ldr	r2, [r7, #16]
 80137a6:	8952      	ldrh	r2, [r2, #10]
 80137a8:	3a01      	subs	r2, #1
 80137aa:	4013      	ands	r3, r2
 80137ac:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d143      	bne.n	801383c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	699b      	ldr	r3, [r3, #24]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d10c      	bne.n	80137d6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80137c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d11a      	bne.n	80137fe <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	2100      	movs	r1, #0
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fe fbbc 	bl	8011f4a <create_chain>
 80137d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80137d4:	e013      	b.n	80137fe <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d007      	beq.n	80137ee <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	699b      	ldr	r3, [r3, #24]
 80137e2:	4619      	mov	r1, r3
 80137e4:	68f8      	ldr	r0, [r7, #12]
 80137e6:	f7fe fc48 	bl	801207a <clmt_clust>
 80137ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80137ec:	e007      	b.n	80137fe <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80137ee:	68fa      	ldr	r2, [r7, #12]
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	69db      	ldr	r3, [r3, #28]
 80137f4:	4619      	mov	r1, r3
 80137f6:	4610      	mov	r0, r2
 80137f8:	f7fe fba7 	bl	8011f4a <create_chain>
 80137fc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80137fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013800:	2b00      	cmp	r3, #0
 8013802:	f000 8109 	beq.w	8013a18 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013808:	2b01      	cmp	r3, #1
 801380a:	d104      	bne.n	8013816 <f_write+0x10c>
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2202      	movs	r2, #2
 8013810:	755a      	strb	r2, [r3, #21]
 8013812:	2302      	movs	r3, #2
 8013814:	e109      	b.n	8013a2a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801381c:	d104      	bne.n	8013828 <f_write+0x11e>
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2201      	movs	r2, #1
 8013822:	755a      	strb	r2, [r3, #21]
 8013824:	2301      	movs	r3, #1
 8013826:	e100      	b.n	8013a2a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801382c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	689b      	ldr	r3, [r3, #8]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d102      	bne.n	801383c <f_write+0x132>
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801383a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	7d1b      	ldrb	r3, [r3, #20]
 8013840:	b25b      	sxtb	r3, r3
 8013842:	2b00      	cmp	r3, #0
 8013844:	da18      	bge.n	8013878 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	7858      	ldrb	r0, [r3, #1]
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	6a1a      	ldr	r2, [r3, #32]
 8013854:	2301      	movs	r3, #1
 8013856:	f7fd fd81 	bl	801135c <disk_write>
 801385a:	4603      	mov	r3, r0
 801385c:	2b00      	cmp	r3, #0
 801385e:	d004      	beq.n	801386a <f_write+0x160>
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2201      	movs	r2, #1
 8013864:	755a      	strb	r2, [r3, #21]
 8013866:	2301      	movs	r3, #1
 8013868:	e0df      	b.n	8013a2a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	7d1b      	ldrb	r3, [r3, #20]
 801386e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013872:	b2da      	uxtb	r2, r3
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013878:	693a      	ldr	r2, [r7, #16]
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	69db      	ldr	r3, [r3, #28]
 801387e:	4619      	mov	r1, r3
 8013880:	4610      	mov	r0, r2
 8013882:	f7fe f8f7 	bl	8011a74 <clust2sect>
 8013886:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d104      	bne.n	8013898 <f_write+0x18e>
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2202      	movs	r2, #2
 8013892:	755a      	strb	r2, [r3, #21]
 8013894:	2302      	movs	r3, #2
 8013896:	e0c8      	b.n	8013a2a <f_write+0x320>
			sect += csect;
 8013898:	697a      	ldr	r2, [r7, #20]
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	4413      	add	r3, r2
 801389e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	899b      	ldrh	r3, [r3, #12]
 80138a4:	461a      	mov	r2, r3
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80138ac:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80138ae:	6a3b      	ldr	r3, [r7, #32]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d043      	beq.n	801393c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80138b4:	69ba      	ldr	r2, [r7, #24]
 80138b6:	6a3b      	ldr	r3, [r7, #32]
 80138b8:	4413      	add	r3, r2
 80138ba:	693a      	ldr	r2, [r7, #16]
 80138bc:	8952      	ldrh	r2, [r2, #10]
 80138be:	4293      	cmp	r3, r2
 80138c0:	d905      	bls.n	80138ce <f_write+0x1c4>
					cc = fs->csize - csect;
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	895b      	ldrh	r3, [r3, #10]
 80138c6:	461a      	mov	r2, r3
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	7858      	ldrb	r0, [r3, #1]
 80138d2:	6a3b      	ldr	r3, [r7, #32]
 80138d4:	697a      	ldr	r2, [r7, #20]
 80138d6:	69f9      	ldr	r1, [r7, #28]
 80138d8:	f7fd fd40 	bl	801135c <disk_write>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d004      	beq.n	80138ec <f_write+0x1e2>
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2201      	movs	r2, #1
 80138e6:	755a      	strb	r2, [r3, #21]
 80138e8:	2301      	movs	r3, #1
 80138ea:	e09e      	b.n	8013a2a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	6a1a      	ldr	r2, [r3, #32]
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	1ad3      	subs	r3, r2, r3
 80138f4:	6a3a      	ldr	r2, [r7, #32]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d918      	bls.n	801392c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	6a1a      	ldr	r2, [r3, #32]
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	1ad3      	subs	r3, r2, r3
 8013908:	693a      	ldr	r2, [r7, #16]
 801390a:	8992      	ldrh	r2, [r2, #12]
 801390c:	fb02 f303 	mul.w	r3, r2, r3
 8013910:	69fa      	ldr	r2, [r7, #28]
 8013912:	18d1      	adds	r1, r2, r3
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	899b      	ldrh	r3, [r3, #12]
 8013918:	461a      	mov	r2, r3
 801391a:	f7fd fddf 	bl	80114dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	7d1b      	ldrb	r3, [r3, #20]
 8013922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013926:	b2da      	uxtb	r2, r3
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	899b      	ldrh	r3, [r3, #12]
 8013930:	461a      	mov	r2, r3
 8013932:	6a3b      	ldr	r3, [r7, #32]
 8013934:	fb02 f303 	mul.w	r3, r2, r3
 8013938:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801393a:	e04b      	b.n	80139d4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	6a1b      	ldr	r3, [r3, #32]
 8013940:	697a      	ldr	r2, [r7, #20]
 8013942:	429a      	cmp	r2, r3
 8013944:	d016      	beq.n	8013974 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	699a      	ldr	r2, [r3, #24]
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801394e:	429a      	cmp	r2, r3
 8013950:	d210      	bcs.n	8013974 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	7858      	ldrb	r0, [r3, #1]
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801395c:	2301      	movs	r3, #1
 801395e:	697a      	ldr	r2, [r7, #20]
 8013960:	f7fd fcdc 	bl	801131c <disk_read>
 8013964:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013966:	2b00      	cmp	r3, #0
 8013968:	d004      	beq.n	8013974 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2201      	movs	r2, #1
 801396e:	755a      	strb	r2, [r3, #21]
 8013970:	2301      	movs	r3, #1
 8013972:	e05a      	b.n	8013a2a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	697a      	ldr	r2, [r7, #20]
 8013978:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	899b      	ldrh	r3, [r3, #12]
 801397e:	4618      	mov	r0, r3
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	699b      	ldr	r3, [r3, #24]
 8013984:	693a      	ldr	r2, [r7, #16]
 8013986:	8992      	ldrh	r2, [r2, #12]
 8013988:	fbb3 f1f2 	udiv	r1, r3, r2
 801398c:	fb02 f201 	mul.w	r2, r2, r1
 8013990:	1a9b      	subs	r3, r3, r2
 8013992:	1ac3      	subs	r3, r0, r3
 8013994:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	429a      	cmp	r2, r3
 801399c:	d901      	bls.n	80139a2 <f_write+0x298>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	699b      	ldr	r3, [r3, #24]
 80139ac:	693a      	ldr	r2, [r7, #16]
 80139ae:	8992      	ldrh	r2, [r2, #12]
 80139b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80139b4:	fb02 f200 	mul.w	r2, r2, r0
 80139b8:	1a9b      	subs	r3, r3, r2
 80139ba:	440b      	add	r3, r1
 80139bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139be:	69f9      	ldr	r1, [r7, #28]
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7fd fd8b 	bl	80114dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	7d1b      	ldrb	r3, [r3, #20]
 80139ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80139ce:	b2da      	uxtb	r2, r3
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80139d4:	69fa      	ldr	r2, [r7, #28]
 80139d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d8:	4413      	add	r3, r2
 80139da:	61fb      	str	r3, [r7, #28]
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	699a      	ldr	r2, [r3, #24]
 80139e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e2:	441a      	add	r2, r3
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	619a      	str	r2, [r3, #24]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	68da      	ldr	r2, [r3, #12]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	699b      	ldr	r3, [r3, #24]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	bf38      	it	cc
 80139f4:	461a      	movcc	r2, r3
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	60da      	str	r2, [r3, #12]
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a00:	441a      	add	r2, r3
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	601a      	str	r2, [r3, #0]
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	1ad3      	subs	r3, r2, r3
 8013a0c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	f47f aeb5 	bne.w	8013780 <f_write+0x76>
 8013a16:	e000      	b.n	8013a1a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013a18:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	7d1b      	ldrb	r3, [r3, #20]
 8013a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a22:	b2da      	uxtb	r2, r3
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3730      	adds	r7, #48	; 0x30
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
	...

08013a34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b086      	sub	sp, #24
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f107 0208 	add.w	r2, r7, #8
 8013a42:	4611      	mov	r1, r2
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7ff fab7 	bl	8012fb8 <validate>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013a4e:	7dfb      	ldrb	r3, [r7, #23]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d167      	bne.n	8013b24 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	7d1b      	ldrb	r3, [r3, #20]
 8013a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d061      	beq.n	8013b24 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	7d1b      	ldrb	r3, [r3, #20]
 8013a64:	b25b      	sxtb	r3, r3
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	da15      	bge.n	8013a96 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	7858      	ldrb	r0, [r3, #1]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6a1a      	ldr	r2, [r3, #32]
 8013a78:	2301      	movs	r3, #1
 8013a7a:	f7fd fc6f 	bl	801135c <disk_write>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d001      	beq.n	8013a88 <f_sync+0x54>
 8013a84:	2301      	movs	r3, #1
 8013a86:	e04e      	b.n	8013b26 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	7d1b      	ldrb	r3, [r3, #20]
 8013a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013a96:	4b26      	ldr	r3, [pc, #152]	; (8013b30 <f_sync+0xfc>)
 8013a98:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013a9a:	68ba      	ldr	r2, [r7, #8]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa0:	4619      	mov	r1, r3
 8013aa2:	4610      	mov	r0, r2
 8013aa4:	f7fd ff48 	bl	8011938 <move_window>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013aac:	7dfb      	ldrb	r3, [r7, #23]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d138      	bne.n	8013b24 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ab6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	330b      	adds	r3, #11
 8013abc:	781a      	ldrb	r2, [r3, #0]
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	330b      	adds	r3, #11
 8013ac2:	f042 0220 	orr.w	r2, r2, #32
 8013ac6:	b2d2      	uxtb	r2, r2
 8013ac8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6818      	ldr	r0, [r3, #0]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	689b      	ldr	r3, [r3, #8]
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	68f9      	ldr	r1, [r7, #12]
 8013ad6:	f7fe fccd 	bl	8012474 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	f103 021c 	add.w	r2, r3, #28
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	68db      	ldr	r3, [r3, #12]
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	4610      	mov	r0, r2
 8013ae8:	f7fd fccc 	bl	8011484 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	3316      	adds	r3, #22
 8013af0:	6939      	ldr	r1, [r7, #16]
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7fd fcc6 	bl	8011484 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	3312      	adds	r3, #18
 8013afc:	2100      	movs	r1, #0
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fd fca5 	bl	801144e <st_word>
					fs->wflag = 1;
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	2201      	movs	r2, #1
 8013b08:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fd ff41 	bl	8011994 <sync_fs>
 8013b12:	4603      	mov	r3, r0
 8013b14:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	7d1b      	ldrb	r3, [r3, #20]
 8013b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013b1e:	b2da      	uxtb	r2, r3
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3718      	adds	r7, #24
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
 8013b2e:	bf00      	nop
 8013b30:	274a0000 	.word	0x274a0000

08013b34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b084      	sub	sp, #16
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f7ff ff79 	bl	8013a34 <f_sync>
 8013b42:	4603      	mov	r3, r0
 8013b44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013b46:	7bfb      	ldrb	r3, [r7, #15]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d118      	bne.n	8013b7e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f107 0208 	add.w	r2, r7, #8
 8013b52:	4611      	mov	r1, r2
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7ff fa2f 	bl	8012fb8 <validate>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013b5e:	7bfb      	ldrb	r3, [r7, #15]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10c      	bne.n	8013b7e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	691b      	ldr	r3, [r3, #16]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fd fe41 	bl	80117f0 <dec_lock>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013b72:	7bfb      	ldrb	r3, [r7, #15]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d102      	bne.n	8013b7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3710      	adds	r7, #16
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013b88:	b590      	push	{r4, r7, lr}
 8013b8a:	b091      	sub	sp, #68	; 0x44
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013b90:	f107 0108 	add.w	r1, r7, #8
 8013b94:	1d3b      	adds	r3, r7, #4
 8013b96:	2200      	movs	r2, #0
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fe ff87 	bl	8012aac <find_volume>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013ba4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d131      	bne.n	8013c10 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013bb0:	687a      	ldr	r2, [r7, #4]
 8013bb2:	f107 030c 	add.w	r3, r7, #12
 8013bb6:	4611      	mov	r1, r2
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fe fe47 	bl	801284c <follow_path>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013bc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d11a      	bne.n	8013c02 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013bcc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013bd0:	b25b      	sxtb	r3, r3
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	da03      	bge.n	8013bde <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	697a      	ldr	r2, [r7, #20]
 8013bda:	619a      	str	r2, [r3, #24]
 8013bdc:	e011      	b.n	8013c02 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013bde:	7cbb      	ldrb	r3, [r7, #18]
 8013be0:	f003 0310 	and.w	r3, r3, #16
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d009      	beq.n	8013bfc <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bec:	68bc      	ldr	r4, [r7, #8]
 8013bee:	4611      	mov	r1, r2
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fe fc20 	bl	8012436 <ld_clust>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	61a3      	str	r3, [r4, #24]
 8013bfa:	e002      	b.n	8013c02 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013bfc:	2305      	movs	r3, #5
 8013bfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013c02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c06:	2b04      	cmp	r3, #4
 8013c08:	d102      	bne.n	8013c10 <f_chdir+0x88>
 8013c0a:	2305      	movs	r3, #5
 8013c0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013c10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3744      	adds	r7, #68	; 0x44
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd90      	pop	{r4, r7, pc}

08013c1c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b090      	sub	sp, #64	; 0x40
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f107 0208 	add.w	r2, r7, #8
 8013c2c:	4611      	mov	r1, r2
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7ff f9c2 	bl	8012fb8 <validate>
 8013c34:	4603      	mov	r3, r0
 8013c36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013c3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d103      	bne.n	8013c4a <f_lseek+0x2e>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	7d5b      	ldrb	r3, [r3, #21]
 8013c46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013c4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d002      	beq.n	8013c58 <f_lseek+0x3c>
 8013c52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c56:	e201      	b.n	801405c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	f000 80d9 	beq.w	8013e14 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c68:	d15a      	bne.n	8013d20 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c6e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c72:	1d1a      	adds	r2, r3, #4
 8013c74:	627a      	str	r2, [r7, #36]	; 0x24
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	617b      	str	r3, [r7, #20]
 8013c7a:	2302      	movs	r3, #2
 8013c7c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d03a      	beq.n	8013d00 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8c:	613b      	str	r3, [r7, #16]
 8013c8e:	2300      	movs	r3, #0
 8013c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c94:	3302      	adds	r3, #2
 8013c96:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9a:	60fb      	str	r3, [r7, #12]
 8013c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7fd ff03 	bl	8011ab2 <get_fat>
 8013cac:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb0:	2b01      	cmp	r3, #1
 8013cb2:	d804      	bhi.n	8013cbe <f_lseek+0xa2>
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2202      	movs	r2, #2
 8013cb8:	755a      	strb	r2, [r3, #21]
 8013cba:	2302      	movs	r3, #2
 8013cbc:	e1ce      	b.n	801405c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cc4:	d104      	bne.n	8013cd0 <f_lseek+0xb4>
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2201      	movs	r2, #1
 8013cca:	755a      	strb	r2, [r3, #21]
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e1c5      	b.n	801405c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d0de      	beq.n	8013c98 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d809      	bhi.n	8013cf6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce4:	1d1a      	adds	r2, r3, #4
 8013ce6:	627a      	str	r2, [r7, #36]	; 0x24
 8013ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cea:	601a      	str	r2, [r3, #0]
 8013cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cee:	1d1a      	adds	r2, r3, #4
 8013cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8013cf2:	693a      	ldr	r2, [r7, #16]
 8013cf4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	69db      	ldr	r3, [r3, #28]
 8013cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d3c4      	bcc.n	8013c8a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d06:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d803      	bhi.n	8013d18 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d12:	2200      	movs	r2, #0
 8013d14:	601a      	str	r2, [r3, #0]
 8013d16:	e19f      	b.n	8014058 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013d18:	2311      	movs	r3, #17
 8013d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013d1e:	e19b      	b.n	8014058 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	683a      	ldr	r2, [r7, #0]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d902      	bls.n	8013d30 <f_lseek+0x114>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	683a      	ldr	r2, [r7, #0]
 8013d34:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	f000 818d 	beq.w	8014058 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	3b01      	subs	r3, #1
 8013d42:	4619      	mov	r1, r3
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f7fe f998 	bl	801207a <clmt_clust>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013d50:	68ba      	ldr	r2, [r7, #8]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	69db      	ldr	r3, [r3, #28]
 8013d56:	4619      	mov	r1, r3
 8013d58:	4610      	mov	r0, r2
 8013d5a:	f7fd fe8b 	bl	8011a74 <clust2sect>
 8013d5e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013d60:	69bb      	ldr	r3, [r7, #24]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d104      	bne.n	8013d70 <f_lseek+0x154>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2202      	movs	r2, #2
 8013d6a:	755a      	strb	r2, [r3, #21]
 8013d6c:	2302      	movs	r3, #2
 8013d6e:	e175      	b.n	801405c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	3b01      	subs	r3, #1
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	8992      	ldrh	r2, [r2, #12]
 8013d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d7c:	68ba      	ldr	r2, [r7, #8]
 8013d7e:	8952      	ldrh	r2, [r2, #10]
 8013d80:	3a01      	subs	r2, #1
 8013d82:	4013      	ands	r3, r2
 8013d84:	69ba      	ldr	r2, [r7, #24]
 8013d86:	4413      	add	r3, r2
 8013d88:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	699b      	ldr	r3, [r3, #24]
 8013d8e:	68ba      	ldr	r2, [r7, #8]
 8013d90:	8992      	ldrh	r2, [r2, #12]
 8013d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d96:	fb02 f201 	mul.w	r2, r2, r1
 8013d9a:	1a9b      	subs	r3, r3, r2
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	f000 815b 	beq.w	8014058 <f_lseek+0x43c>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6a1b      	ldr	r3, [r3, #32]
 8013da6:	69ba      	ldr	r2, [r7, #24]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	f000 8155 	beq.w	8014058 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	7d1b      	ldrb	r3, [r3, #20]
 8013db2:	b25b      	sxtb	r3, r3
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	da18      	bge.n	8013dea <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	7858      	ldrb	r0, [r3, #1]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6a1a      	ldr	r2, [r3, #32]
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	f7fd fac8 	bl	801135c <disk_write>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d004      	beq.n	8013ddc <f_lseek+0x1c0>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2201      	movs	r2, #1
 8013dd6:	755a      	strb	r2, [r3, #21]
 8013dd8:	2301      	movs	r3, #1
 8013dda:	e13f      	b.n	801405c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	7d1b      	ldrb	r3, [r3, #20]
 8013de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013de4:	b2da      	uxtb	r2, r3
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	7858      	ldrb	r0, [r3, #1]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013df4:	2301      	movs	r3, #1
 8013df6:	69ba      	ldr	r2, [r7, #24]
 8013df8:	f7fd fa90 	bl	801131c <disk_read>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d004      	beq.n	8013e0c <f_lseek+0x1f0>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2201      	movs	r2, #1
 8013e06:	755a      	strb	r2, [r3, #21]
 8013e08:	2301      	movs	r3, #1
 8013e0a:	e127      	b.n	801405c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	69ba      	ldr	r2, [r7, #24]
 8013e10:	621a      	str	r2, [r3, #32]
 8013e12:	e121      	b.n	8014058 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	68db      	ldr	r3, [r3, #12]
 8013e18:	683a      	ldr	r2, [r7, #0]
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	d908      	bls.n	8013e30 <f_lseek+0x214>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	7d1b      	ldrb	r3, [r3, #20]
 8013e22:	f003 0302 	and.w	r3, r3, #2
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d102      	bne.n	8013e30 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	68db      	ldr	r3, [r3, #12]
 8013e2e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	699b      	ldr	r3, [r3, #24]
 8013e34:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013e36:	2300      	movs	r3, #0
 8013e38:	637b      	str	r3, [r7, #52]	; 0x34
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e3e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	f000 80b5 	beq.w	8013fb2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	895b      	ldrh	r3, [r3, #10]
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	899b      	ldrh	r3, [r3, #12]
 8013e52:	fb03 f302 	mul.w	r3, r3, r2
 8013e56:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013e58:	6a3b      	ldr	r3, [r7, #32]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d01b      	beq.n	8013e96 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	1e5a      	subs	r2, r3, #1
 8013e62:	69fb      	ldr	r3, [r7, #28]
 8013e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8013e68:	6a3b      	ldr	r3, [r7, #32]
 8013e6a:	1e59      	subs	r1, r3, #1
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d30f      	bcc.n	8013e96 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013e76:	6a3b      	ldr	r3, [r7, #32]
 8013e78:	1e5a      	subs	r2, r3, #1
 8013e7a:	69fb      	ldr	r3, [r7, #28]
 8013e7c:	425b      	negs	r3, r3
 8013e7e:	401a      	ands	r2, r3
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	699b      	ldr	r3, [r3, #24]
 8013e88:	683a      	ldr	r2, [r7, #0]
 8013e8a:	1ad3      	subs	r3, r2, r3
 8013e8c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	69db      	ldr	r3, [r3, #28]
 8013e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8013e94:	e022      	b.n	8013edc <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	689b      	ldr	r3, [r3, #8]
 8013e9a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d119      	bne.n	8013ed6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2100      	movs	r1, #0
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7fe f84f 	bl	8011f4a <create_chain>
 8013eac:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	d104      	bne.n	8013ebe <f_lseek+0x2a2>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2202      	movs	r2, #2
 8013eb8:	755a      	strb	r2, [r3, #21]
 8013eba:	2302      	movs	r3, #2
 8013ebc:	e0ce      	b.n	801405c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ec4:	d104      	bne.n	8013ed0 <f_lseek+0x2b4>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2201      	movs	r2, #1
 8013eca:	755a      	strb	r2, [r3, #21]
 8013ecc:	2301      	movs	r3, #1
 8013ece:	e0c5      	b.n	801405c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ed4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013eda:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d067      	beq.n	8013fb2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013ee2:	e03a      	b.n	8013f5a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013ee4:	683a      	ldr	r2, [r7, #0]
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	1ad3      	subs	r3, r2, r3
 8013eea:	603b      	str	r3, [r7, #0]
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	699a      	ldr	r2, [r3, #24]
 8013ef0:	69fb      	ldr	r3, [r7, #28]
 8013ef2:	441a      	add	r2, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	7d1b      	ldrb	r3, [r3, #20]
 8013efc:	f003 0302 	and.w	r3, r3, #2
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d00b      	beq.n	8013f1c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fe f81e 	bl	8011f4a <create_chain>
 8013f0e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d108      	bne.n	8013f28 <f_lseek+0x30c>
							ofs = 0; break;
 8013f16:	2300      	movs	r3, #0
 8013f18:	603b      	str	r3, [r7, #0]
 8013f1a:	e022      	b.n	8013f62 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fd fdc6 	bl	8011ab2 <get_fat>
 8013f26:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f2e:	d104      	bne.n	8013f3a <f_lseek+0x31e>
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2201      	movs	r2, #1
 8013f34:	755a      	strb	r2, [r3, #21]
 8013f36:	2301      	movs	r3, #1
 8013f38:	e090      	b.n	801405c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	d904      	bls.n	8013f4a <f_lseek+0x32e>
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	69db      	ldr	r3, [r3, #28]
 8013f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d304      	bcc.n	8013f54 <f_lseek+0x338>
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2202      	movs	r2, #2
 8013f4e:	755a      	strb	r2, [r3, #21]
 8013f50:	2302      	movs	r3, #2
 8013f52:	e083      	b.n	801405c <f_lseek+0x440>
					fp->clust = clst;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f58:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013f5a:	683a      	ldr	r2, [r7, #0]
 8013f5c:	69fb      	ldr	r3, [r7, #28]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d8c0      	bhi.n	8013ee4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	699a      	ldr	r2, [r3, #24]
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	441a      	add	r2, r3
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	899b      	ldrh	r3, [r3, #12]
 8013f72:	461a      	mov	r2, r3
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f7a:	fb02 f201 	mul.w	r2, r2, r1
 8013f7e:	1a9b      	subs	r3, r3, r2
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d016      	beq.n	8013fb2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7fd fd73 	bl	8011a74 <clust2sect>
 8013f8e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d104      	bne.n	8013fa0 <f_lseek+0x384>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2202      	movs	r2, #2
 8013f9a:	755a      	strb	r2, [r3, #21]
 8013f9c:	2302      	movs	r3, #2
 8013f9e:	e05d      	b.n	801405c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	899b      	ldrh	r3, [r3, #12]
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fae:	4413      	add	r3, r2
 8013fb0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	699a      	ldr	r2, [r3, #24]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	68db      	ldr	r3, [r3, #12]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d90a      	bls.n	8013fd4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	699a      	ldr	r2, [r3, #24]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	7d1b      	ldrb	r3, [r3, #20]
 8013fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	699b      	ldr	r3, [r3, #24]
 8013fd8:	68ba      	ldr	r2, [r7, #8]
 8013fda:	8992      	ldrh	r2, [r2, #12]
 8013fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8013fe0:	fb02 f201 	mul.w	r2, r2, r1
 8013fe4:	1a9b      	subs	r3, r3, r2
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d036      	beq.n	8014058 <f_lseek+0x43c>
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6a1b      	ldr	r3, [r3, #32]
 8013fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d031      	beq.n	8014058 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	7d1b      	ldrb	r3, [r3, #20]
 8013ff8:	b25b      	sxtb	r3, r3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	da18      	bge.n	8014030 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	7858      	ldrb	r0, [r3, #1]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6a1a      	ldr	r2, [r3, #32]
 801400c:	2301      	movs	r3, #1
 801400e:	f7fd f9a5 	bl	801135c <disk_write>
 8014012:	4603      	mov	r3, r0
 8014014:	2b00      	cmp	r3, #0
 8014016:	d004      	beq.n	8014022 <f_lseek+0x406>
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2201      	movs	r2, #1
 801401c:	755a      	strb	r2, [r3, #21]
 801401e:	2301      	movs	r3, #1
 8014020:	e01c      	b.n	801405c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	7d1b      	ldrb	r3, [r3, #20]
 8014026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801402a:	b2da      	uxtb	r2, r3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	7858      	ldrb	r0, [r3, #1]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801403a:	2301      	movs	r3, #1
 801403c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801403e:	f7fd f96d 	bl	801131c <disk_read>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d004      	beq.n	8014052 <f_lseek+0x436>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2201      	movs	r2, #1
 801404c:	755a      	strb	r2, [r3, #21]
 801404e:	2301      	movs	r3, #1
 8014050:	e004      	b.n	801405c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014056:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014058:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801405c:	4618      	mov	r0, r3
 801405e:	3740      	adds	r7, #64	; 0x40
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b09e      	sub	sp, #120	; 0x78
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801406c:	2300      	movs	r3, #0
 801406e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014070:	f107 010c 	add.w	r1, r7, #12
 8014074:	1d3b      	adds	r3, r7, #4
 8014076:	2202      	movs	r2, #2
 8014078:	4618      	mov	r0, r3
 801407a:	f7fe fd17 	bl	8012aac <find_volume>
 801407e:	4603      	mov	r3, r0
 8014080:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014088:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801408c:	2b00      	cmp	r3, #0
 801408e:	f040 80a4 	bne.w	80141da <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014098:	4611      	mov	r1, r2
 801409a:	4618      	mov	r0, r3
 801409c:	f7fe fbd6 	bl	801284c <follow_path>
 80140a0:	4603      	mov	r3, r0
 80140a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80140a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d108      	bne.n	80140c0 <f_unlink+0x5c>
 80140ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80140b2:	f003 0320 	and.w	r3, r3, #32
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d002      	beq.n	80140c0 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80140ba:	2306      	movs	r3, #6
 80140bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80140c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d108      	bne.n	80140da <f_unlink+0x76>
 80140c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80140cc:	2102      	movs	r1, #2
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7fd fa82 	bl	80115d8 <chk_lock>
 80140d4:	4603      	mov	r3, r0
 80140d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80140da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d17b      	bne.n	80141da <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80140e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80140e6:	b25b      	sxtb	r3, r3
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	da03      	bge.n	80140f4 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80140ec:	2306      	movs	r3, #6
 80140ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80140f2:	e008      	b.n	8014106 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80140f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80140f8:	f003 0301 	and.w	r3, r3, #1
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d002      	beq.n	8014106 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014100:	2307      	movs	r3, #7
 8014102:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8014106:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801410a:	2b00      	cmp	r3, #0
 801410c:	d13d      	bne.n	801418a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014112:	4611      	mov	r1, r2
 8014114:	4618      	mov	r0, r3
 8014116:	f7fe f98e 	bl	8012436 <ld_clust>
 801411a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801411c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014120:	f003 0310 	and.w	r3, r3, #16
 8014124:	2b00      	cmp	r3, #0
 8014126:	d030      	beq.n	801418a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	699b      	ldr	r3, [r3, #24]
 801412c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801412e:	429a      	cmp	r2, r3
 8014130:	d103      	bne.n	801413a <f_unlink+0xd6>
						res = FR_DENIED;
 8014132:	2307      	movs	r3, #7
 8014134:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014138:	e027      	b.n	801418a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801413e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014140:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8014142:	f107 0310 	add.w	r3, r7, #16
 8014146:	2100      	movs	r1, #0
 8014148:	4618      	mov	r0, r3
 801414a:	f7fd ffce 	bl	80120ea <dir_sdi>
 801414e:	4603      	mov	r3, r0
 8014150:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8014154:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014158:	2b00      	cmp	r3, #0
 801415a:	d116      	bne.n	801418a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801415c:	f107 0310 	add.w	r3, r7, #16
 8014160:	2100      	movs	r1, #0
 8014162:	4618      	mov	r0, r3
 8014164:	f7fe f9a6 	bl	80124b4 <dir_read>
 8014168:	4603      	mov	r3, r0
 801416a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801416e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014172:	2b00      	cmp	r3, #0
 8014174:	d102      	bne.n	801417c <f_unlink+0x118>
 8014176:	2307      	movs	r3, #7
 8014178:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801417c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014180:	2b04      	cmp	r3, #4
 8014182:	d102      	bne.n	801418a <f_unlink+0x126>
 8014184:	2300      	movs	r3, #0
 8014186:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801418a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801418e:	2b00      	cmp	r3, #0
 8014190:	d123      	bne.n	80141da <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014192:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014196:	4618      	mov	r0, r3
 8014198:	f7fe fa70 	bl	801267c <dir_remove>
 801419c:	4603      	mov	r3, r0
 801419e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80141a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d10c      	bne.n	80141c4 <f_unlink+0x160>
 80141aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d009      	beq.n	80141c4 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80141b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80141b4:	2200      	movs	r2, #0
 80141b6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fd fe61 	bl	8011e80 <remove_chain>
 80141be:	4603      	mov	r3, r0
 80141c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80141c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d106      	bne.n	80141da <f_unlink+0x176>
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7fd fbe0 	bl	8011994 <sync_fs>
 80141d4:	4603      	mov	r3, r0
 80141d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80141da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3778      	adds	r7, #120	; 0x78
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}
	...

080141e8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b096      	sub	sp, #88	; 0x58
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80141f0:	f107 0108 	add.w	r1, r7, #8
 80141f4:	1d3b      	adds	r3, r7, #4
 80141f6:	2202      	movs	r2, #2
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7fe fc57 	bl	8012aac <find_volume>
 80141fe:	4603      	mov	r3, r0
 8014200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801420c:	2b00      	cmp	r3, #0
 801420e:	f040 80fe 	bne.w	801440e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	f107 030c 	add.w	r3, r7, #12
 8014218:	4611      	mov	r1, r2
 801421a:	4618      	mov	r0, r3
 801421c:	f7fe fb16 	bl	801284c <follow_path>
 8014220:	4603      	mov	r3, r0
 8014222:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014226:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801422a:	2b00      	cmp	r3, #0
 801422c:	d102      	bne.n	8014234 <f_mkdir+0x4c>
 801422e:	2308      	movs	r3, #8
 8014230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014238:	2b04      	cmp	r3, #4
 801423a:	d108      	bne.n	801424e <f_mkdir+0x66>
 801423c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014240:	f003 0320 	and.w	r3, r3, #32
 8014244:	2b00      	cmp	r3, #0
 8014246:	d002      	beq.n	801424e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014248:	2306      	movs	r3, #6
 801424a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801424e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014252:	2b04      	cmp	r3, #4
 8014254:	f040 80db 	bne.w	801440e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014258:	f107 030c 	add.w	r3, r7, #12
 801425c:	2100      	movs	r1, #0
 801425e:	4618      	mov	r0, r3
 8014260:	f7fd fe73 	bl	8011f4a <create_chain>
 8014264:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	895b      	ldrh	r3, [r3, #10]
 801426a:	461a      	mov	r2, r3
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	899b      	ldrh	r3, [r3, #12]
 8014270:	fb03 f302 	mul.w	r3, r3, r2
 8014274:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014276:	2300      	movs	r3, #0
 8014278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801427c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801427e:	2b00      	cmp	r3, #0
 8014280:	d102      	bne.n	8014288 <f_mkdir+0xa0>
 8014282:	2307      	movs	r3, #7
 8014284:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801428a:	2b01      	cmp	r3, #1
 801428c:	d102      	bne.n	8014294 <f_mkdir+0xac>
 801428e:	2302      	movs	r3, #2
 8014290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801429a:	d102      	bne.n	80142a2 <f_mkdir+0xba>
 801429c:	2301      	movs	r3, #1
 801429e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80142a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d106      	bne.n	80142b8 <f_mkdir+0xd0>
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7fd faff 	bl	80118b0 <sync_window>
 80142b2:	4603      	mov	r3, r0
 80142b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80142b8:	4b58      	ldr	r3, [pc, #352]	; (801441c <f_mkdir+0x234>)
 80142ba:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80142bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d16c      	bne.n	801439e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fd fbd3 	bl	8011a74 <clust2sect>
 80142ce:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	3338      	adds	r3, #56	; 0x38
 80142d4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	899b      	ldrh	r3, [r3, #12]
 80142da:	461a      	mov	r2, r3
 80142dc:	2100      	movs	r1, #0
 80142de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80142e0:	f7fd f91d 	bl	801151e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80142e4:	220b      	movs	r2, #11
 80142e6:	2120      	movs	r1, #32
 80142e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80142ea:	f7fd f918 	bl	801151e <mem_set>
					dir[DIR_Name] = '.';
 80142ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142f0:	222e      	movs	r2, #46	; 0x2e
 80142f2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80142f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142f6:	330b      	adds	r3, #11
 80142f8:	2210      	movs	r2, #16
 80142fa:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80142fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142fe:	3316      	adds	r3, #22
 8014300:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014302:	4618      	mov	r0, r3
 8014304:	f7fd f8be 	bl	8011484 <st_dword>
					st_clust(fs, dir, dcl);
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801430c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801430e:	4618      	mov	r0, r3
 8014310:	f7fe f8b0 	bl	8012474 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014316:	3320      	adds	r3, #32
 8014318:	2220      	movs	r2, #32
 801431a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801431c:	4618      	mov	r0, r3
 801431e:	f7fd f8dd 	bl	80114dc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014324:	3321      	adds	r3, #33	; 0x21
 8014326:	222e      	movs	r2, #46	; 0x2e
 8014328:	701a      	strb	r2, [r3, #0]
 801432a:	697b      	ldr	r3, [r7, #20]
 801432c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	2b03      	cmp	r3, #3
 8014334:	d106      	bne.n	8014344 <f_mkdir+0x15c>
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801433a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801433c:	429a      	cmp	r2, r3
 801433e:	d101      	bne.n	8014344 <f_mkdir+0x15c>
 8014340:	2300      	movs	r3, #0
 8014342:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014344:	68b8      	ldr	r0, [r7, #8]
 8014346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014348:	3320      	adds	r3, #32
 801434a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801434c:	4619      	mov	r1, r3
 801434e:	f7fe f891 	bl	8012474 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	895b      	ldrh	r3, [r3, #10]
 8014356:	653b      	str	r3, [r7, #80]	; 0x50
 8014358:	e01c      	b.n	8014394 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801435c:	1c5a      	adds	r2, r3, #1
 801435e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014360:	68ba      	ldr	r2, [r7, #8]
 8014362:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	2201      	movs	r2, #1
 8014368:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	4618      	mov	r0, r3
 801436e:	f7fd fa9f 	bl	80118b0 <sync_window>
 8014372:	4603      	mov	r3, r0
 8014374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801437c:	2b00      	cmp	r3, #0
 801437e:	d10d      	bne.n	801439c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	899b      	ldrh	r3, [r3, #12]
 8014384:	461a      	mov	r2, r3
 8014386:	2100      	movs	r1, #0
 8014388:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801438a:	f7fd f8c8 	bl	801151e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801438e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014390:	3b01      	subs	r3, #1
 8014392:	653b      	str	r3, [r7, #80]	; 0x50
 8014394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014396:	2b00      	cmp	r3, #0
 8014398:	d1df      	bne.n	801435a <f_mkdir+0x172>
 801439a:	e000      	b.n	801439e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801439c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801439e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d107      	bne.n	80143b6 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80143a6:	f107 030c 	add.w	r3, r7, #12
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7fe f934 	bl	8012618 <dir_register>
 80143b0:	4603      	mov	r3, r0
 80143b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80143b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d120      	bne.n	8014400 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80143be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80143c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143c4:	3316      	adds	r3, #22
 80143c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7fd f85b 	bl	8011484 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80143d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7fe f84d 	bl	8012474 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80143da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143dc:	330b      	adds	r3, #11
 80143de:	2210      	movs	r2, #16
 80143e0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	2201      	movs	r2, #1
 80143e6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80143e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d10e      	bne.n	801440e <f_mkdir+0x226>
					res = sync_fs(fs);
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fd face 	bl	8011994 <sync_fs>
 80143f8:	4603      	mov	r3, r0
 80143fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80143fe:	e006      	b.n	801440e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014400:	f107 030c 	add.w	r3, r7, #12
 8014404:	2200      	movs	r2, #0
 8014406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014408:	4618      	mov	r0, r3
 801440a:	f7fd fd39 	bl	8011e80 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801440e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014412:	4618      	mov	r0, r3
 8014414:	3758      	adds	r7, #88	; 0x58
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}
 801441a:	bf00      	nop
 801441c:	274a0000 	.word	0x274a0000

08014420 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b088      	sub	sp, #32
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801442c:	2300      	movs	r3, #0
 801442e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014434:	e017      	b.n	8014466 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014436:	f107 0310 	add.w	r3, r7, #16
 801443a:	f107 0114 	add.w	r1, r7, #20
 801443e:	2201      	movs	r2, #1
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f7ff f803 	bl	801344c <f_read>
		if (rc != 1) break;
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	2b01      	cmp	r3, #1
 801444a:	d112      	bne.n	8014472 <f_gets+0x52>
		c = s[0];
 801444c:	7d3b      	ldrb	r3, [r7, #20]
 801444e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	1c5a      	adds	r2, r3, #1
 8014454:	61ba      	str	r2, [r7, #24]
 8014456:	7dfa      	ldrb	r2, [r7, #23]
 8014458:	701a      	strb	r2, [r3, #0]
		n++;
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	3301      	adds	r3, #1
 801445e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014460:	7dfb      	ldrb	r3, [r7, #23]
 8014462:	2b0a      	cmp	r3, #10
 8014464:	d007      	beq.n	8014476 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	3b01      	subs	r3, #1
 801446a:	69fa      	ldr	r2, [r7, #28]
 801446c:	429a      	cmp	r2, r3
 801446e:	dbe2      	blt.n	8014436 <f_gets+0x16>
 8014470:	e002      	b.n	8014478 <f_gets+0x58>
		if (rc != 1) break;
 8014472:	bf00      	nop
 8014474:	e000      	b.n	8014478 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014476:	bf00      	nop
	}
	*p = 0;
 8014478:	69bb      	ldr	r3, [r7, #24]
 801447a:	2200      	movs	r2, #0
 801447c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801447e:	69fb      	ldr	r3, [r7, #28]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d001      	beq.n	8014488 <f_gets+0x68>
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	e000      	b.n	801448a <f_gets+0x6a>
 8014488:	2300      	movs	r3, #0
}
 801448a:	4618      	mov	r0, r3
 801448c:	3720      	adds	r7, #32
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
	...

08014494 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014494:	b480      	push	{r7}
 8014496:	b087      	sub	sp, #28
 8014498:	af00      	add	r7, sp, #0
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	4613      	mov	r3, r2
 80144a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80144a2:	2301      	movs	r3, #1
 80144a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80144aa:	4b1f      	ldr	r3, [pc, #124]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144ac:	7a5b      	ldrb	r3, [r3, #9]
 80144ae:	b2db      	uxtb	r3, r3
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d131      	bne.n	8014518 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80144b4:	4b1c      	ldr	r3, [pc, #112]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144b6:	7a5b      	ldrb	r3, [r3, #9]
 80144b8:	b2db      	uxtb	r3, r3
 80144ba:	461a      	mov	r2, r3
 80144bc:	4b1a      	ldr	r3, [pc, #104]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144be:	2100      	movs	r1, #0
 80144c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80144c2:	4b19      	ldr	r3, [pc, #100]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144c4:	7a5b      	ldrb	r3, [r3, #9]
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	4a17      	ldr	r2, [pc, #92]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	4413      	add	r3, r2
 80144ce:	68fa      	ldr	r2, [r7, #12]
 80144d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80144d2:	4b15      	ldr	r3, [pc, #84]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144d4:	7a5b      	ldrb	r3, [r3, #9]
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	461a      	mov	r2, r3
 80144da:	4b13      	ldr	r3, [pc, #76]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144dc:	4413      	add	r3, r2
 80144de:	79fa      	ldrb	r2, [r7, #7]
 80144e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80144e2:	4b11      	ldr	r3, [pc, #68]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144e4:	7a5b      	ldrb	r3, [r3, #9]
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	1c5a      	adds	r2, r3, #1
 80144ea:	b2d1      	uxtb	r1, r2
 80144ec:	4a0e      	ldr	r2, [pc, #56]	; (8014528 <FATFS_LinkDriverEx+0x94>)
 80144ee:	7251      	strb	r1, [r2, #9]
 80144f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80144f2:	7dbb      	ldrb	r3, [r7, #22]
 80144f4:	3330      	adds	r3, #48	; 0x30
 80144f6:	b2da      	uxtb	r2, r3
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	3301      	adds	r3, #1
 8014500:	223a      	movs	r2, #58	; 0x3a
 8014502:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	3302      	adds	r3, #2
 8014508:	222f      	movs	r2, #47	; 0x2f
 801450a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	3303      	adds	r3, #3
 8014510:	2200      	movs	r2, #0
 8014512:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014514:	2300      	movs	r3, #0
 8014516:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014518:	7dfb      	ldrb	r3, [r7, #23]
}
 801451a:	4618      	mov	r0, r3
 801451c:	371c      	adds	r7, #28
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop
 8014528:	200481c4 	.word	0x200481c4

0801452c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b082      	sub	sp, #8
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014536:	2200      	movs	r2, #0
 8014538:	6839      	ldr	r1, [r7, #0]
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7ff ffaa 	bl	8014494 <FATFS_LinkDriverEx>
 8014540:	4603      	mov	r3, r0
}
 8014542:	4618      	mov	r0, r3
 8014544:	3708      	adds	r7, #8
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}

0801454a <__cxa_guard_acquire>:
 801454a:	6803      	ldr	r3, [r0, #0]
 801454c:	07db      	lsls	r3, r3, #31
 801454e:	d406      	bmi.n	801455e <__cxa_guard_acquire+0x14>
 8014550:	7843      	ldrb	r3, [r0, #1]
 8014552:	b103      	cbz	r3, 8014556 <__cxa_guard_acquire+0xc>
 8014554:	deff      	udf	#255	; 0xff
 8014556:	2301      	movs	r3, #1
 8014558:	7043      	strb	r3, [r0, #1]
 801455a:	4618      	mov	r0, r3
 801455c:	4770      	bx	lr
 801455e:	2000      	movs	r0, #0
 8014560:	4770      	bx	lr

08014562 <__cxa_guard_release>:
 8014562:	2301      	movs	r3, #1
 8014564:	6003      	str	r3, [r0, #0]
 8014566:	4770      	bx	lr

08014568 <__errno>:
 8014568:	4b01      	ldr	r3, [pc, #4]	; (8014570 <__errno+0x8>)
 801456a:	6818      	ldr	r0, [r3, #0]
 801456c:	4770      	bx	lr
 801456e:	bf00      	nop
 8014570:	2000000c 	.word	0x2000000c

08014574 <__libc_init_array>:
 8014574:	b570      	push	{r4, r5, r6, lr}
 8014576:	4e0d      	ldr	r6, [pc, #52]	; (80145ac <__libc_init_array+0x38>)
 8014578:	4c0d      	ldr	r4, [pc, #52]	; (80145b0 <__libc_init_array+0x3c>)
 801457a:	1ba4      	subs	r4, r4, r6
 801457c:	10a4      	asrs	r4, r4, #2
 801457e:	2500      	movs	r5, #0
 8014580:	42a5      	cmp	r5, r4
 8014582:	d109      	bne.n	8014598 <__libc_init_array+0x24>
 8014584:	4e0b      	ldr	r6, [pc, #44]	; (80145b4 <__libc_init_array+0x40>)
 8014586:	4c0c      	ldr	r4, [pc, #48]	; (80145b8 <__libc_init_array+0x44>)
 8014588:	f004 f9e8 	bl	801895c <_init>
 801458c:	1ba4      	subs	r4, r4, r6
 801458e:	10a4      	asrs	r4, r4, #2
 8014590:	2500      	movs	r5, #0
 8014592:	42a5      	cmp	r5, r4
 8014594:	d105      	bne.n	80145a2 <__libc_init_array+0x2e>
 8014596:	bd70      	pop	{r4, r5, r6, pc}
 8014598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801459c:	4798      	blx	r3
 801459e:	3501      	adds	r5, #1
 80145a0:	e7ee      	b.n	8014580 <__libc_init_array+0xc>
 80145a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80145a6:	4798      	blx	r3
 80145a8:	3501      	adds	r5, #1
 80145aa:	e7f2      	b.n	8014592 <__libc_init_array+0x1e>
 80145ac:	080191b4 	.word	0x080191b4
 80145b0:	080191b4 	.word	0x080191b4
 80145b4:	080191b4 	.word	0x080191b4
 80145b8:	080191bc 	.word	0x080191bc

080145bc <memset>:
 80145bc:	4402      	add	r2, r0
 80145be:	4603      	mov	r3, r0
 80145c0:	4293      	cmp	r3, r2
 80145c2:	d100      	bne.n	80145c6 <memset+0xa>
 80145c4:	4770      	bx	lr
 80145c6:	f803 1b01 	strb.w	r1, [r3], #1
 80145ca:	e7f9      	b.n	80145c0 <memset+0x4>

080145cc <__cvt>:
 80145cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145d0:	ec55 4b10 	vmov	r4, r5, d0
 80145d4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80145d6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80145da:	2d00      	cmp	r5, #0
 80145dc:	460e      	mov	r6, r1
 80145de:	4691      	mov	r9, r2
 80145e0:	4619      	mov	r1, r3
 80145e2:	bfb8      	it	lt
 80145e4:	4622      	movlt	r2, r4
 80145e6:	462b      	mov	r3, r5
 80145e8:	f027 0720 	bic.w	r7, r7, #32
 80145ec:	bfbb      	ittet	lt
 80145ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80145f2:	461d      	movlt	r5, r3
 80145f4:	2300      	movge	r3, #0
 80145f6:	232d      	movlt	r3, #45	; 0x2d
 80145f8:	bfb8      	it	lt
 80145fa:	4614      	movlt	r4, r2
 80145fc:	2f46      	cmp	r7, #70	; 0x46
 80145fe:	700b      	strb	r3, [r1, #0]
 8014600:	d004      	beq.n	801460c <__cvt+0x40>
 8014602:	2f45      	cmp	r7, #69	; 0x45
 8014604:	d100      	bne.n	8014608 <__cvt+0x3c>
 8014606:	3601      	adds	r6, #1
 8014608:	2102      	movs	r1, #2
 801460a:	e000      	b.n	801460e <__cvt+0x42>
 801460c:	2103      	movs	r1, #3
 801460e:	ab03      	add	r3, sp, #12
 8014610:	9301      	str	r3, [sp, #4]
 8014612:	ab02      	add	r3, sp, #8
 8014614:	9300      	str	r3, [sp, #0]
 8014616:	4632      	mov	r2, r6
 8014618:	4653      	mov	r3, sl
 801461a:	ec45 4b10 	vmov	d0, r4, r5
 801461e:	f001 fdff 	bl	8016220 <_dtoa_r>
 8014622:	2f47      	cmp	r7, #71	; 0x47
 8014624:	4680      	mov	r8, r0
 8014626:	d102      	bne.n	801462e <__cvt+0x62>
 8014628:	f019 0f01 	tst.w	r9, #1
 801462c:	d026      	beq.n	801467c <__cvt+0xb0>
 801462e:	2f46      	cmp	r7, #70	; 0x46
 8014630:	eb08 0906 	add.w	r9, r8, r6
 8014634:	d111      	bne.n	801465a <__cvt+0x8e>
 8014636:	f898 3000 	ldrb.w	r3, [r8]
 801463a:	2b30      	cmp	r3, #48	; 0x30
 801463c:	d10a      	bne.n	8014654 <__cvt+0x88>
 801463e:	2200      	movs	r2, #0
 8014640:	2300      	movs	r3, #0
 8014642:	4620      	mov	r0, r4
 8014644:	4629      	mov	r1, r5
 8014646:	f7ec fa57 	bl	8000af8 <__aeabi_dcmpeq>
 801464a:	b918      	cbnz	r0, 8014654 <__cvt+0x88>
 801464c:	f1c6 0601 	rsb	r6, r6, #1
 8014650:	f8ca 6000 	str.w	r6, [sl]
 8014654:	f8da 3000 	ldr.w	r3, [sl]
 8014658:	4499      	add	r9, r3
 801465a:	2200      	movs	r2, #0
 801465c:	2300      	movs	r3, #0
 801465e:	4620      	mov	r0, r4
 8014660:	4629      	mov	r1, r5
 8014662:	f7ec fa49 	bl	8000af8 <__aeabi_dcmpeq>
 8014666:	b938      	cbnz	r0, 8014678 <__cvt+0xac>
 8014668:	2230      	movs	r2, #48	; 0x30
 801466a:	9b03      	ldr	r3, [sp, #12]
 801466c:	454b      	cmp	r3, r9
 801466e:	d205      	bcs.n	801467c <__cvt+0xb0>
 8014670:	1c59      	adds	r1, r3, #1
 8014672:	9103      	str	r1, [sp, #12]
 8014674:	701a      	strb	r2, [r3, #0]
 8014676:	e7f8      	b.n	801466a <__cvt+0x9e>
 8014678:	f8cd 900c 	str.w	r9, [sp, #12]
 801467c:	9b03      	ldr	r3, [sp, #12]
 801467e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014680:	eba3 0308 	sub.w	r3, r3, r8
 8014684:	4640      	mov	r0, r8
 8014686:	6013      	str	r3, [r2, #0]
 8014688:	b004      	add	sp, #16
 801468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801468e <__exponent>:
 801468e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014690:	2900      	cmp	r1, #0
 8014692:	4604      	mov	r4, r0
 8014694:	bfba      	itte	lt
 8014696:	4249      	neglt	r1, r1
 8014698:	232d      	movlt	r3, #45	; 0x2d
 801469a:	232b      	movge	r3, #43	; 0x2b
 801469c:	2909      	cmp	r1, #9
 801469e:	f804 2b02 	strb.w	r2, [r4], #2
 80146a2:	7043      	strb	r3, [r0, #1]
 80146a4:	dd20      	ble.n	80146e8 <__exponent+0x5a>
 80146a6:	f10d 0307 	add.w	r3, sp, #7
 80146aa:	461f      	mov	r7, r3
 80146ac:	260a      	movs	r6, #10
 80146ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80146b2:	fb06 1115 	mls	r1, r6, r5, r1
 80146b6:	3130      	adds	r1, #48	; 0x30
 80146b8:	2d09      	cmp	r5, #9
 80146ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80146be:	f103 32ff 	add.w	r2, r3, #4294967295
 80146c2:	4629      	mov	r1, r5
 80146c4:	dc09      	bgt.n	80146da <__exponent+0x4c>
 80146c6:	3130      	adds	r1, #48	; 0x30
 80146c8:	3b02      	subs	r3, #2
 80146ca:	f802 1c01 	strb.w	r1, [r2, #-1]
 80146ce:	42bb      	cmp	r3, r7
 80146d0:	4622      	mov	r2, r4
 80146d2:	d304      	bcc.n	80146de <__exponent+0x50>
 80146d4:	1a10      	subs	r0, r2, r0
 80146d6:	b003      	add	sp, #12
 80146d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146da:	4613      	mov	r3, r2
 80146dc:	e7e7      	b.n	80146ae <__exponent+0x20>
 80146de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146e2:	f804 2b01 	strb.w	r2, [r4], #1
 80146e6:	e7f2      	b.n	80146ce <__exponent+0x40>
 80146e8:	2330      	movs	r3, #48	; 0x30
 80146ea:	4419      	add	r1, r3
 80146ec:	7083      	strb	r3, [r0, #2]
 80146ee:	1d02      	adds	r2, r0, #4
 80146f0:	70c1      	strb	r1, [r0, #3]
 80146f2:	e7ef      	b.n	80146d4 <__exponent+0x46>

080146f4 <_printf_float>:
 80146f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146f8:	b08d      	sub	sp, #52	; 0x34
 80146fa:	460c      	mov	r4, r1
 80146fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014700:	4616      	mov	r6, r2
 8014702:	461f      	mov	r7, r3
 8014704:	4605      	mov	r5, r0
 8014706:	f002 fe7d 	bl	8017404 <_localeconv_r>
 801470a:	6803      	ldr	r3, [r0, #0]
 801470c:	9304      	str	r3, [sp, #16]
 801470e:	4618      	mov	r0, r3
 8014710:	f7eb fd76 	bl	8000200 <strlen>
 8014714:	2300      	movs	r3, #0
 8014716:	930a      	str	r3, [sp, #40]	; 0x28
 8014718:	f8d8 3000 	ldr.w	r3, [r8]
 801471c:	9005      	str	r0, [sp, #20]
 801471e:	3307      	adds	r3, #7
 8014720:	f023 0307 	bic.w	r3, r3, #7
 8014724:	f103 0208 	add.w	r2, r3, #8
 8014728:	f894 a018 	ldrb.w	sl, [r4, #24]
 801472c:	f8d4 b000 	ldr.w	fp, [r4]
 8014730:	f8c8 2000 	str.w	r2, [r8]
 8014734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014738:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801473c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014740:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014744:	9307      	str	r3, [sp, #28]
 8014746:	f8cd 8018 	str.w	r8, [sp, #24]
 801474a:	f04f 32ff 	mov.w	r2, #4294967295
 801474e:	4ba7      	ldr	r3, [pc, #668]	; (80149ec <_printf_float+0x2f8>)
 8014750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014754:	f7ec fa02 	bl	8000b5c <__aeabi_dcmpun>
 8014758:	bb70      	cbnz	r0, 80147b8 <_printf_float+0xc4>
 801475a:	f04f 32ff 	mov.w	r2, #4294967295
 801475e:	4ba3      	ldr	r3, [pc, #652]	; (80149ec <_printf_float+0x2f8>)
 8014760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014764:	f7ec f9dc 	bl	8000b20 <__aeabi_dcmple>
 8014768:	bb30      	cbnz	r0, 80147b8 <_printf_float+0xc4>
 801476a:	2200      	movs	r2, #0
 801476c:	2300      	movs	r3, #0
 801476e:	4640      	mov	r0, r8
 8014770:	4649      	mov	r1, r9
 8014772:	f7ec f9cb 	bl	8000b0c <__aeabi_dcmplt>
 8014776:	b110      	cbz	r0, 801477e <_printf_float+0x8a>
 8014778:	232d      	movs	r3, #45	; 0x2d
 801477a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801477e:	4a9c      	ldr	r2, [pc, #624]	; (80149f0 <_printf_float+0x2fc>)
 8014780:	4b9c      	ldr	r3, [pc, #624]	; (80149f4 <_printf_float+0x300>)
 8014782:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014786:	bf8c      	ite	hi
 8014788:	4690      	movhi	r8, r2
 801478a:	4698      	movls	r8, r3
 801478c:	2303      	movs	r3, #3
 801478e:	f02b 0204 	bic.w	r2, fp, #4
 8014792:	6123      	str	r3, [r4, #16]
 8014794:	6022      	str	r2, [r4, #0]
 8014796:	f04f 0900 	mov.w	r9, #0
 801479a:	9700      	str	r7, [sp, #0]
 801479c:	4633      	mov	r3, r6
 801479e:	aa0b      	add	r2, sp, #44	; 0x2c
 80147a0:	4621      	mov	r1, r4
 80147a2:	4628      	mov	r0, r5
 80147a4:	f000 f9e6 	bl	8014b74 <_printf_common>
 80147a8:	3001      	adds	r0, #1
 80147aa:	f040 808d 	bne.w	80148c8 <_printf_float+0x1d4>
 80147ae:	f04f 30ff 	mov.w	r0, #4294967295
 80147b2:	b00d      	add	sp, #52	; 0x34
 80147b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b8:	4642      	mov	r2, r8
 80147ba:	464b      	mov	r3, r9
 80147bc:	4640      	mov	r0, r8
 80147be:	4649      	mov	r1, r9
 80147c0:	f7ec f9cc 	bl	8000b5c <__aeabi_dcmpun>
 80147c4:	b110      	cbz	r0, 80147cc <_printf_float+0xd8>
 80147c6:	4a8c      	ldr	r2, [pc, #560]	; (80149f8 <_printf_float+0x304>)
 80147c8:	4b8c      	ldr	r3, [pc, #560]	; (80149fc <_printf_float+0x308>)
 80147ca:	e7da      	b.n	8014782 <_printf_float+0x8e>
 80147cc:	6861      	ldr	r1, [r4, #4]
 80147ce:	1c4b      	adds	r3, r1, #1
 80147d0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80147d4:	a80a      	add	r0, sp, #40	; 0x28
 80147d6:	d13e      	bne.n	8014856 <_printf_float+0x162>
 80147d8:	2306      	movs	r3, #6
 80147da:	6063      	str	r3, [r4, #4]
 80147dc:	2300      	movs	r3, #0
 80147de:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80147e2:	ab09      	add	r3, sp, #36	; 0x24
 80147e4:	9300      	str	r3, [sp, #0]
 80147e6:	ec49 8b10 	vmov	d0, r8, r9
 80147ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80147ee:	6022      	str	r2, [r4, #0]
 80147f0:	f8cd a004 	str.w	sl, [sp, #4]
 80147f4:	6861      	ldr	r1, [r4, #4]
 80147f6:	4628      	mov	r0, r5
 80147f8:	f7ff fee8 	bl	80145cc <__cvt>
 80147fc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014800:	2b47      	cmp	r3, #71	; 0x47
 8014802:	4680      	mov	r8, r0
 8014804:	d109      	bne.n	801481a <_printf_float+0x126>
 8014806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014808:	1cd8      	adds	r0, r3, #3
 801480a:	db02      	blt.n	8014812 <_printf_float+0x11e>
 801480c:	6862      	ldr	r2, [r4, #4]
 801480e:	4293      	cmp	r3, r2
 8014810:	dd47      	ble.n	80148a2 <_printf_float+0x1ae>
 8014812:	f1aa 0a02 	sub.w	sl, sl, #2
 8014816:	fa5f fa8a 	uxtb.w	sl, sl
 801481a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801481e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014820:	d824      	bhi.n	801486c <_printf_float+0x178>
 8014822:	3901      	subs	r1, #1
 8014824:	4652      	mov	r2, sl
 8014826:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801482a:	9109      	str	r1, [sp, #36]	; 0x24
 801482c:	f7ff ff2f 	bl	801468e <__exponent>
 8014830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014832:	1813      	adds	r3, r2, r0
 8014834:	2a01      	cmp	r2, #1
 8014836:	4681      	mov	r9, r0
 8014838:	6123      	str	r3, [r4, #16]
 801483a:	dc02      	bgt.n	8014842 <_printf_float+0x14e>
 801483c:	6822      	ldr	r2, [r4, #0]
 801483e:	07d1      	lsls	r1, r2, #31
 8014840:	d501      	bpl.n	8014846 <_printf_float+0x152>
 8014842:	3301      	adds	r3, #1
 8014844:	6123      	str	r3, [r4, #16]
 8014846:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801484a:	2b00      	cmp	r3, #0
 801484c:	d0a5      	beq.n	801479a <_printf_float+0xa6>
 801484e:	232d      	movs	r3, #45	; 0x2d
 8014850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014854:	e7a1      	b.n	801479a <_printf_float+0xa6>
 8014856:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801485a:	f000 8177 	beq.w	8014b4c <_printf_float+0x458>
 801485e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014862:	d1bb      	bne.n	80147dc <_printf_float+0xe8>
 8014864:	2900      	cmp	r1, #0
 8014866:	d1b9      	bne.n	80147dc <_printf_float+0xe8>
 8014868:	2301      	movs	r3, #1
 801486a:	e7b6      	b.n	80147da <_printf_float+0xe6>
 801486c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014870:	d119      	bne.n	80148a6 <_printf_float+0x1b2>
 8014872:	2900      	cmp	r1, #0
 8014874:	6863      	ldr	r3, [r4, #4]
 8014876:	dd0c      	ble.n	8014892 <_printf_float+0x19e>
 8014878:	6121      	str	r1, [r4, #16]
 801487a:	b913      	cbnz	r3, 8014882 <_printf_float+0x18e>
 801487c:	6822      	ldr	r2, [r4, #0]
 801487e:	07d2      	lsls	r2, r2, #31
 8014880:	d502      	bpl.n	8014888 <_printf_float+0x194>
 8014882:	3301      	adds	r3, #1
 8014884:	440b      	add	r3, r1
 8014886:	6123      	str	r3, [r4, #16]
 8014888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801488a:	65a3      	str	r3, [r4, #88]	; 0x58
 801488c:	f04f 0900 	mov.w	r9, #0
 8014890:	e7d9      	b.n	8014846 <_printf_float+0x152>
 8014892:	b913      	cbnz	r3, 801489a <_printf_float+0x1a6>
 8014894:	6822      	ldr	r2, [r4, #0]
 8014896:	07d0      	lsls	r0, r2, #31
 8014898:	d501      	bpl.n	801489e <_printf_float+0x1aa>
 801489a:	3302      	adds	r3, #2
 801489c:	e7f3      	b.n	8014886 <_printf_float+0x192>
 801489e:	2301      	movs	r3, #1
 80148a0:	e7f1      	b.n	8014886 <_printf_float+0x192>
 80148a2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80148a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80148aa:	4293      	cmp	r3, r2
 80148ac:	db05      	blt.n	80148ba <_printf_float+0x1c6>
 80148ae:	6822      	ldr	r2, [r4, #0]
 80148b0:	6123      	str	r3, [r4, #16]
 80148b2:	07d1      	lsls	r1, r2, #31
 80148b4:	d5e8      	bpl.n	8014888 <_printf_float+0x194>
 80148b6:	3301      	adds	r3, #1
 80148b8:	e7e5      	b.n	8014886 <_printf_float+0x192>
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	bfd4      	ite	le
 80148be:	f1c3 0302 	rsble	r3, r3, #2
 80148c2:	2301      	movgt	r3, #1
 80148c4:	4413      	add	r3, r2
 80148c6:	e7de      	b.n	8014886 <_printf_float+0x192>
 80148c8:	6823      	ldr	r3, [r4, #0]
 80148ca:	055a      	lsls	r2, r3, #21
 80148cc:	d407      	bmi.n	80148de <_printf_float+0x1ea>
 80148ce:	6923      	ldr	r3, [r4, #16]
 80148d0:	4642      	mov	r2, r8
 80148d2:	4631      	mov	r1, r6
 80148d4:	4628      	mov	r0, r5
 80148d6:	47b8      	blx	r7
 80148d8:	3001      	adds	r0, #1
 80148da:	d12b      	bne.n	8014934 <_printf_float+0x240>
 80148dc:	e767      	b.n	80147ae <_printf_float+0xba>
 80148de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80148e2:	f240 80dc 	bls.w	8014a9e <_printf_float+0x3aa>
 80148e6:	2200      	movs	r2, #0
 80148e8:	2300      	movs	r3, #0
 80148ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80148ee:	f7ec f903 	bl	8000af8 <__aeabi_dcmpeq>
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d033      	beq.n	801495e <_printf_float+0x26a>
 80148f6:	2301      	movs	r3, #1
 80148f8:	4a41      	ldr	r2, [pc, #260]	; (8014a00 <_printf_float+0x30c>)
 80148fa:	4631      	mov	r1, r6
 80148fc:	4628      	mov	r0, r5
 80148fe:	47b8      	blx	r7
 8014900:	3001      	adds	r0, #1
 8014902:	f43f af54 	beq.w	80147ae <_printf_float+0xba>
 8014906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801490a:	429a      	cmp	r2, r3
 801490c:	db02      	blt.n	8014914 <_printf_float+0x220>
 801490e:	6823      	ldr	r3, [r4, #0]
 8014910:	07d8      	lsls	r0, r3, #31
 8014912:	d50f      	bpl.n	8014934 <_printf_float+0x240>
 8014914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014918:	4631      	mov	r1, r6
 801491a:	4628      	mov	r0, r5
 801491c:	47b8      	blx	r7
 801491e:	3001      	adds	r0, #1
 8014920:	f43f af45 	beq.w	80147ae <_printf_float+0xba>
 8014924:	f04f 0800 	mov.w	r8, #0
 8014928:	f104 091a 	add.w	r9, r4, #26
 801492c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801492e:	3b01      	subs	r3, #1
 8014930:	4543      	cmp	r3, r8
 8014932:	dc09      	bgt.n	8014948 <_printf_float+0x254>
 8014934:	6823      	ldr	r3, [r4, #0]
 8014936:	079b      	lsls	r3, r3, #30
 8014938:	f100 8103 	bmi.w	8014b42 <_printf_float+0x44e>
 801493c:	68e0      	ldr	r0, [r4, #12]
 801493e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014940:	4298      	cmp	r0, r3
 8014942:	bfb8      	it	lt
 8014944:	4618      	movlt	r0, r3
 8014946:	e734      	b.n	80147b2 <_printf_float+0xbe>
 8014948:	2301      	movs	r3, #1
 801494a:	464a      	mov	r2, r9
 801494c:	4631      	mov	r1, r6
 801494e:	4628      	mov	r0, r5
 8014950:	47b8      	blx	r7
 8014952:	3001      	adds	r0, #1
 8014954:	f43f af2b 	beq.w	80147ae <_printf_float+0xba>
 8014958:	f108 0801 	add.w	r8, r8, #1
 801495c:	e7e6      	b.n	801492c <_printf_float+0x238>
 801495e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014960:	2b00      	cmp	r3, #0
 8014962:	dc2b      	bgt.n	80149bc <_printf_float+0x2c8>
 8014964:	2301      	movs	r3, #1
 8014966:	4a26      	ldr	r2, [pc, #152]	; (8014a00 <_printf_float+0x30c>)
 8014968:	4631      	mov	r1, r6
 801496a:	4628      	mov	r0, r5
 801496c:	47b8      	blx	r7
 801496e:	3001      	adds	r0, #1
 8014970:	f43f af1d 	beq.w	80147ae <_printf_float+0xba>
 8014974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014976:	b923      	cbnz	r3, 8014982 <_printf_float+0x28e>
 8014978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801497a:	b913      	cbnz	r3, 8014982 <_printf_float+0x28e>
 801497c:	6823      	ldr	r3, [r4, #0]
 801497e:	07d9      	lsls	r1, r3, #31
 8014980:	d5d8      	bpl.n	8014934 <_printf_float+0x240>
 8014982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014986:	4631      	mov	r1, r6
 8014988:	4628      	mov	r0, r5
 801498a:	47b8      	blx	r7
 801498c:	3001      	adds	r0, #1
 801498e:	f43f af0e 	beq.w	80147ae <_printf_float+0xba>
 8014992:	f04f 0900 	mov.w	r9, #0
 8014996:	f104 0a1a 	add.w	sl, r4, #26
 801499a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801499c:	425b      	negs	r3, r3
 801499e:	454b      	cmp	r3, r9
 80149a0:	dc01      	bgt.n	80149a6 <_printf_float+0x2b2>
 80149a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149a4:	e794      	b.n	80148d0 <_printf_float+0x1dc>
 80149a6:	2301      	movs	r3, #1
 80149a8:	4652      	mov	r2, sl
 80149aa:	4631      	mov	r1, r6
 80149ac:	4628      	mov	r0, r5
 80149ae:	47b8      	blx	r7
 80149b0:	3001      	adds	r0, #1
 80149b2:	f43f aefc 	beq.w	80147ae <_printf_float+0xba>
 80149b6:	f109 0901 	add.w	r9, r9, #1
 80149ba:	e7ee      	b.n	801499a <_printf_float+0x2a6>
 80149bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80149c0:	429a      	cmp	r2, r3
 80149c2:	bfa8      	it	ge
 80149c4:	461a      	movge	r2, r3
 80149c6:	2a00      	cmp	r2, #0
 80149c8:	4691      	mov	r9, r2
 80149ca:	dd07      	ble.n	80149dc <_printf_float+0x2e8>
 80149cc:	4613      	mov	r3, r2
 80149ce:	4631      	mov	r1, r6
 80149d0:	4642      	mov	r2, r8
 80149d2:	4628      	mov	r0, r5
 80149d4:	47b8      	blx	r7
 80149d6:	3001      	adds	r0, #1
 80149d8:	f43f aee9 	beq.w	80147ae <_printf_float+0xba>
 80149dc:	f104 031a 	add.w	r3, r4, #26
 80149e0:	f04f 0b00 	mov.w	fp, #0
 80149e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80149e8:	9306      	str	r3, [sp, #24]
 80149ea:	e015      	b.n	8014a18 <_printf_float+0x324>
 80149ec:	7fefffff 	.word	0x7fefffff
 80149f0:	08018e80 	.word	0x08018e80
 80149f4:	08018e7c 	.word	0x08018e7c
 80149f8:	08018e88 	.word	0x08018e88
 80149fc:	08018e84 	.word	0x08018e84
 8014a00:	08019043 	.word	0x08019043
 8014a04:	2301      	movs	r3, #1
 8014a06:	9a06      	ldr	r2, [sp, #24]
 8014a08:	4631      	mov	r1, r6
 8014a0a:	4628      	mov	r0, r5
 8014a0c:	47b8      	blx	r7
 8014a0e:	3001      	adds	r0, #1
 8014a10:	f43f aecd 	beq.w	80147ae <_printf_float+0xba>
 8014a14:	f10b 0b01 	add.w	fp, fp, #1
 8014a18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014a1c:	ebaa 0309 	sub.w	r3, sl, r9
 8014a20:	455b      	cmp	r3, fp
 8014a22:	dcef      	bgt.n	8014a04 <_printf_float+0x310>
 8014a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	44d0      	add	r8, sl
 8014a2c:	db15      	blt.n	8014a5a <_printf_float+0x366>
 8014a2e:	6823      	ldr	r3, [r4, #0]
 8014a30:	07da      	lsls	r2, r3, #31
 8014a32:	d412      	bmi.n	8014a5a <_printf_float+0x366>
 8014a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a38:	eba3 020a 	sub.w	r2, r3, sl
 8014a3c:	eba3 0a01 	sub.w	sl, r3, r1
 8014a40:	4592      	cmp	sl, r2
 8014a42:	bfa8      	it	ge
 8014a44:	4692      	movge	sl, r2
 8014a46:	f1ba 0f00 	cmp.w	sl, #0
 8014a4a:	dc0e      	bgt.n	8014a6a <_printf_float+0x376>
 8014a4c:	f04f 0800 	mov.w	r8, #0
 8014a50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014a54:	f104 091a 	add.w	r9, r4, #26
 8014a58:	e019      	b.n	8014a8e <_printf_float+0x39a>
 8014a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a5e:	4631      	mov	r1, r6
 8014a60:	4628      	mov	r0, r5
 8014a62:	47b8      	blx	r7
 8014a64:	3001      	adds	r0, #1
 8014a66:	d1e5      	bne.n	8014a34 <_printf_float+0x340>
 8014a68:	e6a1      	b.n	80147ae <_printf_float+0xba>
 8014a6a:	4653      	mov	r3, sl
 8014a6c:	4642      	mov	r2, r8
 8014a6e:	4631      	mov	r1, r6
 8014a70:	4628      	mov	r0, r5
 8014a72:	47b8      	blx	r7
 8014a74:	3001      	adds	r0, #1
 8014a76:	d1e9      	bne.n	8014a4c <_printf_float+0x358>
 8014a78:	e699      	b.n	80147ae <_printf_float+0xba>
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	464a      	mov	r2, r9
 8014a7e:	4631      	mov	r1, r6
 8014a80:	4628      	mov	r0, r5
 8014a82:	47b8      	blx	r7
 8014a84:	3001      	adds	r0, #1
 8014a86:	f43f ae92 	beq.w	80147ae <_printf_float+0xba>
 8014a8a:	f108 0801 	add.w	r8, r8, #1
 8014a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a92:	1a9b      	subs	r3, r3, r2
 8014a94:	eba3 030a 	sub.w	r3, r3, sl
 8014a98:	4543      	cmp	r3, r8
 8014a9a:	dcee      	bgt.n	8014a7a <_printf_float+0x386>
 8014a9c:	e74a      	b.n	8014934 <_printf_float+0x240>
 8014a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014aa0:	2a01      	cmp	r2, #1
 8014aa2:	dc01      	bgt.n	8014aa8 <_printf_float+0x3b4>
 8014aa4:	07db      	lsls	r3, r3, #31
 8014aa6:	d53a      	bpl.n	8014b1e <_printf_float+0x42a>
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	4642      	mov	r2, r8
 8014aac:	4631      	mov	r1, r6
 8014aae:	4628      	mov	r0, r5
 8014ab0:	47b8      	blx	r7
 8014ab2:	3001      	adds	r0, #1
 8014ab4:	f43f ae7b 	beq.w	80147ae <_printf_float+0xba>
 8014ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014abc:	4631      	mov	r1, r6
 8014abe:	4628      	mov	r0, r5
 8014ac0:	47b8      	blx	r7
 8014ac2:	3001      	adds	r0, #1
 8014ac4:	f108 0801 	add.w	r8, r8, #1
 8014ac8:	f43f ae71 	beq.w	80147ae <_printf_float+0xba>
 8014acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ace:	2200      	movs	r2, #0
 8014ad0:	f103 3aff 	add.w	sl, r3, #4294967295
 8014ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014ad8:	2300      	movs	r3, #0
 8014ada:	f7ec f80d 	bl	8000af8 <__aeabi_dcmpeq>
 8014ade:	b9c8      	cbnz	r0, 8014b14 <_printf_float+0x420>
 8014ae0:	4653      	mov	r3, sl
 8014ae2:	4642      	mov	r2, r8
 8014ae4:	4631      	mov	r1, r6
 8014ae6:	4628      	mov	r0, r5
 8014ae8:	47b8      	blx	r7
 8014aea:	3001      	adds	r0, #1
 8014aec:	d10e      	bne.n	8014b0c <_printf_float+0x418>
 8014aee:	e65e      	b.n	80147ae <_printf_float+0xba>
 8014af0:	2301      	movs	r3, #1
 8014af2:	4652      	mov	r2, sl
 8014af4:	4631      	mov	r1, r6
 8014af6:	4628      	mov	r0, r5
 8014af8:	47b8      	blx	r7
 8014afa:	3001      	adds	r0, #1
 8014afc:	f43f ae57 	beq.w	80147ae <_printf_float+0xba>
 8014b00:	f108 0801 	add.w	r8, r8, #1
 8014b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b06:	3b01      	subs	r3, #1
 8014b08:	4543      	cmp	r3, r8
 8014b0a:	dcf1      	bgt.n	8014af0 <_printf_float+0x3fc>
 8014b0c:	464b      	mov	r3, r9
 8014b0e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014b12:	e6de      	b.n	80148d2 <_printf_float+0x1de>
 8014b14:	f04f 0800 	mov.w	r8, #0
 8014b18:	f104 0a1a 	add.w	sl, r4, #26
 8014b1c:	e7f2      	b.n	8014b04 <_printf_float+0x410>
 8014b1e:	2301      	movs	r3, #1
 8014b20:	e7df      	b.n	8014ae2 <_printf_float+0x3ee>
 8014b22:	2301      	movs	r3, #1
 8014b24:	464a      	mov	r2, r9
 8014b26:	4631      	mov	r1, r6
 8014b28:	4628      	mov	r0, r5
 8014b2a:	47b8      	blx	r7
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	f43f ae3e 	beq.w	80147ae <_printf_float+0xba>
 8014b32:	f108 0801 	add.w	r8, r8, #1
 8014b36:	68e3      	ldr	r3, [r4, #12]
 8014b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b3a:	1a9b      	subs	r3, r3, r2
 8014b3c:	4543      	cmp	r3, r8
 8014b3e:	dcf0      	bgt.n	8014b22 <_printf_float+0x42e>
 8014b40:	e6fc      	b.n	801493c <_printf_float+0x248>
 8014b42:	f04f 0800 	mov.w	r8, #0
 8014b46:	f104 0919 	add.w	r9, r4, #25
 8014b4a:	e7f4      	b.n	8014b36 <_printf_float+0x442>
 8014b4c:	2900      	cmp	r1, #0
 8014b4e:	f43f ae8b 	beq.w	8014868 <_printf_float+0x174>
 8014b52:	2300      	movs	r3, #0
 8014b54:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014b58:	ab09      	add	r3, sp, #36	; 0x24
 8014b5a:	9300      	str	r3, [sp, #0]
 8014b5c:	ec49 8b10 	vmov	d0, r8, r9
 8014b60:	6022      	str	r2, [r4, #0]
 8014b62:	f8cd a004 	str.w	sl, [sp, #4]
 8014b66:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	f7ff fd2e 	bl	80145cc <__cvt>
 8014b70:	4680      	mov	r8, r0
 8014b72:	e648      	b.n	8014806 <_printf_float+0x112>

08014b74 <_printf_common>:
 8014b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b78:	4691      	mov	r9, r2
 8014b7a:	461f      	mov	r7, r3
 8014b7c:	688a      	ldr	r2, [r1, #8]
 8014b7e:	690b      	ldr	r3, [r1, #16]
 8014b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b84:	4293      	cmp	r3, r2
 8014b86:	bfb8      	it	lt
 8014b88:	4613      	movlt	r3, r2
 8014b8a:	f8c9 3000 	str.w	r3, [r9]
 8014b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b92:	4606      	mov	r6, r0
 8014b94:	460c      	mov	r4, r1
 8014b96:	b112      	cbz	r2, 8014b9e <_printf_common+0x2a>
 8014b98:	3301      	adds	r3, #1
 8014b9a:	f8c9 3000 	str.w	r3, [r9]
 8014b9e:	6823      	ldr	r3, [r4, #0]
 8014ba0:	0699      	lsls	r1, r3, #26
 8014ba2:	bf42      	ittt	mi
 8014ba4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014ba8:	3302      	addmi	r3, #2
 8014baa:	f8c9 3000 	strmi.w	r3, [r9]
 8014bae:	6825      	ldr	r5, [r4, #0]
 8014bb0:	f015 0506 	ands.w	r5, r5, #6
 8014bb4:	d107      	bne.n	8014bc6 <_printf_common+0x52>
 8014bb6:	f104 0a19 	add.w	sl, r4, #25
 8014bba:	68e3      	ldr	r3, [r4, #12]
 8014bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8014bc0:	1a9b      	subs	r3, r3, r2
 8014bc2:	42ab      	cmp	r3, r5
 8014bc4:	dc28      	bgt.n	8014c18 <_printf_common+0xa4>
 8014bc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014bca:	6822      	ldr	r2, [r4, #0]
 8014bcc:	3300      	adds	r3, #0
 8014bce:	bf18      	it	ne
 8014bd0:	2301      	movne	r3, #1
 8014bd2:	0692      	lsls	r2, r2, #26
 8014bd4:	d42d      	bmi.n	8014c32 <_printf_common+0xbe>
 8014bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014bda:	4639      	mov	r1, r7
 8014bdc:	4630      	mov	r0, r6
 8014bde:	47c0      	blx	r8
 8014be0:	3001      	adds	r0, #1
 8014be2:	d020      	beq.n	8014c26 <_printf_common+0xb2>
 8014be4:	6823      	ldr	r3, [r4, #0]
 8014be6:	68e5      	ldr	r5, [r4, #12]
 8014be8:	f8d9 2000 	ldr.w	r2, [r9]
 8014bec:	f003 0306 	and.w	r3, r3, #6
 8014bf0:	2b04      	cmp	r3, #4
 8014bf2:	bf08      	it	eq
 8014bf4:	1aad      	subeq	r5, r5, r2
 8014bf6:	68a3      	ldr	r3, [r4, #8]
 8014bf8:	6922      	ldr	r2, [r4, #16]
 8014bfa:	bf0c      	ite	eq
 8014bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c00:	2500      	movne	r5, #0
 8014c02:	4293      	cmp	r3, r2
 8014c04:	bfc4      	itt	gt
 8014c06:	1a9b      	subgt	r3, r3, r2
 8014c08:	18ed      	addgt	r5, r5, r3
 8014c0a:	f04f 0900 	mov.w	r9, #0
 8014c0e:	341a      	adds	r4, #26
 8014c10:	454d      	cmp	r5, r9
 8014c12:	d11a      	bne.n	8014c4a <_printf_common+0xd6>
 8014c14:	2000      	movs	r0, #0
 8014c16:	e008      	b.n	8014c2a <_printf_common+0xb6>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	4652      	mov	r2, sl
 8014c1c:	4639      	mov	r1, r7
 8014c1e:	4630      	mov	r0, r6
 8014c20:	47c0      	blx	r8
 8014c22:	3001      	adds	r0, #1
 8014c24:	d103      	bne.n	8014c2e <_printf_common+0xba>
 8014c26:	f04f 30ff 	mov.w	r0, #4294967295
 8014c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c2e:	3501      	adds	r5, #1
 8014c30:	e7c3      	b.n	8014bba <_printf_common+0x46>
 8014c32:	18e1      	adds	r1, r4, r3
 8014c34:	1c5a      	adds	r2, r3, #1
 8014c36:	2030      	movs	r0, #48	; 0x30
 8014c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c3c:	4422      	add	r2, r4
 8014c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c46:	3302      	adds	r3, #2
 8014c48:	e7c5      	b.n	8014bd6 <_printf_common+0x62>
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	4622      	mov	r2, r4
 8014c4e:	4639      	mov	r1, r7
 8014c50:	4630      	mov	r0, r6
 8014c52:	47c0      	blx	r8
 8014c54:	3001      	adds	r0, #1
 8014c56:	d0e6      	beq.n	8014c26 <_printf_common+0xb2>
 8014c58:	f109 0901 	add.w	r9, r9, #1
 8014c5c:	e7d8      	b.n	8014c10 <_printf_common+0x9c>
	...

08014c60 <_printf_i>:
 8014c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014c68:	460c      	mov	r4, r1
 8014c6a:	7e09      	ldrb	r1, [r1, #24]
 8014c6c:	b085      	sub	sp, #20
 8014c6e:	296e      	cmp	r1, #110	; 0x6e
 8014c70:	4617      	mov	r7, r2
 8014c72:	4606      	mov	r6, r0
 8014c74:	4698      	mov	r8, r3
 8014c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c78:	f000 80b3 	beq.w	8014de2 <_printf_i+0x182>
 8014c7c:	d822      	bhi.n	8014cc4 <_printf_i+0x64>
 8014c7e:	2963      	cmp	r1, #99	; 0x63
 8014c80:	d036      	beq.n	8014cf0 <_printf_i+0x90>
 8014c82:	d80a      	bhi.n	8014c9a <_printf_i+0x3a>
 8014c84:	2900      	cmp	r1, #0
 8014c86:	f000 80b9 	beq.w	8014dfc <_printf_i+0x19c>
 8014c8a:	2958      	cmp	r1, #88	; 0x58
 8014c8c:	f000 8083 	beq.w	8014d96 <_printf_i+0x136>
 8014c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014c98:	e032      	b.n	8014d00 <_printf_i+0xa0>
 8014c9a:	2964      	cmp	r1, #100	; 0x64
 8014c9c:	d001      	beq.n	8014ca2 <_printf_i+0x42>
 8014c9e:	2969      	cmp	r1, #105	; 0x69
 8014ca0:	d1f6      	bne.n	8014c90 <_printf_i+0x30>
 8014ca2:	6820      	ldr	r0, [r4, #0]
 8014ca4:	6813      	ldr	r3, [r2, #0]
 8014ca6:	0605      	lsls	r5, r0, #24
 8014ca8:	f103 0104 	add.w	r1, r3, #4
 8014cac:	d52a      	bpl.n	8014d04 <_printf_i+0xa4>
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	6011      	str	r1, [r2, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	da03      	bge.n	8014cbe <_printf_i+0x5e>
 8014cb6:	222d      	movs	r2, #45	; 0x2d
 8014cb8:	425b      	negs	r3, r3
 8014cba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014cbe:	486f      	ldr	r0, [pc, #444]	; (8014e7c <_printf_i+0x21c>)
 8014cc0:	220a      	movs	r2, #10
 8014cc2:	e039      	b.n	8014d38 <_printf_i+0xd8>
 8014cc4:	2973      	cmp	r1, #115	; 0x73
 8014cc6:	f000 809d 	beq.w	8014e04 <_printf_i+0x1a4>
 8014cca:	d808      	bhi.n	8014cde <_printf_i+0x7e>
 8014ccc:	296f      	cmp	r1, #111	; 0x6f
 8014cce:	d020      	beq.n	8014d12 <_printf_i+0xb2>
 8014cd0:	2970      	cmp	r1, #112	; 0x70
 8014cd2:	d1dd      	bne.n	8014c90 <_printf_i+0x30>
 8014cd4:	6823      	ldr	r3, [r4, #0]
 8014cd6:	f043 0320 	orr.w	r3, r3, #32
 8014cda:	6023      	str	r3, [r4, #0]
 8014cdc:	e003      	b.n	8014ce6 <_printf_i+0x86>
 8014cde:	2975      	cmp	r1, #117	; 0x75
 8014ce0:	d017      	beq.n	8014d12 <_printf_i+0xb2>
 8014ce2:	2978      	cmp	r1, #120	; 0x78
 8014ce4:	d1d4      	bne.n	8014c90 <_printf_i+0x30>
 8014ce6:	2378      	movs	r3, #120	; 0x78
 8014ce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014cec:	4864      	ldr	r0, [pc, #400]	; (8014e80 <_printf_i+0x220>)
 8014cee:	e055      	b.n	8014d9c <_printf_i+0x13c>
 8014cf0:	6813      	ldr	r3, [r2, #0]
 8014cf2:	1d19      	adds	r1, r3, #4
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	6011      	str	r1, [r2, #0]
 8014cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d00:	2301      	movs	r3, #1
 8014d02:	e08c      	b.n	8014e1e <_printf_i+0x1be>
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	6011      	str	r1, [r2, #0]
 8014d08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d0c:	bf18      	it	ne
 8014d0e:	b21b      	sxthne	r3, r3
 8014d10:	e7cf      	b.n	8014cb2 <_printf_i+0x52>
 8014d12:	6813      	ldr	r3, [r2, #0]
 8014d14:	6825      	ldr	r5, [r4, #0]
 8014d16:	1d18      	adds	r0, r3, #4
 8014d18:	6010      	str	r0, [r2, #0]
 8014d1a:	0628      	lsls	r0, r5, #24
 8014d1c:	d501      	bpl.n	8014d22 <_printf_i+0xc2>
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	e002      	b.n	8014d28 <_printf_i+0xc8>
 8014d22:	0668      	lsls	r0, r5, #25
 8014d24:	d5fb      	bpl.n	8014d1e <_printf_i+0xbe>
 8014d26:	881b      	ldrh	r3, [r3, #0]
 8014d28:	4854      	ldr	r0, [pc, #336]	; (8014e7c <_printf_i+0x21c>)
 8014d2a:	296f      	cmp	r1, #111	; 0x6f
 8014d2c:	bf14      	ite	ne
 8014d2e:	220a      	movne	r2, #10
 8014d30:	2208      	moveq	r2, #8
 8014d32:	2100      	movs	r1, #0
 8014d34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d38:	6865      	ldr	r5, [r4, #4]
 8014d3a:	60a5      	str	r5, [r4, #8]
 8014d3c:	2d00      	cmp	r5, #0
 8014d3e:	f2c0 8095 	blt.w	8014e6c <_printf_i+0x20c>
 8014d42:	6821      	ldr	r1, [r4, #0]
 8014d44:	f021 0104 	bic.w	r1, r1, #4
 8014d48:	6021      	str	r1, [r4, #0]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d13d      	bne.n	8014dca <_printf_i+0x16a>
 8014d4e:	2d00      	cmp	r5, #0
 8014d50:	f040 808e 	bne.w	8014e70 <_printf_i+0x210>
 8014d54:	4665      	mov	r5, ip
 8014d56:	2a08      	cmp	r2, #8
 8014d58:	d10b      	bne.n	8014d72 <_printf_i+0x112>
 8014d5a:	6823      	ldr	r3, [r4, #0]
 8014d5c:	07db      	lsls	r3, r3, #31
 8014d5e:	d508      	bpl.n	8014d72 <_printf_i+0x112>
 8014d60:	6923      	ldr	r3, [r4, #16]
 8014d62:	6862      	ldr	r2, [r4, #4]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	bfde      	ittt	le
 8014d68:	2330      	movle	r3, #48	; 0x30
 8014d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014d72:	ebac 0305 	sub.w	r3, ip, r5
 8014d76:	6123      	str	r3, [r4, #16]
 8014d78:	f8cd 8000 	str.w	r8, [sp]
 8014d7c:	463b      	mov	r3, r7
 8014d7e:	aa03      	add	r2, sp, #12
 8014d80:	4621      	mov	r1, r4
 8014d82:	4630      	mov	r0, r6
 8014d84:	f7ff fef6 	bl	8014b74 <_printf_common>
 8014d88:	3001      	adds	r0, #1
 8014d8a:	d14d      	bne.n	8014e28 <_printf_i+0x1c8>
 8014d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d90:	b005      	add	sp, #20
 8014d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d96:	4839      	ldr	r0, [pc, #228]	; (8014e7c <_printf_i+0x21c>)
 8014d98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014d9c:	6813      	ldr	r3, [r2, #0]
 8014d9e:	6821      	ldr	r1, [r4, #0]
 8014da0:	1d1d      	adds	r5, r3, #4
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	6015      	str	r5, [r2, #0]
 8014da6:	060a      	lsls	r2, r1, #24
 8014da8:	d50b      	bpl.n	8014dc2 <_printf_i+0x162>
 8014daa:	07ca      	lsls	r2, r1, #31
 8014dac:	bf44      	itt	mi
 8014dae:	f041 0120 	orrmi.w	r1, r1, #32
 8014db2:	6021      	strmi	r1, [r4, #0]
 8014db4:	b91b      	cbnz	r3, 8014dbe <_printf_i+0x15e>
 8014db6:	6822      	ldr	r2, [r4, #0]
 8014db8:	f022 0220 	bic.w	r2, r2, #32
 8014dbc:	6022      	str	r2, [r4, #0]
 8014dbe:	2210      	movs	r2, #16
 8014dc0:	e7b7      	b.n	8014d32 <_printf_i+0xd2>
 8014dc2:	064d      	lsls	r5, r1, #25
 8014dc4:	bf48      	it	mi
 8014dc6:	b29b      	uxthmi	r3, r3
 8014dc8:	e7ef      	b.n	8014daa <_printf_i+0x14a>
 8014dca:	4665      	mov	r5, ip
 8014dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8014dd0:	fb02 3311 	mls	r3, r2, r1, r3
 8014dd4:	5cc3      	ldrb	r3, [r0, r3]
 8014dd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014dda:	460b      	mov	r3, r1
 8014ddc:	2900      	cmp	r1, #0
 8014dde:	d1f5      	bne.n	8014dcc <_printf_i+0x16c>
 8014de0:	e7b9      	b.n	8014d56 <_printf_i+0xf6>
 8014de2:	6813      	ldr	r3, [r2, #0]
 8014de4:	6825      	ldr	r5, [r4, #0]
 8014de6:	6961      	ldr	r1, [r4, #20]
 8014de8:	1d18      	adds	r0, r3, #4
 8014dea:	6010      	str	r0, [r2, #0]
 8014dec:	0628      	lsls	r0, r5, #24
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	d501      	bpl.n	8014df6 <_printf_i+0x196>
 8014df2:	6019      	str	r1, [r3, #0]
 8014df4:	e002      	b.n	8014dfc <_printf_i+0x19c>
 8014df6:	066a      	lsls	r2, r5, #25
 8014df8:	d5fb      	bpl.n	8014df2 <_printf_i+0x192>
 8014dfa:	8019      	strh	r1, [r3, #0]
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	6123      	str	r3, [r4, #16]
 8014e00:	4665      	mov	r5, ip
 8014e02:	e7b9      	b.n	8014d78 <_printf_i+0x118>
 8014e04:	6813      	ldr	r3, [r2, #0]
 8014e06:	1d19      	adds	r1, r3, #4
 8014e08:	6011      	str	r1, [r2, #0]
 8014e0a:	681d      	ldr	r5, [r3, #0]
 8014e0c:	6862      	ldr	r2, [r4, #4]
 8014e0e:	2100      	movs	r1, #0
 8014e10:	4628      	mov	r0, r5
 8014e12:	f7eb f9fd 	bl	8000210 <memchr>
 8014e16:	b108      	cbz	r0, 8014e1c <_printf_i+0x1bc>
 8014e18:	1b40      	subs	r0, r0, r5
 8014e1a:	6060      	str	r0, [r4, #4]
 8014e1c:	6863      	ldr	r3, [r4, #4]
 8014e1e:	6123      	str	r3, [r4, #16]
 8014e20:	2300      	movs	r3, #0
 8014e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e26:	e7a7      	b.n	8014d78 <_printf_i+0x118>
 8014e28:	6923      	ldr	r3, [r4, #16]
 8014e2a:	462a      	mov	r2, r5
 8014e2c:	4639      	mov	r1, r7
 8014e2e:	4630      	mov	r0, r6
 8014e30:	47c0      	blx	r8
 8014e32:	3001      	adds	r0, #1
 8014e34:	d0aa      	beq.n	8014d8c <_printf_i+0x12c>
 8014e36:	6823      	ldr	r3, [r4, #0]
 8014e38:	079b      	lsls	r3, r3, #30
 8014e3a:	d413      	bmi.n	8014e64 <_printf_i+0x204>
 8014e3c:	68e0      	ldr	r0, [r4, #12]
 8014e3e:	9b03      	ldr	r3, [sp, #12]
 8014e40:	4298      	cmp	r0, r3
 8014e42:	bfb8      	it	lt
 8014e44:	4618      	movlt	r0, r3
 8014e46:	e7a3      	b.n	8014d90 <_printf_i+0x130>
 8014e48:	2301      	movs	r3, #1
 8014e4a:	464a      	mov	r2, r9
 8014e4c:	4639      	mov	r1, r7
 8014e4e:	4630      	mov	r0, r6
 8014e50:	47c0      	blx	r8
 8014e52:	3001      	adds	r0, #1
 8014e54:	d09a      	beq.n	8014d8c <_printf_i+0x12c>
 8014e56:	3501      	adds	r5, #1
 8014e58:	68e3      	ldr	r3, [r4, #12]
 8014e5a:	9a03      	ldr	r2, [sp, #12]
 8014e5c:	1a9b      	subs	r3, r3, r2
 8014e5e:	42ab      	cmp	r3, r5
 8014e60:	dcf2      	bgt.n	8014e48 <_printf_i+0x1e8>
 8014e62:	e7eb      	b.n	8014e3c <_printf_i+0x1dc>
 8014e64:	2500      	movs	r5, #0
 8014e66:	f104 0919 	add.w	r9, r4, #25
 8014e6a:	e7f5      	b.n	8014e58 <_printf_i+0x1f8>
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d1ac      	bne.n	8014dca <_printf_i+0x16a>
 8014e70:	7803      	ldrb	r3, [r0, #0]
 8014e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014e76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e7a:	e76c      	b.n	8014d56 <_printf_i+0xf6>
 8014e7c:	08018e8c 	.word	0x08018e8c
 8014e80:	08018e9d 	.word	0x08018e9d

08014e84 <_scanf_float>:
 8014e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e88:	469a      	mov	sl, r3
 8014e8a:	688b      	ldr	r3, [r1, #8]
 8014e8c:	4616      	mov	r6, r2
 8014e8e:	1e5a      	subs	r2, r3, #1
 8014e90:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014e94:	b087      	sub	sp, #28
 8014e96:	bf83      	ittte	hi
 8014e98:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014e9c:	189b      	addhi	r3, r3, r2
 8014e9e:	9301      	strhi	r3, [sp, #4]
 8014ea0:	2300      	movls	r3, #0
 8014ea2:	bf86      	itte	hi
 8014ea4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014ea8:	608b      	strhi	r3, [r1, #8]
 8014eaa:	9301      	strls	r3, [sp, #4]
 8014eac:	680b      	ldr	r3, [r1, #0]
 8014eae:	4688      	mov	r8, r1
 8014eb0:	f04f 0b00 	mov.w	fp, #0
 8014eb4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014eb8:	f848 3b1c 	str.w	r3, [r8], #28
 8014ebc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014ec0:	4607      	mov	r7, r0
 8014ec2:	460c      	mov	r4, r1
 8014ec4:	4645      	mov	r5, r8
 8014ec6:	465a      	mov	r2, fp
 8014ec8:	46d9      	mov	r9, fp
 8014eca:	f8cd b008 	str.w	fp, [sp, #8]
 8014ece:	68a1      	ldr	r1, [r4, #8]
 8014ed0:	b181      	cbz	r1, 8014ef4 <_scanf_float+0x70>
 8014ed2:	6833      	ldr	r3, [r6, #0]
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	2b49      	cmp	r3, #73	; 0x49
 8014ed8:	d071      	beq.n	8014fbe <_scanf_float+0x13a>
 8014eda:	d84d      	bhi.n	8014f78 <_scanf_float+0xf4>
 8014edc:	2b39      	cmp	r3, #57	; 0x39
 8014ede:	d840      	bhi.n	8014f62 <_scanf_float+0xde>
 8014ee0:	2b31      	cmp	r3, #49	; 0x31
 8014ee2:	f080 8088 	bcs.w	8014ff6 <_scanf_float+0x172>
 8014ee6:	2b2d      	cmp	r3, #45	; 0x2d
 8014ee8:	f000 8090 	beq.w	801500c <_scanf_float+0x188>
 8014eec:	d815      	bhi.n	8014f1a <_scanf_float+0x96>
 8014eee:	2b2b      	cmp	r3, #43	; 0x2b
 8014ef0:	f000 808c 	beq.w	801500c <_scanf_float+0x188>
 8014ef4:	f1b9 0f00 	cmp.w	r9, #0
 8014ef8:	d003      	beq.n	8014f02 <_scanf_float+0x7e>
 8014efa:	6823      	ldr	r3, [r4, #0]
 8014efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014f00:	6023      	str	r3, [r4, #0]
 8014f02:	3a01      	subs	r2, #1
 8014f04:	2a01      	cmp	r2, #1
 8014f06:	f200 80ea 	bhi.w	80150de <_scanf_float+0x25a>
 8014f0a:	4545      	cmp	r5, r8
 8014f0c:	f200 80dc 	bhi.w	80150c8 <_scanf_float+0x244>
 8014f10:	2601      	movs	r6, #1
 8014f12:	4630      	mov	r0, r6
 8014f14:	b007      	add	sp, #28
 8014f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8014f1c:	f000 809f 	beq.w	801505e <_scanf_float+0x1da>
 8014f20:	2b30      	cmp	r3, #48	; 0x30
 8014f22:	d1e7      	bne.n	8014ef4 <_scanf_float+0x70>
 8014f24:	6820      	ldr	r0, [r4, #0]
 8014f26:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014f2a:	d064      	beq.n	8014ff6 <_scanf_float+0x172>
 8014f2c:	9b01      	ldr	r3, [sp, #4]
 8014f2e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014f32:	6020      	str	r0, [r4, #0]
 8014f34:	f109 0901 	add.w	r9, r9, #1
 8014f38:	b11b      	cbz	r3, 8014f42 <_scanf_float+0xbe>
 8014f3a:	3b01      	subs	r3, #1
 8014f3c:	3101      	adds	r1, #1
 8014f3e:	9301      	str	r3, [sp, #4]
 8014f40:	60a1      	str	r1, [r4, #8]
 8014f42:	68a3      	ldr	r3, [r4, #8]
 8014f44:	3b01      	subs	r3, #1
 8014f46:	60a3      	str	r3, [r4, #8]
 8014f48:	6923      	ldr	r3, [r4, #16]
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	6123      	str	r3, [r4, #16]
 8014f4e:	6873      	ldr	r3, [r6, #4]
 8014f50:	3b01      	subs	r3, #1
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	6073      	str	r3, [r6, #4]
 8014f56:	f340 80ac 	ble.w	80150b2 <_scanf_float+0x22e>
 8014f5a:	6833      	ldr	r3, [r6, #0]
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	6033      	str	r3, [r6, #0]
 8014f60:	e7b5      	b.n	8014ece <_scanf_float+0x4a>
 8014f62:	2b45      	cmp	r3, #69	; 0x45
 8014f64:	f000 8085 	beq.w	8015072 <_scanf_float+0x1ee>
 8014f68:	2b46      	cmp	r3, #70	; 0x46
 8014f6a:	d06a      	beq.n	8015042 <_scanf_float+0x1be>
 8014f6c:	2b41      	cmp	r3, #65	; 0x41
 8014f6e:	d1c1      	bne.n	8014ef4 <_scanf_float+0x70>
 8014f70:	2a01      	cmp	r2, #1
 8014f72:	d1bf      	bne.n	8014ef4 <_scanf_float+0x70>
 8014f74:	2202      	movs	r2, #2
 8014f76:	e046      	b.n	8015006 <_scanf_float+0x182>
 8014f78:	2b65      	cmp	r3, #101	; 0x65
 8014f7a:	d07a      	beq.n	8015072 <_scanf_float+0x1ee>
 8014f7c:	d818      	bhi.n	8014fb0 <_scanf_float+0x12c>
 8014f7e:	2b54      	cmp	r3, #84	; 0x54
 8014f80:	d066      	beq.n	8015050 <_scanf_float+0x1cc>
 8014f82:	d811      	bhi.n	8014fa8 <_scanf_float+0x124>
 8014f84:	2b4e      	cmp	r3, #78	; 0x4e
 8014f86:	d1b5      	bne.n	8014ef4 <_scanf_float+0x70>
 8014f88:	2a00      	cmp	r2, #0
 8014f8a:	d146      	bne.n	801501a <_scanf_float+0x196>
 8014f8c:	f1b9 0f00 	cmp.w	r9, #0
 8014f90:	d145      	bne.n	801501e <_scanf_float+0x19a>
 8014f92:	6821      	ldr	r1, [r4, #0]
 8014f94:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014f98:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014f9c:	d13f      	bne.n	801501e <_scanf_float+0x19a>
 8014f9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014fa2:	6021      	str	r1, [r4, #0]
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	e02e      	b.n	8015006 <_scanf_float+0x182>
 8014fa8:	2b59      	cmp	r3, #89	; 0x59
 8014faa:	d01e      	beq.n	8014fea <_scanf_float+0x166>
 8014fac:	2b61      	cmp	r3, #97	; 0x61
 8014fae:	e7de      	b.n	8014f6e <_scanf_float+0xea>
 8014fb0:	2b6e      	cmp	r3, #110	; 0x6e
 8014fb2:	d0e9      	beq.n	8014f88 <_scanf_float+0x104>
 8014fb4:	d815      	bhi.n	8014fe2 <_scanf_float+0x15e>
 8014fb6:	2b66      	cmp	r3, #102	; 0x66
 8014fb8:	d043      	beq.n	8015042 <_scanf_float+0x1be>
 8014fba:	2b69      	cmp	r3, #105	; 0x69
 8014fbc:	d19a      	bne.n	8014ef4 <_scanf_float+0x70>
 8014fbe:	f1bb 0f00 	cmp.w	fp, #0
 8014fc2:	d138      	bne.n	8015036 <_scanf_float+0x1b2>
 8014fc4:	f1b9 0f00 	cmp.w	r9, #0
 8014fc8:	d197      	bne.n	8014efa <_scanf_float+0x76>
 8014fca:	6821      	ldr	r1, [r4, #0]
 8014fcc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014fd0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014fd4:	d195      	bne.n	8014f02 <_scanf_float+0x7e>
 8014fd6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014fda:	6021      	str	r1, [r4, #0]
 8014fdc:	f04f 0b01 	mov.w	fp, #1
 8014fe0:	e011      	b.n	8015006 <_scanf_float+0x182>
 8014fe2:	2b74      	cmp	r3, #116	; 0x74
 8014fe4:	d034      	beq.n	8015050 <_scanf_float+0x1cc>
 8014fe6:	2b79      	cmp	r3, #121	; 0x79
 8014fe8:	d184      	bne.n	8014ef4 <_scanf_float+0x70>
 8014fea:	f1bb 0f07 	cmp.w	fp, #7
 8014fee:	d181      	bne.n	8014ef4 <_scanf_float+0x70>
 8014ff0:	f04f 0b08 	mov.w	fp, #8
 8014ff4:	e007      	b.n	8015006 <_scanf_float+0x182>
 8014ff6:	eb12 0f0b 	cmn.w	r2, fp
 8014ffa:	f47f af7b 	bne.w	8014ef4 <_scanf_float+0x70>
 8014ffe:	6821      	ldr	r1, [r4, #0]
 8015000:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015004:	6021      	str	r1, [r4, #0]
 8015006:	702b      	strb	r3, [r5, #0]
 8015008:	3501      	adds	r5, #1
 801500a:	e79a      	b.n	8014f42 <_scanf_float+0xbe>
 801500c:	6821      	ldr	r1, [r4, #0]
 801500e:	0608      	lsls	r0, r1, #24
 8015010:	f57f af70 	bpl.w	8014ef4 <_scanf_float+0x70>
 8015014:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015018:	e7f4      	b.n	8015004 <_scanf_float+0x180>
 801501a:	2a02      	cmp	r2, #2
 801501c:	d047      	beq.n	80150ae <_scanf_float+0x22a>
 801501e:	f1bb 0f01 	cmp.w	fp, #1
 8015022:	d003      	beq.n	801502c <_scanf_float+0x1a8>
 8015024:	f1bb 0f04 	cmp.w	fp, #4
 8015028:	f47f af64 	bne.w	8014ef4 <_scanf_float+0x70>
 801502c:	f10b 0b01 	add.w	fp, fp, #1
 8015030:	fa5f fb8b 	uxtb.w	fp, fp
 8015034:	e7e7      	b.n	8015006 <_scanf_float+0x182>
 8015036:	f1bb 0f03 	cmp.w	fp, #3
 801503a:	d0f7      	beq.n	801502c <_scanf_float+0x1a8>
 801503c:	f1bb 0f05 	cmp.w	fp, #5
 8015040:	e7f2      	b.n	8015028 <_scanf_float+0x1a4>
 8015042:	f1bb 0f02 	cmp.w	fp, #2
 8015046:	f47f af55 	bne.w	8014ef4 <_scanf_float+0x70>
 801504a:	f04f 0b03 	mov.w	fp, #3
 801504e:	e7da      	b.n	8015006 <_scanf_float+0x182>
 8015050:	f1bb 0f06 	cmp.w	fp, #6
 8015054:	f47f af4e 	bne.w	8014ef4 <_scanf_float+0x70>
 8015058:	f04f 0b07 	mov.w	fp, #7
 801505c:	e7d3      	b.n	8015006 <_scanf_float+0x182>
 801505e:	6821      	ldr	r1, [r4, #0]
 8015060:	0588      	lsls	r0, r1, #22
 8015062:	f57f af47 	bpl.w	8014ef4 <_scanf_float+0x70>
 8015066:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801506a:	6021      	str	r1, [r4, #0]
 801506c:	f8cd 9008 	str.w	r9, [sp, #8]
 8015070:	e7c9      	b.n	8015006 <_scanf_float+0x182>
 8015072:	6821      	ldr	r1, [r4, #0]
 8015074:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015078:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801507c:	d006      	beq.n	801508c <_scanf_float+0x208>
 801507e:	0548      	lsls	r0, r1, #21
 8015080:	f57f af38 	bpl.w	8014ef4 <_scanf_float+0x70>
 8015084:	f1b9 0f00 	cmp.w	r9, #0
 8015088:	f43f af3b 	beq.w	8014f02 <_scanf_float+0x7e>
 801508c:	0588      	lsls	r0, r1, #22
 801508e:	bf58      	it	pl
 8015090:	9802      	ldrpl	r0, [sp, #8]
 8015092:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015096:	bf58      	it	pl
 8015098:	eba9 0000 	subpl.w	r0, r9, r0
 801509c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80150a0:	bf58      	it	pl
 80150a2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80150a6:	6021      	str	r1, [r4, #0]
 80150a8:	f04f 0900 	mov.w	r9, #0
 80150ac:	e7ab      	b.n	8015006 <_scanf_float+0x182>
 80150ae:	2203      	movs	r2, #3
 80150b0:	e7a9      	b.n	8015006 <_scanf_float+0x182>
 80150b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80150b6:	9205      	str	r2, [sp, #20]
 80150b8:	4631      	mov	r1, r6
 80150ba:	4638      	mov	r0, r7
 80150bc:	4798      	blx	r3
 80150be:	9a05      	ldr	r2, [sp, #20]
 80150c0:	2800      	cmp	r0, #0
 80150c2:	f43f af04 	beq.w	8014ece <_scanf_float+0x4a>
 80150c6:	e715      	b.n	8014ef4 <_scanf_float+0x70>
 80150c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80150cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80150d0:	4632      	mov	r2, r6
 80150d2:	4638      	mov	r0, r7
 80150d4:	4798      	blx	r3
 80150d6:	6923      	ldr	r3, [r4, #16]
 80150d8:	3b01      	subs	r3, #1
 80150da:	6123      	str	r3, [r4, #16]
 80150dc:	e715      	b.n	8014f0a <_scanf_float+0x86>
 80150de:	f10b 33ff 	add.w	r3, fp, #4294967295
 80150e2:	2b06      	cmp	r3, #6
 80150e4:	d80a      	bhi.n	80150fc <_scanf_float+0x278>
 80150e6:	f1bb 0f02 	cmp.w	fp, #2
 80150ea:	d968      	bls.n	80151be <_scanf_float+0x33a>
 80150ec:	f1ab 0b03 	sub.w	fp, fp, #3
 80150f0:	fa5f fb8b 	uxtb.w	fp, fp
 80150f4:	eba5 0b0b 	sub.w	fp, r5, fp
 80150f8:	455d      	cmp	r5, fp
 80150fa:	d14b      	bne.n	8015194 <_scanf_float+0x310>
 80150fc:	6823      	ldr	r3, [r4, #0]
 80150fe:	05da      	lsls	r2, r3, #23
 8015100:	d51f      	bpl.n	8015142 <_scanf_float+0x2be>
 8015102:	055b      	lsls	r3, r3, #21
 8015104:	d468      	bmi.n	80151d8 <_scanf_float+0x354>
 8015106:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801510a:	6923      	ldr	r3, [r4, #16]
 801510c:	2965      	cmp	r1, #101	; 0x65
 801510e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015112:	f105 3bff 	add.w	fp, r5, #4294967295
 8015116:	6123      	str	r3, [r4, #16]
 8015118:	d00d      	beq.n	8015136 <_scanf_float+0x2b2>
 801511a:	2945      	cmp	r1, #69	; 0x45
 801511c:	d00b      	beq.n	8015136 <_scanf_float+0x2b2>
 801511e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015122:	4632      	mov	r2, r6
 8015124:	4638      	mov	r0, r7
 8015126:	4798      	blx	r3
 8015128:	6923      	ldr	r3, [r4, #16]
 801512a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801512e:	3b01      	subs	r3, #1
 8015130:	f1a5 0b02 	sub.w	fp, r5, #2
 8015134:	6123      	str	r3, [r4, #16]
 8015136:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801513a:	4632      	mov	r2, r6
 801513c:	4638      	mov	r0, r7
 801513e:	4798      	blx	r3
 8015140:	465d      	mov	r5, fp
 8015142:	6826      	ldr	r6, [r4, #0]
 8015144:	f016 0610 	ands.w	r6, r6, #16
 8015148:	d17a      	bne.n	8015240 <_scanf_float+0x3bc>
 801514a:	702e      	strb	r6, [r5, #0]
 801514c:	6823      	ldr	r3, [r4, #0]
 801514e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015156:	d142      	bne.n	80151de <_scanf_float+0x35a>
 8015158:	9b02      	ldr	r3, [sp, #8]
 801515a:	eba9 0303 	sub.w	r3, r9, r3
 801515e:	425a      	negs	r2, r3
 8015160:	2b00      	cmp	r3, #0
 8015162:	d149      	bne.n	80151f8 <_scanf_float+0x374>
 8015164:	2200      	movs	r2, #0
 8015166:	4641      	mov	r1, r8
 8015168:	4638      	mov	r0, r7
 801516a:	f000 ff0d 	bl	8015f88 <_strtod_r>
 801516e:	6825      	ldr	r5, [r4, #0]
 8015170:	f8da 3000 	ldr.w	r3, [sl]
 8015174:	f015 0f02 	tst.w	r5, #2
 8015178:	f103 0204 	add.w	r2, r3, #4
 801517c:	ec59 8b10 	vmov	r8, r9, d0
 8015180:	f8ca 2000 	str.w	r2, [sl]
 8015184:	d043      	beq.n	801520e <_scanf_float+0x38a>
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	e9c3 8900 	strd	r8, r9, [r3]
 801518c:	68e3      	ldr	r3, [r4, #12]
 801518e:	3301      	adds	r3, #1
 8015190:	60e3      	str	r3, [r4, #12]
 8015192:	e6be      	b.n	8014f12 <_scanf_float+0x8e>
 8015194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015198:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801519c:	4632      	mov	r2, r6
 801519e:	4638      	mov	r0, r7
 80151a0:	4798      	blx	r3
 80151a2:	6923      	ldr	r3, [r4, #16]
 80151a4:	3b01      	subs	r3, #1
 80151a6:	6123      	str	r3, [r4, #16]
 80151a8:	e7a6      	b.n	80150f8 <_scanf_float+0x274>
 80151aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80151ae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80151b2:	4632      	mov	r2, r6
 80151b4:	4638      	mov	r0, r7
 80151b6:	4798      	blx	r3
 80151b8:	6923      	ldr	r3, [r4, #16]
 80151ba:	3b01      	subs	r3, #1
 80151bc:	6123      	str	r3, [r4, #16]
 80151be:	4545      	cmp	r5, r8
 80151c0:	d8f3      	bhi.n	80151aa <_scanf_float+0x326>
 80151c2:	e6a5      	b.n	8014f10 <_scanf_float+0x8c>
 80151c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80151c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80151cc:	4632      	mov	r2, r6
 80151ce:	4638      	mov	r0, r7
 80151d0:	4798      	blx	r3
 80151d2:	6923      	ldr	r3, [r4, #16]
 80151d4:	3b01      	subs	r3, #1
 80151d6:	6123      	str	r3, [r4, #16]
 80151d8:	4545      	cmp	r5, r8
 80151da:	d8f3      	bhi.n	80151c4 <_scanf_float+0x340>
 80151dc:	e698      	b.n	8014f10 <_scanf_float+0x8c>
 80151de:	9b03      	ldr	r3, [sp, #12]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d0bf      	beq.n	8015164 <_scanf_float+0x2e0>
 80151e4:	9904      	ldr	r1, [sp, #16]
 80151e6:	230a      	movs	r3, #10
 80151e8:	4632      	mov	r2, r6
 80151ea:	3101      	adds	r1, #1
 80151ec:	4638      	mov	r0, r7
 80151ee:	f000 ff57 	bl	80160a0 <_strtol_r>
 80151f2:	9b03      	ldr	r3, [sp, #12]
 80151f4:	9d04      	ldr	r5, [sp, #16]
 80151f6:	1ac2      	subs	r2, r0, r3
 80151f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80151fc:	429d      	cmp	r5, r3
 80151fe:	bf28      	it	cs
 8015200:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015204:	490f      	ldr	r1, [pc, #60]	; (8015244 <_scanf_float+0x3c0>)
 8015206:	4628      	mov	r0, r5
 8015208:	f000 f858 	bl	80152bc <siprintf>
 801520c:	e7aa      	b.n	8015164 <_scanf_float+0x2e0>
 801520e:	f015 0504 	ands.w	r5, r5, #4
 8015212:	d1b8      	bne.n	8015186 <_scanf_float+0x302>
 8015214:	681f      	ldr	r7, [r3, #0]
 8015216:	ee10 2a10 	vmov	r2, s0
 801521a:	464b      	mov	r3, r9
 801521c:	ee10 0a10 	vmov	r0, s0
 8015220:	4649      	mov	r1, r9
 8015222:	f7eb fc9b 	bl	8000b5c <__aeabi_dcmpun>
 8015226:	b128      	cbz	r0, 8015234 <_scanf_float+0x3b0>
 8015228:	4628      	mov	r0, r5
 801522a:	f000 f80d 	bl	8015248 <nanf>
 801522e:	ed87 0a00 	vstr	s0, [r7]
 8015232:	e7ab      	b.n	801518c <_scanf_float+0x308>
 8015234:	4640      	mov	r0, r8
 8015236:	4649      	mov	r1, r9
 8015238:	f7eb fcee 	bl	8000c18 <__aeabi_d2f>
 801523c:	6038      	str	r0, [r7, #0]
 801523e:	e7a5      	b.n	801518c <_scanf_float+0x308>
 8015240:	2600      	movs	r6, #0
 8015242:	e666      	b.n	8014f12 <_scanf_float+0x8e>
 8015244:	08018eae 	.word	0x08018eae

08015248 <nanf>:
 8015248:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015250 <nanf+0x8>
 801524c:	4770      	bx	lr
 801524e:	bf00      	nop
 8015250:	7fc00000 	.word	0x7fc00000

08015254 <sniprintf>:
 8015254:	b40c      	push	{r2, r3}
 8015256:	b530      	push	{r4, r5, lr}
 8015258:	4b17      	ldr	r3, [pc, #92]	; (80152b8 <sniprintf+0x64>)
 801525a:	1e0c      	subs	r4, r1, #0
 801525c:	b09d      	sub	sp, #116	; 0x74
 801525e:	681d      	ldr	r5, [r3, #0]
 8015260:	da08      	bge.n	8015274 <sniprintf+0x20>
 8015262:	238b      	movs	r3, #139	; 0x8b
 8015264:	602b      	str	r3, [r5, #0]
 8015266:	f04f 30ff 	mov.w	r0, #4294967295
 801526a:	b01d      	add	sp, #116	; 0x74
 801526c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015270:	b002      	add	sp, #8
 8015272:	4770      	bx	lr
 8015274:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015278:	f8ad 3014 	strh.w	r3, [sp, #20]
 801527c:	bf14      	ite	ne
 801527e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015282:	4623      	moveq	r3, r4
 8015284:	9304      	str	r3, [sp, #16]
 8015286:	9307      	str	r3, [sp, #28]
 8015288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801528c:	9002      	str	r0, [sp, #8]
 801528e:	9006      	str	r0, [sp, #24]
 8015290:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015294:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015296:	ab21      	add	r3, sp, #132	; 0x84
 8015298:	a902      	add	r1, sp, #8
 801529a:	4628      	mov	r0, r5
 801529c:	9301      	str	r3, [sp, #4]
 801529e:	f002 fdf3 	bl	8017e88 <_svfiprintf_r>
 80152a2:	1c43      	adds	r3, r0, #1
 80152a4:	bfbc      	itt	lt
 80152a6:	238b      	movlt	r3, #139	; 0x8b
 80152a8:	602b      	strlt	r3, [r5, #0]
 80152aa:	2c00      	cmp	r4, #0
 80152ac:	d0dd      	beq.n	801526a <sniprintf+0x16>
 80152ae:	9b02      	ldr	r3, [sp, #8]
 80152b0:	2200      	movs	r2, #0
 80152b2:	701a      	strb	r2, [r3, #0]
 80152b4:	e7d9      	b.n	801526a <sniprintf+0x16>
 80152b6:	bf00      	nop
 80152b8:	2000000c 	.word	0x2000000c

080152bc <siprintf>:
 80152bc:	b40e      	push	{r1, r2, r3}
 80152be:	b500      	push	{lr}
 80152c0:	b09c      	sub	sp, #112	; 0x70
 80152c2:	ab1d      	add	r3, sp, #116	; 0x74
 80152c4:	9002      	str	r0, [sp, #8]
 80152c6:	9006      	str	r0, [sp, #24]
 80152c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80152cc:	4809      	ldr	r0, [pc, #36]	; (80152f4 <siprintf+0x38>)
 80152ce:	9107      	str	r1, [sp, #28]
 80152d0:	9104      	str	r1, [sp, #16]
 80152d2:	4909      	ldr	r1, [pc, #36]	; (80152f8 <siprintf+0x3c>)
 80152d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80152d8:	9105      	str	r1, [sp, #20]
 80152da:	6800      	ldr	r0, [r0, #0]
 80152dc:	9301      	str	r3, [sp, #4]
 80152de:	a902      	add	r1, sp, #8
 80152e0:	f002 fdd2 	bl	8017e88 <_svfiprintf_r>
 80152e4:	9b02      	ldr	r3, [sp, #8]
 80152e6:	2200      	movs	r2, #0
 80152e8:	701a      	strb	r2, [r3, #0]
 80152ea:	b01c      	add	sp, #112	; 0x70
 80152ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80152f0:	b003      	add	sp, #12
 80152f2:	4770      	bx	lr
 80152f4:	2000000c 	.word	0x2000000c
 80152f8:	ffff0208 	.word	0xffff0208

080152fc <siscanf>:
 80152fc:	b40e      	push	{r1, r2, r3}
 80152fe:	b530      	push	{r4, r5, lr}
 8015300:	b09c      	sub	sp, #112	; 0x70
 8015302:	ac1f      	add	r4, sp, #124	; 0x7c
 8015304:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015308:	f854 5b04 	ldr.w	r5, [r4], #4
 801530c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015310:	9002      	str	r0, [sp, #8]
 8015312:	9006      	str	r0, [sp, #24]
 8015314:	f7ea ff74 	bl	8000200 <strlen>
 8015318:	4b0b      	ldr	r3, [pc, #44]	; (8015348 <siscanf+0x4c>)
 801531a:	9003      	str	r0, [sp, #12]
 801531c:	9007      	str	r0, [sp, #28]
 801531e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015320:	480a      	ldr	r0, [pc, #40]	; (801534c <siscanf+0x50>)
 8015322:	9401      	str	r4, [sp, #4]
 8015324:	2300      	movs	r3, #0
 8015326:	930f      	str	r3, [sp, #60]	; 0x3c
 8015328:	9314      	str	r3, [sp, #80]	; 0x50
 801532a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801532e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015332:	462a      	mov	r2, r5
 8015334:	4623      	mov	r3, r4
 8015336:	a902      	add	r1, sp, #8
 8015338:	6800      	ldr	r0, [r0, #0]
 801533a:	f002 fef7 	bl	801812c <__ssvfiscanf_r>
 801533e:	b01c      	add	sp, #112	; 0x70
 8015340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015344:	b003      	add	sp, #12
 8015346:	4770      	bx	lr
 8015348:	08015351 	.word	0x08015351
 801534c:	2000000c 	.word	0x2000000c

08015350 <__seofread>:
 8015350:	2000      	movs	r0, #0
 8015352:	4770      	bx	lr

08015354 <strcpy>:
 8015354:	4603      	mov	r3, r0
 8015356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801535a:	f803 2b01 	strb.w	r2, [r3], #1
 801535e:	2a00      	cmp	r2, #0
 8015360:	d1f9      	bne.n	8015356 <strcpy+0x2>
 8015362:	4770      	bx	lr

08015364 <sulp>:
 8015364:	b570      	push	{r4, r5, r6, lr}
 8015366:	4604      	mov	r4, r0
 8015368:	460d      	mov	r5, r1
 801536a:	ec45 4b10 	vmov	d0, r4, r5
 801536e:	4616      	mov	r6, r2
 8015370:	f002 fb46 	bl	8017a00 <__ulp>
 8015374:	ec51 0b10 	vmov	r0, r1, d0
 8015378:	b17e      	cbz	r6, 801539a <sulp+0x36>
 801537a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801537e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015382:	2b00      	cmp	r3, #0
 8015384:	dd09      	ble.n	801539a <sulp+0x36>
 8015386:	051b      	lsls	r3, r3, #20
 8015388:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801538c:	2400      	movs	r4, #0
 801538e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015392:	4622      	mov	r2, r4
 8015394:	462b      	mov	r3, r5
 8015396:	f7eb f947 	bl	8000628 <__aeabi_dmul>
 801539a:	bd70      	pop	{r4, r5, r6, pc}
 801539c:	0000      	movs	r0, r0
	...

080153a0 <_strtod_l>:
 80153a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a4:	461f      	mov	r7, r3
 80153a6:	b0a1      	sub	sp, #132	; 0x84
 80153a8:	2300      	movs	r3, #0
 80153aa:	4681      	mov	r9, r0
 80153ac:	4638      	mov	r0, r7
 80153ae:	460e      	mov	r6, r1
 80153b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80153b2:	931c      	str	r3, [sp, #112]	; 0x70
 80153b4:	f002 f824 	bl	8017400 <__localeconv_l>
 80153b8:	4680      	mov	r8, r0
 80153ba:	6800      	ldr	r0, [r0, #0]
 80153bc:	f7ea ff20 	bl	8000200 <strlen>
 80153c0:	f04f 0a00 	mov.w	sl, #0
 80153c4:	4604      	mov	r4, r0
 80153c6:	f04f 0b00 	mov.w	fp, #0
 80153ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80153cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80153ce:	781a      	ldrb	r2, [r3, #0]
 80153d0:	2a0d      	cmp	r2, #13
 80153d2:	d832      	bhi.n	801543a <_strtod_l+0x9a>
 80153d4:	2a09      	cmp	r2, #9
 80153d6:	d236      	bcs.n	8015446 <_strtod_l+0xa6>
 80153d8:	2a00      	cmp	r2, #0
 80153da:	d03e      	beq.n	801545a <_strtod_l+0xba>
 80153dc:	2300      	movs	r3, #0
 80153de:	930d      	str	r3, [sp, #52]	; 0x34
 80153e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80153e2:	782b      	ldrb	r3, [r5, #0]
 80153e4:	2b30      	cmp	r3, #48	; 0x30
 80153e6:	f040 80ac 	bne.w	8015542 <_strtod_l+0x1a2>
 80153ea:	786b      	ldrb	r3, [r5, #1]
 80153ec:	2b58      	cmp	r3, #88	; 0x58
 80153ee:	d001      	beq.n	80153f4 <_strtod_l+0x54>
 80153f0:	2b78      	cmp	r3, #120	; 0x78
 80153f2:	d167      	bne.n	80154c4 <_strtod_l+0x124>
 80153f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153f6:	9301      	str	r3, [sp, #4]
 80153f8:	ab1c      	add	r3, sp, #112	; 0x70
 80153fa:	9300      	str	r3, [sp, #0]
 80153fc:	9702      	str	r7, [sp, #8]
 80153fe:	ab1d      	add	r3, sp, #116	; 0x74
 8015400:	4a88      	ldr	r2, [pc, #544]	; (8015624 <_strtod_l+0x284>)
 8015402:	a91b      	add	r1, sp, #108	; 0x6c
 8015404:	4648      	mov	r0, r9
 8015406:	f001 fd12 	bl	8016e2e <__gethex>
 801540a:	f010 0407 	ands.w	r4, r0, #7
 801540e:	4606      	mov	r6, r0
 8015410:	d005      	beq.n	801541e <_strtod_l+0x7e>
 8015412:	2c06      	cmp	r4, #6
 8015414:	d12b      	bne.n	801546e <_strtod_l+0xce>
 8015416:	3501      	adds	r5, #1
 8015418:	2300      	movs	r3, #0
 801541a:	951b      	str	r5, [sp, #108]	; 0x6c
 801541c:	930d      	str	r3, [sp, #52]	; 0x34
 801541e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015420:	2b00      	cmp	r3, #0
 8015422:	f040 859a 	bne.w	8015f5a <_strtod_l+0xbba>
 8015426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015428:	b1e3      	cbz	r3, 8015464 <_strtod_l+0xc4>
 801542a:	4652      	mov	r2, sl
 801542c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015430:	ec43 2b10 	vmov	d0, r2, r3
 8015434:	b021      	add	sp, #132	; 0x84
 8015436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801543a:	2a2b      	cmp	r2, #43	; 0x2b
 801543c:	d015      	beq.n	801546a <_strtod_l+0xca>
 801543e:	2a2d      	cmp	r2, #45	; 0x2d
 8015440:	d004      	beq.n	801544c <_strtod_l+0xac>
 8015442:	2a20      	cmp	r2, #32
 8015444:	d1ca      	bne.n	80153dc <_strtod_l+0x3c>
 8015446:	3301      	adds	r3, #1
 8015448:	931b      	str	r3, [sp, #108]	; 0x6c
 801544a:	e7bf      	b.n	80153cc <_strtod_l+0x2c>
 801544c:	2201      	movs	r2, #1
 801544e:	920d      	str	r2, [sp, #52]	; 0x34
 8015450:	1c5a      	adds	r2, r3, #1
 8015452:	921b      	str	r2, [sp, #108]	; 0x6c
 8015454:	785b      	ldrb	r3, [r3, #1]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d1c2      	bne.n	80153e0 <_strtod_l+0x40>
 801545a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801545c:	961b      	str	r6, [sp, #108]	; 0x6c
 801545e:	2b00      	cmp	r3, #0
 8015460:	f040 8579 	bne.w	8015f56 <_strtod_l+0xbb6>
 8015464:	4652      	mov	r2, sl
 8015466:	465b      	mov	r3, fp
 8015468:	e7e2      	b.n	8015430 <_strtod_l+0x90>
 801546a:	2200      	movs	r2, #0
 801546c:	e7ef      	b.n	801544e <_strtod_l+0xae>
 801546e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015470:	b13a      	cbz	r2, 8015482 <_strtod_l+0xe2>
 8015472:	2135      	movs	r1, #53	; 0x35
 8015474:	a81e      	add	r0, sp, #120	; 0x78
 8015476:	f002 fbbb 	bl	8017bf0 <__copybits>
 801547a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801547c:	4648      	mov	r0, r9
 801547e:	f002 f828 	bl	80174d2 <_Bfree>
 8015482:	3c01      	subs	r4, #1
 8015484:	2c04      	cmp	r4, #4
 8015486:	d806      	bhi.n	8015496 <_strtod_l+0xf6>
 8015488:	e8df f004 	tbb	[pc, r4]
 801548c:	1714030a 	.word	0x1714030a
 8015490:	0a          	.byte	0x0a
 8015491:	00          	.byte	0x00
 8015492:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015496:	0730      	lsls	r0, r6, #28
 8015498:	d5c1      	bpl.n	801541e <_strtod_l+0x7e>
 801549a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801549e:	e7be      	b.n	801541e <_strtod_l+0x7e>
 80154a0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80154a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80154a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80154aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80154ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80154b2:	e7f0      	b.n	8015496 <_strtod_l+0xf6>
 80154b4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015628 <_strtod_l+0x288>
 80154b8:	e7ed      	b.n	8015496 <_strtod_l+0xf6>
 80154ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80154be:	f04f 3aff 	mov.w	sl, #4294967295
 80154c2:	e7e8      	b.n	8015496 <_strtod_l+0xf6>
 80154c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154c6:	1c5a      	adds	r2, r3, #1
 80154c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80154ca:	785b      	ldrb	r3, [r3, #1]
 80154cc:	2b30      	cmp	r3, #48	; 0x30
 80154ce:	d0f9      	beq.n	80154c4 <_strtod_l+0x124>
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d0a4      	beq.n	801541e <_strtod_l+0x7e>
 80154d4:	2301      	movs	r3, #1
 80154d6:	2500      	movs	r5, #0
 80154d8:	9306      	str	r3, [sp, #24]
 80154da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154dc:	9308      	str	r3, [sp, #32]
 80154de:	9507      	str	r5, [sp, #28]
 80154e0:	9505      	str	r5, [sp, #20]
 80154e2:	220a      	movs	r2, #10
 80154e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80154e6:	7807      	ldrb	r7, [r0, #0]
 80154e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80154ec:	b2d9      	uxtb	r1, r3
 80154ee:	2909      	cmp	r1, #9
 80154f0:	d929      	bls.n	8015546 <_strtod_l+0x1a6>
 80154f2:	4622      	mov	r2, r4
 80154f4:	f8d8 1000 	ldr.w	r1, [r8]
 80154f8:	f003 f902 	bl	8018700 <strncmp>
 80154fc:	2800      	cmp	r0, #0
 80154fe:	d031      	beq.n	8015564 <_strtod_l+0x1c4>
 8015500:	2000      	movs	r0, #0
 8015502:	9c05      	ldr	r4, [sp, #20]
 8015504:	9004      	str	r0, [sp, #16]
 8015506:	463b      	mov	r3, r7
 8015508:	4602      	mov	r2, r0
 801550a:	2b65      	cmp	r3, #101	; 0x65
 801550c:	d001      	beq.n	8015512 <_strtod_l+0x172>
 801550e:	2b45      	cmp	r3, #69	; 0x45
 8015510:	d114      	bne.n	801553c <_strtod_l+0x19c>
 8015512:	b924      	cbnz	r4, 801551e <_strtod_l+0x17e>
 8015514:	b910      	cbnz	r0, 801551c <_strtod_l+0x17c>
 8015516:	9b06      	ldr	r3, [sp, #24]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d09e      	beq.n	801545a <_strtod_l+0xba>
 801551c:	2400      	movs	r4, #0
 801551e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015520:	1c73      	adds	r3, r6, #1
 8015522:	931b      	str	r3, [sp, #108]	; 0x6c
 8015524:	7873      	ldrb	r3, [r6, #1]
 8015526:	2b2b      	cmp	r3, #43	; 0x2b
 8015528:	d078      	beq.n	801561c <_strtod_l+0x27c>
 801552a:	2b2d      	cmp	r3, #45	; 0x2d
 801552c:	d070      	beq.n	8015610 <_strtod_l+0x270>
 801552e:	f04f 0c00 	mov.w	ip, #0
 8015532:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015536:	2f09      	cmp	r7, #9
 8015538:	d97c      	bls.n	8015634 <_strtod_l+0x294>
 801553a:	961b      	str	r6, [sp, #108]	; 0x6c
 801553c:	f04f 0e00 	mov.w	lr, #0
 8015540:	e09a      	b.n	8015678 <_strtod_l+0x2d8>
 8015542:	2300      	movs	r3, #0
 8015544:	e7c7      	b.n	80154d6 <_strtod_l+0x136>
 8015546:	9905      	ldr	r1, [sp, #20]
 8015548:	2908      	cmp	r1, #8
 801554a:	bfdd      	ittte	le
 801554c:	9907      	ldrle	r1, [sp, #28]
 801554e:	fb02 3301 	mlale	r3, r2, r1, r3
 8015552:	9307      	strle	r3, [sp, #28]
 8015554:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015558:	9b05      	ldr	r3, [sp, #20]
 801555a:	3001      	adds	r0, #1
 801555c:	3301      	adds	r3, #1
 801555e:	9305      	str	r3, [sp, #20]
 8015560:	901b      	str	r0, [sp, #108]	; 0x6c
 8015562:	e7bf      	b.n	80154e4 <_strtod_l+0x144>
 8015564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015566:	191a      	adds	r2, r3, r4
 8015568:	921b      	str	r2, [sp, #108]	; 0x6c
 801556a:	9a05      	ldr	r2, [sp, #20]
 801556c:	5d1b      	ldrb	r3, [r3, r4]
 801556e:	2a00      	cmp	r2, #0
 8015570:	d037      	beq.n	80155e2 <_strtod_l+0x242>
 8015572:	9c05      	ldr	r4, [sp, #20]
 8015574:	4602      	mov	r2, r0
 8015576:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801557a:	2909      	cmp	r1, #9
 801557c:	d913      	bls.n	80155a6 <_strtod_l+0x206>
 801557e:	2101      	movs	r1, #1
 8015580:	9104      	str	r1, [sp, #16]
 8015582:	e7c2      	b.n	801550a <_strtod_l+0x16a>
 8015584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015586:	1c5a      	adds	r2, r3, #1
 8015588:	921b      	str	r2, [sp, #108]	; 0x6c
 801558a:	785b      	ldrb	r3, [r3, #1]
 801558c:	3001      	adds	r0, #1
 801558e:	2b30      	cmp	r3, #48	; 0x30
 8015590:	d0f8      	beq.n	8015584 <_strtod_l+0x1e4>
 8015592:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015596:	2a08      	cmp	r2, #8
 8015598:	f200 84e4 	bhi.w	8015f64 <_strtod_l+0xbc4>
 801559c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801559e:	9208      	str	r2, [sp, #32]
 80155a0:	4602      	mov	r2, r0
 80155a2:	2000      	movs	r0, #0
 80155a4:	4604      	mov	r4, r0
 80155a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80155aa:	f100 0101 	add.w	r1, r0, #1
 80155ae:	d012      	beq.n	80155d6 <_strtod_l+0x236>
 80155b0:	440a      	add	r2, r1
 80155b2:	eb00 0c04 	add.w	ip, r0, r4
 80155b6:	4621      	mov	r1, r4
 80155b8:	270a      	movs	r7, #10
 80155ba:	458c      	cmp	ip, r1
 80155bc:	d113      	bne.n	80155e6 <_strtod_l+0x246>
 80155be:	1821      	adds	r1, r4, r0
 80155c0:	2908      	cmp	r1, #8
 80155c2:	f104 0401 	add.w	r4, r4, #1
 80155c6:	4404      	add	r4, r0
 80155c8:	dc19      	bgt.n	80155fe <_strtod_l+0x25e>
 80155ca:	9b07      	ldr	r3, [sp, #28]
 80155cc:	210a      	movs	r1, #10
 80155ce:	fb01 e303 	mla	r3, r1, r3, lr
 80155d2:	9307      	str	r3, [sp, #28]
 80155d4:	2100      	movs	r1, #0
 80155d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80155d8:	1c58      	adds	r0, r3, #1
 80155da:	901b      	str	r0, [sp, #108]	; 0x6c
 80155dc:	785b      	ldrb	r3, [r3, #1]
 80155de:	4608      	mov	r0, r1
 80155e0:	e7c9      	b.n	8015576 <_strtod_l+0x1d6>
 80155e2:	9805      	ldr	r0, [sp, #20]
 80155e4:	e7d3      	b.n	801558e <_strtod_l+0x1ee>
 80155e6:	2908      	cmp	r1, #8
 80155e8:	f101 0101 	add.w	r1, r1, #1
 80155ec:	dc03      	bgt.n	80155f6 <_strtod_l+0x256>
 80155ee:	9b07      	ldr	r3, [sp, #28]
 80155f0:	437b      	muls	r3, r7
 80155f2:	9307      	str	r3, [sp, #28]
 80155f4:	e7e1      	b.n	80155ba <_strtod_l+0x21a>
 80155f6:	2910      	cmp	r1, #16
 80155f8:	bfd8      	it	le
 80155fa:	437d      	mulle	r5, r7
 80155fc:	e7dd      	b.n	80155ba <_strtod_l+0x21a>
 80155fe:	2c10      	cmp	r4, #16
 8015600:	bfdc      	itt	le
 8015602:	210a      	movle	r1, #10
 8015604:	fb01 e505 	mlale	r5, r1, r5, lr
 8015608:	e7e4      	b.n	80155d4 <_strtod_l+0x234>
 801560a:	2301      	movs	r3, #1
 801560c:	9304      	str	r3, [sp, #16]
 801560e:	e781      	b.n	8015514 <_strtod_l+0x174>
 8015610:	f04f 0c01 	mov.w	ip, #1
 8015614:	1cb3      	adds	r3, r6, #2
 8015616:	931b      	str	r3, [sp, #108]	; 0x6c
 8015618:	78b3      	ldrb	r3, [r6, #2]
 801561a:	e78a      	b.n	8015532 <_strtod_l+0x192>
 801561c:	f04f 0c00 	mov.w	ip, #0
 8015620:	e7f8      	b.n	8015614 <_strtod_l+0x274>
 8015622:	bf00      	nop
 8015624:	08018eb4 	.word	0x08018eb4
 8015628:	7ff00000 	.word	0x7ff00000
 801562c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801562e:	1c5f      	adds	r7, r3, #1
 8015630:	971b      	str	r7, [sp, #108]	; 0x6c
 8015632:	785b      	ldrb	r3, [r3, #1]
 8015634:	2b30      	cmp	r3, #48	; 0x30
 8015636:	d0f9      	beq.n	801562c <_strtod_l+0x28c>
 8015638:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801563c:	2f08      	cmp	r7, #8
 801563e:	f63f af7d 	bhi.w	801553c <_strtod_l+0x19c>
 8015642:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015648:	930a      	str	r3, [sp, #40]	; 0x28
 801564a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801564c:	1c5f      	adds	r7, r3, #1
 801564e:	971b      	str	r7, [sp, #108]	; 0x6c
 8015650:	785b      	ldrb	r3, [r3, #1]
 8015652:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015656:	f1b8 0f09 	cmp.w	r8, #9
 801565a:	d937      	bls.n	80156cc <_strtod_l+0x32c>
 801565c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801565e:	1a7f      	subs	r7, r7, r1
 8015660:	2f08      	cmp	r7, #8
 8015662:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015666:	dc37      	bgt.n	80156d8 <_strtod_l+0x338>
 8015668:	45be      	cmp	lr, r7
 801566a:	bfa8      	it	ge
 801566c:	46be      	movge	lr, r7
 801566e:	f1bc 0f00 	cmp.w	ip, #0
 8015672:	d001      	beq.n	8015678 <_strtod_l+0x2d8>
 8015674:	f1ce 0e00 	rsb	lr, lr, #0
 8015678:	2c00      	cmp	r4, #0
 801567a:	d151      	bne.n	8015720 <_strtod_l+0x380>
 801567c:	2800      	cmp	r0, #0
 801567e:	f47f aece 	bne.w	801541e <_strtod_l+0x7e>
 8015682:	9a06      	ldr	r2, [sp, #24]
 8015684:	2a00      	cmp	r2, #0
 8015686:	f47f aeca 	bne.w	801541e <_strtod_l+0x7e>
 801568a:	9a04      	ldr	r2, [sp, #16]
 801568c:	2a00      	cmp	r2, #0
 801568e:	f47f aee4 	bne.w	801545a <_strtod_l+0xba>
 8015692:	2b4e      	cmp	r3, #78	; 0x4e
 8015694:	d027      	beq.n	80156e6 <_strtod_l+0x346>
 8015696:	dc21      	bgt.n	80156dc <_strtod_l+0x33c>
 8015698:	2b49      	cmp	r3, #73	; 0x49
 801569a:	f47f aede 	bne.w	801545a <_strtod_l+0xba>
 801569e:	49a0      	ldr	r1, [pc, #640]	; (8015920 <_strtod_l+0x580>)
 80156a0:	a81b      	add	r0, sp, #108	; 0x6c
 80156a2:	f001 fdf7 	bl	8017294 <__match>
 80156a6:	2800      	cmp	r0, #0
 80156a8:	f43f aed7 	beq.w	801545a <_strtod_l+0xba>
 80156ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156ae:	499d      	ldr	r1, [pc, #628]	; (8015924 <_strtod_l+0x584>)
 80156b0:	3b01      	subs	r3, #1
 80156b2:	a81b      	add	r0, sp, #108	; 0x6c
 80156b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80156b6:	f001 fded 	bl	8017294 <__match>
 80156ba:	b910      	cbnz	r0, 80156c2 <_strtod_l+0x322>
 80156bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156be:	3301      	adds	r3, #1
 80156c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80156c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015938 <_strtod_l+0x598>
 80156c6:	f04f 0a00 	mov.w	sl, #0
 80156ca:	e6a8      	b.n	801541e <_strtod_l+0x7e>
 80156cc:	210a      	movs	r1, #10
 80156ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80156d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80156d6:	e7b8      	b.n	801564a <_strtod_l+0x2aa>
 80156d8:	46be      	mov	lr, r7
 80156da:	e7c8      	b.n	801566e <_strtod_l+0x2ce>
 80156dc:	2b69      	cmp	r3, #105	; 0x69
 80156de:	d0de      	beq.n	801569e <_strtod_l+0x2fe>
 80156e0:	2b6e      	cmp	r3, #110	; 0x6e
 80156e2:	f47f aeba 	bne.w	801545a <_strtod_l+0xba>
 80156e6:	4990      	ldr	r1, [pc, #576]	; (8015928 <_strtod_l+0x588>)
 80156e8:	a81b      	add	r0, sp, #108	; 0x6c
 80156ea:	f001 fdd3 	bl	8017294 <__match>
 80156ee:	2800      	cmp	r0, #0
 80156f0:	f43f aeb3 	beq.w	801545a <_strtod_l+0xba>
 80156f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	2b28      	cmp	r3, #40	; 0x28
 80156fa:	d10e      	bne.n	801571a <_strtod_l+0x37a>
 80156fc:	aa1e      	add	r2, sp, #120	; 0x78
 80156fe:	498b      	ldr	r1, [pc, #556]	; (801592c <_strtod_l+0x58c>)
 8015700:	a81b      	add	r0, sp, #108	; 0x6c
 8015702:	f001 fddb 	bl	80172bc <__hexnan>
 8015706:	2805      	cmp	r0, #5
 8015708:	d107      	bne.n	801571a <_strtod_l+0x37a>
 801570a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801570c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015710:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015714:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015718:	e681      	b.n	801541e <_strtod_l+0x7e>
 801571a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015940 <_strtod_l+0x5a0>
 801571e:	e7d2      	b.n	80156c6 <_strtod_l+0x326>
 8015720:	ebae 0302 	sub.w	r3, lr, r2
 8015724:	9306      	str	r3, [sp, #24]
 8015726:	9b05      	ldr	r3, [sp, #20]
 8015728:	9807      	ldr	r0, [sp, #28]
 801572a:	2b00      	cmp	r3, #0
 801572c:	bf08      	it	eq
 801572e:	4623      	moveq	r3, r4
 8015730:	2c10      	cmp	r4, #16
 8015732:	9305      	str	r3, [sp, #20]
 8015734:	46a0      	mov	r8, r4
 8015736:	bfa8      	it	ge
 8015738:	f04f 0810 	movge.w	r8, #16
 801573c:	f7ea fefa 	bl	8000534 <__aeabi_ui2d>
 8015740:	2c09      	cmp	r4, #9
 8015742:	4682      	mov	sl, r0
 8015744:	468b      	mov	fp, r1
 8015746:	dc13      	bgt.n	8015770 <_strtod_l+0x3d0>
 8015748:	9b06      	ldr	r3, [sp, #24]
 801574a:	2b00      	cmp	r3, #0
 801574c:	f43f ae67 	beq.w	801541e <_strtod_l+0x7e>
 8015750:	9b06      	ldr	r3, [sp, #24]
 8015752:	dd7a      	ble.n	801584a <_strtod_l+0x4aa>
 8015754:	2b16      	cmp	r3, #22
 8015756:	dc61      	bgt.n	801581c <_strtod_l+0x47c>
 8015758:	4a75      	ldr	r2, [pc, #468]	; (8015930 <_strtod_l+0x590>)
 801575a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801575e:	e9de 0100 	ldrd	r0, r1, [lr]
 8015762:	4652      	mov	r2, sl
 8015764:	465b      	mov	r3, fp
 8015766:	f7ea ff5f 	bl	8000628 <__aeabi_dmul>
 801576a:	4682      	mov	sl, r0
 801576c:	468b      	mov	fp, r1
 801576e:	e656      	b.n	801541e <_strtod_l+0x7e>
 8015770:	4b6f      	ldr	r3, [pc, #444]	; (8015930 <_strtod_l+0x590>)
 8015772:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015776:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801577a:	f7ea ff55 	bl	8000628 <__aeabi_dmul>
 801577e:	4606      	mov	r6, r0
 8015780:	4628      	mov	r0, r5
 8015782:	460f      	mov	r7, r1
 8015784:	f7ea fed6 	bl	8000534 <__aeabi_ui2d>
 8015788:	4602      	mov	r2, r0
 801578a:	460b      	mov	r3, r1
 801578c:	4630      	mov	r0, r6
 801578e:	4639      	mov	r1, r7
 8015790:	f7ea fd94 	bl	80002bc <__adddf3>
 8015794:	2c0f      	cmp	r4, #15
 8015796:	4682      	mov	sl, r0
 8015798:	468b      	mov	fp, r1
 801579a:	ddd5      	ble.n	8015748 <_strtod_l+0x3a8>
 801579c:	9b06      	ldr	r3, [sp, #24]
 801579e:	eba4 0808 	sub.w	r8, r4, r8
 80157a2:	4498      	add	r8, r3
 80157a4:	f1b8 0f00 	cmp.w	r8, #0
 80157a8:	f340 8096 	ble.w	80158d8 <_strtod_l+0x538>
 80157ac:	f018 030f 	ands.w	r3, r8, #15
 80157b0:	d00a      	beq.n	80157c8 <_strtod_l+0x428>
 80157b2:	495f      	ldr	r1, [pc, #380]	; (8015930 <_strtod_l+0x590>)
 80157b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80157b8:	4652      	mov	r2, sl
 80157ba:	465b      	mov	r3, fp
 80157bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157c0:	f7ea ff32 	bl	8000628 <__aeabi_dmul>
 80157c4:	4682      	mov	sl, r0
 80157c6:	468b      	mov	fp, r1
 80157c8:	f038 080f 	bics.w	r8, r8, #15
 80157cc:	d073      	beq.n	80158b6 <_strtod_l+0x516>
 80157ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80157d2:	dd47      	ble.n	8015864 <_strtod_l+0x4c4>
 80157d4:	2400      	movs	r4, #0
 80157d6:	46a0      	mov	r8, r4
 80157d8:	9407      	str	r4, [sp, #28]
 80157da:	9405      	str	r4, [sp, #20]
 80157dc:	2322      	movs	r3, #34	; 0x22
 80157de:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015938 <_strtod_l+0x598>
 80157e2:	f8c9 3000 	str.w	r3, [r9]
 80157e6:	f04f 0a00 	mov.w	sl, #0
 80157ea:	9b07      	ldr	r3, [sp, #28]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f43f ae16 	beq.w	801541e <_strtod_l+0x7e>
 80157f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80157f4:	4648      	mov	r0, r9
 80157f6:	f001 fe6c 	bl	80174d2 <_Bfree>
 80157fa:	9905      	ldr	r1, [sp, #20]
 80157fc:	4648      	mov	r0, r9
 80157fe:	f001 fe68 	bl	80174d2 <_Bfree>
 8015802:	4641      	mov	r1, r8
 8015804:	4648      	mov	r0, r9
 8015806:	f001 fe64 	bl	80174d2 <_Bfree>
 801580a:	9907      	ldr	r1, [sp, #28]
 801580c:	4648      	mov	r0, r9
 801580e:	f001 fe60 	bl	80174d2 <_Bfree>
 8015812:	4621      	mov	r1, r4
 8015814:	4648      	mov	r0, r9
 8015816:	f001 fe5c 	bl	80174d2 <_Bfree>
 801581a:	e600      	b.n	801541e <_strtod_l+0x7e>
 801581c:	9a06      	ldr	r2, [sp, #24]
 801581e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015822:	4293      	cmp	r3, r2
 8015824:	dbba      	blt.n	801579c <_strtod_l+0x3fc>
 8015826:	4d42      	ldr	r5, [pc, #264]	; (8015930 <_strtod_l+0x590>)
 8015828:	f1c4 040f 	rsb	r4, r4, #15
 801582c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015830:	4652      	mov	r2, sl
 8015832:	465b      	mov	r3, fp
 8015834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015838:	f7ea fef6 	bl	8000628 <__aeabi_dmul>
 801583c:	9b06      	ldr	r3, [sp, #24]
 801583e:	1b1c      	subs	r4, r3, r4
 8015840:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015848:	e78d      	b.n	8015766 <_strtod_l+0x3c6>
 801584a:	f113 0f16 	cmn.w	r3, #22
 801584e:	dba5      	blt.n	801579c <_strtod_l+0x3fc>
 8015850:	4a37      	ldr	r2, [pc, #220]	; (8015930 <_strtod_l+0x590>)
 8015852:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015856:	e9d2 2300 	ldrd	r2, r3, [r2]
 801585a:	4650      	mov	r0, sl
 801585c:	4659      	mov	r1, fp
 801585e:	f7eb f80d 	bl	800087c <__aeabi_ddiv>
 8015862:	e782      	b.n	801576a <_strtod_l+0x3ca>
 8015864:	2300      	movs	r3, #0
 8015866:	4e33      	ldr	r6, [pc, #204]	; (8015934 <_strtod_l+0x594>)
 8015868:	ea4f 1828 	mov.w	r8, r8, asr #4
 801586c:	4650      	mov	r0, sl
 801586e:	4659      	mov	r1, fp
 8015870:	461d      	mov	r5, r3
 8015872:	f1b8 0f01 	cmp.w	r8, #1
 8015876:	dc21      	bgt.n	80158bc <_strtod_l+0x51c>
 8015878:	b10b      	cbz	r3, 801587e <_strtod_l+0x4de>
 801587a:	4682      	mov	sl, r0
 801587c:	468b      	mov	fp, r1
 801587e:	4b2d      	ldr	r3, [pc, #180]	; (8015934 <_strtod_l+0x594>)
 8015880:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015884:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015888:	4652      	mov	r2, sl
 801588a:	465b      	mov	r3, fp
 801588c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015890:	f7ea feca 	bl	8000628 <__aeabi_dmul>
 8015894:	4b28      	ldr	r3, [pc, #160]	; (8015938 <_strtod_l+0x598>)
 8015896:	460a      	mov	r2, r1
 8015898:	400b      	ands	r3, r1
 801589a:	4928      	ldr	r1, [pc, #160]	; (801593c <_strtod_l+0x59c>)
 801589c:	428b      	cmp	r3, r1
 801589e:	4682      	mov	sl, r0
 80158a0:	d898      	bhi.n	80157d4 <_strtod_l+0x434>
 80158a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80158a6:	428b      	cmp	r3, r1
 80158a8:	bf86      	itte	hi
 80158aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015944 <_strtod_l+0x5a4>
 80158ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80158b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80158b6:	2300      	movs	r3, #0
 80158b8:	9304      	str	r3, [sp, #16]
 80158ba:	e077      	b.n	80159ac <_strtod_l+0x60c>
 80158bc:	f018 0f01 	tst.w	r8, #1
 80158c0:	d006      	beq.n	80158d0 <_strtod_l+0x530>
 80158c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80158c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ca:	f7ea fead 	bl	8000628 <__aeabi_dmul>
 80158ce:	2301      	movs	r3, #1
 80158d0:	3501      	adds	r5, #1
 80158d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80158d6:	e7cc      	b.n	8015872 <_strtod_l+0x4d2>
 80158d8:	d0ed      	beq.n	80158b6 <_strtod_l+0x516>
 80158da:	f1c8 0800 	rsb	r8, r8, #0
 80158de:	f018 020f 	ands.w	r2, r8, #15
 80158e2:	d00a      	beq.n	80158fa <_strtod_l+0x55a>
 80158e4:	4b12      	ldr	r3, [pc, #72]	; (8015930 <_strtod_l+0x590>)
 80158e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80158ea:	4650      	mov	r0, sl
 80158ec:	4659      	mov	r1, fp
 80158ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f2:	f7ea ffc3 	bl	800087c <__aeabi_ddiv>
 80158f6:	4682      	mov	sl, r0
 80158f8:	468b      	mov	fp, r1
 80158fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80158fe:	d0da      	beq.n	80158b6 <_strtod_l+0x516>
 8015900:	f1b8 0f1f 	cmp.w	r8, #31
 8015904:	dd20      	ble.n	8015948 <_strtod_l+0x5a8>
 8015906:	2400      	movs	r4, #0
 8015908:	46a0      	mov	r8, r4
 801590a:	9407      	str	r4, [sp, #28]
 801590c:	9405      	str	r4, [sp, #20]
 801590e:	2322      	movs	r3, #34	; 0x22
 8015910:	f04f 0a00 	mov.w	sl, #0
 8015914:	f04f 0b00 	mov.w	fp, #0
 8015918:	f8c9 3000 	str.w	r3, [r9]
 801591c:	e765      	b.n	80157ea <_strtod_l+0x44a>
 801591e:	bf00      	nop
 8015920:	08018e81 	.word	0x08018e81
 8015924:	08018f0b 	.word	0x08018f0b
 8015928:	08018e89 	.word	0x08018e89
 801592c:	08018ec8 	.word	0x08018ec8
 8015930:	08018f48 	.word	0x08018f48
 8015934:	08018f20 	.word	0x08018f20
 8015938:	7ff00000 	.word	0x7ff00000
 801593c:	7ca00000 	.word	0x7ca00000
 8015940:	fff80000 	.word	0xfff80000
 8015944:	7fefffff 	.word	0x7fefffff
 8015948:	f018 0310 	ands.w	r3, r8, #16
 801594c:	bf18      	it	ne
 801594e:	236a      	movne	r3, #106	; 0x6a
 8015950:	4da0      	ldr	r5, [pc, #640]	; (8015bd4 <_strtod_l+0x834>)
 8015952:	9304      	str	r3, [sp, #16]
 8015954:	4650      	mov	r0, sl
 8015956:	4659      	mov	r1, fp
 8015958:	2300      	movs	r3, #0
 801595a:	f1b8 0f00 	cmp.w	r8, #0
 801595e:	f300 810a 	bgt.w	8015b76 <_strtod_l+0x7d6>
 8015962:	b10b      	cbz	r3, 8015968 <_strtod_l+0x5c8>
 8015964:	4682      	mov	sl, r0
 8015966:	468b      	mov	fp, r1
 8015968:	9b04      	ldr	r3, [sp, #16]
 801596a:	b1bb      	cbz	r3, 801599c <_strtod_l+0x5fc>
 801596c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015970:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015974:	2b00      	cmp	r3, #0
 8015976:	4659      	mov	r1, fp
 8015978:	dd10      	ble.n	801599c <_strtod_l+0x5fc>
 801597a:	2b1f      	cmp	r3, #31
 801597c:	f340 8107 	ble.w	8015b8e <_strtod_l+0x7ee>
 8015980:	2b34      	cmp	r3, #52	; 0x34
 8015982:	bfde      	ittt	le
 8015984:	3b20      	suble	r3, #32
 8015986:	f04f 32ff 	movle.w	r2, #4294967295
 801598a:	fa02 f303 	lslle.w	r3, r2, r3
 801598e:	f04f 0a00 	mov.w	sl, #0
 8015992:	bfcc      	ite	gt
 8015994:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015998:	ea03 0b01 	andle.w	fp, r3, r1
 801599c:	2200      	movs	r2, #0
 801599e:	2300      	movs	r3, #0
 80159a0:	4650      	mov	r0, sl
 80159a2:	4659      	mov	r1, fp
 80159a4:	f7eb f8a8 	bl	8000af8 <__aeabi_dcmpeq>
 80159a8:	2800      	cmp	r0, #0
 80159aa:	d1ac      	bne.n	8015906 <_strtod_l+0x566>
 80159ac:	9b07      	ldr	r3, [sp, #28]
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	9a05      	ldr	r2, [sp, #20]
 80159b2:	9908      	ldr	r1, [sp, #32]
 80159b4:	4623      	mov	r3, r4
 80159b6:	4648      	mov	r0, r9
 80159b8:	f001 fddd 	bl	8017576 <__s2b>
 80159bc:	9007      	str	r0, [sp, #28]
 80159be:	2800      	cmp	r0, #0
 80159c0:	f43f af08 	beq.w	80157d4 <_strtod_l+0x434>
 80159c4:	9a06      	ldr	r2, [sp, #24]
 80159c6:	9b06      	ldr	r3, [sp, #24]
 80159c8:	2a00      	cmp	r2, #0
 80159ca:	f1c3 0300 	rsb	r3, r3, #0
 80159ce:	bfa8      	it	ge
 80159d0:	2300      	movge	r3, #0
 80159d2:	930e      	str	r3, [sp, #56]	; 0x38
 80159d4:	2400      	movs	r4, #0
 80159d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80159da:	9316      	str	r3, [sp, #88]	; 0x58
 80159dc:	46a0      	mov	r8, r4
 80159de:	9b07      	ldr	r3, [sp, #28]
 80159e0:	4648      	mov	r0, r9
 80159e2:	6859      	ldr	r1, [r3, #4]
 80159e4:	f001 fd41 	bl	801746a <_Balloc>
 80159e8:	9005      	str	r0, [sp, #20]
 80159ea:	2800      	cmp	r0, #0
 80159ec:	f43f aef6 	beq.w	80157dc <_strtod_l+0x43c>
 80159f0:	9b07      	ldr	r3, [sp, #28]
 80159f2:	691a      	ldr	r2, [r3, #16]
 80159f4:	3202      	adds	r2, #2
 80159f6:	f103 010c 	add.w	r1, r3, #12
 80159fa:	0092      	lsls	r2, r2, #2
 80159fc:	300c      	adds	r0, #12
 80159fe:	f001 fd29 	bl	8017454 <memcpy>
 8015a02:	aa1e      	add	r2, sp, #120	; 0x78
 8015a04:	a91d      	add	r1, sp, #116	; 0x74
 8015a06:	ec4b ab10 	vmov	d0, sl, fp
 8015a0a:	4648      	mov	r0, r9
 8015a0c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015a10:	f002 f86c 	bl	8017aec <__d2b>
 8015a14:	901c      	str	r0, [sp, #112]	; 0x70
 8015a16:	2800      	cmp	r0, #0
 8015a18:	f43f aee0 	beq.w	80157dc <_strtod_l+0x43c>
 8015a1c:	2101      	movs	r1, #1
 8015a1e:	4648      	mov	r0, r9
 8015a20:	f001 fe35 	bl	801768e <__i2b>
 8015a24:	4680      	mov	r8, r0
 8015a26:	2800      	cmp	r0, #0
 8015a28:	f43f aed8 	beq.w	80157dc <_strtod_l+0x43c>
 8015a2c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015a2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015a30:	2e00      	cmp	r6, #0
 8015a32:	bfab      	itete	ge
 8015a34:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015a36:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015a38:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015a3a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015a3c:	bfac      	ite	ge
 8015a3e:	18f7      	addge	r7, r6, r3
 8015a40:	1b9d      	sublt	r5, r3, r6
 8015a42:	9b04      	ldr	r3, [sp, #16]
 8015a44:	1af6      	subs	r6, r6, r3
 8015a46:	4416      	add	r6, r2
 8015a48:	4b63      	ldr	r3, [pc, #396]	; (8015bd8 <_strtod_l+0x838>)
 8015a4a:	3e01      	subs	r6, #1
 8015a4c:	429e      	cmp	r6, r3
 8015a4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015a52:	f280 80af 	bge.w	8015bb4 <_strtod_l+0x814>
 8015a56:	1b9b      	subs	r3, r3, r6
 8015a58:	2b1f      	cmp	r3, #31
 8015a5a:	eba2 0203 	sub.w	r2, r2, r3
 8015a5e:	f04f 0101 	mov.w	r1, #1
 8015a62:	f300 809b 	bgt.w	8015b9c <_strtod_l+0x7fc>
 8015a66:	fa01 f303 	lsl.w	r3, r1, r3
 8015a6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8015a70:	18be      	adds	r6, r7, r2
 8015a72:	9b04      	ldr	r3, [sp, #16]
 8015a74:	42b7      	cmp	r7, r6
 8015a76:	4415      	add	r5, r2
 8015a78:	441d      	add	r5, r3
 8015a7a:	463b      	mov	r3, r7
 8015a7c:	bfa8      	it	ge
 8015a7e:	4633      	movge	r3, r6
 8015a80:	42ab      	cmp	r3, r5
 8015a82:	bfa8      	it	ge
 8015a84:	462b      	movge	r3, r5
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	bfc2      	ittt	gt
 8015a8a:	1af6      	subgt	r6, r6, r3
 8015a8c:	1aed      	subgt	r5, r5, r3
 8015a8e:	1aff      	subgt	r7, r7, r3
 8015a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a92:	b1bb      	cbz	r3, 8015ac4 <_strtod_l+0x724>
 8015a94:	4641      	mov	r1, r8
 8015a96:	461a      	mov	r2, r3
 8015a98:	4648      	mov	r0, r9
 8015a9a:	f001 fe97 	bl	80177cc <__pow5mult>
 8015a9e:	4680      	mov	r8, r0
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	f43f ae9b 	beq.w	80157dc <_strtod_l+0x43c>
 8015aa6:	4601      	mov	r1, r0
 8015aa8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015aaa:	4648      	mov	r0, r9
 8015aac:	f001 fdf8 	bl	80176a0 <__multiply>
 8015ab0:	900c      	str	r0, [sp, #48]	; 0x30
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	f43f ae92 	beq.w	80157dc <_strtod_l+0x43c>
 8015ab8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015aba:	4648      	mov	r0, r9
 8015abc:	f001 fd09 	bl	80174d2 <_Bfree>
 8015ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ac2:	931c      	str	r3, [sp, #112]	; 0x70
 8015ac4:	2e00      	cmp	r6, #0
 8015ac6:	dc7a      	bgt.n	8015bbe <_strtod_l+0x81e>
 8015ac8:	9b06      	ldr	r3, [sp, #24]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	dd08      	ble.n	8015ae0 <_strtod_l+0x740>
 8015ace:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015ad0:	9905      	ldr	r1, [sp, #20]
 8015ad2:	4648      	mov	r0, r9
 8015ad4:	f001 fe7a 	bl	80177cc <__pow5mult>
 8015ad8:	9005      	str	r0, [sp, #20]
 8015ada:	2800      	cmp	r0, #0
 8015adc:	f43f ae7e 	beq.w	80157dc <_strtod_l+0x43c>
 8015ae0:	2d00      	cmp	r5, #0
 8015ae2:	dd08      	ble.n	8015af6 <_strtod_l+0x756>
 8015ae4:	462a      	mov	r2, r5
 8015ae6:	9905      	ldr	r1, [sp, #20]
 8015ae8:	4648      	mov	r0, r9
 8015aea:	f001 febd 	bl	8017868 <__lshift>
 8015aee:	9005      	str	r0, [sp, #20]
 8015af0:	2800      	cmp	r0, #0
 8015af2:	f43f ae73 	beq.w	80157dc <_strtod_l+0x43c>
 8015af6:	2f00      	cmp	r7, #0
 8015af8:	dd08      	ble.n	8015b0c <_strtod_l+0x76c>
 8015afa:	4641      	mov	r1, r8
 8015afc:	463a      	mov	r2, r7
 8015afe:	4648      	mov	r0, r9
 8015b00:	f001 feb2 	bl	8017868 <__lshift>
 8015b04:	4680      	mov	r8, r0
 8015b06:	2800      	cmp	r0, #0
 8015b08:	f43f ae68 	beq.w	80157dc <_strtod_l+0x43c>
 8015b0c:	9a05      	ldr	r2, [sp, #20]
 8015b0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b10:	4648      	mov	r0, r9
 8015b12:	f001 ff17 	bl	8017944 <__mdiff>
 8015b16:	4604      	mov	r4, r0
 8015b18:	2800      	cmp	r0, #0
 8015b1a:	f43f ae5f 	beq.w	80157dc <_strtod_l+0x43c>
 8015b1e:	68c3      	ldr	r3, [r0, #12]
 8015b20:	930c      	str	r3, [sp, #48]	; 0x30
 8015b22:	2300      	movs	r3, #0
 8015b24:	60c3      	str	r3, [r0, #12]
 8015b26:	4641      	mov	r1, r8
 8015b28:	f001 fef2 	bl	8017910 <__mcmp>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	da55      	bge.n	8015bdc <_strtod_l+0x83c>
 8015b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b32:	b9e3      	cbnz	r3, 8015b6e <_strtod_l+0x7ce>
 8015b34:	f1ba 0f00 	cmp.w	sl, #0
 8015b38:	d119      	bne.n	8015b6e <_strtod_l+0x7ce>
 8015b3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b3e:	b9b3      	cbnz	r3, 8015b6e <_strtod_l+0x7ce>
 8015b40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015b44:	0d1b      	lsrs	r3, r3, #20
 8015b46:	051b      	lsls	r3, r3, #20
 8015b48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015b4c:	d90f      	bls.n	8015b6e <_strtod_l+0x7ce>
 8015b4e:	6963      	ldr	r3, [r4, #20]
 8015b50:	b913      	cbnz	r3, 8015b58 <_strtod_l+0x7b8>
 8015b52:	6923      	ldr	r3, [r4, #16]
 8015b54:	2b01      	cmp	r3, #1
 8015b56:	dd0a      	ble.n	8015b6e <_strtod_l+0x7ce>
 8015b58:	4621      	mov	r1, r4
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	4648      	mov	r0, r9
 8015b5e:	f001 fe83 	bl	8017868 <__lshift>
 8015b62:	4641      	mov	r1, r8
 8015b64:	4604      	mov	r4, r0
 8015b66:	f001 fed3 	bl	8017910 <__mcmp>
 8015b6a:	2800      	cmp	r0, #0
 8015b6c:	dc67      	bgt.n	8015c3e <_strtod_l+0x89e>
 8015b6e:	9b04      	ldr	r3, [sp, #16]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d171      	bne.n	8015c58 <_strtod_l+0x8b8>
 8015b74:	e63d      	b.n	80157f2 <_strtod_l+0x452>
 8015b76:	f018 0f01 	tst.w	r8, #1
 8015b7a:	d004      	beq.n	8015b86 <_strtod_l+0x7e6>
 8015b7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015b80:	f7ea fd52 	bl	8000628 <__aeabi_dmul>
 8015b84:	2301      	movs	r3, #1
 8015b86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015b8a:	3508      	adds	r5, #8
 8015b8c:	e6e5      	b.n	801595a <_strtod_l+0x5ba>
 8015b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8015b92:	fa02 f303 	lsl.w	r3, r2, r3
 8015b96:	ea03 0a0a 	and.w	sl, r3, sl
 8015b9a:	e6ff      	b.n	801599c <_strtod_l+0x5fc>
 8015b9c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015ba0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015ba4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015ba8:	36e2      	adds	r6, #226	; 0xe2
 8015baa:	fa01 f306 	lsl.w	r3, r1, r6
 8015bae:	930a      	str	r3, [sp, #40]	; 0x28
 8015bb0:	910f      	str	r1, [sp, #60]	; 0x3c
 8015bb2:	e75d      	b.n	8015a70 <_strtod_l+0x6d0>
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8015bb8:	2301      	movs	r3, #1
 8015bba:	930f      	str	r3, [sp, #60]	; 0x3c
 8015bbc:	e758      	b.n	8015a70 <_strtod_l+0x6d0>
 8015bbe:	4632      	mov	r2, r6
 8015bc0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015bc2:	4648      	mov	r0, r9
 8015bc4:	f001 fe50 	bl	8017868 <__lshift>
 8015bc8:	901c      	str	r0, [sp, #112]	; 0x70
 8015bca:	2800      	cmp	r0, #0
 8015bcc:	f47f af7c 	bne.w	8015ac8 <_strtod_l+0x728>
 8015bd0:	e604      	b.n	80157dc <_strtod_l+0x43c>
 8015bd2:	bf00      	nop
 8015bd4:	08018ee0 	.word	0x08018ee0
 8015bd8:	fffffc02 	.word	0xfffffc02
 8015bdc:	465d      	mov	r5, fp
 8015bde:	f040 8086 	bne.w	8015cee <_strtod_l+0x94e>
 8015be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015be4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015be8:	b32a      	cbz	r2, 8015c36 <_strtod_l+0x896>
 8015bea:	4aaf      	ldr	r2, [pc, #700]	; (8015ea8 <_strtod_l+0xb08>)
 8015bec:	4293      	cmp	r3, r2
 8015bee:	d153      	bne.n	8015c98 <_strtod_l+0x8f8>
 8015bf0:	9b04      	ldr	r3, [sp, #16]
 8015bf2:	4650      	mov	r0, sl
 8015bf4:	b1d3      	cbz	r3, 8015c2c <_strtod_l+0x88c>
 8015bf6:	4aad      	ldr	r2, [pc, #692]	; (8015eac <_strtod_l+0xb0c>)
 8015bf8:	402a      	ands	r2, r5
 8015bfa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8015c02:	d816      	bhi.n	8015c32 <_strtod_l+0x892>
 8015c04:	0d12      	lsrs	r2, r2, #20
 8015c06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8015c0e:	4298      	cmp	r0, r3
 8015c10:	d142      	bne.n	8015c98 <_strtod_l+0x8f8>
 8015c12:	4ba7      	ldr	r3, [pc, #668]	; (8015eb0 <_strtod_l+0xb10>)
 8015c14:	429d      	cmp	r5, r3
 8015c16:	d102      	bne.n	8015c1e <_strtod_l+0x87e>
 8015c18:	3001      	adds	r0, #1
 8015c1a:	f43f addf 	beq.w	80157dc <_strtod_l+0x43c>
 8015c1e:	4ba3      	ldr	r3, [pc, #652]	; (8015eac <_strtod_l+0xb0c>)
 8015c20:	402b      	ands	r3, r5
 8015c22:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015c26:	f04f 0a00 	mov.w	sl, #0
 8015c2a:	e7a0      	b.n	8015b6e <_strtod_l+0x7ce>
 8015c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c30:	e7ed      	b.n	8015c0e <_strtod_l+0x86e>
 8015c32:	460b      	mov	r3, r1
 8015c34:	e7eb      	b.n	8015c0e <_strtod_l+0x86e>
 8015c36:	bb7b      	cbnz	r3, 8015c98 <_strtod_l+0x8f8>
 8015c38:	f1ba 0f00 	cmp.w	sl, #0
 8015c3c:	d12c      	bne.n	8015c98 <_strtod_l+0x8f8>
 8015c3e:	9904      	ldr	r1, [sp, #16]
 8015c40:	4a9a      	ldr	r2, [pc, #616]	; (8015eac <_strtod_l+0xb0c>)
 8015c42:	465b      	mov	r3, fp
 8015c44:	b1f1      	cbz	r1, 8015c84 <_strtod_l+0x8e4>
 8015c46:	ea02 010b 	and.w	r1, r2, fp
 8015c4a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015c4e:	dc19      	bgt.n	8015c84 <_strtod_l+0x8e4>
 8015c50:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015c54:	f77f ae5b 	ble.w	801590e <_strtod_l+0x56e>
 8015c58:	4a96      	ldr	r2, [pc, #600]	; (8015eb4 <_strtod_l+0xb14>)
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015c60:	4650      	mov	r0, sl
 8015c62:	4659      	mov	r1, fp
 8015c64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015c68:	f7ea fcde 	bl	8000628 <__aeabi_dmul>
 8015c6c:	4682      	mov	sl, r0
 8015c6e:	468b      	mov	fp, r1
 8015c70:	2900      	cmp	r1, #0
 8015c72:	f47f adbe 	bne.w	80157f2 <_strtod_l+0x452>
 8015c76:	2800      	cmp	r0, #0
 8015c78:	f47f adbb 	bne.w	80157f2 <_strtod_l+0x452>
 8015c7c:	2322      	movs	r3, #34	; 0x22
 8015c7e:	f8c9 3000 	str.w	r3, [r9]
 8015c82:	e5b6      	b.n	80157f2 <_strtod_l+0x452>
 8015c84:	4013      	ands	r3, r2
 8015c86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015c8a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015c8e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015c92:	f04f 3aff 	mov.w	sl, #4294967295
 8015c96:	e76a      	b.n	8015b6e <_strtod_l+0x7ce>
 8015c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c9a:	b193      	cbz	r3, 8015cc2 <_strtod_l+0x922>
 8015c9c:	422b      	tst	r3, r5
 8015c9e:	f43f af66 	beq.w	8015b6e <_strtod_l+0x7ce>
 8015ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ca4:	9a04      	ldr	r2, [sp, #16]
 8015ca6:	4650      	mov	r0, sl
 8015ca8:	4659      	mov	r1, fp
 8015caa:	b173      	cbz	r3, 8015cca <_strtod_l+0x92a>
 8015cac:	f7ff fb5a 	bl	8015364 <sulp>
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015cb8:	f7ea fb00 	bl	80002bc <__adddf3>
 8015cbc:	4682      	mov	sl, r0
 8015cbe:	468b      	mov	fp, r1
 8015cc0:	e755      	b.n	8015b6e <_strtod_l+0x7ce>
 8015cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cc4:	ea13 0f0a 	tst.w	r3, sl
 8015cc8:	e7e9      	b.n	8015c9e <_strtod_l+0x8fe>
 8015cca:	f7ff fb4b 	bl	8015364 <sulp>
 8015cce:	4602      	mov	r2, r0
 8015cd0:	460b      	mov	r3, r1
 8015cd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015cd6:	f7ea faef 	bl	80002b8 <__aeabi_dsub>
 8015cda:	2200      	movs	r2, #0
 8015cdc:	2300      	movs	r3, #0
 8015cde:	4682      	mov	sl, r0
 8015ce0:	468b      	mov	fp, r1
 8015ce2:	f7ea ff09 	bl	8000af8 <__aeabi_dcmpeq>
 8015ce6:	2800      	cmp	r0, #0
 8015ce8:	f47f ae11 	bne.w	801590e <_strtod_l+0x56e>
 8015cec:	e73f      	b.n	8015b6e <_strtod_l+0x7ce>
 8015cee:	4641      	mov	r1, r8
 8015cf0:	4620      	mov	r0, r4
 8015cf2:	f001 ff4a 	bl	8017b8a <__ratio>
 8015cf6:	ec57 6b10 	vmov	r6, r7, d0
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015d00:	ee10 0a10 	vmov	r0, s0
 8015d04:	4639      	mov	r1, r7
 8015d06:	f7ea ff0b 	bl	8000b20 <__aeabi_dcmple>
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	d077      	beq.n	8015dfe <_strtod_l+0xa5e>
 8015d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d04a      	beq.n	8015daa <_strtod_l+0xa0a>
 8015d14:	4b68      	ldr	r3, [pc, #416]	; (8015eb8 <_strtod_l+0xb18>)
 8015d16:	2200      	movs	r2, #0
 8015d18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015d1c:	4f66      	ldr	r7, [pc, #408]	; (8015eb8 <_strtod_l+0xb18>)
 8015d1e:	2600      	movs	r6, #0
 8015d20:	4b62      	ldr	r3, [pc, #392]	; (8015eac <_strtod_l+0xb0c>)
 8015d22:	402b      	ands	r3, r5
 8015d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d28:	4b64      	ldr	r3, [pc, #400]	; (8015ebc <_strtod_l+0xb1c>)
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	f040 80ce 	bne.w	8015ecc <_strtod_l+0xb2c>
 8015d30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015d34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015d38:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015d3c:	ec4b ab10 	vmov	d0, sl, fp
 8015d40:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015d44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015d48:	f001 fe5a 	bl	8017a00 <__ulp>
 8015d4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015d50:	ec53 2b10 	vmov	r2, r3, d0
 8015d54:	f7ea fc68 	bl	8000628 <__aeabi_dmul>
 8015d58:	4652      	mov	r2, sl
 8015d5a:	465b      	mov	r3, fp
 8015d5c:	f7ea faae 	bl	80002bc <__adddf3>
 8015d60:	460b      	mov	r3, r1
 8015d62:	4952      	ldr	r1, [pc, #328]	; (8015eac <_strtod_l+0xb0c>)
 8015d64:	4a56      	ldr	r2, [pc, #344]	; (8015ec0 <_strtod_l+0xb20>)
 8015d66:	4019      	ands	r1, r3
 8015d68:	4291      	cmp	r1, r2
 8015d6a:	4682      	mov	sl, r0
 8015d6c:	d95b      	bls.n	8015e26 <_strtod_l+0xa86>
 8015d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d70:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015d74:	4293      	cmp	r3, r2
 8015d76:	d103      	bne.n	8015d80 <_strtod_l+0x9e0>
 8015d78:	9b08      	ldr	r3, [sp, #32]
 8015d7a:	3301      	adds	r3, #1
 8015d7c:	f43f ad2e 	beq.w	80157dc <_strtod_l+0x43c>
 8015d80:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015eb0 <_strtod_l+0xb10>
 8015d84:	f04f 3aff 	mov.w	sl, #4294967295
 8015d88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d8a:	4648      	mov	r0, r9
 8015d8c:	f001 fba1 	bl	80174d2 <_Bfree>
 8015d90:	9905      	ldr	r1, [sp, #20]
 8015d92:	4648      	mov	r0, r9
 8015d94:	f001 fb9d 	bl	80174d2 <_Bfree>
 8015d98:	4641      	mov	r1, r8
 8015d9a:	4648      	mov	r0, r9
 8015d9c:	f001 fb99 	bl	80174d2 <_Bfree>
 8015da0:	4621      	mov	r1, r4
 8015da2:	4648      	mov	r0, r9
 8015da4:	f001 fb95 	bl	80174d2 <_Bfree>
 8015da8:	e619      	b.n	80159de <_strtod_l+0x63e>
 8015daa:	f1ba 0f00 	cmp.w	sl, #0
 8015dae:	d11a      	bne.n	8015de6 <_strtod_l+0xa46>
 8015db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015db4:	b9eb      	cbnz	r3, 8015df2 <_strtod_l+0xa52>
 8015db6:	2200      	movs	r2, #0
 8015db8:	4b3f      	ldr	r3, [pc, #252]	; (8015eb8 <_strtod_l+0xb18>)
 8015dba:	4630      	mov	r0, r6
 8015dbc:	4639      	mov	r1, r7
 8015dbe:	f7ea fea5 	bl	8000b0c <__aeabi_dcmplt>
 8015dc2:	b9c8      	cbnz	r0, 8015df8 <_strtod_l+0xa58>
 8015dc4:	4630      	mov	r0, r6
 8015dc6:	4639      	mov	r1, r7
 8015dc8:	2200      	movs	r2, #0
 8015dca:	4b3e      	ldr	r3, [pc, #248]	; (8015ec4 <_strtod_l+0xb24>)
 8015dcc:	f7ea fc2c 	bl	8000628 <__aeabi_dmul>
 8015dd0:	4606      	mov	r6, r0
 8015dd2:	460f      	mov	r7, r1
 8015dd4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015dd8:	9618      	str	r6, [sp, #96]	; 0x60
 8015dda:	9319      	str	r3, [sp, #100]	; 0x64
 8015ddc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015de0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015de4:	e79c      	b.n	8015d20 <_strtod_l+0x980>
 8015de6:	f1ba 0f01 	cmp.w	sl, #1
 8015dea:	d102      	bne.n	8015df2 <_strtod_l+0xa52>
 8015dec:	2d00      	cmp	r5, #0
 8015dee:	f43f ad8e 	beq.w	801590e <_strtod_l+0x56e>
 8015df2:	2200      	movs	r2, #0
 8015df4:	4b34      	ldr	r3, [pc, #208]	; (8015ec8 <_strtod_l+0xb28>)
 8015df6:	e78f      	b.n	8015d18 <_strtod_l+0x978>
 8015df8:	2600      	movs	r6, #0
 8015dfa:	4f32      	ldr	r7, [pc, #200]	; (8015ec4 <_strtod_l+0xb24>)
 8015dfc:	e7ea      	b.n	8015dd4 <_strtod_l+0xa34>
 8015dfe:	4b31      	ldr	r3, [pc, #196]	; (8015ec4 <_strtod_l+0xb24>)
 8015e00:	4630      	mov	r0, r6
 8015e02:	4639      	mov	r1, r7
 8015e04:	2200      	movs	r2, #0
 8015e06:	f7ea fc0f 	bl	8000628 <__aeabi_dmul>
 8015e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e0c:	4606      	mov	r6, r0
 8015e0e:	460f      	mov	r7, r1
 8015e10:	b933      	cbnz	r3, 8015e20 <_strtod_l+0xa80>
 8015e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015e16:	9010      	str	r0, [sp, #64]	; 0x40
 8015e18:	9311      	str	r3, [sp, #68]	; 0x44
 8015e1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015e1e:	e7df      	b.n	8015de0 <_strtod_l+0xa40>
 8015e20:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015e24:	e7f9      	b.n	8015e1a <_strtod_l+0xa7a>
 8015e26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015e2a:	9b04      	ldr	r3, [sp, #16]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d1ab      	bne.n	8015d88 <_strtod_l+0x9e8>
 8015e30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015e34:	0d1b      	lsrs	r3, r3, #20
 8015e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e38:	051b      	lsls	r3, r3, #20
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	465d      	mov	r5, fp
 8015e3e:	d1a3      	bne.n	8015d88 <_strtod_l+0x9e8>
 8015e40:	4639      	mov	r1, r7
 8015e42:	4630      	mov	r0, r6
 8015e44:	f7ea fea0 	bl	8000b88 <__aeabi_d2iz>
 8015e48:	f7ea fb84 	bl	8000554 <__aeabi_i2d>
 8015e4c:	460b      	mov	r3, r1
 8015e4e:	4602      	mov	r2, r0
 8015e50:	4639      	mov	r1, r7
 8015e52:	4630      	mov	r0, r6
 8015e54:	f7ea fa30 	bl	80002b8 <__aeabi_dsub>
 8015e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	460f      	mov	r7, r1
 8015e5e:	b933      	cbnz	r3, 8015e6e <_strtod_l+0xace>
 8015e60:	f1ba 0f00 	cmp.w	sl, #0
 8015e64:	d103      	bne.n	8015e6e <_strtod_l+0xace>
 8015e66:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015e6a:	2d00      	cmp	r5, #0
 8015e6c:	d06d      	beq.n	8015f4a <_strtod_l+0xbaa>
 8015e6e:	a30a      	add	r3, pc, #40	; (adr r3, 8015e98 <_strtod_l+0xaf8>)
 8015e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e74:	4630      	mov	r0, r6
 8015e76:	4639      	mov	r1, r7
 8015e78:	f7ea fe48 	bl	8000b0c <__aeabi_dcmplt>
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	f47f acb8 	bne.w	80157f2 <_strtod_l+0x452>
 8015e82:	a307      	add	r3, pc, #28	; (adr r3, 8015ea0 <_strtod_l+0xb00>)
 8015e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e88:	4630      	mov	r0, r6
 8015e8a:	4639      	mov	r1, r7
 8015e8c:	f7ea fe5c 	bl	8000b48 <__aeabi_dcmpgt>
 8015e90:	2800      	cmp	r0, #0
 8015e92:	f43f af79 	beq.w	8015d88 <_strtod_l+0x9e8>
 8015e96:	e4ac      	b.n	80157f2 <_strtod_l+0x452>
 8015e98:	94a03595 	.word	0x94a03595
 8015e9c:	3fdfffff 	.word	0x3fdfffff
 8015ea0:	35afe535 	.word	0x35afe535
 8015ea4:	3fe00000 	.word	0x3fe00000
 8015ea8:	000fffff 	.word	0x000fffff
 8015eac:	7ff00000 	.word	0x7ff00000
 8015eb0:	7fefffff 	.word	0x7fefffff
 8015eb4:	39500000 	.word	0x39500000
 8015eb8:	3ff00000 	.word	0x3ff00000
 8015ebc:	7fe00000 	.word	0x7fe00000
 8015ec0:	7c9fffff 	.word	0x7c9fffff
 8015ec4:	3fe00000 	.word	0x3fe00000
 8015ec8:	bff00000 	.word	0xbff00000
 8015ecc:	9b04      	ldr	r3, [sp, #16]
 8015ece:	b333      	cbz	r3, 8015f1e <_strtod_l+0xb7e>
 8015ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ed2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015ed6:	d822      	bhi.n	8015f1e <_strtod_l+0xb7e>
 8015ed8:	a327      	add	r3, pc, #156	; (adr r3, 8015f78 <_strtod_l+0xbd8>)
 8015eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ede:	4630      	mov	r0, r6
 8015ee0:	4639      	mov	r1, r7
 8015ee2:	f7ea fe1d 	bl	8000b20 <__aeabi_dcmple>
 8015ee6:	b1a0      	cbz	r0, 8015f12 <_strtod_l+0xb72>
 8015ee8:	4639      	mov	r1, r7
 8015eea:	4630      	mov	r0, r6
 8015eec:	f7ea fe74 	bl	8000bd8 <__aeabi_d2uiz>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	bf08      	it	eq
 8015ef4:	2001      	moveq	r0, #1
 8015ef6:	f7ea fb1d 	bl	8000534 <__aeabi_ui2d>
 8015efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015efc:	4606      	mov	r6, r0
 8015efe:	460f      	mov	r7, r1
 8015f00:	bb03      	cbnz	r3, 8015f44 <_strtod_l+0xba4>
 8015f02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015f06:	9012      	str	r0, [sp, #72]	; 0x48
 8015f08:	9313      	str	r3, [sp, #76]	; 0x4c
 8015f0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015f0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f16:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015f1a:	1a9b      	subs	r3, r3, r2
 8015f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f1e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015f22:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8015f26:	f001 fd6b 	bl	8017a00 <__ulp>
 8015f2a:	4650      	mov	r0, sl
 8015f2c:	ec53 2b10 	vmov	r2, r3, d0
 8015f30:	4659      	mov	r1, fp
 8015f32:	f7ea fb79 	bl	8000628 <__aeabi_dmul>
 8015f36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015f3a:	f7ea f9bf 	bl	80002bc <__adddf3>
 8015f3e:	4682      	mov	sl, r0
 8015f40:	468b      	mov	fp, r1
 8015f42:	e772      	b.n	8015e2a <_strtod_l+0xa8a>
 8015f44:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015f48:	e7df      	b.n	8015f0a <_strtod_l+0xb6a>
 8015f4a:	a30d      	add	r3, pc, #52	; (adr r3, 8015f80 <_strtod_l+0xbe0>)
 8015f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f50:	f7ea fddc 	bl	8000b0c <__aeabi_dcmplt>
 8015f54:	e79c      	b.n	8015e90 <_strtod_l+0xaf0>
 8015f56:	2300      	movs	r3, #0
 8015f58:	930d      	str	r3, [sp, #52]	; 0x34
 8015f5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f5e:	6013      	str	r3, [r2, #0]
 8015f60:	f7ff ba61 	b.w	8015426 <_strtod_l+0x86>
 8015f64:	2b65      	cmp	r3, #101	; 0x65
 8015f66:	f04f 0200 	mov.w	r2, #0
 8015f6a:	f43f ab4e 	beq.w	801560a <_strtod_l+0x26a>
 8015f6e:	2101      	movs	r1, #1
 8015f70:	4614      	mov	r4, r2
 8015f72:	9104      	str	r1, [sp, #16]
 8015f74:	f7ff bacb 	b.w	801550e <_strtod_l+0x16e>
 8015f78:	ffc00000 	.word	0xffc00000
 8015f7c:	41dfffff 	.word	0x41dfffff
 8015f80:	94a03595 	.word	0x94a03595
 8015f84:	3fcfffff 	.word	0x3fcfffff

08015f88 <_strtod_r>:
 8015f88:	4b05      	ldr	r3, [pc, #20]	; (8015fa0 <_strtod_r+0x18>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	b410      	push	{r4}
 8015f8e:	6a1b      	ldr	r3, [r3, #32]
 8015f90:	4c04      	ldr	r4, [pc, #16]	; (8015fa4 <_strtod_r+0x1c>)
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	bf08      	it	eq
 8015f96:	4623      	moveq	r3, r4
 8015f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f9c:	f7ff ba00 	b.w	80153a0 <_strtod_l>
 8015fa0:	2000000c 	.word	0x2000000c
 8015fa4:	20000070 	.word	0x20000070

08015fa8 <_strtol_l.isra.0>:
 8015fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fac:	4680      	mov	r8, r0
 8015fae:	4689      	mov	r9, r1
 8015fb0:	4692      	mov	sl, r2
 8015fb2:	461e      	mov	r6, r3
 8015fb4:	460f      	mov	r7, r1
 8015fb6:	463d      	mov	r5, r7
 8015fb8:	9808      	ldr	r0, [sp, #32]
 8015fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015fbe:	f001 fa0d 	bl	80173dc <__locale_ctype_ptr_l>
 8015fc2:	4420      	add	r0, r4
 8015fc4:	7843      	ldrb	r3, [r0, #1]
 8015fc6:	f013 0308 	ands.w	r3, r3, #8
 8015fca:	d132      	bne.n	8016032 <_strtol_l.isra.0+0x8a>
 8015fcc:	2c2d      	cmp	r4, #45	; 0x2d
 8015fce:	d132      	bne.n	8016036 <_strtol_l.isra.0+0x8e>
 8015fd0:	787c      	ldrb	r4, [r7, #1]
 8015fd2:	1cbd      	adds	r5, r7, #2
 8015fd4:	2201      	movs	r2, #1
 8015fd6:	2e00      	cmp	r6, #0
 8015fd8:	d05d      	beq.n	8016096 <_strtol_l.isra.0+0xee>
 8015fda:	2e10      	cmp	r6, #16
 8015fdc:	d109      	bne.n	8015ff2 <_strtol_l.isra.0+0x4a>
 8015fde:	2c30      	cmp	r4, #48	; 0x30
 8015fe0:	d107      	bne.n	8015ff2 <_strtol_l.isra.0+0x4a>
 8015fe2:	782b      	ldrb	r3, [r5, #0]
 8015fe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015fe8:	2b58      	cmp	r3, #88	; 0x58
 8015fea:	d14f      	bne.n	801608c <_strtol_l.isra.0+0xe4>
 8015fec:	786c      	ldrb	r4, [r5, #1]
 8015fee:	2610      	movs	r6, #16
 8015ff0:	3502      	adds	r5, #2
 8015ff2:	2a00      	cmp	r2, #0
 8015ff4:	bf14      	ite	ne
 8015ff6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015ffa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015ffe:	2700      	movs	r7, #0
 8016000:	fbb1 fcf6 	udiv	ip, r1, r6
 8016004:	4638      	mov	r0, r7
 8016006:	fb06 1e1c 	mls	lr, r6, ip, r1
 801600a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801600e:	2b09      	cmp	r3, #9
 8016010:	d817      	bhi.n	8016042 <_strtol_l.isra.0+0x9a>
 8016012:	461c      	mov	r4, r3
 8016014:	42a6      	cmp	r6, r4
 8016016:	dd23      	ble.n	8016060 <_strtol_l.isra.0+0xb8>
 8016018:	1c7b      	adds	r3, r7, #1
 801601a:	d007      	beq.n	801602c <_strtol_l.isra.0+0x84>
 801601c:	4584      	cmp	ip, r0
 801601e:	d31c      	bcc.n	801605a <_strtol_l.isra.0+0xb2>
 8016020:	d101      	bne.n	8016026 <_strtol_l.isra.0+0x7e>
 8016022:	45a6      	cmp	lr, r4
 8016024:	db19      	blt.n	801605a <_strtol_l.isra.0+0xb2>
 8016026:	fb00 4006 	mla	r0, r0, r6, r4
 801602a:	2701      	movs	r7, #1
 801602c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016030:	e7eb      	b.n	801600a <_strtol_l.isra.0+0x62>
 8016032:	462f      	mov	r7, r5
 8016034:	e7bf      	b.n	8015fb6 <_strtol_l.isra.0+0xe>
 8016036:	2c2b      	cmp	r4, #43	; 0x2b
 8016038:	bf04      	itt	eq
 801603a:	1cbd      	addeq	r5, r7, #2
 801603c:	787c      	ldrbeq	r4, [r7, #1]
 801603e:	461a      	mov	r2, r3
 8016040:	e7c9      	b.n	8015fd6 <_strtol_l.isra.0+0x2e>
 8016042:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016046:	2b19      	cmp	r3, #25
 8016048:	d801      	bhi.n	801604e <_strtol_l.isra.0+0xa6>
 801604a:	3c37      	subs	r4, #55	; 0x37
 801604c:	e7e2      	b.n	8016014 <_strtol_l.isra.0+0x6c>
 801604e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016052:	2b19      	cmp	r3, #25
 8016054:	d804      	bhi.n	8016060 <_strtol_l.isra.0+0xb8>
 8016056:	3c57      	subs	r4, #87	; 0x57
 8016058:	e7dc      	b.n	8016014 <_strtol_l.isra.0+0x6c>
 801605a:	f04f 37ff 	mov.w	r7, #4294967295
 801605e:	e7e5      	b.n	801602c <_strtol_l.isra.0+0x84>
 8016060:	1c7b      	adds	r3, r7, #1
 8016062:	d108      	bne.n	8016076 <_strtol_l.isra.0+0xce>
 8016064:	2322      	movs	r3, #34	; 0x22
 8016066:	f8c8 3000 	str.w	r3, [r8]
 801606a:	4608      	mov	r0, r1
 801606c:	f1ba 0f00 	cmp.w	sl, #0
 8016070:	d107      	bne.n	8016082 <_strtol_l.isra.0+0xda>
 8016072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016076:	b102      	cbz	r2, 801607a <_strtol_l.isra.0+0xd2>
 8016078:	4240      	negs	r0, r0
 801607a:	f1ba 0f00 	cmp.w	sl, #0
 801607e:	d0f8      	beq.n	8016072 <_strtol_l.isra.0+0xca>
 8016080:	b10f      	cbz	r7, 8016086 <_strtol_l.isra.0+0xde>
 8016082:	f105 39ff 	add.w	r9, r5, #4294967295
 8016086:	f8ca 9000 	str.w	r9, [sl]
 801608a:	e7f2      	b.n	8016072 <_strtol_l.isra.0+0xca>
 801608c:	2430      	movs	r4, #48	; 0x30
 801608e:	2e00      	cmp	r6, #0
 8016090:	d1af      	bne.n	8015ff2 <_strtol_l.isra.0+0x4a>
 8016092:	2608      	movs	r6, #8
 8016094:	e7ad      	b.n	8015ff2 <_strtol_l.isra.0+0x4a>
 8016096:	2c30      	cmp	r4, #48	; 0x30
 8016098:	d0a3      	beq.n	8015fe2 <_strtol_l.isra.0+0x3a>
 801609a:	260a      	movs	r6, #10
 801609c:	e7a9      	b.n	8015ff2 <_strtol_l.isra.0+0x4a>
	...

080160a0 <_strtol_r>:
 80160a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160a2:	4c06      	ldr	r4, [pc, #24]	; (80160bc <_strtol_r+0x1c>)
 80160a4:	4d06      	ldr	r5, [pc, #24]	; (80160c0 <_strtol_r+0x20>)
 80160a6:	6824      	ldr	r4, [r4, #0]
 80160a8:	6a24      	ldr	r4, [r4, #32]
 80160aa:	2c00      	cmp	r4, #0
 80160ac:	bf08      	it	eq
 80160ae:	462c      	moveq	r4, r5
 80160b0:	9400      	str	r4, [sp, #0]
 80160b2:	f7ff ff79 	bl	8015fa8 <_strtol_l.isra.0>
 80160b6:	b003      	add	sp, #12
 80160b8:	bd30      	pop	{r4, r5, pc}
 80160ba:	bf00      	nop
 80160bc:	2000000c 	.word	0x2000000c
 80160c0:	20000070 	.word	0x20000070

080160c4 <_vsiprintf_r>:
 80160c4:	b500      	push	{lr}
 80160c6:	b09b      	sub	sp, #108	; 0x6c
 80160c8:	9100      	str	r1, [sp, #0]
 80160ca:	9104      	str	r1, [sp, #16]
 80160cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80160d0:	9105      	str	r1, [sp, #20]
 80160d2:	9102      	str	r1, [sp, #8]
 80160d4:	4905      	ldr	r1, [pc, #20]	; (80160ec <_vsiprintf_r+0x28>)
 80160d6:	9103      	str	r1, [sp, #12]
 80160d8:	4669      	mov	r1, sp
 80160da:	f001 fed5 	bl	8017e88 <_svfiprintf_r>
 80160de:	9b00      	ldr	r3, [sp, #0]
 80160e0:	2200      	movs	r2, #0
 80160e2:	701a      	strb	r2, [r3, #0]
 80160e4:	b01b      	add	sp, #108	; 0x6c
 80160e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80160ea:	bf00      	nop
 80160ec:	ffff0208 	.word	0xffff0208

080160f0 <vsiprintf>:
 80160f0:	4613      	mov	r3, r2
 80160f2:	460a      	mov	r2, r1
 80160f4:	4601      	mov	r1, r0
 80160f6:	4802      	ldr	r0, [pc, #8]	; (8016100 <vsiprintf+0x10>)
 80160f8:	6800      	ldr	r0, [r0, #0]
 80160fa:	f7ff bfe3 	b.w	80160c4 <_vsiprintf_r>
 80160fe:	bf00      	nop
 8016100:	2000000c 	.word	0x2000000c

08016104 <quorem>:
 8016104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016108:	6903      	ldr	r3, [r0, #16]
 801610a:	690c      	ldr	r4, [r1, #16]
 801610c:	42a3      	cmp	r3, r4
 801610e:	4680      	mov	r8, r0
 8016110:	f2c0 8082 	blt.w	8016218 <quorem+0x114>
 8016114:	3c01      	subs	r4, #1
 8016116:	f101 0714 	add.w	r7, r1, #20
 801611a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801611e:	f100 0614 	add.w	r6, r0, #20
 8016122:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016126:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801612a:	eb06 030c 	add.w	r3, r6, ip
 801612e:	3501      	adds	r5, #1
 8016130:	eb07 090c 	add.w	r9, r7, ip
 8016134:	9301      	str	r3, [sp, #4]
 8016136:	fbb0 f5f5 	udiv	r5, r0, r5
 801613a:	b395      	cbz	r5, 80161a2 <quorem+0x9e>
 801613c:	f04f 0a00 	mov.w	sl, #0
 8016140:	4638      	mov	r0, r7
 8016142:	46b6      	mov	lr, r6
 8016144:	46d3      	mov	fp, sl
 8016146:	f850 2b04 	ldr.w	r2, [r0], #4
 801614a:	b293      	uxth	r3, r2
 801614c:	fb05 a303 	mla	r3, r5, r3, sl
 8016150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016154:	b29b      	uxth	r3, r3
 8016156:	ebab 0303 	sub.w	r3, fp, r3
 801615a:	0c12      	lsrs	r2, r2, #16
 801615c:	f8de b000 	ldr.w	fp, [lr]
 8016160:	fb05 a202 	mla	r2, r5, r2, sl
 8016164:	fa13 f38b 	uxtah	r3, r3, fp
 8016168:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801616c:	fa1f fb82 	uxth.w	fp, r2
 8016170:	f8de 2000 	ldr.w	r2, [lr]
 8016174:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801617c:	b29b      	uxth	r3, r3
 801617e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016182:	4581      	cmp	r9, r0
 8016184:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016188:	f84e 3b04 	str.w	r3, [lr], #4
 801618c:	d2db      	bcs.n	8016146 <quorem+0x42>
 801618e:	f856 300c 	ldr.w	r3, [r6, ip]
 8016192:	b933      	cbnz	r3, 80161a2 <quorem+0x9e>
 8016194:	9b01      	ldr	r3, [sp, #4]
 8016196:	3b04      	subs	r3, #4
 8016198:	429e      	cmp	r6, r3
 801619a:	461a      	mov	r2, r3
 801619c:	d330      	bcc.n	8016200 <quorem+0xfc>
 801619e:	f8c8 4010 	str.w	r4, [r8, #16]
 80161a2:	4640      	mov	r0, r8
 80161a4:	f001 fbb4 	bl	8017910 <__mcmp>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	db25      	blt.n	80161f8 <quorem+0xf4>
 80161ac:	3501      	adds	r5, #1
 80161ae:	4630      	mov	r0, r6
 80161b0:	f04f 0c00 	mov.w	ip, #0
 80161b4:	f857 2b04 	ldr.w	r2, [r7], #4
 80161b8:	f8d0 e000 	ldr.w	lr, [r0]
 80161bc:	b293      	uxth	r3, r2
 80161be:	ebac 0303 	sub.w	r3, ip, r3
 80161c2:	0c12      	lsrs	r2, r2, #16
 80161c4:	fa13 f38e 	uxtah	r3, r3, lr
 80161c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80161cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80161d6:	45b9      	cmp	r9, r7
 80161d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80161dc:	f840 3b04 	str.w	r3, [r0], #4
 80161e0:	d2e8      	bcs.n	80161b4 <quorem+0xb0>
 80161e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80161e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80161ea:	b92a      	cbnz	r2, 80161f8 <quorem+0xf4>
 80161ec:	3b04      	subs	r3, #4
 80161ee:	429e      	cmp	r6, r3
 80161f0:	461a      	mov	r2, r3
 80161f2:	d30b      	bcc.n	801620c <quorem+0x108>
 80161f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80161f8:	4628      	mov	r0, r5
 80161fa:	b003      	add	sp, #12
 80161fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016200:	6812      	ldr	r2, [r2, #0]
 8016202:	3b04      	subs	r3, #4
 8016204:	2a00      	cmp	r2, #0
 8016206:	d1ca      	bne.n	801619e <quorem+0x9a>
 8016208:	3c01      	subs	r4, #1
 801620a:	e7c5      	b.n	8016198 <quorem+0x94>
 801620c:	6812      	ldr	r2, [r2, #0]
 801620e:	3b04      	subs	r3, #4
 8016210:	2a00      	cmp	r2, #0
 8016212:	d1ef      	bne.n	80161f4 <quorem+0xf0>
 8016214:	3c01      	subs	r4, #1
 8016216:	e7ea      	b.n	80161ee <quorem+0xea>
 8016218:	2000      	movs	r0, #0
 801621a:	e7ee      	b.n	80161fa <quorem+0xf6>
 801621c:	0000      	movs	r0, r0
	...

08016220 <_dtoa_r>:
 8016220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016224:	ec57 6b10 	vmov	r6, r7, d0
 8016228:	b097      	sub	sp, #92	; 0x5c
 801622a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801622c:	9106      	str	r1, [sp, #24]
 801622e:	4604      	mov	r4, r0
 8016230:	920b      	str	r2, [sp, #44]	; 0x2c
 8016232:	9312      	str	r3, [sp, #72]	; 0x48
 8016234:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016238:	e9cd 6700 	strd	r6, r7, [sp]
 801623c:	b93d      	cbnz	r5, 801624e <_dtoa_r+0x2e>
 801623e:	2010      	movs	r0, #16
 8016240:	f001 f8ee 	bl	8017420 <malloc>
 8016244:	6260      	str	r0, [r4, #36]	; 0x24
 8016246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801624a:	6005      	str	r5, [r0, #0]
 801624c:	60c5      	str	r5, [r0, #12]
 801624e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016250:	6819      	ldr	r1, [r3, #0]
 8016252:	b151      	cbz	r1, 801626a <_dtoa_r+0x4a>
 8016254:	685a      	ldr	r2, [r3, #4]
 8016256:	604a      	str	r2, [r1, #4]
 8016258:	2301      	movs	r3, #1
 801625a:	4093      	lsls	r3, r2
 801625c:	608b      	str	r3, [r1, #8]
 801625e:	4620      	mov	r0, r4
 8016260:	f001 f937 	bl	80174d2 <_Bfree>
 8016264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016266:	2200      	movs	r2, #0
 8016268:	601a      	str	r2, [r3, #0]
 801626a:	1e3b      	subs	r3, r7, #0
 801626c:	bfbb      	ittet	lt
 801626e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016272:	9301      	strlt	r3, [sp, #4]
 8016274:	2300      	movge	r3, #0
 8016276:	2201      	movlt	r2, #1
 8016278:	bfac      	ite	ge
 801627a:	f8c8 3000 	strge.w	r3, [r8]
 801627e:	f8c8 2000 	strlt.w	r2, [r8]
 8016282:	4baf      	ldr	r3, [pc, #700]	; (8016540 <_dtoa_r+0x320>)
 8016284:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016288:	ea33 0308 	bics.w	r3, r3, r8
 801628c:	d114      	bne.n	80162b8 <_dtoa_r+0x98>
 801628e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016290:	f242 730f 	movw	r3, #9999	; 0x270f
 8016294:	6013      	str	r3, [r2, #0]
 8016296:	9b00      	ldr	r3, [sp, #0]
 8016298:	b923      	cbnz	r3, 80162a4 <_dtoa_r+0x84>
 801629a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801629e:	2800      	cmp	r0, #0
 80162a0:	f000 8542 	beq.w	8016d28 <_dtoa_r+0xb08>
 80162a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016554 <_dtoa_r+0x334>
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	f000 8544 	beq.w	8016d38 <_dtoa_r+0xb18>
 80162b0:	f10b 0303 	add.w	r3, fp, #3
 80162b4:	f000 bd3e 	b.w	8016d34 <_dtoa_r+0xb14>
 80162b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80162bc:	2200      	movs	r2, #0
 80162be:	2300      	movs	r3, #0
 80162c0:	4630      	mov	r0, r6
 80162c2:	4639      	mov	r1, r7
 80162c4:	f7ea fc18 	bl	8000af8 <__aeabi_dcmpeq>
 80162c8:	4681      	mov	r9, r0
 80162ca:	b168      	cbz	r0, 80162e8 <_dtoa_r+0xc8>
 80162cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80162ce:	2301      	movs	r3, #1
 80162d0:	6013      	str	r3, [r2, #0]
 80162d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	f000 8524 	beq.w	8016d22 <_dtoa_r+0xb02>
 80162da:	4b9a      	ldr	r3, [pc, #616]	; (8016544 <_dtoa_r+0x324>)
 80162dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80162de:	f103 3bff 	add.w	fp, r3, #4294967295
 80162e2:	6013      	str	r3, [r2, #0]
 80162e4:	f000 bd28 	b.w	8016d38 <_dtoa_r+0xb18>
 80162e8:	aa14      	add	r2, sp, #80	; 0x50
 80162ea:	a915      	add	r1, sp, #84	; 0x54
 80162ec:	ec47 6b10 	vmov	d0, r6, r7
 80162f0:	4620      	mov	r0, r4
 80162f2:	f001 fbfb 	bl	8017aec <__d2b>
 80162f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80162fa:	9004      	str	r0, [sp, #16]
 80162fc:	2d00      	cmp	r5, #0
 80162fe:	d07c      	beq.n	80163fa <_dtoa_r+0x1da>
 8016300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016304:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016308:	46b2      	mov	sl, r6
 801630a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801630e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016312:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016316:	2200      	movs	r2, #0
 8016318:	4b8b      	ldr	r3, [pc, #556]	; (8016548 <_dtoa_r+0x328>)
 801631a:	4650      	mov	r0, sl
 801631c:	4659      	mov	r1, fp
 801631e:	f7e9 ffcb 	bl	80002b8 <__aeabi_dsub>
 8016322:	a381      	add	r3, pc, #516	; (adr r3, 8016528 <_dtoa_r+0x308>)
 8016324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016328:	f7ea f97e 	bl	8000628 <__aeabi_dmul>
 801632c:	a380      	add	r3, pc, #512	; (adr r3, 8016530 <_dtoa_r+0x310>)
 801632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016332:	f7e9 ffc3 	bl	80002bc <__adddf3>
 8016336:	4606      	mov	r6, r0
 8016338:	4628      	mov	r0, r5
 801633a:	460f      	mov	r7, r1
 801633c:	f7ea f90a 	bl	8000554 <__aeabi_i2d>
 8016340:	a37d      	add	r3, pc, #500	; (adr r3, 8016538 <_dtoa_r+0x318>)
 8016342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016346:	f7ea f96f 	bl	8000628 <__aeabi_dmul>
 801634a:	4602      	mov	r2, r0
 801634c:	460b      	mov	r3, r1
 801634e:	4630      	mov	r0, r6
 8016350:	4639      	mov	r1, r7
 8016352:	f7e9 ffb3 	bl	80002bc <__adddf3>
 8016356:	4606      	mov	r6, r0
 8016358:	460f      	mov	r7, r1
 801635a:	f7ea fc15 	bl	8000b88 <__aeabi_d2iz>
 801635e:	2200      	movs	r2, #0
 8016360:	4682      	mov	sl, r0
 8016362:	2300      	movs	r3, #0
 8016364:	4630      	mov	r0, r6
 8016366:	4639      	mov	r1, r7
 8016368:	f7ea fbd0 	bl	8000b0c <__aeabi_dcmplt>
 801636c:	b148      	cbz	r0, 8016382 <_dtoa_r+0x162>
 801636e:	4650      	mov	r0, sl
 8016370:	f7ea f8f0 	bl	8000554 <__aeabi_i2d>
 8016374:	4632      	mov	r2, r6
 8016376:	463b      	mov	r3, r7
 8016378:	f7ea fbbe 	bl	8000af8 <__aeabi_dcmpeq>
 801637c:	b908      	cbnz	r0, 8016382 <_dtoa_r+0x162>
 801637e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016382:	f1ba 0f16 	cmp.w	sl, #22
 8016386:	d859      	bhi.n	801643c <_dtoa_r+0x21c>
 8016388:	4970      	ldr	r1, [pc, #448]	; (801654c <_dtoa_r+0x32c>)
 801638a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801638e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016396:	f7ea fbd7 	bl	8000b48 <__aeabi_dcmpgt>
 801639a:	2800      	cmp	r0, #0
 801639c:	d050      	beq.n	8016440 <_dtoa_r+0x220>
 801639e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80163a2:	2300      	movs	r3, #0
 80163a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80163a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163a8:	1b5d      	subs	r5, r3, r5
 80163aa:	f1b5 0801 	subs.w	r8, r5, #1
 80163ae:	bf49      	itett	mi
 80163b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80163b4:	2300      	movpl	r3, #0
 80163b6:	9305      	strmi	r3, [sp, #20]
 80163b8:	f04f 0800 	movmi.w	r8, #0
 80163bc:	bf58      	it	pl
 80163be:	9305      	strpl	r3, [sp, #20]
 80163c0:	f1ba 0f00 	cmp.w	sl, #0
 80163c4:	db3e      	blt.n	8016444 <_dtoa_r+0x224>
 80163c6:	2300      	movs	r3, #0
 80163c8:	44d0      	add	r8, sl
 80163ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80163ce:	9307      	str	r3, [sp, #28]
 80163d0:	9b06      	ldr	r3, [sp, #24]
 80163d2:	2b09      	cmp	r3, #9
 80163d4:	f200 8090 	bhi.w	80164f8 <_dtoa_r+0x2d8>
 80163d8:	2b05      	cmp	r3, #5
 80163da:	bfc4      	itt	gt
 80163dc:	3b04      	subgt	r3, #4
 80163de:	9306      	strgt	r3, [sp, #24]
 80163e0:	9b06      	ldr	r3, [sp, #24]
 80163e2:	f1a3 0302 	sub.w	r3, r3, #2
 80163e6:	bfcc      	ite	gt
 80163e8:	2500      	movgt	r5, #0
 80163ea:	2501      	movle	r5, #1
 80163ec:	2b03      	cmp	r3, #3
 80163ee:	f200 808f 	bhi.w	8016510 <_dtoa_r+0x2f0>
 80163f2:	e8df f003 	tbb	[pc, r3]
 80163f6:	7f7d      	.short	0x7f7d
 80163f8:	7131      	.short	0x7131
 80163fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80163fe:	441d      	add	r5, r3
 8016400:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016404:	2820      	cmp	r0, #32
 8016406:	dd13      	ble.n	8016430 <_dtoa_r+0x210>
 8016408:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801640c:	9b00      	ldr	r3, [sp, #0]
 801640e:	fa08 f800 	lsl.w	r8, r8, r0
 8016412:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016416:	fa23 f000 	lsr.w	r0, r3, r0
 801641a:	ea48 0000 	orr.w	r0, r8, r0
 801641e:	f7ea f889 	bl	8000534 <__aeabi_ui2d>
 8016422:	2301      	movs	r3, #1
 8016424:	4682      	mov	sl, r0
 8016426:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801642a:	3d01      	subs	r5, #1
 801642c:	9313      	str	r3, [sp, #76]	; 0x4c
 801642e:	e772      	b.n	8016316 <_dtoa_r+0xf6>
 8016430:	9b00      	ldr	r3, [sp, #0]
 8016432:	f1c0 0020 	rsb	r0, r0, #32
 8016436:	fa03 f000 	lsl.w	r0, r3, r0
 801643a:	e7f0      	b.n	801641e <_dtoa_r+0x1fe>
 801643c:	2301      	movs	r3, #1
 801643e:	e7b1      	b.n	80163a4 <_dtoa_r+0x184>
 8016440:	900f      	str	r0, [sp, #60]	; 0x3c
 8016442:	e7b0      	b.n	80163a6 <_dtoa_r+0x186>
 8016444:	9b05      	ldr	r3, [sp, #20]
 8016446:	eba3 030a 	sub.w	r3, r3, sl
 801644a:	9305      	str	r3, [sp, #20]
 801644c:	f1ca 0300 	rsb	r3, sl, #0
 8016450:	9307      	str	r3, [sp, #28]
 8016452:	2300      	movs	r3, #0
 8016454:	930e      	str	r3, [sp, #56]	; 0x38
 8016456:	e7bb      	b.n	80163d0 <_dtoa_r+0x1b0>
 8016458:	2301      	movs	r3, #1
 801645a:	930a      	str	r3, [sp, #40]	; 0x28
 801645c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801645e:	2b00      	cmp	r3, #0
 8016460:	dd59      	ble.n	8016516 <_dtoa_r+0x2f6>
 8016462:	9302      	str	r3, [sp, #8]
 8016464:	4699      	mov	r9, r3
 8016466:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016468:	2200      	movs	r2, #0
 801646a:	6072      	str	r2, [r6, #4]
 801646c:	2204      	movs	r2, #4
 801646e:	f102 0014 	add.w	r0, r2, #20
 8016472:	4298      	cmp	r0, r3
 8016474:	6871      	ldr	r1, [r6, #4]
 8016476:	d953      	bls.n	8016520 <_dtoa_r+0x300>
 8016478:	4620      	mov	r0, r4
 801647a:	f000 fff6 	bl	801746a <_Balloc>
 801647e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016480:	6030      	str	r0, [r6, #0]
 8016482:	f1b9 0f0e 	cmp.w	r9, #14
 8016486:	f8d3 b000 	ldr.w	fp, [r3]
 801648a:	f200 80e6 	bhi.w	801665a <_dtoa_r+0x43a>
 801648e:	2d00      	cmp	r5, #0
 8016490:	f000 80e3 	beq.w	801665a <_dtoa_r+0x43a>
 8016494:	ed9d 7b00 	vldr	d7, [sp]
 8016498:	f1ba 0f00 	cmp.w	sl, #0
 801649c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80164a0:	dd74      	ble.n	801658c <_dtoa_r+0x36c>
 80164a2:	4a2a      	ldr	r2, [pc, #168]	; (801654c <_dtoa_r+0x32c>)
 80164a4:	f00a 030f 	and.w	r3, sl, #15
 80164a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80164ac:	ed93 7b00 	vldr	d7, [r3]
 80164b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80164b4:	06f0      	lsls	r0, r6, #27
 80164b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80164ba:	d565      	bpl.n	8016588 <_dtoa_r+0x368>
 80164bc:	4b24      	ldr	r3, [pc, #144]	; (8016550 <_dtoa_r+0x330>)
 80164be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80164c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80164c6:	f7ea f9d9 	bl	800087c <__aeabi_ddiv>
 80164ca:	e9cd 0100 	strd	r0, r1, [sp]
 80164ce:	f006 060f 	and.w	r6, r6, #15
 80164d2:	2503      	movs	r5, #3
 80164d4:	4f1e      	ldr	r7, [pc, #120]	; (8016550 <_dtoa_r+0x330>)
 80164d6:	e04c      	b.n	8016572 <_dtoa_r+0x352>
 80164d8:	2301      	movs	r3, #1
 80164da:	930a      	str	r3, [sp, #40]	; 0x28
 80164dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164de:	4453      	add	r3, sl
 80164e0:	f103 0901 	add.w	r9, r3, #1
 80164e4:	9302      	str	r3, [sp, #8]
 80164e6:	464b      	mov	r3, r9
 80164e8:	2b01      	cmp	r3, #1
 80164ea:	bfb8      	it	lt
 80164ec:	2301      	movlt	r3, #1
 80164ee:	e7ba      	b.n	8016466 <_dtoa_r+0x246>
 80164f0:	2300      	movs	r3, #0
 80164f2:	e7b2      	b.n	801645a <_dtoa_r+0x23a>
 80164f4:	2300      	movs	r3, #0
 80164f6:	e7f0      	b.n	80164da <_dtoa_r+0x2ba>
 80164f8:	2501      	movs	r5, #1
 80164fa:	2300      	movs	r3, #0
 80164fc:	9306      	str	r3, [sp, #24]
 80164fe:	950a      	str	r5, [sp, #40]	; 0x28
 8016500:	f04f 33ff 	mov.w	r3, #4294967295
 8016504:	9302      	str	r3, [sp, #8]
 8016506:	4699      	mov	r9, r3
 8016508:	2200      	movs	r2, #0
 801650a:	2312      	movs	r3, #18
 801650c:	920b      	str	r2, [sp, #44]	; 0x2c
 801650e:	e7aa      	b.n	8016466 <_dtoa_r+0x246>
 8016510:	2301      	movs	r3, #1
 8016512:	930a      	str	r3, [sp, #40]	; 0x28
 8016514:	e7f4      	b.n	8016500 <_dtoa_r+0x2e0>
 8016516:	2301      	movs	r3, #1
 8016518:	9302      	str	r3, [sp, #8]
 801651a:	4699      	mov	r9, r3
 801651c:	461a      	mov	r2, r3
 801651e:	e7f5      	b.n	801650c <_dtoa_r+0x2ec>
 8016520:	3101      	adds	r1, #1
 8016522:	6071      	str	r1, [r6, #4]
 8016524:	0052      	lsls	r2, r2, #1
 8016526:	e7a2      	b.n	801646e <_dtoa_r+0x24e>
 8016528:	636f4361 	.word	0x636f4361
 801652c:	3fd287a7 	.word	0x3fd287a7
 8016530:	8b60c8b3 	.word	0x8b60c8b3
 8016534:	3fc68a28 	.word	0x3fc68a28
 8016538:	509f79fb 	.word	0x509f79fb
 801653c:	3fd34413 	.word	0x3fd34413
 8016540:	7ff00000 	.word	0x7ff00000
 8016544:	08019044 	.word	0x08019044
 8016548:	3ff80000 	.word	0x3ff80000
 801654c:	08018f48 	.word	0x08018f48
 8016550:	08018f20 	.word	0x08018f20
 8016554:	08018f11 	.word	0x08018f11
 8016558:	07f1      	lsls	r1, r6, #31
 801655a:	d508      	bpl.n	801656e <_dtoa_r+0x34e>
 801655c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016564:	f7ea f860 	bl	8000628 <__aeabi_dmul>
 8016568:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801656c:	3501      	adds	r5, #1
 801656e:	1076      	asrs	r6, r6, #1
 8016570:	3708      	adds	r7, #8
 8016572:	2e00      	cmp	r6, #0
 8016574:	d1f0      	bne.n	8016558 <_dtoa_r+0x338>
 8016576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801657a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801657e:	f7ea f97d 	bl	800087c <__aeabi_ddiv>
 8016582:	e9cd 0100 	strd	r0, r1, [sp]
 8016586:	e01a      	b.n	80165be <_dtoa_r+0x39e>
 8016588:	2502      	movs	r5, #2
 801658a:	e7a3      	b.n	80164d4 <_dtoa_r+0x2b4>
 801658c:	f000 80a0 	beq.w	80166d0 <_dtoa_r+0x4b0>
 8016590:	f1ca 0600 	rsb	r6, sl, #0
 8016594:	4b9f      	ldr	r3, [pc, #636]	; (8016814 <_dtoa_r+0x5f4>)
 8016596:	4fa0      	ldr	r7, [pc, #640]	; (8016818 <_dtoa_r+0x5f8>)
 8016598:	f006 020f 	and.w	r2, r6, #15
 801659c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80165a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80165a8:	f7ea f83e 	bl	8000628 <__aeabi_dmul>
 80165ac:	e9cd 0100 	strd	r0, r1, [sp]
 80165b0:	1136      	asrs	r6, r6, #4
 80165b2:	2300      	movs	r3, #0
 80165b4:	2502      	movs	r5, #2
 80165b6:	2e00      	cmp	r6, #0
 80165b8:	d17f      	bne.n	80166ba <_dtoa_r+0x49a>
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d1e1      	bne.n	8016582 <_dtoa_r+0x362>
 80165be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	f000 8087 	beq.w	80166d4 <_dtoa_r+0x4b4>
 80165c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80165ca:	2200      	movs	r2, #0
 80165cc:	4b93      	ldr	r3, [pc, #588]	; (801681c <_dtoa_r+0x5fc>)
 80165ce:	4630      	mov	r0, r6
 80165d0:	4639      	mov	r1, r7
 80165d2:	f7ea fa9b 	bl	8000b0c <__aeabi_dcmplt>
 80165d6:	2800      	cmp	r0, #0
 80165d8:	d07c      	beq.n	80166d4 <_dtoa_r+0x4b4>
 80165da:	f1b9 0f00 	cmp.w	r9, #0
 80165de:	d079      	beq.n	80166d4 <_dtoa_r+0x4b4>
 80165e0:	9b02      	ldr	r3, [sp, #8]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	dd35      	ble.n	8016652 <_dtoa_r+0x432>
 80165e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80165ea:	9308      	str	r3, [sp, #32]
 80165ec:	4639      	mov	r1, r7
 80165ee:	2200      	movs	r2, #0
 80165f0:	4b8b      	ldr	r3, [pc, #556]	; (8016820 <_dtoa_r+0x600>)
 80165f2:	4630      	mov	r0, r6
 80165f4:	f7ea f818 	bl	8000628 <__aeabi_dmul>
 80165f8:	e9cd 0100 	strd	r0, r1, [sp]
 80165fc:	9f02      	ldr	r7, [sp, #8]
 80165fe:	3501      	adds	r5, #1
 8016600:	4628      	mov	r0, r5
 8016602:	f7e9 ffa7 	bl	8000554 <__aeabi_i2d>
 8016606:	e9dd 2300 	ldrd	r2, r3, [sp]
 801660a:	f7ea f80d 	bl	8000628 <__aeabi_dmul>
 801660e:	2200      	movs	r2, #0
 8016610:	4b84      	ldr	r3, [pc, #528]	; (8016824 <_dtoa_r+0x604>)
 8016612:	f7e9 fe53 	bl	80002bc <__adddf3>
 8016616:	4605      	mov	r5, r0
 8016618:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801661c:	2f00      	cmp	r7, #0
 801661e:	d15d      	bne.n	80166dc <_dtoa_r+0x4bc>
 8016620:	2200      	movs	r2, #0
 8016622:	4b81      	ldr	r3, [pc, #516]	; (8016828 <_dtoa_r+0x608>)
 8016624:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016628:	f7e9 fe46 	bl	80002b8 <__aeabi_dsub>
 801662c:	462a      	mov	r2, r5
 801662e:	4633      	mov	r3, r6
 8016630:	e9cd 0100 	strd	r0, r1, [sp]
 8016634:	f7ea fa88 	bl	8000b48 <__aeabi_dcmpgt>
 8016638:	2800      	cmp	r0, #0
 801663a:	f040 8288 	bne.w	8016b4e <_dtoa_r+0x92e>
 801663e:	462a      	mov	r2, r5
 8016640:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016648:	f7ea fa60 	bl	8000b0c <__aeabi_dcmplt>
 801664c:	2800      	cmp	r0, #0
 801664e:	f040 827c 	bne.w	8016b4a <_dtoa_r+0x92a>
 8016652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016656:	e9cd 2300 	strd	r2, r3, [sp]
 801665a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801665c:	2b00      	cmp	r3, #0
 801665e:	f2c0 8150 	blt.w	8016902 <_dtoa_r+0x6e2>
 8016662:	f1ba 0f0e 	cmp.w	sl, #14
 8016666:	f300 814c 	bgt.w	8016902 <_dtoa_r+0x6e2>
 801666a:	4b6a      	ldr	r3, [pc, #424]	; (8016814 <_dtoa_r+0x5f4>)
 801666c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016670:	ed93 7b00 	vldr	d7, [r3]
 8016674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016676:	2b00      	cmp	r3, #0
 8016678:	ed8d 7b02 	vstr	d7, [sp, #8]
 801667c:	f280 80d8 	bge.w	8016830 <_dtoa_r+0x610>
 8016680:	f1b9 0f00 	cmp.w	r9, #0
 8016684:	f300 80d4 	bgt.w	8016830 <_dtoa_r+0x610>
 8016688:	f040 825e 	bne.w	8016b48 <_dtoa_r+0x928>
 801668c:	2200      	movs	r2, #0
 801668e:	4b66      	ldr	r3, [pc, #408]	; (8016828 <_dtoa_r+0x608>)
 8016690:	ec51 0b17 	vmov	r0, r1, d7
 8016694:	f7e9 ffc8 	bl	8000628 <__aeabi_dmul>
 8016698:	e9dd 2300 	ldrd	r2, r3, [sp]
 801669c:	f7ea fa4a 	bl	8000b34 <__aeabi_dcmpge>
 80166a0:	464f      	mov	r7, r9
 80166a2:	464e      	mov	r6, r9
 80166a4:	2800      	cmp	r0, #0
 80166a6:	f040 8234 	bne.w	8016b12 <_dtoa_r+0x8f2>
 80166aa:	2331      	movs	r3, #49	; 0x31
 80166ac:	f10b 0501 	add.w	r5, fp, #1
 80166b0:	f88b 3000 	strb.w	r3, [fp]
 80166b4:	f10a 0a01 	add.w	sl, sl, #1
 80166b8:	e22f      	b.n	8016b1a <_dtoa_r+0x8fa>
 80166ba:	07f2      	lsls	r2, r6, #31
 80166bc:	d505      	bpl.n	80166ca <_dtoa_r+0x4aa>
 80166be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80166c2:	f7e9 ffb1 	bl	8000628 <__aeabi_dmul>
 80166c6:	3501      	adds	r5, #1
 80166c8:	2301      	movs	r3, #1
 80166ca:	1076      	asrs	r6, r6, #1
 80166cc:	3708      	adds	r7, #8
 80166ce:	e772      	b.n	80165b6 <_dtoa_r+0x396>
 80166d0:	2502      	movs	r5, #2
 80166d2:	e774      	b.n	80165be <_dtoa_r+0x39e>
 80166d4:	f8cd a020 	str.w	sl, [sp, #32]
 80166d8:	464f      	mov	r7, r9
 80166da:	e791      	b.n	8016600 <_dtoa_r+0x3e0>
 80166dc:	4b4d      	ldr	r3, [pc, #308]	; (8016814 <_dtoa_r+0x5f4>)
 80166de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80166e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80166e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d047      	beq.n	801677c <_dtoa_r+0x55c>
 80166ec:	4602      	mov	r2, r0
 80166ee:	460b      	mov	r3, r1
 80166f0:	2000      	movs	r0, #0
 80166f2:	494e      	ldr	r1, [pc, #312]	; (801682c <_dtoa_r+0x60c>)
 80166f4:	f7ea f8c2 	bl	800087c <__aeabi_ddiv>
 80166f8:	462a      	mov	r2, r5
 80166fa:	4633      	mov	r3, r6
 80166fc:	f7e9 fddc 	bl	80002b8 <__aeabi_dsub>
 8016700:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016704:	465d      	mov	r5, fp
 8016706:	e9dd 0100 	ldrd	r0, r1, [sp]
 801670a:	f7ea fa3d 	bl	8000b88 <__aeabi_d2iz>
 801670e:	4606      	mov	r6, r0
 8016710:	f7e9 ff20 	bl	8000554 <__aeabi_i2d>
 8016714:	4602      	mov	r2, r0
 8016716:	460b      	mov	r3, r1
 8016718:	e9dd 0100 	ldrd	r0, r1, [sp]
 801671c:	f7e9 fdcc 	bl	80002b8 <__aeabi_dsub>
 8016720:	3630      	adds	r6, #48	; 0x30
 8016722:	f805 6b01 	strb.w	r6, [r5], #1
 8016726:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801672a:	e9cd 0100 	strd	r0, r1, [sp]
 801672e:	f7ea f9ed 	bl	8000b0c <__aeabi_dcmplt>
 8016732:	2800      	cmp	r0, #0
 8016734:	d163      	bne.n	80167fe <_dtoa_r+0x5de>
 8016736:	e9dd 2300 	ldrd	r2, r3, [sp]
 801673a:	2000      	movs	r0, #0
 801673c:	4937      	ldr	r1, [pc, #220]	; (801681c <_dtoa_r+0x5fc>)
 801673e:	f7e9 fdbb 	bl	80002b8 <__aeabi_dsub>
 8016742:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016746:	f7ea f9e1 	bl	8000b0c <__aeabi_dcmplt>
 801674a:	2800      	cmp	r0, #0
 801674c:	f040 80b7 	bne.w	80168be <_dtoa_r+0x69e>
 8016750:	eba5 030b 	sub.w	r3, r5, fp
 8016754:	429f      	cmp	r7, r3
 8016756:	f77f af7c 	ble.w	8016652 <_dtoa_r+0x432>
 801675a:	2200      	movs	r2, #0
 801675c:	4b30      	ldr	r3, [pc, #192]	; (8016820 <_dtoa_r+0x600>)
 801675e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016762:	f7e9 ff61 	bl	8000628 <__aeabi_dmul>
 8016766:	2200      	movs	r2, #0
 8016768:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801676c:	4b2c      	ldr	r3, [pc, #176]	; (8016820 <_dtoa_r+0x600>)
 801676e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016772:	f7e9 ff59 	bl	8000628 <__aeabi_dmul>
 8016776:	e9cd 0100 	strd	r0, r1, [sp]
 801677a:	e7c4      	b.n	8016706 <_dtoa_r+0x4e6>
 801677c:	462a      	mov	r2, r5
 801677e:	4633      	mov	r3, r6
 8016780:	f7e9 ff52 	bl	8000628 <__aeabi_dmul>
 8016784:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016788:	eb0b 0507 	add.w	r5, fp, r7
 801678c:	465e      	mov	r6, fp
 801678e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016792:	f7ea f9f9 	bl	8000b88 <__aeabi_d2iz>
 8016796:	4607      	mov	r7, r0
 8016798:	f7e9 fedc 	bl	8000554 <__aeabi_i2d>
 801679c:	3730      	adds	r7, #48	; 0x30
 801679e:	4602      	mov	r2, r0
 80167a0:	460b      	mov	r3, r1
 80167a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167a6:	f7e9 fd87 	bl	80002b8 <__aeabi_dsub>
 80167aa:	f806 7b01 	strb.w	r7, [r6], #1
 80167ae:	42ae      	cmp	r6, r5
 80167b0:	e9cd 0100 	strd	r0, r1, [sp]
 80167b4:	f04f 0200 	mov.w	r2, #0
 80167b8:	d126      	bne.n	8016808 <_dtoa_r+0x5e8>
 80167ba:	4b1c      	ldr	r3, [pc, #112]	; (801682c <_dtoa_r+0x60c>)
 80167bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80167c0:	f7e9 fd7c 	bl	80002bc <__adddf3>
 80167c4:	4602      	mov	r2, r0
 80167c6:	460b      	mov	r3, r1
 80167c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167cc:	f7ea f9bc 	bl	8000b48 <__aeabi_dcmpgt>
 80167d0:	2800      	cmp	r0, #0
 80167d2:	d174      	bne.n	80168be <_dtoa_r+0x69e>
 80167d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80167d8:	2000      	movs	r0, #0
 80167da:	4914      	ldr	r1, [pc, #80]	; (801682c <_dtoa_r+0x60c>)
 80167dc:	f7e9 fd6c 	bl	80002b8 <__aeabi_dsub>
 80167e0:	4602      	mov	r2, r0
 80167e2:	460b      	mov	r3, r1
 80167e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167e8:	f7ea f990 	bl	8000b0c <__aeabi_dcmplt>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	f43f af30 	beq.w	8016652 <_dtoa_r+0x432>
 80167f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80167f6:	2b30      	cmp	r3, #48	; 0x30
 80167f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80167fc:	d002      	beq.n	8016804 <_dtoa_r+0x5e4>
 80167fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016802:	e04a      	b.n	801689a <_dtoa_r+0x67a>
 8016804:	4615      	mov	r5, r2
 8016806:	e7f4      	b.n	80167f2 <_dtoa_r+0x5d2>
 8016808:	4b05      	ldr	r3, [pc, #20]	; (8016820 <_dtoa_r+0x600>)
 801680a:	f7e9 ff0d 	bl	8000628 <__aeabi_dmul>
 801680e:	e9cd 0100 	strd	r0, r1, [sp]
 8016812:	e7bc      	b.n	801678e <_dtoa_r+0x56e>
 8016814:	08018f48 	.word	0x08018f48
 8016818:	08018f20 	.word	0x08018f20
 801681c:	3ff00000 	.word	0x3ff00000
 8016820:	40240000 	.word	0x40240000
 8016824:	401c0000 	.word	0x401c0000
 8016828:	40140000 	.word	0x40140000
 801682c:	3fe00000 	.word	0x3fe00000
 8016830:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016834:	465d      	mov	r5, fp
 8016836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801683a:	4630      	mov	r0, r6
 801683c:	4639      	mov	r1, r7
 801683e:	f7ea f81d 	bl	800087c <__aeabi_ddiv>
 8016842:	f7ea f9a1 	bl	8000b88 <__aeabi_d2iz>
 8016846:	4680      	mov	r8, r0
 8016848:	f7e9 fe84 	bl	8000554 <__aeabi_i2d>
 801684c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016850:	f7e9 feea 	bl	8000628 <__aeabi_dmul>
 8016854:	4602      	mov	r2, r0
 8016856:	460b      	mov	r3, r1
 8016858:	4630      	mov	r0, r6
 801685a:	4639      	mov	r1, r7
 801685c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016860:	f7e9 fd2a 	bl	80002b8 <__aeabi_dsub>
 8016864:	f805 6b01 	strb.w	r6, [r5], #1
 8016868:	eba5 060b 	sub.w	r6, r5, fp
 801686c:	45b1      	cmp	r9, r6
 801686e:	4602      	mov	r2, r0
 8016870:	460b      	mov	r3, r1
 8016872:	d139      	bne.n	80168e8 <_dtoa_r+0x6c8>
 8016874:	f7e9 fd22 	bl	80002bc <__adddf3>
 8016878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801687c:	4606      	mov	r6, r0
 801687e:	460f      	mov	r7, r1
 8016880:	f7ea f962 	bl	8000b48 <__aeabi_dcmpgt>
 8016884:	b9c8      	cbnz	r0, 80168ba <_dtoa_r+0x69a>
 8016886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801688a:	4630      	mov	r0, r6
 801688c:	4639      	mov	r1, r7
 801688e:	f7ea f933 	bl	8000af8 <__aeabi_dcmpeq>
 8016892:	b110      	cbz	r0, 801689a <_dtoa_r+0x67a>
 8016894:	f018 0f01 	tst.w	r8, #1
 8016898:	d10f      	bne.n	80168ba <_dtoa_r+0x69a>
 801689a:	9904      	ldr	r1, [sp, #16]
 801689c:	4620      	mov	r0, r4
 801689e:	f000 fe18 	bl	80174d2 <_Bfree>
 80168a2:	2300      	movs	r3, #0
 80168a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80168a6:	702b      	strb	r3, [r5, #0]
 80168a8:	f10a 0301 	add.w	r3, sl, #1
 80168ac:	6013      	str	r3, [r2, #0]
 80168ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f000 8241 	beq.w	8016d38 <_dtoa_r+0xb18>
 80168b6:	601d      	str	r5, [r3, #0]
 80168b8:	e23e      	b.n	8016d38 <_dtoa_r+0xb18>
 80168ba:	f8cd a020 	str.w	sl, [sp, #32]
 80168be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80168c2:	2a39      	cmp	r2, #57	; 0x39
 80168c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80168c8:	d108      	bne.n	80168dc <_dtoa_r+0x6bc>
 80168ca:	459b      	cmp	fp, r3
 80168cc:	d10a      	bne.n	80168e4 <_dtoa_r+0x6c4>
 80168ce:	9b08      	ldr	r3, [sp, #32]
 80168d0:	3301      	adds	r3, #1
 80168d2:	9308      	str	r3, [sp, #32]
 80168d4:	2330      	movs	r3, #48	; 0x30
 80168d6:	f88b 3000 	strb.w	r3, [fp]
 80168da:	465b      	mov	r3, fp
 80168dc:	781a      	ldrb	r2, [r3, #0]
 80168de:	3201      	adds	r2, #1
 80168e0:	701a      	strb	r2, [r3, #0]
 80168e2:	e78c      	b.n	80167fe <_dtoa_r+0x5de>
 80168e4:	461d      	mov	r5, r3
 80168e6:	e7ea      	b.n	80168be <_dtoa_r+0x69e>
 80168e8:	2200      	movs	r2, #0
 80168ea:	4b9b      	ldr	r3, [pc, #620]	; (8016b58 <_dtoa_r+0x938>)
 80168ec:	f7e9 fe9c 	bl	8000628 <__aeabi_dmul>
 80168f0:	2200      	movs	r2, #0
 80168f2:	2300      	movs	r3, #0
 80168f4:	4606      	mov	r6, r0
 80168f6:	460f      	mov	r7, r1
 80168f8:	f7ea f8fe 	bl	8000af8 <__aeabi_dcmpeq>
 80168fc:	2800      	cmp	r0, #0
 80168fe:	d09a      	beq.n	8016836 <_dtoa_r+0x616>
 8016900:	e7cb      	b.n	801689a <_dtoa_r+0x67a>
 8016902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016904:	2a00      	cmp	r2, #0
 8016906:	f000 808b 	beq.w	8016a20 <_dtoa_r+0x800>
 801690a:	9a06      	ldr	r2, [sp, #24]
 801690c:	2a01      	cmp	r2, #1
 801690e:	dc6e      	bgt.n	80169ee <_dtoa_r+0x7ce>
 8016910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016912:	2a00      	cmp	r2, #0
 8016914:	d067      	beq.n	80169e6 <_dtoa_r+0x7c6>
 8016916:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801691a:	9f07      	ldr	r7, [sp, #28]
 801691c:	9d05      	ldr	r5, [sp, #20]
 801691e:	9a05      	ldr	r2, [sp, #20]
 8016920:	2101      	movs	r1, #1
 8016922:	441a      	add	r2, r3
 8016924:	4620      	mov	r0, r4
 8016926:	9205      	str	r2, [sp, #20]
 8016928:	4498      	add	r8, r3
 801692a:	f000 feb0 	bl	801768e <__i2b>
 801692e:	4606      	mov	r6, r0
 8016930:	2d00      	cmp	r5, #0
 8016932:	dd0c      	ble.n	801694e <_dtoa_r+0x72e>
 8016934:	f1b8 0f00 	cmp.w	r8, #0
 8016938:	dd09      	ble.n	801694e <_dtoa_r+0x72e>
 801693a:	4545      	cmp	r5, r8
 801693c:	9a05      	ldr	r2, [sp, #20]
 801693e:	462b      	mov	r3, r5
 8016940:	bfa8      	it	ge
 8016942:	4643      	movge	r3, r8
 8016944:	1ad2      	subs	r2, r2, r3
 8016946:	9205      	str	r2, [sp, #20]
 8016948:	1aed      	subs	r5, r5, r3
 801694a:	eba8 0803 	sub.w	r8, r8, r3
 801694e:	9b07      	ldr	r3, [sp, #28]
 8016950:	b1eb      	cbz	r3, 801698e <_dtoa_r+0x76e>
 8016952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016954:	2b00      	cmp	r3, #0
 8016956:	d067      	beq.n	8016a28 <_dtoa_r+0x808>
 8016958:	b18f      	cbz	r7, 801697e <_dtoa_r+0x75e>
 801695a:	4631      	mov	r1, r6
 801695c:	463a      	mov	r2, r7
 801695e:	4620      	mov	r0, r4
 8016960:	f000 ff34 	bl	80177cc <__pow5mult>
 8016964:	9a04      	ldr	r2, [sp, #16]
 8016966:	4601      	mov	r1, r0
 8016968:	4606      	mov	r6, r0
 801696a:	4620      	mov	r0, r4
 801696c:	f000 fe98 	bl	80176a0 <__multiply>
 8016970:	9904      	ldr	r1, [sp, #16]
 8016972:	9008      	str	r0, [sp, #32]
 8016974:	4620      	mov	r0, r4
 8016976:	f000 fdac 	bl	80174d2 <_Bfree>
 801697a:	9b08      	ldr	r3, [sp, #32]
 801697c:	9304      	str	r3, [sp, #16]
 801697e:	9b07      	ldr	r3, [sp, #28]
 8016980:	1bda      	subs	r2, r3, r7
 8016982:	d004      	beq.n	801698e <_dtoa_r+0x76e>
 8016984:	9904      	ldr	r1, [sp, #16]
 8016986:	4620      	mov	r0, r4
 8016988:	f000 ff20 	bl	80177cc <__pow5mult>
 801698c:	9004      	str	r0, [sp, #16]
 801698e:	2101      	movs	r1, #1
 8016990:	4620      	mov	r0, r4
 8016992:	f000 fe7c 	bl	801768e <__i2b>
 8016996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016998:	4607      	mov	r7, r0
 801699a:	2b00      	cmp	r3, #0
 801699c:	f000 81d0 	beq.w	8016d40 <_dtoa_r+0xb20>
 80169a0:	461a      	mov	r2, r3
 80169a2:	4601      	mov	r1, r0
 80169a4:	4620      	mov	r0, r4
 80169a6:	f000 ff11 	bl	80177cc <__pow5mult>
 80169aa:	9b06      	ldr	r3, [sp, #24]
 80169ac:	2b01      	cmp	r3, #1
 80169ae:	4607      	mov	r7, r0
 80169b0:	dc40      	bgt.n	8016a34 <_dtoa_r+0x814>
 80169b2:	9b00      	ldr	r3, [sp, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d139      	bne.n	8016a2c <_dtoa_r+0x80c>
 80169b8:	9b01      	ldr	r3, [sp, #4]
 80169ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d136      	bne.n	8016a30 <_dtoa_r+0x810>
 80169c2:	9b01      	ldr	r3, [sp, #4]
 80169c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80169c8:	0d1b      	lsrs	r3, r3, #20
 80169ca:	051b      	lsls	r3, r3, #20
 80169cc:	b12b      	cbz	r3, 80169da <_dtoa_r+0x7ba>
 80169ce:	9b05      	ldr	r3, [sp, #20]
 80169d0:	3301      	adds	r3, #1
 80169d2:	9305      	str	r3, [sp, #20]
 80169d4:	f108 0801 	add.w	r8, r8, #1
 80169d8:	2301      	movs	r3, #1
 80169da:	9307      	str	r3, [sp, #28]
 80169dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d12a      	bne.n	8016a38 <_dtoa_r+0x818>
 80169e2:	2001      	movs	r0, #1
 80169e4:	e030      	b.n	8016a48 <_dtoa_r+0x828>
 80169e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80169e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80169ec:	e795      	b.n	801691a <_dtoa_r+0x6fa>
 80169ee:	9b07      	ldr	r3, [sp, #28]
 80169f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80169f4:	42bb      	cmp	r3, r7
 80169f6:	bfbf      	itttt	lt
 80169f8:	9b07      	ldrlt	r3, [sp, #28]
 80169fa:	9707      	strlt	r7, [sp, #28]
 80169fc:	1afa      	sublt	r2, r7, r3
 80169fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016a00:	bfbb      	ittet	lt
 8016a02:	189b      	addlt	r3, r3, r2
 8016a04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016a06:	1bdf      	subge	r7, r3, r7
 8016a08:	2700      	movlt	r7, #0
 8016a0a:	f1b9 0f00 	cmp.w	r9, #0
 8016a0e:	bfb5      	itete	lt
 8016a10:	9b05      	ldrlt	r3, [sp, #20]
 8016a12:	9d05      	ldrge	r5, [sp, #20]
 8016a14:	eba3 0509 	sublt.w	r5, r3, r9
 8016a18:	464b      	movge	r3, r9
 8016a1a:	bfb8      	it	lt
 8016a1c:	2300      	movlt	r3, #0
 8016a1e:	e77e      	b.n	801691e <_dtoa_r+0x6fe>
 8016a20:	9f07      	ldr	r7, [sp, #28]
 8016a22:	9d05      	ldr	r5, [sp, #20]
 8016a24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016a26:	e783      	b.n	8016930 <_dtoa_r+0x710>
 8016a28:	9a07      	ldr	r2, [sp, #28]
 8016a2a:	e7ab      	b.n	8016984 <_dtoa_r+0x764>
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	e7d4      	b.n	80169da <_dtoa_r+0x7ba>
 8016a30:	9b00      	ldr	r3, [sp, #0]
 8016a32:	e7d2      	b.n	80169da <_dtoa_r+0x7ba>
 8016a34:	2300      	movs	r3, #0
 8016a36:	9307      	str	r3, [sp, #28]
 8016a38:	693b      	ldr	r3, [r7, #16]
 8016a3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016a3e:	6918      	ldr	r0, [r3, #16]
 8016a40:	f000 fdd7 	bl	80175f2 <__hi0bits>
 8016a44:	f1c0 0020 	rsb	r0, r0, #32
 8016a48:	4440      	add	r0, r8
 8016a4a:	f010 001f 	ands.w	r0, r0, #31
 8016a4e:	d047      	beq.n	8016ae0 <_dtoa_r+0x8c0>
 8016a50:	f1c0 0320 	rsb	r3, r0, #32
 8016a54:	2b04      	cmp	r3, #4
 8016a56:	dd3b      	ble.n	8016ad0 <_dtoa_r+0x8b0>
 8016a58:	9b05      	ldr	r3, [sp, #20]
 8016a5a:	f1c0 001c 	rsb	r0, r0, #28
 8016a5e:	4403      	add	r3, r0
 8016a60:	9305      	str	r3, [sp, #20]
 8016a62:	4405      	add	r5, r0
 8016a64:	4480      	add	r8, r0
 8016a66:	9b05      	ldr	r3, [sp, #20]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	dd05      	ble.n	8016a78 <_dtoa_r+0x858>
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	9904      	ldr	r1, [sp, #16]
 8016a70:	4620      	mov	r0, r4
 8016a72:	f000 fef9 	bl	8017868 <__lshift>
 8016a76:	9004      	str	r0, [sp, #16]
 8016a78:	f1b8 0f00 	cmp.w	r8, #0
 8016a7c:	dd05      	ble.n	8016a8a <_dtoa_r+0x86a>
 8016a7e:	4639      	mov	r1, r7
 8016a80:	4642      	mov	r2, r8
 8016a82:	4620      	mov	r0, r4
 8016a84:	f000 fef0 	bl	8017868 <__lshift>
 8016a88:	4607      	mov	r7, r0
 8016a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a8c:	b353      	cbz	r3, 8016ae4 <_dtoa_r+0x8c4>
 8016a8e:	4639      	mov	r1, r7
 8016a90:	9804      	ldr	r0, [sp, #16]
 8016a92:	f000 ff3d 	bl	8017910 <__mcmp>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	da24      	bge.n	8016ae4 <_dtoa_r+0x8c4>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	220a      	movs	r2, #10
 8016a9e:	9904      	ldr	r1, [sp, #16]
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f000 fd2d 	bl	8017500 <__multadd>
 8016aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016aa8:	9004      	str	r0, [sp, #16]
 8016aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	f000 814d 	beq.w	8016d4e <_dtoa_r+0xb2e>
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	4631      	mov	r1, r6
 8016ab8:	220a      	movs	r2, #10
 8016aba:	4620      	mov	r0, r4
 8016abc:	f000 fd20 	bl	8017500 <__multadd>
 8016ac0:	9b02      	ldr	r3, [sp, #8]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	4606      	mov	r6, r0
 8016ac6:	dc4f      	bgt.n	8016b68 <_dtoa_r+0x948>
 8016ac8:	9b06      	ldr	r3, [sp, #24]
 8016aca:	2b02      	cmp	r3, #2
 8016acc:	dd4c      	ble.n	8016b68 <_dtoa_r+0x948>
 8016ace:	e011      	b.n	8016af4 <_dtoa_r+0x8d4>
 8016ad0:	d0c9      	beq.n	8016a66 <_dtoa_r+0x846>
 8016ad2:	9a05      	ldr	r2, [sp, #20]
 8016ad4:	331c      	adds	r3, #28
 8016ad6:	441a      	add	r2, r3
 8016ad8:	9205      	str	r2, [sp, #20]
 8016ada:	441d      	add	r5, r3
 8016adc:	4498      	add	r8, r3
 8016ade:	e7c2      	b.n	8016a66 <_dtoa_r+0x846>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	e7f6      	b.n	8016ad2 <_dtoa_r+0x8b2>
 8016ae4:	f1b9 0f00 	cmp.w	r9, #0
 8016ae8:	dc38      	bgt.n	8016b5c <_dtoa_r+0x93c>
 8016aea:	9b06      	ldr	r3, [sp, #24]
 8016aec:	2b02      	cmp	r3, #2
 8016aee:	dd35      	ble.n	8016b5c <_dtoa_r+0x93c>
 8016af0:	f8cd 9008 	str.w	r9, [sp, #8]
 8016af4:	9b02      	ldr	r3, [sp, #8]
 8016af6:	b963      	cbnz	r3, 8016b12 <_dtoa_r+0x8f2>
 8016af8:	4639      	mov	r1, r7
 8016afa:	2205      	movs	r2, #5
 8016afc:	4620      	mov	r0, r4
 8016afe:	f000 fcff 	bl	8017500 <__multadd>
 8016b02:	4601      	mov	r1, r0
 8016b04:	4607      	mov	r7, r0
 8016b06:	9804      	ldr	r0, [sp, #16]
 8016b08:	f000 ff02 	bl	8017910 <__mcmp>
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	f73f adcc 	bgt.w	80166aa <_dtoa_r+0x48a>
 8016b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b14:	465d      	mov	r5, fp
 8016b16:	ea6f 0a03 	mvn.w	sl, r3
 8016b1a:	f04f 0900 	mov.w	r9, #0
 8016b1e:	4639      	mov	r1, r7
 8016b20:	4620      	mov	r0, r4
 8016b22:	f000 fcd6 	bl	80174d2 <_Bfree>
 8016b26:	2e00      	cmp	r6, #0
 8016b28:	f43f aeb7 	beq.w	801689a <_dtoa_r+0x67a>
 8016b2c:	f1b9 0f00 	cmp.w	r9, #0
 8016b30:	d005      	beq.n	8016b3e <_dtoa_r+0x91e>
 8016b32:	45b1      	cmp	r9, r6
 8016b34:	d003      	beq.n	8016b3e <_dtoa_r+0x91e>
 8016b36:	4649      	mov	r1, r9
 8016b38:	4620      	mov	r0, r4
 8016b3a:	f000 fcca 	bl	80174d2 <_Bfree>
 8016b3e:	4631      	mov	r1, r6
 8016b40:	4620      	mov	r0, r4
 8016b42:	f000 fcc6 	bl	80174d2 <_Bfree>
 8016b46:	e6a8      	b.n	801689a <_dtoa_r+0x67a>
 8016b48:	2700      	movs	r7, #0
 8016b4a:	463e      	mov	r6, r7
 8016b4c:	e7e1      	b.n	8016b12 <_dtoa_r+0x8f2>
 8016b4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016b52:	463e      	mov	r6, r7
 8016b54:	e5a9      	b.n	80166aa <_dtoa_r+0x48a>
 8016b56:	bf00      	nop
 8016b58:	40240000 	.word	0x40240000
 8016b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	f000 80fa 	beq.w	8016d5c <_dtoa_r+0xb3c>
 8016b68:	2d00      	cmp	r5, #0
 8016b6a:	dd05      	ble.n	8016b78 <_dtoa_r+0x958>
 8016b6c:	4631      	mov	r1, r6
 8016b6e:	462a      	mov	r2, r5
 8016b70:	4620      	mov	r0, r4
 8016b72:	f000 fe79 	bl	8017868 <__lshift>
 8016b76:	4606      	mov	r6, r0
 8016b78:	9b07      	ldr	r3, [sp, #28]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d04c      	beq.n	8016c18 <_dtoa_r+0x9f8>
 8016b7e:	6871      	ldr	r1, [r6, #4]
 8016b80:	4620      	mov	r0, r4
 8016b82:	f000 fc72 	bl	801746a <_Balloc>
 8016b86:	6932      	ldr	r2, [r6, #16]
 8016b88:	3202      	adds	r2, #2
 8016b8a:	4605      	mov	r5, r0
 8016b8c:	0092      	lsls	r2, r2, #2
 8016b8e:	f106 010c 	add.w	r1, r6, #12
 8016b92:	300c      	adds	r0, #12
 8016b94:	f000 fc5e 	bl	8017454 <memcpy>
 8016b98:	2201      	movs	r2, #1
 8016b9a:	4629      	mov	r1, r5
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	f000 fe63 	bl	8017868 <__lshift>
 8016ba2:	9b00      	ldr	r3, [sp, #0]
 8016ba4:	f8cd b014 	str.w	fp, [sp, #20]
 8016ba8:	f003 0301 	and.w	r3, r3, #1
 8016bac:	46b1      	mov	r9, r6
 8016bae:	9307      	str	r3, [sp, #28]
 8016bb0:	4606      	mov	r6, r0
 8016bb2:	4639      	mov	r1, r7
 8016bb4:	9804      	ldr	r0, [sp, #16]
 8016bb6:	f7ff faa5 	bl	8016104 <quorem>
 8016bba:	4649      	mov	r1, r9
 8016bbc:	4605      	mov	r5, r0
 8016bbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016bc2:	9804      	ldr	r0, [sp, #16]
 8016bc4:	f000 fea4 	bl	8017910 <__mcmp>
 8016bc8:	4632      	mov	r2, r6
 8016bca:	9000      	str	r0, [sp, #0]
 8016bcc:	4639      	mov	r1, r7
 8016bce:	4620      	mov	r0, r4
 8016bd0:	f000 feb8 	bl	8017944 <__mdiff>
 8016bd4:	68c3      	ldr	r3, [r0, #12]
 8016bd6:	4602      	mov	r2, r0
 8016bd8:	bb03      	cbnz	r3, 8016c1c <_dtoa_r+0x9fc>
 8016bda:	4601      	mov	r1, r0
 8016bdc:	9008      	str	r0, [sp, #32]
 8016bde:	9804      	ldr	r0, [sp, #16]
 8016be0:	f000 fe96 	bl	8017910 <__mcmp>
 8016be4:	9a08      	ldr	r2, [sp, #32]
 8016be6:	4603      	mov	r3, r0
 8016be8:	4611      	mov	r1, r2
 8016bea:	4620      	mov	r0, r4
 8016bec:	9308      	str	r3, [sp, #32]
 8016bee:	f000 fc70 	bl	80174d2 <_Bfree>
 8016bf2:	9b08      	ldr	r3, [sp, #32]
 8016bf4:	b9a3      	cbnz	r3, 8016c20 <_dtoa_r+0xa00>
 8016bf6:	9a06      	ldr	r2, [sp, #24]
 8016bf8:	b992      	cbnz	r2, 8016c20 <_dtoa_r+0xa00>
 8016bfa:	9a07      	ldr	r2, [sp, #28]
 8016bfc:	b982      	cbnz	r2, 8016c20 <_dtoa_r+0xa00>
 8016bfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016c02:	d029      	beq.n	8016c58 <_dtoa_r+0xa38>
 8016c04:	9b00      	ldr	r3, [sp, #0]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	dd01      	ble.n	8016c0e <_dtoa_r+0x9ee>
 8016c0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016c0e:	9b05      	ldr	r3, [sp, #20]
 8016c10:	1c5d      	adds	r5, r3, #1
 8016c12:	f883 8000 	strb.w	r8, [r3]
 8016c16:	e782      	b.n	8016b1e <_dtoa_r+0x8fe>
 8016c18:	4630      	mov	r0, r6
 8016c1a:	e7c2      	b.n	8016ba2 <_dtoa_r+0x982>
 8016c1c:	2301      	movs	r3, #1
 8016c1e:	e7e3      	b.n	8016be8 <_dtoa_r+0x9c8>
 8016c20:	9a00      	ldr	r2, [sp, #0]
 8016c22:	2a00      	cmp	r2, #0
 8016c24:	db04      	blt.n	8016c30 <_dtoa_r+0xa10>
 8016c26:	d125      	bne.n	8016c74 <_dtoa_r+0xa54>
 8016c28:	9a06      	ldr	r2, [sp, #24]
 8016c2a:	bb1a      	cbnz	r2, 8016c74 <_dtoa_r+0xa54>
 8016c2c:	9a07      	ldr	r2, [sp, #28]
 8016c2e:	bb0a      	cbnz	r2, 8016c74 <_dtoa_r+0xa54>
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	ddec      	ble.n	8016c0e <_dtoa_r+0x9ee>
 8016c34:	2201      	movs	r2, #1
 8016c36:	9904      	ldr	r1, [sp, #16]
 8016c38:	4620      	mov	r0, r4
 8016c3a:	f000 fe15 	bl	8017868 <__lshift>
 8016c3e:	4639      	mov	r1, r7
 8016c40:	9004      	str	r0, [sp, #16]
 8016c42:	f000 fe65 	bl	8017910 <__mcmp>
 8016c46:	2800      	cmp	r0, #0
 8016c48:	dc03      	bgt.n	8016c52 <_dtoa_r+0xa32>
 8016c4a:	d1e0      	bne.n	8016c0e <_dtoa_r+0x9ee>
 8016c4c:	f018 0f01 	tst.w	r8, #1
 8016c50:	d0dd      	beq.n	8016c0e <_dtoa_r+0x9ee>
 8016c52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016c56:	d1d8      	bne.n	8016c0a <_dtoa_r+0x9ea>
 8016c58:	9b05      	ldr	r3, [sp, #20]
 8016c5a:	9a05      	ldr	r2, [sp, #20]
 8016c5c:	1c5d      	adds	r5, r3, #1
 8016c5e:	2339      	movs	r3, #57	; 0x39
 8016c60:	7013      	strb	r3, [r2, #0]
 8016c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016c66:	2b39      	cmp	r3, #57	; 0x39
 8016c68:	f105 32ff 	add.w	r2, r5, #4294967295
 8016c6c:	d04f      	beq.n	8016d0e <_dtoa_r+0xaee>
 8016c6e:	3301      	adds	r3, #1
 8016c70:	7013      	strb	r3, [r2, #0]
 8016c72:	e754      	b.n	8016b1e <_dtoa_r+0x8fe>
 8016c74:	9a05      	ldr	r2, [sp, #20]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	f102 0501 	add.w	r5, r2, #1
 8016c7c:	dd06      	ble.n	8016c8c <_dtoa_r+0xa6c>
 8016c7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016c82:	d0e9      	beq.n	8016c58 <_dtoa_r+0xa38>
 8016c84:	f108 0801 	add.w	r8, r8, #1
 8016c88:	9b05      	ldr	r3, [sp, #20]
 8016c8a:	e7c2      	b.n	8016c12 <_dtoa_r+0x9f2>
 8016c8c:	9a02      	ldr	r2, [sp, #8]
 8016c8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016c92:	eba5 030b 	sub.w	r3, r5, fp
 8016c96:	4293      	cmp	r3, r2
 8016c98:	d021      	beq.n	8016cde <_dtoa_r+0xabe>
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	220a      	movs	r2, #10
 8016c9e:	9904      	ldr	r1, [sp, #16]
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f000 fc2d 	bl	8017500 <__multadd>
 8016ca6:	45b1      	cmp	r9, r6
 8016ca8:	9004      	str	r0, [sp, #16]
 8016caa:	f04f 0300 	mov.w	r3, #0
 8016cae:	f04f 020a 	mov.w	r2, #10
 8016cb2:	4649      	mov	r1, r9
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	d105      	bne.n	8016cc4 <_dtoa_r+0xaa4>
 8016cb8:	f000 fc22 	bl	8017500 <__multadd>
 8016cbc:	4681      	mov	r9, r0
 8016cbe:	4606      	mov	r6, r0
 8016cc0:	9505      	str	r5, [sp, #20]
 8016cc2:	e776      	b.n	8016bb2 <_dtoa_r+0x992>
 8016cc4:	f000 fc1c 	bl	8017500 <__multadd>
 8016cc8:	4631      	mov	r1, r6
 8016cca:	4681      	mov	r9, r0
 8016ccc:	2300      	movs	r3, #0
 8016cce:	220a      	movs	r2, #10
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	f000 fc15 	bl	8017500 <__multadd>
 8016cd6:	4606      	mov	r6, r0
 8016cd8:	e7f2      	b.n	8016cc0 <_dtoa_r+0xaa0>
 8016cda:	f04f 0900 	mov.w	r9, #0
 8016cde:	2201      	movs	r2, #1
 8016ce0:	9904      	ldr	r1, [sp, #16]
 8016ce2:	4620      	mov	r0, r4
 8016ce4:	f000 fdc0 	bl	8017868 <__lshift>
 8016ce8:	4639      	mov	r1, r7
 8016cea:	9004      	str	r0, [sp, #16]
 8016cec:	f000 fe10 	bl	8017910 <__mcmp>
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	dcb6      	bgt.n	8016c62 <_dtoa_r+0xa42>
 8016cf4:	d102      	bne.n	8016cfc <_dtoa_r+0xadc>
 8016cf6:	f018 0f01 	tst.w	r8, #1
 8016cfa:	d1b2      	bne.n	8016c62 <_dtoa_r+0xa42>
 8016cfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016d00:	2b30      	cmp	r3, #48	; 0x30
 8016d02:	f105 32ff 	add.w	r2, r5, #4294967295
 8016d06:	f47f af0a 	bne.w	8016b1e <_dtoa_r+0x8fe>
 8016d0a:	4615      	mov	r5, r2
 8016d0c:	e7f6      	b.n	8016cfc <_dtoa_r+0xadc>
 8016d0e:	4593      	cmp	fp, r2
 8016d10:	d105      	bne.n	8016d1e <_dtoa_r+0xafe>
 8016d12:	2331      	movs	r3, #49	; 0x31
 8016d14:	f10a 0a01 	add.w	sl, sl, #1
 8016d18:	f88b 3000 	strb.w	r3, [fp]
 8016d1c:	e6ff      	b.n	8016b1e <_dtoa_r+0x8fe>
 8016d1e:	4615      	mov	r5, r2
 8016d20:	e79f      	b.n	8016c62 <_dtoa_r+0xa42>
 8016d22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016d88 <_dtoa_r+0xb68>
 8016d26:	e007      	b.n	8016d38 <_dtoa_r+0xb18>
 8016d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016d8c <_dtoa_r+0xb6c>
 8016d2e:	b11b      	cbz	r3, 8016d38 <_dtoa_r+0xb18>
 8016d30:	f10b 0308 	add.w	r3, fp, #8
 8016d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d36:	6013      	str	r3, [r2, #0]
 8016d38:	4658      	mov	r0, fp
 8016d3a:	b017      	add	sp, #92	; 0x5c
 8016d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d40:	9b06      	ldr	r3, [sp, #24]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	f77f ae35 	ble.w	80169b2 <_dtoa_r+0x792>
 8016d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d4a:	9307      	str	r3, [sp, #28]
 8016d4c:	e649      	b.n	80169e2 <_dtoa_r+0x7c2>
 8016d4e:	9b02      	ldr	r3, [sp, #8]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	dc03      	bgt.n	8016d5c <_dtoa_r+0xb3c>
 8016d54:	9b06      	ldr	r3, [sp, #24]
 8016d56:	2b02      	cmp	r3, #2
 8016d58:	f73f aecc 	bgt.w	8016af4 <_dtoa_r+0x8d4>
 8016d5c:	465d      	mov	r5, fp
 8016d5e:	4639      	mov	r1, r7
 8016d60:	9804      	ldr	r0, [sp, #16]
 8016d62:	f7ff f9cf 	bl	8016104 <quorem>
 8016d66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016d6a:	f805 8b01 	strb.w	r8, [r5], #1
 8016d6e:	9a02      	ldr	r2, [sp, #8]
 8016d70:	eba5 030b 	sub.w	r3, r5, fp
 8016d74:	429a      	cmp	r2, r3
 8016d76:	ddb0      	ble.n	8016cda <_dtoa_r+0xaba>
 8016d78:	2300      	movs	r3, #0
 8016d7a:	220a      	movs	r2, #10
 8016d7c:	9904      	ldr	r1, [sp, #16]
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f000 fbbe 	bl	8017500 <__multadd>
 8016d84:	9004      	str	r0, [sp, #16]
 8016d86:	e7ea      	b.n	8016d5e <_dtoa_r+0xb3e>
 8016d88:	08019043 	.word	0x08019043
 8016d8c:	08018f08 	.word	0x08018f08

08016d90 <rshift>:
 8016d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d92:	6906      	ldr	r6, [r0, #16]
 8016d94:	114b      	asrs	r3, r1, #5
 8016d96:	429e      	cmp	r6, r3
 8016d98:	f100 0414 	add.w	r4, r0, #20
 8016d9c:	dd30      	ble.n	8016e00 <rshift+0x70>
 8016d9e:	f011 011f 	ands.w	r1, r1, #31
 8016da2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016da6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016daa:	d108      	bne.n	8016dbe <rshift+0x2e>
 8016dac:	4621      	mov	r1, r4
 8016dae:	42b2      	cmp	r2, r6
 8016db0:	460b      	mov	r3, r1
 8016db2:	d211      	bcs.n	8016dd8 <rshift+0x48>
 8016db4:	f852 3b04 	ldr.w	r3, [r2], #4
 8016db8:	f841 3b04 	str.w	r3, [r1], #4
 8016dbc:	e7f7      	b.n	8016dae <rshift+0x1e>
 8016dbe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016dc2:	f1c1 0c20 	rsb	ip, r1, #32
 8016dc6:	40cd      	lsrs	r5, r1
 8016dc8:	3204      	adds	r2, #4
 8016dca:	4623      	mov	r3, r4
 8016dcc:	42b2      	cmp	r2, r6
 8016dce:	4617      	mov	r7, r2
 8016dd0:	d30c      	bcc.n	8016dec <rshift+0x5c>
 8016dd2:	601d      	str	r5, [r3, #0]
 8016dd4:	b105      	cbz	r5, 8016dd8 <rshift+0x48>
 8016dd6:	3304      	adds	r3, #4
 8016dd8:	1b1a      	subs	r2, r3, r4
 8016dda:	42a3      	cmp	r3, r4
 8016ddc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016de0:	bf08      	it	eq
 8016de2:	2300      	moveq	r3, #0
 8016de4:	6102      	str	r2, [r0, #16]
 8016de6:	bf08      	it	eq
 8016de8:	6143      	streq	r3, [r0, #20]
 8016dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dec:	683f      	ldr	r7, [r7, #0]
 8016dee:	fa07 f70c 	lsl.w	r7, r7, ip
 8016df2:	433d      	orrs	r5, r7
 8016df4:	f843 5b04 	str.w	r5, [r3], #4
 8016df8:	f852 5b04 	ldr.w	r5, [r2], #4
 8016dfc:	40cd      	lsrs	r5, r1
 8016dfe:	e7e5      	b.n	8016dcc <rshift+0x3c>
 8016e00:	4623      	mov	r3, r4
 8016e02:	e7e9      	b.n	8016dd8 <rshift+0x48>

08016e04 <__hexdig_fun>:
 8016e04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016e08:	2b09      	cmp	r3, #9
 8016e0a:	d802      	bhi.n	8016e12 <__hexdig_fun+0xe>
 8016e0c:	3820      	subs	r0, #32
 8016e0e:	b2c0      	uxtb	r0, r0
 8016e10:	4770      	bx	lr
 8016e12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016e16:	2b05      	cmp	r3, #5
 8016e18:	d801      	bhi.n	8016e1e <__hexdig_fun+0x1a>
 8016e1a:	3847      	subs	r0, #71	; 0x47
 8016e1c:	e7f7      	b.n	8016e0e <__hexdig_fun+0xa>
 8016e1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016e22:	2b05      	cmp	r3, #5
 8016e24:	d801      	bhi.n	8016e2a <__hexdig_fun+0x26>
 8016e26:	3827      	subs	r0, #39	; 0x27
 8016e28:	e7f1      	b.n	8016e0e <__hexdig_fun+0xa>
 8016e2a:	2000      	movs	r0, #0
 8016e2c:	4770      	bx	lr

08016e2e <__gethex>:
 8016e2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e32:	b08b      	sub	sp, #44	; 0x2c
 8016e34:	468a      	mov	sl, r1
 8016e36:	9002      	str	r0, [sp, #8]
 8016e38:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016e3a:	9306      	str	r3, [sp, #24]
 8016e3c:	4690      	mov	r8, r2
 8016e3e:	f000 fadf 	bl	8017400 <__localeconv_l>
 8016e42:	6803      	ldr	r3, [r0, #0]
 8016e44:	9303      	str	r3, [sp, #12]
 8016e46:	4618      	mov	r0, r3
 8016e48:	f7e9 f9da 	bl	8000200 <strlen>
 8016e4c:	9b03      	ldr	r3, [sp, #12]
 8016e4e:	9001      	str	r0, [sp, #4]
 8016e50:	4403      	add	r3, r0
 8016e52:	f04f 0b00 	mov.w	fp, #0
 8016e56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016e5a:	9307      	str	r3, [sp, #28]
 8016e5c:	f8da 3000 	ldr.w	r3, [sl]
 8016e60:	3302      	adds	r3, #2
 8016e62:	461f      	mov	r7, r3
 8016e64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016e68:	2830      	cmp	r0, #48	; 0x30
 8016e6a:	d06c      	beq.n	8016f46 <__gethex+0x118>
 8016e6c:	f7ff ffca 	bl	8016e04 <__hexdig_fun>
 8016e70:	4604      	mov	r4, r0
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d16a      	bne.n	8016f4c <__gethex+0x11e>
 8016e76:	9a01      	ldr	r2, [sp, #4]
 8016e78:	9903      	ldr	r1, [sp, #12]
 8016e7a:	4638      	mov	r0, r7
 8016e7c:	f001 fc40 	bl	8018700 <strncmp>
 8016e80:	2800      	cmp	r0, #0
 8016e82:	d166      	bne.n	8016f52 <__gethex+0x124>
 8016e84:	9b01      	ldr	r3, [sp, #4]
 8016e86:	5cf8      	ldrb	r0, [r7, r3]
 8016e88:	18fe      	adds	r6, r7, r3
 8016e8a:	f7ff ffbb 	bl	8016e04 <__hexdig_fun>
 8016e8e:	2800      	cmp	r0, #0
 8016e90:	d062      	beq.n	8016f58 <__gethex+0x12a>
 8016e92:	4633      	mov	r3, r6
 8016e94:	7818      	ldrb	r0, [r3, #0]
 8016e96:	2830      	cmp	r0, #48	; 0x30
 8016e98:	461f      	mov	r7, r3
 8016e9a:	f103 0301 	add.w	r3, r3, #1
 8016e9e:	d0f9      	beq.n	8016e94 <__gethex+0x66>
 8016ea0:	f7ff ffb0 	bl	8016e04 <__hexdig_fun>
 8016ea4:	fab0 f580 	clz	r5, r0
 8016ea8:	096d      	lsrs	r5, r5, #5
 8016eaa:	4634      	mov	r4, r6
 8016eac:	f04f 0b01 	mov.w	fp, #1
 8016eb0:	463a      	mov	r2, r7
 8016eb2:	4616      	mov	r6, r2
 8016eb4:	3201      	adds	r2, #1
 8016eb6:	7830      	ldrb	r0, [r6, #0]
 8016eb8:	f7ff ffa4 	bl	8016e04 <__hexdig_fun>
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	d1f8      	bne.n	8016eb2 <__gethex+0x84>
 8016ec0:	9a01      	ldr	r2, [sp, #4]
 8016ec2:	9903      	ldr	r1, [sp, #12]
 8016ec4:	4630      	mov	r0, r6
 8016ec6:	f001 fc1b 	bl	8018700 <strncmp>
 8016eca:	b950      	cbnz	r0, 8016ee2 <__gethex+0xb4>
 8016ecc:	b954      	cbnz	r4, 8016ee4 <__gethex+0xb6>
 8016ece:	9b01      	ldr	r3, [sp, #4]
 8016ed0:	18f4      	adds	r4, r6, r3
 8016ed2:	4622      	mov	r2, r4
 8016ed4:	4616      	mov	r6, r2
 8016ed6:	3201      	adds	r2, #1
 8016ed8:	7830      	ldrb	r0, [r6, #0]
 8016eda:	f7ff ff93 	bl	8016e04 <__hexdig_fun>
 8016ede:	2800      	cmp	r0, #0
 8016ee0:	d1f8      	bne.n	8016ed4 <__gethex+0xa6>
 8016ee2:	b10c      	cbz	r4, 8016ee8 <__gethex+0xba>
 8016ee4:	1ba4      	subs	r4, r4, r6
 8016ee6:	00a4      	lsls	r4, r4, #2
 8016ee8:	7833      	ldrb	r3, [r6, #0]
 8016eea:	2b50      	cmp	r3, #80	; 0x50
 8016eec:	d001      	beq.n	8016ef2 <__gethex+0xc4>
 8016eee:	2b70      	cmp	r3, #112	; 0x70
 8016ef0:	d140      	bne.n	8016f74 <__gethex+0x146>
 8016ef2:	7873      	ldrb	r3, [r6, #1]
 8016ef4:	2b2b      	cmp	r3, #43	; 0x2b
 8016ef6:	d031      	beq.n	8016f5c <__gethex+0x12e>
 8016ef8:	2b2d      	cmp	r3, #45	; 0x2d
 8016efa:	d033      	beq.n	8016f64 <__gethex+0x136>
 8016efc:	1c71      	adds	r1, r6, #1
 8016efe:	f04f 0900 	mov.w	r9, #0
 8016f02:	7808      	ldrb	r0, [r1, #0]
 8016f04:	f7ff ff7e 	bl	8016e04 <__hexdig_fun>
 8016f08:	1e43      	subs	r3, r0, #1
 8016f0a:	b2db      	uxtb	r3, r3
 8016f0c:	2b18      	cmp	r3, #24
 8016f0e:	d831      	bhi.n	8016f74 <__gethex+0x146>
 8016f10:	f1a0 0210 	sub.w	r2, r0, #16
 8016f14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016f18:	f7ff ff74 	bl	8016e04 <__hexdig_fun>
 8016f1c:	1e43      	subs	r3, r0, #1
 8016f1e:	b2db      	uxtb	r3, r3
 8016f20:	2b18      	cmp	r3, #24
 8016f22:	d922      	bls.n	8016f6a <__gethex+0x13c>
 8016f24:	f1b9 0f00 	cmp.w	r9, #0
 8016f28:	d000      	beq.n	8016f2c <__gethex+0xfe>
 8016f2a:	4252      	negs	r2, r2
 8016f2c:	4414      	add	r4, r2
 8016f2e:	f8ca 1000 	str.w	r1, [sl]
 8016f32:	b30d      	cbz	r5, 8016f78 <__gethex+0x14a>
 8016f34:	f1bb 0f00 	cmp.w	fp, #0
 8016f38:	bf0c      	ite	eq
 8016f3a:	2706      	moveq	r7, #6
 8016f3c:	2700      	movne	r7, #0
 8016f3e:	4638      	mov	r0, r7
 8016f40:	b00b      	add	sp, #44	; 0x2c
 8016f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f46:	f10b 0b01 	add.w	fp, fp, #1
 8016f4a:	e78a      	b.n	8016e62 <__gethex+0x34>
 8016f4c:	2500      	movs	r5, #0
 8016f4e:	462c      	mov	r4, r5
 8016f50:	e7ae      	b.n	8016eb0 <__gethex+0x82>
 8016f52:	463e      	mov	r6, r7
 8016f54:	2501      	movs	r5, #1
 8016f56:	e7c7      	b.n	8016ee8 <__gethex+0xba>
 8016f58:	4604      	mov	r4, r0
 8016f5a:	e7fb      	b.n	8016f54 <__gethex+0x126>
 8016f5c:	f04f 0900 	mov.w	r9, #0
 8016f60:	1cb1      	adds	r1, r6, #2
 8016f62:	e7ce      	b.n	8016f02 <__gethex+0xd4>
 8016f64:	f04f 0901 	mov.w	r9, #1
 8016f68:	e7fa      	b.n	8016f60 <__gethex+0x132>
 8016f6a:	230a      	movs	r3, #10
 8016f6c:	fb03 0202 	mla	r2, r3, r2, r0
 8016f70:	3a10      	subs	r2, #16
 8016f72:	e7cf      	b.n	8016f14 <__gethex+0xe6>
 8016f74:	4631      	mov	r1, r6
 8016f76:	e7da      	b.n	8016f2e <__gethex+0x100>
 8016f78:	1bf3      	subs	r3, r6, r7
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	4629      	mov	r1, r5
 8016f7e:	2b07      	cmp	r3, #7
 8016f80:	dc49      	bgt.n	8017016 <__gethex+0x1e8>
 8016f82:	9802      	ldr	r0, [sp, #8]
 8016f84:	f000 fa71 	bl	801746a <_Balloc>
 8016f88:	9b01      	ldr	r3, [sp, #4]
 8016f8a:	f100 0914 	add.w	r9, r0, #20
 8016f8e:	f04f 0b00 	mov.w	fp, #0
 8016f92:	f1c3 0301 	rsb	r3, r3, #1
 8016f96:	4605      	mov	r5, r0
 8016f98:	f8cd 9010 	str.w	r9, [sp, #16]
 8016f9c:	46da      	mov	sl, fp
 8016f9e:	9308      	str	r3, [sp, #32]
 8016fa0:	42b7      	cmp	r7, r6
 8016fa2:	d33b      	bcc.n	801701c <__gethex+0x1ee>
 8016fa4:	9804      	ldr	r0, [sp, #16]
 8016fa6:	f840 ab04 	str.w	sl, [r0], #4
 8016faa:	eba0 0009 	sub.w	r0, r0, r9
 8016fae:	1080      	asrs	r0, r0, #2
 8016fb0:	6128      	str	r0, [r5, #16]
 8016fb2:	0147      	lsls	r7, r0, #5
 8016fb4:	4650      	mov	r0, sl
 8016fb6:	f000 fb1c 	bl	80175f2 <__hi0bits>
 8016fba:	f8d8 6000 	ldr.w	r6, [r8]
 8016fbe:	1a3f      	subs	r7, r7, r0
 8016fc0:	42b7      	cmp	r7, r6
 8016fc2:	dd64      	ble.n	801708e <__gethex+0x260>
 8016fc4:	1bbf      	subs	r7, r7, r6
 8016fc6:	4639      	mov	r1, r7
 8016fc8:	4628      	mov	r0, r5
 8016fca:	f000 fe2b 	bl	8017c24 <__any_on>
 8016fce:	4682      	mov	sl, r0
 8016fd0:	b178      	cbz	r0, 8016ff2 <__gethex+0x1c4>
 8016fd2:	1e7b      	subs	r3, r7, #1
 8016fd4:	1159      	asrs	r1, r3, #5
 8016fd6:	f003 021f 	and.w	r2, r3, #31
 8016fda:	f04f 0a01 	mov.w	sl, #1
 8016fde:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016fe2:	fa0a f202 	lsl.w	r2, sl, r2
 8016fe6:	420a      	tst	r2, r1
 8016fe8:	d003      	beq.n	8016ff2 <__gethex+0x1c4>
 8016fea:	4553      	cmp	r3, sl
 8016fec:	dc46      	bgt.n	801707c <__gethex+0x24e>
 8016fee:	f04f 0a02 	mov.w	sl, #2
 8016ff2:	4639      	mov	r1, r7
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f7ff fecb 	bl	8016d90 <rshift>
 8016ffa:	443c      	add	r4, r7
 8016ffc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017000:	42a3      	cmp	r3, r4
 8017002:	da52      	bge.n	80170aa <__gethex+0x27c>
 8017004:	4629      	mov	r1, r5
 8017006:	9802      	ldr	r0, [sp, #8]
 8017008:	f000 fa63 	bl	80174d2 <_Bfree>
 801700c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801700e:	2300      	movs	r3, #0
 8017010:	6013      	str	r3, [r2, #0]
 8017012:	27a3      	movs	r7, #163	; 0xa3
 8017014:	e793      	b.n	8016f3e <__gethex+0x110>
 8017016:	3101      	adds	r1, #1
 8017018:	105b      	asrs	r3, r3, #1
 801701a:	e7b0      	b.n	8016f7e <__gethex+0x150>
 801701c:	1e73      	subs	r3, r6, #1
 801701e:	9305      	str	r3, [sp, #20]
 8017020:	9a07      	ldr	r2, [sp, #28]
 8017022:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017026:	4293      	cmp	r3, r2
 8017028:	d018      	beq.n	801705c <__gethex+0x22e>
 801702a:	f1bb 0f20 	cmp.w	fp, #32
 801702e:	d107      	bne.n	8017040 <__gethex+0x212>
 8017030:	9b04      	ldr	r3, [sp, #16]
 8017032:	f8c3 a000 	str.w	sl, [r3]
 8017036:	3304      	adds	r3, #4
 8017038:	f04f 0a00 	mov.w	sl, #0
 801703c:	9304      	str	r3, [sp, #16]
 801703e:	46d3      	mov	fp, sl
 8017040:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017044:	f7ff fede 	bl	8016e04 <__hexdig_fun>
 8017048:	f000 000f 	and.w	r0, r0, #15
 801704c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017050:	ea4a 0a00 	orr.w	sl, sl, r0
 8017054:	f10b 0b04 	add.w	fp, fp, #4
 8017058:	9b05      	ldr	r3, [sp, #20]
 801705a:	e00d      	b.n	8017078 <__gethex+0x24a>
 801705c:	9b05      	ldr	r3, [sp, #20]
 801705e:	9a08      	ldr	r2, [sp, #32]
 8017060:	4413      	add	r3, r2
 8017062:	42bb      	cmp	r3, r7
 8017064:	d3e1      	bcc.n	801702a <__gethex+0x1fc>
 8017066:	4618      	mov	r0, r3
 8017068:	9a01      	ldr	r2, [sp, #4]
 801706a:	9903      	ldr	r1, [sp, #12]
 801706c:	9309      	str	r3, [sp, #36]	; 0x24
 801706e:	f001 fb47 	bl	8018700 <strncmp>
 8017072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017074:	2800      	cmp	r0, #0
 8017076:	d1d8      	bne.n	801702a <__gethex+0x1fc>
 8017078:	461e      	mov	r6, r3
 801707a:	e791      	b.n	8016fa0 <__gethex+0x172>
 801707c:	1eb9      	subs	r1, r7, #2
 801707e:	4628      	mov	r0, r5
 8017080:	f000 fdd0 	bl	8017c24 <__any_on>
 8017084:	2800      	cmp	r0, #0
 8017086:	d0b2      	beq.n	8016fee <__gethex+0x1c0>
 8017088:	f04f 0a03 	mov.w	sl, #3
 801708c:	e7b1      	b.n	8016ff2 <__gethex+0x1c4>
 801708e:	da09      	bge.n	80170a4 <__gethex+0x276>
 8017090:	1bf7      	subs	r7, r6, r7
 8017092:	4629      	mov	r1, r5
 8017094:	463a      	mov	r2, r7
 8017096:	9802      	ldr	r0, [sp, #8]
 8017098:	f000 fbe6 	bl	8017868 <__lshift>
 801709c:	1be4      	subs	r4, r4, r7
 801709e:	4605      	mov	r5, r0
 80170a0:	f100 0914 	add.w	r9, r0, #20
 80170a4:	f04f 0a00 	mov.w	sl, #0
 80170a8:	e7a8      	b.n	8016ffc <__gethex+0x1ce>
 80170aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80170ae:	42a0      	cmp	r0, r4
 80170b0:	dd6a      	ble.n	8017188 <__gethex+0x35a>
 80170b2:	1b04      	subs	r4, r0, r4
 80170b4:	42a6      	cmp	r6, r4
 80170b6:	dc2e      	bgt.n	8017116 <__gethex+0x2e8>
 80170b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80170bc:	2b02      	cmp	r3, #2
 80170be:	d022      	beq.n	8017106 <__gethex+0x2d8>
 80170c0:	2b03      	cmp	r3, #3
 80170c2:	d024      	beq.n	801710e <__gethex+0x2e0>
 80170c4:	2b01      	cmp	r3, #1
 80170c6:	d115      	bne.n	80170f4 <__gethex+0x2c6>
 80170c8:	42a6      	cmp	r6, r4
 80170ca:	d113      	bne.n	80170f4 <__gethex+0x2c6>
 80170cc:	2e01      	cmp	r6, #1
 80170ce:	dc0b      	bgt.n	80170e8 <__gethex+0x2ba>
 80170d0:	9a06      	ldr	r2, [sp, #24]
 80170d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80170d6:	6013      	str	r3, [r2, #0]
 80170d8:	2301      	movs	r3, #1
 80170da:	612b      	str	r3, [r5, #16]
 80170dc:	f8c9 3000 	str.w	r3, [r9]
 80170e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80170e2:	2762      	movs	r7, #98	; 0x62
 80170e4:	601d      	str	r5, [r3, #0]
 80170e6:	e72a      	b.n	8016f3e <__gethex+0x110>
 80170e8:	1e71      	subs	r1, r6, #1
 80170ea:	4628      	mov	r0, r5
 80170ec:	f000 fd9a 	bl	8017c24 <__any_on>
 80170f0:	2800      	cmp	r0, #0
 80170f2:	d1ed      	bne.n	80170d0 <__gethex+0x2a2>
 80170f4:	4629      	mov	r1, r5
 80170f6:	9802      	ldr	r0, [sp, #8]
 80170f8:	f000 f9eb 	bl	80174d2 <_Bfree>
 80170fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80170fe:	2300      	movs	r3, #0
 8017100:	6013      	str	r3, [r2, #0]
 8017102:	2750      	movs	r7, #80	; 0x50
 8017104:	e71b      	b.n	8016f3e <__gethex+0x110>
 8017106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017108:	2b00      	cmp	r3, #0
 801710a:	d0e1      	beq.n	80170d0 <__gethex+0x2a2>
 801710c:	e7f2      	b.n	80170f4 <__gethex+0x2c6>
 801710e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017110:	2b00      	cmp	r3, #0
 8017112:	d1dd      	bne.n	80170d0 <__gethex+0x2a2>
 8017114:	e7ee      	b.n	80170f4 <__gethex+0x2c6>
 8017116:	1e67      	subs	r7, r4, #1
 8017118:	f1ba 0f00 	cmp.w	sl, #0
 801711c:	d131      	bne.n	8017182 <__gethex+0x354>
 801711e:	b127      	cbz	r7, 801712a <__gethex+0x2fc>
 8017120:	4639      	mov	r1, r7
 8017122:	4628      	mov	r0, r5
 8017124:	f000 fd7e 	bl	8017c24 <__any_on>
 8017128:	4682      	mov	sl, r0
 801712a:	117a      	asrs	r2, r7, #5
 801712c:	2301      	movs	r3, #1
 801712e:	f007 071f 	and.w	r7, r7, #31
 8017132:	fa03 f707 	lsl.w	r7, r3, r7
 8017136:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801713a:	4621      	mov	r1, r4
 801713c:	421f      	tst	r7, r3
 801713e:	4628      	mov	r0, r5
 8017140:	bf18      	it	ne
 8017142:	f04a 0a02 	orrne.w	sl, sl, #2
 8017146:	1b36      	subs	r6, r6, r4
 8017148:	f7ff fe22 	bl	8016d90 <rshift>
 801714c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017150:	2702      	movs	r7, #2
 8017152:	f1ba 0f00 	cmp.w	sl, #0
 8017156:	d048      	beq.n	80171ea <__gethex+0x3bc>
 8017158:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801715c:	2b02      	cmp	r3, #2
 801715e:	d015      	beq.n	801718c <__gethex+0x35e>
 8017160:	2b03      	cmp	r3, #3
 8017162:	d017      	beq.n	8017194 <__gethex+0x366>
 8017164:	2b01      	cmp	r3, #1
 8017166:	d109      	bne.n	801717c <__gethex+0x34e>
 8017168:	f01a 0f02 	tst.w	sl, #2
 801716c:	d006      	beq.n	801717c <__gethex+0x34e>
 801716e:	f8d9 3000 	ldr.w	r3, [r9]
 8017172:	ea4a 0a03 	orr.w	sl, sl, r3
 8017176:	f01a 0f01 	tst.w	sl, #1
 801717a:	d10e      	bne.n	801719a <__gethex+0x36c>
 801717c:	f047 0710 	orr.w	r7, r7, #16
 8017180:	e033      	b.n	80171ea <__gethex+0x3bc>
 8017182:	f04f 0a01 	mov.w	sl, #1
 8017186:	e7d0      	b.n	801712a <__gethex+0x2fc>
 8017188:	2701      	movs	r7, #1
 801718a:	e7e2      	b.n	8017152 <__gethex+0x324>
 801718c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801718e:	f1c3 0301 	rsb	r3, r3, #1
 8017192:	9315      	str	r3, [sp, #84]	; 0x54
 8017194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017196:	2b00      	cmp	r3, #0
 8017198:	d0f0      	beq.n	801717c <__gethex+0x34e>
 801719a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801719e:	f105 0314 	add.w	r3, r5, #20
 80171a2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80171a6:	eb03 010a 	add.w	r1, r3, sl
 80171aa:	f04f 0c00 	mov.w	ip, #0
 80171ae:	4618      	mov	r0, r3
 80171b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80171b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80171b8:	d01c      	beq.n	80171f4 <__gethex+0x3c6>
 80171ba:	3201      	adds	r2, #1
 80171bc:	6002      	str	r2, [r0, #0]
 80171be:	2f02      	cmp	r7, #2
 80171c0:	f105 0314 	add.w	r3, r5, #20
 80171c4:	d138      	bne.n	8017238 <__gethex+0x40a>
 80171c6:	f8d8 2000 	ldr.w	r2, [r8]
 80171ca:	3a01      	subs	r2, #1
 80171cc:	42b2      	cmp	r2, r6
 80171ce:	d10a      	bne.n	80171e6 <__gethex+0x3b8>
 80171d0:	1171      	asrs	r1, r6, #5
 80171d2:	2201      	movs	r2, #1
 80171d4:	f006 061f 	and.w	r6, r6, #31
 80171d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80171dc:	fa02 f606 	lsl.w	r6, r2, r6
 80171e0:	421e      	tst	r6, r3
 80171e2:	bf18      	it	ne
 80171e4:	4617      	movne	r7, r2
 80171e6:	f047 0720 	orr.w	r7, r7, #32
 80171ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80171ec:	601d      	str	r5, [r3, #0]
 80171ee:	9b06      	ldr	r3, [sp, #24]
 80171f0:	601c      	str	r4, [r3, #0]
 80171f2:	e6a4      	b.n	8016f3e <__gethex+0x110>
 80171f4:	4299      	cmp	r1, r3
 80171f6:	f843 cc04 	str.w	ip, [r3, #-4]
 80171fa:	d8d8      	bhi.n	80171ae <__gethex+0x380>
 80171fc:	68ab      	ldr	r3, [r5, #8]
 80171fe:	4599      	cmp	r9, r3
 8017200:	db12      	blt.n	8017228 <__gethex+0x3fa>
 8017202:	6869      	ldr	r1, [r5, #4]
 8017204:	9802      	ldr	r0, [sp, #8]
 8017206:	3101      	adds	r1, #1
 8017208:	f000 f92f 	bl	801746a <_Balloc>
 801720c:	692a      	ldr	r2, [r5, #16]
 801720e:	3202      	adds	r2, #2
 8017210:	f105 010c 	add.w	r1, r5, #12
 8017214:	4683      	mov	fp, r0
 8017216:	0092      	lsls	r2, r2, #2
 8017218:	300c      	adds	r0, #12
 801721a:	f000 f91b 	bl	8017454 <memcpy>
 801721e:	4629      	mov	r1, r5
 8017220:	9802      	ldr	r0, [sp, #8]
 8017222:	f000 f956 	bl	80174d2 <_Bfree>
 8017226:	465d      	mov	r5, fp
 8017228:	692b      	ldr	r3, [r5, #16]
 801722a:	1c5a      	adds	r2, r3, #1
 801722c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017230:	612a      	str	r2, [r5, #16]
 8017232:	2201      	movs	r2, #1
 8017234:	615a      	str	r2, [r3, #20]
 8017236:	e7c2      	b.n	80171be <__gethex+0x390>
 8017238:	692a      	ldr	r2, [r5, #16]
 801723a:	454a      	cmp	r2, r9
 801723c:	dd0b      	ble.n	8017256 <__gethex+0x428>
 801723e:	2101      	movs	r1, #1
 8017240:	4628      	mov	r0, r5
 8017242:	f7ff fda5 	bl	8016d90 <rshift>
 8017246:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801724a:	3401      	adds	r4, #1
 801724c:	42a3      	cmp	r3, r4
 801724e:	f6ff aed9 	blt.w	8017004 <__gethex+0x1d6>
 8017252:	2701      	movs	r7, #1
 8017254:	e7c7      	b.n	80171e6 <__gethex+0x3b8>
 8017256:	f016 061f 	ands.w	r6, r6, #31
 801725a:	d0fa      	beq.n	8017252 <__gethex+0x424>
 801725c:	449a      	add	sl, r3
 801725e:	f1c6 0620 	rsb	r6, r6, #32
 8017262:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017266:	f000 f9c4 	bl	80175f2 <__hi0bits>
 801726a:	42b0      	cmp	r0, r6
 801726c:	dbe7      	blt.n	801723e <__gethex+0x410>
 801726e:	e7f0      	b.n	8017252 <__gethex+0x424>

08017270 <L_shift>:
 8017270:	f1c2 0208 	rsb	r2, r2, #8
 8017274:	0092      	lsls	r2, r2, #2
 8017276:	b570      	push	{r4, r5, r6, lr}
 8017278:	f1c2 0620 	rsb	r6, r2, #32
 801727c:	6843      	ldr	r3, [r0, #4]
 801727e:	6804      	ldr	r4, [r0, #0]
 8017280:	fa03 f506 	lsl.w	r5, r3, r6
 8017284:	432c      	orrs	r4, r5
 8017286:	40d3      	lsrs	r3, r2
 8017288:	6004      	str	r4, [r0, #0]
 801728a:	f840 3f04 	str.w	r3, [r0, #4]!
 801728e:	4288      	cmp	r0, r1
 8017290:	d3f4      	bcc.n	801727c <L_shift+0xc>
 8017292:	bd70      	pop	{r4, r5, r6, pc}

08017294 <__match>:
 8017294:	b530      	push	{r4, r5, lr}
 8017296:	6803      	ldr	r3, [r0, #0]
 8017298:	3301      	adds	r3, #1
 801729a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801729e:	b914      	cbnz	r4, 80172a6 <__match+0x12>
 80172a0:	6003      	str	r3, [r0, #0]
 80172a2:	2001      	movs	r0, #1
 80172a4:	bd30      	pop	{r4, r5, pc}
 80172a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80172ae:	2d19      	cmp	r5, #25
 80172b0:	bf98      	it	ls
 80172b2:	3220      	addls	r2, #32
 80172b4:	42a2      	cmp	r2, r4
 80172b6:	d0f0      	beq.n	801729a <__match+0x6>
 80172b8:	2000      	movs	r0, #0
 80172ba:	e7f3      	b.n	80172a4 <__match+0x10>

080172bc <__hexnan>:
 80172bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c0:	680b      	ldr	r3, [r1, #0]
 80172c2:	6801      	ldr	r1, [r0, #0]
 80172c4:	115f      	asrs	r7, r3, #5
 80172c6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80172ca:	f013 031f 	ands.w	r3, r3, #31
 80172ce:	b087      	sub	sp, #28
 80172d0:	bf18      	it	ne
 80172d2:	3704      	addne	r7, #4
 80172d4:	2500      	movs	r5, #0
 80172d6:	1f3e      	subs	r6, r7, #4
 80172d8:	4682      	mov	sl, r0
 80172da:	4690      	mov	r8, r2
 80172dc:	9301      	str	r3, [sp, #4]
 80172de:	f847 5c04 	str.w	r5, [r7, #-4]
 80172e2:	46b1      	mov	r9, r6
 80172e4:	4634      	mov	r4, r6
 80172e6:	9502      	str	r5, [sp, #8]
 80172e8:	46ab      	mov	fp, r5
 80172ea:	784a      	ldrb	r2, [r1, #1]
 80172ec:	1c4b      	adds	r3, r1, #1
 80172ee:	9303      	str	r3, [sp, #12]
 80172f0:	b342      	cbz	r2, 8017344 <__hexnan+0x88>
 80172f2:	4610      	mov	r0, r2
 80172f4:	9105      	str	r1, [sp, #20]
 80172f6:	9204      	str	r2, [sp, #16]
 80172f8:	f7ff fd84 	bl	8016e04 <__hexdig_fun>
 80172fc:	2800      	cmp	r0, #0
 80172fe:	d143      	bne.n	8017388 <__hexnan+0xcc>
 8017300:	9a04      	ldr	r2, [sp, #16]
 8017302:	9905      	ldr	r1, [sp, #20]
 8017304:	2a20      	cmp	r2, #32
 8017306:	d818      	bhi.n	801733a <__hexnan+0x7e>
 8017308:	9b02      	ldr	r3, [sp, #8]
 801730a:	459b      	cmp	fp, r3
 801730c:	dd13      	ble.n	8017336 <__hexnan+0x7a>
 801730e:	454c      	cmp	r4, r9
 8017310:	d206      	bcs.n	8017320 <__hexnan+0x64>
 8017312:	2d07      	cmp	r5, #7
 8017314:	dc04      	bgt.n	8017320 <__hexnan+0x64>
 8017316:	462a      	mov	r2, r5
 8017318:	4649      	mov	r1, r9
 801731a:	4620      	mov	r0, r4
 801731c:	f7ff ffa8 	bl	8017270 <L_shift>
 8017320:	4544      	cmp	r4, r8
 8017322:	d944      	bls.n	80173ae <__hexnan+0xf2>
 8017324:	2300      	movs	r3, #0
 8017326:	f1a4 0904 	sub.w	r9, r4, #4
 801732a:	f844 3c04 	str.w	r3, [r4, #-4]
 801732e:	f8cd b008 	str.w	fp, [sp, #8]
 8017332:	464c      	mov	r4, r9
 8017334:	461d      	mov	r5, r3
 8017336:	9903      	ldr	r1, [sp, #12]
 8017338:	e7d7      	b.n	80172ea <__hexnan+0x2e>
 801733a:	2a29      	cmp	r2, #41	; 0x29
 801733c:	d14a      	bne.n	80173d4 <__hexnan+0x118>
 801733e:	3102      	adds	r1, #2
 8017340:	f8ca 1000 	str.w	r1, [sl]
 8017344:	f1bb 0f00 	cmp.w	fp, #0
 8017348:	d044      	beq.n	80173d4 <__hexnan+0x118>
 801734a:	454c      	cmp	r4, r9
 801734c:	d206      	bcs.n	801735c <__hexnan+0xa0>
 801734e:	2d07      	cmp	r5, #7
 8017350:	dc04      	bgt.n	801735c <__hexnan+0xa0>
 8017352:	462a      	mov	r2, r5
 8017354:	4649      	mov	r1, r9
 8017356:	4620      	mov	r0, r4
 8017358:	f7ff ff8a 	bl	8017270 <L_shift>
 801735c:	4544      	cmp	r4, r8
 801735e:	d928      	bls.n	80173b2 <__hexnan+0xf6>
 8017360:	4643      	mov	r3, r8
 8017362:	f854 2b04 	ldr.w	r2, [r4], #4
 8017366:	f843 2b04 	str.w	r2, [r3], #4
 801736a:	42a6      	cmp	r6, r4
 801736c:	d2f9      	bcs.n	8017362 <__hexnan+0xa6>
 801736e:	2200      	movs	r2, #0
 8017370:	f843 2b04 	str.w	r2, [r3], #4
 8017374:	429e      	cmp	r6, r3
 8017376:	d2fb      	bcs.n	8017370 <__hexnan+0xb4>
 8017378:	6833      	ldr	r3, [r6, #0]
 801737a:	b91b      	cbnz	r3, 8017384 <__hexnan+0xc8>
 801737c:	4546      	cmp	r6, r8
 801737e:	d127      	bne.n	80173d0 <__hexnan+0x114>
 8017380:	2301      	movs	r3, #1
 8017382:	6033      	str	r3, [r6, #0]
 8017384:	2005      	movs	r0, #5
 8017386:	e026      	b.n	80173d6 <__hexnan+0x11a>
 8017388:	3501      	adds	r5, #1
 801738a:	2d08      	cmp	r5, #8
 801738c:	f10b 0b01 	add.w	fp, fp, #1
 8017390:	dd06      	ble.n	80173a0 <__hexnan+0xe4>
 8017392:	4544      	cmp	r4, r8
 8017394:	d9cf      	bls.n	8017336 <__hexnan+0x7a>
 8017396:	2300      	movs	r3, #0
 8017398:	f844 3c04 	str.w	r3, [r4, #-4]
 801739c:	2501      	movs	r5, #1
 801739e:	3c04      	subs	r4, #4
 80173a0:	6822      	ldr	r2, [r4, #0]
 80173a2:	f000 000f 	and.w	r0, r0, #15
 80173a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80173aa:	6020      	str	r0, [r4, #0]
 80173ac:	e7c3      	b.n	8017336 <__hexnan+0x7a>
 80173ae:	2508      	movs	r5, #8
 80173b0:	e7c1      	b.n	8017336 <__hexnan+0x7a>
 80173b2:	9b01      	ldr	r3, [sp, #4]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d0df      	beq.n	8017378 <__hexnan+0xbc>
 80173b8:	f04f 32ff 	mov.w	r2, #4294967295
 80173bc:	f1c3 0320 	rsb	r3, r3, #32
 80173c0:	fa22 f303 	lsr.w	r3, r2, r3
 80173c4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80173c8:	401a      	ands	r2, r3
 80173ca:	f847 2c04 	str.w	r2, [r7, #-4]
 80173ce:	e7d3      	b.n	8017378 <__hexnan+0xbc>
 80173d0:	3e04      	subs	r6, #4
 80173d2:	e7d1      	b.n	8017378 <__hexnan+0xbc>
 80173d4:	2004      	movs	r0, #4
 80173d6:	b007      	add	sp, #28
 80173d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080173dc <__locale_ctype_ptr_l>:
 80173dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80173e0:	4770      	bx	lr
	...

080173e4 <__locale_ctype_ptr>:
 80173e4:	4b04      	ldr	r3, [pc, #16]	; (80173f8 <__locale_ctype_ptr+0x14>)
 80173e6:	4a05      	ldr	r2, [pc, #20]	; (80173fc <__locale_ctype_ptr+0x18>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	6a1b      	ldr	r3, [r3, #32]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	bf08      	it	eq
 80173f0:	4613      	moveq	r3, r2
 80173f2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80173f6:	4770      	bx	lr
 80173f8:	2000000c 	.word	0x2000000c
 80173fc:	20000070 	.word	0x20000070

08017400 <__localeconv_l>:
 8017400:	30f0      	adds	r0, #240	; 0xf0
 8017402:	4770      	bx	lr

08017404 <_localeconv_r>:
 8017404:	4b04      	ldr	r3, [pc, #16]	; (8017418 <_localeconv_r+0x14>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	6a18      	ldr	r0, [r3, #32]
 801740a:	4b04      	ldr	r3, [pc, #16]	; (801741c <_localeconv_r+0x18>)
 801740c:	2800      	cmp	r0, #0
 801740e:	bf08      	it	eq
 8017410:	4618      	moveq	r0, r3
 8017412:	30f0      	adds	r0, #240	; 0xf0
 8017414:	4770      	bx	lr
 8017416:	bf00      	nop
 8017418:	2000000c 	.word	0x2000000c
 801741c:	20000070 	.word	0x20000070

08017420 <malloc>:
 8017420:	4b02      	ldr	r3, [pc, #8]	; (801742c <malloc+0xc>)
 8017422:	4601      	mov	r1, r0
 8017424:	6818      	ldr	r0, [r3, #0]
 8017426:	f000 bc7b 	b.w	8017d20 <_malloc_r>
 801742a:	bf00      	nop
 801742c:	2000000c 	.word	0x2000000c

08017430 <__ascii_mbtowc>:
 8017430:	b082      	sub	sp, #8
 8017432:	b901      	cbnz	r1, 8017436 <__ascii_mbtowc+0x6>
 8017434:	a901      	add	r1, sp, #4
 8017436:	b142      	cbz	r2, 801744a <__ascii_mbtowc+0x1a>
 8017438:	b14b      	cbz	r3, 801744e <__ascii_mbtowc+0x1e>
 801743a:	7813      	ldrb	r3, [r2, #0]
 801743c:	600b      	str	r3, [r1, #0]
 801743e:	7812      	ldrb	r2, [r2, #0]
 8017440:	1c10      	adds	r0, r2, #0
 8017442:	bf18      	it	ne
 8017444:	2001      	movne	r0, #1
 8017446:	b002      	add	sp, #8
 8017448:	4770      	bx	lr
 801744a:	4610      	mov	r0, r2
 801744c:	e7fb      	b.n	8017446 <__ascii_mbtowc+0x16>
 801744e:	f06f 0001 	mvn.w	r0, #1
 8017452:	e7f8      	b.n	8017446 <__ascii_mbtowc+0x16>

08017454 <memcpy>:
 8017454:	b510      	push	{r4, lr}
 8017456:	1e43      	subs	r3, r0, #1
 8017458:	440a      	add	r2, r1
 801745a:	4291      	cmp	r1, r2
 801745c:	d100      	bne.n	8017460 <memcpy+0xc>
 801745e:	bd10      	pop	{r4, pc}
 8017460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017468:	e7f7      	b.n	801745a <memcpy+0x6>

0801746a <_Balloc>:
 801746a:	b570      	push	{r4, r5, r6, lr}
 801746c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801746e:	4604      	mov	r4, r0
 8017470:	460e      	mov	r6, r1
 8017472:	b93d      	cbnz	r5, 8017484 <_Balloc+0x1a>
 8017474:	2010      	movs	r0, #16
 8017476:	f7ff ffd3 	bl	8017420 <malloc>
 801747a:	6260      	str	r0, [r4, #36]	; 0x24
 801747c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017480:	6005      	str	r5, [r0, #0]
 8017482:	60c5      	str	r5, [r0, #12]
 8017484:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017486:	68eb      	ldr	r3, [r5, #12]
 8017488:	b183      	cbz	r3, 80174ac <_Balloc+0x42>
 801748a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801748c:	68db      	ldr	r3, [r3, #12]
 801748e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017492:	b9b8      	cbnz	r0, 80174c4 <_Balloc+0x5a>
 8017494:	2101      	movs	r1, #1
 8017496:	fa01 f506 	lsl.w	r5, r1, r6
 801749a:	1d6a      	adds	r2, r5, #5
 801749c:	0092      	lsls	r2, r2, #2
 801749e:	4620      	mov	r0, r4
 80174a0:	f000 fbe1 	bl	8017c66 <_calloc_r>
 80174a4:	b160      	cbz	r0, 80174c0 <_Balloc+0x56>
 80174a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80174aa:	e00e      	b.n	80174ca <_Balloc+0x60>
 80174ac:	2221      	movs	r2, #33	; 0x21
 80174ae:	2104      	movs	r1, #4
 80174b0:	4620      	mov	r0, r4
 80174b2:	f000 fbd8 	bl	8017c66 <_calloc_r>
 80174b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174b8:	60e8      	str	r0, [r5, #12]
 80174ba:	68db      	ldr	r3, [r3, #12]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d1e4      	bne.n	801748a <_Balloc+0x20>
 80174c0:	2000      	movs	r0, #0
 80174c2:	bd70      	pop	{r4, r5, r6, pc}
 80174c4:	6802      	ldr	r2, [r0, #0]
 80174c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80174ca:	2300      	movs	r3, #0
 80174cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80174d0:	e7f7      	b.n	80174c2 <_Balloc+0x58>

080174d2 <_Bfree>:
 80174d2:	b570      	push	{r4, r5, r6, lr}
 80174d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80174d6:	4606      	mov	r6, r0
 80174d8:	460d      	mov	r5, r1
 80174da:	b93c      	cbnz	r4, 80174ec <_Bfree+0x1a>
 80174dc:	2010      	movs	r0, #16
 80174de:	f7ff ff9f 	bl	8017420 <malloc>
 80174e2:	6270      	str	r0, [r6, #36]	; 0x24
 80174e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80174e8:	6004      	str	r4, [r0, #0]
 80174ea:	60c4      	str	r4, [r0, #12]
 80174ec:	b13d      	cbz	r5, 80174fe <_Bfree+0x2c>
 80174ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80174f0:	686a      	ldr	r2, [r5, #4]
 80174f2:	68db      	ldr	r3, [r3, #12]
 80174f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80174f8:	6029      	str	r1, [r5, #0]
 80174fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80174fe:	bd70      	pop	{r4, r5, r6, pc}

08017500 <__multadd>:
 8017500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017504:	690d      	ldr	r5, [r1, #16]
 8017506:	461f      	mov	r7, r3
 8017508:	4606      	mov	r6, r0
 801750a:	460c      	mov	r4, r1
 801750c:	f101 0c14 	add.w	ip, r1, #20
 8017510:	2300      	movs	r3, #0
 8017512:	f8dc 0000 	ldr.w	r0, [ip]
 8017516:	b281      	uxth	r1, r0
 8017518:	fb02 7101 	mla	r1, r2, r1, r7
 801751c:	0c0f      	lsrs	r7, r1, #16
 801751e:	0c00      	lsrs	r0, r0, #16
 8017520:	fb02 7000 	mla	r0, r2, r0, r7
 8017524:	b289      	uxth	r1, r1
 8017526:	3301      	adds	r3, #1
 8017528:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801752c:	429d      	cmp	r5, r3
 801752e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017532:	f84c 1b04 	str.w	r1, [ip], #4
 8017536:	dcec      	bgt.n	8017512 <__multadd+0x12>
 8017538:	b1d7      	cbz	r7, 8017570 <__multadd+0x70>
 801753a:	68a3      	ldr	r3, [r4, #8]
 801753c:	42ab      	cmp	r3, r5
 801753e:	dc12      	bgt.n	8017566 <__multadd+0x66>
 8017540:	6861      	ldr	r1, [r4, #4]
 8017542:	4630      	mov	r0, r6
 8017544:	3101      	adds	r1, #1
 8017546:	f7ff ff90 	bl	801746a <_Balloc>
 801754a:	6922      	ldr	r2, [r4, #16]
 801754c:	3202      	adds	r2, #2
 801754e:	f104 010c 	add.w	r1, r4, #12
 8017552:	4680      	mov	r8, r0
 8017554:	0092      	lsls	r2, r2, #2
 8017556:	300c      	adds	r0, #12
 8017558:	f7ff ff7c 	bl	8017454 <memcpy>
 801755c:	4621      	mov	r1, r4
 801755e:	4630      	mov	r0, r6
 8017560:	f7ff ffb7 	bl	80174d2 <_Bfree>
 8017564:	4644      	mov	r4, r8
 8017566:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801756a:	3501      	adds	r5, #1
 801756c:	615f      	str	r7, [r3, #20]
 801756e:	6125      	str	r5, [r4, #16]
 8017570:	4620      	mov	r0, r4
 8017572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017576 <__s2b>:
 8017576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801757a:	460c      	mov	r4, r1
 801757c:	4615      	mov	r5, r2
 801757e:	461f      	mov	r7, r3
 8017580:	2209      	movs	r2, #9
 8017582:	3308      	adds	r3, #8
 8017584:	4606      	mov	r6, r0
 8017586:	fb93 f3f2 	sdiv	r3, r3, r2
 801758a:	2100      	movs	r1, #0
 801758c:	2201      	movs	r2, #1
 801758e:	429a      	cmp	r2, r3
 8017590:	db20      	blt.n	80175d4 <__s2b+0x5e>
 8017592:	4630      	mov	r0, r6
 8017594:	f7ff ff69 	bl	801746a <_Balloc>
 8017598:	9b08      	ldr	r3, [sp, #32]
 801759a:	6143      	str	r3, [r0, #20]
 801759c:	2d09      	cmp	r5, #9
 801759e:	f04f 0301 	mov.w	r3, #1
 80175a2:	6103      	str	r3, [r0, #16]
 80175a4:	dd19      	ble.n	80175da <__s2b+0x64>
 80175a6:	f104 0809 	add.w	r8, r4, #9
 80175aa:	46c1      	mov	r9, r8
 80175ac:	442c      	add	r4, r5
 80175ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 80175b2:	4601      	mov	r1, r0
 80175b4:	3b30      	subs	r3, #48	; 0x30
 80175b6:	220a      	movs	r2, #10
 80175b8:	4630      	mov	r0, r6
 80175ba:	f7ff ffa1 	bl	8017500 <__multadd>
 80175be:	45a1      	cmp	r9, r4
 80175c0:	d1f5      	bne.n	80175ae <__s2b+0x38>
 80175c2:	eb08 0405 	add.w	r4, r8, r5
 80175c6:	3c08      	subs	r4, #8
 80175c8:	1b2d      	subs	r5, r5, r4
 80175ca:	1963      	adds	r3, r4, r5
 80175cc:	42bb      	cmp	r3, r7
 80175ce:	db07      	blt.n	80175e0 <__s2b+0x6a>
 80175d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175d4:	0052      	lsls	r2, r2, #1
 80175d6:	3101      	adds	r1, #1
 80175d8:	e7d9      	b.n	801758e <__s2b+0x18>
 80175da:	340a      	adds	r4, #10
 80175dc:	2509      	movs	r5, #9
 80175de:	e7f3      	b.n	80175c8 <__s2b+0x52>
 80175e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80175e4:	4601      	mov	r1, r0
 80175e6:	3b30      	subs	r3, #48	; 0x30
 80175e8:	220a      	movs	r2, #10
 80175ea:	4630      	mov	r0, r6
 80175ec:	f7ff ff88 	bl	8017500 <__multadd>
 80175f0:	e7eb      	b.n	80175ca <__s2b+0x54>

080175f2 <__hi0bits>:
 80175f2:	0c02      	lsrs	r2, r0, #16
 80175f4:	0412      	lsls	r2, r2, #16
 80175f6:	4603      	mov	r3, r0
 80175f8:	b9b2      	cbnz	r2, 8017628 <__hi0bits+0x36>
 80175fa:	0403      	lsls	r3, r0, #16
 80175fc:	2010      	movs	r0, #16
 80175fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017602:	bf04      	itt	eq
 8017604:	021b      	lsleq	r3, r3, #8
 8017606:	3008      	addeq	r0, #8
 8017608:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801760c:	bf04      	itt	eq
 801760e:	011b      	lsleq	r3, r3, #4
 8017610:	3004      	addeq	r0, #4
 8017612:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017616:	bf04      	itt	eq
 8017618:	009b      	lsleq	r3, r3, #2
 801761a:	3002      	addeq	r0, #2
 801761c:	2b00      	cmp	r3, #0
 801761e:	db06      	blt.n	801762e <__hi0bits+0x3c>
 8017620:	005b      	lsls	r3, r3, #1
 8017622:	d503      	bpl.n	801762c <__hi0bits+0x3a>
 8017624:	3001      	adds	r0, #1
 8017626:	4770      	bx	lr
 8017628:	2000      	movs	r0, #0
 801762a:	e7e8      	b.n	80175fe <__hi0bits+0xc>
 801762c:	2020      	movs	r0, #32
 801762e:	4770      	bx	lr

08017630 <__lo0bits>:
 8017630:	6803      	ldr	r3, [r0, #0]
 8017632:	f013 0207 	ands.w	r2, r3, #7
 8017636:	4601      	mov	r1, r0
 8017638:	d00b      	beq.n	8017652 <__lo0bits+0x22>
 801763a:	07da      	lsls	r2, r3, #31
 801763c:	d423      	bmi.n	8017686 <__lo0bits+0x56>
 801763e:	0798      	lsls	r0, r3, #30
 8017640:	bf49      	itett	mi
 8017642:	085b      	lsrmi	r3, r3, #1
 8017644:	089b      	lsrpl	r3, r3, #2
 8017646:	2001      	movmi	r0, #1
 8017648:	600b      	strmi	r3, [r1, #0]
 801764a:	bf5c      	itt	pl
 801764c:	600b      	strpl	r3, [r1, #0]
 801764e:	2002      	movpl	r0, #2
 8017650:	4770      	bx	lr
 8017652:	b298      	uxth	r0, r3
 8017654:	b9a8      	cbnz	r0, 8017682 <__lo0bits+0x52>
 8017656:	0c1b      	lsrs	r3, r3, #16
 8017658:	2010      	movs	r0, #16
 801765a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801765e:	bf04      	itt	eq
 8017660:	0a1b      	lsreq	r3, r3, #8
 8017662:	3008      	addeq	r0, #8
 8017664:	071a      	lsls	r2, r3, #28
 8017666:	bf04      	itt	eq
 8017668:	091b      	lsreq	r3, r3, #4
 801766a:	3004      	addeq	r0, #4
 801766c:	079a      	lsls	r2, r3, #30
 801766e:	bf04      	itt	eq
 8017670:	089b      	lsreq	r3, r3, #2
 8017672:	3002      	addeq	r0, #2
 8017674:	07da      	lsls	r2, r3, #31
 8017676:	d402      	bmi.n	801767e <__lo0bits+0x4e>
 8017678:	085b      	lsrs	r3, r3, #1
 801767a:	d006      	beq.n	801768a <__lo0bits+0x5a>
 801767c:	3001      	adds	r0, #1
 801767e:	600b      	str	r3, [r1, #0]
 8017680:	4770      	bx	lr
 8017682:	4610      	mov	r0, r2
 8017684:	e7e9      	b.n	801765a <__lo0bits+0x2a>
 8017686:	2000      	movs	r0, #0
 8017688:	4770      	bx	lr
 801768a:	2020      	movs	r0, #32
 801768c:	4770      	bx	lr

0801768e <__i2b>:
 801768e:	b510      	push	{r4, lr}
 8017690:	460c      	mov	r4, r1
 8017692:	2101      	movs	r1, #1
 8017694:	f7ff fee9 	bl	801746a <_Balloc>
 8017698:	2201      	movs	r2, #1
 801769a:	6144      	str	r4, [r0, #20]
 801769c:	6102      	str	r2, [r0, #16]
 801769e:	bd10      	pop	{r4, pc}

080176a0 <__multiply>:
 80176a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176a4:	4614      	mov	r4, r2
 80176a6:	690a      	ldr	r2, [r1, #16]
 80176a8:	6923      	ldr	r3, [r4, #16]
 80176aa:	429a      	cmp	r2, r3
 80176ac:	bfb8      	it	lt
 80176ae:	460b      	movlt	r3, r1
 80176b0:	4688      	mov	r8, r1
 80176b2:	bfbc      	itt	lt
 80176b4:	46a0      	movlt	r8, r4
 80176b6:	461c      	movlt	r4, r3
 80176b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80176bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80176c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80176c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80176c8:	eb07 0609 	add.w	r6, r7, r9
 80176cc:	42b3      	cmp	r3, r6
 80176ce:	bfb8      	it	lt
 80176d0:	3101      	addlt	r1, #1
 80176d2:	f7ff feca 	bl	801746a <_Balloc>
 80176d6:	f100 0514 	add.w	r5, r0, #20
 80176da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80176de:	462b      	mov	r3, r5
 80176e0:	2200      	movs	r2, #0
 80176e2:	4573      	cmp	r3, lr
 80176e4:	d316      	bcc.n	8017714 <__multiply+0x74>
 80176e6:	f104 0214 	add.w	r2, r4, #20
 80176ea:	f108 0114 	add.w	r1, r8, #20
 80176ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80176f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80176f6:	9300      	str	r3, [sp, #0]
 80176f8:	9b00      	ldr	r3, [sp, #0]
 80176fa:	9201      	str	r2, [sp, #4]
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d80c      	bhi.n	801771a <__multiply+0x7a>
 8017700:	2e00      	cmp	r6, #0
 8017702:	dd03      	ble.n	801770c <__multiply+0x6c>
 8017704:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017708:	2b00      	cmp	r3, #0
 801770a:	d05d      	beq.n	80177c8 <__multiply+0x128>
 801770c:	6106      	str	r6, [r0, #16]
 801770e:	b003      	add	sp, #12
 8017710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017714:	f843 2b04 	str.w	r2, [r3], #4
 8017718:	e7e3      	b.n	80176e2 <__multiply+0x42>
 801771a:	f8b2 b000 	ldrh.w	fp, [r2]
 801771e:	f1bb 0f00 	cmp.w	fp, #0
 8017722:	d023      	beq.n	801776c <__multiply+0xcc>
 8017724:	4689      	mov	r9, r1
 8017726:	46ac      	mov	ip, r5
 8017728:	f04f 0800 	mov.w	r8, #0
 801772c:	f859 4b04 	ldr.w	r4, [r9], #4
 8017730:	f8dc a000 	ldr.w	sl, [ip]
 8017734:	b2a3      	uxth	r3, r4
 8017736:	fa1f fa8a 	uxth.w	sl, sl
 801773a:	fb0b a303 	mla	r3, fp, r3, sl
 801773e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017742:	f8dc 4000 	ldr.w	r4, [ip]
 8017746:	4443      	add	r3, r8
 8017748:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801774c:	fb0b 840a 	mla	r4, fp, sl, r8
 8017750:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017754:	46e2      	mov	sl, ip
 8017756:	b29b      	uxth	r3, r3
 8017758:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801775c:	454f      	cmp	r7, r9
 801775e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017762:	f84a 3b04 	str.w	r3, [sl], #4
 8017766:	d82b      	bhi.n	80177c0 <__multiply+0x120>
 8017768:	f8cc 8004 	str.w	r8, [ip, #4]
 801776c:	9b01      	ldr	r3, [sp, #4]
 801776e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017772:	3204      	adds	r2, #4
 8017774:	f1ba 0f00 	cmp.w	sl, #0
 8017778:	d020      	beq.n	80177bc <__multiply+0x11c>
 801777a:	682b      	ldr	r3, [r5, #0]
 801777c:	4689      	mov	r9, r1
 801777e:	46a8      	mov	r8, r5
 8017780:	f04f 0b00 	mov.w	fp, #0
 8017784:	f8b9 c000 	ldrh.w	ip, [r9]
 8017788:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801778c:	fb0a 440c 	mla	r4, sl, ip, r4
 8017790:	445c      	add	r4, fp
 8017792:	46c4      	mov	ip, r8
 8017794:	b29b      	uxth	r3, r3
 8017796:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801779a:	f84c 3b04 	str.w	r3, [ip], #4
 801779e:	f859 3b04 	ldr.w	r3, [r9], #4
 80177a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80177a6:	0c1b      	lsrs	r3, r3, #16
 80177a8:	fb0a b303 	mla	r3, sl, r3, fp
 80177ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80177b0:	454f      	cmp	r7, r9
 80177b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80177b6:	d805      	bhi.n	80177c4 <__multiply+0x124>
 80177b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80177bc:	3504      	adds	r5, #4
 80177be:	e79b      	b.n	80176f8 <__multiply+0x58>
 80177c0:	46d4      	mov	ip, sl
 80177c2:	e7b3      	b.n	801772c <__multiply+0x8c>
 80177c4:	46e0      	mov	r8, ip
 80177c6:	e7dd      	b.n	8017784 <__multiply+0xe4>
 80177c8:	3e01      	subs	r6, #1
 80177ca:	e799      	b.n	8017700 <__multiply+0x60>

080177cc <__pow5mult>:
 80177cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177d0:	4615      	mov	r5, r2
 80177d2:	f012 0203 	ands.w	r2, r2, #3
 80177d6:	4606      	mov	r6, r0
 80177d8:	460f      	mov	r7, r1
 80177da:	d007      	beq.n	80177ec <__pow5mult+0x20>
 80177dc:	3a01      	subs	r2, #1
 80177de:	4c21      	ldr	r4, [pc, #132]	; (8017864 <__pow5mult+0x98>)
 80177e0:	2300      	movs	r3, #0
 80177e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80177e6:	f7ff fe8b 	bl	8017500 <__multadd>
 80177ea:	4607      	mov	r7, r0
 80177ec:	10ad      	asrs	r5, r5, #2
 80177ee:	d035      	beq.n	801785c <__pow5mult+0x90>
 80177f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80177f2:	b93c      	cbnz	r4, 8017804 <__pow5mult+0x38>
 80177f4:	2010      	movs	r0, #16
 80177f6:	f7ff fe13 	bl	8017420 <malloc>
 80177fa:	6270      	str	r0, [r6, #36]	; 0x24
 80177fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017800:	6004      	str	r4, [r0, #0]
 8017802:	60c4      	str	r4, [r0, #12]
 8017804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801780c:	b94c      	cbnz	r4, 8017822 <__pow5mult+0x56>
 801780e:	f240 2171 	movw	r1, #625	; 0x271
 8017812:	4630      	mov	r0, r6
 8017814:	f7ff ff3b 	bl	801768e <__i2b>
 8017818:	2300      	movs	r3, #0
 801781a:	f8c8 0008 	str.w	r0, [r8, #8]
 801781e:	4604      	mov	r4, r0
 8017820:	6003      	str	r3, [r0, #0]
 8017822:	f04f 0800 	mov.w	r8, #0
 8017826:	07eb      	lsls	r3, r5, #31
 8017828:	d50a      	bpl.n	8017840 <__pow5mult+0x74>
 801782a:	4639      	mov	r1, r7
 801782c:	4622      	mov	r2, r4
 801782e:	4630      	mov	r0, r6
 8017830:	f7ff ff36 	bl	80176a0 <__multiply>
 8017834:	4639      	mov	r1, r7
 8017836:	4681      	mov	r9, r0
 8017838:	4630      	mov	r0, r6
 801783a:	f7ff fe4a 	bl	80174d2 <_Bfree>
 801783e:	464f      	mov	r7, r9
 8017840:	106d      	asrs	r5, r5, #1
 8017842:	d00b      	beq.n	801785c <__pow5mult+0x90>
 8017844:	6820      	ldr	r0, [r4, #0]
 8017846:	b938      	cbnz	r0, 8017858 <__pow5mult+0x8c>
 8017848:	4622      	mov	r2, r4
 801784a:	4621      	mov	r1, r4
 801784c:	4630      	mov	r0, r6
 801784e:	f7ff ff27 	bl	80176a0 <__multiply>
 8017852:	6020      	str	r0, [r4, #0]
 8017854:	f8c0 8000 	str.w	r8, [r0]
 8017858:	4604      	mov	r4, r0
 801785a:	e7e4      	b.n	8017826 <__pow5mult+0x5a>
 801785c:	4638      	mov	r0, r7
 801785e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017862:	bf00      	nop
 8017864:	08019010 	.word	0x08019010

08017868 <__lshift>:
 8017868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801786c:	460c      	mov	r4, r1
 801786e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017872:	6923      	ldr	r3, [r4, #16]
 8017874:	6849      	ldr	r1, [r1, #4]
 8017876:	eb0a 0903 	add.w	r9, sl, r3
 801787a:	68a3      	ldr	r3, [r4, #8]
 801787c:	4607      	mov	r7, r0
 801787e:	4616      	mov	r6, r2
 8017880:	f109 0501 	add.w	r5, r9, #1
 8017884:	42ab      	cmp	r3, r5
 8017886:	db32      	blt.n	80178ee <__lshift+0x86>
 8017888:	4638      	mov	r0, r7
 801788a:	f7ff fdee 	bl	801746a <_Balloc>
 801788e:	2300      	movs	r3, #0
 8017890:	4680      	mov	r8, r0
 8017892:	f100 0114 	add.w	r1, r0, #20
 8017896:	461a      	mov	r2, r3
 8017898:	4553      	cmp	r3, sl
 801789a:	db2b      	blt.n	80178f4 <__lshift+0x8c>
 801789c:	6920      	ldr	r0, [r4, #16]
 801789e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80178a2:	f104 0314 	add.w	r3, r4, #20
 80178a6:	f016 021f 	ands.w	r2, r6, #31
 80178aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80178ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80178b2:	d025      	beq.n	8017900 <__lshift+0x98>
 80178b4:	f1c2 0e20 	rsb	lr, r2, #32
 80178b8:	2000      	movs	r0, #0
 80178ba:	681e      	ldr	r6, [r3, #0]
 80178bc:	468a      	mov	sl, r1
 80178be:	4096      	lsls	r6, r2
 80178c0:	4330      	orrs	r0, r6
 80178c2:	f84a 0b04 	str.w	r0, [sl], #4
 80178c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80178ca:	459c      	cmp	ip, r3
 80178cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80178d0:	d814      	bhi.n	80178fc <__lshift+0x94>
 80178d2:	6048      	str	r0, [r1, #4]
 80178d4:	b108      	cbz	r0, 80178da <__lshift+0x72>
 80178d6:	f109 0502 	add.w	r5, r9, #2
 80178da:	3d01      	subs	r5, #1
 80178dc:	4638      	mov	r0, r7
 80178de:	f8c8 5010 	str.w	r5, [r8, #16]
 80178e2:	4621      	mov	r1, r4
 80178e4:	f7ff fdf5 	bl	80174d2 <_Bfree>
 80178e8:	4640      	mov	r0, r8
 80178ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178ee:	3101      	adds	r1, #1
 80178f0:	005b      	lsls	r3, r3, #1
 80178f2:	e7c7      	b.n	8017884 <__lshift+0x1c>
 80178f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80178f8:	3301      	adds	r3, #1
 80178fa:	e7cd      	b.n	8017898 <__lshift+0x30>
 80178fc:	4651      	mov	r1, sl
 80178fe:	e7dc      	b.n	80178ba <__lshift+0x52>
 8017900:	3904      	subs	r1, #4
 8017902:	f853 2b04 	ldr.w	r2, [r3], #4
 8017906:	f841 2f04 	str.w	r2, [r1, #4]!
 801790a:	459c      	cmp	ip, r3
 801790c:	d8f9      	bhi.n	8017902 <__lshift+0x9a>
 801790e:	e7e4      	b.n	80178da <__lshift+0x72>

08017910 <__mcmp>:
 8017910:	6903      	ldr	r3, [r0, #16]
 8017912:	690a      	ldr	r2, [r1, #16]
 8017914:	1a9b      	subs	r3, r3, r2
 8017916:	b530      	push	{r4, r5, lr}
 8017918:	d10c      	bne.n	8017934 <__mcmp+0x24>
 801791a:	0092      	lsls	r2, r2, #2
 801791c:	3014      	adds	r0, #20
 801791e:	3114      	adds	r1, #20
 8017920:	1884      	adds	r4, r0, r2
 8017922:	4411      	add	r1, r2
 8017924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801792c:	4295      	cmp	r5, r2
 801792e:	d003      	beq.n	8017938 <__mcmp+0x28>
 8017930:	d305      	bcc.n	801793e <__mcmp+0x2e>
 8017932:	2301      	movs	r3, #1
 8017934:	4618      	mov	r0, r3
 8017936:	bd30      	pop	{r4, r5, pc}
 8017938:	42a0      	cmp	r0, r4
 801793a:	d3f3      	bcc.n	8017924 <__mcmp+0x14>
 801793c:	e7fa      	b.n	8017934 <__mcmp+0x24>
 801793e:	f04f 33ff 	mov.w	r3, #4294967295
 8017942:	e7f7      	b.n	8017934 <__mcmp+0x24>

08017944 <__mdiff>:
 8017944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017948:	460d      	mov	r5, r1
 801794a:	4607      	mov	r7, r0
 801794c:	4611      	mov	r1, r2
 801794e:	4628      	mov	r0, r5
 8017950:	4614      	mov	r4, r2
 8017952:	f7ff ffdd 	bl	8017910 <__mcmp>
 8017956:	1e06      	subs	r6, r0, #0
 8017958:	d108      	bne.n	801796c <__mdiff+0x28>
 801795a:	4631      	mov	r1, r6
 801795c:	4638      	mov	r0, r7
 801795e:	f7ff fd84 	bl	801746a <_Balloc>
 8017962:	2301      	movs	r3, #1
 8017964:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801796c:	bfa4      	itt	ge
 801796e:	4623      	movge	r3, r4
 8017970:	462c      	movge	r4, r5
 8017972:	4638      	mov	r0, r7
 8017974:	6861      	ldr	r1, [r4, #4]
 8017976:	bfa6      	itte	ge
 8017978:	461d      	movge	r5, r3
 801797a:	2600      	movge	r6, #0
 801797c:	2601      	movlt	r6, #1
 801797e:	f7ff fd74 	bl	801746a <_Balloc>
 8017982:	692b      	ldr	r3, [r5, #16]
 8017984:	60c6      	str	r6, [r0, #12]
 8017986:	6926      	ldr	r6, [r4, #16]
 8017988:	f105 0914 	add.w	r9, r5, #20
 801798c:	f104 0214 	add.w	r2, r4, #20
 8017990:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017994:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017998:	f100 0514 	add.w	r5, r0, #20
 801799c:	f04f 0e00 	mov.w	lr, #0
 80179a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80179a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80179a8:	fa1e f18a 	uxtah	r1, lr, sl
 80179ac:	b2a3      	uxth	r3, r4
 80179ae:	1ac9      	subs	r1, r1, r3
 80179b0:	0c23      	lsrs	r3, r4, #16
 80179b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80179b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80179ba:	b289      	uxth	r1, r1
 80179bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80179c0:	45c8      	cmp	r8, r9
 80179c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80179c6:	4694      	mov	ip, r2
 80179c8:	f845 3b04 	str.w	r3, [r5], #4
 80179cc:	d8e8      	bhi.n	80179a0 <__mdiff+0x5c>
 80179ce:	45bc      	cmp	ip, r7
 80179d0:	d304      	bcc.n	80179dc <__mdiff+0x98>
 80179d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80179d6:	b183      	cbz	r3, 80179fa <__mdiff+0xb6>
 80179d8:	6106      	str	r6, [r0, #16]
 80179da:	e7c5      	b.n	8017968 <__mdiff+0x24>
 80179dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80179e0:	fa1e f381 	uxtah	r3, lr, r1
 80179e4:	141a      	asrs	r2, r3, #16
 80179e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80179ea:	b29b      	uxth	r3, r3
 80179ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80179f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80179f4:	f845 3b04 	str.w	r3, [r5], #4
 80179f8:	e7e9      	b.n	80179ce <__mdiff+0x8a>
 80179fa:	3e01      	subs	r6, #1
 80179fc:	e7e9      	b.n	80179d2 <__mdiff+0x8e>
	...

08017a00 <__ulp>:
 8017a00:	4b12      	ldr	r3, [pc, #72]	; (8017a4c <__ulp+0x4c>)
 8017a02:	ee10 2a90 	vmov	r2, s1
 8017a06:	401a      	ands	r2, r3
 8017a08:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	dd04      	ble.n	8017a1a <__ulp+0x1a>
 8017a10:	2000      	movs	r0, #0
 8017a12:	4619      	mov	r1, r3
 8017a14:	ec41 0b10 	vmov	d0, r0, r1
 8017a18:	4770      	bx	lr
 8017a1a:	425b      	negs	r3, r3
 8017a1c:	151b      	asrs	r3, r3, #20
 8017a1e:	2b13      	cmp	r3, #19
 8017a20:	f04f 0000 	mov.w	r0, #0
 8017a24:	f04f 0100 	mov.w	r1, #0
 8017a28:	dc04      	bgt.n	8017a34 <__ulp+0x34>
 8017a2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017a2e:	fa42 f103 	asr.w	r1, r2, r3
 8017a32:	e7ef      	b.n	8017a14 <__ulp+0x14>
 8017a34:	3b14      	subs	r3, #20
 8017a36:	2b1e      	cmp	r3, #30
 8017a38:	f04f 0201 	mov.w	r2, #1
 8017a3c:	bfda      	itte	le
 8017a3e:	f1c3 031f 	rsble	r3, r3, #31
 8017a42:	fa02 f303 	lslle.w	r3, r2, r3
 8017a46:	4613      	movgt	r3, r2
 8017a48:	4618      	mov	r0, r3
 8017a4a:	e7e3      	b.n	8017a14 <__ulp+0x14>
 8017a4c:	7ff00000 	.word	0x7ff00000

08017a50 <__b2d>:
 8017a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a52:	6905      	ldr	r5, [r0, #16]
 8017a54:	f100 0714 	add.w	r7, r0, #20
 8017a58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017a5c:	1f2e      	subs	r6, r5, #4
 8017a5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017a62:	4620      	mov	r0, r4
 8017a64:	f7ff fdc5 	bl	80175f2 <__hi0bits>
 8017a68:	f1c0 0320 	rsb	r3, r0, #32
 8017a6c:	280a      	cmp	r0, #10
 8017a6e:	600b      	str	r3, [r1, #0]
 8017a70:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017ae8 <__b2d+0x98>
 8017a74:	dc14      	bgt.n	8017aa0 <__b2d+0x50>
 8017a76:	f1c0 0e0b 	rsb	lr, r0, #11
 8017a7a:	fa24 f10e 	lsr.w	r1, r4, lr
 8017a7e:	42b7      	cmp	r7, r6
 8017a80:	ea41 030c 	orr.w	r3, r1, ip
 8017a84:	bf34      	ite	cc
 8017a86:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017a8a:	2100      	movcs	r1, #0
 8017a8c:	3015      	adds	r0, #21
 8017a8e:	fa04 f000 	lsl.w	r0, r4, r0
 8017a92:	fa21 f10e 	lsr.w	r1, r1, lr
 8017a96:	ea40 0201 	orr.w	r2, r0, r1
 8017a9a:	ec43 2b10 	vmov	d0, r2, r3
 8017a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017aa0:	42b7      	cmp	r7, r6
 8017aa2:	bf3a      	itte	cc
 8017aa4:	f1a5 0608 	subcc.w	r6, r5, #8
 8017aa8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017aac:	2100      	movcs	r1, #0
 8017aae:	380b      	subs	r0, #11
 8017ab0:	d015      	beq.n	8017ade <__b2d+0x8e>
 8017ab2:	4084      	lsls	r4, r0
 8017ab4:	f1c0 0520 	rsb	r5, r0, #32
 8017ab8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017abc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017ac0:	42be      	cmp	r6, r7
 8017ac2:	fa21 fc05 	lsr.w	ip, r1, r5
 8017ac6:	ea44 030c 	orr.w	r3, r4, ip
 8017aca:	bf8c      	ite	hi
 8017acc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017ad0:	2400      	movls	r4, #0
 8017ad2:	fa01 f000 	lsl.w	r0, r1, r0
 8017ad6:	40ec      	lsrs	r4, r5
 8017ad8:	ea40 0204 	orr.w	r2, r0, r4
 8017adc:	e7dd      	b.n	8017a9a <__b2d+0x4a>
 8017ade:	ea44 030c 	orr.w	r3, r4, ip
 8017ae2:	460a      	mov	r2, r1
 8017ae4:	e7d9      	b.n	8017a9a <__b2d+0x4a>
 8017ae6:	bf00      	nop
 8017ae8:	3ff00000 	.word	0x3ff00000

08017aec <__d2b>:
 8017aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017af0:	460e      	mov	r6, r1
 8017af2:	2101      	movs	r1, #1
 8017af4:	ec59 8b10 	vmov	r8, r9, d0
 8017af8:	4615      	mov	r5, r2
 8017afa:	f7ff fcb6 	bl	801746a <_Balloc>
 8017afe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017b02:	4607      	mov	r7, r0
 8017b04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017b08:	bb34      	cbnz	r4, 8017b58 <__d2b+0x6c>
 8017b0a:	9301      	str	r3, [sp, #4]
 8017b0c:	f1b8 0300 	subs.w	r3, r8, #0
 8017b10:	d027      	beq.n	8017b62 <__d2b+0x76>
 8017b12:	a802      	add	r0, sp, #8
 8017b14:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017b18:	f7ff fd8a 	bl	8017630 <__lo0bits>
 8017b1c:	9900      	ldr	r1, [sp, #0]
 8017b1e:	b1f0      	cbz	r0, 8017b5e <__d2b+0x72>
 8017b20:	9a01      	ldr	r2, [sp, #4]
 8017b22:	f1c0 0320 	rsb	r3, r0, #32
 8017b26:	fa02 f303 	lsl.w	r3, r2, r3
 8017b2a:	430b      	orrs	r3, r1
 8017b2c:	40c2      	lsrs	r2, r0
 8017b2e:	617b      	str	r3, [r7, #20]
 8017b30:	9201      	str	r2, [sp, #4]
 8017b32:	9b01      	ldr	r3, [sp, #4]
 8017b34:	61bb      	str	r3, [r7, #24]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	bf14      	ite	ne
 8017b3a:	2102      	movne	r1, #2
 8017b3c:	2101      	moveq	r1, #1
 8017b3e:	6139      	str	r1, [r7, #16]
 8017b40:	b1c4      	cbz	r4, 8017b74 <__d2b+0x88>
 8017b42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017b46:	4404      	add	r4, r0
 8017b48:	6034      	str	r4, [r6, #0]
 8017b4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017b4e:	6028      	str	r0, [r5, #0]
 8017b50:	4638      	mov	r0, r7
 8017b52:	b003      	add	sp, #12
 8017b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017b5c:	e7d5      	b.n	8017b0a <__d2b+0x1e>
 8017b5e:	6179      	str	r1, [r7, #20]
 8017b60:	e7e7      	b.n	8017b32 <__d2b+0x46>
 8017b62:	a801      	add	r0, sp, #4
 8017b64:	f7ff fd64 	bl	8017630 <__lo0bits>
 8017b68:	9b01      	ldr	r3, [sp, #4]
 8017b6a:	617b      	str	r3, [r7, #20]
 8017b6c:	2101      	movs	r1, #1
 8017b6e:	6139      	str	r1, [r7, #16]
 8017b70:	3020      	adds	r0, #32
 8017b72:	e7e5      	b.n	8017b40 <__d2b+0x54>
 8017b74:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017b78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017b7c:	6030      	str	r0, [r6, #0]
 8017b7e:	6918      	ldr	r0, [r3, #16]
 8017b80:	f7ff fd37 	bl	80175f2 <__hi0bits>
 8017b84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017b88:	e7e1      	b.n	8017b4e <__d2b+0x62>

08017b8a <__ratio>:
 8017b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b8e:	4688      	mov	r8, r1
 8017b90:	4669      	mov	r1, sp
 8017b92:	4681      	mov	r9, r0
 8017b94:	f7ff ff5c 	bl	8017a50 <__b2d>
 8017b98:	a901      	add	r1, sp, #4
 8017b9a:	4640      	mov	r0, r8
 8017b9c:	ec57 6b10 	vmov	r6, r7, d0
 8017ba0:	f7ff ff56 	bl	8017a50 <__b2d>
 8017ba4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017ba8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017bac:	eba3 0c02 	sub.w	ip, r3, r2
 8017bb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017bb4:	1a9b      	subs	r3, r3, r2
 8017bb6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017bba:	ec5b ab10 	vmov	sl, fp, d0
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	bfce      	itee	gt
 8017bc2:	463a      	movgt	r2, r7
 8017bc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017bc8:	465a      	movle	r2, fp
 8017bca:	4659      	mov	r1, fp
 8017bcc:	463d      	mov	r5, r7
 8017bce:	bfd4      	ite	le
 8017bd0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017bd4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017bd8:	4630      	mov	r0, r6
 8017bda:	ee10 2a10 	vmov	r2, s0
 8017bde:	460b      	mov	r3, r1
 8017be0:	4629      	mov	r1, r5
 8017be2:	f7e8 fe4b 	bl	800087c <__aeabi_ddiv>
 8017be6:	ec41 0b10 	vmov	d0, r0, r1
 8017bea:	b003      	add	sp, #12
 8017bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017bf0 <__copybits>:
 8017bf0:	3901      	subs	r1, #1
 8017bf2:	b510      	push	{r4, lr}
 8017bf4:	1149      	asrs	r1, r1, #5
 8017bf6:	6914      	ldr	r4, [r2, #16]
 8017bf8:	3101      	adds	r1, #1
 8017bfa:	f102 0314 	add.w	r3, r2, #20
 8017bfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017c02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017c06:	42a3      	cmp	r3, r4
 8017c08:	4602      	mov	r2, r0
 8017c0a:	d303      	bcc.n	8017c14 <__copybits+0x24>
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	428a      	cmp	r2, r1
 8017c10:	d305      	bcc.n	8017c1e <__copybits+0x2e>
 8017c12:	bd10      	pop	{r4, pc}
 8017c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c18:	f840 2b04 	str.w	r2, [r0], #4
 8017c1c:	e7f3      	b.n	8017c06 <__copybits+0x16>
 8017c1e:	f842 3b04 	str.w	r3, [r2], #4
 8017c22:	e7f4      	b.n	8017c0e <__copybits+0x1e>

08017c24 <__any_on>:
 8017c24:	f100 0214 	add.w	r2, r0, #20
 8017c28:	6900      	ldr	r0, [r0, #16]
 8017c2a:	114b      	asrs	r3, r1, #5
 8017c2c:	4298      	cmp	r0, r3
 8017c2e:	b510      	push	{r4, lr}
 8017c30:	db11      	blt.n	8017c56 <__any_on+0x32>
 8017c32:	dd0a      	ble.n	8017c4a <__any_on+0x26>
 8017c34:	f011 011f 	ands.w	r1, r1, #31
 8017c38:	d007      	beq.n	8017c4a <__any_on+0x26>
 8017c3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017c3e:	fa24 f001 	lsr.w	r0, r4, r1
 8017c42:	fa00 f101 	lsl.w	r1, r0, r1
 8017c46:	428c      	cmp	r4, r1
 8017c48:	d10b      	bne.n	8017c62 <__any_on+0x3e>
 8017c4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017c4e:	4293      	cmp	r3, r2
 8017c50:	d803      	bhi.n	8017c5a <__any_on+0x36>
 8017c52:	2000      	movs	r0, #0
 8017c54:	bd10      	pop	{r4, pc}
 8017c56:	4603      	mov	r3, r0
 8017c58:	e7f7      	b.n	8017c4a <__any_on+0x26>
 8017c5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017c5e:	2900      	cmp	r1, #0
 8017c60:	d0f5      	beq.n	8017c4e <__any_on+0x2a>
 8017c62:	2001      	movs	r0, #1
 8017c64:	e7f6      	b.n	8017c54 <__any_on+0x30>

08017c66 <_calloc_r>:
 8017c66:	b538      	push	{r3, r4, r5, lr}
 8017c68:	fb02 f401 	mul.w	r4, r2, r1
 8017c6c:	4621      	mov	r1, r4
 8017c6e:	f000 f857 	bl	8017d20 <_malloc_r>
 8017c72:	4605      	mov	r5, r0
 8017c74:	b118      	cbz	r0, 8017c7e <_calloc_r+0x18>
 8017c76:	4622      	mov	r2, r4
 8017c78:	2100      	movs	r1, #0
 8017c7a:	f7fc fc9f 	bl	80145bc <memset>
 8017c7e:	4628      	mov	r0, r5
 8017c80:	bd38      	pop	{r3, r4, r5, pc}
	...

08017c84 <_free_r>:
 8017c84:	b538      	push	{r3, r4, r5, lr}
 8017c86:	4605      	mov	r5, r0
 8017c88:	2900      	cmp	r1, #0
 8017c8a:	d045      	beq.n	8017d18 <_free_r+0x94>
 8017c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c90:	1f0c      	subs	r4, r1, #4
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	bfb8      	it	lt
 8017c96:	18e4      	addlt	r4, r4, r3
 8017c98:	f000 fe30 	bl	80188fc <__malloc_lock>
 8017c9c:	4a1f      	ldr	r2, [pc, #124]	; (8017d1c <_free_r+0x98>)
 8017c9e:	6813      	ldr	r3, [r2, #0]
 8017ca0:	4610      	mov	r0, r2
 8017ca2:	b933      	cbnz	r3, 8017cb2 <_free_r+0x2e>
 8017ca4:	6063      	str	r3, [r4, #4]
 8017ca6:	6014      	str	r4, [r2, #0]
 8017ca8:	4628      	mov	r0, r5
 8017caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cae:	f000 be26 	b.w	80188fe <__malloc_unlock>
 8017cb2:	42a3      	cmp	r3, r4
 8017cb4:	d90c      	bls.n	8017cd0 <_free_r+0x4c>
 8017cb6:	6821      	ldr	r1, [r4, #0]
 8017cb8:	1862      	adds	r2, r4, r1
 8017cba:	4293      	cmp	r3, r2
 8017cbc:	bf04      	itt	eq
 8017cbe:	681a      	ldreq	r2, [r3, #0]
 8017cc0:	685b      	ldreq	r3, [r3, #4]
 8017cc2:	6063      	str	r3, [r4, #4]
 8017cc4:	bf04      	itt	eq
 8017cc6:	1852      	addeq	r2, r2, r1
 8017cc8:	6022      	streq	r2, [r4, #0]
 8017cca:	6004      	str	r4, [r0, #0]
 8017ccc:	e7ec      	b.n	8017ca8 <_free_r+0x24>
 8017cce:	4613      	mov	r3, r2
 8017cd0:	685a      	ldr	r2, [r3, #4]
 8017cd2:	b10a      	cbz	r2, 8017cd8 <_free_r+0x54>
 8017cd4:	42a2      	cmp	r2, r4
 8017cd6:	d9fa      	bls.n	8017cce <_free_r+0x4a>
 8017cd8:	6819      	ldr	r1, [r3, #0]
 8017cda:	1858      	adds	r0, r3, r1
 8017cdc:	42a0      	cmp	r0, r4
 8017cde:	d10b      	bne.n	8017cf8 <_free_r+0x74>
 8017ce0:	6820      	ldr	r0, [r4, #0]
 8017ce2:	4401      	add	r1, r0
 8017ce4:	1858      	adds	r0, r3, r1
 8017ce6:	4282      	cmp	r2, r0
 8017ce8:	6019      	str	r1, [r3, #0]
 8017cea:	d1dd      	bne.n	8017ca8 <_free_r+0x24>
 8017cec:	6810      	ldr	r0, [r2, #0]
 8017cee:	6852      	ldr	r2, [r2, #4]
 8017cf0:	605a      	str	r2, [r3, #4]
 8017cf2:	4401      	add	r1, r0
 8017cf4:	6019      	str	r1, [r3, #0]
 8017cf6:	e7d7      	b.n	8017ca8 <_free_r+0x24>
 8017cf8:	d902      	bls.n	8017d00 <_free_r+0x7c>
 8017cfa:	230c      	movs	r3, #12
 8017cfc:	602b      	str	r3, [r5, #0]
 8017cfe:	e7d3      	b.n	8017ca8 <_free_r+0x24>
 8017d00:	6820      	ldr	r0, [r4, #0]
 8017d02:	1821      	adds	r1, r4, r0
 8017d04:	428a      	cmp	r2, r1
 8017d06:	bf04      	itt	eq
 8017d08:	6811      	ldreq	r1, [r2, #0]
 8017d0a:	6852      	ldreq	r2, [r2, #4]
 8017d0c:	6062      	str	r2, [r4, #4]
 8017d0e:	bf04      	itt	eq
 8017d10:	1809      	addeq	r1, r1, r0
 8017d12:	6021      	streq	r1, [r4, #0]
 8017d14:	605c      	str	r4, [r3, #4]
 8017d16:	e7c7      	b.n	8017ca8 <_free_r+0x24>
 8017d18:	bd38      	pop	{r3, r4, r5, pc}
 8017d1a:	bf00      	nop
 8017d1c:	200481d0 	.word	0x200481d0

08017d20 <_malloc_r>:
 8017d20:	b570      	push	{r4, r5, r6, lr}
 8017d22:	1ccd      	adds	r5, r1, #3
 8017d24:	f025 0503 	bic.w	r5, r5, #3
 8017d28:	3508      	adds	r5, #8
 8017d2a:	2d0c      	cmp	r5, #12
 8017d2c:	bf38      	it	cc
 8017d2e:	250c      	movcc	r5, #12
 8017d30:	2d00      	cmp	r5, #0
 8017d32:	4606      	mov	r6, r0
 8017d34:	db01      	blt.n	8017d3a <_malloc_r+0x1a>
 8017d36:	42a9      	cmp	r1, r5
 8017d38:	d903      	bls.n	8017d42 <_malloc_r+0x22>
 8017d3a:	230c      	movs	r3, #12
 8017d3c:	6033      	str	r3, [r6, #0]
 8017d3e:	2000      	movs	r0, #0
 8017d40:	bd70      	pop	{r4, r5, r6, pc}
 8017d42:	f000 fddb 	bl	80188fc <__malloc_lock>
 8017d46:	4a21      	ldr	r2, [pc, #132]	; (8017dcc <_malloc_r+0xac>)
 8017d48:	6814      	ldr	r4, [r2, #0]
 8017d4a:	4621      	mov	r1, r4
 8017d4c:	b991      	cbnz	r1, 8017d74 <_malloc_r+0x54>
 8017d4e:	4c20      	ldr	r4, [pc, #128]	; (8017dd0 <_malloc_r+0xb0>)
 8017d50:	6823      	ldr	r3, [r4, #0]
 8017d52:	b91b      	cbnz	r3, 8017d5c <_malloc_r+0x3c>
 8017d54:	4630      	mov	r0, r6
 8017d56:	f000 fc91 	bl	801867c <_sbrk_r>
 8017d5a:	6020      	str	r0, [r4, #0]
 8017d5c:	4629      	mov	r1, r5
 8017d5e:	4630      	mov	r0, r6
 8017d60:	f000 fc8c 	bl	801867c <_sbrk_r>
 8017d64:	1c43      	adds	r3, r0, #1
 8017d66:	d124      	bne.n	8017db2 <_malloc_r+0x92>
 8017d68:	230c      	movs	r3, #12
 8017d6a:	6033      	str	r3, [r6, #0]
 8017d6c:	4630      	mov	r0, r6
 8017d6e:	f000 fdc6 	bl	80188fe <__malloc_unlock>
 8017d72:	e7e4      	b.n	8017d3e <_malloc_r+0x1e>
 8017d74:	680b      	ldr	r3, [r1, #0]
 8017d76:	1b5b      	subs	r3, r3, r5
 8017d78:	d418      	bmi.n	8017dac <_malloc_r+0x8c>
 8017d7a:	2b0b      	cmp	r3, #11
 8017d7c:	d90f      	bls.n	8017d9e <_malloc_r+0x7e>
 8017d7e:	600b      	str	r3, [r1, #0]
 8017d80:	50cd      	str	r5, [r1, r3]
 8017d82:	18cc      	adds	r4, r1, r3
 8017d84:	4630      	mov	r0, r6
 8017d86:	f000 fdba 	bl	80188fe <__malloc_unlock>
 8017d8a:	f104 000b 	add.w	r0, r4, #11
 8017d8e:	1d23      	adds	r3, r4, #4
 8017d90:	f020 0007 	bic.w	r0, r0, #7
 8017d94:	1ac3      	subs	r3, r0, r3
 8017d96:	d0d3      	beq.n	8017d40 <_malloc_r+0x20>
 8017d98:	425a      	negs	r2, r3
 8017d9a:	50e2      	str	r2, [r4, r3]
 8017d9c:	e7d0      	b.n	8017d40 <_malloc_r+0x20>
 8017d9e:	428c      	cmp	r4, r1
 8017da0:	684b      	ldr	r3, [r1, #4]
 8017da2:	bf16      	itet	ne
 8017da4:	6063      	strne	r3, [r4, #4]
 8017da6:	6013      	streq	r3, [r2, #0]
 8017da8:	460c      	movne	r4, r1
 8017daa:	e7eb      	b.n	8017d84 <_malloc_r+0x64>
 8017dac:	460c      	mov	r4, r1
 8017dae:	6849      	ldr	r1, [r1, #4]
 8017db0:	e7cc      	b.n	8017d4c <_malloc_r+0x2c>
 8017db2:	1cc4      	adds	r4, r0, #3
 8017db4:	f024 0403 	bic.w	r4, r4, #3
 8017db8:	42a0      	cmp	r0, r4
 8017dba:	d005      	beq.n	8017dc8 <_malloc_r+0xa8>
 8017dbc:	1a21      	subs	r1, r4, r0
 8017dbe:	4630      	mov	r0, r6
 8017dc0:	f000 fc5c 	bl	801867c <_sbrk_r>
 8017dc4:	3001      	adds	r0, #1
 8017dc6:	d0cf      	beq.n	8017d68 <_malloc_r+0x48>
 8017dc8:	6025      	str	r5, [r4, #0]
 8017dca:	e7db      	b.n	8017d84 <_malloc_r+0x64>
 8017dcc:	200481d0 	.word	0x200481d0
 8017dd0:	200481d4 	.word	0x200481d4

08017dd4 <__ssputs_r>:
 8017dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dd8:	688e      	ldr	r6, [r1, #8]
 8017dda:	429e      	cmp	r6, r3
 8017ddc:	4682      	mov	sl, r0
 8017dde:	460c      	mov	r4, r1
 8017de0:	4690      	mov	r8, r2
 8017de2:	4699      	mov	r9, r3
 8017de4:	d837      	bhi.n	8017e56 <__ssputs_r+0x82>
 8017de6:	898a      	ldrh	r2, [r1, #12]
 8017de8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017dec:	d031      	beq.n	8017e52 <__ssputs_r+0x7e>
 8017dee:	6825      	ldr	r5, [r4, #0]
 8017df0:	6909      	ldr	r1, [r1, #16]
 8017df2:	1a6f      	subs	r7, r5, r1
 8017df4:	6965      	ldr	r5, [r4, #20]
 8017df6:	2302      	movs	r3, #2
 8017df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017dfc:	fb95 f5f3 	sdiv	r5, r5, r3
 8017e00:	f109 0301 	add.w	r3, r9, #1
 8017e04:	443b      	add	r3, r7
 8017e06:	429d      	cmp	r5, r3
 8017e08:	bf38      	it	cc
 8017e0a:	461d      	movcc	r5, r3
 8017e0c:	0553      	lsls	r3, r2, #21
 8017e0e:	d530      	bpl.n	8017e72 <__ssputs_r+0x9e>
 8017e10:	4629      	mov	r1, r5
 8017e12:	f7ff ff85 	bl	8017d20 <_malloc_r>
 8017e16:	4606      	mov	r6, r0
 8017e18:	b950      	cbnz	r0, 8017e30 <__ssputs_r+0x5c>
 8017e1a:	230c      	movs	r3, #12
 8017e1c:	f8ca 3000 	str.w	r3, [sl]
 8017e20:	89a3      	ldrh	r3, [r4, #12]
 8017e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e26:	81a3      	strh	r3, [r4, #12]
 8017e28:	f04f 30ff 	mov.w	r0, #4294967295
 8017e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e30:	463a      	mov	r2, r7
 8017e32:	6921      	ldr	r1, [r4, #16]
 8017e34:	f7ff fb0e 	bl	8017454 <memcpy>
 8017e38:	89a3      	ldrh	r3, [r4, #12]
 8017e3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e42:	81a3      	strh	r3, [r4, #12]
 8017e44:	6126      	str	r6, [r4, #16]
 8017e46:	6165      	str	r5, [r4, #20]
 8017e48:	443e      	add	r6, r7
 8017e4a:	1bed      	subs	r5, r5, r7
 8017e4c:	6026      	str	r6, [r4, #0]
 8017e4e:	60a5      	str	r5, [r4, #8]
 8017e50:	464e      	mov	r6, r9
 8017e52:	454e      	cmp	r6, r9
 8017e54:	d900      	bls.n	8017e58 <__ssputs_r+0x84>
 8017e56:	464e      	mov	r6, r9
 8017e58:	4632      	mov	r2, r6
 8017e5a:	4641      	mov	r1, r8
 8017e5c:	6820      	ldr	r0, [r4, #0]
 8017e5e:	f000 fd34 	bl	80188ca <memmove>
 8017e62:	68a3      	ldr	r3, [r4, #8]
 8017e64:	1b9b      	subs	r3, r3, r6
 8017e66:	60a3      	str	r3, [r4, #8]
 8017e68:	6823      	ldr	r3, [r4, #0]
 8017e6a:	441e      	add	r6, r3
 8017e6c:	6026      	str	r6, [r4, #0]
 8017e6e:	2000      	movs	r0, #0
 8017e70:	e7dc      	b.n	8017e2c <__ssputs_r+0x58>
 8017e72:	462a      	mov	r2, r5
 8017e74:	f000 fd44 	bl	8018900 <_realloc_r>
 8017e78:	4606      	mov	r6, r0
 8017e7a:	2800      	cmp	r0, #0
 8017e7c:	d1e2      	bne.n	8017e44 <__ssputs_r+0x70>
 8017e7e:	6921      	ldr	r1, [r4, #16]
 8017e80:	4650      	mov	r0, sl
 8017e82:	f7ff feff 	bl	8017c84 <_free_r>
 8017e86:	e7c8      	b.n	8017e1a <__ssputs_r+0x46>

08017e88 <_svfiprintf_r>:
 8017e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e8c:	461d      	mov	r5, r3
 8017e8e:	898b      	ldrh	r3, [r1, #12]
 8017e90:	061f      	lsls	r7, r3, #24
 8017e92:	b09d      	sub	sp, #116	; 0x74
 8017e94:	4680      	mov	r8, r0
 8017e96:	460c      	mov	r4, r1
 8017e98:	4616      	mov	r6, r2
 8017e9a:	d50f      	bpl.n	8017ebc <_svfiprintf_r+0x34>
 8017e9c:	690b      	ldr	r3, [r1, #16]
 8017e9e:	b96b      	cbnz	r3, 8017ebc <_svfiprintf_r+0x34>
 8017ea0:	2140      	movs	r1, #64	; 0x40
 8017ea2:	f7ff ff3d 	bl	8017d20 <_malloc_r>
 8017ea6:	6020      	str	r0, [r4, #0]
 8017ea8:	6120      	str	r0, [r4, #16]
 8017eaa:	b928      	cbnz	r0, 8017eb8 <_svfiprintf_r+0x30>
 8017eac:	230c      	movs	r3, #12
 8017eae:	f8c8 3000 	str.w	r3, [r8]
 8017eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8017eb6:	e0c8      	b.n	801804a <_svfiprintf_r+0x1c2>
 8017eb8:	2340      	movs	r3, #64	; 0x40
 8017eba:	6163      	str	r3, [r4, #20]
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8017ec0:	2320      	movs	r3, #32
 8017ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017ec6:	2330      	movs	r3, #48	; 0x30
 8017ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ecc:	9503      	str	r5, [sp, #12]
 8017ece:	f04f 0b01 	mov.w	fp, #1
 8017ed2:	4637      	mov	r7, r6
 8017ed4:	463d      	mov	r5, r7
 8017ed6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017eda:	b10b      	cbz	r3, 8017ee0 <_svfiprintf_r+0x58>
 8017edc:	2b25      	cmp	r3, #37	; 0x25
 8017ede:	d13e      	bne.n	8017f5e <_svfiprintf_r+0xd6>
 8017ee0:	ebb7 0a06 	subs.w	sl, r7, r6
 8017ee4:	d00b      	beq.n	8017efe <_svfiprintf_r+0x76>
 8017ee6:	4653      	mov	r3, sl
 8017ee8:	4632      	mov	r2, r6
 8017eea:	4621      	mov	r1, r4
 8017eec:	4640      	mov	r0, r8
 8017eee:	f7ff ff71 	bl	8017dd4 <__ssputs_r>
 8017ef2:	3001      	adds	r0, #1
 8017ef4:	f000 80a4 	beq.w	8018040 <_svfiprintf_r+0x1b8>
 8017ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017efa:	4453      	add	r3, sl
 8017efc:	9309      	str	r3, [sp, #36]	; 0x24
 8017efe:	783b      	ldrb	r3, [r7, #0]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	f000 809d 	beq.w	8018040 <_svfiprintf_r+0x1b8>
 8017f06:	2300      	movs	r3, #0
 8017f08:	f04f 32ff 	mov.w	r2, #4294967295
 8017f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f10:	9304      	str	r3, [sp, #16]
 8017f12:	9307      	str	r3, [sp, #28]
 8017f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f18:	931a      	str	r3, [sp, #104]	; 0x68
 8017f1a:	462f      	mov	r7, r5
 8017f1c:	2205      	movs	r2, #5
 8017f1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017f22:	4850      	ldr	r0, [pc, #320]	; (8018064 <_svfiprintf_r+0x1dc>)
 8017f24:	f7e8 f974 	bl	8000210 <memchr>
 8017f28:	9b04      	ldr	r3, [sp, #16]
 8017f2a:	b9d0      	cbnz	r0, 8017f62 <_svfiprintf_r+0xda>
 8017f2c:	06d9      	lsls	r1, r3, #27
 8017f2e:	bf44      	itt	mi
 8017f30:	2220      	movmi	r2, #32
 8017f32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017f36:	071a      	lsls	r2, r3, #28
 8017f38:	bf44      	itt	mi
 8017f3a:	222b      	movmi	r2, #43	; 0x2b
 8017f3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017f40:	782a      	ldrb	r2, [r5, #0]
 8017f42:	2a2a      	cmp	r2, #42	; 0x2a
 8017f44:	d015      	beq.n	8017f72 <_svfiprintf_r+0xea>
 8017f46:	9a07      	ldr	r2, [sp, #28]
 8017f48:	462f      	mov	r7, r5
 8017f4a:	2000      	movs	r0, #0
 8017f4c:	250a      	movs	r5, #10
 8017f4e:	4639      	mov	r1, r7
 8017f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f54:	3b30      	subs	r3, #48	; 0x30
 8017f56:	2b09      	cmp	r3, #9
 8017f58:	d94d      	bls.n	8017ff6 <_svfiprintf_r+0x16e>
 8017f5a:	b1b8      	cbz	r0, 8017f8c <_svfiprintf_r+0x104>
 8017f5c:	e00f      	b.n	8017f7e <_svfiprintf_r+0xf6>
 8017f5e:	462f      	mov	r7, r5
 8017f60:	e7b8      	b.n	8017ed4 <_svfiprintf_r+0x4c>
 8017f62:	4a40      	ldr	r2, [pc, #256]	; (8018064 <_svfiprintf_r+0x1dc>)
 8017f64:	1a80      	subs	r0, r0, r2
 8017f66:	fa0b f000 	lsl.w	r0, fp, r0
 8017f6a:	4318      	orrs	r0, r3
 8017f6c:	9004      	str	r0, [sp, #16]
 8017f6e:	463d      	mov	r5, r7
 8017f70:	e7d3      	b.n	8017f1a <_svfiprintf_r+0x92>
 8017f72:	9a03      	ldr	r2, [sp, #12]
 8017f74:	1d11      	adds	r1, r2, #4
 8017f76:	6812      	ldr	r2, [r2, #0]
 8017f78:	9103      	str	r1, [sp, #12]
 8017f7a:	2a00      	cmp	r2, #0
 8017f7c:	db01      	blt.n	8017f82 <_svfiprintf_r+0xfa>
 8017f7e:	9207      	str	r2, [sp, #28]
 8017f80:	e004      	b.n	8017f8c <_svfiprintf_r+0x104>
 8017f82:	4252      	negs	r2, r2
 8017f84:	f043 0302 	orr.w	r3, r3, #2
 8017f88:	9207      	str	r2, [sp, #28]
 8017f8a:	9304      	str	r3, [sp, #16]
 8017f8c:	783b      	ldrb	r3, [r7, #0]
 8017f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8017f90:	d10c      	bne.n	8017fac <_svfiprintf_r+0x124>
 8017f92:	787b      	ldrb	r3, [r7, #1]
 8017f94:	2b2a      	cmp	r3, #42	; 0x2a
 8017f96:	d133      	bne.n	8018000 <_svfiprintf_r+0x178>
 8017f98:	9b03      	ldr	r3, [sp, #12]
 8017f9a:	1d1a      	adds	r2, r3, #4
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	9203      	str	r2, [sp, #12]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	bfb8      	it	lt
 8017fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8017fa8:	3702      	adds	r7, #2
 8017faa:	9305      	str	r3, [sp, #20]
 8017fac:	4d2e      	ldr	r5, [pc, #184]	; (8018068 <_svfiprintf_r+0x1e0>)
 8017fae:	7839      	ldrb	r1, [r7, #0]
 8017fb0:	2203      	movs	r2, #3
 8017fb2:	4628      	mov	r0, r5
 8017fb4:	f7e8 f92c 	bl	8000210 <memchr>
 8017fb8:	b138      	cbz	r0, 8017fca <_svfiprintf_r+0x142>
 8017fba:	2340      	movs	r3, #64	; 0x40
 8017fbc:	1b40      	subs	r0, r0, r5
 8017fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8017fc2:	9b04      	ldr	r3, [sp, #16]
 8017fc4:	4303      	orrs	r3, r0
 8017fc6:	3701      	adds	r7, #1
 8017fc8:	9304      	str	r3, [sp, #16]
 8017fca:	7839      	ldrb	r1, [r7, #0]
 8017fcc:	4827      	ldr	r0, [pc, #156]	; (801806c <_svfiprintf_r+0x1e4>)
 8017fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017fd2:	2206      	movs	r2, #6
 8017fd4:	1c7e      	adds	r6, r7, #1
 8017fd6:	f7e8 f91b 	bl	8000210 <memchr>
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	d038      	beq.n	8018050 <_svfiprintf_r+0x1c8>
 8017fde:	4b24      	ldr	r3, [pc, #144]	; (8018070 <_svfiprintf_r+0x1e8>)
 8017fe0:	bb13      	cbnz	r3, 8018028 <_svfiprintf_r+0x1a0>
 8017fe2:	9b03      	ldr	r3, [sp, #12]
 8017fe4:	3307      	adds	r3, #7
 8017fe6:	f023 0307 	bic.w	r3, r3, #7
 8017fea:	3308      	adds	r3, #8
 8017fec:	9303      	str	r3, [sp, #12]
 8017fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ff0:	444b      	add	r3, r9
 8017ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ff4:	e76d      	b.n	8017ed2 <_svfiprintf_r+0x4a>
 8017ff6:	fb05 3202 	mla	r2, r5, r2, r3
 8017ffa:	2001      	movs	r0, #1
 8017ffc:	460f      	mov	r7, r1
 8017ffe:	e7a6      	b.n	8017f4e <_svfiprintf_r+0xc6>
 8018000:	2300      	movs	r3, #0
 8018002:	3701      	adds	r7, #1
 8018004:	9305      	str	r3, [sp, #20]
 8018006:	4619      	mov	r1, r3
 8018008:	250a      	movs	r5, #10
 801800a:	4638      	mov	r0, r7
 801800c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018010:	3a30      	subs	r2, #48	; 0x30
 8018012:	2a09      	cmp	r2, #9
 8018014:	d903      	bls.n	801801e <_svfiprintf_r+0x196>
 8018016:	2b00      	cmp	r3, #0
 8018018:	d0c8      	beq.n	8017fac <_svfiprintf_r+0x124>
 801801a:	9105      	str	r1, [sp, #20]
 801801c:	e7c6      	b.n	8017fac <_svfiprintf_r+0x124>
 801801e:	fb05 2101 	mla	r1, r5, r1, r2
 8018022:	2301      	movs	r3, #1
 8018024:	4607      	mov	r7, r0
 8018026:	e7f0      	b.n	801800a <_svfiprintf_r+0x182>
 8018028:	ab03      	add	r3, sp, #12
 801802a:	9300      	str	r3, [sp, #0]
 801802c:	4622      	mov	r2, r4
 801802e:	4b11      	ldr	r3, [pc, #68]	; (8018074 <_svfiprintf_r+0x1ec>)
 8018030:	a904      	add	r1, sp, #16
 8018032:	4640      	mov	r0, r8
 8018034:	f7fc fb5e 	bl	80146f4 <_printf_float>
 8018038:	f1b0 3fff 	cmp.w	r0, #4294967295
 801803c:	4681      	mov	r9, r0
 801803e:	d1d6      	bne.n	8017fee <_svfiprintf_r+0x166>
 8018040:	89a3      	ldrh	r3, [r4, #12]
 8018042:	065b      	lsls	r3, r3, #25
 8018044:	f53f af35 	bmi.w	8017eb2 <_svfiprintf_r+0x2a>
 8018048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801804a:	b01d      	add	sp, #116	; 0x74
 801804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018050:	ab03      	add	r3, sp, #12
 8018052:	9300      	str	r3, [sp, #0]
 8018054:	4622      	mov	r2, r4
 8018056:	4b07      	ldr	r3, [pc, #28]	; (8018074 <_svfiprintf_r+0x1ec>)
 8018058:	a904      	add	r1, sp, #16
 801805a:	4640      	mov	r0, r8
 801805c:	f7fc fe00 	bl	8014c60 <_printf_i>
 8018060:	e7ea      	b.n	8018038 <_svfiprintf_r+0x1b0>
 8018062:	bf00      	nop
 8018064:	0801901c 	.word	0x0801901c
 8018068:	08019022 	.word	0x08019022
 801806c:	08019026 	.word	0x08019026
 8018070:	080146f5 	.word	0x080146f5
 8018074:	08017dd5 	.word	0x08017dd5

08018078 <_sungetc_r>:
 8018078:	b538      	push	{r3, r4, r5, lr}
 801807a:	1c4b      	adds	r3, r1, #1
 801807c:	4614      	mov	r4, r2
 801807e:	d103      	bne.n	8018088 <_sungetc_r+0x10>
 8018080:	f04f 35ff 	mov.w	r5, #4294967295
 8018084:	4628      	mov	r0, r5
 8018086:	bd38      	pop	{r3, r4, r5, pc}
 8018088:	8993      	ldrh	r3, [r2, #12]
 801808a:	f023 0320 	bic.w	r3, r3, #32
 801808e:	8193      	strh	r3, [r2, #12]
 8018090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018092:	6852      	ldr	r2, [r2, #4]
 8018094:	b2cd      	uxtb	r5, r1
 8018096:	b18b      	cbz	r3, 80180bc <_sungetc_r+0x44>
 8018098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801809a:	4293      	cmp	r3, r2
 801809c:	dd08      	ble.n	80180b0 <_sungetc_r+0x38>
 801809e:	6823      	ldr	r3, [r4, #0]
 80180a0:	1e5a      	subs	r2, r3, #1
 80180a2:	6022      	str	r2, [r4, #0]
 80180a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80180a8:	6863      	ldr	r3, [r4, #4]
 80180aa:	3301      	adds	r3, #1
 80180ac:	6063      	str	r3, [r4, #4]
 80180ae:	e7e9      	b.n	8018084 <_sungetc_r+0xc>
 80180b0:	4621      	mov	r1, r4
 80180b2:	f000 fbc3 	bl	801883c <__submore>
 80180b6:	2800      	cmp	r0, #0
 80180b8:	d0f1      	beq.n	801809e <_sungetc_r+0x26>
 80180ba:	e7e1      	b.n	8018080 <_sungetc_r+0x8>
 80180bc:	6921      	ldr	r1, [r4, #16]
 80180be:	6823      	ldr	r3, [r4, #0]
 80180c0:	b151      	cbz	r1, 80180d8 <_sungetc_r+0x60>
 80180c2:	4299      	cmp	r1, r3
 80180c4:	d208      	bcs.n	80180d8 <_sungetc_r+0x60>
 80180c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80180ca:	42a9      	cmp	r1, r5
 80180cc:	d104      	bne.n	80180d8 <_sungetc_r+0x60>
 80180ce:	3b01      	subs	r3, #1
 80180d0:	3201      	adds	r2, #1
 80180d2:	6023      	str	r3, [r4, #0]
 80180d4:	6062      	str	r2, [r4, #4]
 80180d6:	e7d5      	b.n	8018084 <_sungetc_r+0xc>
 80180d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80180dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180e0:	6363      	str	r3, [r4, #52]	; 0x34
 80180e2:	2303      	movs	r3, #3
 80180e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80180e6:	4623      	mov	r3, r4
 80180e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80180ec:	6023      	str	r3, [r4, #0]
 80180ee:	2301      	movs	r3, #1
 80180f0:	e7dc      	b.n	80180ac <_sungetc_r+0x34>

080180f2 <__ssrefill_r>:
 80180f2:	b510      	push	{r4, lr}
 80180f4:	460c      	mov	r4, r1
 80180f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80180f8:	b169      	cbz	r1, 8018116 <__ssrefill_r+0x24>
 80180fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180fe:	4299      	cmp	r1, r3
 8018100:	d001      	beq.n	8018106 <__ssrefill_r+0x14>
 8018102:	f7ff fdbf 	bl	8017c84 <_free_r>
 8018106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018108:	6063      	str	r3, [r4, #4]
 801810a:	2000      	movs	r0, #0
 801810c:	6360      	str	r0, [r4, #52]	; 0x34
 801810e:	b113      	cbz	r3, 8018116 <__ssrefill_r+0x24>
 8018110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018112:	6023      	str	r3, [r4, #0]
 8018114:	bd10      	pop	{r4, pc}
 8018116:	6923      	ldr	r3, [r4, #16]
 8018118:	6023      	str	r3, [r4, #0]
 801811a:	2300      	movs	r3, #0
 801811c:	6063      	str	r3, [r4, #4]
 801811e:	89a3      	ldrh	r3, [r4, #12]
 8018120:	f043 0320 	orr.w	r3, r3, #32
 8018124:	81a3      	strh	r3, [r4, #12]
 8018126:	f04f 30ff 	mov.w	r0, #4294967295
 801812a:	e7f3      	b.n	8018114 <__ssrefill_r+0x22>

0801812c <__ssvfiscanf_r>:
 801812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018130:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018134:	460c      	mov	r4, r1
 8018136:	2100      	movs	r1, #0
 8018138:	9144      	str	r1, [sp, #272]	; 0x110
 801813a:	9145      	str	r1, [sp, #276]	; 0x114
 801813c:	499f      	ldr	r1, [pc, #636]	; (80183bc <__ssvfiscanf_r+0x290>)
 801813e:	91a0      	str	r1, [sp, #640]	; 0x280
 8018140:	f10d 0804 	add.w	r8, sp, #4
 8018144:	499e      	ldr	r1, [pc, #632]	; (80183c0 <__ssvfiscanf_r+0x294>)
 8018146:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80183c4 <__ssvfiscanf_r+0x298>
 801814a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801814e:	4606      	mov	r6, r0
 8018150:	4692      	mov	sl, r2
 8018152:	91a1      	str	r1, [sp, #644]	; 0x284
 8018154:	9300      	str	r3, [sp, #0]
 8018156:	270a      	movs	r7, #10
 8018158:	f89a 3000 	ldrb.w	r3, [sl]
 801815c:	2b00      	cmp	r3, #0
 801815e:	f000 812a 	beq.w	80183b6 <__ssvfiscanf_r+0x28a>
 8018162:	4655      	mov	r5, sl
 8018164:	f7ff f93e 	bl	80173e4 <__locale_ctype_ptr>
 8018168:	f815 bb01 	ldrb.w	fp, [r5], #1
 801816c:	4458      	add	r0, fp
 801816e:	7843      	ldrb	r3, [r0, #1]
 8018170:	f013 0308 	ands.w	r3, r3, #8
 8018174:	d01c      	beq.n	80181b0 <__ssvfiscanf_r+0x84>
 8018176:	6863      	ldr	r3, [r4, #4]
 8018178:	2b00      	cmp	r3, #0
 801817a:	dd12      	ble.n	80181a2 <__ssvfiscanf_r+0x76>
 801817c:	f7ff f932 	bl	80173e4 <__locale_ctype_ptr>
 8018180:	6823      	ldr	r3, [r4, #0]
 8018182:	781a      	ldrb	r2, [r3, #0]
 8018184:	4410      	add	r0, r2
 8018186:	7842      	ldrb	r2, [r0, #1]
 8018188:	0712      	lsls	r2, r2, #28
 801818a:	d401      	bmi.n	8018190 <__ssvfiscanf_r+0x64>
 801818c:	46aa      	mov	sl, r5
 801818e:	e7e3      	b.n	8018158 <__ssvfiscanf_r+0x2c>
 8018190:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018192:	3201      	adds	r2, #1
 8018194:	9245      	str	r2, [sp, #276]	; 0x114
 8018196:	6862      	ldr	r2, [r4, #4]
 8018198:	3301      	adds	r3, #1
 801819a:	3a01      	subs	r2, #1
 801819c:	6062      	str	r2, [r4, #4]
 801819e:	6023      	str	r3, [r4, #0]
 80181a0:	e7e9      	b.n	8018176 <__ssvfiscanf_r+0x4a>
 80181a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80181a4:	4621      	mov	r1, r4
 80181a6:	4630      	mov	r0, r6
 80181a8:	4798      	blx	r3
 80181aa:	2800      	cmp	r0, #0
 80181ac:	d0e6      	beq.n	801817c <__ssvfiscanf_r+0x50>
 80181ae:	e7ed      	b.n	801818c <__ssvfiscanf_r+0x60>
 80181b0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80181b4:	f040 8082 	bne.w	80182bc <__ssvfiscanf_r+0x190>
 80181b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80181ba:	9341      	str	r3, [sp, #260]	; 0x104
 80181bc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80181c0:	2b2a      	cmp	r3, #42	; 0x2a
 80181c2:	d103      	bne.n	80181cc <__ssvfiscanf_r+0xa0>
 80181c4:	2310      	movs	r3, #16
 80181c6:	9341      	str	r3, [sp, #260]	; 0x104
 80181c8:	f10a 0502 	add.w	r5, sl, #2
 80181cc:	46aa      	mov	sl, r5
 80181ce:	f815 1b01 	ldrb.w	r1, [r5], #1
 80181d2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80181d6:	2a09      	cmp	r2, #9
 80181d8:	d922      	bls.n	8018220 <__ssvfiscanf_r+0xf4>
 80181da:	2203      	movs	r2, #3
 80181dc:	4879      	ldr	r0, [pc, #484]	; (80183c4 <__ssvfiscanf_r+0x298>)
 80181de:	f7e8 f817 	bl	8000210 <memchr>
 80181e2:	b138      	cbz	r0, 80181f4 <__ssvfiscanf_r+0xc8>
 80181e4:	eba0 0309 	sub.w	r3, r0, r9
 80181e8:	2001      	movs	r0, #1
 80181ea:	4098      	lsls	r0, r3
 80181ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80181ee:	4318      	orrs	r0, r3
 80181f0:	9041      	str	r0, [sp, #260]	; 0x104
 80181f2:	46aa      	mov	sl, r5
 80181f4:	f89a 3000 	ldrb.w	r3, [sl]
 80181f8:	2b67      	cmp	r3, #103	; 0x67
 80181fa:	f10a 0501 	add.w	r5, sl, #1
 80181fe:	d82b      	bhi.n	8018258 <__ssvfiscanf_r+0x12c>
 8018200:	2b65      	cmp	r3, #101	; 0x65
 8018202:	f080 809f 	bcs.w	8018344 <__ssvfiscanf_r+0x218>
 8018206:	2b47      	cmp	r3, #71	; 0x47
 8018208:	d810      	bhi.n	801822c <__ssvfiscanf_r+0x100>
 801820a:	2b45      	cmp	r3, #69	; 0x45
 801820c:	f080 809a 	bcs.w	8018344 <__ssvfiscanf_r+0x218>
 8018210:	2b00      	cmp	r3, #0
 8018212:	d06c      	beq.n	80182ee <__ssvfiscanf_r+0x1c2>
 8018214:	2b25      	cmp	r3, #37	; 0x25
 8018216:	d051      	beq.n	80182bc <__ssvfiscanf_r+0x190>
 8018218:	2303      	movs	r3, #3
 801821a:	9347      	str	r3, [sp, #284]	; 0x11c
 801821c:	9742      	str	r7, [sp, #264]	; 0x108
 801821e:	e027      	b.n	8018270 <__ssvfiscanf_r+0x144>
 8018220:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018222:	fb07 1303 	mla	r3, r7, r3, r1
 8018226:	3b30      	subs	r3, #48	; 0x30
 8018228:	9343      	str	r3, [sp, #268]	; 0x10c
 801822a:	e7cf      	b.n	80181cc <__ssvfiscanf_r+0xa0>
 801822c:	2b5b      	cmp	r3, #91	; 0x5b
 801822e:	d06a      	beq.n	8018306 <__ssvfiscanf_r+0x1da>
 8018230:	d80c      	bhi.n	801824c <__ssvfiscanf_r+0x120>
 8018232:	2b58      	cmp	r3, #88	; 0x58
 8018234:	d1f0      	bne.n	8018218 <__ssvfiscanf_r+0xec>
 8018236:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801823c:	9241      	str	r2, [sp, #260]	; 0x104
 801823e:	2210      	movs	r2, #16
 8018240:	9242      	str	r2, [sp, #264]	; 0x108
 8018242:	2b6e      	cmp	r3, #110	; 0x6e
 8018244:	bf8c      	ite	hi
 8018246:	2304      	movhi	r3, #4
 8018248:	2303      	movls	r3, #3
 801824a:	e010      	b.n	801826e <__ssvfiscanf_r+0x142>
 801824c:	2b63      	cmp	r3, #99	; 0x63
 801824e:	d065      	beq.n	801831c <__ssvfiscanf_r+0x1f0>
 8018250:	2b64      	cmp	r3, #100	; 0x64
 8018252:	d1e1      	bne.n	8018218 <__ssvfiscanf_r+0xec>
 8018254:	9742      	str	r7, [sp, #264]	; 0x108
 8018256:	e7f4      	b.n	8018242 <__ssvfiscanf_r+0x116>
 8018258:	2b70      	cmp	r3, #112	; 0x70
 801825a:	d04b      	beq.n	80182f4 <__ssvfiscanf_r+0x1c8>
 801825c:	d826      	bhi.n	80182ac <__ssvfiscanf_r+0x180>
 801825e:	2b6e      	cmp	r3, #110	; 0x6e
 8018260:	d062      	beq.n	8018328 <__ssvfiscanf_r+0x1fc>
 8018262:	d84c      	bhi.n	80182fe <__ssvfiscanf_r+0x1d2>
 8018264:	2b69      	cmp	r3, #105	; 0x69
 8018266:	d1d7      	bne.n	8018218 <__ssvfiscanf_r+0xec>
 8018268:	2300      	movs	r3, #0
 801826a:	9342      	str	r3, [sp, #264]	; 0x108
 801826c:	2303      	movs	r3, #3
 801826e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018270:	6863      	ldr	r3, [r4, #4]
 8018272:	2b00      	cmp	r3, #0
 8018274:	dd68      	ble.n	8018348 <__ssvfiscanf_r+0x21c>
 8018276:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018278:	0659      	lsls	r1, r3, #25
 801827a:	d407      	bmi.n	801828c <__ssvfiscanf_r+0x160>
 801827c:	f7ff f8b2 	bl	80173e4 <__locale_ctype_ptr>
 8018280:	6823      	ldr	r3, [r4, #0]
 8018282:	781a      	ldrb	r2, [r3, #0]
 8018284:	4410      	add	r0, r2
 8018286:	7842      	ldrb	r2, [r0, #1]
 8018288:	0712      	lsls	r2, r2, #28
 801828a:	d464      	bmi.n	8018356 <__ssvfiscanf_r+0x22a>
 801828c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801828e:	2b02      	cmp	r3, #2
 8018290:	dc73      	bgt.n	801837a <__ssvfiscanf_r+0x24e>
 8018292:	466b      	mov	r3, sp
 8018294:	4622      	mov	r2, r4
 8018296:	a941      	add	r1, sp, #260	; 0x104
 8018298:	4630      	mov	r0, r6
 801829a:	f000 f897 	bl	80183cc <_scanf_chars>
 801829e:	2801      	cmp	r0, #1
 80182a0:	f000 8089 	beq.w	80183b6 <__ssvfiscanf_r+0x28a>
 80182a4:	2802      	cmp	r0, #2
 80182a6:	f47f af71 	bne.w	801818c <__ssvfiscanf_r+0x60>
 80182aa:	e01d      	b.n	80182e8 <__ssvfiscanf_r+0x1bc>
 80182ac:	2b75      	cmp	r3, #117	; 0x75
 80182ae:	d0d1      	beq.n	8018254 <__ssvfiscanf_r+0x128>
 80182b0:	2b78      	cmp	r3, #120	; 0x78
 80182b2:	d0c0      	beq.n	8018236 <__ssvfiscanf_r+0x10a>
 80182b4:	2b73      	cmp	r3, #115	; 0x73
 80182b6:	d1af      	bne.n	8018218 <__ssvfiscanf_r+0xec>
 80182b8:	2302      	movs	r3, #2
 80182ba:	e7d8      	b.n	801826e <__ssvfiscanf_r+0x142>
 80182bc:	6863      	ldr	r3, [r4, #4]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	dd0c      	ble.n	80182dc <__ssvfiscanf_r+0x1b0>
 80182c2:	6823      	ldr	r3, [r4, #0]
 80182c4:	781a      	ldrb	r2, [r3, #0]
 80182c6:	455a      	cmp	r2, fp
 80182c8:	d175      	bne.n	80183b6 <__ssvfiscanf_r+0x28a>
 80182ca:	3301      	adds	r3, #1
 80182cc:	6862      	ldr	r2, [r4, #4]
 80182ce:	6023      	str	r3, [r4, #0]
 80182d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80182d2:	3a01      	subs	r2, #1
 80182d4:	3301      	adds	r3, #1
 80182d6:	6062      	str	r2, [r4, #4]
 80182d8:	9345      	str	r3, [sp, #276]	; 0x114
 80182da:	e757      	b.n	801818c <__ssvfiscanf_r+0x60>
 80182dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80182de:	4621      	mov	r1, r4
 80182e0:	4630      	mov	r0, r6
 80182e2:	4798      	blx	r3
 80182e4:	2800      	cmp	r0, #0
 80182e6:	d0ec      	beq.n	80182c2 <__ssvfiscanf_r+0x196>
 80182e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80182ea:	2800      	cmp	r0, #0
 80182ec:	d159      	bne.n	80183a2 <__ssvfiscanf_r+0x276>
 80182ee:	f04f 30ff 	mov.w	r0, #4294967295
 80182f2:	e05c      	b.n	80183ae <__ssvfiscanf_r+0x282>
 80182f4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80182f6:	f042 0220 	orr.w	r2, r2, #32
 80182fa:	9241      	str	r2, [sp, #260]	; 0x104
 80182fc:	e79b      	b.n	8018236 <__ssvfiscanf_r+0x10a>
 80182fe:	2308      	movs	r3, #8
 8018300:	9342      	str	r3, [sp, #264]	; 0x108
 8018302:	2304      	movs	r3, #4
 8018304:	e7b3      	b.n	801826e <__ssvfiscanf_r+0x142>
 8018306:	4629      	mov	r1, r5
 8018308:	4640      	mov	r0, r8
 801830a:	f000 f9c7 	bl	801869c <__sccl>
 801830e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018314:	9341      	str	r3, [sp, #260]	; 0x104
 8018316:	4605      	mov	r5, r0
 8018318:	2301      	movs	r3, #1
 801831a:	e7a8      	b.n	801826e <__ssvfiscanf_r+0x142>
 801831c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801831e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018322:	9341      	str	r3, [sp, #260]	; 0x104
 8018324:	2300      	movs	r3, #0
 8018326:	e7a2      	b.n	801826e <__ssvfiscanf_r+0x142>
 8018328:	9841      	ldr	r0, [sp, #260]	; 0x104
 801832a:	06c3      	lsls	r3, r0, #27
 801832c:	f53f af2e 	bmi.w	801818c <__ssvfiscanf_r+0x60>
 8018330:	9b00      	ldr	r3, [sp, #0]
 8018332:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018334:	1d19      	adds	r1, r3, #4
 8018336:	9100      	str	r1, [sp, #0]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	07c0      	lsls	r0, r0, #31
 801833c:	bf4c      	ite	mi
 801833e:	801a      	strhmi	r2, [r3, #0]
 8018340:	601a      	strpl	r2, [r3, #0]
 8018342:	e723      	b.n	801818c <__ssvfiscanf_r+0x60>
 8018344:	2305      	movs	r3, #5
 8018346:	e792      	b.n	801826e <__ssvfiscanf_r+0x142>
 8018348:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801834a:	4621      	mov	r1, r4
 801834c:	4630      	mov	r0, r6
 801834e:	4798      	blx	r3
 8018350:	2800      	cmp	r0, #0
 8018352:	d090      	beq.n	8018276 <__ssvfiscanf_r+0x14a>
 8018354:	e7c8      	b.n	80182e8 <__ssvfiscanf_r+0x1bc>
 8018356:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018358:	3201      	adds	r2, #1
 801835a:	9245      	str	r2, [sp, #276]	; 0x114
 801835c:	6862      	ldr	r2, [r4, #4]
 801835e:	3a01      	subs	r2, #1
 8018360:	2a00      	cmp	r2, #0
 8018362:	6062      	str	r2, [r4, #4]
 8018364:	dd02      	ble.n	801836c <__ssvfiscanf_r+0x240>
 8018366:	3301      	adds	r3, #1
 8018368:	6023      	str	r3, [r4, #0]
 801836a:	e787      	b.n	801827c <__ssvfiscanf_r+0x150>
 801836c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801836e:	4621      	mov	r1, r4
 8018370:	4630      	mov	r0, r6
 8018372:	4798      	blx	r3
 8018374:	2800      	cmp	r0, #0
 8018376:	d081      	beq.n	801827c <__ssvfiscanf_r+0x150>
 8018378:	e7b6      	b.n	80182e8 <__ssvfiscanf_r+0x1bc>
 801837a:	2b04      	cmp	r3, #4
 801837c:	dc06      	bgt.n	801838c <__ssvfiscanf_r+0x260>
 801837e:	466b      	mov	r3, sp
 8018380:	4622      	mov	r2, r4
 8018382:	a941      	add	r1, sp, #260	; 0x104
 8018384:	4630      	mov	r0, r6
 8018386:	f000 f885 	bl	8018494 <_scanf_i>
 801838a:	e788      	b.n	801829e <__ssvfiscanf_r+0x172>
 801838c:	4b0e      	ldr	r3, [pc, #56]	; (80183c8 <__ssvfiscanf_r+0x29c>)
 801838e:	2b00      	cmp	r3, #0
 8018390:	f43f aefc 	beq.w	801818c <__ssvfiscanf_r+0x60>
 8018394:	466b      	mov	r3, sp
 8018396:	4622      	mov	r2, r4
 8018398:	a941      	add	r1, sp, #260	; 0x104
 801839a:	4630      	mov	r0, r6
 801839c:	f7fc fd72 	bl	8014e84 <_scanf_float>
 80183a0:	e77d      	b.n	801829e <__ssvfiscanf_r+0x172>
 80183a2:	89a3      	ldrh	r3, [r4, #12]
 80183a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80183a8:	bf18      	it	ne
 80183aa:	f04f 30ff 	movne.w	r0, #4294967295
 80183ae:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80183b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80183b8:	e7f9      	b.n	80183ae <__ssvfiscanf_r+0x282>
 80183ba:	bf00      	nop
 80183bc:	08018079 	.word	0x08018079
 80183c0:	080180f3 	.word	0x080180f3
 80183c4:	08019022 	.word	0x08019022
 80183c8:	08014e85 	.word	0x08014e85

080183cc <_scanf_chars>:
 80183cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183d0:	4615      	mov	r5, r2
 80183d2:	688a      	ldr	r2, [r1, #8]
 80183d4:	4680      	mov	r8, r0
 80183d6:	460c      	mov	r4, r1
 80183d8:	b932      	cbnz	r2, 80183e8 <_scanf_chars+0x1c>
 80183da:	698a      	ldr	r2, [r1, #24]
 80183dc:	2a00      	cmp	r2, #0
 80183de:	bf14      	ite	ne
 80183e0:	f04f 32ff 	movne.w	r2, #4294967295
 80183e4:	2201      	moveq	r2, #1
 80183e6:	608a      	str	r2, [r1, #8]
 80183e8:	6822      	ldr	r2, [r4, #0]
 80183ea:	06d1      	lsls	r1, r2, #27
 80183ec:	bf5f      	itttt	pl
 80183ee:	681a      	ldrpl	r2, [r3, #0]
 80183f0:	1d11      	addpl	r1, r2, #4
 80183f2:	6019      	strpl	r1, [r3, #0]
 80183f4:	6817      	ldrpl	r7, [r2, #0]
 80183f6:	2600      	movs	r6, #0
 80183f8:	69a3      	ldr	r3, [r4, #24]
 80183fa:	b1db      	cbz	r3, 8018434 <_scanf_chars+0x68>
 80183fc:	2b01      	cmp	r3, #1
 80183fe:	d107      	bne.n	8018410 <_scanf_chars+0x44>
 8018400:	682b      	ldr	r3, [r5, #0]
 8018402:	6962      	ldr	r2, [r4, #20]
 8018404:	781b      	ldrb	r3, [r3, #0]
 8018406:	5cd3      	ldrb	r3, [r2, r3]
 8018408:	b9a3      	cbnz	r3, 8018434 <_scanf_chars+0x68>
 801840a:	2e00      	cmp	r6, #0
 801840c:	d132      	bne.n	8018474 <_scanf_chars+0xa8>
 801840e:	e006      	b.n	801841e <_scanf_chars+0x52>
 8018410:	2b02      	cmp	r3, #2
 8018412:	d007      	beq.n	8018424 <_scanf_chars+0x58>
 8018414:	2e00      	cmp	r6, #0
 8018416:	d12d      	bne.n	8018474 <_scanf_chars+0xa8>
 8018418:	69a3      	ldr	r3, [r4, #24]
 801841a:	2b01      	cmp	r3, #1
 801841c:	d12a      	bne.n	8018474 <_scanf_chars+0xa8>
 801841e:	2001      	movs	r0, #1
 8018420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018424:	f7fe ffde 	bl	80173e4 <__locale_ctype_ptr>
 8018428:	682b      	ldr	r3, [r5, #0]
 801842a:	781b      	ldrb	r3, [r3, #0]
 801842c:	4418      	add	r0, r3
 801842e:	7843      	ldrb	r3, [r0, #1]
 8018430:	071b      	lsls	r3, r3, #28
 8018432:	d4ef      	bmi.n	8018414 <_scanf_chars+0x48>
 8018434:	6823      	ldr	r3, [r4, #0]
 8018436:	06da      	lsls	r2, r3, #27
 8018438:	bf5e      	ittt	pl
 801843a:	682b      	ldrpl	r3, [r5, #0]
 801843c:	781b      	ldrbpl	r3, [r3, #0]
 801843e:	703b      	strbpl	r3, [r7, #0]
 8018440:	682a      	ldr	r2, [r5, #0]
 8018442:	686b      	ldr	r3, [r5, #4]
 8018444:	f102 0201 	add.w	r2, r2, #1
 8018448:	602a      	str	r2, [r5, #0]
 801844a:	68a2      	ldr	r2, [r4, #8]
 801844c:	f103 33ff 	add.w	r3, r3, #4294967295
 8018450:	f102 32ff 	add.w	r2, r2, #4294967295
 8018454:	606b      	str	r3, [r5, #4]
 8018456:	f106 0601 	add.w	r6, r6, #1
 801845a:	bf58      	it	pl
 801845c:	3701      	addpl	r7, #1
 801845e:	60a2      	str	r2, [r4, #8]
 8018460:	b142      	cbz	r2, 8018474 <_scanf_chars+0xa8>
 8018462:	2b00      	cmp	r3, #0
 8018464:	dcc8      	bgt.n	80183f8 <_scanf_chars+0x2c>
 8018466:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801846a:	4629      	mov	r1, r5
 801846c:	4640      	mov	r0, r8
 801846e:	4798      	blx	r3
 8018470:	2800      	cmp	r0, #0
 8018472:	d0c1      	beq.n	80183f8 <_scanf_chars+0x2c>
 8018474:	6823      	ldr	r3, [r4, #0]
 8018476:	f013 0310 	ands.w	r3, r3, #16
 801847a:	d105      	bne.n	8018488 <_scanf_chars+0xbc>
 801847c:	68e2      	ldr	r2, [r4, #12]
 801847e:	3201      	adds	r2, #1
 8018480:	60e2      	str	r2, [r4, #12]
 8018482:	69a2      	ldr	r2, [r4, #24]
 8018484:	b102      	cbz	r2, 8018488 <_scanf_chars+0xbc>
 8018486:	703b      	strb	r3, [r7, #0]
 8018488:	6923      	ldr	r3, [r4, #16]
 801848a:	441e      	add	r6, r3
 801848c:	6126      	str	r6, [r4, #16]
 801848e:	2000      	movs	r0, #0
 8018490:	e7c6      	b.n	8018420 <_scanf_chars+0x54>
	...

08018494 <_scanf_i>:
 8018494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018498:	469a      	mov	sl, r3
 801849a:	4b74      	ldr	r3, [pc, #464]	; (801866c <_scanf_i+0x1d8>)
 801849c:	460c      	mov	r4, r1
 801849e:	4683      	mov	fp, r0
 80184a0:	4616      	mov	r6, r2
 80184a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80184a6:	b087      	sub	sp, #28
 80184a8:	ab03      	add	r3, sp, #12
 80184aa:	68a7      	ldr	r7, [r4, #8]
 80184ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80184b0:	4b6f      	ldr	r3, [pc, #444]	; (8018670 <_scanf_i+0x1dc>)
 80184b2:	69a1      	ldr	r1, [r4, #24]
 80184b4:	4a6f      	ldr	r2, [pc, #444]	; (8018674 <_scanf_i+0x1e0>)
 80184b6:	2903      	cmp	r1, #3
 80184b8:	bf08      	it	eq
 80184ba:	461a      	moveq	r2, r3
 80184bc:	1e7b      	subs	r3, r7, #1
 80184be:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80184c2:	bf84      	itt	hi
 80184c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80184c8:	60a3      	strhi	r3, [r4, #8]
 80184ca:	6823      	ldr	r3, [r4, #0]
 80184cc:	9200      	str	r2, [sp, #0]
 80184ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80184d2:	bf88      	it	hi
 80184d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80184d8:	f104 091c 	add.w	r9, r4, #28
 80184dc:	6023      	str	r3, [r4, #0]
 80184de:	bf8c      	ite	hi
 80184e0:	197f      	addhi	r7, r7, r5
 80184e2:	2700      	movls	r7, #0
 80184e4:	464b      	mov	r3, r9
 80184e6:	f04f 0800 	mov.w	r8, #0
 80184ea:	9301      	str	r3, [sp, #4]
 80184ec:	6831      	ldr	r1, [r6, #0]
 80184ee:	ab03      	add	r3, sp, #12
 80184f0:	2202      	movs	r2, #2
 80184f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80184f6:	7809      	ldrb	r1, [r1, #0]
 80184f8:	f7e7 fe8a 	bl	8000210 <memchr>
 80184fc:	9b01      	ldr	r3, [sp, #4]
 80184fe:	b330      	cbz	r0, 801854e <_scanf_i+0xba>
 8018500:	f1b8 0f01 	cmp.w	r8, #1
 8018504:	d15a      	bne.n	80185bc <_scanf_i+0x128>
 8018506:	6862      	ldr	r2, [r4, #4]
 8018508:	b92a      	cbnz	r2, 8018516 <_scanf_i+0x82>
 801850a:	6822      	ldr	r2, [r4, #0]
 801850c:	2108      	movs	r1, #8
 801850e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018512:	6061      	str	r1, [r4, #4]
 8018514:	6022      	str	r2, [r4, #0]
 8018516:	6822      	ldr	r2, [r4, #0]
 8018518:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801851c:	6022      	str	r2, [r4, #0]
 801851e:	68a2      	ldr	r2, [r4, #8]
 8018520:	1e51      	subs	r1, r2, #1
 8018522:	60a1      	str	r1, [r4, #8]
 8018524:	b19a      	cbz	r2, 801854e <_scanf_i+0xba>
 8018526:	6832      	ldr	r2, [r6, #0]
 8018528:	1c51      	adds	r1, r2, #1
 801852a:	6031      	str	r1, [r6, #0]
 801852c:	7812      	ldrb	r2, [r2, #0]
 801852e:	701a      	strb	r2, [r3, #0]
 8018530:	1c5d      	adds	r5, r3, #1
 8018532:	6873      	ldr	r3, [r6, #4]
 8018534:	3b01      	subs	r3, #1
 8018536:	2b00      	cmp	r3, #0
 8018538:	6073      	str	r3, [r6, #4]
 801853a:	dc07      	bgt.n	801854c <_scanf_i+0xb8>
 801853c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018540:	4631      	mov	r1, r6
 8018542:	4658      	mov	r0, fp
 8018544:	4798      	blx	r3
 8018546:	2800      	cmp	r0, #0
 8018548:	f040 8086 	bne.w	8018658 <_scanf_i+0x1c4>
 801854c:	462b      	mov	r3, r5
 801854e:	f108 0801 	add.w	r8, r8, #1
 8018552:	f1b8 0f03 	cmp.w	r8, #3
 8018556:	d1c8      	bne.n	80184ea <_scanf_i+0x56>
 8018558:	6862      	ldr	r2, [r4, #4]
 801855a:	b90a      	cbnz	r2, 8018560 <_scanf_i+0xcc>
 801855c:	220a      	movs	r2, #10
 801855e:	6062      	str	r2, [r4, #4]
 8018560:	6862      	ldr	r2, [r4, #4]
 8018562:	4945      	ldr	r1, [pc, #276]	; (8018678 <_scanf_i+0x1e4>)
 8018564:	6960      	ldr	r0, [r4, #20]
 8018566:	9301      	str	r3, [sp, #4]
 8018568:	1a89      	subs	r1, r1, r2
 801856a:	f000 f897 	bl	801869c <__sccl>
 801856e:	9b01      	ldr	r3, [sp, #4]
 8018570:	f04f 0800 	mov.w	r8, #0
 8018574:	461d      	mov	r5, r3
 8018576:	68a3      	ldr	r3, [r4, #8]
 8018578:	6822      	ldr	r2, [r4, #0]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d03a      	beq.n	80185f4 <_scanf_i+0x160>
 801857e:	6831      	ldr	r1, [r6, #0]
 8018580:	6960      	ldr	r0, [r4, #20]
 8018582:	f891 c000 	ldrb.w	ip, [r1]
 8018586:	f810 000c 	ldrb.w	r0, [r0, ip]
 801858a:	2800      	cmp	r0, #0
 801858c:	d032      	beq.n	80185f4 <_scanf_i+0x160>
 801858e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018592:	d121      	bne.n	80185d8 <_scanf_i+0x144>
 8018594:	0510      	lsls	r0, r2, #20
 8018596:	d51f      	bpl.n	80185d8 <_scanf_i+0x144>
 8018598:	f108 0801 	add.w	r8, r8, #1
 801859c:	b117      	cbz	r7, 80185a4 <_scanf_i+0x110>
 801859e:	3301      	adds	r3, #1
 80185a0:	3f01      	subs	r7, #1
 80185a2:	60a3      	str	r3, [r4, #8]
 80185a4:	6873      	ldr	r3, [r6, #4]
 80185a6:	3b01      	subs	r3, #1
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	6073      	str	r3, [r6, #4]
 80185ac:	dd1b      	ble.n	80185e6 <_scanf_i+0x152>
 80185ae:	6833      	ldr	r3, [r6, #0]
 80185b0:	3301      	adds	r3, #1
 80185b2:	6033      	str	r3, [r6, #0]
 80185b4:	68a3      	ldr	r3, [r4, #8]
 80185b6:	3b01      	subs	r3, #1
 80185b8:	60a3      	str	r3, [r4, #8]
 80185ba:	e7dc      	b.n	8018576 <_scanf_i+0xe2>
 80185bc:	f1b8 0f02 	cmp.w	r8, #2
 80185c0:	d1ad      	bne.n	801851e <_scanf_i+0x8a>
 80185c2:	6822      	ldr	r2, [r4, #0]
 80185c4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80185c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80185cc:	d1bf      	bne.n	801854e <_scanf_i+0xba>
 80185ce:	2110      	movs	r1, #16
 80185d0:	6061      	str	r1, [r4, #4]
 80185d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80185d6:	e7a1      	b.n	801851c <_scanf_i+0x88>
 80185d8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80185dc:	6022      	str	r2, [r4, #0]
 80185de:	780b      	ldrb	r3, [r1, #0]
 80185e0:	702b      	strb	r3, [r5, #0]
 80185e2:	3501      	adds	r5, #1
 80185e4:	e7de      	b.n	80185a4 <_scanf_i+0x110>
 80185e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80185ea:	4631      	mov	r1, r6
 80185ec:	4658      	mov	r0, fp
 80185ee:	4798      	blx	r3
 80185f0:	2800      	cmp	r0, #0
 80185f2:	d0df      	beq.n	80185b4 <_scanf_i+0x120>
 80185f4:	6823      	ldr	r3, [r4, #0]
 80185f6:	05d9      	lsls	r1, r3, #23
 80185f8:	d50c      	bpl.n	8018614 <_scanf_i+0x180>
 80185fa:	454d      	cmp	r5, r9
 80185fc:	d908      	bls.n	8018610 <_scanf_i+0x17c>
 80185fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018602:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018606:	4632      	mov	r2, r6
 8018608:	4658      	mov	r0, fp
 801860a:	4798      	blx	r3
 801860c:	1e6f      	subs	r7, r5, #1
 801860e:	463d      	mov	r5, r7
 8018610:	454d      	cmp	r5, r9
 8018612:	d029      	beq.n	8018668 <_scanf_i+0x1d4>
 8018614:	6822      	ldr	r2, [r4, #0]
 8018616:	f012 0210 	ands.w	r2, r2, #16
 801861a:	d113      	bne.n	8018644 <_scanf_i+0x1b0>
 801861c:	702a      	strb	r2, [r5, #0]
 801861e:	6863      	ldr	r3, [r4, #4]
 8018620:	9e00      	ldr	r6, [sp, #0]
 8018622:	4649      	mov	r1, r9
 8018624:	4658      	mov	r0, fp
 8018626:	47b0      	blx	r6
 8018628:	f8da 3000 	ldr.w	r3, [sl]
 801862c:	6821      	ldr	r1, [r4, #0]
 801862e:	1d1a      	adds	r2, r3, #4
 8018630:	f8ca 2000 	str.w	r2, [sl]
 8018634:	f011 0f20 	tst.w	r1, #32
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	d010      	beq.n	801865e <_scanf_i+0x1ca>
 801863c:	6018      	str	r0, [r3, #0]
 801863e:	68e3      	ldr	r3, [r4, #12]
 8018640:	3301      	adds	r3, #1
 8018642:	60e3      	str	r3, [r4, #12]
 8018644:	eba5 0509 	sub.w	r5, r5, r9
 8018648:	44a8      	add	r8, r5
 801864a:	6925      	ldr	r5, [r4, #16]
 801864c:	4445      	add	r5, r8
 801864e:	6125      	str	r5, [r4, #16]
 8018650:	2000      	movs	r0, #0
 8018652:	b007      	add	sp, #28
 8018654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018658:	f04f 0800 	mov.w	r8, #0
 801865c:	e7ca      	b.n	80185f4 <_scanf_i+0x160>
 801865e:	07ca      	lsls	r2, r1, #31
 8018660:	bf4c      	ite	mi
 8018662:	8018      	strhmi	r0, [r3, #0]
 8018664:	6018      	strpl	r0, [r3, #0]
 8018666:	e7ea      	b.n	801863e <_scanf_i+0x1aa>
 8018668:	2001      	movs	r0, #1
 801866a:	e7f2      	b.n	8018652 <_scanf_i+0x1be>
 801866c:	08018dbc 	.word	0x08018dbc
 8018670:	080160a1 	.word	0x080160a1
 8018674:	08018819 	.word	0x08018819
 8018678:	0801903d 	.word	0x0801903d

0801867c <_sbrk_r>:
 801867c:	b538      	push	{r3, r4, r5, lr}
 801867e:	4c06      	ldr	r4, [pc, #24]	; (8018698 <_sbrk_r+0x1c>)
 8018680:	2300      	movs	r3, #0
 8018682:	4605      	mov	r5, r0
 8018684:	4608      	mov	r0, r1
 8018686:	6023      	str	r3, [r4, #0]
 8018688:	f7ef f812 	bl	80076b0 <_sbrk>
 801868c:	1c43      	adds	r3, r0, #1
 801868e:	d102      	bne.n	8018696 <_sbrk_r+0x1a>
 8018690:	6823      	ldr	r3, [r4, #0]
 8018692:	b103      	cbz	r3, 8018696 <_sbrk_r+0x1a>
 8018694:	602b      	str	r3, [r5, #0]
 8018696:	bd38      	pop	{r3, r4, r5, pc}
 8018698:	2004cb6c 	.word	0x2004cb6c

0801869c <__sccl>:
 801869c:	b570      	push	{r4, r5, r6, lr}
 801869e:	780b      	ldrb	r3, [r1, #0]
 80186a0:	2b5e      	cmp	r3, #94	; 0x5e
 80186a2:	bf13      	iteet	ne
 80186a4:	1c4a      	addne	r2, r1, #1
 80186a6:	1c8a      	addeq	r2, r1, #2
 80186a8:	784b      	ldrbeq	r3, [r1, #1]
 80186aa:	2100      	movne	r1, #0
 80186ac:	bf08      	it	eq
 80186ae:	2101      	moveq	r1, #1
 80186b0:	1e44      	subs	r4, r0, #1
 80186b2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80186b6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80186ba:	42ac      	cmp	r4, r5
 80186bc:	d1fb      	bne.n	80186b6 <__sccl+0x1a>
 80186be:	b913      	cbnz	r3, 80186c6 <__sccl+0x2a>
 80186c0:	3a01      	subs	r2, #1
 80186c2:	4610      	mov	r0, r2
 80186c4:	bd70      	pop	{r4, r5, r6, pc}
 80186c6:	f081 0401 	eor.w	r4, r1, #1
 80186ca:	54c4      	strb	r4, [r0, r3]
 80186cc:	1c51      	adds	r1, r2, #1
 80186ce:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80186d2:	2d2d      	cmp	r5, #45	; 0x2d
 80186d4:	f101 36ff 	add.w	r6, r1, #4294967295
 80186d8:	460a      	mov	r2, r1
 80186da:	d006      	beq.n	80186ea <__sccl+0x4e>
 80186dc:	2d5d      	cmp	r5, #93	; 0x5d
 80186de:	d0f0      	beq.n	80186c2 <__sccl+0x26>
 80186e0:	b90d      	cbnz	r5, 80186e6 <__sccl+0x4a>
 80186e2:	4632      	mov	r2, r6
 80186e4:	e7ed      	b.n	80186c2 <__sccl+0x26>
 80186e6:	462b      	mov	r3, r5
 80186e8:	e7ef      	b.n	80186ca <__sccl+0x2e>
 80186ea:	780e      	ldrb	r6, [r1, #0]
 80186ec:	2e5d      	cmp	r6, #93	; 0x5d
 80186ee:	d0fa      	beq.n	80186e6 <__sccl+0x4a>
 80186f0:	42b3      	cmp	r3, r6
 80186f2:	dcf8      	bgt.n	80186e6 <__sccl+0x4a>
 80186f4:	3301      	adds	r3, #1
 80186f6:	429e      	cmp	r6, r3
 80186f8:	54c4      	strb	r4, [r0, r3]
 80186fa:	dcfb      	bgt.n	80186f4 <__sccl+0x58>
 80186fc:	3102      	adds	r1, #2
 80186fe:	e7e6      	b.n	80186ce <__sccl+0x32>

08018700 <strncmp>:
 8018700:	b510      	push	{r4, lr}
 8018702:	b16a      	cbz	r2, 8018720 <strncmp+0x20>
 8018704:	3901      	subs	r1, #1
 8018706:	1884      	adds	r4, r0, r2
 8018708:	f810 3b01 	ldrb.w	r3, [r0], #1
 801870c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018710:	4293      	cmp	r3, r2
 8018712:	d103      	bne.n	801871c <strncmp+0x1c>
 8018714:	42a0      	cmp	r0, r4
 8018716:	d001      	beq.n	801871c <strncmp+0x1c>
 8018718:	2b00      	cmp	r3, #0
 801871a:	d1f5      	bne.n	8018708 <strncmp+0x8>
 801871c:	1a98      	subs	r0, r3, r2
 801871e:	bd10      	pop	{r4, pc}
 8018720:	4610      	mov	r0, r2
 8018722:	e7fc      	b.n	801871e <strncmp+0x1e>

08018724 <_strtoul_l.isra.0>:
 8018724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018728:	4680      	mov	r8, r0
 801872a:	4689      	mov	r9, r1
 801872c:	4692      	mov	sl, r2
 801872e:	461e      	mov	r6, r3
 8018730:	460f      	mov	r7, r1
 8018732:	463d      	mov	r5, r7
 8018734:	9808      	ldr	r0, [sp, #32]
 8018736:	f815 4b01 	ldrb.w	r4, [r5], #1
 801873a:	f7fe fe4f 	bl	80173dc <__locale_ctype_ptr_l>
 801873e:	4420      	add	r0, r4
 8018740:	7843      	ldrb	r3, [r0, #1]
 8018742:	f013 0308 	ands.w	r3, r3, #8
 8018746:	d130      	bne.n	80187aa <_strtoul_l.isra.0+0x86>
 8018748:	2c2d      	cmp	r4, #45	; 0x2d
 801874a:	d130      	bne.n	80187ae <_strtoul_l.isra.0+0x8a>
 801874c:	787c      	ldrb	r4, [r7, #1]
 801874e:	1cbd      	adds	r5, r7, #2
 8018750:	2101      	movs	r1, #1
 8018752:	2e00      	cmp	r6, #0
 8018754:	d05c      	beq.n	8018810 <_strtoul_l.isra.0+0xec>
 8018756:	2e10      	cmp	r6, #16
 8018758:	d109      	bne.n	801876e <_strtoul_l.isra.0+0x4a>
 801875a:	2c30      	cmp	r4, #48	; 0x30
 801875c:	d107      	bne.n	801876e <_strtoul_l.isra.0+0x4a>
 801875e:	782b      	ldrb	r3, [r5, #0]
 8018760:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018764:	2b58      	cmp	r3, #88	; 0x58
 8018766:	d14e      	bne.n	8018806 <_strtoul_l.isra.0+0xe2>
 8018768:	786c      	ldrb	r4, [r5, #1]
 801876a:	2610      	movs	r6, #16
 801876c:	3502      	adds	r5, #2
 801876e:	f04f 32ff 	mov.w	r2, #4294967295
 8018772:	2300      	movs	r3, #0
 8018774:	fbb2 f2f6 	udiv	r2, r2, r6
 8018778:	fb06 fc02 	mul.w	ip, r6, r2
 801877c:	ea6f 0c0c 	mvn.w	ip, ip
 8018780:	4618      	mov	r0, r3
 8018782:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018786:	2f09      	cmp	r7, #9
 8018788:	d817      	bhi.n	80187ba <_strtoul_l.isra.0+0x96>
 801878a:	463c      	mov	r4, r7
 801878c:	42a6      	cmp	r6, r4
 801878e:	dd23      	ble.n	80187d8 <_strtoul_l.isra.0+0xb4>
 8018790:	2b00      	cmp	r3, #0
 8018792:	db1e      	blt.n	80187d2 <_strtoul_l.isra.0+0xae>
 8018794:	4282      	cmp	r2, r0
 8018796:	d31c      	bcc.n	80187d2 <_strtoul_l.isra.0+0xae>
 8018798:	d101      	bne.n	801879e <_strtoul_l.isra.0+0x7a>
 801879a:	45a4      	cmp	ip, r4
 801879c:	db19      	blt.n	80187d2 <_strtoul_l.isra.0+0xae>
 801879e:	fb00 4006 	mla	r0, r0, r6, r4
 80187a2:	2301      	movs	r3, #1
 80187a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80187a8:	e7eb      	b.n	8018782 <_strtoul_l.isra.0+0x5e>
 80187aa:	462f      	mov	r7, r5
 80187ac:	e7c1      	b.n	8018732 <_strtoul_l.isra.0+0xe>
 80187ae:	2c2b      	cmp	r4, #43	; 0x2b
 80187b0:	bf04      	itt	eq
 80187b2:	1cbd      	addeq	r5, r7, #2
 80187b4:	787c      	ldrbeq	r4, [r7, #1]
 80187b6:	4619      	mov	r1, r3
 80187b8:	e7cb      	b.n	8018752 <_strtoul_l.isra.0+0x2e>
 80187ba:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80187be:	2f19      	cmp	r7, #25
 80187c0:	d801      	bhi.n	80187c6 <_strtoul_l.isra.0+0xa2>
 80187c2:	3c37      	subs	r4, #55	; 0x37
 80187c4:	e7e2      	b.n	801878c <_strtoul_l.isra.0+0x68>
 80187c6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80187ca:	2f19      	cmp	r7, #25
 80187cc:	d804      	bhi.n	80187d8 <_strtoul_l.isra.0+0xb4>
 80187ce:	3c57      	subs	r4, #87	; 0x57
 80187d0:	e7dc      	b.n	801878c <_strtoul_l.isra.0+0x68>
 80187d2:	f04f 33ff 	mov.w	r3, #4294967295
 80187d6:	e7e5      	b.n	80187a4 <_strtoul_l.isra.0+0x80>
 80187d8:	2b00      	cmp	r3, #0
 80187da:	da09      	bge.n	80187f0 <_strtoul_l.isra.0+0xcc>
 80187dc:	2322      	movs	r3, #34	; 0x22
 80187de:	f8c8 3000 	str.w	r3, [r8]
 80187e2:	f04f 30ff 	mov.w	r0, #4294967295
 80187e6:	f1ba 0f00 	cmp.w	sl, #0
 80187ea:	d107      	bne.n	80187fc <_strtoul_l.isra.0+0xd8>
 80187ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187f0:	b101      	cbz	r1, 80187f4 <_strtoul_l.isra.0+0xd0>
 80187f2:	4240      	negs	r0, r0
 80187f4:	f1ba 0f00 	cmp.w	sl, #0
 80187f8:	d0f8      	beq.n	80187ec <_strtoul_l.isra.0+0xc8>
 80187fa:	b10b      	cbz	r3, 8018800 <_strtoul_l.isra.0+0xdc>
 80187fc:	f105 39ff 	add.w	r9, r5, #4294967295
 8018800:	f8ca 9000 	str.w	r9, [sl]
 8018804:	e7f2      	b.n	80187ec <_strtoul_l.isra.0+0xc8>
 8018806:	2430      	movs	r4, #48	; 0x30
 8018808:	2e00      	cmp	r6, #0
 801880a:	d1b0      	bne.n	801876e <_strtoul_l.isra.0+0x4a>
 801880c:	2608      	movs	r6, #8
 801880e:	e7ae      	b.n	801876e <_strtoul_l.isra.0+0x4a>
 8018810:	2c30      	cmp	r4, #48	; 0x30
 8018812:	d0a4      	beq.n	801875e <_strtoul_l.isra.0+0x3a>
 8018814:	260a      	movs	r6, #10
 8018816:	e7aa      	b.n	801876e <_strtoul_l.isra.0+0x4a>

08018818 <_strtoul_r>:
 8018818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801881a:	4c06      	ldr	r4, [pc, #24]	; (8018834 <_strtoul_r+0x1c>)
 801881c:	4d06      	ldr	r5, [pc, #24]	; (8018838 <_strtoul_r+0x20>)
 801881e:	6824      	ldr	r4, [r4, #0]
 8018820:	6a24      	ldr	r4, [r4, #32]
 8018822:	2c00      	cmp	r4, #0
 8018824:	bf08      	it	eq
 8018826:	462c      	moveq	r4, r5
 8018828:	9400      	str	r4, [sp, #0]
 801882a:	f7ff ff7b 	bl	8018724 <_strtoul_l.isra.0>
 801882e:	b003      	add	sp, #12
 8018830:	bd30      	pop	{r4, r5, pc}
 8018832:	bf00      	nop
 8018834:	2000000c 	.word	0x2000000c
 8018838:	20000070 	.word	0x20000070

0801883c <__submore>:
 801883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018840:	460c      	mov	r4, r1
 8018842:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018848:	4299      	cmp	r1, r3
 801884a:	d11d      	bne.n	8018888 <__submore+0x4c>
 801884c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018850:	f7ff fa66 	bl	8017d20 <_malloc_r>
 8018854:	b918      	cbnz	r0, 801885e <__submore+0x22>
 8018856:	f04f 30ff 	mov.w	r0, #4294967295
 801885a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801885e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018862:	63a3      	str	r3, [r4, #56]	; 0x38
 8018864:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018868:	6360      	str	r0, [r4, #52]	; 0x34
 801886a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801886e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018872:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018876:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801887a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801887e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018882:	6020      	str	r0, [r4, #0]
 8018884:	2000      	movs	r0, #0
 8018886:	e7e8      	b.n	801885a <__submore+0x1e>
 8018888:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801888a:	0077      	lsls	r7, r6, #1
 801888c:	463a      	mov	r2, r7
 801888e:	f000 f837 	bl	8018900 <_realloc_r>
 8018892:	4605      	mov	r5, r0
 8018894:	2800      	cmp	r0, #0
 8018896:	d0de      	beq.n	8018856 <__submore+0x1a>
 8018898:	eb00 0806 	add.w	r8, r0, r6
 801889c:	4601      	mov	r1, r0
 801889e:	4632      	mov	r2, r6
 80188a0:	4640      	mov	r0, r8
 80188a2:	f7fe fdd7 	bl	8017454 <memcpy>
 80188a6:	f8c4 8000 	str.w	r8, [r4]
 80188aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80188ae:	e7e9      	b.n	8018884 <__submore+0x48>

080188b0 <__ascii_wctomb>:
 80188b0:	b149      	cbz	r1, 80188c6 <__ascii_wctomb+0x16>
 80188b2:	2aff      	cmp	r2, #255	; 0xff
 80188b4:	bf85      	ittet	hi
 80188b6:	238a      	movhi	r3, #138	; 0x8a
 80188b8:	6003      	strhi	r3, [r0, #0]
 80188ba:	700a      	strbls	r2, [r1, #0]
 80188bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80188c0:	bf98      	it	ls
 80188c2:	2001      	movls	r0, #1
 80188c4:	4770      	bx	lr
 80188c6:	4608      	mov	r0, r1
 80188c8:	4770      	bx	lr

080188ca <memmove>:
 80188ca:	4288      	cmp	r0, r1
 80188cc:	b510      	push	{r4, lr}
 80188ce:	eb01 0302 	add.w	r3, r1, r2
 80188d2:	d807      	bhi.n	80188e4 <memmove+0x1a>
 80188d4:	1e42      	subs	r2, r0, #1
 80188d6:	4299      	cmp	r1, r3
 80188d8:	d00a      	beq.n	80188f0 <memmove+0x26>
 80188da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80188e2:	e7f8      	b.n	80188d6 <memmove+0xc>
 80188e4:	4283      	cmp	r3, r0
 80188e6:	d9f5      	bls.n	80188d4 <memmove+0xa>
 80188e8:	1881      	adds	r1, r0, r2
 80188ea:	1ad2      	subs	r2, r2, r3
 80188ec:	42d3      	cmn	r3, r2
 80188ee:	d100      	bne.n	80188f2 <memmove+0x28>
 80188f0:	bd10      	pop	{r4, pc}
 80188f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80188f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80188fa:	e7f7      	b.n	80188ec <memmove+0x22>

080188fc <__malloc_lock>:
 80188fc:	4770      	bx	lr

080188fe <__malloc_unlock>:
 80188fe:	4770      	bx	lr

08018900 <_realloc_r>:
 8018900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018902:	4607      	mov	r7, r0
 8018904:	4614      	mov	r4, r2
 8018906:	460e      	mov	r6, r1
 8018908:	b921      	cbnz	r1, 8018914 <_realloc_r+0x14>
 801890a:	4611      	mov	r1, r2
 801890c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018910:	f7ff ba06 	b.w	8017d20 <_malloc_r>
 8018914:	b922      	cbnz	r2, 8018920 <_realloc_r+0x20>
 8018916:	f7ff f9b5 	bl	8017c84 <_free_r>
 801891a:	4625      	mov	r5, r4
 801891c:	4628      	mov	r0, r5
 801891e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018920:	f000 f814 	bl	801894c <_malloc_usable_size_r>
 8018924:	42a0      	cmp	r0, r4
 8018926:	d20f      	bcs.n	8018948 <_realloc_r+0x48>
 8018928:	4621      	mov	r1, r4
 801892a:	4638      	mov	r0, r7
 801892c:	f7ff f9f8 	bl	8017d20 <_malloc_r>
 8018930:	4605      	mov	r5, r0
 8018932:	2800      	cmp	r0, #0
 8018934:	d0f2      	beq.n	801891c <_realloc_r+0x1c>
 8018936:	4631      	mov	r1, r6
 8018938:	4622      	mov	r2, r4
 801893a:	f7fe fd8b 	bl	8017454 <memcpy>
 801893e:	4631      	mov	r1, r6
 8018940:	4638      	mov	r0, r7
 8018942:	f7ff f99f 	bl	8017c84 <_free_r>
 8018946:	e7e9      	b.n	801891c <_realloc_r+0x1c>
 8018948:	4635      	mov	r5, r6
 801894a:	e7e7      	b.n	801891c <_realloc_r+0x1c>

0801894c <_malloc_usable_size_r>:
 801894c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018950:	1f18      	subs	r0, r3, #4
 8018952:	2b00      	cmp	r3, #0
 8018954:	bfbc      	itt	lt
 8018956:	580b      	ldrlt	r3, [r1, r0]
 8018958:	18c0      	addlt	r0, r0, r3
 801895a:	4770      	bx	lr

0801895c <_init>:
 801895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801895e:	bf00      	nop
 8018960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018962:	bc08      	pop	{r3}
 8018964:	469e      	mov	lr, r3
 8018966:	4770      	bx	lr

08018968 <_fini>:
 8018968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801896a:	bf00      	nop
 801896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801896e:	bc08      	pop	{r3}
 8018970:	469e      	mov	lr, r3
 8018972:	4770      	bx	lr
