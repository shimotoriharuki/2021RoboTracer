
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013de0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  08013fa0  08013fa0  00023fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801483c  0801483c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801483c  0801483c  0002483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014844  08014844  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014844  08014844  00024844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801484c  0801484c  0002484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08014850  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ec0  200001dc  08014a2c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000509c  08014a2c  0003509c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bfd3  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005eae  00000000  00000000  0005c1df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e58  00000000  00000000  00062090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd8  00000000  00000000  00063ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034870  00000000  00000000  00065ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f78e  00000000  00000000  0009a330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c652  00000000  00000000  000b9abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c6110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009368  00000000  00000000  001c618c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013f88 	.word	0x08013f88

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08013f88 	.word	0x08013f88

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f004 fd86 	bl	8005ae8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20002c54 	.word	0x20002c54

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f004 fd6e 	bl	8005ae8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20002c54 	.word	0x20002c54

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f004 fbf7 	bl	8005814 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f003 f95e 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f003 f958 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f003 f952 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f003 f94c 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f003 f946 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f003 f940 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f003 f93a 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f003 f934 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f003 f92e 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f003 f928 	bl	80042e8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f003 f91c 	bl	80042e8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f003 f916 	bl	80042e8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f00f feb1 	bl	8010e90 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:
#include "G_variables.h"

#define MAX_ENCODER_CNT 65535
#define CNT_OFFSET 32768

Encoder::Encoder() : cnt_l_(CNT_OFFSET), cnt_r_(CNT_OFFSET){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800116a:	805a      	strh	r2, [r3, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001184:	213c      	movs	r1, #60	; 0x3c
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <_ZN7Encoder4initEv+0x30>)
 8001188:	f007 fffc 	bl	8009184 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800118c:	213c      	movs	r1, #60	; 0x3c
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <_ZN7Encoder4initEv+0x34>)
 8001190:	f007 fff8 	bl	8009184 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_ZN7Encoder4initEv+0x38>)
 8001196:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <_ZN7Encoder4initEv+0x3c>)
 800119e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20002e78 	.word	0x20002e78
 80011b0:	20002b8c 	.word	0x20002b8c
 80011b4:	40010000 	.word	0x40010000
 80011b8:	40010400 	.word	0x40010400

080011bc <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	cnt_l_ = TIM1 -> CNT;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder9updateCntEv+0x28>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	801a      	strh	r2, [r3, #0]
	cnt_r_ = TIM8 -> CNT;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder9updateCntEv+0x2c>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	805a      	strh	r2, [r3, #2]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400

080011ec <_ZN7Encoder6getCntERsS0_>:

void Encoder::getCnt(int16_t &cnt_l, int16_t &cnt_r)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	cnt_l = CNT_OFFSET - cnt_l_;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	881a      	ldrh	r2, [r3, #0]
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <_ZN7Encoder6getCntERsS0_+0x38>)
 80011fe:	1a9b      	subs	r3, r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	b21a      	sxth	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	801a      	strh	r2, [r3, #0]
	cnt_r = cnt_r_ - CNT_OFFSET;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	885b      	ldrh	r3, [r3, #2]
 800120c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001210:	b29b      	uxth	r3, r3
 8001212:	b21a      	sxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	801a      	strh	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	ffff8000 	.word	0xffff8000

08001228 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	801a      	strh	r2, [r3, #0]
	cnt_r_ = 0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	805a      	strh	r2, [r3, #2]
	TIM1 -> CNT = CNT_OFFSET;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <_ZN7Encoder8clearCntEv+0x30>)
 800123e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <_ZN7Encoder8clearCntEv+0x34>)
 8001246:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40010000 	.word	0x40010000
 800125c:	40010400 	.word	0x40010400

08001260 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(char *p_folder_name, char *p_file_name, short size, int *data, char state){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f8cc 	bl	8001414 <create_path>

	if(state == OVER_WRITE){
 800127c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d108      	bne.n	8001296 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001284:	481e      	ldr	r0, [pc, #120]	; (8001300 <sd_write_array_int+0xa0>)
 8001286:	f00d f9d8 	bl	800e63a <f_chdir>
		f_unlink(filepath);	//一回消す
 800128a:	481e      	ldr	r0, [pc, #120]	; (8001304 <sd_write_array_int+0xa4>)
 800128c:	f00d fc43 	bl	800eb16 <f_unlink>
		f_chdir("..");
 8001290:	481d      	ldr	r0, [pc, #116]	; (8001308 <sd_write_array_int+0xa8>)
 8001292:	f00d f9d2 	bl	800e63a <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001296:	f000 f8d3 	bl	8001440 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800129a:	2300      	movs	r3, #0
 800129c:	82fb      	strh	r3, [r7, #22]
 800129e:	e021      	b.n	80012e4 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 80012a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <sd_write_array_int+0xac>)
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <sd_write_array_int+0xb0>)
 80012b2:	f00e fe5d 	bl	800ff70 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <sd_write_array_int+0xb4>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4815      	ldr	r0, [pc, #84]	; (8001314 <sd_write_array_int+0xb4>)
 80012be:	f00d fa06 	bl	800e6ce <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80012c2:	4813      	ldr	r0, [pc, #76]	; (8001310 <sd_write_array_int+0xb0>)
 80012c4:	f7fe ff9c 	bl	8000200 <strlen>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <sd_write_array_int+0xb8>)
 80012cc:	4910      	ldr	r1, [pc, #64]	; (8001310 <sd_write_array_int+0xb0>)
 80012ce:	4811      	ldr	r0, [pc, #68]	; (8001314 <sd_write_array_int+0xb4>)
 80012d0:	f00c ff77 	bl	800e1c2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80012d4:	f000 f8ce 	bl	8001474 <bufclear>
	for(short i = 0 ; i < size; i++){
 80012d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	82fb      	strh	r3, [r7, #22]
 80012e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbd7      	blt.n	80012a0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <sd_write_array_int+0xb4>)
 80012f2:	f00d f978 	bl	800e5e6 <f_close>

	return ret;
 80012f6:	7d7b      	ldrb	r3, [r7, #21]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20001904 	.word	0x20001904
 8001304:	200007c0 	.word	0x200007c0
 8001308:	08013fa8 	.word	0x08013fa8
 800130c:	08013fac 	.word	0x08013fac
 8001310:	20001a04 	.word	0x20001a04
 8001314:	20001a94 	.word	0x20001a94
 8001318:	20001a84 	.word	0x20001a84

0800131c <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(char *p_folder_name, char *p_file_name, short size, int *data){
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	4613      	mov	r3, r2
 800132a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 f86c 	bl	8001414 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800133c:	f000 f880 	bl	8001440 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001340:	e019      	b.n	8001376 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 8001342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	461a      	mov	r2, r3
 800134e:	4913      	ldr	r1, [pc, #76]	; (800139c <sd_read_array_int+0x80>)
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <sd_read_array_int+0x84>)
 8001352:	f00e fe61 	bl	8010018 <siscanf>
		i++;
 8001356:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800135a:	b29b      	uxth	r3, r3
 800135c:	3301      	adds	r3, #1
 800135e:	b29b      	uxth	r3, r3
 8001360:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001362:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136a:	429a      	cmp	r2, r3
 800136c:	db03      	blt.n	8001376 <sd_read_array_int+0x5a>
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	3b01      	subs	r3, #1
 8001372:	b29b      	uxth	r3, r3
 8001374:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <sd_read_array_int+0x88>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <sd_read_array_int+0x84>)
 800137c:	f00d fda6 	bl	800eecc <f_gets>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1dd      	bne.n	8001342 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001386:	f000 f875 	bl	8001474 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <sd_read_array_int+0x88>)
 800138c:	f00d f92b 	bl	800e5e6 <f_close>

	return ret;
 8001390:	7d7b      	ldrb	r3, [r7, #21]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08013fb0 	.word	0x08013fb0
 80013a0:	20001a04 	.word	0x20001a04
 80013a4:	20001a94 	.word	0x20001a94

080013a8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80013b2:	2201      	movs	r2, #1
 80013b4:	4908      	ldr	r1, [pc, #32]	; (80013d8 <sd_mount+0x30>)
 80013b6:	4809      	ldr	r0, [pc, #36]	; (80013dc <sd_mount+0x34>)
 80013b8:	f00c fb92 	bl	800dae0 <f_mount>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <sd_mount+0x20>
 80013c2:	2301      	movs	r3, #1
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	e001      	b.n	80013cc <sd_mount+0x24>
	else ret = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	71fb      	strb	r3, [r7, #7]

	return ret;
 80013cc:	79fb      	ldrb	r3, [r7, #7]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	08013fb4 	.word	0x08013fb4
 80013dc:	200008c0 	.word	0x200008c0

080013e0 <sd_unmount>:
//* 役割　：　SDカードをアンマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_unmount(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]

	if(f_mount(NULL, "", 1) == FR_OK) ret = 1;
 80013ea:	2201      	movs	r2, #1
 80013ec:	4908      	ldr	r1, [pc, #32]	; (8001410 <sd_unmount+0x30>)
 80013ee:	2000      	movs	r0, #0
 80013f0:	f00c fb76 	bl	800dae0 <f_mount>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <sd_unmount+0x20>
 80013fa:	2301      	movs	r3, #1
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	e001      	b.n	8001404 <sd_unmount+0x24>
	else ret = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001404:	79fb      	ldrb	r3, [r7, #7]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	08013fb4 	.word	0x08013fb4

08001414 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char *p_folder_name, char *p_file_name){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <create_path+0x24>)
 8001422:	f00e fe68 	bl	80100f6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <create_path+0x28>)
 800142a:	f00e fe64 	bl	80100f6 <strcpy>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20001904 	.word	0x20001904
 800143c:	200007c0 	.word	0x200007c0

08001440 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <fopen_folder_and_file+0x24>)
 8001446:	f00d fc27 	bl	800ec98 <f_mkdir>

	f_chdir(dirpath);
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <fopen_folder_and_file+0x24>)
 800144c:	f00d f8f5 	bl	800e63a <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001450:	2213      	movs	r2, #19
 8001452:	4905      	ldr	r1, [pc, #20]	; (8001468 <fopen_folder_and_file+0x28>)
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <fopen_folder_and_file+0x2c>)
 8001456:	f00c fb89 	bl	800db6c <f_open>

	f_chdir("..");
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <fopen_folder_and_file+0x30>)
 800145c:	f00d f8ed 	bl	800e63a <f_chdir>


}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20001904 	.word	0x20001904
 8001468:	200007c0 	.word	0x200007c0
 800146c:	20001a94 	.word	0x20001a94
 8001470:	08013fa8 	.word	0x08013fa8

08001474 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	e007      	b.n	8001490 <bufclear+0x1c>
		buffer[i] = '\0';
 8001480:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <bufclear+0x30>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3301      	adds	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b7f      	cmp	r3, #127	; 0x7f
 8001494:	ddf4      	ble.n	8001480 <bufclear+0xc>
	}
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20001a04 	.word	0x20001a04

080014a8 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <read_byte+0x54>)
 80014c4:	f004 f9a6 	bl	8005814 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80014c8:	f107 010f 	add.w	r1, r7, #15
 80014cc:	2364      	movs	r3, #100	; 0x64
 80014ce:	2201      	movs	r2, #1
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <read_byte+0x58>)
 80014d2:	f007 f81d 	bl	8008510 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80014d6:	f107 010e 	add.w	r1, r7, #14
 80014da:	2364      	movs	r3, #100	; 0x64
 80014dc:	2201      	movs	r2, #1
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <read_byte+0x58>)
 80014e0:	f007 f94a 	bl	8008778 <HAL_SPI_Receive>
	CS_SET;
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <read_byte+0x54>)
 80014ec:	f004 f992 	bl	8005814 <HAL_GPIO_WritePin>

	return val;
 80014f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40020400 	.word	0x40020400
 8001500:	20002b34 	.word	0x20002b34

08001504 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	460a      	mov	r2, r1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	4613      	mov	r3, r2
 8001512:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800151a:	b2db      	uxtb	r3, r3
 800151c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <write_byte+0x54>)
 8001526:	f004 f975 	bl	8005814 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800152a:	f107 010f 	add.w	r1, r7, #15
 800152e:	2364      	movs	r3, #100	; 0x64
 8001530:	2201      	movs	r2, #1
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <write_byte+0x58>)
 8001534:	f006 ffec 	bl	8008510 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001538:	1db9      	adds	r1, r7, #6
 800153a:	2364      	movs	r3, #100	; 0x64
 800153c:	2201      	movs	r2, #1
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <write_byte+0x58>)
 8001540:	f006 ffe6 	bl	8008510 <HAL_SPI_Transmit>
	CS_SET;
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <write_byte+0x54>)
 800154c:	f004 f962 	bl	8005814 <HAL_GPIO_WritePin>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40020400 	.word	0x40020400
 800155c:	20002b34 	.word	0x20002b34

08001560 <IMU_init>:

uint16_t IMU_init() {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff ff9c 	bl	80014a8 <read_byte>
 8001570:	4603      	mov	r3, r0
 8001572:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001574:	797b      	ldrb	r3, [r7, #5]
 8001576:	2be0      	cmp	r3, #224	; 0xe0
 8001578:	d119      	bne.n	80015ae <IMU_init+0x4e>
		ret = 1;
 800157a:	2301      	movs	r3, #1
 800157c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800157e:	2101      	movs	r1, #1
 8001580:	2006      	movs	r0, #6
 8001582:	f7ff ffbf 	bl	8001504 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001586:	2110      	movs	r1, #16
 8001588:	2003      	movs	r0, #3
 800158a:	f7ff ffbb 	bl	8001504 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800158e:	2120      	movs	r1, #32
 8001590:	207f      	movs	r0, #127	; 0x7f
 8001592:	f7ff ffb7 	bl	8001504 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001596:	2106      	movs	r1, #6
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff ffb3 	bl	8001504 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800159e:	2106      	movs	r1, #6
 80015a0:	2014      	movs	r0, #20
 80015a2:	f7ff ffaf 	bl	8001504 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80015a6:	2100      	movs	r1, #0
 80015a8:	207f      	movs	r0, #127	; 0x7f
 80015aa:	f7ff ffab 	bl	8001504 <write_byte>
	}
	return ret;
 80015ae:	88fb      	ldrh	r3, [r7, #6]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <read_gyro_data>:

void read_gyro_data() {
 80015b8:	b598      	push	{r3, r4, r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80015bc:	2033      	movs	r0, #51	; 0x33
 80015be:	f7ff ff73 	bl	80014a8 <read_byte>
 80015c2:	4603      	mov	r3, r0
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21c      	sxth	r4, r3
 80015c8:	2034      	movs	r0, #52	; 0x34
 80015ca:	f7ff ff6d 	bl	80014a8 <read_byte>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4323      	orrs	r3, r4
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <read_gyro_data+0x64>)
 80015d8:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80015da:	2035      	movs	r0, #53	; 0x35
 80015dc:	f7ff ff64 	bl	80014a8 <read_byte>
 80015e0:	4603      	mov	r3, r0
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21c      	sxth	r4, r3
 80015e6:	2036      	movs	r0, #54	; 0x36
 80015e8:	f7ff ff5e 	bl	80014a8 <read_byte>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4323      	orrs	r3, r4
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <read_gyro_data+0x68>)
 80015f6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80015f8:	2037      	movs	r0, #55	; 0x37
 80015fa:	f7ff ff55 	bl	80014a8 <read_byte>
 80015fe:	4603      	mov	r3, r0
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21c      	sxth	r4, r3
 8001604:	2038      	movs	r0, #56	; 0x38
 8001606:	f7ff ff4f 	bl	80014a8 <read_byte>
 800160a:	4603      	mov	r3, r0
 800160c:	b21b      	sxth	r3, r3
 800160e:	4323      	orrs	r3, r4
 8001610:	b21a      	sxth	r2, r3
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <read_gyro_data+0x6c>)
 8001614:	801a      	strh	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	bd98      	pop	{r3, r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	20002acc 	.word	0x20002acc
 8001620:	20002aca 	.word	0x20002aca
 8001624:	20002ac4 	.word	0x20002ac4

08001628 <read_accel_data>:

void read_accel_data() {
 8001628:	b598      	push	{r3, r4, r7, lr}
 800162a:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 800162c:	202d      	movs	r0, #45	; 0x2d
 800162e:	f7ff ff3b 	bl	80014a8 <read_byte>
 8001632:	4603      	mov	r3, r0
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21c      	sxth	r4, r3
 8001638:	202e      	movs	r0, #46	; 0x2e
 800163a:	f7ff ff35 	bl	80014a8 <read_byte>
 800163e:	4603      	mov	r3, r0
 8001640:	b21b      	sxth	r3, r3
 8001642:	4323      	orrs	r3, r4
 8001644:	b21a      	sxth	r2, r3
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <read_accel_data+0x64>)
 8001648:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 800164a:	202f      	movs	r0, #47	; 0x2f
 800164c:	f7ff ff2c 	bl	80014a8 <read_byte>
 8001650:	4603      	mov	r3, r0
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21c      	sxth	r4, r3
 8001656:	2030      	movs	r0, #48	; 0x30
 8001658:	f7ff ff26 	bl	80014a8 <read_byte>
 800165c:	4603      	mov	r3, r0
 800165e:	b21b      	sxth	r3, r3
 8001660:	4323      	orrs	r3, r4
 8001662:	b21a      	sxth	r2, r3
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <read_accel_data+0x68>)
 8001666:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001668:	2031      	movs	r0, #49	; 0x31
 800166a:	f7ff ff1d 	bl	80014a8 <read_byte>
 800166e:	4603      	mov	r3, r0
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21c      	sxth	r4, r3
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f7ff ff17 	bl	80014a8 <read_byte>
 800167a:	4603      	mov	r3, r0
 800167c:	b21b      	sxth	r3, r3
 800167e:	4323      	orrs	r3, r4
 8001680:	b21a      	sxth	r2, r3
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <read_accel_data+0x6c>)
 8001684:	801a      	strh	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	bd98      	pop	{r3, r4, r7, pc}
 800168a:	bf00      	nop
 800168c:	20002ac8 	.word	0x20002ac8
 8001690:	20002ace 	.word	0x20002ace
 8001694:	20002ac6 	.word	0x20002ac6

08001698 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
{

}
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	2b52      	cmp	r3, #82	; 0x52
 80016c0:	d112      	bne.n	80016e8 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c8:	4856      	ldr	r0, [pc, #344]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80016ca:	f004 f8a3 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d4:	4853      	ldr	r0, [pc, #332]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80016d6:	f004 f89d 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e0:	4850      	ldr	r0, [pc, #320]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80016e2:	f004 f897 	bl	8005814 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80016e6:	e098      	b.n	800181a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	2b47      	cmp	r3, #71	; 0x47
 80016ec:	d112      	bne.n	8001714 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f4:	484b      	ldr	r0, [pc, #300]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80016f6:	f004 f88d 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001700:	4848      	ldr	r0, [pc, #288]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 8001702:	f004 f887 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170c:	4845      	ldr	r0, [pc, #276]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 800170e:	f004 f881 	bl	8005814 <HAL_GPIO_WritePin>
}
 8001712:	e082      	b.n	800181a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	2b42      	cmp	r3, #66	; 0x42
 8001718:	d112      	bne.n	8001740 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001720:	4840      	ldr	r0, [pc, #256]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 8001722:	f004 f877 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172c:	483d      	ldr	r0, [pc, #244]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 800172e:	f004 f871 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001738:	483a      	ldr	r0, [pc, #232]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 800173a:	f004 f86b 	bl	8005814 <HAL_GPIO_WritePin>
}
 800173e:	e06c      	b.n	800181a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b43      	cmp	r3, #67	; 0x43
 8001744:	d112      	bne.n	800176c <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800174c:	4835      	ldr	r0, [pc, #212]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 800174e:	f004 f861 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001758:	4832      	ldr	r0, [pc, #200]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 800175a:	f004 f85b 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001764:	482f      	ldr	r0, [pc, #188]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 8001766:	f004 f855 	bl	8005814 <HAL_GPIO_WritePin>
}
 800176a:	e056      	b.n	800181a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	2b4d      	cmp	r3, #77	; 0x4d
 8001770:	d112      	bne.n	8001798 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001778:	482a      	ldr	r0, [pc, #168]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 800177a:	f004 f84b 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001784:	4827      	ldr	r0, [pc, #156]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 8001786:	f004 f845 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001790:	4824      	ldr	r0, [pc, #144]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 8001792:	f004 f83f 	bl	8005814 <HAL_GPIO_WritePin>
}
 8001796:	e040      	b.n	800181a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	2b59      	cmp	r3, #89	; 0x59
 800179c:	d112      	bne.n	80017c4 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	481f      	ldr	r0, [pc, #124]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80017a6:	f004 f835 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b0:	481c      	ldr	r0, [pc, #112]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80017b2:	f004 f82f 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017bc:	4819      	ldr	r0, [pc, #100]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80017be:	f004 f829 	bl	8005814 <HAL_GPIO_WritePin>
}
 80017c2:	e02a      	b.n	800181a <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b57      	cmp	r3, #87	; 0x57
 80017c8:	d112      	bne.n	80017f0 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d0:	4814      	ldr	r0, [pc, #80]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80017d2:	f004 f81f 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017dc:	4811      	ldr	r0, [pc, #68]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80017de:	f004 f819 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e8:	480e      	ldr	r0, [pc, #56]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80017ea:	f004 f813 	bl	8005814 <HAL_GPIO_WritePin>
}
 80017ee:	e014      	b.n	800181a <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	2b7e      	cmp	r3, #126	; 0x7e
 80017f4:	d111      	bne.n	800181a <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 80017fe:	f004 f809 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 800180a:	f004 f803 	bl	8005814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <_ZN3LED9fullColorEc+0x174>)
 8001816:	f003 fffd 	bl	8005814 <HAL_GPIO_WritePin>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020000 	.word	0x40020000

08001828 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
 8001834:	4613      	mov	r3, r2
 8001836:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001846:	4813      	ldr	r0, [pc, #76]	; (8001894 <_ZN3LED2LREaa+0x6c>)
 8001848:	f003 ffe4 	bl	8005814 <HAL_GPIO_WritePin>
 800184c:	e009      	b.n	8001862 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800184e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <_ZN3LED2LREaa+0x6c>)
 800185e:	f003 ffd9 	bl	8005814 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001862:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <_ZN3LED2LREaa+0x6c>)
 8001872:	f003 ffcf 	bl	8005814 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001876:	e009      	b.n	800188c <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001878:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <_ZN3LED2LREaa+0x6c>)
 8001888:	f003 ffc4 	bl	8005814 <HAL_GPIO_WritePin>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40020000 	.word	0x40020000

08001898 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8001898:	b580      	push	{r7, lr}
 800189a:	b092      	sub	sp, #72	; 0x48
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fef6 	bl	8001698 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
 80018b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
 80018b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b6:	331c      	adds	r3, #28
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
 80018ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	429a      	cmp	r2, r3
 80018c0:	d008      	beq.n	80018d4 <_ZN10LineSensorC1Ev+0x3c>
 80018c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	2200      	movs	r2, #0
 80018ca:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80018cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ce:	3302      	adds	r3, #2
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
 80018d2:	e7f2      	b.n	80018ba <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	643b      	str	r3, [r7, #64]	; 0x40
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e2:	3338      	adds	r3, #56	; 0x38
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d009      	beq.n	8001902 <_ZN10LineSensorC1Ev+0x6a>
 80018ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f0:	623b      	str	r3, [r7, #32]
		s = 0;
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80018fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fc:	3304      	adds	r3, #4
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
 8001900:	e7f1      	b.n	80018e6 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3338      	adds	r3, #56	; 0x38
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	429a      	cmp	r2, r3
 800191a:	d009      	beq.n	8001930 <_ZN10LineSensorC1Ev+0x98>
 800191c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191e:	617b      	str	r3, [r7, #20]
		m = 0;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8001928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192a:	3304      	adds	r3, #4
 800192c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800192e:	e7f1      	b.n	8001914 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	3338      	adds	r3, #56	; 0x38
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	429a      	cmp	r2, r3
 8001948:	d009      	beq.n	800195e <_ZN10LineSensorC1Ev+0xc6>
 800194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194c:	60bb      	str	r3, [r7, #8]
		s = 1;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001954:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	3304      	adds	r3, #4
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
 800195c:	e7f1      	b.n	8001942 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	3748      	adds	r7, #72	; 0x48
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	220e      	movs	r2, #14
 8001974:	4619      	mov	r1, r3
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8001978:	f002 fd1c 	bl	80043b4 <HAL_ADC_Start_DMA>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20002c0c 	.word	0x20002c0c

08001988 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b0d      	cmp	r3, #13
 8001998:	dc2f      	bgt.n	80019fa <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3392      	adds	r3, #146	; 0x92
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	33a0      	adds	r3, #160	; 0xa0
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3304      	adds	r3, #4
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	1a5b      	subs	r3, r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	440b      	add	r3, r1
 80019e6:	3306      	adds	r3, #6
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e7cc      	b.n	8001994 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001a04:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	d902      	bls.n	8001a14 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]


}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	200001f8 	.word	0x200001f8

08001a24 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8001a24:	b490      	push	{r4, r7}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a36:	2b0d      	cmp	r3, #13
 8001a38:	f200 8087 	bhi.w	8001b4a <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001a42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a46:	2b09      	cmp	r3, #9
 8001a48:	d81c      	bhi.n	8001a84 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8001a4a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001a4e:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8001a52:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4423      	add	r3, r4
 8001a62:	3306      	adds	r3, #6
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4403      	add	r3, r0
 8001a68:	3304      	adds	r3, #4
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	008b      	lsls	r3, r1, #2
 8001a6e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001a72:	440b      	add	r3, r1
 8001a74:	3b30      	subs	r3, #48	; 0x30
 8001a76:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8001a78:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001a82:	e7de      	b.n	8001a42 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001a8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a8e:	2b09      	cmp	r3, #9
 8001a90:	d84d      	bhi.n	8001b2e <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8001a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a96:	3301      	adds	r3, #1
 8001a98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001a9c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001aa0:	2b09      	cmp	r3, #9
 8001aa2:	d83e      	bhi.n	8001b22 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8001aa4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b30      	subs	r3, #48	; 0x30
 8001ab2:	ed93 7a00 	vldr	s14, [r3]
 8001ab6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b30      	subs	r3, #48	; 0x30
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	d521      	bpl.n	8001b16 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8001ad2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001adc:	4413      	add	r3, r2
 8001ade:	3b30      	subs	r3, #48	; 0x30
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8001ae4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001ae8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001af2:	440a      	add	r2, r1
 8001af4:	3a30      	subs	r2, #48	; 0x30
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001afe:	440b      	add	r3, r1
 8001b00:	3b30      	subs	r3, #48	; 0x30
 8001b02:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8001b04:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b30      	subs	r3, #48	; 0x30
 8001b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b14:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8001b16:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001b20:	e7bc      	b.n	8001a9c <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8001b22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b26:	3301      	adds	r3, #1
 8001b28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001b2c:	e7ad      	b.n	8001a8a <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8001b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	33b0      	adds	r3, #176	; 0xb0
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8001b3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b42:	3301      	adds	r3, #1
 8001b44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b48:	e773      	b.n	8001a32 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 8001b4a:	bf00      	nop
 8001b4c:	3738      	adds	r7, #56	; 0x38
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc90      	pop	{r4, r7}
 8001b52:	4770      	bx	lr

08001b54 <_ZN9LineTraceC1EP5MotorP10LineSensor>:
 */

#include "LineTrace.hpp"
#include <stdio.h>

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	761a      	strb	r2, [r3, #24]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
	motor_ = motor;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	605a      	str	r2, [r3, #4]
}
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bac:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bb0:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
	kd_ = kd;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	615a      	str	r2, [r3, #20]

}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	801a      	strh	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	805a      	strh	r2, [r3, #2]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_ZN5Motor4initEv>:

void Motor::init()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <_ZN5Motor4initEv+0x20>)
 8001c00:	f007 f9f0 	bl	8008fe4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001c04:	210c      	movs	r1, #12
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <_ZN5Motor4initEv+0x20>)
 8001c08:	f007 f9ec 	bl	8008fe4 <HAL_TIM_PWM_Start>

}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20002bcc 	.word	0x20002bcc

08001c18 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da0d      	bge.n	8001c46 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c30:	481f      	ldr	r0, [pc, #124]	; (8001cb0 <_ZN5Motor9motorCtrlEv+0x98>)
 8001c32:	f003 fdef 	bl	8005814 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	425b      	negs	r3, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	81fb      	strh	r3, [r7, #14]
 8001c44:	e00a      	b.n	8001c5c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c4c:	4818      	ldr	r0, [pc, #96]	; (8001cb0 <_ZN5Motor9motorCtrlEv+0x98>)
 8001c4e:	f003 fde1 	bl	8005814 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da0d      	bge.n	8001c82 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6c:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <_ZN5Motor9motorCtrlEv+0x98>)
 8001c6e:	f003 fdd1 	bl	8005814 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	425b      	negs	r3, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	81bb      	strh	r3, [r7, #12]
 8001c80:	e00a      	b.n	8001c98 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c88:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <_ZN5Motor9motorCtrlEv+0x98>)
 8001c8a:	f003 fdc3 	bl	8005814 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8001c98:	89fa      	ldrh	r2, [r7, #14]
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8001ca0:	89ba      	ldrh	r2, [r7, #12]
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	20002bcc 	.word	0x20002bcc

08001cb8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6178      	str	r0, [r7, #20]
 8001cc0:	ed87 0b02 	vstr	d0, [r7, #8]
 8001cc4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <_ZN5Motor8setRatioEdd+0xd8>)
 8001cce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cd2:	f7fe ff39 	bl	8000b48 <__aeabi_dcmpgt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <_ZN5Motor8setRatioEdd+0x30>
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	4c2b      	ldr	r4, [pc, #172]	; (8001d90 <_ZN5Motor8setRatioEdd+0xd8>)
 8001ce2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001ce6:	e00e      	b.n	8001d06 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <_ZN5Motor8setRatioEdd+0xdc>)
 8001cee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cf2:	f7fe ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <_ZN5Motor8setRatioEdd+0x4e>
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	4c24      	ldr	r4, [pc, #144]	; (8001d94 <_ZN5Motor8setRatioEdd+0xdc>)
 8001d02:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <_ZN5Motor8setRatioEdd+0xd8>)
 8001d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d10:	f7fe ff1a 	bl	8000b48 <__aeabi_dcmpgt>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <_ZN5Motor8setRatioEdd+0x6e>
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	4c1c      	ldr	r4, [pc, #112]	; (8001d90 <_ZN5Motor8setRatioEdd+0xd8>)
 8001d20:	e9c7 3400 	strd	r3, r4, [r7]
 8001d24:	e00e      	b.n	8001d44 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <_ZN5Motor8setRatioEdd+0xdc>)
 8001d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d30:	f7fe feec 	bl	8000b0c <__aeabi_dcmplt>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <_ZN5Motor8setRatioEdd+0x8c>
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	4c15      	ldr	r4, [pc, #84]	; (8001d94 <_ZN5Motor8setRatioEdd+0xdc>)
 8001d40:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <_ZN5Motor8setRatioEdd+0xe0>)
 8001d4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d4e:	f7fe fc6b 	bl	8000628 <__aeabi_dmul>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	4618      	mov	r0, r3
 8001d58:	4621      	mov	r1, r4
 8001d5a:	f7fe ff15 	bl	8000b88 <__aeabi_d2iz>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <_ZN5Motor8setRatioEdd+0xe0>)
 8001d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d70:	f7fe fc5a 	bl	8000628 <__aeabi_dmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	f7fe ff04 	bl	8000b88 <__aeabi_d2iz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	805a      	strh	r2, [r3, #2]

}
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	3ff00000 	.word	0x3ff00000
 8001d94:	bff00000 	.word	0xbff00000
 8001d98:	409c2000 	.word	0x409c2000

08001d9c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8001da8:	2102      	movs	r1, #2
 8001daa:	4822      	ldr	r0, [pc, #136]	; (8001e34 <_ZN12RotarySwitch8getValueEv+0x98>)
 8001dac:	f003 fd1a 	bl	80057e4 <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bf0c      	ite	eq
 8001db6:	2301      	moveq	r3, #1
 8001db8:	2300      	movne	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8001dc0:	89fb      	ldrh	r3, [r7, #14]
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8001dc8:	2108      	movs	r1, #8
 8001dca:	481a      	ldr	r0, [pc, #104]	; (8001e34 <_ZN12RotarySwitch8getValueEv+0x98>)
 8001dcc:	f003 fd0a 	bl	80057e4 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <_ZN12RotarySwitch8getValueEv+0x4c>
 8001de0:	89fb      	ldrh	r3, [r7, #14]
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8001de8:	2110      	movs	r1, #16
 8001dea:	4812      	ldr	r0, [pc, #72]	; (8001e34 <_ZN12RotarySwitch8getValueEv+0x98>)
 8001dec:	f003 fcfa 	bl	80057e4 <HAL_GPIO_ReadPin>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <_ZN12RotarySwitch8getValueEv+0x6c>
 8001e00:	89fb      	ldrh	r3, [r7, #14]
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	480a      	ldr	r0, [pc, #40]	; (8001e34 <_ZN12RotarySwitch8getValueEv+0x98>)
 8001e0c:	f003 fcea 	bl	80057e4 <HAL_GPIO_ReadPin>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <_ZN12RotarySwitch8getValueEv+0x8c>
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e28:	89fb      	ldrh	r3, [r7, #14]

}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40020c00 	.word	0x40020c00

08001e38 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
{

}
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d111      	bne.n	8001e86 <_ZN10SideSensor12updateStatusEt+0x36>
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8001e7e:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e010      	b.n	8001ea8 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d10d      	bne.n	8001ea8 <_ZN10SideSensor12updateStatusEt+0x58>
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	f083 0301 	eor.w	r3, r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eae:	d111      	bne.n	8001ed4 <_ZN10SideSensor12updateStatusEt+0x84>
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f083 0301 	eor.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8001ed2:	e011      	b.n	8001ef8 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eda:	d10d      	bne.n	8001ef8 <_ZN10SideSensor12updateStatusEt+0xa8>
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	f083 0302 	eor.w	r3, r3, #2
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	200001f9 	.word	0x200001f9
 8001f08:	200001fa 	.word	0x200001fa

08001f0c <_ZN12VelocityCtrlC1EP5MotorP7Encoder>:

#include "VelocityCtrl.hpp"
#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder) :
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30

}
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	0000      	movs	r0, r0
 8001f8c:	0000      	movs	r0, r0
	...

08001f90 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	int16_t enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	f107 0208 	add.w	r2, r7, #8
 8001fa0:	f107 010a 	add.w	r1, r7, #10
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f921 	bl	80011ec <_ZN7Encoder6getCntERsS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8001faa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	0fda      	lsrs	r2, r3, #31
 8001fb8:	4413      	add	r3, r2
 8001fba:	105b      	asrs	r3, r3, #1
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc4:	edc7 7a03 	vstr	s15, [r7, #12]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7fe fad5 	bl	8000578 <__aeabi_f2d>
 8001fce:	a30c      	add	r3, pc, #48	; (adr r3, 8002000 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fb28 	bl	8000628 <__aeabi_dmul>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4621      	mov	r1, r4
 8001fe0:	f7fe fe1a 	bl	8000c18 <__aeabi_d2f>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	ee07 3a90 	vmov	s15, r3
}
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	f3af 8000 	nop.w
 8002000:	1ab1d998 	.word	0x1ab1d998
 8002004:	3f7830b5 	.word	0x3f7830b5

08002008 <_ZN12VelocityCtrl9calcOmegaEv>:

float VelocityCtrl::calcOmega()
{
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	current_omega_ = -(zg / 16.4) * PI / 180;
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <_ZN12VelocityCtrl9calcOmegaEv+0x98>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b21b      	sxth	r3, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa9c 	bl	8000554 <__aeabi_i2d>
 800201c:	a31c      	add	r3, pc, #112	; (adr r3, 8002090 <_ZN12VelocityCtrl9calcOmegaEv+0x88>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fc2b 	bl	800087c <__aeabi_ddiv>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4614      	mov	r4, r2
 800202c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002030:	a319      	add	r3, pc, #100	; (adr r3, 8002098 <_ZN12VelocityCtrl9calcOmegaEv+0x90>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	4620      	mov	r0, r4
 8002038:	4629      	mov	r1, r5
 800203a:	f7fe faf5 	bl	8000628 <__aeabi_dmul>
 800203e:	4603      	mov	r3, r0
 8002040:	460c      	mov	r4, r1
 8002042:	4618      	mov	r0, r3
 8002044:	4621      	mov	r1, r4
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <_ZN12VelocityCtrl9calcOmegaEv+0x9c>)
 800204c:	f7fe fc16 	bl	800087c <__aeabi_ddiv>
 8002050:	4603      	mov	r3, r0
 8002052:	460c      	mov	r4, r1
 8002054:	4618      	mov	r0, r3
 8002056:	4621      	mov	r1, r4
 8002058:	f7fe fdde 	bl	8000c18 <__aeabi_d2f>
 800205c:	4602      	mov	r2, r0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60da      	str	r2, [r3, #12]
	printf("omegao: %f\n", current_omega_);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa86 	bl	8000578 <__aeabi_f2d>
 800206c:	4603      	mov	r3, r0
 800206e:	460c      	mov	r4, r1
 8002070:	461a      	mov	r2, r3
 8002072:	4623      	mov	r3, r4
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <_ZN12VelocityCtrl9calcOmegaEv+0xa0>)
 8002076:	f00d fef9 	bl	800fe6c <iprintf>

	return current_omega_;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	ee07 3a90 	vmov	s15, r3
}
 8002082:	eeb0 0a67 	vmov.f32	s0, s15
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bdb0      	pop	{r4, r5, r7, pc}
 800208c:	f3af 8000 	nop.w
 8002090:	66666666 	.word	0x66666666
 8002094:	40306666 	.word	0x40306666
 8002098:	54411744 	.word	0x54411744
 800209c:	400921fb 	.word	0x400921fb
 80020a0:	20002ac4 	.word	0x20002ac4
 80020a4:	40668000 	.word	0x40668000
 80020a8:	08013fb8 	.word	0x08013fb8
 80020ac:	00000000 	.word	0x00000000

080020b0 <_ZN12VelocityCtrl3pidEv>:


void VelocityCtrl::pid()
{
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	b08d      	sub	sp, #52	; 0x34
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80020c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- current_omega_;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80020d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80020e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	ed93 7a05 	vldr	s14, [r3, #20]
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <_ZN12VelocityCtrl3pidEv+0x218>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002102:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	ee17 0a90 	vmov	r0, s15
 800210e:	f7fe fa33 	bl	8000578 <__aeabi_f2d>
 8002112:	a36b      	add	r3, pc, #428	; (adr r3, 80022c0 <_ZN12VelocityCtrl3pidEv+0x210>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe fa86 	bl	8000628 <__aeabi_dmul>
 800211c:	4603      	mov	r3, r0
 800211e:	460c      	mov	r4, r1
 8002120:	4618      	mov	r0, r3
 8002122:	4621      	mov	r1, r4
 8002124:	f7fe fd78 	bl	8000c18 <__aeabi_d2f>
 8002128:	4603      	mov	r3, r0
 800212a:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 800212c:	4b67      	ldr	r3, [pc, #412]	; (80022cc <_ZN12VelocityCtrl3pidEv+0x21c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fa21 	bl	8000578 <__aeabi_f2d>
 8002136:	4604      	mov	r4, r0
 8002138:	460d      	mov	r5, r1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002140:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	ee17 0a90 	vmov	r0, s15
 800214c:	f7fe fa14 	bl	8000578 <__aeabi_f2d>
 8002150:	a35b      	add	r3, pc, #364	; (adr r3, 80022c0 <_ZN12VelocityCtrl3pidEv+0x210>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe fa67 	bl	8000628 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe f8ab 	bl	80002bc <__adddf3>
 8002166:	4603      	mov	r3, r0
 8002168:	460c      	mov	r4, r1
 800216a:	4618      	mov	r0, r3
 800216c:	4621      	mov	r1, r4
 800216e:	f7fe fd53 	bl	8000c18 <__aeabi_d2f>
 8002172:	4602      	mov	r2, r0
 8002174:	4b55      	ldr	r3, [pc, #340]	; (80022cc <_ZN12VelocityCtrl3pidEv+0x21c>)
 8002176:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	edd3 7a07 	vldr	s15, [r3, #28]
 800217e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002186:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <_ZN12VelocityCtrl3pidEv+0x220>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800219a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800219e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a2:	ee17 0a90 	vmov	r0, s15
 80021a6:	f7fe f9e7 	bl	8000578 <__aeabi_f2d>
 80021aa:	a345      	add	r3, pc, #276	; (adr r3, 80022c0 <_ZN12VelocityCtrl3pidEv+0x210>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fa3a 	bl	8000628 <__aeabi_dmul>
 80021b4:	4603      	mov	r3, r0
 80021b6:	460c      	mov	r4, r1
 80021b8:	4618      	mov	r0, r3
 80021ba:	4621      	mov	r1, r4
 80021bc:	f7fe fd2c 	bl	8000c18 <__aeabi_d2f>
 80021c0:	4603      	mov	r3, r0
 80021c2:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <_ZN12VelocityCtrl3pidEv+0x224>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f9d5 	bl	8000578 <__aeabi_f2d>
 80021ce:	4604      	mov	r4, r0
 80021d0:	460d      	mov	r5, r1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80021d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	ee17 0a90 	vmov	r0, s15
 80021e4:	f7fe f9c8 	bl	8000578 <__aeabi_f2d>
 80021e8:	a335      	add	r3, pc, #212	; (adr r3, 80022c0 <_ZN12VelocityCtrl3pidEv+0x210>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe fa1b 	bl	8000628 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4620      	mov	r0, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	f7fe f85f 	bl	80002bc <__adddf3>
 80021fe:	4603      	mov	r3, r0
 8002200:	460c      	mov	r4, r1
 8002202:	4618      	mov	r0, r3
 8002204:	4621      	mov	r1, r4
 8002206:	f7fe fd07 	bl	8000c18 <__aeabi_d2f>
 800220a:	4602      	mov	r2, r0
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <_ZN12VelocityCtrl3pidEv+0x224>)
 800220e:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8002210:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002214:	edd7 7a08 	vldr	s15, [r7, #32]
 8002218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <_ZN12VelocityCtrl3pidEv+0x21c>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a05 	vstr	s15, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 800222e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002232:	edd7 7a06 	vldr	s15, [r7, #24]
 8002236:	ee37 7a27 	vadd.f32	s14, s14, s15
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <_ZN12VelocityCtrl3pidEv+0x224>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002244:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8002248:	ed97 7a07 	vldr	s14, [r7, #28]
 800224c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <_ZN12VelocityCtrl3pidEv+0x224>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225e:	eef1 7a67 	vneg.f32	s15, s15
 8002262:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800226a:	ed97 7a04 	vldr	s14, [r7, #16]
 800226e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002276:	ee17 0a90 	vmov	r0, s15
 800227a:	f7fe f97d 	bl	8000578 <__aeabi_f2d>
 800227e:	4605      	mov	r5, r0
 8002280:	460e      	mov	r6, r1
 8002282:	ed97 7a05 	vldr	s14, [r7, #20]
 8002286:	edd7 7a02 	vldr	s15, [r7, #8]
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	ee17 0a90 	vmov	r0, s15
 8002292:	f7fe f971 	bl	8000578 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	ec43 2b11 	vmov	d1, r2, r3
 800229e:	ec46 5b10 	vmov	d0, r5, r6
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fd08 	bl	8001cb8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <_ZN12VelocityCtrl3pidEv+0x218>)
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <_ZN12VelocityCtrl3pidEv+0x220>)
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	3734      	adds	r7, #52	; 0x34
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022bc:	f3af 8000 	nop.w
 80022c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022c4:	3f50624d 	.word	0x3f50624d
 80022c8:	200001fc 	.word	0x200001fc
 80022cc:	20000204 	.word	0x20000204
 80022d0:	20000200 	.word	0x20000200
 80022d4:	20000208 	.word	0x20000208

080022d8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80022e4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	605a      	str	r2, [r3, #4]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	ed87 0a02 	vstr	s0, [r7, #8]
 800230c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002310:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	611a      	str	r2, [r3, #16]
	v_kd_ = kd;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	615a      	str	r2, [r3, #20]
	v_ki_ = ki;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	ed87 0a02 	vstr	s0, [r7, #8]
 800233e:	edc7 0a01 	vstr	s1, [r7, #4]
 8002342:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	61da      	str	r2, [r3, #28]
	o_kd_ = kd;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	621a      	str	r2, [r3, #32]
	o_ki_ = ki;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_ZN12VelocityCtrl4flipEv>:

float VelocityCtrl::flip()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	float velocity;
	velocity = calcVelocity();
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff fe0f 	bl	8001f90 <_ZN12VelocityCtrl12calcVelocityEv>
 8002372:	ed87 0a03 	vstr	s0, [r7, #12]
	calcOmega();
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fe46 	bl	8002008 <_ZN12VelocityCtrl9calcOmegaEv>

	if(excution_flag_ == true){
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <_ZN12VelocityCtrl4flipEv+0x28>
		pid();
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fe92 	bl	80020b0 <_ZN12VelocityCtrl3pidEv>
	}

	return velocity;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	ee07 3a90 	vmov	s15, r3

}
 8002392:	eeb0 0a67 	vmov.f32	s0, s15
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	calcOmega();
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fe2b 	bl	8002008 <_ZN12VelocityCtrl9calcOmegaEv>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	0000      	movs	r0, r0
 80023bc:	0000      	movs	r0, r0
	...

080023c0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80023f0 <_ZN12VelocityCtrl4stopEv+0x30>
 80023d8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80023f0 <_ZN12VelocityCtrl4stopEv+0x30>
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fc6b 	bl	8001cb8 <_ZN5Motor8setRatioEdd>

}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	f3af 8000 	nop.w
	...

080023f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002400:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002404:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002410:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002414:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002418:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002420:	e000      	b.n	8002424 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002422:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002424:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f9      	beq.n	8002422 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800242e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e009      	b.n	800246c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	60ba      	str	r2, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ffc9 	bl	80023f8 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3301      	adds	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	dbf1      	blt.n	8002458 <_write+0x12>
  }
  return len;
 8002474:	687b      	ldr	r3, [r7, #4]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fe28 	bl	80040e0 <cppExit>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10d      	bne.n	80024c6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		//tim6_timer++;
		read_gyro_data();
 80024aa:	f7ff f885 	bl	80015b8 <read_gyro_data>
		read_accel_data();
 80024ae:	f7ff f8bb 	bl	8001628 <read_accel_data>
		cppFlip1ms();
 80024b2:	f001 fdc1 	bl	8004038 <cppFlip1ms>
		if(tim6_timer >= 100000) tim6_timer = 0;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d902      	bls.n	80024c6 <HAL_TIM_PeriodElapsedCallback+0x2e>
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM7){
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d109      	bne.n	80024e4 <HAL_TIM_PeriodElapsedCallback+0x4c>
		//tim7_timer++;
		cppFlip100ns();
 80024d0:	f001 fdfc 	bl	80040cc <cppFlip100ns>
		if(tim7_timer >= 100000) tim7_timer = 0;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d902      	bls.n	80024e4 <HAL_TIM_PeriodElapsedCallback+0x4c>
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
	}
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40001000 	.word	0x40001000
 80024f0:	20002d3c 	.word	0x20002d3c
 80024f4:	0001869f 	.word	0x0001869f
 80024f8:	40001400 	.word	0x40001400
 80024fc:	20002d88 	.word	0x20002d88

08002500 <init>:

}
*/

void init()
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af02      	add	r7, sp, #8
	      Error_Handler();
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 65535);
	*/

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800250c:	4821      	ldr	r0, [pc, #132]	; (8002594 <init+0x94>)
 800250e:	f003 f981 	bl	8005814 <HAL_GPIO_WritePin>

	//HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
	//HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);

	//Timer intrruptin start
	HAL_TIM_Base_Start_IT(&htim6);
 8002512:	4821      	ldr	r0, [pc, #132]	; (8002598 <init+0x98>)
 8002514:	f006 fd17 	bl	8008f46 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002518:	4820      	ldr	r0, [pc, #128]	; (800259c <init+0x9c>)
 800251a:	f006 fd14 	bl	8008f46 <HAL_TIM_Base_Start_IT>

	lcd_init();
 800251e:	f7fe fd7b 	bl	8001018 <lcd_init>


	if(sd_mount() == 1){
 8002522:	f7fe ff41 	bl	80013a8 <sd_mount>
 8002526:	4603      	mov	r3, r0
 8002528:	2b01      	cmp	r3, #1
 800252a:	d103      	bne.n	8002534 <init+0x34>
	  printf("mount success\r\n");
 800252c:	481c      	ldr	r0, [pc, #112]	; (80025a0 <init+0xa0>)
 800252e:	f00d fd11 	bl	800ff54 <puts>
 8002532:	e002      	b.n	800253a <init+0x3a>
	}
	else{
	  printf("error\r\n");
 8002534:	481b      	ldr	r0, [pc, #108]	; (80025a4 <init+0xa4>)
 8002536:	f00d fd0d 	bl	800ff54 <puts>
	}

	data[0] = 30;
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <init+0xa8>)
 800253c:	221e      	movs	r2, #30
 800253e:	601a      	str	r2, [r3, #0]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 8002540:	2301      	movs	r3, #1
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <init+0xa8>)
 8002546:	2201      	movs	r2, #1
 8002548:	4918      	ldr	r1, [pc, #96]	; (80025ac <init+0xac>)
 800254a:	4819      	ldr	r0, [pc, #100]	; (80025b0 <init+0xb0>)
 800254c:	f7fe fe88 	bl	8001260 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <init+0xb4>)
 8002552:	2201      	movs	r2, #1
 8002554:	4915      	ldr	r1, [pc, #84]	; (80025ac <init+0xac>)
 8002556:	4816      	ldr	r0, [pc, #88]	; (80025b0 <init+0xb0>)
 8002558:	f7fe fee0 	bl	800131c <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 800255c:	2301      	movs	r3, #1
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <init+0xb4>)
 8002562:	2201      	movs	r2, #1
 8002564:	4914      	ldr	r1, [pc, #80]	; (80025b8 <init+0xb8>)
 8002566:	4812      	ldr	r0, [pc, #72]	; (80025b0 <init+0xb0>)
 8002568:	f7fe fe7a 	bl	8001260 <sd_write_array_int>

	printf("sd write and read success!!\r\n");
 800256c:	4813      	ldr	r0, [pc, #76]	; (80025bc <init+0xbc>)
 800256e:	f00d fcf1 	bl	800ff54 <puts>
	sd_unmount();
 8002572:	f7fe ff35 	bl	80013e0 <sd_unmount>

	cppInit();
 8002576:	f001 fd25 	bl	8003fc4 <cppInit>

	uint16_t who_i_am;
	who_i_am = IMU_init();
 800257a:	f7fe fff1 	bl	8001560 <IMU_init>
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
	printf("who i am: %d\n", who_i_am);
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	4619      	mov	r1, r3
 8002586:	480e      	ldr	r0, [pc, #56]	; (80025c0 <init+0xc0>)
 8002588:	f00d fc70 	bl	800fe6c <iprintf>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	20002e38 	.word	0x20002e38
 800259c:	20002fe0 	.word	0x20002fe0
 80025a0:	08013fc4 	.word	0x08013fc4
 80025a4:	08013fd4 	.word	0x08013fd4
 80025a8:	20002e34 	.word	0x20002e34
 80025ac:	08013fdc 	.word	0x08013fdc
 80025b0:	08013fe8 	.word	0x08013fe8
 80025b4:	20002d40 	.word	0x20002d40
 80025b8:	08013ff0 	.word	0x08013ff0
 80025bc:	08013ffc 	.word	0x08013ffc
 80025c0:	0801401c 	.word	0x0801401c

080025c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c8:	f001 fe1c 	bl	8004204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025cc:	f000 f83c 	bl	8002648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d0:	f000 fdaa 	bl	8003128 <MX_GPIO_Init>
  MX_DMA_Init();
 80025d4:	f000 fd78 	bl	80030c8 <MX_DMA_Init>
  MX_I2C2_Init();
 80025d8:	f000 f9fa 	bl	80029d0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80025dc:	f000 fa26 	bl	8002a2c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80025e0:	f000 fa44 	bl	8002a6c <MX_SPI2_Init>
  MX_TIM1_Init();
 80025e4:	f000 fa78 	bl	8002ad8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80025e8:	f000 fb82 	bl	8002cf0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80025ec:	f000 fc4e 	bl	8002e8c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80025f0:	f000 fd40 	bl	8003074 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80025f4:	f008 fc7a 	bl	800aeec <MX_FATFS_Init>
  MX_TIM6_Init();
 80025f8:	f000 fbde 	bl	8002db8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80025fc:	f000 fc12 	bl	8002e24 <MX_TIM7_Init>
  MX_I2C1_Init();
 8002600:	f000 f9b8 	bl	8002974 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002604:	f000 fb10 	bl	8002c28 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002608:	f000 fc98 	bl	8002f3c <MX_TIM10_Init>
  MX_TIM11_Init();
 800260c:	f000 fce4 	bl	8002fd8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8002610:	f000 f8a8 	bl	8002764 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8002614:	f7ff ff74 	bl	8002500 <init>
	  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);

	  //printf("Timer: %d\n", timer);


	  lcd_clear();
 8002618:	f7fe fd42 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800261c:	2100      	movs	r1, #0
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe fd4e 	bl	80010c0 <lcd_locate>
	  lcd_printf("LCD");
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <main+0x7c>)
 8002626:	f7fe fd75 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800262a:	2101      	movs	r1, #1
 800262c:	2000      	movs	r0, #0
 800262e:	f7fe fd47 	bl	80010c0 <lcd_locate>
	  lcd_printf("TEST");
 8002632:	4804      	ldr	r0, [pc, #16]	; (8002644 <main+0x80>)
 8002634:	f7fe fd6e 	bl	8001114 <lcd_printf>


	  //printf("side: %d\n", side);


	  cppLoop();
 8002638:	f001 fd62 	bl	8004100 <cppLoop>
	  lcd_clear();
 800263c:	e7ec      	b.n	8002618 <main+0x54>
 800263e:	bf00      	nop
 8002640:	0801402c 	.word	0x0801402c
 8002644:	08014030 	.word	0x08014030

08002648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0a4      	sub	sp, #144	; 0x90
 800264c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800264e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002652:	2234      	movs	r2, #52	; 0x34
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f00c fdc2 	bl	800f1e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800265c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	223c      	movs	r2, #60	; 0x3c
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f00c fdb3 	bl	800f1e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b37      	ldr	r3, [pc, #220]	; (800275c <SystemClock_Config+0x114>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a36      	ldr	r2, [pc, #216]	; (800275c <SystemClock_Config+0x114>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b34      	ldr	r3, [pc, #208]	; (800275c <SystemClock_Config+0x114>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <SystemClock_Config+0x118>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a30      	ldr	r2, [pc, #192]	; (8002760 <SystemClock_Config+0x118>)
 80026a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <SystemClock_Config+0x118>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026b2:	2301      	movs	r3, #1
 80026b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026bc:	2302      	movs	r3, #2
 80026be:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026c4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026c6:	2308      	movs	r3, #8
 80026c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80026ca:	23b4      	movs	r3, #180	; 0xb4
 80026cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80026d6:	2308      	movs	r3, #8
 80026d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026dc:	2302      	movs	r3, #2
 80026de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 f984 	bl	80069f4 <HAL_RCC_OscConfig>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80026f2:	f000 fe6f 	bl	80033d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026f6:	f003 fcff 	bl	80060f8 <HAL_PWREx_EnableOverDrive>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002700:	f000 fe68 	bl	80033d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002704:	230f      	movs	r3, #15
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002708:	2302      	movs	r3, #2
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002710:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002714:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800271c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002720:	2105      	movs	r1, #5
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fd38 	bl	8006198 <HAL_RCC_ClockConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800272e:	f000 fe51 	bl	80033d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8002732:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002736:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002738:	2300      	movs	r3, #0
 800273a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800273c:	2300      	movs	r3, #0
 800273e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	4618      	mov	r0, r3
 8002746:	f003 ff17 	bl	8006578 <HAL_RCCEx_PeriphCLKConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002750:	f000 fe40 	bl	80033d4 <Error_Handler>
  }
}
 8002754:	bf00      	nop
 8002756:	3790      	adds	r7, #144	; 0x90
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000

08002764 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800276a:	463b      	mov	r3, r7
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002776:	4b7c      	ldr	r3, [pc, #496]	; (8002968 <MX_ADC2_Init+0x204>)
 8002778:	4a7c      	ldr	r2, [pc, #496]	; (800296c <MX_ADC2_Init+0x208>)
 800277a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800277c:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <MX_ADC2_Init+0x204>)
 800277e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002782:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002784:	4b78      	ldr	r3, [pc, #480]	; (8002968 <MX_ADC2_Init+0x204>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800278a:	4b77      	ldr	r3, [pc, #476]	; (8002968 <MX_ADC2_Init+0x204>)
 800278c:	2201      	movs	r2, #1
 800278e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002790:	4b75      	ldr	r3, [pc, #468]	; (8002968 <MX_ADC2_Init+0x204>)
 8002792:	2201      	movs	r2, #1
 8002794:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002796:	4b74      	ldr	r3, [pc, #464]	; (8002968 <MX_ADC2_Init+0x204>)
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800279e:	4b72      	ldr	r3, [pc, #456]	; (8002968 <MX_ADC2_Init+0x204>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027a4:	4b70      	ldr	r3, [pc, #448]	; (8002968 <MX_ADC2_Init+0x204>)
 80027a6:	4a72      	ldr	r2, [pc, #456]	; (8002970 <MX_ADC2_Init+0x20c>)
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027aa:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <MX_ADC2_Init+0x204>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80027b0:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <MX_ADC2_Init+0x204>)
 80027b2:	220e      	movs	r2, #14
 80027b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80027b6:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <MX_ADC2_Init+0x204>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027be:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <MX_ADC2_Init+0x204>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80027c4:	4868      	ldr	r0, [pc, #416]	; (8002968 <MX_ADC2_Init+0x204>)
 80027c6:	f001 fdb1 	bl	800432c <HAL_ADC_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80027d0:	f000 fe00 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80027d4:	230a      	movs	r3, #10
 80027d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027d8:	2301      	movs	r3, #1
 80027da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80027dc:	2306      	movs	r3, #6
 80027de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80027e0:	463b      	mov	r3, r7
 80027e2:	4619      	mov	r1, r3
 80027e4:	4860      	ldr	r0, [pc, #384]	; (8002968 <MX_ADC2_Init+0x204>)
 80027e6:	f001 fef5 	bl	80045d4 <HAL_ADC_ConfigChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80027f0:	f000 fdf0 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80027f4:	230b      	movs	r3, #11
 80027f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80027f8:	2302      	movs	r3, #2
 80027fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80027fc:	463b      	mov	r3, r7
 80027fe:	4619      	mov	r1, r3
 8002800:	4859      	ldr	r0, [pc, #356]	; (8002968 <MX_ADC2_Init+0x204>)
 8002802:	f001 fee7 	bl	80045d4 <HAL_ADC_ConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800280c:	f000 fde2 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002810:	230c      	movs	r3, #12
 8002812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002814:	2303      	movs	r3, #3
 8002816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002818:	463b      	mov	r3, r7
 800281a:	4619      	mov	r1, r3
 800281c:	4852      	ldr	r0, [pc, #328]	; (8002968 <MX_ADC2_Init+0x204>)
 800281e:	f001 fed9 	bl	80045d4 <HAL_ADC_ConfigChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002828:	f000 fdd4 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800282c:	230d      	movs	r3, #13
 800282e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002830:	2304      	movs	r3, #4
 8002832:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002834:	463b      	mov	r3, r7
 8002836:	4619      	mov	r1, r3
 8002838:	484b      	ldr	r0, [pc, #300]	; (8002968 <MX_ADC2_Init+0x204>)
 800283a:	f001 fecb 	bl	80045d4 <HAL_ADC_ConfigChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002844:	f000 fdc6 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002848:	2300      	movs	r3, #0
 800284a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800284c:	2305      	movs	r3, #5
 800284e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002850:	463b      	mov	r3, r7
 8002852:	4619      	mov	r1, r3
 8002854:	4844      	ldr	r0, [pc, #272]	; (8002968 <MX_ADC2_Init+0x204>)
 8002856:	f001 febd 	bl	80045d4 <HAL_ADC_ConfigChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8002860:	f000 fdb8 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002864:	2301      	movs	r3, #1
 8002866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002868:	2306      	movs	r3, #6
 800286a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800286c:	463b      	mov	r3, r7
 800286e:	4619      	mov	r1, r3
 8002870:	483d      	ldr	r0, [pc, #244]	; (8002968 <MX_ADC2_Init+0x204>)
 8002872:	f001 feaf 	bl	80045d4 <HAL_ADC_ConfigChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800287c:	f000 fdaa 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002880:	2302      	movs	r3, #2
 8002882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002884:	2307      	movs	r3, #7
 8002886:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002888:	463b      	mov	r3, r7
 800288a:	4619      	mov	r1, r3
 800288c:	4836      	ldr	r0, [pc, #216]	; (8002968 <MX_ADC2_Init+0x204>)
 800288e:	f001 fea1 	bl	80045d4 <HAL_ADC_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8002898:	f000 fd9c 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800289c:	2303      	movs	r3, #3
 800289e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80028a0:	2308      	movs	r3, #8
 80028a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028a4:	463b      	mov	r3, r7
 80028a6:	4619      	mov	r1, r3
 80028a8:	482f      	ldr	r0, [pc, #188]	; (8002968 <MX_ADC2_Init+0x204>)
 80028aa:	f001 fe93 	bl	80045d4 <HAL_ADC_ConfigChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80028b4:	f000 fd8e 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80028b8:	2304      	movs	r3, #4
 80028ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80028bc:	2309      	movs	r3, #9
 80028be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	4619      	mov	r1, r3
 80028c4:	4828      	ldr	r0, [pc, #160]	; (8002968 <MX_ADC2_Init+0x204>)
 80028c6:	f001 fe85 	bl	80045d4 <HAL_ADC_ConfigChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80028d0:	f000 fd80 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028d4:	2305      	movs	r3, #5
 80028d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80028d8:	230a      	movs	r3, #10
 80028da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028dc:	463b      	mov	r3, r7
 80028de:	4619      	mov	r1, r3
 80028e0:	4821      	ldr	r0, [pc, #132]	; (8002968 <MX_ADC2_Init+0x204>)
 80028e2:	f001 fe77 	bl	80045d4 <HAL_ADC_ConfigChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80028ec:	f000 fd72 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80028f0:	2306      	movs	r3, #6
 80028f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80028f4:	230b      	movs	r3, #11
 80028f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028f8:	463b      	mov	r3, r7
 80028fa:	4619      	mov	r1, r3
 80028fc:	481a      	ldr	r0, [pc, #104]	; (8002968 <MX_ADC2_Init+0x204>)
 80028fe:	f001 fe69 	bl	80045d4 <HAL_ADC_ConfigChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8002908:	f000 fd64 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800290c:	2307      	movs	r3, #7
 800290e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002910:	230c      	movs	r3, #12
 8002912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002914:	463b      	mov	r3, r7
 8002916:	4619      	mov	r1, r3
 8002918:	4813      	ldr	r0, [pc, #76]	; (8002968 <MX_ADC2_Init+0x204>)
 800291a:	f001 fe5b 	bl	80045d4 <HAL_ADC_ConfigChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8002924:	f000 fd56 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002928:	2308      	movs	r3, #8
 800292a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800292c:	230d      	movs	r3, #13
 800292e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002930:	463b      	mov	r3, r7
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <MX_ADC2_Init+0x204>)
 8002936:	f001 fe4d 	bl	80045d4 <HAL_ADC_ConfigChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8002940:	f000 fd48 	bl	80033d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002944:	2309      	movs	r3, #9
 8002946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002948:	230e      	movs	r3, #14
 800294a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800294c:	463b      	mov	r3, r7
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_ADC2_Init+0x204>)
 8002952:	f001 fe3f 	bl	80045d4 <HAL_ADC_ConfigChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800295c:	f000 fd3a 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20002c0c 	.word	0x20002c0c
 800296c:	40012100 	.word	0x40012100
 8002970:	0f000001 	.word	0x0f000001

08002974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <MX_I2C1_Init+0x50>)
 800297a:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <MX_I2C1_Init+0x54>)
 800297c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_I2C1_Init+0x50>)
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <MX_I2C1_Init+0x58>)
 8002982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <MX_I2C1_Init+0x50>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_I2C1_Init+0x50>)
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_I2C1_Init+0x50>)
 8002992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002996:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <MX_I2C1_Init+0x50>)
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_I2C1_Init+0x50>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <MX_I2C1_Init+0x50>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_I2C1_Init+0x50>)
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <MX_I2C1_Init+0x50>)
 80029b2:	f002 ff61 	bl	8005878 <HAL_I2C_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029bc:	f000 fd0a 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20002c54 	.word	0x20002c54
 80029c8:	40005400 	.word	0x40005400
 80029cc:	000186a0 	.word	0x000186a0

080029d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <MX_I2C2_Init+0x54>)
 80029d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029dc:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <MX_I2C2_Init+0x58>)
 80029de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_I2C2_Init+0x50>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <MX_I2C2_Init+0x50>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_I2C2_Init+0x50>)
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a0c:	4804      	ldr	r0, [pc, #16]	; (8002a20 <MX_I2C2_Init+0x50>)
 8002a0e:	f002 ff33 	bl	8005878 <HAL_I2C_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a18:	f000 fcdc 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20002ce8 	.word	0x20002ce8
 8002a24:	40005800 	.word	0x40005800
 8002a28:	000186a0 	.word	0x000186a0

08002a2c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_SDIO_SD_Init+0x38>)
 8002a32:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <MX_SDIO_SD_Init+0x3c>)
 8002a34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MX_SDIO_SD_Init+0x38>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_SDIO_SD_Init+0x38>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <MX_SDIO_SD_Init+0x38>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_SDIO_SD_Init+0x38>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <MX_SDIO_SD_Init+0x38>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <MX_SDIO_SD_Init+0x38>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	20002eb8 	.word	0x20002eb8
 8002a68:	40012c00 	.word	0x40012c00

08002a6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a72:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <MX_SPI2_Init+0x68>)
 8002a74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002aa0:	2228      	movs	r2, #40	; 0x28
 8002aa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002ab8:	220a      	movs	r2, #10
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_SPI2_Init+0x64>)
 8002abe:	f005 fcc3 	bl	8008448 <HAL_SPI_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ac8:	f000 fc84 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20002b34 	.word	0x20002b34
 8002ad4:	40003800 	.word	0x40003800

08002ad8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b09a      	sub	sp, #104	; 0x68
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ade:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00c fb7a 	bl	800f1e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002af6:	f107 0320 	add.w	r3, r7, #32
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]
 8002b06:	615a      	str	r2, [r3, #20]
 8002b08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f00c fb65 	bl	800f1e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b16:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b18:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <MX_TIM1_Init+0x14c>)
 8002b1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b28:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b30:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b36:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3c:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b42:	4837      	ldr	r0, [pc, #220]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b44:	f006 fa23 	bl	8008f8e <HAL_TIM_PWM_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002b4e:	f000 fc41 	bl	80033d4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b52:	2303      	movs	r3, #3
 8002b54:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b56:	2300      	movs	r3, #0
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b66:	2300      	movs	r3, #0
 8002b68:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4828      	ldr	r0, [pc, #160]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b7e:	f006 fa6f 	bl	8009060 <HAL_TIM_Encoder_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002b88:	f000 fc24 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4821      	ldr	r0, [pc, #132]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002b9c:	f006 ff96 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8002ba6:	f000 fc15 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002baa:	2360      	movs	r3, #96	; 0x60
 8002bac:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bc6:	f107 0320 	add.w	r3, r7, #32
 8002bca:	2208      	movs	r2, #8
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4814      	ldr	r0, [pc, #80]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002bd0:	f006 fc18 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002bda:	f000 fbfb 	bl	80033d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4807      	ldr	r0, [pc, #28]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002c02:	f006 ffdf 	bl	8009bc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002c0c:	f000 fbe2 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <MX_TIM1_Init+0x148>)
 8002c12:	f000 ffa1 	bl	8003b58 <HAL_TIM_MspPostInit>

}
 8002c16:	bf00      	nop
 8002c18:	3768      	adds	r7, #104	; 0x68
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20002e78 	.word	0x20002e78
 8002c24:	40010000 	.word	0x40010000

08002c28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c2e:	f107 0320 	add.w	r3, r7, #32
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	615a      	str	r2, [r3, #20]
 8002c48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <MX_TIM3_Init+0xc4>)
 8002c4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c70:	481d      	ldr	r0, [pc, #116]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002c72:	f006 f98c 	bl	8008f8e <HAL_TIM_PWM_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002c7c:	f000 fbaa 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c88:	f107 0320 	add.w	r3, r7, #32
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4816      	ldr	r0, [pc, #88]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002c90:	f006 ff1c 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002c9a:	f000 fb9b 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c9e:	2360      	movs	r3, #96	; 0x60
 8002ca0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002cb6:	f006 fba5 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002cc0:	f000 fb88 	bl	80033d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4807      	ldr	r0, [pc, #28]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002ccc:	f006 fb9a 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cd6:	f000 fb7d 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cda:	4803      	ldr	r0, [pc, #12]	; (8002ce8 <MX_TIM3_Init+0xc0>)
 8002cdc:	f000 ff3c 	bl	8003b58 <HAL_TIM_MspPostInit>

}
 8002ce0:	bf00      	nop
 8002ce2:	3728      	adds	r7, #40	; 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20002d48 	.word	0x20002d48
 8002cec:	40000400 	.word	0x40000400

08002cf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf6:	f107 0320 	add.w	r3, r7, #32
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	611a      	str	r2, [r3, #16]
 8002d0e:	615a      	str	r2, [r3, #20]
 8002d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d12:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d14:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <MX_TIM4_Init+0xc4>)
 8002d16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8002d24:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d26:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002d2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d38:	481d      	ldr	r0, [pc, #116]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d3a:	f006 f928 	bl	8008f8e <HAL_TIM_PWM_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002d44:	f000 fb46 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d50:	f107 0320 	add.w	r3, r7, #32
 8002d54:	4619      	mov	r1, r3
 8002d56:	4816      	ldr	r0, [pc, #88]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d58:	f006 feb8 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002d62:	f000 fb37 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d66:	2360      	movs	r3, #96	; 0x60
 8002d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	2208      	movs	r2, #8
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	480c      	ldr	r0, [pc, #48]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d7e:	f006 fb41 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002d88:	f000 fb24 	bl	80033d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	220c      	movs	r2, #12
 8002d90:	4619      	mov	r1, r3
 8002d92:	4807      	ldr	r0, [pc, #28]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002d94:	f006 fb36 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002d9e:	f000 fb19 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002da2:	4803      	ldr	r0, [pc, #12]	; (8002db0 <MX_TIM4_Init+0xc0>)
 8002da4:	f000 fed8 	bl	8003b58 <HAL_TIM_MspPostInit>

}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20002bcc 	.word	0x20002bcc
 8002db4:	40000800 	.word	0x40000800

08002db8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002dc8:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <MX_TIM6_Init+0x68>)
 8002dca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002dce:	2259      	movs	r2, #89	; 0x59
 8002dd0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dde:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002de6:	480d      	ldr	r0, [pc, #52]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002de8:	f006 f882 	bl	8008ef0 <HAL_TIM_Base_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002df2:	f000 faef 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	4806      	ldr	r0, [pc, #24]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002e04:	f006 fe62 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002e0e:	f000 fae1 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20002e38 	.word	0x20002e38
 8002e20:	40001000 	.word	0x40001000

08002e24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <MX_TIM7_Init+0x60>)
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <MX_TIM7_Init+0x64>)
 8002e36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <MX_TIM7_Init+0x60>)
 8002e3a:	2259      	movs	r2, #89	; 0x59
 8002e3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <MX_TIM7_Init+0x60>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <MX_TIM7_Init+0x60>)
 8002e46:	2264      	movs	r2, #100	; 0x64
 8002e48:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <MX_TIM7_Init+0x60>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e50:	480c      	ldr	r0, [pc, #48]	; (8002e84 <MX_TIM7_Init+0x60>)
 8002e52:	f006 f84d 	bl	8008ef0 <HAL_TIM_Base_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002e5c:	f000 faba 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e68:	463b      	mov	r3, r7
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_TIM7_Init+0x60>)
 8002e6e:	f006 fe2d 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002e78:	f000 faac 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20002fe0 	.word	0x20002fe0
 8002e88:	40001400 	.word	0x40001400

08002e8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08c      	sub	sp, #48	; 0x30
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f00c f9a0 	bl	800f1e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002eaa:	4a23      	ldr	r2, [pc, #140]	; (8002f38 <MX_TIM8_Init+0xac>)
 8002eac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002eba:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002edc:	2301      	movs	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	4619      	mov	r1, r3
 8002efe:	480d      	ldr	r0, [pc, #52]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002f00:	f006 f8ae 	bl	8009060 <HAL_TIM_Encoder_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002f0a:	f000 fa63 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4806      	ldr	r0, [pc, #24]	; (8002f34 <MX_TIM8_Init+0xa8>)
 8002f1c:	f006 fdd6 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002f26:	f000 fa55 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	3730      	adds	r7, #48	; 0x30
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20002b8c 	.word	0x20002b8c
 8002f38:	40010400 	.word	0x40010400

08002f3c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
 8002f50:	615a      	str	r2, [r3, #20]
 8002f52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002f54:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002f56:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <MX_TIM10_Init+0x98>)
 8002f58:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f6c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f7a:	4815      	ldr	r0, [pc, #84]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002f7c:	f005 ffb8 	bl	8008ef0 <HAL_TIM_Base_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002f86:	f000 fa25 	bl	80033d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002f8a:	4811      	ldr	r0, [pc, #68]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002f8c:	f005 ffff 	bl	8008f8e <HAL_TIM_PWM_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002f96:	f000 fa1d 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f9a:	2360      	movs	r3, #96	; 0x60
 8002f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	2200      	movs	r2, #0
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4807      	ldr	r0, [pc, #28]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002fb2:	f006 fa27 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002fbc:	f000 fa0a 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <MX_TIM10_Init+0x94>)
 8002fc2:	f000 fdc9 	bl	8003b58 <HAL_TIM_MspPostInit>

}
 8002fc6:	bf00      	nop
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20002ca8 	.word	0x20002ca8
 8002fd4:	40014400 	.word	0x40014400

08002fd8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
 8002fec:	615a      	str	r2, [r3, #20]
 8002fee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <MX_TIM11_Init+0x94>)
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <MX_TIM11_Init+0x98>)
 8002ff4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <MX_TIM11_Init+0x94>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <MX_TIM11_Init+0x94>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <MX_TIM11_Init+0x94>)
 8003004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003008:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <MX_TIM11_Init+0x94>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <MX_TIM11_Init+0x94>)
 8003012:	2200      	movs	r2, #0
 8003014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003016:	4815      	ldr	r0, [pc, #84]	; (800306c <MX_TIM11_Init+0x94>)
 8003018:	f005 ff6a 	bl	8008ef0 <HAL_TIM_Base_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003022:	f000 f9d7 	bl	80033d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003026:	4811      	ldr	r0, [pc, #68]	; (800306c <MX_TIM11_Init+0x94>)
 8003028:	f005 ffb1 	bl	8008f8e <HAL_TIM_PWM_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003032:	f000 f9cf 	bl	80033d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003036:	2360      	movs	r3, #96	; 0x60
 8003038:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	2200      	movs	r2, #0
 800304a:	4619      	mov	r1, r3
 800304c:	4807      	ldr	r0, [pc, #28]	; (800306c <MX_TIM11_Init+0x94>)
 800304e:	f006 f9d9 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003058:	f000 f9bc 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800305c:	4803      	ldr	r0, [pc, #12]	; (800306c <MX_TIM11_Init+0x94>)
 800305e:	f000 fd7b 	bl	8003b58 <HAL_TIM_MspPostInit>

}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20002d90 	.word	0x20002d90
 8003070:	40014800 	.word	0x40014800

08003074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <MX_USART2_UART_Init+0x50>)
 800307c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 8003080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 800308e:	2200      	movs	r2, #0
 8003090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 800309a:	220c      	movs	r2, #12
 800309c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030aa:	4805      	ldr	r0, [pc, #20]	; (80030c0 <MX_USART2_UART_Init+0x4c>)
 80030ac:	f006 fdf0 	bl	8009c90 <HAL_UART_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030b6:	f000 f98d 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20002f40 	.word	0x20002f40
 80030c4:	40004400 	.word	0x40004400

080030c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <MX_DMA_Init+0x5c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a13      	ldr	r2, [pc, #76]	; (8003124 <MX_DMA_Init+0x5c>)
 80030d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <MX_DMA_Init+0x5c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	203a      	movs	r0, #58	; 0x3a
 80030f0:	f001 fdfb 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80030f4:	203a      	movs	r0, #58	; 0x3a
 80030f6:	f001 fe14 	bl	8004d22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	203b      	movs	r0, #59	; 0x3b
 8003100:	f001 fdf3 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003104:	203b      	movs	r0, #59	; 0x3b
 8003106:	f001 fe0c 	bl	8004d22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2045      	movs	r0, #69	; 0x45
 8003110:	f001 fdeb 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003114:	2045      	movs	r0, #69	; 0x45
 8003116:	f001 fe04 	bl	8004d22 <HAL_NVIC_EnableIRQ>

}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	; 0x30
 800312c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	4b9c      	ldr	r3, [pc, #624]	; (80033b4 <MX_GPIO_Init+0x28c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a9b      	ldr	r2, [pc, #620]	; (80033b4 <MX_GPIO_Init+0x28c>)
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b99      	ldr	r3, [pc, #612]	; (80033b4 <MX_GPIO_Init+0x28c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	4b95      	ldr	r3, [pc, #596]	; (80033b4 <MX_GPIO_Init+0x28c>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a94      	ldr	r2, [pc, #592]	; (80033b4 <MX_GPIO_Init+0x28c>)
 8003164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b92      	ldr	r3, [pc, #584]	; (80033b4 <MX_GPIO_Init+0x28c>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <MX_GPIO_Init+0x28c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a8d      	ldr	r2, [pc, #564]	; (80033b4 <MX_GPIO_Init+0x28c>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b8b      	ldr	r3, [pc, #556]	; (80033b4 <MX_GPIO_Init+0x28c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b87      	ldr	r3, [pc, #540]	; (80033b4 <MX_GPIO_Init+0x28c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a86      	ldr	r2, [pc, #536]	; (80033b4 <MX_GPIO_Init+0x28c>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b84      	ldr	r3, [pc, #528]	; (80033b4 <MX_GPIO_Init+0x28c>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	4b80      	ldr	r3, [pc, #512]	; (80033b4 <MX_GPIO_Init+0x28c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a7f      	ldr	r2, [pc, #508]	; (80033b4 <MX_GPIO_Init+0x28c>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b7d      	ldr	r3, [pc, #500]	; (80033b4 <MX_GPIO_Init+0x28c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	4b79      	ldr	r3, [pc, #484]	; (80033b4 <MX_GPIO_Init+0x28c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a78      	ldr	r2, [pc, #480]	; (80033b4 <MX_GPIO_Init+0x28c>)
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <MX_GPIO_Init+0x28c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	607b      	str	r3, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80031e6:	2200      	movs	r2, #0
 80031e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031ec:	4872      	ldr	r0, [pc, #456]	; (80033b8 <MX_GPIO_Init+0x290>)
 80031ee:	f002 fb11 	bl	8005814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80031f2:	2200      	movs	r2, #0
 80031f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031f8:	4870      	ldr	r0, [pc, #448]	; (80033bc <MX_GPIO_Init+0x294>)
 80031fa:	f002 fb0b 	bl	8005814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80031fe:	2200      	movs	r2, #0
 8003200:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003204:	486e      	ldr	r0, [pc, #440]	; (80033c0 <MX_GPIO_Init+0x298>)
 8003206:	f002 fb05 	bl	8005814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800320a:	2200      	movs	r2, #0
 800320c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8003210:	486c      	ldr	r0, [pc, #432]	; (80033c4 <MX_GPIO_Init+0x29c>)
 8003212:	f002 faff 	bl	8005814 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003216:	2304      	movs	r3, #4
 8003218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800321a:	4b6b      	ldr	r3, [pc, #428]	; (80033c8 <MX_GPIO_Init+0x2a0>)
 800321c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003222:	f107 031c 	add.w	r3, r7, #28
 8003226:	4619      	mov	r1, r3
 8003228:	4863      	ldr	r0, [pc, #396]	; (80033b8 <MX_GPIO_Init+0x290>)
 800322a:	f002 f931 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800322e:	230f      	movs	r3, #15
 8003230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003232:	2303      	movs	r3, #3
 8003234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323a:	f107 031c 	add.w	r3, r7, #28
 800323e:	4619      	mov	r1, r3
 8003240:	4862      	ldr	r0, [pc, #392]	; (80033cc <MX_GPIO_Init+0x2a4>)
 8003242:	f002 f925 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003246:	23e1      	movs	r3, #225	; 0xe1
 8003248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800324a:	2303      	movs	r3, #3
 800324c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4619      	mov	r1, r3
 8003258:	485a      	ldr	r0, [pc, #360]	; (80033c4 <MX_GPIO_Init+0x29c>)
 800325a:	f002 f919 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800325e:	2303      	movs	r3, #3
 8003260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003262:	2303      	movs	r3, #3
 8003264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326a:	f107 031c 	add.w	r3, r7, #28
 800326e:	4619      	mov	r1, r3
 8003270:	4852      	ldr	r0, [pc, #328]	; (80033bc <MX_GPIO_Init+0x294>)
 8003272:	f002 f90d 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003276:	2304      	movs	r3, #4
 8003278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327a:	2300      	movs	r3, #0
 800327c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800327e:	2301      	movs	r3, #1
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003282:	f107 031c 	add.w	r3, r7, #28
 8003286:	4619      	mov	r1, r3
 8003288:	484c      	ldr	r0, [pc, #304]	; (80033bc <MX_GPIO_Init+0x294>)
 800328a:	f002 f901 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800328e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8003292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003294:	2300      	movs	r3, #0
 8003296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003298:	2301      	movs	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4845      	ldr	r0, [pc, #276]	; (80033b8 <MX_GPIO_Init+0x290>)
 80032a4:	f002 f8f4 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80032a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ae:	2301      	movs	r3, #1
 80032b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	4619      	mov	r1, r3
 80032c0:	483d      	ldr	r0, [pc, #244]	; (80033b8 <MX_GPIO_Init+0x290>)
 80032c2:	f002 f8e5 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032cc:	2301      	movs	r3, #1
 80032ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d8:	f107 031c 	add.w	r3, r7, #28
 80032dc:	4619      	mov	r1, r3
 80032de:	4837      	ldr	r0, [pc, #220]	; (80033bc <MX_GPIO_Init+0x294>)
 80032e0:	f002 f8d6 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <MX_GPIO_Init+0x2a8>)
 80032ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032f2:	f107 031c 	add.w	r3, r7, #28
 80032f6:	4619      	mov	r1, r3
 80032f8:	4831      	ldr	r0, [pc, #196]	; (80033c0 <MX_GPIO_Init+0x298>)
 80032fa:	f002 f8c9 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003304:	2301      	movs	r3, #1
 8003306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	4619      	mov	r1, r3
 8003316:	482a      	ldr	r0, [pc, #168]	; (80033c0 <MX_GPIO_Init+0x298>)
 8003318:	f002 f8ba 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800331c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	2301      	movs	r3, #1
 8003324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003326:	2301      	movs	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2300      	movs	r3, #0
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800332e:	f107 031c 	add.w	r3, r7, #28
 8003332:	4619      	mov	r1, r3
 8003334:	4822      	ldr	r0, [pc, #136]	; (80033c0 <MX_GPIO_Init+0x298>)
 8003336:	f002 f8ab 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800333a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800333e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003340:	2301      	movs	r3, #1
 8003342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003348:	2300      	movs	r3, #0
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334c:	f107 031c 	add.w	r3, r7, #28
 8003350:	4619      	mov	r1, r3
 8003352:	481c      	ldr	r0, [pc, #112]	; (80033c4 <MX_GPIO_Init+0x29c>)
 8003354:	f002 f89c 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	f107 031c 	add.w	r3, r7, #28
 800336a:	4619      	mov	r1, r3
 800336c:	4815      	ldr	r0, [pc, #84]	; (80033c4 <MX_GPIO_Init+0x29c>)
 800336e:	f002 f88f 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003372:	239b      	movs	r3, #155	; 0x9b
 8003374:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800337a:	2301      	movs	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	4619      	mov	r1, r3
 8003384:	480e      	ldr	r0, [pc, #56]	; (80033c0 <MX_GPIO_Init+0x298>)
 8003386:	f002 f883 	bl	8005490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	2008      	movs	r0, #8
 8003390:	f001 fcab 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003394:	2008      	movs	r0, #8
 8003396:	f001 fcc4 	bl	8004d22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800339a:	2200      	movs	r2, #0
 800339c:	2100      	movs	r1, #0
 800339e:	2017      	movs	r0, #23
 80033a0:	f001 fca3 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033a4:	2017      	movs	r0, #23
 80033a6:	f001 fcbc 	bl	8004d22 <HAL_NVIC_EnableIRQ>

}
 80033aa:	bf00      	nop
 80033ac:	3730      	adds	r7, #48	; 0x30
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40020400 	.word	0x40020400
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40020000 	.word	0x40020000
 80033c8:	10310000 	.word	0x10310000
 80033cc:	40020800 	.word	0x40020800
 80033d0:	10110000 	.word	0x10110000

080033d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033da:	e7fe      	b.n	80033da <Error_Handler+0x6>

080033dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_MspInit+0x4c>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <HAL_MspInit+0x4c>)
 80033ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_MspInit+0x4c>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_MspInit+0x4c>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <HAL_MspInit+0x4c>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_MspInit+0x4c>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	; 0x30
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a4a      	ldr	r2, [pc, #296]	; (8003574 <HAL_ADC_MspInit+0x148>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f040 808e 	bne.w	800356c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	4b48      	ldr	r3, [pc, #288]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	4a47      	ldr	r2, [pc, #284]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 800345a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800345e:	6453      	str	r3, [r2, #68]	; 0x44
 8003460:	4b45      	ldr	r3, [pc, #276]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	4a40      	ldr	r2, [pc, #256]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6313      	str	r3, [r2, #48]	; 0x30
 800347c:	4b3e      	ldr	r3, [pc, #248]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	4a39      	ldr	r2, [pc, #228]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6313      	str	r3, [r2, #48]	; 0x30
 8003498:	4b37      	ldr	r3, [pc, #220]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	6313      	str	r3, [r2, #48]	; 0x30
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_ADC_MspInit+0x14c>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80034c0:	230f      	movs	r3, #15
 80034c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c4:	2303      	movs	r3, #3
 80034c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	4619      	mov	r1, r3
 80034d2:	482a      	ldr	r0, [pc, #168]	; (800357c <HAL_ADC_MspInit+0x150>)
 80034d4:	f001 ffdc 	bl	8005490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80034d8:	23ff      	movs	r3, #255	; 0xff
 80034da:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034dc:	2303      	movs	r3, #3
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 031c 	add.w	r3, r7, #28
 80034e8:	4619      	mov	r1, r3
 80034ea:	4825      	ldr	r0, [pc, #148]	; (8003580 <HAL_ADC_MspInit+0x154>)
 80034ec:	f001 ffd0 	bl	8005490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034f0:	2303      	movs	r3, #3
 80034f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034f4:	2303      	movs	r3, #3
 80034f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fc:	f107 031c 	add.w	r3, r7, #28
 8003500:	4619      	mov	r1, r3
 8003502:	4820      	ldr	r0, [pc, #128]	; (8003584 <HAL_ADC_MspInit+0x158>)
 8003504:	f001 ffc4 	bl	8005490 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 800350a:	4a20      	ldr	r2, [pc, #128]	; (800358c <HAL_ADC_MspInit+0x160>)
 800350c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 8003510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003514:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003516:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003522:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 8003524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003528:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800352a:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 800352c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003530:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 8003534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003538:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 800353c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003540:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 8003544:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003548:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 800354c:	2200      	movs	r2, #0
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003550:	480d      	ldr	r0, [pc, #52]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 8003552:	f001 fc01 	bl	8004d58 <HAL_DMA_Init>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800355c:	f7ff ff3a 	bl	80033d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_ADC_MspInit+0x15c>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800356c:	bf00      	nop
 800356e:	3730      	adds	r7, #48	; 0x30
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40012100 	.word	0x40012100
 8003578:	40023800 	.word	0x40023800
 800357c:	40020800 	.word	0x40020800
 8003580:	40020000 	.word	0x40020000
 8003584:	40020400 	.word	0x40020400
 8003588:	20002f80 	.word	0x20002f80
 800358c:	40026440 	.word	0x40026440

08003590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	; 0x30
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a32      	ldr	r2, [pc, #200]	; (8003678 <HAL_I2C_MspInit+0xe8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d12c      	bne.n	800360c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_I2C_MspInit+0xec>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a30      	ldr	r2, [pc, #192]	; (800367c <HAL_I2C_MspInit+0xec>)
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b2e      	ldr	r3, [pc, #184]	; (800367c <HAL_I2C_MspInit+0xec>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035ce:	23c0      	movs	r3, #192	; 0xc0
 80035d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035d2:	2312      	movs	r3, #18
 80035d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d6:	2301      	movs	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035de:	2304      	movs	r3, #4
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	4619      	mov	r1, r3
 80035e8:	4825      	ldr	r0, [pc, #148]	; (8003680 <HAL_I2C_MspInit+0xf0>)
 80035ea:	f001 ff51 	bl	8005490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_I2C_MspInit+0xec>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a21      	ldr	r2, [pc, #132]	; (800367c <HAL_I2C_MspInit+0xec>)
 80035f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_I2C_MspInit+0xec>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800360a:	e031      	b.n	8003670 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <HAL_I2C_MspInit+0xf4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d12c      	bne.n	8003670 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_I2C_MspInit+0xec>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_I2C_MspInit+0xec>)
 8003620:	f043 0302 	orr.w	r3, r3, #2
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <HAL_I2C_MspInit+0xec>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003632:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003638:	2312      	movs	r3, #18
 800363a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800363c:	2301      	movs	r3, #1
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003640:	2303      	movs	r3, #3
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003644:	2304      	movs	r3, #4
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003648:	f107 031c 	add.w	r3, r7, #28
 800364c:	4619      	mov	r1, r3
 800364e:	480c      	ldr	r0, [pc, #48]	; (8003680 <HAL_I2C_MspInit+0xf0>)
 8003650:	f001 ff1e 	bl	8005490 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_I2C_MspInit+0xec>)
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <HAL_I2C_MspInit+0xec>)
 800365e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003662:	6413      	str	r3, [r2, #64]	; 0x40
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_I2C_MspInit+0xec>)
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]
}
 8003670:	bf00      	nop
 8003672:	3730      	adds	r7, #48	; 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40005400 	.word	0x40005400
 800367c:	40023800 	.word	0x40023800
 8003680:	40020400 	.word	0x40020400
 8003684:	40005800 	.word	0x40005800

08003688 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a69      	ldr	r2, [pc, #420]	; (800384c <HAL_SD_MspInit+0x1c4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f040 80cb 	bne.w	8003842 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	4b67      	ldr	r3, [pc, #412]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	4a66      	ldr	r2, [pc, #408]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ba:	6453      	str	r3, [r2, #68]	; 0x44
 80036bc:	4b64      	ldr	r3, [pc, #400]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	4b60      	ldr	r3, [pc, #384]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	4a5f      	ldr	r2, [pc, #380]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036d2:	f043 0304 	orr.w	r3, r3, #4
 80036d6:	6313      	str	r3, [r2, #48]	; 0x30
 80036d8:	4b5d      	ldr	r3, [pc, #372]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	4b59      	ldr	r3, [pc, #356]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	4a58      	ldr	r2, [pc, #352]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036ee:	f043 0308 	orr.w	r3, r3, #8
 80036f2:	6313      	str	r3, [r2, #48]	; 0x30
 80036f4:	4b56      	ldr	r3, [pc, #344]	; (8003850 <HAL_SD_MspInit+0x1c8>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003700:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003704:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003712:	230c      	movs	r3, #12
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	4619      	mov	r1, r3
 800371c:	484d      	ldr	r0, [pc, #308]	; (8003854 <HAL_SD_MspInit+0x1cc>)
 800371e:	f001 feb7 	bl	8005490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003722:	2304      	movs	r3, #4
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372e:	2303      	movs	r3, #3
 8003730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003732:	230c      	movs	r3, #12
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	4619      	mov	r1, r3
 800373c:	4846      	ldr	r0, [pc, #280]	; (8003858 <HAL_SD_MspInit+0x1d0>)
 800373e:	f001 fea7 	bl	8005490 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003742:	4b46      	ldr	r3, [pc, #280]	; (800385c <HAL_SD_MspInit+0x1d4>)
 8003744:	4a46      	ldr	r2, [pc, #280]	; (8003860 <HAL_SD_MspInit+0x1d8>)
 8003746:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003748:	4b44      	ldr	r3, [pc, #272]	; (800385c <HAL_SD_MspInit+0x1d4>)
 800374a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800374e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003750:	4b42      	ldr	r3, [pc, #264]	; (800385c <HAL_SD_MspInit+0x1d4>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <HAL_SD_MspInit+0x1d4>)
 8003758:	2200      	movs	r2, #0
 800375a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800375c:	4b3f      	ldr	r3, [pc, #252]	; (800385c <HAL_SD_MspInit+0x1d4>)
 800375e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003762:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003764:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_SD_MspInit+0x1d4>)
 8003766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800376a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800376c:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_SD_MspInit+0x1d4>)
 800376e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003772:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <HAL_SD_MspInit+0x1d4>)
 8003776:	2220      	movs	r2, #32
 8003778:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800377a:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_SD_MspInit+0x1d4>)
 800377c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003780:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <HAL_SD_MspInit+0x1d4>)
 8003784:	2204      	movs	r2, #4
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003788:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_SD_MspInit+0x1d4>)
 800378a:	2203      	movs	r2, #3
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800378e:	4b33      	ldr	r3, [pc, #204]	; (800385c <HAL_SD_MspInit+0x1d4>)
 8003790:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_SD_MspInit+0x1d4>)
 8003798:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800379e:	482f      	ldr	r0, [pc, #188]	; (800385c <HAL_SD_MspInit+0x1d4>)
 80037a0:	f001 fada 	bl	8004d58 <HAL_DMA_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80037aa:	f7ff fe13 	bl	80033d4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a2a      	ldr	r2, [pc, #168]	; (800385c <HAL_SD_MspInit+0x1d4>)
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
 80037b4:	4a29      	ldr	r2, [pc, #164]	; (800385c <HAL_SD_MspInit+0x1d4>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <HAL_SD_MspInit+0x1e0>)
 80037be:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037c6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037c8:	4b26      	ldr	r3, [pc, #152]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ce:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037d4:	4b23      	ldr	r3, [pc, #140]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037da:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037e2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037e4:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037ea:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037ee:	2220      	movs	r2, #32
 80037f0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037f8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 80037fc:	2204      	movs	r2, #4
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003800:	4b18      	ldr	r3, [pc, #96]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 8003802:	2203      	movs	r2, #3
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 8003808:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 8003810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003816:	4813      	ldr	r0, [pc, #76]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 8003818:	f001 fa9e 	bl	8004d58 <HAL_DMA_Init>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8003822:	f7ff fdd7 	bl	80033d4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 800382a:	63da      	str	r2, [r3, #60]	; 0x3c
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_SD_MspInit+0x1dc>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003832:	2200      	movs	r2, #0
 8003834:	2100      	movs	r1, #0
 8003836:	2031      	movs	r0, #49	; 0x31
 8003838:	f001 fa57 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800383c:	2031      	movs	r0, #49	; 0x31
 800383e:	f001 fa70 	bl	8004d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003842:	bf00      	nop
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40023800 	.word	0x40023800
 8003854:	40020800 	.word	0x40020800
 8003858:	40020c00 	.word	0x40020c00
 800385c:	20002ad0 	.word	0x20002ad0
 8003860:	40026458 	.word	0x40026458
 8003864:	20002dd4 	.word	0x20002dd4
 8003868:	400264a0 	.word	0x400264a0

0800386c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_SPI_MspInit+0x84>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d12c      	bne.n	80038e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 8003898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 80038b4:	f043 0302 	orr.w	r3, r3, #2
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80038c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80038ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d4:	2303      	movs	r3, #3
 80038d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038d8:	2305      	movs	r3, #5
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	4619      	mov	r1, r3
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <HAL_SPI_MspInit+0x8c>)
 80038e4:	f001 fdd4 	bl	8005490 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80038e8:	bf00      	nop
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40003800 	.word	0x40003800
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40020400 	.word	0x40020400

080038fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 031c 	add.w	r3, r7, #28
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_TIM_PWM_MspInit+0xd4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d12d      	bne.n	800397a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003956:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	2300      	movs	r3, #0
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003968:	2301      	movs	r3, #1
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	4619      	mov	r1, r3
 8003972:	4819      	ldr	r0, [pc, #100]	; (80039d8 <HAL_TIM_PWM_MspInit+0xdc>)
 8003974:	f001 fd8c 	bl	8005490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003978:	e026      	b.n	80039c8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_TIM_PWM_MspInit+0xe0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10e      	bne.n	80039a2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	4a11      	ldr	r2, [pc, #68]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	6413      	str	r3, [r2, #64]	; 0x40
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	693b      	ldr	r3, [r7, #16]
}
 80039a0:	e012      	b.n	80039c8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_TIM_PWM_MspInit+0xe4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10d      	bne.n	80039c8 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	6413      	str	r3, [r2, #64]	; 0x40
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_TIM_PWM_MspInit+0xd8>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3730      	adds	r7, #48	; 0x30
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800

080039e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a30      	ldr	r2, [pc, #192]	; (8003ab4 <HAL_TIM_Base_MspInit+0xd0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d116      	bne.n	8003a24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	4a2e      	ldr	r2, [pc, #184]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a00:	f043 0310 	orr.w	r3, r3, #16
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
 8003a06:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003a12:	2200      	movs	r2, #0
 8003a14:	2100      	movs	r1, #0
 8003a16:	2036      	movs	r0, #54	; 0x36
 8003a18:	f001 f967 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a1c:	2036      	movs	r0, #54	; 0x36
 8003a1e:	f001 f980 	bl	8004d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003a22:	e042      	b.n	8003aaa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a24      	ldr	r2, [pc, #144]	; (8003abc <HAL_TIM_Base_MspInit+0xd8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d116      	bne.n	8003a5c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a38:	f043 0320 	orr.w	r3, r3, #32
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	2037      	movs	r0, #55	; 0x37
 8003a50:	f001 f94b 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a54:	2037      	movs	r0, #55	; 0x37
 8003a56:	f001 f964 	bl	8004d22 <HAL_NVIC_EnableIRQ>
}
 8003a5a:	e026      	b.n	8003aaa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM10)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <HAL_TIM_Base_MspInit+0xdc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	6453      	str	r3, [r2, #68]	; 0x44
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
}
 8003a82:	e012      	b.n	8003aaa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM11)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <HAL_TIM_Base_MspInit+0xe0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_TIM_Base_MspInit+0xd4>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
}
 8003aaa:	bf00      	nop
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40001000 	.word	0x40001000
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40001400 	.word	0x40001400
 8003ac0:	40014400 	.word	0x40014400
 8003ac4:	40014800 	.word	0x40014800

08003ac8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_TIM_Encoder_MspInit+0x84>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d12b      	bne.n	8003b42 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <HAL_TIM_Encoder_MspInit+0x88>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <HAL_TIM_Encoder_MspInit+0x88>)
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	6453      	str	r3, [r2, #68]	; 0x44
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_TIM_Encoder_MspInit+0x88>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	4a10      	ldr	r2, [pc, #64]	; (8003b50 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	6313      	str	r3, [r2, #48]	; 0x30
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <HAL_TIM_Encoder_MspInit+0x88>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b22:	23c0      	movs	r3, #192	; 0xc0
 8003b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	2302      	movs	r3, #2
 8003b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b32:	2303      	movs	r3, #3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4805      	ldr	r0, [pc, #20]	; (8003b54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003b3e:	f001 fca7 	bl	8005490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b42:	bf00      	nop
 8003b44:	3728      	adds	r7, #40	; 0x28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40010400 	.word	0x40010400
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40020800 	.word	0x40020800

08003b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08c      	sub	sp, #48	; 0x30
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b60:	f107 031c 	add.w	r3, r7, #28
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a5c      	ldr	r2, [pc, #368]	; (8003ce8 <HAL_TIM_MspPostInit+0x190>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d11f      	bne.n	8003bba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a5a      	ldr	r2, [pc, #360]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b58      	ldr	r3, [pc, #352]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	484f      	ldr	r0, [pc, #316]	; (8003cf0 <HAL_TIM_MspPostInit+0x198>)
 8003bb4:	f001 fc6c 	bl	8005490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003bb8:	e091      	b.n	8003cde <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a4d      	ldr	r2, [pc, #308]	; (8003cf4 <HAL_TIM_MspPostInit+0x19c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d11e      	bne.n	8003c02 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	4b48      	ldr	r3, [pc, #288]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	4a47      	ldr	r2, [pc, #284]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003bce:	f043 0302 	orr.w	r3, r3, #2
 8003bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd4:	4b45      	ldr	r3, [pc, #276]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003be0:	2330      	movs	r3, #48	; 0x30
 8003be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf4:	f107 031c 	add.w	r3, r7, #28
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	483f      	ldr	r0, [pc, #252]	; (8003cf8 <HAL_TIM_MspPostInit+0x1a0>)
 8003bfc:	f001 fc48 	bl	8005490 <HAL_GPIO_Init>
}
 8003c00:	e06d      	b.n	8003cde <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a3d      	ldr	r2, [pc, #244]	; (8003cfc <HAL_TIM_MspPostInit+0x1a4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d11f      	bne.n	8003c4c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	4a35      	ldr	r2, [pc, #212]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003c16:	f043 0308 	orr.w	r3, r3, #8
 8003c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1c:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003c28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c3e:	f107 031c 	add.w	r3, r7, #28
 8003c42:	4619      	mov	r1, r3
 8003c44:	482e      	ldr	r0, [pc, #184]	; (8003d00 <HAL_TIM_MspPostInit+0x1a8>)
 8003c46:	f001 fc23 	bl	8005490 <HAL_GPIO_Init>
}
 8003c4a:	e048      	b.n	8003cde <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2c      	ldr	r2, [pc, #176]	; (8003d04 <HAL_TIM_MspPostInit+0x1ac>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d11f      	bne.n	8003c96 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a23      	ldr	r2, [pc, #140]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b21      	ldr	r3, [pc, #132]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003c84:	2303      	movs	r3, #3
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c88:	f107 031c 	add.w	r3, r7, #28
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	481a      	ldr	r0, [pc, #104]	; (8003cf8 <HAL_TIM_MspPostInit+0x1a0>)
 8003c90:	f001 fbfe 	bl	8005490 <HAL_GPIO_Init>
}
 8003c94:	e023      	b.n	8003cde <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_TIM_MspPostInit+0x1b0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d11e      	bne.n	8003cde <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	4a10      	ldr	r2, [pc, #64]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_TIM_MspPostInit+0x194>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd2:	f107 031c 	add.w	r3, r7, #28
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4807      	ldr	r0, [pc, #28]	; (8003cf8 <HAL_TIM_MspPostInit+0x1a0>)
 8003cda:	f001 fbd9 	bl	8005490 <HAL_GPIO_Init>
}
 8003cde:	bf00      	nop
 8003ce0:	3730      	adds	r7, #48	; 0x30
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40020400 	.word	0x40020400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40020c00 	.word	0x40020c00
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800

08003d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <HAL_UART_MspInit+0x84>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12b      	bne.n	8003d86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_UART_MspInit+0x88>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_UART_MspInit+0x88>)
 8003d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_UART_MspInit+0x88>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_UART_MspInit+0x88>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <HAL_UART_MspInit+0x88>)
 8003d54:	f043 0308 	orr.w	r3, r3, #8
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_UART_MspInit+0x88>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d66:	2360      	movs	r3, #96	; 0x60
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d72:	2303      	movs	r3, #3
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d76:	2307      	movs	r3, #7
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4805      	ldr	r0, [pc, #20]	; (8003d98 <HAL_UART_MspInit+0x8c>)
 8003d82:	f001 fb85 	bl	8005490 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d86:	bf00      	nop
 8003d88:	3728      	adds	r7, #40	; 0x28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40004400 	.word	0x40004400
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40020c00 	.word	0x40020c00

08003d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <NMI_Handler+0x4>

08003da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003da6:	e7fe      	b.n	8003da6 <HardFault_Handler+0x4>

08003da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <MemManage_Handler+0x4>

08003dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003db2:	e7fe      	b.n	8003db2 <BusFault_Handler+0x4>

08003db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <UsageFault_Handler+0x4>

08003dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de8:	f000 fa5e 	bl	80042a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003df4:	2004      	movs	r0, #4
 8003df6:	f001 fd27 	bl	8005848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e06:	f001 fd1f 	bl	8005848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <SDIO_IRQHandler+0x10>)
 8003e16:	f003 fa93 	bl	8007340 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20002eb8 	.word	0x20002eb8

08003e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <TIM6_DAC_IRQHandler+0x10>)
 8003e2a:	f005 f9e2 	bl	80091f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20002e38 	.word	0x20002e38

08003e38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <TIM7_IRQHandler+0x10>)
 8003e3e:	f005 f9d8 	bl	80091f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20002fe0 	.word	0x20002fe0

08003e4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <DMA2_Stream2_IRQHandler+0x10>)
 8003e52:	f001 f8a9 	bl	8004fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20002f80 	.word	0x20002f80

08003e60 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <DMA2_Stream3_IRQHandler+0x10>)
 8003e66:	f001 f89f 	bl	8004fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20002ad0 	.word	0x20002ad0

08003e74 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <DMA2_Stream6_IRQHandler+0x10>)
 8003e7a:	f001 f895 	bl	8004fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20002dd4 	.word	0x20002dd4

08003e88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e00a      	b.n	8003eb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e9a:	f3af 8000 	nop.w
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	60ba      	str	r2, [r7, #8]
 8003ea6:	b2ca      	uxtb	r2, r1
 8003ea8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3301      	adds	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	dbf0      	blt.n	8003e9a <_read+0x12>
	}

return len;
 8003eb8:	687b      	ldr	r3, [r7, #4]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
	return -1;
 8003eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eea:	605a      	str	r2, [r3, #4]
	return 0;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <_isatty>:

int _isatty(int file)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
	return 1;
 8003f02:	2301      	movs	r3, #1
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f34:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <_sbrk+0x5c>)
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <_sbrk+0x60>)
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <_sbrk+0x64>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <_sbrk+0x64>)
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <_sbrk+0x68>)
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <_sbrk+0x64>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d207      	bcs.n	8003f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f5c:	f00b f916 	bl	800f18c <__errno>
 8003f60:	4602      	mov	r2, r0
 8003f62:	230c      	movs	r3, #12
 8003f64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6a:	e009      	b.n	8003f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <_sbrk+0x64>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <_sbrk+0x64>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <_sbrk+0x64>)
 8003f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20050000 	.word	0x20050000
 8003f8c:	00000400 	.word	0x00000400
 8003f90:	2000020c 	.word	0x2000020c
 8003f94:	200050a0 	.word	0x200050a0

08003f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <SystemInit+0x28>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <SystemInit+0x28>)
 8003fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <SystemInit+0x28>)
 8003fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fb2:	609a      	str	r2, [r3, #8]
#endif
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000ed00 	.word	0xe000ed00

08003fc4 <cppInit>:
LineTrace line_trace(&motor, &line_sensor);

float velocity;

void cppInit(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	line_sensor.ADCStart();
 8003fc8:	4812      	ldr	r0, [pc, #72]	; (8004014 <cppInit+0x50>)
 8003fca:	f7fd fccd 	bl	8001968 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8003fce:	4812      	ldr	r0, [pc, #72]	; (8004018 <cppInit+0x54>)
 8003fd0:	f7fd fe10 	bl	8001bf4 <_ZN5Motor4initEv>
	encoder.init();
 8003fd4:	4811      	ldr	r0, [pc, #68]	; (800401c <cppInit+0x58>)
 8003fd6:	f7fd f8d1 	bl	800117c <_ZN7Encoder4initEv>

	//line_sensor.calibration();

	line_trace.setGain(0.0005, 0.000003, 0);
 8003fda:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8004020 <cppInit+0x5c>
 8003fde:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004024 <cppInit+0x60>
 8003fe2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8004028 <cppInit+0x64>
 8003fe6:	4811      	ldr	r0, [pc, #68]	; (800402c <cppInit+0x68>)
 8003fe8:	f7fd fdda 	bl	8001ba0 <_ZN9LineTrace7setGainEfff>
	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 8003fec:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8004020 <cppInit+0x5c>
 8003ff0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8004020 <cppInit+0x5c>
 8003ff4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8004020 <cppInit+0x5c>
 8003ff8:	480d      	ldr	r0, [pc, #52]	; (8004030 <cppInit+0x6c>)
 8003ffa:	f7fe f981 	bl	8002300 <_ZN12VelocityCtrl15setVelocityGainEfff>
	velocity_ctrl.setOmegaGain(0.2, 0, 20);
 8003ffe:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8004002:	eddf 0a07 	vldr	s1, [pc, #28]	; 8004020 <cppInit+0x5c>
 8004006:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004034 <cppInit+0x70>
 800400a:	4809      	ldr	r0, [pc, #36]	; (8004030 <cppInit+0x6c>)
 800400c:	f7fe f991 	bl	8002332 <_ZN12VelocityCtrl12setOmegaGainEfff>
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000210 	.word	0x20000210
 8004018:	20000514 	.word	0x20000514
 800401c:	2000051c 	.word	0x2000051c
 8004020:	00000000 	.word	0x00000000
 8004024:	3649539c 	.word	0x3649539c
 8004028:	3a03126f 	.word	0x3a03126f
 800402c:	20000554 	.word	0x20000554
 8004030:	20000520 	.word	0x20000520
 8004034:	3e4ccccd 	.word	0x3e4ccccd

08004038 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800403c:	481b      	ldr	r0, [pc, #108]	; (80040ac <cppFlip1ms+0x74>)
 800403e:	f7fd fcf1 	bl	8001a24 <_ZN10LineSensor18updateSensorValuesEv>
	encoder.updateCnt();
 8004042:	481b      	ldr	r0, [pc, #108]	; (80040b0 <cppFlip1ms+0x78>)
 8004044:	f7fd f8ba 	bl	80011bc <_ZN7Encoder9updateCntEv>

	velocity = velocity_ctrl.flip();
 8004048:	481a      	ldr	r0, [pc, #104]	; (80040b4 <cppFlip1ms+0x7c>)
 800404a:	f7fe f98b 	bl	8002364 <_ZN12VelocityCtrl4flipEv>
 800404e:	eef0 7a40 	vmov.f32	s15, s0
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <cppFlip1ms+0x80>)
 8004054:	edc3 7a00 	vstr	s15, [r3]
	//line_trace.flip();

	motor.motorCtrl();
 8004058:	4818      	ldr	r0, [pc, #96]	; (80040bc <cppFlip1ms+0x84>)
 800405a:	f7fd fddd 	bl	8001c18 <_ZN5Motor9motorCtrlEv>

	encoder.clearCnt();
 800405e:	4814      	ldr	r0, [pc, #80]	; (80040b0 <cppFlip1ms+0x78>)
 8004060:	f7fd f8e2 	bl	8001228 <_ZN7Encoder8clearCntEv>

	if(rotary_switch.getValue() == 1){
 8004064:	4816      	ldr	r0, [pc, #88]	; (80040c0 <cppFlip1ms+0x88>)
 8004066:	f7fd fe99 	bl	8001d9c <_ZN12RotarySwitch8getValueEv>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00e      	beq.n	8004098 <cppFlip1ms+0x60>
		//line_trace.start();
		//line_trace.setNormalRatio(0.1);
		velocity_ctrl.start();
 800407a:	480e      	ldr	r0, [pc, #56]	; (80040b4 <cppFlip1ms+0x7c>)
 800407c:	f7fe f98e 	bl	800239c <_ZN12VelocityCtrl5startEv>
		velocity_ctrl.setVelocity(0, 0);
 8004080:	eddf 0a10 	vldr	s1, [pc, #64]	; 80040c4 <cppFlip1ms+0x8c>
 8004084:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80040c4 <cppFlip1ms+0x8c>
 8004088:	480a      	ldr	r0, [pc, #40]	; (80040b4 <cppFlip1ms+0x7c>)
 800408a:	f7fe f925 	bl	80022d8 <_ZN12VelocityCtrl11setVelocityEff>
		led.fullColor('R');
 800408e:	2152      	movs	r1, #82	; 0x52
 8004090:	480d      	ldr	r0, [pc, #52]	; (80040c8 <cppFlip1ms+0x90>)
 8004092:	f7fd fb0d 	bl	80016b0 <_ZN3LED9fullColorEc>
		//line_trace.stop();
		//line_trace.setNormalRatio(0.0);
		velocity_ctrl.stop();
		led.fullColor('G');
	}
}
 8004096:	e006      	b.n	80040a6 <cppFlip1ms+0x6e>
		velocity_ctrl.stop();
 8004098:	4806      	ldr	r0, [pc, #24]	; (80040b4 <cppFlip1ms+0x7c>)
 800409a:	f7fe f991 	bl	80023c0 <_ZN12VelocityCtrl4stopEv>
		led.fullColor('G');
 800409e:	2147      	movs	r1, #71	; 0x47
 80040a0:	4809      	ldr	r0, [pc, #36]	; (80040c8 <cppFlip1ms+0x90>)
 80040a2:	f7fd fb05 	bl	80016b0 <_ZN3LED9fullColorEc>
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000210 	.word	0x20000210
 80040b0:	2000051c 	.word	0x2000051c
 80040b4:	20000520 	.word	0x20000520
 80040b8:	20000574 	.word	0x20000574
 80040bc:	20000514 	.word	0x20000514
 80040c0:	20000510 	.word	0x20000510
 80040c4:	00000000 	.word	0x00000000
 80040c8:	20000518 	.word	0x20000518

080040cc <cppFlip100ns>:

void cppFlip100ns(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80040d0:	4802      	ldr	r0, [pc, #8]	; (80040dc <cppFlip100ns+0x10>)
 80040d2:	f7fd fc59 	bl	8001988 <_ZN10LineSensor17storeSensorValuesEv>
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000210 	.word	0x20000210

080040e0 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	4619      	mov	r1, r3
 80040ee:	4803      	ldr	r0, [pc, #12]	; (80040fc <cppExit+0x1c>)
 80040f0:	f7fd feae 	bl	8001e50 <_ZN10SideSensor12updateStatusEt>
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000508 	.word	0x20000508

08004100 <cppLoop>:

void cppLoop(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0

	//line_sensor.updateSensorValues();
	//line_sensor.printSensorValues();

	//led.fullColor('C');
	led.LR(-1, 1);
 8004104:	2201      	movs	r2, #1
 8004106:	f04f 31ff 	mov.w	r1, #4294967295
 800410a:	4808      	ldr	r0, [pc, #32]	; (800412c <cppLoop+0x2c>)
 800410c:	f7fd fb8c 	bl	8001828 <_ZN3LED2LREaa>

	HAL_Delay(100);
 8004110:	2064      	movs	r0, #100	; 0x64
 8004112:	f000 f8e9 	bl	80042e8 <HAL_Delay>

	//motor.setRatio(0, -0.5);
	//velocity_ctrl.setOmegaGain(1, 1, 1);
	//led.fullColor('Y');
	led.LR(-1, 0);
 8004116:	2200      	movs	r2, #0
 8004118:	f04f 31ff 	mov.w	r1, #4294967295
 800411c:	4803      	ldr	r0, [pc, #12]	; (800412c <cppLoop+0x2c>)
 800411e:	f7fd fb83 	bl	8001828 <_ZN3LED2LREaa>

	HAL_Delay(100);
 8004122:	2064      	movs	r0, #100	; 0x64
 8004124:	f000 f8e0 	bl	80042e8 <HAL_Delay>

}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000518 	.word	0x20000518

08004130 <_Z41__static_initialization_and_destruction_0ii>:
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d11d      	bne.n	800417c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004146:	4293      	cmp	r3, r2
 8004148:	d118      	bne.n	800417c <_Z41__static_initialization_and_destruction_0ii+0x4c>
LineSensor line_sensor;
 800414a:	480e      	ldr	r0, [pc, #56]	; (8004184 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800414c:	f7fd fba4 	bl	8001898 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8004150:	480d      	ldr	r0, [pc, #52]	; (8004188 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004152:	f7fd fe71 	bl	8001e38 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8004156:	480d      	ldr	r0, [pc, #52]	; (800418c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004158:	f7fd fa9e 	bl	8001698 <_ZN8JoyStickC1Ev>
Motor motor;
 800415c:	480c      	ldr	r0, [pc, #48]	; (8004190 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800415e:	f7fd fd38 	bl	8001bd2 <_ZN5MotorC1Ev>
Encoder encoder;
 8004162:	480c      	ldr	r0, [pc, #48]	; (8004194 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004164:	f7fc fff6 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder);
 8004168:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800416a:	4909      	ldr	r1, [pc, #36]	; (8004190 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800416c:	480a      	ldr	r0, [pc, #40]	; (8004198 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800416e:	f7fd fecd 	bl	8001f0c <_ZN12VelocityCtrlC1EP5MotorP7Encoder>
LineTrace line_trace(&motor, &line_sensor);
 8004172:	4a04      	ldr	r2, [pc, #16]	; (8004184 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004174:	4906      	ldr	r1, [pc, #24]	; (8004190 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004176:	4809      	ldr	r0, [pc, #36]	; (800419c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004178:	f7fd fcec 	bl	8001b54 <_ZN9LineTraceC1EP5MotorP10LineSensor>
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000210 	.word	0x20000210
 8004188:	20000508 	.word	0x20000508
 800418c:	2000050c 	.word	0x2000050c
 8004190:	20000514 	.word	0x20000514
 8004194:	2000051c 	.word	0x2000051c
 8004198:	20000520 	.word	0x20000520
 800419c:	20000554 	.word	0x20000554

080041a0 <_GLOBAL__sub_I_line_sensor>:
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041a8:	2001      	movs	r0, #1
 80041aa:	f7ff ffc1 	bl	8004130 <_Z41__static_initialization_and_destruction_0ii>
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041b6:	e003      	b.n	80041c0 <LoopCopyDataInit>

080041b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041be:	3104      	adds	r1, #4

080041c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041c0:	480b      	ldr	r0, [pc, #44]	; (80041f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041c2:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041c8:	d3f6      	bcc.n	80041b8 <CopyDataInit>
  ldr  r2, =_sbss
 80041ca:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041cc:	e002      	b.n	80041d4 <LoopFillZerobss>

080041ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041d0:	f842 3b04 	str.w	r3, [r2], #4

080041d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041d8:	d3f9      	bcc.n	80041ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041da:	f7ff fedd 	bl	8003f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041de:	f00a ffdb 	bl	800f198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041e2:	f7fe f9ef 	bl	80025c4 <main>
  bx  lr    
 80041e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80041ec:	08014850 	.word	0x08014850
  ldr  r0, =_sdata
 80041f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041f4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80041f8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80041fc:	2000509c 	.word	0x2000509c

08004200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004200:	e7fe      	b.n	8004200 <ADC_IRQHandler>
	...

08004204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_Init+0x40>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <HAL_Init+0x40>)
 800420e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_Init+0x40>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <HAL_Init+0x40>)
 800421a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004220:	4b08      	ldr	r3, [pc, #32]	; (8004244 <HAL_Init+0x40>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a07      	ldr	r2, [pc, #28]	; (8004244 <HAL_Init+0x40>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800422c:	2003      	movs	r0, #3
 800422e:	f000 fd51 	bl	8004cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004232:	2000      	movs	r0, #0
 8004234:	f000 f808 	bl	8004248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004238:	f7ff f8d0 	bl	80033dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00

08004248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_InitTick+0x54>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_InitTick+0x58>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	4619      	mov	r1, r3
 800425a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800425e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004262:	fbb2 f3f3 	udiv	r3, r2, r3
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fd69 	bl	8004d3e <HAL_SYSTICK_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e00e      	b.n	8004294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b0f      	cmp	r3, #15
 800427a:	d80a      	bhi.n	8004292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800427c:	2200      	movs	r2, #0
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	f000 fd31 	bl	8004cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004288:	4a06      	ldr	r2, [pc, #24]	; (80042a4 <HAL_InitTick+0x5c>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000000 	.word	0x20000000
 80042a0:	20000008 	.word	0x20000008
 80042a4:	20000004 	.word	0x20000004

080042a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_IncTick+0x20>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_IncTick+0x24>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <HAL_IncTick+0x24>)
 80042ba:	6013      	str	r3, [r2, #0]
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20000008 	.word	0x20000008
 80042cc:	20003020 	.word	0x20003020

080042d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return uwTick;
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <HAL_GetTick+0x14>)
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20003020 	.word	0x20003020

080042e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f0:	f7ff ffee 	bl	80042d0 <HAL_GetTick>
 80042f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d005      	beq.n	800430e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_Delay+0x40>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800430e:	bf00      	nop
 8004310:	f7ff ffde 	bl	80042d0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	429a      	cmp	r2, r3
 800431e:	d8f7      	bhi.n	8004310 <HAL_Delay+0x28>
  {
  }
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000008 	.word	0x20000008

0800432c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e033      	b.n	80043aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff f86e 	bl	800342c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d118      	bne.n	800439c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004372:	f023 0302 	bic.w	r3, r3, #2
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa5a 	bl	8004838 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
 800439a:	e001      	b.n	80043a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_ADC_Start_DMA+0x1e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0cc      	b.n	800456c <HAL_ADC_Start_DMA+0x1b8>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d018      	beq.n	800441a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043f8:	4b5e      	ldr	r3, [pc, #376]	; (8004574 <HAL_ADC_Start_DMA+0x1c0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5e      	ldr	r2, [pc, #376]	; (8004578 <HAL_ADC_Start_DMA+0x1c4>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	0c9a      	lsrs	r2, r3, #18
 8004404:	4613      	mov	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800440c:	e002      	b.n	8004414 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	3b01      	subs	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f9      	bne.n	800440e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	f040 80a0 	bne.w	800456a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004454:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	d106      	bne.n	8004478 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f023 0206 	bic.w	r2, r3, #6
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
 8004476:	e002      	b.n	800447e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004486:	4b3d      	ldr	r3, [pc, #244]	; (800457c <HAL_ADC_Start_DMA+0x1c8>)
 8004488:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	4a3c      	ldr	r2, [pc, #240]	; (8004580 <HAL_ADC_Start_DMA+0x1cc>)
 8004490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <HAL_ADC_Start_DMA+0x1d0>)
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	4a3a      	ldr	r2, [pc, #232]	; (8004588 <HAL_ADC_Start_DMA+0x1d4>)
 80044a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80044ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	334c      	adds	r3, #76	; 0x4c
 80044d6:	4619      	mov	r1, r3
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f000 fcea 	bl	8004eb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d12a      	bne.n	8004542 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a26      	ldr	r2, [pc, #152]	; (800458c <HAL_ADC_Start_DMA+0x1d8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d015      	beq.n	8004522 <HAL_ADC_Start_DMA+0x16e>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a25      	ldr	r2, [pc, #148]	; (8004590 <HAL_ADC_Start_DMA+0x1dc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d105      	bne.n	800450c <HAL_ADC_Start_DMA+0x158>
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <HAL_ADC_Start_DMA+0x1c8>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a20      	ldr	r2, [pc, #128]	; (8004594 <HAL_ADC_Start_DMA+0x1e0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d129      	bne.n	800456a <HAL_ADC_Start_DMA+0x1b6>
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_ADC_Start_DMA+0x1c8>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d823      	bhi.n	800456a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11c      	bne.n	800456a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	e013      	b.n	800456a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a11      	ldr	r2, [pc, #68]	; (800458c <HAL_ADC_Start_DMA+0x1d8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d10e      	bne.n	800456a <HAL_ADC_Start_DMA+0x1b6>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004568:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000000 	.word	0x20000000
 8004578:	431bde83 	.word	0x431bde83
 800457c:	40012300 	.word	0x40012300
 8004580:	08004a31 	.word	0x08004a31
 8004584:	08004aeb 	.word	0x08004aeb
 8004588:	08004b07 	.word	0x08004b07
 800458c:	40012000 	.word	0x40012000
 8004590:	40012100 	.word	0x40012100
 8004594:	40012200 	.word	0x40012200

08004598 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e113      	b.n	8004818 <HAL_ADC_ConfigChannel+0x244>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b09      	cmp	r3, #9
 80045fe:	d925      	bls.n	800464c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68d9      	ldr	r1, [r3, #12]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	3b1e      	subs	r3, #30
 8004616:	2207      	movs	r2, #7
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43da      	mvns	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	400a      	ands	r2, r1
 8004624:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68d9      	ldr	r1, [r3, #12]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	4618      	mov	r0, r3
 8004638:	4603      	mov	r3, r0
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4403      	add	r3, r0
 800463e:	3b1e      	subs	r3, #30
 8004640:	409a      	lsls	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	e022      	b.n	8004692 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6919      	ldr	r1, [r3, #16]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	2207      	movs	r2, #7
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43da      	mvns	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	400a      	ands	r2, r1
 800466e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6919      	ldr	r1, [r3, #16]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	4618      	mov	r0, r3
 8004682:	4603      	mov	r3, r0
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4403      	add	r3, r0
 8004688:	409a      	lsls	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d824      	bhi.n	80046e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	3b05      	subs	r3, #5
 80046ac:	221f      	movs	r2, #31
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43da      	mvns	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	400a      	ands	r2, r1
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	4618      	mov	r0, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	3b05      	subs	r3, #5
 80046d6:	fa00 f203 	lsl.w	r2, r0, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	635a      	str	r2, [r3, #52]	; 0x34
 80046e2:	e04c      	b.n	800477e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d824      	bhi.n	8004736 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	3b23      	subs	r3, #35	; 0x23
 80046fe:	221f      	movs	r2, #31
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43da      	mvns	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	400a      	ands	r2, r1
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	4618      	mov	r0, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	3b23      	subs	r3, #35	; 0x23
 8004728:	fa00 f203 	lsl.w	r2, r0, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
 8004734:	e023      	b.n	800477e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	3b41      	subs	r3, #65	; 0x41
 8004748:	221f      	movs	r2, #31
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	400a      	ands	r2, r1
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	4618      	mov	r0, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	3b41      	subs	r3, #65	; 0x41
 8004772:	fa00 f203 	lsl.w	r2, r0, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_ADC_ConfigChannel+0x250>)
 8004780:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a28      	ldr	r2, [pc, #160]	; (8004828 <HAL_ADC_ConfigChannel+0x254>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10f      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x1d8>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b12      	cmp	r3, #18
 8004792:	d10b      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <HAL_ADC_ConfigChannel+0x254>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d12b      	bne.n	800480e <HAL_ADC_ConfigChannel+0x23a>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_ADC_ConfigChannel+0x258>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <HAL_ADC_ConfigChannel+0x1f4>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b11      	cmp	r3, #17
 80047c6:	d122      	bne.n	800480e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <HAL_ADC_ConfigChannel+0x258>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d111      	bne.n	800480e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <HAL_ADC_ConfigChannel+0x25c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_ADC_ConfigChannel+0x260>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	0c9a      	lsrs	r2, r3, #18
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004800:	e002      	b.n	8004808 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3b01      	subs	r3, #1
 8004806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f9      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40012300 	.word	0x40012300
 8004828:	40012000 	.word	0x40012000
 800482c:	10000012 	.word	0x10000012
 8004830:	20000000 	.word	0x20000000
 8004834:	431bde83 	.word	0x431bde83

08004838 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004840:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <ADC_Init+0x1f0>)
 8004842:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	021a      	lsls	r2, r3, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6899      	ldr	r1, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	4a58      	ldr	r2, [pc, #352]	; (8004a2c <ADC_Init+0x1f4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6899      	ldr	r1, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6899      	ldr	r1, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	e00f      	b.n	8004936 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004934:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0202 	bic.w	r2, r2, #2
 8004944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6899      	ldr	r1, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7e1b      	ldrb	r3, [r3, #24]
 8004950:	005a      	lsls	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004972:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004982:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	3b01      	subs	r3, #1
 8004990:	035a      	lsls	r2, r3, #13
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e007      	b.n	80049ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	051a      	lsls	r2, r3, #20
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6899      	ldr	r1, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049ee:	025a      	lsls	r2, r3, #9
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6899      	ldr	r1, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	029a      	lsls	r2, r3, #10
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40012300 	.word	0x40012300
 8004a2c:	0f000001 	.word	0x0f000001

08004a30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d13c      	bne.n	8004ac4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d12b      	bne.n	8004abc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d127      	bne.n	8004abc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d006      	beq.n	8004a88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d119      	bne.n	8004abc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0220 	bic.w	r2, r2, #32
 8004a96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d105      	bne.n	8004abc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f043 0201 	orr.w	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f7ff fd6b 	bl	8004598 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ac2:	e00e      	b.n	8004ae2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff fd75 	bl	80045c0 <HAL_ADC_ErrorCallback>
}
 8004ad6:	e004      	b.n	8004ae2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff fd57 	bl	80045ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2240      	movs	r2, #64	; 0x40
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff fd4a 	bl	80045c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <__NVIC_SetPriorityGrouping>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b50:	4013      	ands	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b66:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	60d3      	str	r3, [r2, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <__NVIC_GetPriorityGrouping>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <__NVIC_GetPriorityGrouping+0x18>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	f003 0307 	and.w	r3, r3, #7
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <__NVIC_EnableIRQ>:
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db0b      	blt.n	8004bc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	f003 021f 	and.w	r2, r3, #31
 8004bb0:	4907      	ldr	r1, [pc, #28]	; (8004bd0 <__NVIC_EnableIRQ+0x38>)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	2001      	movs	r0, #1
 8004bba:	fa00 f202 	lsl.w	r2, r0, r2
 8004bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000e100 	.word	0xe000e100

08004bd4 <__NVIC_SetPriority>:
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	db0a      	blt.n	8004bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	490c      	ldr	r1, [pc, #48]	; (8004c20 <__NVIC_SetPriority+0x4c>)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	0112      	lsls	r2, r2, #4
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bfc:	e00a      	b.n	8004c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4908      	ldr	r1, [pc, #32]	; (8004c24 <__NVIC_SetPriority+0x50>)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	0112      	lsls	r2, r2, #4
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	440b      	add	r3, r1
 8004c12:	761a      	strb	r2, [r3, #24]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000e100 	.word	0xe000e100
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <NVIC_EncodePriority>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	; 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f1c3 0307 	rsb	r3, r3, #7
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	bf28      	it	cs
 8004c46:	2304      	movcs	r3, #4
 8004c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2b06      	cmp	r3, #6
 8004c50:	d902      	bls.n	8004c58 <NVIC_EncodePriority+0x30>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3b03      	subs	r3, #3
 8004c56:	e000      	b.n	8004c5a <NVIC_EncodePriority+0x32>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43da      	mvns	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c70:	f04f 31ff 	mov.w	r1, #4294967295
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	43d9      	mvns	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	4313      	orrs	r3, r2
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3724      	adds	r7, #36	; 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <SysTick_Config>:
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca0:	d301      	bcc.n	8004ca6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e00f      	b.n	8004cc6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <SysTick_Config+0x40>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cae:	210f      	movs	r1, #15
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	f7ff ff8e 	bl	8004bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <SysTick_Config+0x40>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cbe:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <SysTick_Config+0x40>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000e010 	.word	0xe000e010

08004cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff29 	bl	8004b34 <__NVIC_SetPriorityGrouping>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cfc:	f7ff ff3e 	bl	8004b7c <__NVIC_GetPriorityGrouping>
 8004d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	6978      	ldr	r0, [r7, #20]
 8004d08:	f7ff ff8e 	bl	8004c28 <NVIC_EncodePriority>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff ff5d 	bl	8004bd4 <__NVIC_SetPriority>
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff31 	bl	8004b98 <__NVIC_EnableIRQ>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ffa2 	bl	8004c90 <SysTick_Config>
 8004d4c:	4603      	mov	r3, r0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d64:	f7ff fab4 	bl	80042d0 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e099      	b.n	8004ea8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d94:	e00f      	b.n	8004db6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d96:	f7ff fa9b 	bl	80042d0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	d908      	bls.n	8004db6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2203      	movs	r2, #3
 8004dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e078      	b.n	8004ea8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e8      	bne.n	8004d96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4b38      	ldr	r3, [pc, #224]	; (8004eb0 <HAL_DMA_Init+0x158>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d107      	bne.n	8004e20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0307 	bic.w	r3, r3, #7
 8004e36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d117      	bne.n	8004e7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa9d 	bl	800539c <DMA_CheckFifoParam>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2240      	movs	r2, #64	; 0x40
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e76:	2301      	movs	r3, #1
 8004e78:	e016      	b.n	8004ea8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa54 	bl	8005330 <DMA_CalcBaseAndBitshift>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	223f      	movs	r2, #63	; 0x3f
 8004e92:	409a      	lsls	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	f010803f 	.word	0xf010803f

08004eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_DMA_Start_IT+0x26>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e040      	b.n	8004f5c <HAL_DMA_Start_IT+0xa8>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d12f      	bne.n	8004f4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f9e6 	bl	80052d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	223f      	movs	r2, #63	; 0x3f
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0216 	orr.w	r2, r2, #22
 8004f22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0208 	orr.w	r2, r2, #8
 8004f3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e005      	b.n	8004f5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
 8004f58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d004      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2280      	movs	r2, #128	; 0x80
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e00c      	b.n	8004f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2205      	movs	r2, #5
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fb4:	4b92      	ldr	r3, [pc, #584]	; (8005200 <HAL_DMA_IRQHandler+0x258>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a92      	ldr	r2, [pc, #584]	; (8005204 <HAL_DMA_IRQHandler+0x25c>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0a9b      	lsrs	r3, r3, #10
 8004fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01a      	beq.n	8005014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0204 	bic.w	r2, r2, #4
 8004ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005000:	2208      	movs	r2, #8
 8005002:	409a      	lsls	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005036:	2201      	movs	r2, #1
 8005038:	409a      	lsls	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f043 0202 	orr.w	r2, r3, #2
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	2204      	movs	r2, #4
 8005050:	409a      	lsls	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d012      	beq.n	8005080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506c:	2204      	movs	r2, #4
 800506e:	409a      	lsls	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	f043 0204 	orr.w	r2, r3, #4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	2210      	movs	r2, #16
 8005086:	409a      	lsls	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d043      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d03c      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	2210      	movs	r2, #16
 80050a4:	409a      	lsls	r2, r3
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d018      	beq.n	80050ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d024      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
 80050d6:	e01f      	b.n	8005118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
 80050e8:	e016      	b.n	8005118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0208 	bic.w	r2, r2, #8
 8005106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	2220      	movs	r2, #32
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 808e 	beq.w	8005246 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8086 	beq.w	8005246 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513e:	2220      	movs	r2, #32
 8005140:	409a      	lsls	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b05      	cmp	r3, #5
 8005150:	d136      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0216 	bic.w	r2, r2, #22
 8005160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <HAL_DMA_IRQHandler+0x1da>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0208 	bic.w	r2, r2, #8
 8005190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005196:	223f      	movs	r2, #63	; 0x3f
 8005198:	409a      	lsls	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d07d      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
        }
        return;
 80051be:	e078      	b.n	80052b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01c      	beq.n	8005208 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d030      	beq.n	8005246 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
 80051ec:	e02b      	b.n	8005246 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d027      	beq.n	8005246 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
 80051fe:	e022      	b.n	8005246 <HAL_DMA_IRQHandler+0x29e>
 8005200:	20000000 	.word	0x20000000
 8005204:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0210 	bic.w	r2, r2, #16
 8005224:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	2b00      	cmp	r3, #0
 800524c:	d032      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d022      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2205      	movs	r2, #5
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	3301      	adds	r3, #1
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	429a      	cmp	r2, r3
 800527c:	d307      	bcc.n	800528e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f2      	bne.n	8005272 <HAL_DMA_IRQHandler+0x2ca>
 800528c:	e000      	b.n	8005290 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800528e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
 80052b0:	e000      	b.n	80052b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80052b2:	bf00      	nop
    }
  }
}
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop

080052bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d108      	bne.n	8005314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005312:	e007      	b.n	8005324 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	3b10      	subs	r3, #16
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <DMA_CalcBaseAndBitshift+0x64>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800534a:	4a13      	ldr	r2, [pc, #76]	; (8005398 <DMA_CalcBaseAndBitshift+0x68>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d909      	bls.n	8005372 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	1d1a      	adds	r2, r3, #4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	659a      	str	r2, [r3, #88]	; 0x58
 8005370:	e007      	b.n	8005382 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	aaaaaaab 	.word	0xaaaaaaab
 8005398:	080140a4 	.word	0x080140a4

0800539c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d11f      	bne.n	80053f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d855      	bhi.n	8005468 <DMA_CheckFifoParam+0xcc>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <DMA_CheckFifoParam+0x28>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053e7 	.word	0x080053e7
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	08005469 	.word	0x08005469
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d045      	beq.n	800546c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e4:	e042      	b.n	800546c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ee:	d13f      	bne.n	8005470 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f4:	e03c      	b.n	8005470 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fe:	d121      	bne.n	8005444 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d836      	bhi.n	8005474 <DMA_CheckFifoParam+0xd8>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <DMA_CheckFifoParam+0x70>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	0800541d 	.word	0x0800541d
 8005410:	08005423 	.word	0x08005423
 8005414:	0800541d 	.word	0x0800541d
 8005418:	08005435 	.word	0x08005435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e02f      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d024      	beq.n	8005478 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005432:	e021      	b.n	8005478 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800543c:	d11e      	bne.n	800547c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005442:	e01b      	b.n	800547c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d902      	bls.n	8005450 <DMA_CheckFifoParam+0xb4>
 800544a:	2b03      	cmp	r3, #3
 800544c:	d003      	beq.n	8005456 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800544e:	e018      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
      break;
 8005454:	e015      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00e      	beq.n	8005480 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
      break;
 8005466:	e00b      	b.n	8005480 <DMA_CheckFifoParam+0xe4>
      break;
 8005468:	bf00      	nop
 800546a:	e00a      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      break;
 800546c:	bf00      	nop
 800546e:	e008      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      break;
 8005470:	bf00      	nop
 8005472:	e006      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      break;
 8005474:	bf00      	nop
 8005476:	e004      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      break;
 8005478:	bf00      	nop
 800547a:	e002      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      break;   
 800547c:	bf00      	nop
 800547e:	e000      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      break;
 8005480:	bf00      	nop
    }
  } 
  
  return status; 
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	e177      	b.n	800579c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054ac:	2201      	movs	r2, #1
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	f040 8166 	bne.w	8005796 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d00b      	beq.n	80054ea <HAL_GPIO_Init+0x5a>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d007      	beq.n	80054ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054de:	2b11      	cmp	r3, #17
 80054e0:	d003      	beq.n	80054ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b12      	cmp	r3, #18
 80054e8:	d130      	bne.n	800554c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	2203      	movs	r2, #3
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005520:	2201      	movs	r2, #1
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 0201 	and.w	r2, r3, #1
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	2203      	movs	r2, #3
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4013      	ands	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0xfc>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b12      	cmp	r3, #18
 800558a:	d123      	bne.n	80055d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	08da      	lsrs	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3208      	adds	r2, #8
 8005594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	220f      	movs	r2, #15
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	08da      	lsrs	r2, r3, #3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3208      	adds	r2, #8
 80055ce:	69b9      	ldr	r1, [r7, #24]
 80055d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	2203      	movs	r2, #3
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f003 0203 	and.w	r2, r3, #3
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80c0 	beq.w	8005796 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	4b65      	ldr	r3, [pc, #404]	; (80057b0 <HAL_GPIO_Init+0x320>)
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	4a64      	ldr	r2, [pc, #400]	; (80057b0 <HAL_GPIO_Init+0x320>)
 8005620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005624:	6453      	str	r3, [r2, #68]	; 0x44
 8005626:	4b62      	ldr	r3, [pc, #392]	; (80057b0 <HAL_GPIO_Init+0x320>)
 8005628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005632:	4a60      	ldr	r2, [pc, #384]	; (80057b4 <HAL_GPIO_Init+0x324>)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	089b      	lsrs	r3, r3, #2
 8005638:	3302      	adds	r3, #2
 800563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	220f      	movs	r2, #15
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43db      	mvns	r3, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4013      	ands	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a57      	ldr	r2, [pc, #348]	; (80057b8 <HAL_GPIO_Init+0x328>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d037      	beq.n	80056ce <HAL_GPIO_Init+0x23e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a56      	ldr	r2, [pc, #344]	; (80057bc <HAL_GPIO_Init+0x32c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d031      	beq.n	80056ca <HAL_GPIO_Init+0x23a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a55      	ldr	r2, [pc, #340]	; (80057c0 <HAL_GPIO_Init+0x330>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d02b      	beq.n	80056c6 <HAL_GPIO_Init+0x236>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a54      	ldr	r2, [pc, #336]	; (80057c4 <HAL_GPIO_Init+0x334>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d025      	beq.n	80056c2 <HAL_GPIO_Init+0x232>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a53      	ldr	r2, [pc, #332]	; (80057c8 <HAL_GPIO_Init+0x338>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01f      	beq.n	80056be <HAL_GPIO_Init+0x22e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a52      	ldr	r2, [pc, #328]	; (80057cc <HAL_GPIO_Init+0x33c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d019      	beq.n	80056ba <HAL_GPIO_Init+0x22a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a51      	ldr	r2, [pc, #324]	; (80057d0 <HAL_GPIO_Init+0x340>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_GPIO_Init+0x226>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a50      	ldr	r2, [pc, #320]	; (80057d4 <HAL_GPIO_Init+0x344>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00d      	beq.n	80056b2 <HAL_GPIO_Init+0x222>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a4f      	ldr	r2, [pc, #316]	; (80057d8 <HAL_GPIO_Init+0x348>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <HAL_GPIO_Init+0x21e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a4e      	ldr	r2, [pc, #312]	; (80057dc <HAL_GPIO_Init+0x34c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_GPIO_Init+0x21a>
 80056a6:	2309      	movs	r3, #9
 80056a8:	e012      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056aa:	230a      	movs	r3, #10
 80056ac:	e010      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056ae:	2308      	movs	r3, #8
 80056b0:	e00e      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056b2:	2307      	movs	r3, #7
 80056b4:	e00c      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056b6:	2306      	movs	r3, #6
 80056b8:	e00a      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056ba:	2305      	movs	r3, #5
 80056bc:	e008      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056be:	2304      	movs	r3, #4
 80056c0:	e006      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056c2:	2303      	movs	r3, #3
 80056c4:	e004      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e002      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <HAL_GPIO_Init+0x240>
 80056ce:	2300      	movs	r3, #0
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	f002 0203 	and.w	r2, r2, #3
 80056d6:	0092      	lsls	r2, r2, #2
 80056d8:	4093      	lsls	r3, r2
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056e0:	4934      	ldr	r1, [pc, #208]	; (80057b4 <HAL_GPIO_Init+0x324>)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	3302      	adds	r3, #2
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056ee:	4b3c      	ldr	r3, [pc, #240]	; (80057e0 <HAL_GPIO_Init+0x350>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005712:	4a33      	ldr	r2, [pc, #204]	; (80057e0 <HAL_GPIO_Init+0x350>)
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005718:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <HAL_GPIO_Init+0x350>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	43db      	mvns	r3, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4013      	ands	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800573c:	4a28      	ldr	r2, [pc, #160]	; (80057e0 <HAL_GPIO_Init+0x350>)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005742:	4b27      	ldr	r3, [pc, #156]	; (80057e0 <HAL_GPIO_Init+0x350>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	43db      	mvns	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005766:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <HAL_GPIO_Init+0x350>)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800576c:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <HAL_GPIO_Init+0x350>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_GPIO_Init+0x350>)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3301      	adds	r3, #1
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	f67f ae84 	bls.w	80054ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057a4:	bf00      	nop
 80057a6:	3724      	adds	r7, #36	; 0x24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40023800 	.word	0x40023800
 80057b4:	40013800 	.word	0x40013800
 80057b8:	40020000 	.word	0x40020000
 80057bc:	40020400 	.word	0x40020400
 80057c0:	40020800 	.word	0x40020800
 80057c4:	40020c00 	.word	0x40020c00
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40021400 	.word	0x40021400
 80057d0:	40021800 	.word	0x40021800
 80057d4:	40021c00 	.word	0x40021c00
 80057d8:	40022000 	.word	0x40022000
 80057dc:	40022400 	.word	0x40022400
 80057e0:	40013c00 	.word	0x40013c00

080057e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
 8005800:	e001      	b.n	8005806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	807b      	strh	r3, [r7, #2]
 8005820:	4613      	mov	r3, r2
 8005822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005824:	787b      	ldrb	r3, [r7, #1]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800582a:	887a      	ldrh	r2, [r7, #2]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005830:	e003      	b.n	800583a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	041a      	lsls	r2, r3, #16
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	619a      	str	r2, [r3, #24]
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005852:	4b08      	ldr	r3, [pc, #32]	; (8005874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	4013      	ands	r3, r2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d006      	beq.n	800586c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800585e:	4a05      	ldr	r2, [pc, #20]	; (8005874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	4618      	mov	r0, r3
 8005868:	f7fc fe09 	bl	800247e <HAL_GPIO_EXTI_Callback>
  }
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40013c00 	.word	0x40013c00

08005878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e11f      	b.n	8005aca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd fe76 	bl	8003590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	; 0x24
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058dc:	f000 fe24 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 80058e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4a7b      	ldr	r2, [pc, #492]	; (8005ad4 <HAL_I2C_Init+0x25c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d807      	bhi.n	80058fc <HAL_I2C_Init+0x84>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a7a      	ldr	r2, [pc, #488]	; (8005ad8 <HAL_I2C_Init+0x260>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	bf94      	ite	ls
 80058f4:	2301      	movls	r3, #1
 80058f6:	2300      	movhi	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	e006      	b.n	800590a <HAL_I2C_Init+0x92>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a77      	ldr	r2, [pc, #476]	; (8005adc <HAL_I2C_Init+0x264>)
 8005900:	4293      	cmp	r3, r2
 8005902:	bf94      	ite	ls
 8005904:	2301      	movls	r3, #1
 8005906:	2300      	movhi	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e0db      	b.n	8005aca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a72      	ldr	r2, [pc, #456]	; (8005ae0 <HAL_I2C_Init+0x268>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	0c9b      	lsrs	r3, r3, #18
 800591c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4a64      	ldr	r2, [pc, #400]	; (8005ad4 <HAL_I2C_Init+0x25c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d802      	bhi.n	800594c <HAL_I2C_Init+0xd4>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	3301      	adds	r3, #1
 800594a:	e009      	b.n	8005960 <HAL_I2C_Init+0xe8>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	4a63      	ldr	r2, [pc, #396]	; (8005ae4 <HAL_I2C_Init+0x26c>)
 8005958:	fba2 2303 	umull	r2, r3, r2, r3
 800595c:	099b      	lsrs	r3, r3, #6
 800595e:	3301      	adds	r3, #1
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	430b      	orrs	r3, r1
 8005966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005972:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4956      	ldr	r1, [pc, #344]	; (8005ad4 <HAL_I2C_Init+0x25c>)
 800597c:	428b      	cmp	r3, r1
 800597e:	d80d      	bhi.n	800599c <HAL_I2C_Init+0x124>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1e59      	subs	r1, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	fbb1 f3f3 	udiv	r3, r1, r3
 800598e:	3301      	adds	r3, #1
 8005990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005994:	2b04      	cmp	r3, #4
 8005996:	bf38      	it	cc
 8005998:	2304      	movcc	r3, #4
 800599a:	e04f      	b.n	8005a3c <HAL_I2C_Init+0x1c4>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d111      	bne.n	80059c8 <HAL_I2C_Init+0x150>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1e58      	subs	r0, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6859      	ldr	r1, [r3, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	440b      	add	r3, r1
 80059b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b6:	3301      	adds	r3, #1
 80059b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bf0c      	ite	eq
 80059c0:	2301      	moveq	r3, #1
 80059c2:	2300      	movne	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	e012      	b.n	80059ee <HAL_I2C_Init+0x176>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	1e58      	subs	r0, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6859      	ldr	r1, [r3, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	0099      	lsls	r1, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	fbb0 f3f3 	udiv	r3, r0, r3
 80059de:	3301      	adds	r3, #1
 80059e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bf0c      	ite	eq
 80059e8:	2301      	moveq	r3, #1
 80059ea:	2300      	movne	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_I2C_Init+0x17e>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e022      	b.n	8005a3c <HAL_I2C_Init+0x1c4>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10e      	bne.n	8005a1c <HAL_I2C_Init+0x1a4>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1e58      	subs	r0, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	440b      	add	r3, r1
 8005a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a10:	3301      	adds	r3, #1
 8005a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	e00f      	b.n	8005a3c <HAL_I2C_Init+0x1c4>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1e58      	subs	r0, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	0099      	lsls	r1, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a32:	3301      	adds	r3, #1
 8005a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	6809      	ldr	r1, [r1, #0]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6911      	ldr	r1, [r2, #16]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	68d2      	ldr	r2, [r2, #12]
 8005a76:	4311      	orrs	r1, r2
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6812      	ldr	r2, [r2, #0]
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695a      	ldr	r2, [r3, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0201 	orr.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	000186a0 	.word	0x000186a0
 8005ad8:	001e847f 	.word	0x001e847f
 8005adc:	003d08ff 	.word	0x003d08ff
 8005ae0:	431bde83 	.word	0x431bde83
 8005ae4:	10624dd3 	.word	0x10624dd3

08005ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	461a      	mov	r2, r3
 8005af4:	460b      	mov	r3, r1
 8005af6:	817b      	strh	r3, [r7, #10]
 8005af8:	4613      	mov	r3, r2
 8005afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005afc:	f7fe fbe8 	bl	80042d0 <HAL_GetTick>
 8005b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	f040 80e0 	bne.w	8005cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2319      	movs	r3, #25
 8005b16:	2201      	movs	r2, #1
 8005b18:	4970      	ldr	r1, [pc, #448]	; (8005cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f964 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
 8005b28:	e0d3      	b.n	8005cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_I2C_Master_Transmit+0x50>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e0cc      	b.n	8005cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d007      	beq.n	8005b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0201 	orr.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2221      	movs	r2, #33	; 0x21
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2210      	movs	r2, #16
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	893a      	ldrh	r2, [r7, #8]
 8005b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a50      	ldr	r2, [pc, #320]	; (8005ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ba0:	8979      	ldrh	r1, [r7, #10]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f89c 	bl	8005ce4 <I2C_MasterRequestWrite>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e08d      	b.n	8005cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005bcc:	e066      	b.n	8005c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	6a39      	ldr	r1, [r7, #32]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f9de 	bl	8005f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d107      	bne.n	8005bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06b      	b.n	8005cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d11b      	bne.n	8005c70 <HAL_I2C_Master_Transmit+0x188>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d017      	beq.n	8005c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	6a39      	ldr	r1, [r7, #32]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f9ce 	bl	8006016 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d107      	bne.n	8005c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e01a      	b.n	8005cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d194      	bne.n	8005bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	00100002 	.word	0x00100002
 8005ce0:	ffff0000 	.word	0xffff0000

08005ce4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d006      	beq.n	8005d0e <I2C_MasterRequestWrite+0x2a>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d003      	beq.n	8005d0e <I2C_MasterRequestWrite+0x2a>
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d0c:	d108      	bne.n	8005d20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e00b      	b.n	8005d38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	2b12      	cmp	r3, #18
 8005d26:	d107      	bne.n	8005d38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f84f 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00d      	beq.n	8005d6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5e:	d103      	bne.n	8005d68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e035      	b.n	8005dd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d74:	d108      	bne.n	8005d88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d84:	611a      	str	r2, [r3, #16]
 8005d86:	e01b      	b.n	8005dc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d88:	897b      	ldrh	r3, [r7, #10]
 8005d8a:	11db      	asrs	r3, r3, #7
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f003 0306 	and.w	r3, r3, #6
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f063 030f 	orn	r3, r3, #15
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	490e      	ldr	r1, [pc, #56]	; (8005de0 <I2C_MasterRequestWrite+0xfc>)
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f875 	bl	8005e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e010      	b.n	8005dd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005db6:	897b      	ldrh	r3, [r7, #10]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4907      	ldr	r1, [pc, #28]	; (8005de4 <I2C_MasterRequestWrite+0x100>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f865 	bl	8005e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	00010008 	.word	0x00010008
 8005de4:	00010002 	.word	0x00010002

08005de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df8:	e025      	b.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d021      	beq.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e02:	f7fe fa65 	bl	80042d0 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d116      	bne.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	f043 0220 	orr.w	r2, r3, #32
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e023      	b.n	8005e8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10d      	bne.n	8005e6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	43da      	mvns	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bf0c      	ite	eq
 8005e62:	2301      	moveq	r3, #1
 8005e64:	2300      	movne	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	e00c      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	43da      	mvns	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4013      	ands	r3, r2
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d0b6      	beq.n	8005dfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ea4:	e051      	b.n	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb4:	d123      	bne.n	8005efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ece:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f043 0204 	orr.w	r2, r3, #4
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e046      	b.n	8005f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d021      	beq.n	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f06:	f7fe f9e3 	bl	80042d0 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d302      	bcc.n	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d116      	bne.n	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e020      	b.n	8005f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d10c      	bne.n	8005f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bf14      	ite	ne
 8005f66:	2301      	movne	r3, #1
 8005f68:	2300      	moveq	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	e00b      	b.n	8005f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	43da      	mvns	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bf14      	ite	ne
 8005f80:	2301      	movne	r3, #1
 8005f82:	2300      	moveq	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d18d      	bne.n	8005ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa0:	e02d      	b.n	8005ffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f878 	bl	8006098 <I2C_IsAcknowledgeFailed>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e02d      	b.n	800600e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d021      	beq.n	8005ffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fba:	f7fe f989 	bl	80042d0 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d116      	bne.n	8005ffe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0220 	orr.w	r2, r3, #32
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e007      	b.n	800600e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b80      	cmp	r3, #128	; 0x80
 800600a:	d1ca      	bne.n	8005fa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006022:	e02d      	b.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f837 	bl	8006098 <I2C_IsAcknowledgeFailed>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e02d      	b.n	8006090 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d021      	beq.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603c:	f7fe f948 	bl	80042d0 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d116      	bne.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e007      	b.n	8006090 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b04      	cmp	r3, #4
 800608c:	d1ca      	bne.n	8006024 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ae:	d11b      	bne.n	80060e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	f043 0204 	orr.w	r2, r3, #4
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006102:	2300      	movs	r3, #0
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	4b20      	ldr	r3, [pc, #128]	; (8006188 <HAL_PWREx_EnableOverDrive+0x90>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <HAL_PWREx_EnableOverDrive+0x90>)
 800610c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006110:	6413      	str	r3, [r2, #64]	; 0x40
 8006112:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <HAL_PWREx_EnableOverDrive+0x90>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800611e:	4b1b      	ldr	r3, [pc, #108]	; (800618c <HAL_PWREx_EnableOverDrive+0x94>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006124:	f7fe f8d4 	bl	80042d0 <HAL_GetTick>
 8006128:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800612a:	e009      	b.n	8006140 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800612c:	f7fe f8d0 	bl	80042d0 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800613a:	d901      	bls.n	8006140 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e01f      	b.n	8006180 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <HAL_PWREx_EnableOverDrive+0x98>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d1ee      	bne.n	800612c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800614e:	4b11      	ldr	r3, [pc, #68]	; (8006194 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006154:	f7fe f8bc 	bl	80042d0 <HAL_GetTick>
 8006158:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800615a:	e009      	b.n	8006170 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800615c:	f7fe f8b8 	bl	80042d0 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800616a:	d901      	bls.n	8006170 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e007      	b.n	8006180 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <HAL_PWREx_EnableOverDrive+0x98>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800617c:	d1ee      	bne.n	800615c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40023800 	.word	0x40023800
 800618c:	420e0040 	.word	0x420e0040
 8006190:	40007000 	.word	0x40007000
 8006194:	420e0044 	.word	0x420e0044

08006198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0cc      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061ac:	4b68      	ldr	r3, [pc, #416]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d90c      	bls.n	80061d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ba:	4b65      	ldr	r3, [pc, #404]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c2:	4b63      	ldr	r3, [pc, #396]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d001      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0b8      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d020      	beq.n	8006222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061ec:	4b59      	ldr	r3, [pc, #356]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4a58      	ldr	r2, [pc, #352]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006204:	4b53      	ldr	r3, [pc, #332]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4a52      	ldr	r2, [pc, #328]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800620e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006210:	4b50      	ldr	r3, [pc, #320]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	494d      	ldr	r1, [pc, #308]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d044      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d107      	bne.n	8006246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d119      	bne.n	8006276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e07f      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d003      	beq.n	8006256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006252:	2b03      	cmp	r3, #3
 8006254:	d107      	bne.n	8006266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006256:	4b3f      	ldr	r3, [pc, #252]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e06f      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006266:	4b3b      	ldr	r3, [pc, #236]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e067      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006276:	4b37      	ldr	r3, [pc, #220]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f023 0203 	bic.w	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4934      	ldr	r1, [pc, #208]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	4313      	orrs	r3, r2
 8006286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006288:	f7fe f822 	bl	80042d0 <HAL_GetTick>
 800628c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628e:	e00a      	b.n	80062a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006290:	f7fe f81e 	bl	80042d0 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f241 3288 	movw	r2, #5000	; 0x1388
 800629e:	4293      	cmp	r3, r2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e04f      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a6:	4b2b      	ldr	r3, [pc, #172]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 020c 	and.w	r2, r3, #12
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d1eb      	bne.n	8006290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062b8:	4b25      	ldr	r3, [pc, #148]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 030f 	and.w	r3, r3, #15
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d20c      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c6:	4b22      	ldr	r3, [pc, #136]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ce:	4b20      	ldr	r3, [pc, #128]	; (8006350 <HAL_RCC_ClockConfig+0x1b8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e032      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062ec:	4b19      	ldr	r3, [pc, #100]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4916      	ldr	r1, [pc, #88]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d009      	beq.n	800631e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800630a:	4b12      	ldr	r3, [pc, #72]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	490e      	ldr	r1, [pc, #56]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	4313      	orrs	r3, r2
 800631c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800631e:	f000 f821 	bl	8006364 <HAL_RCC_GetSysClockFreq>
 8006322:	4601      	mov	r1, r0
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <HAL_RCC_ClockConfig+0x1c0>)
 8006330:	5cd3      	ldrb	r3, [r2, r3]
 8006332:	fa21 f303 	lsr.w	r3, r1, r3
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <HAL_RCC_ClockConfig+0x1c4>)
 8006338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800633a:	4b09      	ldr	r3, [pc, #36]	; (8006360 <HAL_RCC_ClockConfig+0x1c8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fd ff82 	bl	8004248 <HAL_InitTick>

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40023c00 	.word	0x40023c00
 8006354:	40023800 	.word	0x40023800
 8006358:	0801408c 	.word	0x0801408c
 800635c:	20000000 	.word	0x20000000
 8006360:	20000004 	.word	0x20000004

08006364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	607b      	str	r3, [r7, #4]
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	2300      	movs	r3, #0
 8006374:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800637a:	4b63      	ldr	r3, [pc, #396]	; (8006508 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
 8006382:	2b04      	cmp	r3, #4
 8006384:	d007      	beq.n	8006396 <HAL_RCC_GetSysClockFreq+0x32>
 8006386:	2b08      	cmp	r3, #8
 8006388:	d008      	beq.n	800639c <HAL_RCC_GetSysClockFreq+0x38>
 800638a:	2b00      	cmp	r3, #0
 800638c:	f040 80b4 	bne.w	80064f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006390:	4b5e      	ldr	r3, [pc, #376]	; (800650c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006392:	60bb      	str	r3, [r7, #8]
       break;
 8006394:	e0b3      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006396:	4b5d      	ldr	r3, [pc, #372]	; (800650c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006398:	60bb      	str	r3, [r7, #8]
      break;
 800639a:	e0b0      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800639c:	4b5a      	ldr	r3, [pc, #360]	; (8006508 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063a6:	4b58      	ldr	r3, [pc, #352]	; (8006508 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d04a      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b2:	4b55      	ldr	r3, [pc, #340]	; (8006508 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	099b      	lsrs	r3, r3, #6
 80063b8:	f04f 0400 	mov.w	r4, #0
 80063bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	ea03 0501 	and.w	r5, r3, r1
 80063c8:	ea04 0602 	and.w	r6, r4, r2
 80063cc:	4629      	mov	r1, r5
 80063ce:	4632      	mov	r2, r6
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	f04f 0400 	mov.w	r4, #0
 80063d8:	0154      	lsls	r4, r2, #5
 80063da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063de:	014b      	lsls	r3, r1, #5
 80063e0:	4619      	mov	r1, r3
 80063e2:	4622      	mov	r2, r4
 80063e4:	1b49      	subs	r1, r1, r5
 80063e6:	eb62 0206 	sbc.w	r2, r2, r6
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	f04f 0400 	mov.w	r4, #0
 80063f2:	0194      	lsls	r4, r2, #6
 80063f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063f8:	018b      	lsls	r3, r1, #6
 80063fa:	1a5b      	subs	r3, r3, r1
 80063fc:	eb64 0402 	sbc.w	r4, r4, r2
 8006400:	f04f 0100 	mov.w	r1, #0
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	00e2      	lsls	r2, r4, #3
 800640a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800640e:	00d9      	lsls	r1, r3, #3
 8006410:	460b      	mov	r3, r1
 8006412:	4614      	mov	r4, r2
 8006414:	195b      	adds	r3, r3, r5
 8006416:	eb44 0406 	adc.w	r4, r4, r6
 800641a:	f04f 0100 	mov.w	r1, #0
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	02a2      	lsls	r2, r4, #10
 8006424:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006428:	0299      	lsls	r1, r3, #10
 800642a:	460b      	mov	r3, r1
 800642c:	4614      	mov	r4, r2
 800642e:	4618      	mov	r0, r3
 8006430:	4621      	mov	r1, r4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f04f 0400 	mov.w	r4, #0
 8006438:	461a      	mov	r2, r3
 800643a:	4623      	mov	r3, r4
 800643c:	f7fa fc3c 	bl	8000cb8 <__aeabi_uldivmod>
 8006440:	4603      	mov	r3, r0
 8006442:	460c      	mov	r4, r1
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	e049      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006448:	4b2f      	ldr	r3, [pc, #188]	; (8006508 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	099b      	lsrs	r3, r3, #6
 800644e:	f04f 0400 	mov.w	r4, #0
 8006452:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	ea03 0501 	and.w	r5, r3, r1
 800645e:	ea04 0602 	and.w	r6, r4, r2
 8006462:	4629      	mov	r1, r5
 8006464:	4632      	mov	r2, r6
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	f04f 0400 	mov.w	r4, #0
 800646e:	0154      	lsls	r4, r2, #5
 8006470:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006474:	014b      	lsls	r3, r1, #5
 8006476:	4619      	mov	r1, r3
 8006478:	4622      	mov	r2, r4
 800647a:	1b49      	subs	r1, r1, r5
 800647c:	eb62 0206 	sbc.w	r2, r2, r6
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	f04f 0400 	mov.w	r4, #0
 8006488:	0194      	lsls	r4, r2, #6
 800648a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800648e:	018b      	lsls	r3, r1, #6
 8006490:	1a5b      	subs	r3, r3, r1
 8006492:	eb64 0402 	sbc.w	r4, r4, r2
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	00e2      	lsls	r2, r4, #3
 80064a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064a4:	00d9      	lsls	r1, r3, #3
 80064a6:	460b      	mov	r3, r1
 80064a8:	4614      	mov	r4, r2
 80064aa:	195b      	adds	r3, r3, r5
 80064ac:	eb44 0406 	adc.w	r4, r4, r6
 80064b0:	f04f 0100 	mov.w	r1, #0
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	02a2      	lsls	r2, r4, #10
 80064ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80064be:	0299      	lsls	r1, r3, #10
 80064c0:	460b      	mov	r3, r1
 80064c2:	4614      	mov	r4, r2
 80064c4:	4618      	mov	r0, r3
 80064c6:	4621      	mov	r1, r4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f04f 0400 	mov.w	r4, #0
 80064ce:	461a      	mov	r2, r3
 80064d0:	4623      	mov	r3, r4
 80064d2:	f7fa fbf1 	bl	8000cb8 <__aeabi_uldivmod>
 80064d6:	4603      	mov	r3, r0
 80064d8:	460c      	mov	r4, r1
 80064da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	3301      	adds	r3, #1
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	60bb      	str	r3, [r7, #8]
      break;
 80064f6:	e002      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064f8:	4b04      	ldr	r3, [pc, #16]	; (800650c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80064fa:	60bb      	str	r3, [r7, #8]
      break;
 80064fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064fe:	68bb      	ldr	r3, [r7, #8]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006508:	40023800 	.word	0x40023800
 800650c:	00f42400 	.word	0x00f42400

08006510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006514:	4b03      	ldr	r3, [pc, #12]	; (8006524 <HAL_RCC_GetHCLKFreq+0x14>)
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000000 	.word	0x20000000

08006528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800652c:	f7ff fff0 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006530:	4601      	mov	r1, r0
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	0a9b      	lsrs	r3, r3, #10
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4a03      	ldr	r2, [pc, #12]	; (800654c <HAL_RCC_GetPCLK1Freq+0x24>)
 800653e:	5cd3      	ldrb	r3, [r2, r3]
 8006540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40023800 	.word	0x40023800
 800654c:	0801409c 	.word	0x0801409c

08006550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006554:	f7ff ffdc 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006558:	4601      	mov	r1, r0
 800655a:	4b05      	ldr	r3, [pc, #20]	; (8006570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0b5b      	lsrs	r3, r3, #13
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	4a03      	ldr	r2, [pc, #12]	; (8006574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006566:	5cd3      	ldrb	r3, [r2, r3]
 8006568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800656c:	4618      	mov	r0, r3
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40023800 	.word	0x40023800
 8006574:	0801409c 	.word	0x0801409c

08006578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80065a0:	4b66      	ldr	r3, [pc, #408]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	4963      	ldr	r1, [pc, #396]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80065c2:	4b5e      	ldr	r3, [pc, #376]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	495a      	ldr	r1, [pc, #360]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d075      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065fc:	4b50      	ldr	r3, [pc, #320]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006602:	f7fd fe65 	bl	80042d0 <HAL_GetTick>
 8006606:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006608:	e008      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800660a:	f7fd fe61 	bl	80042d0 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e1dc      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800661c:	4b47      	ldr	r3, [pc, #284]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f0      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	019a      	lsls	r2, r3, #6
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	071b      	lsls	r3, r3, #28
 8006640:	493e      	ldr	r1, [pc, #248]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01f      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006654:	4b39      	ldr	r3, [pc, #228]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665a:	0f1b      	lsrs	r3, r3, #28
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	019a      	lsls	r2, r3, #6
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	431a      	orrs	r2, r3
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	071b      	lsls	r3, r3, #28
 8006674:	4931      	ldr	r1, [pc, #196]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800667c:	4b2f      	ldr	r3, [pc, #188]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800667e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006682:	f023 021f 	bic.w	r2, r3, #31
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	3b01      	subs	r3, #1
 800668c:	492b      	ldr	r1, [pc, #172]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00d      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	019a      	lsls	r2, r3, #6
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	061b      	lsls	r3, r3, #24
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	071b      	lsls	r3, r3, #28
 80066b4:	4921      	ldr	r1, [pc, #132]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066bc:	4b20      	ldr	r3, [pc, #128]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066c2:	f7fd fe05 	bl	80042d0 <HAL_GetTick>
 80066c6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c8:	e008      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ca:	f7fd fe01 	bl	80042d0 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e17c      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066dc:	4b17      	ldr	r3, [pc, #92]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0f0      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d112      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80ce 	beq.w	80068aa <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006716:	f040 80c8 	bne.w	80068aa <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006720:	f7fd fdd6 	bl	80042d0 <HAL_GetTick>
 8006724:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006726:	e00f      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006728:	f7fd fdd2 	bl	80042d0 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d908      	bls.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e14d      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800673a:	bf00      	nop
 800673c:	40023800 	.word	0x40023800
 8006740:	42470068 	.word	0x42470068
 8006744:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006748:	4ba5      	ldr	r3, [pc, #660]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006754:	d0e8      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	d02e      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006762:	4b9f      	ldr	r3, [pc, #636]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006768:	0c1b      	lsrs	r3, r3, #16
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	3301      	adds	r3, #1
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006774:	4b9a      	ldr	r3, [pc, #616]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	0f1b      	lsrs	r3, r3, #28
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	019a      	lsls	r2, r3, #6
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	3b01      	subs	r3, #1
 800678e:	041b      	lsls	r3, r3, #16
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	431a      	orrs	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	071b      	lsls	r3, r3, #28
 800679e:	4990      	ldr	r1, [pc, #576]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067a6:	4b8e      	ldr	r3, [pc, #568]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	3b01      	subs	r3, #1
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	4989      	ldr	r1, [pc, #548]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d02c      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80067cc:	4b84      	ldr	r3, [pc, #528]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	3301      	adds	r3, #1
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067de:	4b80      	ldr	r3, [pc, #512]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	0e1b      	lsrs	r3, r3, #24
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	019a      	lsls	r2, r3, #6
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	3b01      	subs	r3, #1
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	431a      	orrs	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	061b      	lsls	r3, r3, #24
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	071b      	lsls	r3, r3, #28
 8006808:	4975      	ldr	r1, [pc, #468]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006810:	4b73      	ldr	r3, [pc, #460]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006816:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	4970      	ldr	r1, [pc, #448]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d024      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800683a:	d11f      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800683c:	4b68      	ldr	r3, [pc, #416]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	0e1b      	lsrs	r3, r3, #24
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800684a:	4b65      	ldr	r3, [pc, #404]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	0f1b      	lsrs	r3, r3, #28
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	019a      	lsls	r2, r3, #6
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	3b01      	subs	r3, #1
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	431a      	orrs	r2, r3
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	431a      	orrs	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	071b      	lsls	r3, r3, #28
 8006874:	495a      	ldr	r1, [pc, #360]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800687c:	4b59      	ldr	r3, [pc, #356]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006882:	f7fd fd25 	bl	80042d0 <HAL_GetTick>
 8006886:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006888:	e008      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800688a:	f7fd fd21 	bl	80042d0 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e09c      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800689c:	4b50      	ldr	r3, [pc, #320]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a8:	d1ef      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8083 	beq.w	80069be <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068b8:	2300      	movs	r3, #0
 80068ba:	60bb      	str	r3, [r7, #8]
 80068bc:	4b48      	ldr	r3, [pc, #288]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	4a47      	ldr	r2, [pc, #284]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c6:	6413      	str	r3, [r2, #64]	; 0x40
 80068c8:	4b45      	ldr	r3, [pc, #276]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068d4:	4b44      	ldr	r3, [pc, #272]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a43      	ldr	r2, [pc, #268]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80068da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068e0:	f7fd fcf6 	bl	80042d0 <HAL_GetTick>
 80068e4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068e8:	f7fd fcf2 	bl	80042d0 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e06d      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068fa:	4b3b      	ldr	r3, [pc, #236]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006906:	4b36      	ldr	r3, [pc, #216]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d02f      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	429a      	cmp	r2, r3
 8006922:	d028      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006924:	4b2e      	ldr	r3, [pc, #184]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800692e:	4b2f      	ldr	r3, [pc, #188]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006930:	2201      	movs	r2, #1
 8006932:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006934:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800693a:	4a29      	ldr	r2, [pc, #164]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b01      	cmp	r3, #1
 800694a:	d114      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800694c:	f7fd fcc0 	bl	80042d0 <HAL_GetTick>
 8006950:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006952:	e00a      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006954:	f7fd fcbc 	bl	80042d0 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006962:	4293      	cmp	r3, r2
 8006964:	d901      	bls.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e035      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800696a:	4b1d      	ldr	r3, [pc, #116]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0ee      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006982:	d10d      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006984:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006998:	4911      	ldr	r1, [pc, #68]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800699a:	4313      	orrs	r3, r2
 800699c:	608b      	str	r3, [r1, #8]
 800699e:	e005      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x434>
 80069a0:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	4a0e      	ldr	r2, [pc, #56]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069aa:	6093      	str	r3, [r2, #8]
 80069ac:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b8:	4909      	ldr	r1, [pc, #36]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80069d2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40023800 	.word	0x40023800
 80069e4:	42470070 	.word	0x42470070
 80069e8:	40007000 	.word	0x40007000
 80069ec:	42470e40 	.word	0x42470e40
 80069f0:	424711e0 	.word	0x424711e0

080069f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d075      	beq.n	8006af8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a0c:	4ba2      	ldr	r3, [pc, #648]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f003 030c 	and.w	r3, r3, #12
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d00c      	beq.n	8006a32 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a18:	4b9f      	ldr	r3, [pc, #636]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d112      	bne.n	8006a4a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a24:	4b9c      	ldr	r3, [pc, #624]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a30:	d10b      	bne.n	8006a4a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a32:	4b99      	ldr	r3, [pc, #612]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d05b      	beq.n	8006af6 <HAL_RCC_OscConfig+0x102>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d157      	bne.n	8006af6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e20b      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a52:	d106      	bne.n	8006a62 <HAL_RCC_OscConfig+0x6e>
 8006a54:	4b90      	ldr	r3, [pc, #576]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a8f      	ldr	r2, [pc, #572]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	e01d      	b.n	8006a9e <HAL_RCC_OscConfig+0xaa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a6a:	d10c      	bne.n	8006a86 <HAL_RCC_OscConfig+0x92>
 8006a6c:	4b8a      	ldr	r3, [pc, #552]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a89      	ldr	r2, [pc, #548]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4b87      	ldr	r3, [pc, #540]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a86      	ldr	r2, [pc, #536]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	e00b      	b.n	8006a9e <HAL_RCC_OscConfig+0xaa>
 8006a86:	4b84      	ldr	r3, [pc, #528]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a83      	ldr	r2, [pc, #524]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	4b81      	ldr	r3, [pc, #516]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a80      	ldr	r2, [pc, #512]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d013      	beq.n	8006ace <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa6:	f7fd fc13 	bl	80042d0 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aae:	f7fd fc0f 	bl	80042d0 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b64      	cmp	r3, #100	; 0x64
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e1d0      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac0:	4b75      	ldr	r3, [pc, #468]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCC_OscConfig+0xba>
 8006acc:	e014      	b.n	8006af8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ace:	f7fd fbff 	bl	80042d0 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ad6:	f7fd fbfb 	bl	80042d0 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b64      	cmp	r3, #100	; 0x64
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e1bc      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ae8:	4b6b      	ldr	r3, [pc, #428]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1f0      	bne.n	8006ad6 <HAL_RCC_OscConfig+0xe2>
 8006af4:	e000      	b.n	8006af8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d063      	beq.n	8006bcc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b04:	4b64      	ldr	r3, [pc, #400]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b10:	4b61      	ldr	r3, [pc, #388]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d11c      	bne.n	8006b56 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1c:	4b5e      	ldr	r3, [pc, #376]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d116      	bne.n	8006b56 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b28:	4b5b      	ldr	r3, [pc, #364]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_OscConfig+0x14c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d001      	beq.n	8006b40 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e190      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b40:	4b55      	ldr	r3, [pc, #340]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	4952      	ldr	r1, [pc, #328]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b54:	e03a      	b.n	8006bcc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d020      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b5e:	4b4f      	ldr	r3, [pc, #316]	; (8006c9c <HAL_RCC_OscConfig+0x2a8>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7fd fbb4 	bl	80042d0 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b6c:	f7fd fbb0 	bl	80042d0 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e171      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7e:	4b46      	ldr	r3, [pc, #280]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8a:	4b43      	ldr	r3, [pc, #268]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	493f      	ldr	r1, [pc, #252]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	600b      	str	r3, [r1, #0]
 8006b9e:	e015      	b.n	8006bcc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ba0:	4b3e      	ldr	r3, [pc, #248]	; (8006c9c <HAL_RCC_OscConfig+0x2a8>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba6:	f7fd fb93 	bl	80042d0 <HAL_GetTick>
 8006baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bae:	f7fd fb8f 	bl	80042d0 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e150      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc0:	4b35      	ldr	r3, [pc, #212]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f0      	bne.n	8006bae <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d030      	beq.n	8006c3a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d016      	beq.n	8006c0e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be0:	4b2f      	ldr	r3, [pc, #188]	; (8006ca0 <HAL_RCC_OscConfig+0x2ac>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be6:	f7fd fb73 	bl	80042d0 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bee:	f7fd fb6f 	bl	80042d0 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e130      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c00:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <HAL_RCC_OscConfig+0x1fa>
 8006c0c:	e015      	b.n	8006c3a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c14:	f7fd fb5c 	bl	80042d0 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c1c:	f7fd fb58 	bl	80042d0 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e119      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c2e:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 809f 	beq.w	8006d86 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c4c:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10f      	bne.n	8006c78 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	4a0d      	ldr	r2, [pc, #52]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c66:	6413      	str	r3, [r2, #64]	; 0x40
 8006c68:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <HAL_RCC_OscConfig+0x2a4>)
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c74:	2301      	movs	r3, #1
 8006c76:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <HAL_RCC_OscConfig+0x2b0>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d120      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <HAL_RCC_OscConfig+0x2b0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a06      	ldr	r2, [pc, #24]	; (8006ca4 <HAL_RCC_OscConfig+0x2b0>)
 8006c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c90:	f7fd fb1e 	bl	80042d0 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c96:	e010      	b.n	8006cba <HAL_RCC_OscConfig+0x2c6>
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	42470000 	.word	0x42470000
 8006ca0:	42470e80 	.word	0x42470e80
 8006ca4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca8:	f7fd fb12 	bl	80042d0 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e0d3      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cba:	4b6c      	ldr	r3, [pc, #432]	; (8006e6c <HAL_RCC_OscConfig+0x478>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d106      	bne.n	8006cdc <HAL_RCC_OscConfig+0x2e8>
 8006cce:	4b68      	ldr	r3, [pc, #416]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd2:	4a67      	ldr	r2, [pc, #412]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cda:	e01c      	b.n	8006d16 <HAL_RCC_OscConfig+0x322>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	d10c      	bne.n	8006cfe <HAL_RCC_OscConfig+0x30a>
 8006ce4:	4b62      	ldr	r3, [pc, #392]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce8:	4a61      	ldr	r2, [pc, #388]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006cea:	f043 0304 	orr.w	r3, r3, #4
 8006cee:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf0:	4b5f      	ldr	r3, [pc, #380]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf4:	4a5e      	ldr	r2, [pc, #376]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8006cfc:	e00b      	b.n	8006d16 <HAL_RCC_OscConfig+0x322>
 8006cfe:	4b5c      	ldr	r3, [pc, #368]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d02:	4a5b      	ldr	r2, [pc, #364]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d04:	f023 0301 	bic.w	r3, r3, #1
 8006d08:	6713      	str	r3, [r2, #112]	; 0x70
 8006d0a:	4b59      	ldr	r3, [pc, #356]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0e:	4a58      	ldr	r2, [pc, #352]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d015      	beq.n	8006d4a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1e:	f7fd fad7 	bl	80042d0 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d24:	e00a      	b.n	8006d3c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d26:	f7fd fad3 	bl	80042d0 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e092      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d3c:	4b4c      	ldr	r3, [pc, #304]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0ee      	beq.n	8006d26 <HAL_RCC_OscConfig+0x332>
 8006d48:	e014      	b.n	8006d74 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4a:	f7fd fac1 	bl	80042d0 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d50:	e00a      	b.n	8006d68 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d52:	f7fd fabd 	bl	80042d0 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e07c      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d68:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ee      	bne.n	8006d52 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d105      	bne.n	8006d86 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d7a:	4b3d      	ldr	r3, [pc, #244]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d068      	beq.n	8006e60 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d8e:	4b38      	ldr	r3, [pc, #224]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 030c 	and.w	r3, r3, #12
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d060      	beq.n	8006e5c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d145      	bne.n	8006e2e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da2:	4b34      	ldr	r3, [pc, #208]	; (8006e74 <HAL_RCC_OscConfig+0x480>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7fd fa92 	bl	80042d0 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fd fa8e 	bl	80042d0 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e04f      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc2:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	019b      	lsls	r3, r3, #6
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	3b01      	subs	r3, #1
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	061b      	lsls	r3, r3, #24
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	071b      	lsls	r3, r3, #28
 8006dfa:	491d      	ldr	r1, [pc, #116]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e00:	4b1c      	ldr	r3, [pc, #112]	; (8006e74 <HAL_RCC_OscConfig+0x480>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e06:	f7fd fa63 	bl	80042d0 <HAL_GetTick>
 8006e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0c:	e008      	b.n	8006e20 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e0e:	f7fd fa5f 	bl	80042d0 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e020      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e20:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0f0      	beq.n	8006e0e <HAL_RCC_OscConfig+0x41a>
 8006e2c:	e018      	b.n	8006e60 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <HAL_RCC_OscConfig+0x480>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fd fa4c 	bl	80042d0 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e3c:	f7fd fa48 	bl	80042d0 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e009      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4e:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <HAL_RCC_OscConfig+0x47c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x448>
 8006e5a:	e001      	b.n	8006e60 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40007000 	.word	0x40007000
 8006e70:	40023800 	.word	0x40023800
 8006e74:	42470060 	.word	0x42470060

08006e78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e022      	b.n	8006ed0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d105      	bne.n	8006ea2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fc fbf3 	bl	8003688 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2203      	movs	r2, #3
 8006ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f814 	bl	8006ed8 <HAL_SD_InitCard>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e00a      	b.n	8006ed0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ed8:	b5b0      	push	{r4, r5, r7, lr}
 8006eda:	b08e      	sub	sp, #56	; 0x38
 8006edc:	af04      	add	r7, sp, #16
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006ef4:	2376      	movs	r3, #118	; 0x76
 8006ef6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681d      	ldr	r5, [r3, #0]
 8006efc:	466c      	mov	r4, sp
 8006efe:	f107 0314 	add.w	r3, r7, #20
 8006f02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f0a:	f107 0308 	add.w	r3, r7, #8
 8006f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f10:	4628      	mov	r0, r5
 8006f12:	f003 fa87 	bl	800a424 <SDIO_Init>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e031      	b.n	8006f8c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006f28:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <HAL_SD_InitCard+0xbc>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f003 fabf 	bl	800a4b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006f38:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <HAL_SD_InitCard+0xbc>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 ffc6 	bl	8007ed0 <SD_PowerON>
 8006f44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e013      	b.n	8006f8c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fee5 	bl	8007d34 <SD_InitCard>
 8006f6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3728      	adds	r7, #40	; 0x28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bdb0      	pop	{r4, r5, r7, pc}
 8006f94:	422580a0 	.word	0x422580a0

08006f98 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08c      	sub	sp, #48	; 0x30
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d107      	bne.n	8006fc0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0c7      	b.n	8007150 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	f040 80c0 	bne.w	800714e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	441a      	add	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d907      	bls.n	8006ff2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e0ae      	b.n	8007150 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2200      	movs	r2, #0
 8007000:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007010:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	4a50      	ldr	r2, [pc, #320]	; (8007158 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	4a4f      	ldr	r2, [pc, #316]	; (800715c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8007020:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	2200      	movs	r2, #0
 8007028:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3380      	adds	r3, #128	; 0x80
 8007034:	4619      	mov	r1, r3
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	025b      	lsls	r3, r3, #9
 800703c:	089b      	lsrs	r3, r3, #2
 800703e:	f7fd ff39 	bl	8004eb4 <HAL_DMA_Start_IT>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d017      	beq.n	8007078 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007056:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a40      	ldr	r2, [pc, #256]	; (8007160 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e06b      	b.n	8007150 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007078:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800707a:	2201      	movs	r2, #1
 800707c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007082:	2b01      	cmp	r3, #1
 8007084:	d002      	beq.n	800708c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	025b      	lsls	r3, r3, #9
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007094:	4618      	mov	r0, r3
 8007096:	f003 faa1 	bl	800a5dc <SDMMC_CmdBlockLength>
 800709a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00f      	beq.n	80070c2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2e      	ldr	r2, [pc, #184]	; (8007160 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b0:	431a      	orrs	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e046      	b.n	8007150 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070c2:	f04f 33ff 	mov.w	r3, #4294967295
 80070c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	025b      	lsls	r3, r3, #9
 80070cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80070ce:	2390      	movs	r3, #144	; 0x90
 80070d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80070d2:	2302      	movs	r3, #2
 80070d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80070da:	2301      	movs	r3, #1
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f107 0210 	add.w	r2, r7, #16
 80070e6:	4611      	mov	r1, r2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f003 fa4b 	bl	800a584 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d90a      	bls.n	800710a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2282      	movs	r2, #130	; 0x82
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007100:	4618      	mov	r0, r3
 8007102:	f003 faaf 	bl	800a664 <SDMMC_CmdReadMultiBlock>
 8007106:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007108:	e009      	b.n	800711e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2281      	movs	r2, #129	; 0x81
 800710e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007116:	4618      	mov	r0, r3
 8007118:	f003 fa82 	bl	800a620 <SDMMC_CmdReadSingleBlock>
 800711c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d012      	beq.n	800714a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a0d      	ldr	r2, [pc, #52]	; (8007160 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	431a      	orrs	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e002      	b.n	8007150 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	e000      	b.n	8007150 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800714e:	2302      	movs	r3, #2
  }
}
 8007150:	4618      	mov	r0, r3
 8007152:	3730      	adds	r7, #48	; 0x30
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	08007b43 	.word	0x08007b43
 800715c:	08007bb5 	.word	0x08007bb5
 8007160:	004005ff 	.word	0x004005ff
 8007164:	4225858c 	.word	0x4225858c

08007168 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08c      	sub	sp, #48	; 0x30
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d107      	bne.n	8007190 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e0ca      	b.n	8007326 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	f040 80c3 	bne.w	8007324 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80071a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	441a      	add	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d907      	bls.n	80071c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e0b1      	b.n	8007326 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2203      	movs	r2, #3
 80071c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2200      	movs	r2, #0
 80071d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 021a 	orr.w	r2, r2, #26
 80071e0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	4a52      	ldr	r2, [pc, #328]	; (8007330 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80071e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	4a51      	ldr	r2, [pc, #324]	; (8007334 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 80071f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	2200      	movs	r2, #0
 80071f8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d002      	beq.n	8007208 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	025b      	lsls	r3, r3, #9
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007210:	4618      	mov	r0, r3
 8007212:	f003 f9e3 	bl	800a5dc <SDMMC_CmdBlockLength>
 8007216:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00f      	beq.n	800723e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a45      	ldr	r2, [pc, #276]	; (8007338 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	431a      	orrs	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e073      	b.n	8007326 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d90a      	bls.n	800725a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	22a0      	movs	r2, #160	; 0xa0
 8007248:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007250:	4618      	mov	r0, r3
 8007252:	f003 fa4b 	bl	800a6ec <SDMMC_CmdWriteMultiBlock>
 8007256:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007258:	e009      	b.n	800726e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2290      	movs	r2, #144	; 0x90
 800725e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007266:	4618      	mov	r0, r3
 8007268:	f003 fa1e 	bl	800a6a8 <SDMMC_CmdWriteSingleBlock>
 800726c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d012      	beq.n	800729a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a2f      	ldr	r2, [pc, #188]	; (8007338 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	431a      	orrs	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e045      	b.n	8007326 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800729a:	4b28      	ldr	r3, [pc, #160]	; (800733c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3380      	adds	r3, #128	; 0x80
 80072ac:	461a      	mov	r2, r3
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	025b      	lsls	r3, r3, #9
 80072b2:	089b      	lsrs	r3, r3, #2
 80072b4:	f7fd fdfe 	bl	8004eb4 <HAL_DMA_Start_IT>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01a      	beq.n	80072f4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 021a 	bic.w	r2, r2, #26
 80072cc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a19      	ldr	r2, [pc, #100]	; (8007338 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e018      	b.n	8007326 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295
 80072f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	025b      	lsls	r3, r3, #9
 80072fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007300:	2390      	movs	r3, #144	; 0x90
 8007302:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007304:	2300      	movs	r3, #0
 8007306:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007308:	2300      	movs	r3, #0
 800730a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800730c:	2301      	movs	r3, #1
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f107 0210 	add.w	r2, r7, #16
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f003 f932 	bl	800a584 <SDIO_ConfigData>

      return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3730      	adds	r7, #48	; 0x30
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	08007b19 	.word	0x08007b19
 8007334:	08007bb5 	.word	0x08007bb5
 8007338:	004005ff 	.word	0x004005ff
 800733c:	4225858c 	.word	0x4225858c

08007340 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <HAL_SD_IRQHandler+0x2e>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 ffc8 	bl	80082fc <SD_Read_IT>
 800736c:	e155      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 808f 	beq.w	800749c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007386:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007396:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800739a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0201 	bic.w	r2, r2, #1
 80073aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d039      	beq.n	800742a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <HAL_SD_IRQHandler+0x8a>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d011      	beq.n	80073ee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f003 f9ae 	bl	800a730 <SDMMC_CmdStopTransfer>
 80073d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f91f 	bl	800762c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d104      	bne.n	800741a <HAL_SD_IRQHandler+0xda>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f003 fe0c 	bl	800b038 <HAL_SD_RxCpltCallback>
 8007420:	e0fb      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f003 fdfe 	bl	800b024 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007428:	e0f7      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80f2 	beq.w	800761a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b00      	cmp	r3, #0
 800743e:	d011      	beq.n	8007464 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f003 f973 	bl	800a730 <SDMMC_CmdStopTransfer>
 800744a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d008      	beq.n	8007464 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f8e4 	bl	800762c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 80d5 	bne.w	800761a <HAL_SD_IRQHandler+0x2da>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	f040 80cf 	bne.w	800761a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0208 	bic.w	r2, r2, #8
 800748a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f003 fdc5 	bl	800b024 <HAL_SD_TxCpltCallback>
}
 800749a:	e0be      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <HAL_SD_IRQHandler+0x17c>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 ff72 	bl	800839e <SD_Write_IT>
 80074ba:	e0ae      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 80a7 	beq.w	800761a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	f043 0202 	orr.w	r2, r3, #2
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	f043 0208 	orr.w	r2, r3, #8
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	f043 0210 	orr.w	r2, r3, #16
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f240 523a 	movw	r2, #1338	; 0x53a
 800753c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800754c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f003 f8ec 	bl	800a730 <SDMMC_CmdStopTransfer>
 8007558:	4602      	mov	r2, r0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f855 	bl	800762c <HAL_SD_ErrorCallback>
}
 8007582:	e04a      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d045      	beq.n	800761a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <HAL_SD_IRQHandler+0x262>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d011      	beq.n	80075c6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	4a1f      	ldr	r2, [pc, #124]	; (8007624 <HAL_SD_IRQHandler+0x2e4>)
 80075a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fd fcd8 	bl	8004f64 <HAL_DMA_Abort_IT>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d02f      	beq.n	800761a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fb4a 	bl	8007c58 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80075c4:	e029      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <HAL_SD_IRQHandler+0x29a>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d011      	beq.n	80075fe <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	4a12      	ldr	r2, [pc, #72]	; (8007628 <HAL_SD_IRQHandler+0x2e8>)
 80075e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fd fcbc 	bl	8004f64 <HAL_DMA_Abort_IT>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d013      	beq.n	800761a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fb65 	bl	8007cc6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80075fc:	e00d      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f003 fcfc 	bl	800b010 <HAL_SD_AbortCallback>
}
 8007618:	e7ff      	b.n	800761a <HAL_SD_IRQHandler+0x2da>
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	08007c59 	.word	0x08007c59
 8007628:	08007cc7 	.word	0x08007cc7

0800762c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800764e:	0f9b      	lsrs	r3, r3, #30
 8007650:	b2da      	uxtb	r2, r3
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800765a:	0e9b      	lsrs	r3, r3, #26
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	b2da      	uxtb	r2, r3
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800766c:	0e1b      	lsrs	r3, r3, #24
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	b2da      	uxtb	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	b2da      	uxtb	r2, r3
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	b2da      	uxtb	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007696:	b2da      	uxtb	r2, r3
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a0:	0d1b      	lsrs	r3, r3, #20
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076be:	0bdb      	lsrs	r3, r3, #15
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d0:	0b9b      	lsrs	r3, r3, #14
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e2:	0b5b      	lsrs	r3, r3, #13
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f4:	0b1b      	lsrs	r3, r3, #12
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2200      	movs	r2, #0
 8007706:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770c:	2b00      	cmp	r3, #0
 800770e:	d163      	bne.n	80077d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007714:	009a      	lsls	r2, r3, #2
 8007716:	f640 73fc 	movw	r3, #4092	; 0xffc
 800771a:	4013      	ands	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007720:	0f92      	lsrs	r2, r2, #30
 8007722:	431a      	orrs	r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800772c:	0edb      	lsrs	r3, r3, #27
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	b2da      	uxtb	r2, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800773e:	0e1b      	lsrs	r3, r3, #24
 8007740:	b2db      	uxtb	r3, r3
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	b2da      	uxtb	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007750:	0d5b      	lsrs	r3, r3, #21
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	b2da      	uxtb	r2, r3
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007762:	0c9b      	lsrs	r3, r3, #18
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	b2da      	uxtb	r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007774:	0bdb      	lsrs	r3, r3, #15
 8007776:	b2db      	uxtb	r3, r3
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	b2da      	uxtb	r2, r3
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	7e1b      	ldrb	r3, [r3, #24]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	3302      	adds	r3, #2
 8007798:	2201      	movs	r2, #1
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80077a2:	fb02 f203 	mul.w	r2, r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	7a1b      	ldrb	r3, [r3, #8]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	2201      	movs	r2, #1
 80077b6:	409a      	lsls	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80077c4:	0a52      	lsrs	r2, r2, #9
 80077c6:	fb02 f203 	mul.w	r2, r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d4:	661a      	str	r2, [r3, #96]	; 0x60
 80077d6:	e031      	b.n	800783c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d11d      	bne.n	800781c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e4:	041b      	lsls	r3, r3, #16
 80077e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	431a      	orrs	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	3301      	adds	r3, #1
 80077fc:	029a      	lsls	r2, r3, #10
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007810:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	661a      	str	r2, [r3, #96]	; 0x60
 800781a:	e00f      	b.n	800783c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a58      	ldr	r2, [pc, #352]	; (8007984 <HAL_SD_GetCardCSD+0x344>)
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e09d      	b.n	8007978 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007840:	0b9b      	lsrs	r3, r3, #14
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	b2da      	uxtb	r2, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007852:	09db      	lsrs	r3, r3, #7
 8007854:	b2db      	uxtb	r3, r3
 8007856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785a:	b2da      	uxtb	r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786a:	b2da      	uxtb	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	0fdb      	lsrs	r3, r3, #31
 8007876:	b2da      	uxtb	r2, r3
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	0f5b      	lsrs	r3, r3, #29
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	b2da      	uxtb	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007892:	0e9b      	lsrs	r3, r3, #26
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	b2da      	uxtb	r2, r3
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a4:	0d9b      	lsrs	r3, r3, #22
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b6:	0d5b      	lsrs	r3, r3, #21
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	0bdb      	lsrs	r3, r3, #15
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	0b9b      	lsrs	r3, r3, #14
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790e:	0b5b      	lsrs	r3, r3, #13
 8007910:	b2db      	uxtb	r3, r3
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	b2da      	uxtb	r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	0b1b      	lsrs	r3, r3, #12
 8007924:	b2db      	uxtb	r3, r3
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	b2da      	uxtb	r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007936:	0a9b      	lsrs	r3, r3, #10
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	b2da      	uxtb	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	b2db      	uxtb	r3, r3
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	b2da      	uxtb	r2, r3
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795e:	085b      	lsrs	r3, r3, #1
 8007960:	b2db      	uxtb	r3, r3
 8007962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007966:	b2da      	uxtb	r2, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	004005ff 	.word	0x004005ff

08007988 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079e0:	b5b0      	push	{r4, r5, r7, lr}
 80079e2:	b08e      	sub	sp, #56	; 0x38
 80079e4:	af04      	add	r7, sp, #16
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2203      	movs	r2, #3
 80079ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d02e      	beq.n	8007a58 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a00:	d106      	bne.n	8007a10 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a0e:	e029      	b.n	8007a64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a16:	d10a      	bne.n	8007a2e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fb0f 	bl	800803c <SD_WideBus_Enable>
 8007a1e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8007a2c:	e01a      	b.n	8007a64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fb4c 	bl	80080d2 <SD_WideBus_Disable>
 8007a3a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	639a      	str	r2, [r3, #56]	; 0x38
 8007a48:	e00c      	b.n	8007a64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	639a      	str	r2, [r3, #56]	; 0x38
 8007a56:	e005      	b.n	8007a64 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e024      	b.n	8007aca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681d      	ldr	r5, [r3, #0]
 8007aa6:	466c      	mov	r4, sp
 8007aa8:	f107 0318 	add.w	r3, r7, #24
 8007aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ab4:	f107 030c 	add.w	r3, r7, #12
 8007ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007aba:	4628      	mov	r0, r5
 8007abc:	f002 fcb2 	bl	800a424 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3728      	adds	r7, #40	; 0x28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	004005ff 	.word	0x004005ff

08007ad8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ae4:	f107 030c 	add.w	r3, r7, #12
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa7e 	bl	8007fec <SD_SendStatus>
 8007af0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	0a5b      	lsrs	r3, r3, #9
 8007b08:	f003 030f 	and.w	r3, r3, #15
 8007b0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b0e:	693b      	ldr	r3, [r7, #16]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b54:	2b82      	cmp	r3, #130	; 0x82
 8007b56:	d111      	bne.n	8007b7c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f002 fde7 	bl	800a730 <SDMMC_CmdStopTransfer>
 8007b62:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fd58 	bl	800762c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 0208 	bic.w	r2, r2, #8
 8007b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b94:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f003 fa47 	bl	800b038 <HAL_SD_RxCpltCallback>
#endif
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fd fb7a 	bl	80052bc <HAL_DMA_GetError>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d03e      	beq.n	8007c4c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bdc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d002      	beq.n	8007bea <SD_DMAError+0x36>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d12d      	bne.n	8007c46 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <SD_DMAError+0xa0>)
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007c00:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007c0e:	6978      	ldr	r0, [r7, #20]
 8007c10:	f7ff ff62 	bl	8007ad8 <HAL_SD_GetCardState>
 8007c14:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b06      	cmp	r3, #6
 8007c1a:	d002      	beq.n	8007c22 <SD_DMAError+0x6e>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d10a      	bne.n	8007c38 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f002 fd82 	bl	800a730 <SDMMC_CmdStopTransfer>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	431a      	orrs	r2, r3
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2200      	movs	r2, #0
 8007c44:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007c46:	6978      	ldr	r0, [r7, #20]
 8007c48:	f7ff fcf0 	bl	800762c <HAL_SD_ErrorCallback>
#endif
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	004005ff 	.word	0x004005ff

08007c58 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff ff31 	bl	8007ad8 <HAL_SD_GetCardState>
 8007c76:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b06      	cmp	r3, #6
 8007c8a:	d002      	beq.n	8007c92 <SD_DMATxAbort+0x3a>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d10a      	bne.n	8007ca8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f002 fd4a 	bl	800a730 <SDMMC_CmdStopTransfer>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d103      	bne.n	8007cb8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f003 f9ad 	bl	800b010 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007cb6:	e002      	b.n	8007cbe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7ff fcb7 	bl	800762c <HAL_SD_ErrorCallback>
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff fefa 	bl	8007ad8 <HAL_SD_GetCardState>
 8007ce4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b06      	cmp	r3, #6
 8007cf8:	d002      	beq.n	8007d00 <SD_DMARxAbort+0x3a>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b05      	cmp	r3, #5
 8007cfe:	d10a      	bne.n	8007d16 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f002 fd13 	bl	800a730 <SDMMC_CmdStopTransfer>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	431a      	orrs	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d103      	bne.n	8007d26 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f003 f976 	bl	800b010 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d24:	e002      	b.n	8007d2c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f7ff fc80 	bl	800762c <HAL_SD_ErrorCallback>
}
 8007d2c:	bf00      	nop
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d34:	b5b0      	push	{r4, r5, r7, lr}
 8007d36:	b094      	sub	sp, #80	; 0x50
 8007d38:	af04      	add	r7, sp, #16
 8007d3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f002 fbc5 	bl	800a4d4 <SDIO_GetPowerState>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d54:	e0b7      	b.n	8007ec6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d02f      	beq.n	8007dbe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f002 fdee 	bl	800a944 <SDMMC_CmdSendCID>
 8007d68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <SD_InitCard+0x40>
    {
      return errorstate;
 8007d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d72:	e0a8      	b.n	8007ec6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f002 fbef 	bl	800a55e <SDIO_GetResponse>
 8007d80:	4602      	mov	r2, r0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2104      	movs	r1, #4
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f002 fbe6 	bl	800a55e <SDIO_GetResponse>
 8007d92:	4602      	mov	r2, r0
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2108      	movs	r1, #8
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f002 fbdd 	bl	800a55e <SDIO_GetResponse>
 8007da4:	4602      	mov	r2, r0
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	210c      	movs	r1, #12
 8007db0:	4618      	mov	r0, r3
 8007db2:	f002 fbd4 	bl	800a55e <SDIO_GetResponse>
 8007db6:	4602      	mov	r2, r0
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d00d      	beq.n	8007de2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f107 020e 	add.w	r2, r7, #14
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f002 fdf4 	bl	800a9be <SDMMC_CmdSetRelAdd>
 8007dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <SD_InitCard+0xae>
    {
      return errorstate;
 8007dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de0:	e071      	b.n	8007ec6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d036      	beq.n	8007e58 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007dea:	89fb      	ldrh	r3, [r7, #14]
 8007dec:	461a      	mov	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfa:	041b      	lsls	r3, r3, #16
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f002 fdbe 	bl	800a980 <SDMMC_CmdSendCSD>
 8007e04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0e:	e05a      	b.n	8007ec6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f002 fba1 	bl	800a55e <SDIO_GetResponse>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2104      	movs	r1, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f002 fb98 	bl	800a55e <SDIO_GetResponse>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2108      	movs	r1, #8
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f002 fb8f 	bl	800a55e <SDIO_GetResponse>
 8007e40:	4602      	mov	r2, r0
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	210c      	movs	r1, #12
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f002 fb86 	bl	800a55e <SDIO_GetResponse>
 8007e52:	4602      	mov	r2, r0
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2104      	movs	r1, #4
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f002 fb7d 	bl	800a55e <SDIO_GetResponse>
 8007e64:	4603      	mov	r3, r0
 8007e66:	0d1a      	lsrs	r2, r3, #20
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007e6c:	f107 0310 	add.w	r3, r7, #16
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff fbe4 	bl	8007640 <HAL_SD_GetCardCSD>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e82:	e020      	b.n	8007ec6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6819      	ldr	r1, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8c:	041b      	lsls	r3, r3, #16
 8007e8e:	f04f 0400 	mov.w	r4, #0
 8007e92:	461a      	mov	r2, r3
 8007e94:	4623      	mov	r3, r4
 8007e96:	4608      	mov	r0, r1
 8007e98:	f002 fc6c 	bl	800a774 <SDMMC_CmdSelDesel>
 8007e9c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <SD_InitCard+0x174>
  {
    return errorstate;
 8007ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea6:	e00e      	b.n	8007ec6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681d      	ldr	r5, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	466c      	mov	r4, sp
 8007eb0:	f103 0210 	add.w	r2, r3, #16
 8007eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007eba:	3304      	adds	r3, #4
 8007ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f002 fab0 	bl	800a424 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3740      	adds	r7, #64	; 0x40
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007ed0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f002 fc66 	bl	800a7ba <SDMMC_CmdGoIdleState>
 8007eee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <SD_PowerON+0x2a>
  {
    return errorstate;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	e072      	b.n	8007fe0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f002 fc79 	bl	800a7f6 <SDMMC_CmdOperCond>
 8007f04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00d      	beq.n	8007f28 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f002 fc4f 	bl	800a7ba <SDMMC_CmdGoIdleState>
 8007f1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	e05b      	b.n	8007fe0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d137      	bne.n	8007fa6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 fc79 	bl	800a834 <SDMMC_CmdAppCommand>
 8007f42:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d02d      	beq.n	8007fa6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f4e:	e047      	b.n	8007fe0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2100      	movs	r1, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f002 fc6c 	bl	800a834 <SDMMC_CmdAppCommand>
 8007f5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <SD_PowerON+0x98>
    {
      return errorstate;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	e03b      	b.n	8007fe0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	491e      	ldr	r1, [pc, #120]	; (8007fe8 <SD_PowerON+0x118>)
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f002 fc82 	bl	800a878 <SDMMC_CmdAppOperCommand>
 8007f74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f80:	e02e      	b.n	8007fe0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f002 fae8 	bl	800a55e <SDIO_GetResponse>
 8007f8e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	0fdb      	lsrs	r3, r3, #31
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <SD_PowerON+0xcc>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e000      	b.n	8007f9e <SD_PowerON+0xce>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	613b      	str	r3, [r7, #16]

    count++;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d802      	bhi.n	8007fb6 <SD_PowerON+0xe6>
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0cc      	beq.n	8007f50 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d902      	bls.n	8007fc6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fc4:	e00c      	b.n	8007fe0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44
 8007fd6:	e002      	b.n	8007fde <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	c1100000 	.word	0xc1100000

08007fec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007ffc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008000:	e018      	b.n	8008034 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800a:	041b      	lsls	r3, r3, #16
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f002 fcf6 	bl	800aa00 <SDMMC_CmdSendStatus>
 8008014:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <SD_SendStatus+0x34>
  {
    return errorstate;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	e009      	b.n	8008034 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2100      	movs	r1, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f002 fa99 	bl	800a55e <SDIO_GetResponse>
 800802c:	4602      	mov	r2, r0
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	2300      	movs	r3, #0
 800804a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2100      	movs	r1, #0
 8008052:	4618      	mov	r0, r3
 8008054:	f002 fa83 	bl	800a55e <SDIO_GetResponse>
 8008058:	4603      	mov	r3, r0
 800805a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800805e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008062:	d102      	bne.n	800806a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008068:	e02f      	b.n	80080ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800806a:	f107 030c 	add.w	r3, r7, #12
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f879 	bl	8008168 <SD_FindSCR>
 8008076:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	e023      	b.n	80080ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01c      	beq.n	80080c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f002 fbcb 	bl	800a834 <SDMMC_CmdAppCommand>
 800809e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	e00f      	b.n	80080ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2102      	movs	r1, #2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f002 fc04 	bl	800a8be <SDMMC_CmdBusWidth>
 80080b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	e003      	b.n	80080ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	e001      	b.n	80080ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b086      	sub	sp, #24
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f002 fa38 	bl	800a55e <SDIO_GetResponse>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f8:	d102      	bne.n	8008100 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080fe:	e02f      	b.n	8008160 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008100:	f107 030c 	add.w	r3, r7, #12
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f82e 	bl	8008168 <SD_FindSCR>
 800810c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	e023      	b.n	8008160 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01c      	beq.n	800815c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f002 fb80 	bl	800a834 <SDMMC_CmdAppCommand>
 8008134:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	e00f      	b.n	8008160 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f002 fbb9 	bl	800a8be <SDMMC_CmdBusWidth>
 800814c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	e003      	b.n	8008160 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008158:	2300      	movs	r3, #0
 800815a:	e001      	b.n	8008160 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800815c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b08f      	sub	sp, #60	; 0x3c
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008172:	f7fc f8ad 	bl	80042d0 <HAL_GetTick>
 8008176:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800817c:	2300      	movs	r3, #0
 800817e:	60bb      	str	r3, [r7, #8]
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2108      	movs	r1, #8
 800818e:	4618      	mov	r0, r3
 8008190:	f002 fa24 	bl	800a5dc <SDMMC_CmdBlockLength>
 8008194:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	e0a9      	b.n	80082f4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f002 fb41 	bl	800a834 <SDMMC_CmdAppCommand>
 80081b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <SD_FindSCR+0x56>
  {
    return errorstate;
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	e09a      	b.n	80082f4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081be:	f04f 33ff 	mov.w	r3, #4294967295
 80081c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80081c4:	2308      	movs	r3, #8
 80081c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80081c8:	2330      	movs	r3, #48	; 0x30
 80081ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80081cc:	2302      	movs	r3, #2
 80081ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80081d4:	2301      	movs	r3, #1
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f107 0210 	add.w	r2, r7, #16
 80081e0:	4611      	mov	r1, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f002 f9ce 	bl	800a584 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f002 fb88 	bl	800a902 <SDMMC_CmdSendSCR>
 80081f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d022      	beq.n	8008240 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	e07a      	b.n	80082f4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00e      	beq.n	800822a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	f107 0208 	add.w	r2, r7, #8
 8008218:	18d4      	adds	r4, r2, r3
 800821a:	4608      	mov	r0, r1
 800821c:	f002 f92d 	bl	800a47a <SDIO_ReadFIFO>
 8008220:	4603      	mov	r3, r0
 8008222:	6023      	str	r3, [r4, #0]
      index++;
 8008224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008226:	3301      	adds	r3, #1
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800822a:	f7fc f851 	bl	80042d0 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d102      	bne.n	8008240 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800823a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800823e:	e059      	b.n	80082f4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008246:	f240 432a 	movw	r3, #1066	; 0x42a
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0d6      	beq.n	80081fe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2208      	movs	r2, #8
 8008264:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008266:	2308      	movs	r3, #8
 8008268:	e044      	b.n	80082f4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d005      	beq.n	8008284 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2202      	movs	r2, #2
 800827e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008280:	2302      	movs	r3, #2
 8008282:	e037      	b.n	80082f4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2220      	movs	r2, #32
 8008298:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800829a:	2320      	movs	r3, #32
 800829c:	e02a      	b.n	80082f4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	061a      	lsls	r2, r3, #24
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	0a1b      	lsrs	r3, r3, #8
 80082ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	0e1b      	lsrs	r3, r3, #24
 80082c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	601a      	str	r2, [r3, #0]
    scr++;
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	3304      	adds	r3, #4
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	061a      	lsls	r2, r3, #24
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	0a1b      	lsrs	r3, r3, #8
 80082e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	0e1b      	lsrs	r3, r3, #24
 80082ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	373c      	adds	r7, #60	; 0x3c
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd90      	pop	{r4, r7, pc}

080082fc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d03f      	beq.n	8008396 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	e033      	b.n	8008384 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f002 f8aa 	bl	800a47a <SDIO_ReadFIFO>
 8008326:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	b2da      	uxtb	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	3b01      	subs	r3, #1
 800833a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	b2da      	uxtb	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3301      	adds	r3, #1
 800834a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	3b01      	subs	r3, #1
 8008350:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	0c1b      	lsrs	r3, r3, #16
 8008356:	b2da      	uxtb	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3b01      	subs	r3, #1
 8008366:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	0e1b      	lsrs	r3, r3, #24
 800836c:	b2da      	uxtb	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3301      	adds	r3, #1
 8008376:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	3b01      	subs	r3, #1
 800837c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	3301      	adds	r3, #1
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2b07      	cmp	r3, #7
 8008388:	d9c8      	bls.n	800831c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008396:	bf00      	nop
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b086      	sub	sp, #24
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d043      	beq.n	8008440 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80083b8:	2300      	movs	r3, #0
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	e037      	b.n	800842e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	021a      	lsls	r2, r3, #8
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	041a      	lsls	r2, r3, #16
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3301      	adds	r3, #1
 80083f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	061a      	lsls	r2, r3, #24
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	4313      	orrs	r3, r2
 800840a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	3b01      	subs	r3, #1
 8008416:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f107 0208 	add.w	r2, r7, #8
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f002 f836 	bl	800a494 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	3301      	adds	r3, #1
 800842c:	617b      	str	r3, [r7, #20]
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b07      	cmp	r3, #7
 8008432:	d9c4      	bls.n	80083be <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008440:	bf00      	nop
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e056      	b.n	8008508 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d106      	bne.n	800847a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7fb f9f9 	bl	800386c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2202      	movs	r2, #2
 800847e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008490:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	ea42 0103 	orr.w	r1, r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	0c1b      	lsrs	r3, r3, #16
 80084d8:	f003 0104 	and.w	r1, r3, #4
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	69da      	ldr	r2, [r3, #28]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800852a:	2b01      	cmp	r3, #1
 800852c:	d101      	bne.n	8008532 <HAL_SPI_Transmit+0x22>
 800852e:	2302      	movs	r3, #2
 8008530:	e11e      	b.n	8008770 <HAL_SPI_Transmit+0x260>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800853a:	f7fb fec9 	bl	80042d0 <HAL_GetTick>
 800853e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b01      	cmp	r3, #1
 800854e:	d002      	beq.n	8008556 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008550:	2302      	movs	r3, #2
 8008552:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008554:	e103      	b.n	800875e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <HAL_SPI_Transmit+0x52>
 800855c:	88fb      	ldrh	r3, [r7, #6]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d102      	bne.n	8008568 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008566:	e0fa      	b.n	800875e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2203      	movs	r2, #3
 800856c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	88fa      	ldrh	r2, [r7, #6]
 8008580:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	88fa      	ldrh	r2, [r7, #6]
 8008586:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ae:	d107      	bne.n	80085c0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b40      	cmp	r3, #64	; 0x40
 80085cc:	d007      	beq.n	80085de <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085e6:	d14b      	bne.n	8008680 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <HAL_SPI_Transmit+0xe6>
 80085f0:	8afb      	ldrh	r3, [r7, #22]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d13e      	bne.n	8008674 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	881a      	ldrh	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	1c9a      	adds	r2, r3, #2
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008610:	b29b      	uxth	r3, r3
 8008612:	3b01      	subs	r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800861a:	e02b      	b.n	8008674 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b02      	cmp	r3, #2
 8008628:	d112      	bne.n	8008650 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	881a      	ldrh	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	1c9a      	adds	r2, r3, #2
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008644:	b29b      	uxth	r3, r3
 8008646:	3b01      	subs	r3, #1
 8008648:	b29a      	uxth	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	86da      	strh	r2, [r3, #54]	; 0x36
 800864e:	e011      	b.n	8008674 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008650:	f7fb fe3e 	bl	80042d0 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	429a      	cmp	r2, r3
 800865e:	d803      	bhi.n	8008668 <HAL_SPI_Transmit+0x158>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008666:	d102      	bne.n	800866e <HAL_SPI_Transmit+0x15e>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d102      	bne.n	8008674 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008672:	e074      	b.n	800875e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1ce      	bne.n	800861c <HAL_SPI_Transmit+0x10c>
 800867e:	e04c      	b.n	800871a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <HAL_SPI_Transmit+0x17e>
 8008688:	8afb      	ldrh	r3, [r7, #22]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d140      	bne.n	8008710 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330c      	adds	r3, #12
 8008698:	7812      	ldrb	r2, [r2, #0]
 800869a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086b4:	e02c      	b.n	8008710 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d113      	bne.n	80086ec <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	7812      	ldrb	r2, [r2, #0]
 80086d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	3b01      	subs	r3, #1
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80086ea:	e011      	b.n	8008710 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086ec:	f7fb fdf0 	bl	80042d0 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d803      	bhi.n	8008704 <HAL_SPI_Transmit+0x1f4>
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008702:	d102      	bne.n	800870a <HAL_SPI_Transmit+0x1fa>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d102      	bne.n	8008710 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800870e:	e026      	b.n	800875e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1cd      	bne.n	80086b6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fba4 	bl	8008e6c <SPI_EndRxTxTransaction>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2220      	movs	r2, #32
 800872e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008738:	2300      	movs	r3, #0
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	613b      	str	r3, [r7, #16]
 800874c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	77fb      	strb	r3, [r7, #31]
 800875a:	e000      	b.n	800875e <HAL_SPI_Transmit+0x24e>
  }

error:
 800875c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800876e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3720      	adds	r7, #32
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af02      	add	r7, sp, #8
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008794:	d112      	bne.n	80087bc <HAL_SPI_Receive+0x44>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10e      	bne.n	80087bc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2204      	movs	r2, #4
 80087a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	4613      	mov	r3, r2
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f8e9 	bl	800898a <HAL_SPI_TransmitReceive>
 80087b8:	4603      	mov	r3, r0
 80087ba:	e0e2      	b.n	8008982 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <HAL_SPI_Receive+0x52>
 80087c6:	2302      	movs	r3, #2
 80087c8:	e0db      	b.n	8008982 <HAL_SPI_Receive+0x20a>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087d2:	f7fb fd7d 	bl	80042d0 <HAL_GetTick>
 80087d6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d002      	beq.n	80087ea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80087e4:	2302      	movs	r3, #2
 80087e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087e8:	e0c2      	b.n	8008970 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <HAL_SPI_Receive+0x7e>
 80087f0:	88fb      	ldrh	r3, [r7, #6]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d102      	bne.n	80087fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087fa:	e0b9      	b.n	8008970 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2204      	movs	r2, #4
 8008800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	88fa      	ldrh	r2, [r7, #6]
 800881a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008842:	d107      	bne.n	8008854 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008852:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d007      	beq.n	8008872 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008870:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d162      	bne.n	8008940 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800887a:	e02e      	b.n	80088da <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d115      	bne.n	80088b6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f103 020c 	add.w	r2, r3, #12
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088b4:	e011      	b.n	80088da <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088b6:	f7fb fd0b 	bl	80042d0 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d803      	bhi.n	80088ce <HAL_SPI_Receive+0x156>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d102      	bne.n	80088d4 <HAL_SPI_Receive+0x15c>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80088d8:	e04a      	b.n	8008970 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1cb      	bne.n	800887c <HAL_SPI_Receive+0x104>
 80088e4:	e031      	b.n	800894a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d113      	bne.n	800891c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fe:	b292      	uxth	r2, r2
 8008900:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008906:	1c9a      	adds	r2, r3, #2
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008910:	b29b      	uxth	r3, r3
 8008912:	3b01      	subs	r3, #1
 8008914:	b29a      	uxth	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800891a:	e011      	b.n	8008940 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800891c:	f7fb fcd8 	bl	80042d0 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d803      	bhi.n	8008934 <HAL_SPI_Receive+0x1bc>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d102      	bne.n	800893a <HAL_SPI_Receive+0x1c2>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800893e:	e017      	b.n	8008970 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008944:	b29b      	uxth	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1cd      	bne.n	80088e6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 fa27 	bl	8008da2 <SPI_EndRxTransaction>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	75fb      	strb	r3, [r7, #23]
 800896c:	e000      	b.n	8008970 <HAL_SPI_Receive+0x1f8>
  }

error :
 800896e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b08c      	sub	sp, #48	; 0x30
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008998:	2301      	movs	r3, #1
 800899a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d101      	bne.n	80089b0 <HAL_SPI_TransmitReceive+0x26>
 80089ac:	2302      	movs	r3, #2
 80089ae:	e18a      	b.n	8008cc6 <HAL_SPI_TransmitReceive+0x33c>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089b8:	f7fb fc8a 	bl	80042d0 <HAL_GetTick>
 80089bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80089ce:	887b      	ldrh	r3, [r7, #2]
 80089d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80089d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d00f      	beq.n	80089fa <HAL_SPI_TransmitReceive+0x70>
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089e0:	d107      	bne.n	80089f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <HAL_SPI_TransmitReceive+0x68>
 80089ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d003      	beq.n	80089fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80089f2:	2302      	movs	r3, #2
 80089f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80089f8:	e15b      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <HAL_SPI_TransmitReceive+0x82>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <HAL_SPI_TransmitReceive+0x82>
 8008a06:	887b      	ldrh	r3, [r7, #2]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d103      	bne.n	8008a14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a12:	e14e      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d003      	beq.n	8008a28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2205      	movs	r2, #5
 8008a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	887a      	ldrh	r2, [r7, #2]
 8008a38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	887a      	ldrh	r2, [r7, #2]
 8008a3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	887a      	ldrh	r2, [r7, #2]
 8008a4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	887a      	ldrh	r2, [r7, #2]
 8008a50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a68:	2b40      	cmp	r3, #64	; 0x40
 8008a6a:	d007      	beq.n	8008a7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a84:	d178      	bne.n	8008b78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <HAL_SPI_TransmitReceive+0x10a>
 8008a8e:	8b7b      	ldrh	r3, [r7, #26]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d166      	bne.n	8008b62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	881a      	ldrh	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	1c9a      	adds	r2, r3, #2
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ab8:	e053      	b.n	8008b62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d11b      	bne.n	8008b00 <HAL_SPI_TransmitReceive+0x176>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d016      	beq.n	8008b00 <HAL_SPI_TransmitReceive+0x176>
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d113      	bne.n	8008b00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008adc:	881a      	ldrh	r2, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae8:	1c9a      	adds	r2, r3, #2
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	3b01      	subs	r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d119      	bne.n	8008b42 <HAL_SPI_TransmitReceive+0x1b8>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d014      	beq.n	8008b42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	b292      	uxth	r2, r2
 8008b24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	1c9a      	adds	r2, r3, #2
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b42:	f7fb fbc5 	bl	80042d0 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d807      	bhi.n	8008b62 <HAL_SPI_TransmitReceive+0x1d8>
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d003      	beq.n	8008b62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b60:	e0a7      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1a6      	bne.n	8008aba <HAL_SPI_TransmitReceive+0x130>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1a1      	bne.n	8008aba <HAL_SPI_TransmitReceive+0x130>
 8008b76:	e07c      	b.n	8008c72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <HAL_SPI_TransmitReceive+0x1fc>
 8008b80:	8b7b      	ldrh	r3, [r7, #26]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d16b      	bne.n	8008c5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	330c      	adds	r3, #12
 8008b90:	7812      	ldrb	r2, [r2, #0]
 8008b92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bac:	e057      	b.n	8008c5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d11c      	bne.n	8008bf6 <HAL_SPI_TransmitReceive+0x26c>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d017      	beq.n	8008bf6 <HAL_SPI_TransmitReceive+0x26c>
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d114      	bne.n	8008bf6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	7812      	ldrb	r2, [r2, #0]
 8008bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d119      	bne.n	8008c38 <HAL_SPI_TransmitReceive+0x2ae>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d014      	beq.n	8008c38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	b2d2      	uxtb	r2, r2
 8008c1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c34:	2301      	movs	r3, #1
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c38:	f7fb fb4a 	bl	80042d0 <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d803      	bhi.n	8008c50 <HAL_SPI_TransmitReceive+0x2c6>
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4e:	d102      	bne.n	8008c56 <HAL_SPI_TransmitReceive+0x2cc>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d103      	bne.n	8008c5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c5c:	e029      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1a2      	bne.n	8008bae <HAL_SPI_TransmitReceive+0x224>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d19d      	bne.n	8008bae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 f8f8 	bl	8008e6c <SPI_EndRxTxTransaction>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d006      	beq.n	8008c90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008c8e:	e010      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10b      	bne.n	8008cb0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	e000      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008cb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3730      	adds	r7, #48	; 0x30
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cde:	e04c      	b.n	8008d7a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d048      	beq.n	8008d7a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008ce8:	f7fb faf2 	bl	80042d0 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d902      	bls.n	8008cfe <SPI_WaitFlagStateUntilTimeout+0x30>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d13d      	bne.n	8008d7a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d16:	d111      	bne.n	8008d3c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d20:	d004      	beq.n	8008d2c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d2a:	d107      	bne.n	8008d3c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d44:	d10f      	bne.n	8008d66 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e00f      	b.n	8008d9a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	4013      	ands	r3, r2
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	bf0c      	ite	eq
 8008d8a:	2301      	moveq	r3, #1
 8008d8c:	2300      	movne	r3, #0
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	461a      	mov	r2, r3
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d1a3      	bne.n	8008ce0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b086      	sub	sp, #24
 8008da6:	af02      	add	r7, sp, #8
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008db6:	d111      	bne.n	8008ddc <SPI_EndRxTransaction+0x3a>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc0:	d004      	beq.n	8008dcc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dca:	d107      	bne.n	8008ddc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dda:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008de4:	d12a      	bne.n	8008e3c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dee:	d012      	beq.n	8008e16 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2200      	movs	r2, #0
 8008df8:	2180      	movs	r1, #128	; 0x80
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7ff ff67 	bl	8008cce <SPI_WaitFlagStateUntilTimeout>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d02d      	beq.n	8008e62 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0a:	f043 0220 	orr.w	r2, r3, #32
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e026      	b.n	8008e64 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2101      	movs	r1, #1
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff ff54 	bl	8008cce <SPI_WaitFlagStateUntilTimeout>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01a      	beq.n	8008e62 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e30:	f043 0220 	orr.w	r2, r3, #32
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e013      	b.n	8008e64 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2200      	movs	r2, #0
 8008e44:	2101      	movs	r1, #1
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7ff ff41 	bl	8008cce <SPI_WaitFlagStateUntilTimeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d007      	beq.n	8008e62 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e56:	f043 0220 	orr.w	r2, r3, #32
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e000      	b.n	8008e64 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e78:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <SPI_EndRxTxTransaction+0x7c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1b      	ldr	r2, [pc, #108]	; (8008eec <SPI_EndRxTxTransaction+0x80>)
 8008e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e82:	0d5b      	lsrs	r3, r3, #21
 8008e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e88:	fb02 f303 	mul.w	r3, r2, r3
 8008e8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e96:	d112      	bne.n	8008ebe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff ff13 	bl	8008cce <SPI_WaitFlagStateUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d016      	beq.n	8008edc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb2:	f043 0220 	orr.w	r2, r3, #32
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e00f      	b.n	8008ede <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed4:	2b80      	cmp	r3, #128	; 0x80
 8008ed6:	d0f2      	beq.n	8008ebe <SPI_EndRxTxTransaction+0x52>
 8008ed8:	e000      	b.n	8008edc <SPI_EndRxTxTransaction+0x70>
        break;
 8008eda:	bf00      	nop
  }

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000000 	.word	0x20000000
 8008eec:	165e9f81 	.word	0x165e9f81

08008ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e01d      	b.n	8008f3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d106      	bne.n	8008f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7fa fd64 	bl	80039e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f000 fb56 	bl	80095e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0201 	orr.w	r2, r2, #1
 8008f5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b06      	cmp	r3, #6
 8008f6e:	d007      	beq.n	8008f80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0201 	orr.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d101      	bne.n	8008fa0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e01d      	b.n	8008fdc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7fa fca1 	bl	80038fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4619      	mov	r1, r3
 8008fcc:	4610      	mov	r0, r2
 8008fce:	f000 fb07 	bl	80095e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fd42 	bl	8009a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a15      	ldr	r2, [pc, #84]	; (8009058 <HAL_TIM_PWM_Start+0x74>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d004      	beq.n	8009010 <HAL_TIM_PWM_Start+0x2c>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a14      	ldr	r2, [pc, #80]	; (800905c <HAL_TIM_PWM_Start+0x78>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d101      	bne.n	8009014 <HAL_TIM_PWM_Start+0x30>
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <HAL_TIM_PWM_Start+0x32>
 8009014:	2300      	movs	r3, #0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009028:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0307 	and.w	r3, r3, #7
 8009034:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b06      	cmp	r3, #6
 800903a:	d007      	beq.n	800904c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	40010000 	.word	0x40010000
 800905c:	40010400 	.word	0x40010400

08009060 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e083      	b.n	800917c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fa fd1d 	bl	8003ac8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2202      	movs	r2, #2
 8009092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6812      	ldr	r2, [r2, #0]
 80090a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090a4:	f023 0307 	bic.w	r3, r3, #7
 80090a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4619      	mov	r1, r3
 80090b4:	4610      	mov	r0, r2
 80090b6:	f000 fa93 	bl	80095e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	4313      	orrs	r3, r2
 80090da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	4313      	orrs	r3, r2
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009100:	f023 030c 	bic.w	r3, r3, #12
 8009104:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800910c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	021b      	lsls	r3, r3, #8
 800911c:	4313      	orrs	r3, r2
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	011a      	lsls	r2, r3, #4
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	031b      	lsls	r3, r3, #12
 8009130:	4313      	orrs	r3, r2
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	4313      	orrs	r3, r2
 8009136:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800913e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009146:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	4313      	orrs	r3, r2
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <HAL_TIM_Encoder_Start+0x16>
 8009194:	2b04      	cmp	r3, #4
 8009196:	d008      	beq.n	80091aa <HAL_TIM_Encoder_Start+0x26>
 8009198:	e00f      	b.n	80091ba <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2201      	movs	r2, #1
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fc6c 	bl	8009a80 <TIM_CCxChannelCmd>
      break;
 80091a8:	e016      	b.n	80091d8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2201      	movs	r2, #1
 80091b0:	2104      	movs	r1, #4
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fc64 	bl	8009a80 <TIM_CCxChannelCmd>
      break;
 80091b8:	e00e      	b.n	80091d8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2201      	movs	r2, #1
 80091c0:	2100      	movs	r1, #0
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fc5c 	bl	8009a80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2201      	movs	r2, #1
 80091ce:	2104      	movs	r1, #4
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fc55 	bl	8009a80 <TIM_CCxChannelCmd>
      break;
 80091d6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b082      	sub	sp, #8
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b02      	cmp	r3, #2
 8009206:	d122      	bne.n	800924e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b02      	cmp	r3, #2
 8009214:	d11b      	bne.n	800924e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f06f 0202 	mvn.w	r2, #2
 800921e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f003 0303 	and.w	r3, r3, #3
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f9b5 	bl	80095a4 <HAL_TIM_IC_CaptureCallback>
 800923a:	e005      	b.n	8009248 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9a7 	bl	8009590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f9b8 	bl	80095b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b04      	cmp	r3, #4
 800925a:	d122      	bne.n	80092a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b04      	cmp	r3, #4
 8009268:	d11b      	bne.n	80092a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f06f 0204 	mvn.w	r2, #4
 8009272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f98b 	bl	80095a4 <HAL_TIM_IC_CaptureCallback>
 800928e:	e005      	b.n	800929c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f97d 	bl	8009590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f98e 	bl	80095b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d122      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d11b      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f06f 0208 	mvn.w	r2, #8
 80092c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2204      	movs	r2, #4
 80092cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f961 	bl	80095a4 <HAL_TIM_IC_CaptureCallback>
 80092e2:	e005      	b.n	80092f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f953 	bl	8009590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f964 	bl	80095b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	d122      	bne.n	800934a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	2b10      	cmp	r3, #16
 8009310:	d11b      	bne.n	800934a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f06f 0210 	mvn.w	r2, #16
 800931a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2208      	movs	r2, #8
 8009320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f937 	bl	80095a4 <HAL_TIM_IC_CaptureCallback>
 8009336:	e005      	b.n	8009344 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f929 	bl	8009590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f93a 	bl	80095b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b01      	cmp	r3, #1
 8009356:	d10e      	bne.n	8009376 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b01      	cmp	r3, #1
 8009364:	d107      	bne.n	8009376 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f06f 0201 	mvn.w	r2, #1
 800936e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7f9 f891 	bl	8002498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009380:	2b80      	cmp	r3, #128	; 0x80
 8009382:	d10e      	bne.n	80093a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938e:	2b80      	cmp	r3, #128	; 0x80
 8009390:	d107      	bne.n	80093a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800939a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fc6d 	bl	8009c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d10e      	bne.n	80093ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	2b40      	cmp	r3, #64	; 0x40
 80093bc:	d107      	bne.n	80093ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f8ff 	bl	80095cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b20      	cmp	r3, #32
 80093da:	d10e      	bne.n	80093fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d107      	bne.n	80093fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f06f 0220 	mvn.w	r2, #32
 80093f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fc37 	bl	8009c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009416:	2b01      	cmp	r3, #1
 8009418:	d101      	bne.n	800941e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800941a:	2302      	movs	r3, #2
 800941c:	e0b4      	b.n	8009588 <HAL_TIM_PWM_ConfigChannel+0x184>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2202      	movs	r2, #2
 800942a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b0c      	cmp	r3, #12
 8009432:	f200 809f 	bhi.w	8009574 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009436:	a201      	add	r2, pc, #4	; (adr r2, 800943c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943c:	08009471 	.word	0x08009471
 8009440:	08009575 	.word	0x08009575
 8009444:	08009575 	.word	0x08009575
 8009448:	08009575 	.word	0x08009575
 800944c:	080094b1 	.word	0x080094b1
 8009450:	08009575 	.word	0x08009575
 8009454:	08009575 	.word	0x08009575
 8009458:	08009575 	.word	0x08009575
 800945c:	080094f3 	.word	0x080094f3
 8009460:	08009575 	.word	0x08009575
 8009464:	08009575 	.word	0x08009575
 8009468:	08009575 	.word	0x08009575
 800946c:	08009533 	.word	0x08009533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f952 	bl	8009720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0208 	orr.w	r2, r2, #8
 800948a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699a      	ldr	r2, [r3, #24]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0204 	bic.w	r2, r2, #4
 800949a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6999      	ldr	r1, [r3, #24]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	691a      	ldr	r2, [r3, #16]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	619a      	str	r2, [r3, #24]
      break;
 80094ae:	e062      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f9a2 	bl	8009800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6999      	ldr	r1, [r3, #24]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	021a      	lsls	r2, r3, #8
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	430a      	orrs	r2, r1
 80094ee:	619a      	str	r2, [r3, #24]
      break;
 80094f0:	e041      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68b9      	ldr	r1, [r7, #8]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f9f7 	bl	80098ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69da      	ldr	r2, [r3, #28]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f042 0208 	orr.w	r2, r2, #8
 800950c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69da      	ldr	r2, [r3, #28]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0204 	bic.w	r2, r2, #4
 800951c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69d9      	ldr	r1, [r3, #28]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	61da      	str	r2, [r3, #28]
      break;
 8009530:	e021      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fa4b 	bl	80099d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800954c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69da      	ldr	r2, [r3, #28]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800955c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69d9      	ldr	r1, [r3, #28]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	021a      	lsls	r2, r3, #8
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	61da      	str	r2, [r3, #28]
      break;
 8009572:	e000      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009574:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a40      	ldr	r2, [pc, #256]	; (80096f4 <TIM_Base_SetConfig+0x114>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d013      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fe:	d00f      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a3d      	ldr	r2, [pc, #244]	; (80096f8 <TIM_Base_SetConfig+0x118>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00b      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a3c      	ldr	r2, [pc, #240]	; (80096fc <TIM_Base_SetConfig+0x11c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d007      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a3b      	ldr	r2, [pc, #236]	; (8009700 <TIM_Base_SetConfig+0x120>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d003      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a3a      	ldr	r2, [pc, #232]	; (8009704 <TIM_Base_SetConfig+0x124>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d108      	bne.n	8009632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4313      	orrs	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a2f      	ldr	r2, [pc, #188]	; (80096f4 <TIM_Base_SetConfig+0x114>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d02b      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009640:	d027      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a2c      	ldr	r2, [pc, #176]	; (80096f8 <TIM_Base_SetConfig+0x118>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d023      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a2b      	ldr	r2, [pc, #172]	; (80096fc <TIM_Base_SetConfig+0x11c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d01f      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a2a      	ldr	r2, [pc, #168]	; (8009700 <TIM_Base_SetConfig+0x120>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d01b      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a29      	ldr	r2, [pc, #164]	; (8009704 <TIM_Base_SetConfig+0x124>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d017      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a28      	ldr	r2, [pc, #160]	; (8009708 <TIM_Base_SetConfig+0x128>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d013      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a27      	ldr	r2, [pc, #156]	; (800970c <TIM_Base_SetConfig+0x12c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00f      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a26      	ldr	r2, [pc, #152]	; (8009710 <TIM_Base_SetConfig+0x130>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d00b      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a25      	ldr	r2, [pc, #148]	; (8009714 <TIM_Base_SetConfig+0x134>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d007      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a24      	ldr	r2, [pc, #144]	; (8009718 <TIM_Base_SetConfig+0x138>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d003      	beq.n	8009692 <TIM_Base_SetConfig+0xb2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a23      	ldr	r2, [pc, #140]	; (800971c <TIM_Base_SetConfig+0x13c>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d108      	bne.n	80096a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a0a      	ldr	r2, [pc, #40]	; (80096f4 <TIM_Base_SetConfig+0x114>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d003      	beq.n	80096d8 <TIM_Base_SetConfig+0xf8>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a0c      	ldr	r2, [pc, #48]	; (8009704 <TIM_Base_SetConfig+0x124>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d103      	bne.n	80096e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	691a      	ldr	r2, [r3, #16]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	615a      	str	r2, [r3, #20]
}
 80096e6:	bf00      	nop
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	40010000 	.word	0x40010000
 80096f8:	40000400 	.word	0x40000400
 80096fc:	40000800 	.word	0x40000800
 8009700:	40000c00 	.word	0x40000c00
 8009704:	40010400 	.word	0x40010400
 8009708:	40014000 	.word	0x40014000
 800970c:	40014400 	.word	0x40014400
 8009710:	40014800 	.word	0x40014800
 8009714:	40001800 	.word	0x40001800
 8009718:	40001c00 	.word	0x40001c00
 800971c:	40002000 	.word	0x40002000

08009720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	f023 0201 	bic.w	r2, r3, #1
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0303 	bic.w	r3, r3, #3
 8009756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f023 0302 	bic.w	r3, r3, #2
 8009768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	4313      	orrs	r3, r2
 8009772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a20      	ldr	r2, [pc, #128]	; (80097f8 <TIM_OC1_SetConfig+0xd8>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d003      	beq.n	8009784 <TIM_OC1_SetConfig+0x64>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a1f      	ldr	r2, [pc, #124]	; (80097fc <TIM_OC1_SetConfig+0xdc>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d10c      	bne.n	800979e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f023 0308 	bic.w	r3, r3, #8
 800978a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f023 0304 	bic.w	r3, r3, #4
 800979c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <TIM_OC1_SetConfig+0xd8>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d003      	beq.n	80097ae <TIM_OC1_SetConfig+0x8e>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a14      	ldr	r2, [pc, #80]	; (80097fc <TIM_OC1_SetConfig+0xdc>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d111      	bne.n	80097d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	621a      	str	r2, [r3, #32]
}
 80097ec:	bf00      	nop
 80097ee:	371c      	adds	r7, #28
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	40010000 	.word	0x40010000
 80097fc:	40010400 	.word	0x40010400

08009800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	f023 0210 	bic.w	r2, r3, #16
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4313      	orrs	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f023 0320 	bic.w	r3, r3, #32
 800984a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	011b      	lsls	r3, r3, #4
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	4313      	orrs	r3, r2
 8009856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a22      	ldr	r2, [pc, #136]	; (80098e4 <TIM_OC2_SetConfig+0xe4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_OC2_SetConfig+0x68>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a21      	ldr	r2, [pc, #132]	; (80098e8 <TIM_OC2_SetConfig+0xe8>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d10d      	bne.n	8009884 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800986e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009882:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a17      	ldr	r2, [pc, #92]	; (80098e4 <TIM_OC2_SetConfig+0xe4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d003      	beq.n	8009894 <TIM_OC2_SetConfig+0x94>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a16      	ldr	r2, [pc, #88]	; (80098e8 <TIM_OC2_SetConfig+0xe8>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d113      	bne.n	80098bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800989a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	621a      	str	r2, [r3, #32]
}
 80098d6:	bf00      	nop
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40010400 	.word	0x40010400

080098ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f023 0303 	bic.w	r3, r3, #3
 8009922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a21      	ldr	r2, [pc, #132]	; (80099cc <TIM_OC3_SetConfig+0xe0>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_OC3_SetConfig+0x66>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a20      	ldr	r2, [pc, #128]	; (80099d0 <TIM_OC3_SetConfig+0xe4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d10d      	bne.n	800996e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	021b      	lsls	r3, r3, #8
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800996c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a16      	ldr	r2, [pc, #88]	; (80099cc <TIM_OC3_SetConfig+0xe0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d003      	beq.n	800997e <TIM_OC3_SetConfig+0x92>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a15      	ldr	r2, [pc, #84]	; (80099d0 <TIM_OC3_SetConfig+0xe4>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d113      	bne.n	80099a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800998c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	4313      	orrs	r3, r2
 8009998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	621a      	str	r2, [r3, #32]
}
 80099c0:	bf00      	nop
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	40010000 	.word	0x40010000
 80099d0:	40010400 	.word	0x40010400

080099d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	021b      	lsls	r3, r3, #8
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	031b      	lsls	r3, r3, #12
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a12      	ldr	r2, [pc, #72]	; (8009a78 <TIM_OC4_SetConfig+0xa4>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d003      	beq.n	8009a3c <TIM_OC4_SetConfig+0x68>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a11      	ldr	r2, [pc, #68]	; (8009a7c <TIM_OC4_SetConfig+0xa8>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d109      	bne.n	8009a50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	019b      	lsls	r3, r3, #6
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	621a      	str	r2, [r3, #32]
}
 8009a6a:	bf00      	nop
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40010000 	.word	0x40010000
 8009a7c:	40010400 	.word	0x40010400

08009a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f003 031f 	and.w	r3, r3, #31
 8009a92:	2201      	movs	r2, #1
 8009a94:	fa02 f303 	lsl.w	r3, r2, r3
 8009a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a1a      	ldr	r2, [r3, #32]
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	43db      	mvns	r3, r3
 8009aa2:	401a      	ands	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6a1a      	ldr	r2, [r3, #32]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f003 031f 	and.w	r3, r3, #31
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab8:	431a      	orrs	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	621a      	str	r2, [r3, #32]
}
 8009abe:	bf00      	nop
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
	...

08009acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e05a      	b.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a21      	ldr	r2, [pc, #132]	; (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d022      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b30:	d01d      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1d      	ldr	r2, [pc, #116]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d018      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a1b      	ldr	r2, [pc, #108]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d013      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a1a      	ldr	r2, [pc, #104]	; (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00e      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a18      	ldr	r2, [pc, #96]	; (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d009      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a17      	ldr	r2, [pc, #92]	; (8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d004      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a15      	ldr	r2, [pc, #84]	; (8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d10c      	bne.n	8009b88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	40010000 	.word	0x40010000
 8009bac:	40000400 	.word	0x40000400
 8009bb0:	40000800 	.word	0x40000800
 8009bb4:	40000c00 	.word	0x40000c00
 8009bb8:	40010400 	.word	0x40010400
 8009bbc:	40014000 	.word	0x40014000
 8009bc0:	40001800 	.word	0x40001800

08009bc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e03d      	b.n	8009c5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e03f      	b.n	8009d22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7fa f828 	bl	8003d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2224      	movs	r2, #36	; 0x24
 8009cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68da      	ldr	r2, [r3, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f829 	bl	8009d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	695a      	ldr	r2, [r3, #20]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68da      	ldr	r2, [r3, #12]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	b085      	sub	sp, #20
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	689a      	ldr	r2, [r3, #8]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	431a      	orrs	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009d6e:	f023 030c 	bic.w	r3, r3, #12
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6812      	ldr	r2, [r2, #0]
 8009d76:	68f9      	ldr	r1, [r7, #12]
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d9a:	f040 818b 	bne.w	800a0b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4ac1      	ldr	r2, [pc, #772]	; (800a0a8 <UART_SetConfig+0x37c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d005      	beq.n	8009db4 <UART_SetConfig+0x88>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4abf      	ldr	r2, [pc, #764]	; (800a0ac <UART_SetConfig+0x380>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	f040 80bd 	bne.w	8009f2e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009db4:	f7fc fbcc 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 8009db8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	461d      	mov	r5, r3
 8009dbe:	f04f 0600 	mov.w	r6, #0
 8009dc2:	46a8      	mov	r8, r5
 8009dc4:	46b1      	mov	r9, r6
 8009dc6:	eb18 0308 	adds.w	r3, r8, r8
 8009dca:	eb49 0409 	adc.w	r4, r9, r9
 8009dce:	4698      	mov	r8, r3
 8009dd0:	46a1      	mov	r9, r4
 8009dd2:	eb18 0805 	adds.w	r8, r8, r5
 8009dd6:	eb49 0906 	adc.w	r9, r9, r6
 8009dda:	f04f 0100 	mov.w	r1, #0
 8009dde:	f04f 0200 	mov.w	r2, #0
 8009de2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009de6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009dea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009dee:	4688      	mov	r8, r1
 8009df0:	4691      	mov	r9, r2
 8009df2:	eb18 0005 	adds.w	r0, r8, r5
 8009df6:	eb49 0106 	adc.w	r1, r9, r6
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	461d      	mov	r5, r3
 8009e00:	f04f 0600 	mov.w	r6, #0
 8009e04:	196b      	adds	r3, r5, r5
 8009e06:	eb46 0406 	adc.w	r4, r6, r6
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	f7f6 ff53 	bl	8000cb8 <__aeabi_uldivmod>
 8009e12:	4603      	mov	r3, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	461a      	mov	r2, r3
 8009e18:	4ba5      	ldr	r3, [pc, #660]	; (800a0b0 <UART_SetConfig+0x384>)
 8009e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e1e:	095b      	lsrs	r3, r3, #5
 8009e20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	461d      	mov	r5, r3
 8009e28:	f04f 0600 	mov.w	r6, #0
 8009e2c:	46a9      	mov	r9, r5
 8009e2e:	46b2      	mov	sl, r6
 8009e30:	eb19 0309 	adds.w	r3, r9, r9
 8009e34:	eb4a 040a 	adc.w	r4, sl, sl
 8009e38:	4699      	mov	r9, r3
 8009e3a:	46a2      	mov	sl, r4
 8009e3c:	eb19 0905 	adds.w	r9, r9, r5
 8009e40:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e44:	f04f 0100 	mov.w	r1, #0
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e58:	4689      	mov	r9, r1
 8009e5a:	4692      	mov	sl, r2
 8009e5c:	eb19 0005 	adds.w	r0, r9, r5
 8009e60:	eb4a 0106 	adc.w	r1, sl, r6
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	461d      	mov	r5, r3
 8009e6a:	f04f 0600 	mov.w	r6, #0
 8009e6e:	196b      	adds	r3, r5, r5
 8009e70:	eb46 0406 	adc.w	r4, r6, r6
 8009e74:	461a      	mov	r2, r3
 8009e76:	4623      	mov	r3, r4
 8009e78:	f7f6 ff1e 	bl	8000cb8 <__aeabi_uldivmod>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	461a      	mov	r2, r3
 8009e82:	4b8b      	ldr	r3, [pc, #556]	; (800a0b0 <UART_SetConfig+0x384>)
 8009e84:	fba3 1302 	umull	r1, r3, r3, r2
 8009e88:	095b      	lsrs	r3, r3, #5
 8009e8a:	2164      	movs	r1, #100	; 0x64
 8009e8c:	fb01 f303 	mul.w	r3, r1, r3
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	3332      	adds	r3, #50	; 0x32
 8009e96:	4a86      	ldr	r2, [pc, #536]	; (800a0b0 <UART_SetConfig+0x384>)
 8009e98:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9c:	095b      	lsrs	r3, r3, #5
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ea4:	4498      	add	r8, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	461d      	mov	r5, r3
 8009eaa:	f04f 0600 	mov.w	r6, #0
 8009eae:	46a9      	mov	r9, r5
 8009eb0:	46b2      	mov	sl, r6
 8009eb2:	eb19 0309 	adds.w	r3, r9, r9
 8009eb6:	eb4a 040a 	adc.w	r4, sl, sl
 8009eba:	4699      	mov	r9, r3
 8009ebc:	46a2      	mov	sl, r4
 8009ebe:	eb19 0905 	adds.w	r9, r9, r5
 8009ec2:	eb4a 0a06 	adc.w	sl, sl, r6
 8009ec6:	f04f 0100 	mov.w	r1, #0
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ed2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ed6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009eda:	4689      	mov	r9, r1
 8009edc:	4692      	mov	sl, r2
 8009ede:	eb19 0005 	adds.w	r0, r9, r5
 8009ee2:	eb4a 0106 	adc.w	r1, sl, r6
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	461d      	mov	r5, r3
 8009eec:	f04f 0600 	mov.w	r6, #0
 8009ef0:	196b      	adds	r3, r5, r5
 8009ef2:	eb46 0406 	adc.w	r4, r6, r6
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	4623      	mov	r3, r4
 8009efa:	f7f6 fedd 	bl	8000cb8 <__aeabi_uldivmod>
 8009efe:	4603      	mov	r3, r0
 8009f00:	460c      	mov	r4, r1
 8009f02:	461a      	mov	r2, r3
 8009f04:	4b6a      	ldr	r3, [pc, #424]	; (800a0b0 <UART_SetConfig+0x384>)
 8009f06:	fba3 1302 	umull	r1, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	2164      	movs	r1, #100	; 0x64
 8009f0e:	fb01 f303 	mul.w	r3, r1, r3
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	3332      	adds	r3, #50	; 0x32
 8009f18:	4a65      	ldr	r2, [pc, #404]	; (800a0b0 <UART_SetConfig+0x384>)
 8009f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	f003 0207 	and.w	r2, r3, #7
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4442      	add	r2, r8
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	e26f      	b.n	800a40e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f2e:	f7fc fafb 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8009f32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	461d      	mov	r5, r3
 8009f38:	f04f 0600 	mov.w	r6, #0
 8009f3c:	46a8      	mov	r8, r5
 8009f3e:	46b1      	mov	r9, r6
 8009f40:	eb18 0308 	adds.w	r3, r8, r8
 8009f44:	eb49 0409 	adc.w	r4, r9, r9
 8009f48:	4698      	mov	r8, r3
 8009f4a:	46a1      	mov	r9, r4
 8009f4c:	eb18 0805 	adds.w	r8, r8, r5
 8009f50:	eb49 0906 	adc.w	r9, r9, r6
 8009f54:	f04f 0100 	mov.w	r1, #0
 8009f58:	f04f 0200 	mov.w	r2, #0
 8009f5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009f60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009f64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f68:	4688      	mov	r8, r1
 8009f6a:	4691      	mov	r9, r2
 8009f6c:	eb18 0005 	adds.w	r0, r8, r5
 8009f70:	eb49 0106 	adc.w	r1, r9, r6
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	461d      	mov	r5, r3
 8009f7a:	f04f 0600 	mov.w	r6, #0
 8009f7e:	196b      	adds	r3, r5, r5
 8009f80:	eb46 0406 	adc.w	r4, r6, r6
 8009f84:	461a      	mov	r2, r3
 8009f86:	4623      	mov	r3, r4
 8009f88:	f7f6 fe96 	bl	8000cb8 <__aeabi_uldivmod>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b47      	ldr	r3, [pc, #284]	; (800a0b0 <UART_SetConfig+0x384>)
 8009f94:	fba3 2302 	umull	r2, r3, r3, r2
 8009f98:	095b      	lsrs	r3, r3, #5
 8009f9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	461d      	mov	r5, r3
 8009fa2:	f04f 0600 	mov.w	r6, #0
 8009fa6:	46a9      	mov	r9, r5
 8009fa8:	46b2      	mov	sl, r6
 8009faa:	eb19 0309 	adds.w	r3, r9, r9
 8009fae:	eb4a 040a 	adc.w	r4, sl, sl
 8009fb2:	4699      	mov	r9, r3
 8009fb4:	46a2      	mov	sl, r4
 8009fb6:	eb19 0905 	adds.w	r9, r9, r5
 8009fba:	eb4a 0a06 	adc.w	sl, sl, r6
 8009fbe:	f04f 0100 	mov.w	r1, #0
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fd2:	4689      	mov	r9, r1
 8009fd4:	4692      	mov	sl, r2
 8009fd6:	eb19 0005 	adds.w	r0, r9, r5
 8009fda:	eb4a 0106 	adc.w	r1, sl, r6
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	461d      	mov	r5, r3
 8009fe4:	f04f 0600 	mov.w	r6, #0
 8009fe8:	196b      	adds	r3, r5, r5
 8009fea:	eb46 0406 	adc.w	r4, r6, r6
 8009fee:	461a      	mov	r2, r3
 8009ff0:	4623      	mov	r3, r4
 8009ff2:	f7f6 fe61 	bl	8000cb8 <__aeabi_uldivmod>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4b2c      	ldr	r3, [pc, #176]	; (800a0b0 <UART_SetConfig+0x384>)
 8009ffe:	fba3 1302 	umull	r1, r3, r3, r2
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	2164      	movs	r1, #100	; 0x64
 800a006:	fb01 f303 	mul.w	r3, r1, r3
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	3332      	adds	r3, #50	; 0x32
 800a010:	4a27      	ldr	r2, [pc, #156]	; (800a0b0 <UART_SetConfig+0x384>)
 800a012:	fba2 2303 	umull	r2, r3, r2, r3
 800a016:	095b      	lsrs	r3, r3, #5
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a01e:	4498      	add	r8, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	461d      	mov	r5, r3
 800a024:	f04f 0600 	mov.w	r6, #0
 800a028:	46a9      	mov	r9, r5
 800a02a:	46b2      	mov	sl, r6
 800a02c:	eb19 0309 	adds.w	r3, r9, r9
 800a030:	eb4a 040a 	adc.w	r4, sl, sl
 800a034:	4699      	mov	r9, r3
 800a036:	46a2      	mov	sl, r4
 800a038:	eb19 0905 	adds.w	r9, r9, r5
 800a03c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a040:	f04f 0100 	mov.w	r1, #0
 800a044:	f04f 0200 	mov.w	r2, #0
 800a048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a04c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a050:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a054:	4689      	mov	r9, r1
 800a056:	4692      	mov	sl, r2
 800a058:	eb19 0005 	adds.w	r0, r9, r5
 800a05c:	eb4a 0106 	adc.w	r1, sl, r6
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	461d      	mov	r5, r3
 800a066:	f04f 0600 	mov.w	r6, #0
 800a06a:	196b      	adds	r3, r5, r5
 800a06c:	eb46 0406 	adc.w	r4, r6, r6
 800a070:	461a      	mov	r2, r3
 800a072:	4623      	mov	r3, r4
 800a074:	f7f6 fe20 	bl	8000cb8 <__aeabi_uldivmod>
 800a078:	4603      	mov	r3, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	461a      	mov	r2, r3
 800a07e:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <UART_SetConfig+0x384>)
 800a080:	fba3 1302 	umull	r1, r3, r3, r2
 800a084:	095b      	lsrs	r3, r3, #5
 800a086:	2164      	movs	r1, #100	; 0x64
 800a088:	fb01 f303 	mul.w	r3, r1, r3
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	3332      	adds	r3, #50	; 0x32
 800a092:	4a07      	ldr	r2, [pc, #28]	; (800a0b0 <UART_SetConfig+0x384>)
 800a094:	fba2 2303 	umull	r2, r3, r2, r3
 800a098:	095b      	lsrs	r3, r3, #5
 800a09a:	f003 0207 	and.w	r2, r3, #7
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4442      	add	r2, r8
 800a0a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a0a6:	e1b2      	b.n	800a40e <UART_SetConfig+0x6e2>
 800a0a8:	40011000 	.word	0x40011000
 800a0ac:	40011400 	.word	0x40011400
 800a0b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4ad7      	ldr	r2, [pc, #860]	; (800a418 <UART_SetConfig+0x6ec>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d005      	beq.n	800a0ca <UART_SetConfig+0x39e>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4ad6      	ldr	r2, [pc, #856]	; (800a41c <UART_SetConfig+0x6f0>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	f040 80d1 	bne.w	800a26c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a0ca:	f7fc fa41 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 800a0ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	469a      	mov	sl, r3
 800a0d4:	f04f 0b00 	mov.w	fp, #0
 800a0d8:	46d0      	mov	r8, sl
 800a0da:	46d9      	mov	r9, fp
 800a0dc:	eb18 0308 	adds.w	r3, r8, r8
 800a0e0:	eb49 0409 	adc.w	r4, r9, r9
 800a0e4:	4698      	mov	r8, r3
 800a0e6:	46a1      	mov	r9, r4
 800a0e8:	eb18 080a 	adds.w	r8, r8, sl
 800a0ec:	eb49 090b 	adc.w	r9, r9, fp
 800a0f0:	f04f 0100 	mov.w	r1, #0
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a0fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a100:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a104:	4688      	mov	r8, r1
 800a106:	4691      	mov	r9, r2
 800a108:	eb1a 0508 	adds.w	r5, sl, r8
 800a10c:	eb4b 0609 	adc.w	r6, fp, r9
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4619      	mov	r1, r3
 800a116:	f04f 0200 	mov.w	r2, #0
 800a11a:	f04f 0300 	mov.w	r3, #0
 800a11e:	f04f 0400 	mov.w	r4, #0
 800a122:	0094      	lsls	r4, r2, #2
 800a124:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a128:	008b      	lsls	r3, r1, #2
 800a12a:	461a      	mov	r2, r3
 800a12c:	4623      	mov	r3, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	4631      	mov	r1, r6
 800a132:	f7f6 fdc1 	bl	8000cb8 <__aeabi_uldivmod>
 800a136:	4603      	mov	r3, r0
 800a138:	460c      	mov	r4, r1
 800a13a:	461a      	mov	r2, r3
 800a13c:	4bb8      	ldr	r3, [pc, #736]	; (800a420 <UART_SetConfig+0x6f4>)
 800a13e:	fba3 2302 	umull	r2, r3, r3, r2
 800a142:	095b      	lsrs	r3, r3, #5
 800a144:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	469b      	mov	fp, r3
 800a14c:	f04f 0c00 	mov.w	ip, #0
 800a150:	46d9      	mov	r9, fp
 800a152:	46e2      	mov	sl, ip
 800a154:	eb19 0309 	adds.w	r3, r9, r9
 800a158:	eb4a 040a 	adc.w	r4, sl, sl
 800a15c:	4699      	mov	r9, r3
 800a15e:	46a2      	mov	sl, r4
 800a160:	eb19 090b 	adds.w	r9, r9, fp
 800a164:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a168:	f04f 0100 	mov.w	r1, #0
 800a16c:	f04f 0200 	mov.w	r2, #0
 800a170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a174:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a178:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a17c:	4689      	mov	r9, r1
 800a17e:	4692      	mov	sl, r2
 800a180:	eb1b 0509 	adds.w	r5, fp, r9
 800a184:	eb4c 060a 	adc.w	r6, ip, sl
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	4619      	mov	r1, r3
 800a18e:	f04f 0200 	mov.w	r2, #0
 800a192:	f04f 0300 	mov.w	r3, #0
 800a196:	f04f 0400 	mov.w	r4, #0
 800a19a:	0094      	lsls	r4, r2, #2
 800a19c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a1a0:	008b      	lsls	r3, r1, #2
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	4623      	mov	r3, r4
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	f7f6 fd85 	bl	8000cb8 <__aeabi_uldivmod>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	4b9a      	ldr	r3, [pc, #616]	; (800a420 <UART_SetConfig+0x6f4>)
 800a1b6:	fba3 1302 	umull	r1, r3, r3, r2
 800a1ba:	095b      	lsrs	r3, r3, #5
 800a1bc:	2164      	movs	r1, #100	; 0x64
 800a1be:	fb01 f303 	mul.w	r3, r1, r3
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	011b      	lsls	r3, r3, #4
 800a1c6:	3332      	adds	r3, #50	; 0x32
 800a1c8:	4a95      	ldr	r2, [pc, #596]	; (800a420 <UART_SetConfig+0x6f4>)
 800a1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ce:	095b      	lsrs	r3, r3, #5
 800a1d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d4:	4498      	add	r8, r3
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	469b      	mov	fp, r3
 800a1da:	f04f 0c00 	mov.w	ip, #0
 800a1de:	46d9      	mov	r9, fp
 800a1e0:	46e2      	mov	sl, ip
 800a1e2:	eb19 0309 	adds.w	r3, r9, r9
 800a1e6:	eb4a 040a 	adc.w	r4, sl, sl
 800a1ea:	4699      	mov	r9, r3
 800a1ec:	46a2      	mov	sl, r4
 800a1ee:	eb19 090b 	adds.w	r9, r9, fp
 800a1f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a1f6:	f04f 0100 	mov.w	r1, #0
 800a1fa:	f04f 0200 	mov.w	r2, #0
 800a1fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a202:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a206:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a20a:	4689      	mov	r9, r1
 800a20c:	4692      	mov	sl, r2
 800a20e:	eb1b 0509 	adds.w	r5, fp, r9
 800a212:	eb4c 060a 	adc.w	r6, ip, sl
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	4619      	mov	r1, r3
 800a21c:	f04f 0200 	mov.w	r2, #0
 800a220:	f04f 0300 	mov.w	r3, #0
 800a224:	f04f 0400 	mov.w	r4, #0
 800a228:	0094      	lsls	r4, r2, #2
 800a22a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a22e:	008b      	lsls	r3, r1, #2
 800a230:	461a      	mov	r2, r3
 800a232:	4623      	mov	r3, r4
 800a234:	4628      	mov	r0, r5
 800a236:	4631      	mov	r1, r6
 800a238:	f7f6 fd3e 	bl	8000cb8 <__aeabi_uldivmod>
 800a23c:	4603      	mov	r3, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	461a      	mov	r2, r3
 800a242:	4b77      	ldr	r3, [pc, #476]	; (800a420 <UART_SetConfig+0x6f4>)
 800a244:	fba3 1302 	umull	r1, r3, r3, r2
 800a248:	095b      	lsrs	r3, r3, #5
 800a24a:	2164      	movs	r1, #100	; 0x64
 800a24c:	fb01 f303 	mul.w	r3, r1, r3
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	011b      	lsls	r3, r3, #4
 800a254:	3332      	adds	r3, #50	; 0x32
 800a256:	4a72      	ldr	r2, [pc, #456]	; (800a420 <UART_SetConfig+0x6f4>)
 800a258:	fba2 2303 	umull	r2, r3, r2, r3
 800a25c:	095b      	lsrs	r3, r3, #5
 800a25e:	f003 020f 	and.w	r2, r3, #15
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4442      	add	r2, r8
 800a268:	609a      	str	r2, [r3, #8]
 800a26a:	e0d0      	b.n	800a40e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a26c:	f7fc f95c 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 800a270:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	469a      	mov	sl, r3
 800a276:	f04f 0b00 	mov.w	fp, #0
 800a27a:	46d0      	mov	r8, sl
 800a27c:	46d9      	mov	r9, fp
 800a27e:	eb18 0308 	adds.w	r3, r8, r8
 800a282:	eb49 0409 	adc.w	r4, r9, r9
 800a286:	4698      	mov	r8, r3
 800a288:	46a1      	mov	r9, r4
 800a28a:	eb18 080a 	adds.w	r8, r8, sl
 800a28e:	eb49 090b 	adc.w	r9, r9, fp
 800a292:	f04f 0100 	mov.w	r1, #0
 800a296:	f04f 0200 	mov.w	r2, #0
 800a29a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a29e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a2a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a2a6:	4688      	mov	r8, r1
 800a2a8:	4691      	mov	r9, r2
 800a2aa:	eb1a 0508 	adds.w	r5, sl, r8
 800a2ae:	eb4b 0609 	adc.w	r6, fp, r9
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	f04f 0200 	mov.w	r2, #0
 800a2bc:	f04f 0300 	mov.w	r3, #0
 800a2c0:	f04f 0400 	mov.w	r4, #0
 800a2c4:	0094      	lsls	r4, r2, #2
 800a2c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a2ca:	008b      	lsls	r3, r1, #2
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4623      	mov	r3, r4
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	f7f6 fcf0 	bl	8000cb8 <__aeabi_uldivmod>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	461a      	mov	r2, r3
 800a2de:	4b50      	ldr	r3, [pc, #320]	; (800a420 <UART_SetConfig+0x6f4>)
 800a2e0:	fba3 2302 	umull	r2, r3, r3, r2
 800a2e4:	095b      	lsrs	r3, r3, #5
 800a2e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	469b      	mov	fp, r3
 800a2ee:	f04f 0c00 	mov.w	ip, #0
 800a2f2:	46d9      	mov	r9, fp
 800a2f4:	46e2      	mov	sl, ip
 800a2f6:	eb19 0309 	adds.w	r3, r9, r9
 800a2fa:	eb4a 040a 	adc.w	r4, sl, sl
 800a2fe:	4699      	mov	r9, r3
 800a300:	46a2      	mov	sl, r4
 800a302:	eb19 090b 	adds.w	r9, r9, fp
 800a306:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a30a:	f04f 0100 	mov.w	r1, #0
 800a30e:	f04f 0200 	mov.w	r2, #0
 800a312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a316:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a31a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a31e:	4689      	mov	r9, r1
 800a320:	4692      	mov	sl, r2
 800a322:	eb1b 0509 	adds.w	r5, fp, r9
 800a326:	eb4c 060a 	adc.w	r6, ip, sl
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	4619      	mov	r1, r3
 800a330:	f04f 0200 	mov.w	r2, #0
 800a334:	f04f 0300 	mov.w	r3, #0
 800a338:	f04f 0400 	mov.w	r4, #0
 800a33c:	0094      	lsls	r4, r2, #2
 800a33e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a342:	008b      	lsls	r3, r1, #2
 800a344:	461a      	mov	r2, r3
 800a346:	4623      	mov	r3, r4
 800a348:	4628      	mov	r0, r5
 800a34a:	4631      	mov	r1, r6
 800a34c:	f7f6 fcb4 	bl	8000cb8 <__aeabi_uldivmod>
 800a350:	4603      	mov	r3, r0
 800a352:	460c      	mov	r4, r1
 800a354:	461a      	mov	r2, r3
 800a356:	4b32      	ldr	r3, [pc, #200]	; (800a420 <UART_SetConfig+0x6f4>)
 800a358:	fba3 1302 	umull	r1, r3, r3, r2
 800a35c:	095b      	lsrs	r3, r3, #5
 800a35e:	2164      	movs	r1, #100	; 0x64
 800a360:	fb01 f303 	mul.w	r3, r1, r3
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	3332      	adds	r3, #50	; 0x32
 800a36a:	4a2d      	ldr	r2, [pc, #180]	; (800a420 <UART_SetConfig+0x6f4>)
 800a36c:	fba2 2303 	umull	r2, r3, r2, r3
 800a370:	095b      	lsrs	r3, r3, #5
 800a372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a376:	4498      	add	r8, r3
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	469b      	mov	fp, r3
 800a37c:	f04f 0c00 	mov.w	ip, #0
 800a380:	46d9      	mov	r9, fp
 800a382:	46e2      	mov	sl, ip
 800a384:	eb19 0309 	adds.w	r3, r9, r9
 800a388:	eb4a 040a 	adc.w	r4, sl, sl
 800a38c:	4699      	mov	r9, r3
 800a38e:	46a2      	mov	sl, r4
 800a390:	eb19 090b 	adds.w	r9, r9, fp
 800a394:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a398:	f04f 0100 	mov.w	r1, #0
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a3a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a3ac:	4689      	mov	r9, r1
 800a3ae:	4692      	mov	sl, r2
 800a3b0:	eb1b 0509 	adds.w	r5, fp, r9
 800a3b4:	eb4c 060a 	adc.w	r6, ip, sl
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	f04f 0200 	mov.w	r2, #0
 800a3c2:	f04f 0300 	mov.w	r3, #0
 800a3c6:	f04f 0400 	mov.w	r4, #0
 800a3ca:	0094      	lsls	r4, r2, #2
 800a3cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a3d0:	008b      	lsls	r3, r1, #2
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	4631      	mov	r1, r6
 800a3da:	f7f6 fc6d 	bl	8000cb8 <__aeabi_uldivmod>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	4b0e      	ldr	r3, [pc, #56]	; (800a420 <UART_SetConfig+0x6f4>)
 800a3e6:	fba3 1302 	umull	r1, r3, r3, r2
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	2164      	movs	r1, #100	; 0x64
 800a3ee:	fb01 f303 	mul.w	r3, r1, r3
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	011b      	lsls	r3, r3, #4
 800a3f6:	3332      	adds	r3, #50	; 0x32
 800a3f8:	4a09      	ldr	r2, [pc, #36]	; (800a420 <UART_SetConfig+0x6f4>)
 800a3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3fe:	095b      	lsrs	r3, r3, #5
 800a400:	f003 020f 	and.w	r2, r3, #15
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4442      	add	r2, r8
 800a40a:	609a      	str	r2, [r3, #8]
}
 800a40c:	e7ff      	b.n	800a40e <UART_SetConfig+0x6e2>
 800a40e:	bf00      	nop
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a418:	40011000 	.word	0x40011000
 800a41c:	40011400 	.word	0x40011400
 800a420:	51eb851f 	.word	0x51eb851f

0800a424 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a424:	b084      	sub	sp, #16
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	f107 001c 	add.w	r0, r7, #28
 800a432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a43a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a43c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a43e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a442:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a446:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a44a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a44e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a45e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	431a      	orrs	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	b004      	add	sp, #16
 800a478:	4770      	bx	lr

0800a47a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2203      	movs	r2, #3
 800a4c2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a4c4:	2002      	movs	r0, #2
 800a4c6:	f7f9 ff0f 	bl	80042e8 <HAL_Delay>
  
  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0303 	and.w	r3, r3, #3
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a50e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a514:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a51a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	4313      	orrs	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a52a:	f023 030f 	bic.w	r3, r3, #15
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	431a      	orrs	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	b2db      	uxtb	r3, r3
}
 800a552:	4618      	mov	r0, r3
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a55e:	b480      	push	{r7}
 800a560:	b085      	sub	sp, #20
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3314      	adds	r3, #20
 800a56c:	461a      	mov	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	4413      	add	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
}  
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a5b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a5b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0

}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a5ea:	2310      	movs	r3, #16
 800a5ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff ff74 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a608:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60c:	2110      	movs	r1, #16
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fa40 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a616:	69fb      	ldr	r3, [r7, #28]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a62e:	2311      	movs	r3, #17
 800a630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a632:	2340      	movs	r3, #64	; 0x40
 800a634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a636:	2300      	movs	r3, #0
 800a638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a640:	f107 0308 	add.w	r3, r7, #8
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff ff52 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a650:	2111      	movs	r1, #17
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa1e 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a65a:	69fb      	ldr	r3, [r7, #28]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3720      	adds	r7, #32
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a672:	2312      	movs	r3, #18
 800a674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a676:	2340      	movs	r3, #64	; 0x40
 800a678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a67a:	2300      	movs	r3, #0
 800a67c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a682:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a684:	f107 0308 	add.w	r3, r7, #8
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff ff30 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a690:	f241 3288 	movw	r2, #5000	; 0x1388
 800a694:	2112      	movs	r1, #18
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f9fc 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a69c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a69e:	69fb      	ldr	r3, [r7, #28]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3720      	adds	r7, #32
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b088      	sub	sp, #32
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a6b6:	2318      	movs	r3, #24
 800a6b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6ba:	2340      	movs	r3, #64	; 0x40
 800a6bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6c8:	f107 0308 	add.w	r3, r7, #8
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7ff ff0e 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6d8:	2118      	movs	r1, #24
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f9da 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a6e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6e2:	69fb      	ldr	r3, [r7, #28]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3720      	adds	r7, #32
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a6fa:	2319      	movs	r3, #25
 800a6fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6fe:	2340      	movs	r3, #64	; 0x40
 800a700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a702:	2300      	movs	r3, #0
 800a704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a70a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a70c:	f107 0308 	add.w	r3, r7, #8
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7ff feec 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a718:	f241 3288 	movw	r2, #5000	; 0x1388
 800a71c:	2119      	movs	r1, #25
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f9b8 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a726:	69fb      	ldr	r3, [r7, #28]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3720      	adds	r7, #32
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a73c:	230c      	movs	r3, #12
 800a73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a740:	2340      	movs	r3, #64	; 0x40
 800a742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a744:	2300      	movs	r3, #0
 800a746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a74c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a74e:	f107 0308 	add.w	r3, r7, #8
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff fecb 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a75a:	4a05      	ldr	r2, [pc, #20]	; (800a770 <SDMMC_CmdStopTransfer+0x40>)
 800a75c:	210c      	movs	r1, #12
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f998 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a766:	69fb      	ldr	r3, [r7, #28]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3720      	adds	r7, #32
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	05f5e100 	.word	0x05f5e100

0800a774 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08a      	sub	sp, #40	; 0x28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a784:	2307      	movs	r3, #7
 800a786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a788:	2340      	movs	r3, #64	; 0x40
 800a78a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a794:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a796:	f107 0310 	add.w	r3, r7, #16
 800a79a:	4619      	mov	r1, r3
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff fea7 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a7a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a6:	2107      	movs	r1, #7
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 f973 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a7ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3728      	adds	r7, #40	; 0x28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b088      	sub	sp, #32
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7d8:	f107 0308 	add.w	r3, r7, #8
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fe86 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f92d 	bl	800aa44 <SDMMC_GetCmdError>
 800a7ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3720      	adds	r7, #32
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b088      	sub	sp, #32
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a7fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a804:	2308      	movs	r3, #8
 800a806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a808:	2340      	movs	r3, #64	; 0x40
 800a80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a80c:	2300      	movs	r3, #0
 800a80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a814:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a816:	f107 0308 	add.w	r3, r7, #8
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff fe67 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fb16 	bl	800ae54 <SDMMC_GetCmdResp7>
 800a828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a82a:	69fb      	ldr	r3, [r7, #28]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3720      	adds	r7, #32
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b088      	sub	sp, #32
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a842:	2337      	movs	r3, #55	; 0x37
 800a844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a846:	2340      	movs	r3, #64	; 0x40
 800a848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a84a:	2300      	movs	r3, #0
 800a84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff fe48 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a860:	f241 3288 	movw	r2, #5000	; 0x1388
 800a864:	2137      	movs	r1, #55	; 0x37
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f914 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a86c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a86e:	69fb      	ldr	r3, [r7, #28]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3720      	adds	r7, #32
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a88c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a88e:	2329      	movs	r3, #41	; 0x29
 800a890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a892:	2340      	movs	r3, #64	; 0x40
 800a894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a896:	2300      	movs	r3, #0
 800a898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a89e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8a0:	f107 0308 	add.w	r3, r7, #8
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fe22 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fa23 	bl	800acf8 <SDMMC_GetCmdResp3>
 800a8b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8b4:	69fb      	ldr	r3, [r7, #28]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3720      	adds	r7, #32
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b088      	sub	sp, #32
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a8cc:	2306      	movs	r3, #6
 800a8ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8d0:	2340      	movs	r3, #64	; 0x40
 800a8d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8de:	f107 0308 	add.w	r3, r7, #8
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff fe03 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a8ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ee:	2106      	movs	r1, #6
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f8cf 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a8f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8f8:	69fb      	ldr	r3, [r7, #28]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3720      	adds	r7, #32
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b088      	sub	sp, #32
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a90e:	2333      	movs	r3, #51	; 0x33
 800a910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a912:	2340      	movs	r3, #64	; 0x40
 800a914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a91a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a91e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a920:	f107 0308 	add.w	r3, r7, #8
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff fde2 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a930:	2133      	movs	r1, #51	; 0x33
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f8ae 	bl	800aa94 <SDMMC_GetCmdResp1>
 800a938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a93a:	69fb      	ldr	r3, [r7, #28]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a950:	2302      	movs	r3, #2
 800a952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a954:	23c0      	movs	r3, #192	; 0xc0
 800a956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a958:	2300      	movs	r3, #0
 800a95a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a960:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a962:	f107 0308 	add.w	r3, r7, #8
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff fdc1 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f97c 	bl	800ac6c <SDMMC_GetCmdResp2>
 800a974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a976:	69fb      	ldr	r3, [r7, #28]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3720      	adds	r7, #32
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a98e:	2309      	movs	r3, #9
 800a990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a992:	23c0      	movs	r3, #192	; 0xc0
 800a994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a996:	2300      	movs	r3, #0
 800a998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a99a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a99e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9a0:	f107 0308 	add.w	r3, r7, #8
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff fda2 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f95d 	bl	800ac6c <SDMMC_GetCmdResp2>
 800a9b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9b4:	69fb      	ldr	r3, [r7, #28]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3720      	adds	r7, #32
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b088      	sub	sp, #32
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9d0:	2340      	movs	r3, #64	; 0x40
 800a9d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9de:	f107 0308 	add.w	r3, r7, #8
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff fd83 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	2103      	movs	r1, #3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f9bc 	bl	800ad6c <SDMMC_GetCmdResp6>
 800a9f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9f6:	69fb      	ldr	r3, [r7, #28]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3720      	adds	r7, #32
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aa0e:	230d      	movs	r3, #13
 800aa10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa12:	2340      	movs	r3, #64	; 0x40
 800aa14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa16:	2300      	movs	r3, #0
 800aa18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa20:	f107 0308 	add.w	r3, r7, #8
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff fd62 	bl	800a4f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800aa2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa30:	210d      	movs	r1, #13
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f82e 	bl	800aa94 <SDMMC_GetCmdResp1>
 800aa38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa3a:	69fb      	ldr	r3, [r7, #28]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3720      	adds	r7, #32
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800aa44:	b490      	push	{r4, r7}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa4c:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <SDMMC_GetCmdError+0x48>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a0f      	ldr	r2, [pc, #60]	; (800aa90 <SDMMC_GetCmdError+0x4c>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	0a5b      	lsrs	r3, r3, #9
 800aa58:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aa60:	4623      	mov	r3, r4
 800aa62:	1e5c      	subs	r4, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d102      	bne.n	800aa6e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa6c:	e009      	b.n	800aa82 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0f2      	beq.n	800aa60 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	22c5      	movs	r2, #197	; 0xc5
 800aa7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bc90      	pop	{r4, r7}
 800aa8a:	4770      	bx	lr
 800aa8c:	20000000 	.word	0x20000000
 800aa90:	10624dd3 	.word	0x10624dd3

0800aa94 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aa94:	b590      	push	{r4, r7, lr}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aaa2:	4b6f      	ldr	r3, [pc, #444]	; (800ac60 <SDMMC_GetCmdResp1+0x1cc>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a6f      	ldr	r2, [pc, #444]	; (800ac64 <SDMMC_GetCmdResp1+0x1d0>)
 800aaa8:	fba2 2303 	umull	r2, r3, r2, r3
 800aaac:	0a5b      	lsrs	r3, r3, #9
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aab4:	4623      	mov	r3, r4
 800aab6:	1e5c      	subs	r4, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d102      	bne.n	800aac2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aabc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aac0:	e0c9      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0f0      	beq.n	800aab4 <SDMMC_GetCmdResp1+0x20>
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1eb      	bne.n	800aab4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae0:	f003 0304 	and.w	r3, r3, #4
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d004      	beq.n	800aaf2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2204      	movs	r2, #4
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aaee:	2304      	movs	r3, #4
 800aaf0:	e0b1      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2201      	movs	r2, #1
 800ab02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e0a6      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	22c5      	movs	r2, #197	; 0xc5
 800ab0c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7ff fd18 	bl	800a544 <SDIO_GetCommandResponse>
 800ab14:	4603      	mov	r3, r0
 800ab16:	461a      	mov	r2, r3
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d001      	beq.n	800ab22 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e099      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab22:	2100      	movs	r1, #0
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f7ff fd1a 	bl	800a55e <SDIO_GetResponse>
 800ab2a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	4b4e      	ldr	r3, [pc, #312]	; (800ac68 <SDMMC_GetCmdResp1+0x1d4>)
 800ab30:	4013      	ands	r3, r2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ab36:	2300      	movs	r3, #0
 800ab38:	e08d      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	da02      	bge.n	800ab46 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ab40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab44:	e087      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ab50:	2340      	movs	r3, #64	; 0x40
 800ab52:	e080      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ab5e:	2380      	movs	r3, #128	; 0x80
 800ab60:	e079      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ab6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab70:	e071      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ab7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab80:	e069      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ab8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab90:	e061      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aba0:	e059      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abb0:	e051      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800abbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abc0:	e049      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800abcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800abd0:	e041      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800abdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abe0:	e039      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800abec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800abf0:	e031      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800abfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac00:	e029      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac10:	e021      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac20:	e019      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ac2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac30:	e011      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ac3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac40:	e009      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f003 0308 	and.w	r3, r3, #8
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ac4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ac50:	e001      	b.n	800ac56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd90      	pop	{r4, r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	20000000 	.word	0x20000000
 800ac64:	10624dd3 	.word	0x10624dd3
 800ac68:	fdffe008 	.word	0xfdffe008

0800ac6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ac6c:	b490      	push	{r4, r7}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac74:	4b1e      	ldr	r3, [pc, #120]	; (800acf0 <SDMMC_GetCmdResp2+0x84>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a1e      	ldr	r2, [pc, #120]	; (800acf4 <SDMMC_GetCmdResp2+0x88>)
 800ac7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac7e:	0a5b      	lsrs	r3, r3, #9
 800ac80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ac88:	4623      	mov	r3, r4
 800ac8a:	1e5c      	subs	r4, r3, #1
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d102      	bne.n	800ac96 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac94:	e026      	b.n	800ace4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0f0      	beq.n	800ac88 <SDMMC_GetCmdResp2+0x1c>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1eb      	bne.n	800ac88 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d004      	beq.n	800acc6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2204      	movs	r2, #4
 800acc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acc2:	2304      	movs	r3, #4
 800acc4:	e00e      	b.n	800ace4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d004      	beq.n	800acdc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acd8:	2301      	movs	r3, #1
 800acda:	e003      	b.n	800ace4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	22c5      	movs	r2, #197	; 0xc5
 800ace0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bc90      	pop	{r4, r7}
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	20000000 	.word	0x20000000
 800acf4:	10624dd3 	.word	0x10624dd3

0800acf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800acf8:	b490      	push	{r4, r7}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad00:	4b18      	ldr	r3, [pc, #96]	; (800ad64 <SDMMC_GetCmdResp3+0x6c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a18      	ldr	r2, [pc, #96]	; (800ad68 <SDMMC_GetCmdResp3+0x70>)
 800ad06:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0a:	0a5b      	lsrs	r3, r3, #9
 800ad0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ad14:	4623      	mov	r3, r4
 800ad16:	1e5c      	subs	r4, r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad20:	e01b      	b.n	800ad5a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0f0      	beq.n	800ad14 <SDMMC_GetCmdResp3+0x1c>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1eb      	bne.n	800ad14 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad40:	f003 0304 	and.w	r3, r3, #4
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d004      	beq.n	800ad52 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2204      	movs	r2, #4
 800ad4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad4e:	2304      	movs	r3, #4
 800ad50:	e003      	b.n	800ad5a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	22c5      	movs	r2, #197	; 0xc5
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bc90      	pop	{r4, r7}
 800ad62:	4770      	bx	lr
 800ad64:	20000000 	.word	0x20000000
 800ad68:	10624dd3 	.word	0x10624dd3

0800ad6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ad6c:	b590      	push	{r4, r7, lr}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	460b      	mov	r3, r1
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad7a:	4b34      	ldr	r3, [pc, #208]	; (800ae4c <SDMMC_GetCmdResp6+0xe0>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a34      	ldr	r2, [pc, #208]	; (800ae50 <SDMMC_GetCmdResp6+0xe4>)
 800ad80:	fba2 2303 	umull	r2, r3, r2, r3
 800ad84:	0a5b      	lsrs	r3, r3, #9
 800ad86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad8a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ad8e:	4623      	mov	r3, r4
 800ad90:	1e5c      	subs	r4, r3, #1
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d102      	bne.n	800ad9c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad9a:	e052      	b.n	800ae42 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0f0      	beq.n	800ad8e <SDMMC_GetCmdResp6+0x22>
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1eb      	bne.n	800ad8e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d004      	beq.n	800adcc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2204      	movs	r2, #4
 800adc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adc8:	2304      	movs	r3, #4
 800adca:	e03a      	b.n	800ae42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d004      	beq.n	800ade2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adde:	2301      	movs	r3, #1
 800ade0:	e02f      	b.n	800ae42 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff fbae 	bl	800a544 <SDIO_GetCommandResponse>
 800ade8:	4603      	mov	r3, r0
 800adea:	461a      	mov	r2, r3
 800adec:	7afb      	ldrb	r3, [r7, #11]
 800adee:	4293      	cmp	r3, r2
 800adf0:	d001      	beq.n	800adf6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e025      	b.n	800ae42 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	22c5      	movs	r2, #197	; 0xc5
 800adfa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800adfc:	2100      	movs	r1, #0
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f7ff fbad 	bl	800a55e <SDIO_GetResponse>
 800ae04:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d106      	bne.n	800ae1e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	0c1b      	lsrs	r3, r3, #16
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	e011      	b.n	800ae42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae2c:	e009      	b.n	800ae42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae3c:	e001      	b.n	800ae42 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd90      	pop	{r4, r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20000000 	.word	0x20000000
 800ae50:	10624dd3 	.word	0x10624dd3

0800ae54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ae54:	b490      	push	{r4, r7}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae5c:	4b21      	ldr	r3, [pc, #132]	; (800aee4 <SDMMC_GetCmdResp7+0x90>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a21      	ldr	r2, [pc, #132]	; (800aee8 <SDMMC_GetCmdResp7+0x94>)
 800ae62:	fba2 2303 	umull	r2, r3, r2, r3
 800ae66:	0a5b      	lsrs	r3, r3, #9
 800ae68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ae70:	4623      	mov	r3, r4
 800ae72:	1e5c      	subs	r4, r3, #1
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae7c:	e02c      	b.n	800aed8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0f0      	beq.n	800ae70 <SDMMC_GetCmdResp7+0x1c>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1eb      	bne.n	800ae70 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9c:	f003 0304 	and.w	r3, r3, #4
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d004      	beq.n	800aeae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2204      	movs	r2, #4
 800aea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aeaa:	2304      	movs	r3, #4
 800aeac:	e014      	b.n	800aed8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d004      	beq.n	800aec4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e009      	b.n	800aed8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2240      	movs	r2, #64	; 0x40
 800aed4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aed6:	2300      	movs	r3, #0
  
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc90      	pop	{r4, r7}
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	20000000 	.word	0x20000000
 800aee8:	10624dd3 	.word	0x10624dd3

0800aeec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aef0:	4904      	ldr	r1, [pc, #16]	; (800af04 <MX_FATFS_Init+0x18>)
 800aef2:	4805      	ldr	r0, [pc, #20]	; (800af08 <MX_FATFS_Init+0x1c>)
 800aef4:	f004 f874 	bl	800efe0 <FATFS_LinkDriver>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	4b03      	ldr	r3, [pc, #12]	; (800af0c <MX_FATFS_Init+0x20>)
 800aefe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af00:	bf00      	nop
 800af02:	bd80      	pop	{r7, pc}
 800af04:	20003028 	.word	0x20003028
 800af08:	080140ac 	.word	0x080140ac
 800af0c:	20003024 	.word	0x20003024

0800af10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af10:	b480      	push	{r7}
 800af12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af16:	4618      	mov	r0, r3
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af2a:	f000 f896 	bl	800b05a <BSP_SD_IsDetected>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b01      	cmp	r3, #1
 800af32:	d001      	beq.n	800af38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e012      	b.n	800af5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800af38:	480b      	ldr	r0, [pc, #44]	; (800af68 <BSP_SD_Init+0x48>)
 800af3a:	f7fb ff9d 	bl	8006e78 <HAL_SD_Init>
 800af3e:	4603      	mov	r3, r0
 800af40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d109      	bne.n	800af5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800af48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800af4c:	4806      	ldr	r0, [pc, #24]	; (800af68 <BSP_SD_Init+0x48>)
 800af4e:	f7fc fd47 	bl	80079e0 <HAL_SD_ConfigWideBusOperation>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800af5c:	79fb      	ldrb	r3, [r7, #7]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20002eb8 	.word	0x20002eb8

0800af6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	68f9      	ldr	r1, [r7, #12]
 800af82:	4806      	ldr	r0, [pc, #24]	; (800af9c <BSP_SD_ReadBlocks_DMA+0x30>)
 800af84:	f7fc f808 	bl	8006f98 <HAL_SD_ReadBlocks_DMA>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af92:	7dfb      	ldrb	r3, [r7, #23]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20002eb8 	.word	0x20002eb8

0800afa0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	68f9      	ldr	r1, [r7, #12]
 800afb6:	4806      	ldr	r0, [pc, #24]	; (800afd0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800afb8:	f7fc f8d6 	bl	8007168 <HAL_SD_WriteBlocks_DMA>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	20002eb8 	.word	0x20002eb8

0800afd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afd8:	4805      	ldr	r0, [pc, #20]	; (800aff0 <BSP_SD_GetCardState+0x1c>)
 800afda:	f7fc fd7d 	bl	8007ad8 <HAL_SD_GetCardState>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	bf14      	ite	ne
 800afe4:	2301      	movne	r3, #1
 800afe6:	2300      	moveq	r3, #0
 800afe8:	b2db      	uxtb	r3, r3
}
 800afea:	4618      	mov	r0, r3
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20002eb8 	.word	0x20002eb8

0800aff4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4803      	ldr	r0, [pc, #12]	; (800b00c <BSP_SD_GetCardInfo+0x18>)
 800b000:	f7fc fcc2 	bl	8007988 <HAL_SD_GetCardInfo>
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	20002eb8 	.word	0x20002eb8

0800b010 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b018:	f000 f818 	bl	800b04c <BSP_SD_AbortCallback>
}
 800b01c:	bf00      	nop
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b02c:	f000 f9a8 	bl	800b380 <BSP_SD_WriteCpltCallback>
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b040:	f000 f9aa 	bl	800b398 <BSP_SD_ReadCpltCallback>
}
 800b044:	bf00      	nop
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0

}
 800b050:	bf00      	nop
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b060:	2301      	movs	r3, #1
 800b062:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b064:	f000 f80c 	bl	800b080 <BSP_PlatformIsDetected>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b06e:	2300      	movs	r3, #0
 800b070:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	b2db      	uxtb	r3, r3
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b086:	2301      	movs	r3, #1
 800b088:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b08a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b08e:	4806      	ldr	r0, [pc, #24]	; (800b0a8 <BSP_PlatformIsDetected+0x28>)
 800b090:	f7fa fba8 	bl	80057e4 <HAL_GPIO_ReadPin>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b09a:	2300      	movs	r3, #0
 800b09c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b09e:	79fb      	ldrb	r3, [r7, #7]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	40020000 	.word	0x40020000

0800b0ac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b0b4:	f7f9 f90c 	bl	80042d0 <HAL_GetTick>
 800b0b8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b0ba:	e006      	b.n	800b0ca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0bc:	f7ff ff8a 	bl	800afd4 <BSP_SD_GetCardState>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	e009      	b.n	800b0de <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b0ca:	f7f9 f901 	bl	80042d0 <HAL_GetTick>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d8f0      	bhi.n	800b0bc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b0da:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
	...

0800b0e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0f2:	4b0b      	ldr	r3, [pc, #44]	; (800b120 <SD_CheckStatus+0x38>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b0f8:	f7ff ff6c 	bl	800afd4 <BSP_SD_GetCardState>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d107      	bne.n	800b112 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b102:	4b07      	ldr	r3, [pc, #28]	; (800b120 <SD_CheckStatus+0x38>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	b2db      	uxtb	r3, r3
 800b108:	f023 0301 	bic.w	r3, r3, #1
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	4b04      	ldr	r3, [pc, #16]	; (800b120 <SD_CheckStatus+0x38>)
 800b110:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b112:	4b03      	ldr	r3, [pc, #12]	; (800b120 <SD_CheckStatus+0x38>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b2db      	uxtb	r3, r3
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20000009 	.word	0x20000009

0800b124 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b12e:	f7ff fef7 	bl	800af20 <BSP_SD_Init>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d107      	bne.n	800b148 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7ff ffd4 	bl	800b0e8 <SD_CheckStatus>
 800b140:	4603      	mov	r3, r0
 800b142:	461a      	mov	r2, r3
 800b144:	4b04      	ldr	r3, [pc, #16]	; (800b158 <SD_initialize+0x34>)
 800b146:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b148:	4b03      	ldr	r3, [pc, #12]	; (800b158 <SD_initialize+0x34>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	b2db      	uxtb	r3, r3
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20000009 	.word	0x20000009

0800b15c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff ffbd 	bl	800b0e8 <SD_CheckStatus>
 800b16e:	4603      	mov	r3, r0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60b9      	str	r1, [r7, #8]
 800b180:	607a      	str	r2, [r7, #4]
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b18c:	f247 5030 	movw	r0, #30000	; 0x7530
 800b190:	f7ff ff8c 	bl	800b0ac <SD_CheckStatusWithTimeout>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	da01      	bge.n	800b19e <SD_read+0x26>
  {
    return res;
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	e03b      	b.n	800b216 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	68b8      	ldr	r0, [r7, #8]
 800b1a4:	f7ff fee2 	bl	800af6c <BSP_SD_ReadBlocks_DMA>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d132      	bne.n	800b214 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b1ae:	4b1c      	ldr	r3, [pc, #112]	; (800b220 <SD_read+0xa8>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b1b4:	f7f9 f88c 	bl	80042d0 <HAL_GetTick>
 800b1b8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b1ba:	bf00      	nop
 800b1bc:	4b18      	ldr	r3, [pc, #96]	; (800b220 <SD_read+0xa8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d108      	bne.n	800b1d6 <SD_read+0x5e>
 800b1c4:	f7f9 f884 	bl	80042d0 <HAL_GetTick>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	f247 522f 	movw	r2, #29999	; 0x752f
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d9f2      	bls.n	800b1bc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800b1d6:	4b12      	ldr	r3, [pc, #72]	; (800b220 <SD_read+0xa8>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d102      	bne.n	800b1e4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	75fb      	strb	r3, [r7, #23]
 800b1e2:	e017      	b.n	800b214 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b1e4:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <SD_read+0xa8>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b1ea:	f7f9 f871 	bl	80042d0 <HAL_GetTick>
 800b1ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1f0:	e007      	b.n	800b202 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1f2:	f7ff feef 	bl	800afd4 <BSP_SD_GetCardState>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d102      	bne.n	800b202 <SD_read+0x8a>
          {
            res = RES_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b200:	e008      	b.n	800b214 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b202:	f7f9 f865 	bl	80042d0 <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b210:	4293      	cmp	r3, r2
 800b212:	d9ee      	bls.n	800b1f2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	2000057c 	.word	0x2000057c

0800b224 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	4603      	mov	r3, r0
 800b232:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b238:	4b24      	ldr	r3, [pc, #144]	; (800b2cc <SD_write+0xa8>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b23e:	f247 5030 	movw	r0, #30000	; 0x7530
 800b242:	f7ff ff33 	bl	800b0ac <SD_CheckStatusWithTimeout>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	da01      	bge.n	800b250 <SD_write+0x2c>
  {
    return res;
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
 800b24e:	e038      	b.n	800b2c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	68b8      	ldr	r0, [r7, #8]
 800b256:	f7ff fea3 	bl	800afa0 <BSP_SD_WriteBlocks_DMA>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d12f      	bne.n	800b2c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b260:	f7f9 f836 	bl	80042d0 <HAL_GetTick>
 800b264:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b266:	bf00      	nop
 800b268:	4b18      	ldr	r3, [pc, #96]	; (800b2cc <SD_write+0xa8>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d108      	bne.n	800b282 <SD_write+0x5e>
 800b270:	f7f9 f82e 	bl	80042d0 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	f247 522f 	movw	r2, #29999	; 0x752f
 800b27e:	4293      	cmp	r3, r2
 800b280:	d9f2      	bls.n	800b268 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800b282:	4b12      	ldr	r3, [pc, #72]	; (800b2cc <SD_write+0xa8>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d102      	bne.n	800b290 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	75fb      	strb	r3, [r7, #23]
 800b28e:	e017      	b.n	800b2c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b290:	4b0e      	ldr	r3, [pc, #56]	; (800b2cc <SD_write+0xa8>)
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b296:	f7f9 f81b 	bl	80042d0 <HAL_GetTick>
 800b29a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b29c:	e007      	b.n	800b2ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b29e:	f7ff fe99 	bl	800afd4 <BSP_SD_GetCardState>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d102      	bne.n	800b2ae <SD_write+0x8a>
          {
            res = RES_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	75fb      	strb	r3, [r7, #23]
            break;
 800b2ac:	e008      	b.n	800b2c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b2ae:	f7f9 f80f 	bl	80042d0 <HAL_GetTick>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d9ee      	bls.n	800b29e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20000578 	.word	0x20000578

0800b2d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08c      	sub	sp, #48	; 0x30
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	603a      	str	r2, [r7, #0]
 800b2da:	71fb      	strb	r3, [r7, #7]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2e6:	4b25      	ldr	r3, [pc, #148]	; (800b37c <SD_ioctl+0xac>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <SD_ioctl+0x28>
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e03c      	b.n	800b372 <SD_ioctl+0xa2>

  switch (cmd)
 800b2f8:	79bb      	ldrb	r3, [r7, #6]
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d834      	bhi.n	800b368 <SD_ioctl+0x98>
 800b2fe:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <SD_ioctl+0x34>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b315 	.word	0x0800b315
 800b308:	0800b31d 	.word	0x0800b31d
 800b30c:	0800b335 	.word	0x0800b335
 800b310:	0800b34f 	.word	0x0800b34f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b31a:	e028      	b.n	800b36e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	4618      	mov	r0, r3
 800b322:	f7ff fe67 	bl	800aff4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b332:	e01c      	b.n	800b36e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff fe5b 	bl	800aff4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	b29a      	uxth	r2, r3
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b34c:	e00f      	b.n	800b36e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b34e:	f107 030c 	add.w	r3, r7, #12
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff fe4e 	bl	800aff4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	0a5a      	lsrs	r2, r3, #9
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b366:	e002      	b.n	800b36e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b368:	2304      	movs	r3, #4
 800b36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b36e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b372:	4618      	mov	r0, r3
 800b374:	3730      	adds	r7, #48	; 0x30
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000009 	.word	0x20000009

0800b380 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b380:	b480      	push	{r7}
 800b382:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b384:	4b03      	ldr	r3, [pc, #12]	; (800b394 <BSP_SD_WriteCpltCallback+0x14>)
 800b386:	2201      	movs	r2, #1
 800b388:	601a      	str	r2, [r3, #0]
}
 800b38a:	bf00      	nop
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	20000578 	.word	0x20000578

0800b398 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b39c:	4b03      	ldr	r3, [pc, #12]	; (800b3ac <BSP_SD_ReadCpltCallback+0x14>)
 800b39e:	2201      	movs	r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]
}
 800b3a2:	bf00      	nop
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	2000057c 	.word	0x2000057c

0800b3b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	4a08      	ldr	r2, [pc, #32]	; (800b3e0 <disk_status+0x30>)
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	79fa      	ldrb	r2, [r7, #7]
 800b3c8:	4905      	ldr	r1, [pc, #20]	; (800b3e0 <disk_status+0x30>)
 800b3ca:	440a      	add	r2, r1
 800b3cc:	7a12      	ldrb	r2, [r2, #8]
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	4798      	blx	r3
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	200007a8 	.word	0x200007a8

0800b3e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	4a0d      	ldr	r2, [pc, #52]	; (800b42c <disk_initialize+0x48>)
 800b3f6:	5cd3      	ldrb	r3, [r2, r3]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d111      	bne.n	800b420 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	4a0b      	ldr	r2, [pc, #44]	; (800b42c <disk_initialize+0x48>)
 800b400:	2101      	movs	r1, #1
 800b402:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	4a09      	ldr	r2, [pc, #36]	; (800b42c <disk_initialize+0x48>)
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	79fa      	ldrb	r2, [r7, #7]
 800b412:	4906      	ldr	r1, [pc, #24]	; (800b42c <disk_initialize+0x48>)
 800b414:	440a      	add	r2, r1
 800b416:	7a12      	ldrb	r2, [r2, #8]
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	4603      	mov	r3, r0
 800b41e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b420:	7bfb      	ldrb	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	200007a8 	.word	0x200007a8

0800b430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b430:	b590      	push	{r4, r7, lr}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60b9      	str	r1, [r7, #8]
 800b438:	607a      	str	r2, [r7, #4]
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	4a0a      	ldr	r2, [pc, #40]	; (800b46c <disk_read+0x3c>)
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	689c      	ldr	r4, [r3, #8]
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	4a07      	ldr	r2, [pc, #28]	; (800b46c <disk_read+0x3c>)
 800b450:	4413      	add	r3, r2
 800b452:	7a18      	ldrb	r0, [r3, #8]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	68b9      	ldr	r1, [r7, #8]
 800b45a:	47a0      	blx	r4
 800b45c:	4603      	mov	r3, r0
 800b45e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b460:	7dfb      	ldrb	r3, [r7, #23]
}
 800b462:	4618      	mov	r0, r3
 800b464:	371c      	adds	r7, #28
 800b466:	46bd      	mov	sp, r7
 800b468:	bd90      	pop	{r4, r7, pc}
 800b46a:	bf00      	nop
 800b46c:	200007a8 	.word	0x200007a8

0800b470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b470:	b590      	push	{r4, r7, lr}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	607a      	str	r2, [r7, #4]
 800b47a:	603b      	str	r3, [r7, #0]
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <disk_write+0x3c>)
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	68dc      	ldr	r4, [r3, #12]
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	4a07      	ldr	r2, [pc, #28]	; (800b4ac <disk_write+0x3c>)
 800b490:	4413      	add	r3, r2
 800b492:	7a18      	ldrb	r0, [r3, #8]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	47a0      	blx	r4
 800b49c:	4603      	mov	r3, r0
 800b49e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd90      	pop	{r4, r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	200007a8 	.word	0x200007a8

0800b4b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	603a      	str	r2, [r7, #0]
 800b4ba:	71fb      	strb	r3, [r7, #7]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	4a09      	ldr	r2, [pc, #36]	; (800b4e8 <disk_ioctl+0x38>)
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	79fa      	ldrb	r2, [r7, #7]
 800b4ce:	4906      	ldr	r1, [pc, #24]	; (800b4e8 <disk_ioctl+0x38>)
 800b4d0:	440a      	add	r2, r1
 800b4d2:	7a10      	ldrb	r0, [r2, #8]
 800b4d4:	79b9      	ldrb	r1, [r7, #6]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	4798      	blx	r3
 800b4da:	4603      	mov	r3, r0
 800b4dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	200007a8 	.word	0x200007a8

0800b4ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b4fc:	89fb      	ldrh	r3, [r7, #14]
 800b4fe:	021b      	lsls	r3, r3, #8
 800b500:	b21a      	sxth	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	b21b      	sxth	r3, r3
 800b508:	4313      	orrs	r3, r2
 800b50a:	b21b      	sxth	r3, r3
 800b50c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b50e:	89fb      	ldrh	r3, [r7, #14]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3303      	adds	r3, #3
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	021b      	lsls	r3, r3, #8
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	3202      	adds	r2, #2
 800b534:	7812      	ldrb	r2, [r2, #0]
 800b536:	4313      	orrs	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	021b      	lsls	r3, r3, #8
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	3201      	adds	r2, #1
 800b542:	7812      	ldrb	r2, [r2, #0]
 800b544:	4313      	orrs	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	021b      	lsls	r3, r3, #8
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	7812      	ldrb	r2, [r2, #0]
 800b550:	4313      	orrs	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
	return rv;
 800b554:	68fb      	ldr	r3, [r7, #12]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b562:	b480      	push	{r7}
 800b564:	b083      	sub	sp, #12
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	460b      	mov	r3, r1
 800b56c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	887a      	ldrh	r2, [r7, #2]
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	887b      	ldrh	r3, [r7, #2]
 800b57c:	0a1b      	lsrs	r3, r3, #8
 800b57e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	607a      	str	r2, [r7, #4]
 800b586:	887a      	ldrh	r2, [r7, #2]
 800b588:	b2d2      	uxtb	r2, r2
 800b58a:	701a      	strb	r2, [r3, #0]
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	b2d2      	uxtb	r2, r2
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	0a1b      	lsrs	r3, r3, #8
 800b5b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	607a      	str	r2, [r7, #4]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	b2d2      	uxtb	r2, r2
 800b5be:	701a      	strb	r2, [r3, #0]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	b2d2      	uxtb	r2, r2
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	0a1b      	lsrs	r3, r3, #8
 800b5d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	607a      	str	r2, [r7, #4]
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	b2d2      	uxtb	r2, r2
 800b5e2:	701a      	strb	r2, [r3, #0]
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00d      	beq.n	800b626 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	1c53      	adds	r3, r2, #1
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	1c59      	adds	r1, r3, #1
 800b614:	6179      	str	r1, [r7, #20]
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	607b      	str	r3, [r7, #4]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1f1      	bne.n	800b60a <mem_cpy+0x1a>
	}
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b632:	b480      	push	{r7}
 800b634:	b087      	sub	sp, #28
 800b636:	af00      	add	r7, sp, #0
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	60b9      	str	r1, [r7, #8]
 800b63c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	617a      	str	r2, [r7, #20]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	3b01      	subs	r3, #1
 800b652:	607b      	str	r3, [r7, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1f3      	bne.n	800b642 <mem_set+0x10>
}
 800b65a:	bf00      	nop
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b666:	b480      	push	{r7}
 800b668:	b089      	sub	sp, #36	; 0x24
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	60f8      	str	r0, [r7, #12]
 800b66e:	60b9      	str	r1, [r7, #8]
 800b670:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	61fb      	str	r3, [r7, #28]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	61fa      	str	r2, [r7, #28]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	4619      	mov	r1, r3
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	61ba      	str	r2, [r7, #24]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	1acb      	subs	r3, r1, r3
 800b692:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3b01      	subs	r3, #1
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <mem_cmp+0x40>
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0eb      	beq.n	800b67e <mem_cmp+0x18>

	return r;
 800b6a6:	697b      	ldr	r3, [r7, #20]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3724      	adds	r7, #36	; 0x24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b6be:	e002      	b.n	800b6c6 <chk_chr+0x12>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	607b      	str	r3, [r7, #4]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <chk_chr+0x26>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d1f2      	bne.n	800b6c0 <chk_chr+0xc>
	return *str;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
	...

0800b6ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60bb      	str	r3, [r7, #8]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	60fb      	str	r3, [r7, #12]
 800b6fe:	e029      	b.n	800b754 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b700:	4a27      	ldr	r2, [pc, #156]	; (800b7a0 <chk_lock+0xb4>)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	011b      	lsls	r3, r3, #4
 800b706:	4413      	add	r3, r2
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d01d      	beq.n	800b74a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b70e:	4a24      	ldr	r2, [pc, #144]	; (800b7a0 <chk_lock+0xb4>)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	4413      	add	r3, r2
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d116      	bne.n	800b74e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b720:	4a1f      	ldr	r2, [pc, #124]	; (800b7a0 <chk_lock+0xb4>)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	011b      	lsls	r3, r3, #4
 800b726:	4413      	add	r3, r2
 800b728:	3304      	adds	r3, #4
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b730:	429a      	cmp	r2, r3
 800b732:	d10c      	bne.n	800b74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b734:	4a1a      	ldr	r2, [pc, #104]	; (800b7a0 <chk_lock+0xb4>)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	011b      	lsls	r3, r3, #4
 800b73a:	4413      	add	r3, r2
 800b73c:	3308      	adds	r3, #8
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b744:	429a      	cmp	r2, r3
 800b746:	d102      	bne.n	800b74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b748:	e007      	b.n	800b75a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b74a:	2301      	movs	r3, #1
 800b74c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3301      	adds	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d9d2      	bls.n	800b700 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d109      	bne.n	800b774 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d102      	bne.n	800b76c <chk_lock+0x80>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d101      	bne.n	800b770 <chk_lock+0x84>
 800b76c:	2300      	movs	r3, #0
 800b76e:	e010      	b.n	800b792 <chk_lock+0xa6>
 800b770:	2312      	movs	r3, #18
 800b772:	e00e      	b.n	800b792 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d108      	bne.n	800b78c <chk_lock+0xa0>
 800b77a:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <chk_lock+0xb4>)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	011b      	lsls	r3, r3, #4
 800b780:	4413      	add	r3, r2
 800b782:	330c      	adds	r3, #12
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b78a:	d101      	bne.n	800b790 <chk_lock+0xa4>
 800b78c:	2310      	movs	r3, #16
 800b78e:	e000      	b.n	800b792 <chk_lock+0xa6>
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	20000588 	.word	0x20000588

0800b7a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	607b      	str	r3, [r7, #4]
 800b7ae:	e002      	b.n	800b7b6 <enq_lock+0x12>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	607b      	str	r3, [r7, #4]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d806      	bhi.n	800b7ca <enq_lock+0x26>
 800b7bc:	4a09      	ldr	r2, [pc, #36]	; (800b7e4 <enq_lock+0x40>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	4413      	add	r3, r2
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1f2      	bne.n	800b7b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	bf14      	ite	ne
 800b7d0:	2301      	movne	r3, #1
 800b7d2:	2300      	moveq	r3, #0
 800b7d4:	b2db      	uxtb	r3, r3
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	20000588 	.word	0x20000588

0800b7e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	e01f      	b.n	800b838 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b7f8:	4a41      	ldr	r2, [pc, #260]	; (800b900 <inc_lock+0x118>)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	011b      	lsls	r3, r3, #4
 800b7fe:	4413      	add	r3, r2
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	429a      	cmp	r2, r3
 800b808:	d113      	bne.n	800b832 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b80a:	4a3d      	ldr	r2, [pc, #244]	; (800b900 <inc_lock+0x118>)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	4413      	add	r3, r2
 800b812:	3304      	adds	r3, #4
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d109      	bne.n	800b832 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b81e:	4a38      	ldr	r2, [pc, #224]	; (800b900 <inc_lock+0x118>)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	4413      	add	r3, r2
 800b826:	3308      	adds	r3, #8
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b82e:	429a      	cmp	r2, r3
 800b830:	d006      	beq.n	800b840 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d9dc      	bls.n	800b7f8 <inc_lock+0x10>
 800b83e:	e000      	b.n	800b842 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b840:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b02      	cmp	r3, #2
 800b846:	d132      	bne.n	800b8ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b848:	2300      	movs	r3, #0
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	e002      	b.n	800b854 <inc_lock+0x6c>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3301      	adds	r3, #1
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d806      	bhi.n	800b868 <inc_lock+0x80>
 800b85a:	4a29      	ldr	r2, [pc, #164]	; (800b900 <inc_lock+0x118>)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	4413      	add	r3, r2
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1f2      	bne.n	800b84e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d101      	bne.n	800b872 <inc_lock+0x8a>
 800b86e:	2300      	movs	r3, #0
 800b870:	e040      	b.n	800b8f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	4922      	ldr	r1, [pc, #136]	; (800b900 <inc_lock+0x118>)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	440b      	add	r3, r1
 800b87e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	689a      	ldr	r2, [r3, #8]
 800b884:	491e      	ldr	r1, [pc, #120]	; (800b900 <inc_lock+0x118>)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	440b      	add	r3, r1
 800b88c:	3304      	adds	r3, #4
 800b88e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	695a      	ldr	r2, [r3, #20]
 800b894:	491a      	ldr	r1, [pc, #104]	; (800b900 <inc_lock+0x118>)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	011b      	lsls	r3, r3, #4
 800b89a:	440b      	add	r3, r1
 800b89c:	3308      	adds	r3, #8
 800b89e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b8a0:	4a17      	ldr	r2, [pc, #92]	; (800b900 <inc_lock+0x118>)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	4413      	add	r3, r2
 800b8a8:	330c      	adds	r3, #12
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d009      	beq.n	800b8c8 <inc_lock+0xe0>
 800b8b4:	4a12      	ldr	r2, [pc, #72]	; (800b900 <inc_lock+0x118>)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	011b      	lsls	r3, r3, #4
 800b8ba:	4413      	add	r3, r2
 800b8bc:	330c      	adds	r3, #12
 800b8be:	881b      	ldrh	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <inc_lock+0xe0>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e015      	b.n	800b8f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d108      	bne.n	800b8e0 <inc_lock+0xf8>
 800b8ce:	4a0c      	ldr	r2, [pc, #48]	; (800b900 <inc_lock+0x118>)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	4413      	add	r3, r2
 800b8d6:	330c      	adds	r3, #12
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	e001      	b.n	800b8e4 <inc_lock+0xfc>
 800b8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8e4:	4906      	ldr	r1, [pc, #24]	; (800b900 <inc_lock+0x118>)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	011b      	lsls	r3, r3, #4
 800b8ea:	440b      	add	r3, r1
 800b8ec:	330c      	adds	r3, #12
 800b8ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3301      	adds	r3, #1
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	20000588 	.word	0x20000588

0800b904 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3b01      	subs	r3, #1
 800b910:	607b      	str	r3, [r7, #4]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d825      	bhi.n	800b964 <dec_lock+0x60>
		n = Files[i].ctr;
 800b918:	4a17      	ldr	r2, [pc, #92]	; (800b978 <dec_lock+0x74>)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	011b      	lsls	r3, r3, #4
 800b91e:	4413      	add	r3, r2
 800b920:	330c      	adds	r3, #12
 800b922:	881b      	ldrh	r3, [r3, #0]
 800b924:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b926:	89fb      	ldrh	r3, [r7, #14]
 800b928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b92c:	d101      	bne.n	800b932 <dec_lock+0x2e>
 800b92e:	2300      	movs	r3, #0
 800b930:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b932:	89fb      	ldrh	r3, [r7, #14]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <dec_lock+0x3a>
 800b938:	89fb      	ldrh	r3, [r7, #14]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b93e:	4a0e      	ldr	r2, [pc, #56]	; (800b978 <dec_lock+0x74>)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	011b      	lsls	r3, r3, #4
 800b944:	4413      	add	r3, r2
 800b946:	330c      	adds	r3, #12
 800b948:	89fa      	ldrh	r2, [r7, #14]
 800b94a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b94c:	89fb      	ldrh	r3, [r7, #14]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <dec_lock+0x5a>
 800b952:	4a09      	ldr	r2, [pc, #36]	; (800b978 <dec_lock+0x74>)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	4413      	add	r3, r2
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	737b      	strb	r3, [r7, #13]
 800b962:	e001      	b.n	800b968 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b964:	2302      	movs	r3, #2
 800b966:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b968:	7b7b      	ldrb	r3, [r7, #13]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	20000588 	.word	0x20000588

0800b97c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	e010      	b.n	800b9ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b98a:	4a0d      	ldr	r2, [pc, #52]	; (800b9c0 <clear_lock+0x44>)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	4413      	add	r3, r2
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	429a      	cmp	r2, r3
 800b998:	d105      	bne.n	800b9a6 <clear_lock+0x2a>
 800b99a:	4a09      	ldr	r2, [pc, #36]	; (800b9c0 <clear_lock+0x44>)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	4413      	add	r3, r2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d9eb      	bls.n	800b98a <clear_lock+0xe>
	}
}
 800b9b2:	bf00      	nop
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	20000588 	.word	0x20000588

0800b9c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	78db      	ldrb	r3, [r3, #3]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d034      	beq.n	800ba42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	7858      	ldrb	r0, [r3, #1]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	f7ff fd40 	bl	800b470 <disk_write>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d002      	beq.n	800b9fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	73fb      	strb	r3, [r7, #15]
 800b9fa:	e022      	b.n	800ba42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	1ad2      	subs	r2, r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d217      	bcs.n	800ba42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	789b      	ldrb	r3, [r3, #2]
 800ba16:	613b      	str	r3, [r7, #16]
 800ba18:	e010      	b.n	800ba3c <sync_window+0x78>
					wsect += fs->fsize;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4413      	add	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	7858      	ldrb	r0, [r3, #1]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba2e:	2301      	movs	r3, #1
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	f7ff fd1d 	bl	800b470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	613b      	str	r3, [r7, #16]
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d8eb      	bhi.n	800ba1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d01b      	beq.n	800ba9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff ffad 	bl	800b9c4 <sync_window>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d113      	bne.n	800ba9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	7858      	ldrb	r0, [r3, #1]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba7e:	2301      	movs	r3, #1
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	f7ff fcd5 	bl	800b430 <disk_read>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d004      	beq.n	800ba96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ba8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff ff87 	bl	800b9c4 <sync_window>
 800bab6:	4603      	mov	r3, r0
 800bab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d159      	bne.n	800bb74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2b03      	cmp	r3, #3
 800bac6:	d149      	bne.n	800bb5c <sync_fs+0xb4>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	791b      	ldrb	r3, [r3, #4]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d145      	bne.n	800bb5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	899b      	ldrh	r3, [r3, #12]
 800bada:	461a      	mov	r2, r3
 800badc:	2100      	movs	r1, #0
 800bade:	f7ff fda8 	bl	800b632 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	333c      	adds	r3, #60	; 0x3c
 800bae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800baea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fd37 	bl	800b562 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	333c      	adds	r3, #60	; 0x3c
 800baf8:	4921      	ldr	r1, [pc, #132]	; (800bb80 <sync_fs+0xd8>)
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff fd4c 	bl	800b598 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	333c      	adds	r3, #60	; 0x3c
 800bb04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb08:	491e      	ldr	r1, [pc, #120]	; (800bb84 <sync_fs+0xdc>)
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fd44 	bl	800b598 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	333c      	adds	r3, #60	; 0x3c
 800bb14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7ff fd3a 	bl	800b598 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	333c      	adds	r3, #60	; 0x3c
 800bb28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f7ff fd30 	bl	800b598 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	7858      	ldrb	r0, [r3, #1]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb50:	2301      	movs	r3, #1
 800bb52:	f7ff fc8d 	bl	800b470 <disk_write>
			fs->fsi_flag = 0;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	785b      	ldrb	r3, [r3, #1]
 800bb60:	2200      	movs	r2, #0
 800bb62:	2100      	movs	r1, #0
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff fca3 	bl	800b4b0 <disk_ioctl>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <sync_fs+0xcc>
 800bb70:	2301      	movs	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	41615252 	.word	0x41615252
 800bb84:	61417272 	.word	0x61417272

0800bb88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	3b02      	subs	r3, #2
 800bb96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a1b      	ldr	r3, [r3, #32]
 800bb9c:	3b02      	subs	r3, #2
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d301      	bcc.n	800bba8 <clust2sect+0x20>
 800bba4:	2300      	movs	r3, #0
 800bba6:	e008      	b.n	800bbba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	895b      	ldrh	r3, [r3, #10]
 800bbac:	461a      	mov	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	fb03 f202 	mul.w	r2, r3, r2
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb8:	4413      	add	r3, r2
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b086      	sub	sp, #24
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d904      	bls.n	800bbe6 <get_fat+0x20>
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	6a1b      	ldr	r3, [r3, #32]
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d302      	bcc.n	800bbec <get_fat+0x26>
		val = 1;	/* Internal error */
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e0b7      	b.n	800bd5c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bbec:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d05a      	beq.n	800bcb0 <get_fat+0xea>
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d07d      	beq.n	800bcfa <get_fat+0x134>
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	f040 80a2 	bne.w	800bd48 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	60fb      	str	r3, [r7, #12]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	085b      	lsrs	r3, r3, #1
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	899b      	ldrh	r3, [r3, #12]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc22:	4413      	add	r3, r2
 800bc24:	4619      	mov	r1, r3
 800bc26:	6938      	ldr	r0, [r7, #16]
 800bc28:	f7ff ff10 	bl	800ba4c <move_window>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f040 808d 	bne.w	800bd4e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	1c5a      	adds	r2, r3, #1
 800bc38:	60fa      	str	r2, [r7, #12]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	8992      	ldrh	r2, [r2, #12]
 800bc3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc42:	fb02 f201 	mul.w	r2, r2, r1
 800bc46:	1a9b      	subs	r3, r3, r2
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	899b      	ldrh	r3, [r3, #12]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc62:	4413      	add	r3, r2
 800bc64:	4619      	mov	r1, r3
 800bc66:	6938      	ldr	r0, [r7, #16]
 800bc68:	f7ff fef0 	bl	800ba4c <move_window>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d16f      	bne.n	800bd52 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	899b      	ldrh	r3, [r3, #12]
 800bc76:	461a      	mov	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc7e:	fb02 f201 	mul.w	r2, r2, r1
 800bc82:	1a9b      	subs	r3, r3, r2
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4413      	add	r3, r2
 800bc88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc8c:	021b      	lsls	r3, r3, #8
 800bc8e:	461a      	mov	r2, r3
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	f003 0301 	and.w	r3, r3, #1
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <get_fat+0xe0>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	091b      	lsrs	r3, r3, #4
 800bca4:	e002      	b.n	800bcac <get_fat+0xe6>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcac:	617b      	str	r3, [r7, #20]
			break;
 800bcae:	e055      	b.n	800bd5c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	899b      	ldrh	r3, [r3, #12]
 800bcb8:	085b      	lsrs	r3, r3, #1
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcc4:	4413      	add	r3, r2
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6938      	ldr	r0, [r7, #16]
 800bcca:	f7ff febf 	bl	800ba4c <move_window>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d140      	bne.n	800bd56 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	8992      	ldrh	r2, [r2, #12]
 800bce2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bce6:	fb02 f200 	mul.w	r2, r2, r0
 800bcea:	1a9b      	subs	r3, r3, r2
 800bcec:	440b      	add	r3, r1
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff fbfc 	bl	800b4ec <ld_word>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	617b      	str	r3, [r7, #20]
			break;
 800bcf8:	e030      	b.n	800bd5c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	899b      	ldrh	r3, [r3, #12]
 800bd02:	089b      	lsrs	r3, r3, #2
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	4619      	mov	r1, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd0e:	4413      	add	r3, r2
 800bd10:	4619      	mov	r1, r3
 800bd12:	6938      	ldr	r0, [r7, #16]
 800bd14:	f7ff fe9a 	bl	800ba4c <move_window>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d11d      	bne.n	800bd5a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	8992      	ldrh	r2, [r2, #12]
 800bd2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd30:	fb02 f200 	mul.w	r2, r2, r0
 800bd34:	1a9b      	subs	r3, r3, r2
 800bd36:	440b      	add	r3, r1
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff fbef 	bl	800b51c <ld_dword>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd44:	617b      	str	r3, [r7, #20]
			break;
 800bd46:	e009      	b.n	800bd5c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bd48:	2301      	movs	r3, #1
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	e006      	b.n	800bd5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd4e:	bf00      	nop
 800bd50:	e004      	b.n	800bd5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd52:	bf00      	nop
 800bd54:	e002      	b.n	800bd5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd56:	bf00      	nop
 800bd58:	e000      	b.n	800bd5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd5a:	bf00      	nop
		}
	}

	return val;
 800bd5c:	697b      	ldr	r3, [r7, #20]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bd66:	b590      	push	{r4, r7, lr}
 800bd68:	b089      	sub	sp, #36	; 0x24
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bd72:	2302      	movs	r3, #2
 800bd74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	f240 8106 	bls.w	800bf8a <put_fat+0x224>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	f080 8100 	bcs.w	800bf8a <put_fat+0x224>
		switch (fs->fs_type) {
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	f000 8088 	beq.w	800bea4 <put_fat+0x13e>
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	f000 80b0 	beq.w	800befa <put_fat+0x194>
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	f040 80f5 	bne.w	800bf8a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	61bb      	str	r3, [r7, #24]
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	085b      	lsrs	r3, r3, #1
 800bda8:	69ba      	ldr	r2, [r7, #24]
 800bdaa:	4413      	add	r3, r2
 800bdac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	899b      	ldrh	r3, [r3, #12]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdbe:	4413      	add	r3, r2
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7ff fe42 	bl	800ba4c <move_window>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdcc:	7ffb      	ldrb	r3, [r7, #31]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f040 80d4 	bne.w	800bf7c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	61ba      	str	r2, [r7, #24]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	8992      	ldrh	r2, [r2, #12]
 800bde4:	fbb3 f0f2 	udiv	r0, r3, r2
 800bde8:	fb02 f200 	mul.w	r2, r2, r0
 800bdec:	1a9b      	subs	r3, r3, r2
 800bdee:	440b      	add	r3, r1
 800bdf0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	f003 0301 	and.w	r3, r3, #1
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00d      	beq.n	800be18 <put_fat+0xb2>
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	b25b      	sxtb	r3, r3
 800be02:	f003 030f 	and.w	r3, r3, #15
 800be06:	b25a      	sxtb	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	011b      	lsls	r3, r3, #4
 800be0e:	b25b      	sxtb	r3, r3
 800be10:	4313      	orrs	r3, r2
 800be12:	b25b      	sxtb	r3, r3
 800be14:	b2db      	uxtb	r3, r3
 800be16:	e001      	b.n	800be1c <put_fat+0xb6>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2201      	movs	r2, #1
 800be24:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	899b      	ldrh	r3, [r3, #12]
 800be2e:	4619      	mov	r1, r3
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	fbb3 f3f1 	udiv	r3, r3, r1
 800be36:	4413      	add	r3, r2
 800be38:	4619      	mov	r1, r3
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff fe06 	bl	800ba4c <move_window>
 800be40:	4603      	mov	r3, r0
 800be42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be44:	7ffb      	ldrb	r3, [r7, #31]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f040 809a 	bne.w	800bf80 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	899b      	ldrh	r3, [r3, #12]
 800be56:	461a      	mov	r2, r3
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800be5e:	fb02 f200 	mul.w	r2, r2, r0
 800be62:	1a9b      	subs	r3, r3, r2
 800be64:	440b      	add	r3, r1
 800be66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <put_fat+0x114>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	091b      	lsrs	r3, r3, #4
 800be76:	b2db      	uxtb	r3, r3
 800be78:	e00e      	b.n	800be98 <put_fat+0x132>
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	b25b      	sxtb	r3, r3
 800be80:	f023 030f 	bic.w	r3, r3, #15
 800be84:	b25a      	sxtb	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	0a1b      	lsrs	r3, r3, #8
 800be8a:	b25b      	sxtb	r3, r3
 800be8c:	f003 030f 	and.w	r3, r3, #15
 800be90:	b25b      	sxtb	r3, r3
 800be92:	4313      	orrs	r3, r2
 800be94:	b25b      	sxtb	r3, r3
 800be96:	b2db      	uxtb	r3, r3
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2201      	movs	r2, #1
 800bea0:	70da      	strb	r2, [r3, #3]
			break;
 800bea2:	e072      	b.n	800bf8a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	899b      	ldrh	r3, [r3, #12]
 800beac:	085b      	lsrs	r3, r3, #1
 800beae:	b29b      	uxth	r3, r3
 800beb0:	4619      	mov	r1, r3
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	fbb3 f3f1 	udiv	r3, r3, r1
 800beb8:	4413      	add	r3, r2
 800beba:	4619      	mov	r1, r3
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7ff fdc5 	bl	800ba4c <move_window>
 800bec2:	4603      	mov	r3, r0
 800bec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bec6:	7ffb      	ldrb	r3, [r7, #31]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d15b      	bne.n	800bf84 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	8992      	ldrh	r2, [r2, #12]
 800beda:	fbb3 f0f2 	udiv	r0, r3, r2
 800bede:	fb02 f200 	mul.w	r2, r2, r0
 800bee2:	1a9b      	subs	r3, r3, r2
 800bee4:	440b      	add	r3, r1
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	b292      	uxth	r2, r2
 800beea:	4611      	mov	r1, r2
 800beec:	4618      	mov	r0, r3
 800beee:	f7ff fb38 	bl	800b562 <st_word>
			fs->wflag = 1;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2201      	movs	r2, #1
 800bef6:	70da      	strb	r2, [r3, #3]
			break;
 800bef8:	e047      	b.n	800bf8a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	899b      	ldrh	r3, [r3, #12]
 800bf02:	089b      	lsrs	r3, r3, #2
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	4619      	mov	r1, r3
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf0e:	4413      	add	r3, r2
 800bf10:	4619      	mov	r1, r3
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff fd9a 	bl	800ba4c <move_window>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf1c:	7ffb      	ldrb	r3, [r7, #31]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d132      	bne.n	800bf88 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	8992      	ldrh	r2, [r2, #12]
 800bf36:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf3a:	fb02 f200 	mul.w	r2, r2, r0
 800bf3e:	1a9b      	subs	r3, r3, r2
 800bf40:	440b      	add	r3, r1
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7ff faea 	bl	800b51c <ld_dword>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bf4e:	4323      	orrs	r3, r4
 800bf50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	8992      	ldrh	r2, [r2, #12]
 800bf60:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf64:	fb02 f200 	mul.w	r2, r2, r0
 800bf68:	1a9b      	subs	r3, r3, r2
 800bf6a:	440b      	add	r3, r1
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7ff fb12 	bl	800b598 <st_dword>
			fs->wflag = 1;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2201      	movs	r2, #1
 800bf78:	70da      	strb	r2, [r3, #3]
			break;
 800bf7a:	e006      	b.n	800bf8a <put_fat+0x224>
			if (res != FR_OK) break;
 800bf7c:	bf00      	nop
 800bf7e:	e004      	b.n	800bf8a <put_fat+0x224>
			if (res != FR_OK) break;
 800bf80:	bf00      	nop
 800bf82:	e002      	b.n	800bf8a <put_fat+0x224>
			if (res != FR_OK) break;
 800bf84:	bf00      	nop
 800bf86:	e000      	b.n	800bf8a <put_fat+0x224>
			if (res != FR_OK) break;
 800bf88:	bf00      	nop
		}
	}
	return res;
 800bf8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3724      	adds	r7, #36	; 0x24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd90      	pop	{r4, r7, pc}

0800bf94 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b088      	sub	sp, #32
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d904      	bls.n	800bfba <remove_chain+0x26>
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	6a1b      	ldr	r3, [r3, #32]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d301      	bcc.n	800bfbe <remove_chain+0x2a>
 800bfba:	2302      	movs	r3, #2
 800bfbc:	e04b      	b.n	800c056 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00c      	beq.n	800bfde <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bfc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	69b8      	ldr	r0, [r7, #24]
 800bfcc:	f7ff fecb 	bl	800bd66 <put_fat>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bfd4:	7ffb      	ldrb	r3, [r7, #31]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <remove_chain+0x4a>
 800bfda:	7ffb      	ldrb	r3, [r7, #31]
 800bfdc:	e03b      	b.n	800c056 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f7ff fdf0 	bl	800bbc6 <get_fat>
 800bfe6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d031      	beq.n	800c052 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d101      	bne.n	800bff8 <remove_chain+0x64>
 800bff4:	2302      	movs	r3, #2
 800bff6:	e02e      	b.n	800c056 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffe:	d101      	bne.n	800c004 <remove_chain+0x70>
 800c000:	2301      	movs	r3, #1
 800c002:	e028      	b.n	800c056 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c004:	2200      	movs	r2, #0
 800c006:	68b9      	ldr	r1, [r7, #8]
 800c008:	69b8      	ldr	r0, [r7, #24]
 800c00a:	f7ff feac 	bl	800bd66 <put_fat>
 800c00e:	4603      	mov	r3, r0
 800c010:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c012:	7ffb      	ldrb	r3, [r7, #31]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d001      	beq.n	800c01c <remove_chain+0x88>
 800c018:	7ffb      	ldrb	r3, [r7, #31]
 800c01a:	e01c      	b.n	800c056 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	699a      	ldr	r2, [r3, #24]
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	3b02      	subs	r3, #2
 800c026:	429a      	cmp	r2, r3
 800c028:	d20b      	bcs.n	800c042 <remove_chain+0xae>
			fs->free_clst++;
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	1c5a      	adds	r2, r3, #1
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	791b      	ldrb	r3, [r3, #4]
 800c038:	f043 0301 	orr.w	r3, r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d3c6      	bcc.n	800bfde <remove_chain+0x4a>
 800c050:	e000      	b.n	800c054 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c052:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3720      	adds	r7, #32
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b088      	sub	sp, #32
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10d      	bne.n	800c090 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	695b      	ldr	r3, [r3, #20]
 800c078:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d004      	beq.n	800c08a <create_chain+0x2c>
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	429a      	cmp	r2, r3
 800c088:	d31b      	bcc.n	800c0c2 <create_chain+0x64>
 800c08a:	2301      	movs	r3, #1
 800c08c:	61bb      	str	r3, [r7, #24]
 800c08e:	e018      	b.n	800c0c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff fd97 	bl	800bbc6 <get_fat>
 800c098:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d801      	bhi.n	800c0a4 <create_chain+0x46>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e070      	b.n	800c186 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0aa:	d101      	bne.n	800c0b0 <create_chain+0x52>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	e06a      	b.n	800c186 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	6a1b      	ldr	r3, [r3, #32]
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d201      	bcs.n	800c0be <create_chain+0x60>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	e063      	b.n	800c186 <create_chain+0x128>
		scl = clst;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	6a1b      	ldr	r3, [r3, #32]
 800c0d0:	69fa      	ldr	r2, [r7, #28]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d307      	bcc.n	800c0e6 <create_chain+0x88>
				ncl = 2;
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c0da:	69fa      	ldr	r2, [r7, #28]
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d901      	bls.n	800c0e6 <create_chain+0x88>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e04f      	b.n	800c186 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c0e6:	69f9      	ldr	r1, [r7, #28]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff fd6c 	bl	800bbc6 <get_fat>
 800c0ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00e      	beq.n	800c114 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d003      	beq.n	800c104 <create_chain+0xa6>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c102:	d101      	bne.n	800c108 <create_chain+0xaa>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	e03e      	b.n	800c186 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c108:	69fa      	ldr	r2, [r7, #28]
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d1da      	bne.n	800c0c6 <create_chain+0x68>
 800c110:	2300      	movs	r3, #0
 800c112:	e038      	b.n	800c186 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c114:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c116:	f04f 32ff 	mov.w	r2, #4294967295
 800c11a:	69f9      	ldr	r1, [r7, #28]
 800c11c:	6938      	ldr	r0, [r7, #16]
 800c11e:	f7ff fe22 	bl	800bd66 <put_fat>
 800c122:	4603      	mov	r3, r0
 800c124:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c126:	7dfb      	ldrb	r3, [r7, #23]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d109      	bne.n	800c140 <create_chain+0xe2>
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d006      	beq.n	800c140 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c132:	69fa      	ldr	r2, [r7, #28]
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6938      	ldr	r0, [r7, #16]
 800c138:	f7ff fe15 	bl	800bd66 <put_fat>
 800c13c:	4603      	mov	r3, r0
 800c13e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c140:	7dfb      	ldrb	r3, [r7, #23]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d116      	bne.n	800c174 <create_chain+0x116>
		fs->last_clst = ncl;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	69fa      	ldr	r2, [r7, #28]
 800c14a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	699a      	ldr	r2, [r3, #24]
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	3b02      	subs	r3, #2
 800c156:	429a      	cmp	r2, r3
 800c158:	d804      	bhi.n	800c164 <create_chain+0x106>
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	1e5a      	subs	r2, r3, #1
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	791b      	ldrb	r3, [r3, #4]
 800c168:	f043 0301 	orr.w	r3, r3, #1
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	711a      	strb	r2, [r3, #4]
 800c172:	e007      	b.n	800c184 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c174:	7dfb      	ldrb	r3, [r7, #23]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d102      	bne.n	800c180 <create_chain+0x122>
 800c17a:	f04f 33ff 	mov.w	r3, #4294967295
 800c17e:	e000      	b.n	800c182 <create_chain+0x124>
 800c180:	2301      	movs	r3, #1
 800c182:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c184:	69fb      	ldr	r3, [r7, #28]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3720      	adds	r7, #32
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c18e:	b480      	push	{r7}
 800c190:	b087      	sub	sp, #28
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	899b      	ldrh	r3, [r3, #12]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	8952      	ldrh	r2, [r2, #10]
 800c1b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	1d1a      	adds	r2, r3, #4
 800c1c0:	613a      	str	r2, [r7, #16]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <clmt_clust+0x42>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	e010      	b.n	800c1f2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d307      	bcc.n	800c1e8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	617b      	str	r3, [r7, #20]
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1e6:	e7e9      	b.n	800c1bc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c1e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	4413      	add	r3, r2
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	371c      	adds	r7, #28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b086      	sub	sp, #24
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c214:	d204      	bcs.n	800c220 <dir_sdi+0x22>
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	f003 031f 	and.w	r3, r3, #31
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c220:	2302      	movs	r3, #2
 800c222:	e071      	b.n	800c308 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d106      	bne.n	800c244 <dir_sdi+0x46>
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d902      	bls.n	800c244 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c242:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10c      	bne.n	800c264 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	095b      	lsrs	r3, r3, #5
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	8912      	ldrh	r2, [r2, #8]
 800c252:	4293      	cmp	r3, r2
 800c254:	d301      	bcc.n	800c25a <dir_sdi+0x5c>
 800c256:	2302      	movs	r3, #2
 800c258:	e056      	b.n	800c308 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	61da      	str	r2, [r3, #28]
 800c262:	e02d      	b.n	800c2c0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	895b      	ldrh	r3, [r3, #10]
 800c268:	461a      	mov	r2, r3
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	899b      	ldrh	r3, [r3, #12]
 800c26e:	fb03 f302 	mul.w	r3, r3, r2
 800c272:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c274:	e019      	b.n	800c2aa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6979      	ldr	r1, [r7, #20]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff fca3 	bl	800bbc6 <get_fat>
 800c280:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c288:	d101      	bne.n	800c28e <dir_sdi+0x90>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e03c      	b.n	800c308 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d904      	bls.n	800c29e <dir_sdi+0xa0>
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d301      	bcc.n	800c2a2 <dir_sdi+0xa4>
 800c29e:	2302      	movs	r3, #2
 800c2a0:	e032      	b.n	800c308 <dir_sdi+0x10a>
			ofs -= csz;
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2aa:	683a      	ldr	r2, [r7, #0]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d2e1      	bcs.n	800c276 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c2b2:	6979      	ldr	r1, [r7, #20]
 800c2b4:	6938      	ldr	r0, [r7, #16]
 800c2b6:	f7ff fc67 	bl	800bb88 <clust2sect>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	69db      	ldr	r3, [r3, #28]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <dir_sdi+0xd4>
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	e01a      	b.n	800c308 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	69da      	ldr	r2, [r3, #28]
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	899b      	ldrh	r3, [r3, #12]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2e2:	441a      	add	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	899b      	ldrh	r3, [r3, #12]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2fa:	fb02 f200 	mul.w	r2, r2, r0
 800c2fe:	1a9b      	subs	r3, r3, r2
 800c300:	18ca      	adds	r2, r1, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	695b      	ldr	r3, [r3, #20]
 800c324:	3320      	adds	r3, #32
 800c326:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d003      	beq.n	800c338 <dir_next+0x28>
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c336:	d301      	bcc.n	800c33c <dir_next+0x2c>
 800c338:	2304      	movs	r3, #4
 800c33a:	e0bb      	b.n	800c4b4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	899b      	ldrh	r3, [r3, #12]
 800c340:	461a      	mov	r2, r3
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	fbb3 f1f2 	udiv	r1, r3, r2
 800c348:	fb02 f201 	mul.w	r2, r2, r1
 800c34c:	1a9b      	subs	r3, r3, r2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f040 809d 	bne.w	800c48e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	69db      	ldr	r3, [r3, #28]
 800c358:	1c5a      	adds	r2, r3, #1
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10b      	bne.n	800c37e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	095b      	lsrs	r3, r3, #5
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	8912      	ldrh	r2, [r2, #8]
 800c36e:	4293      	cmp	r3, r2
 800c370:	f0c0 808d 	bcc.w	800c48e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	61da      	str	r2, [r3, #28]
 800c37a:	2304      	movs	r3, #4
 800c37c:	e09a      	b.n	800c4b4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	899b      	ldrh	r3, [r3, #12]
 800c382:	461a      	mov	r2, r3
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	fbb3 f3f2 	udiv	r3, r3, r2
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	8952      	ldrh	r2, [r2, #10]
 800c38e:	3a01      	subs	r2, #1
 800c390:	4013      	ands	r3, r2
 800c392:	2b00      	cmp	r3, #0
 800c394:	d17b      	bne.n	800c48e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	699b      	ldr	r3, [r3, #24]
 800c39c:	4619      	mov	r1, r3
 800c39e:	4610      	mov	r0, r2
 800c3a0:	f7ff fc11 	bl	800bbc6 <get_fat>
 800c3a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d801      	bhi.n	800c3b0 <dir_next+0xa0>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	e081      	b.n	800c4b4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b6:	d101      	bne.n	800c3bc <dir_next+0xac>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e07b      	b.n	800c4b4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d359      	bcc.n	800c47a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d104      	bne.n	800c3d6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	61da      	str	r2, [r3, #28]
 800c3d2:	2304      	movs	r3, #4
 800c3d4:	e06e      	b.n	800c4b4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	4610      	mov	r0, r2
 800c3e0:	f7ff fe3d 	bl	800c05e <create_chain>
 800c3e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <dir_next+0xe0>
 800c3ec:	2307      	movs	r3, #7
 800c3ee:	e061      	b.n	800c4b4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d101      	bne.n	800c3fa <dir_next+0xea>
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	e05c      	b.n	800c4b4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c400:	d101      	bne.n	800c406 <dir_next+0xf6>
 800c402:	2301      	movs	r3, #1
 800c404:	e056      	b.n	800c4b4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f7ff fadc 	bl	800b9c4 <sync_window>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <dir_next+0x106>
 800c412:	2301      	movs	r3, #1
 800c414:	e04e      	b.n	800c4b4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	899b      	ldrh	r3, [r3, #12]
 800c420:	461a      	mov	r2, r3
 800c422:	2100      	movs	r1, #0
 800c424:	f7ff f905 	bl	800b632 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c428:	2300      	movs	r3, #0
 800c42a:	613b      	str	r3, [r7, #16]
 800c42c:	6979      	ldr	r1, [r7, #20]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff fbaa 	bl	800bb88 <clust2sect>
 800c434:	4602      	mov	r2, r0
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	639a      	str	r2, [r3, #56]	; 0x38
 800c43a:	e012      	b.n	800c462 <dir_next+0x152>
						fs->wflag = 1;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2201      	movs	r2, #1
 800c440:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f7ff fabe 	bl	800b9c4 <sync_window>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <dir_next+0x142>
 800c44e:	2301      	movs	r3, #1
 800c450:	e030      	b.n	800c4b4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	3301      	adds	r3, #1
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	639a      	str	r2, [r3, #56]	; 0x38
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	895b      	ldrh	r3, [r3, #10]
 800c466:	461a      	mov	r2, r3
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d3e6      	bcc.n	800c43c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	1ad2      	subs	r2, r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c480:	6979      	ldr	r1, [r7, #20]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f7ff fb80 	bl	800bb88 <clust2sect>
 800c488:	4602      	mov	r2, r0
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	899b      	ldrh	r3, [r3, #12]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4a6:	fb02 f200 	mul.w	r2, r2, r0
 800c4aa:	1a9b      	subs	r3, r3, r2
 800c4ac:	18ca      	adds	r2, r1, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3718      	adds	r7, #24
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff fe95 	bl	800c1fe <dir_sdi>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d12b      	bne.n	800c536 <dir_alloc+0x7a>
		n = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	69db      	ldr	r3, [r3, #28]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7ff faaf 	bl	800ba4c <move_window>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4f2:	7dfb      	ldrb	r3, [r7, #23]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d11d      	bne.n	800c534 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a1b      	ldr	r3, [r3, #32]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	2be5      	cmp	r3, #229	; 0xe5
 800c500:	d004      	beq.n	800c50c <dir_alloc+0x50>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d107      	bne.n	800c51c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	3301      	adds	r3, #1
 800c510:	613b      	str	r3, [r7, #16]
 800c512:	693a      	ldr	r2, [r7, #16]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d102      	bne.n	800c520 <dir_alloc+0x64>
 800c51a:	e00c      	b.n	800c536 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c51c:	2300      	movs	r3, #0
 800c51e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c520:	2101      	movs	r1, #1
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff fef4 	bl	800c310 <dir_next>
 800c528:	4603      	mov	r3, r0
 800c52a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0d7      	beq.n	800c4e2 <dir_alloc+0x26>
 800c532:	e000      	b.n	800c536 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c534:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c536:	7dfb      	ldrb	r3, [r7, #23]
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d101      	bne.n	800c540 <dir_alloc+0x84>
 800c53c:	2307      	movs	r3, #7
 800c53e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c540:	7dfb      	ldrb	r3, [r7, #23]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	331a      	adds	r3, #26
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fe ffc7 	bl	800b4ec <ld_word>
 800c55e:	4603      	mov	r3, r0
 800c560:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b03      	cmp	r3, #3
 800c568:	d109      	bne.n	800c57e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	3314      	adds	r3, #20
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fe ffbc 	bl	800b4ec <ld_word>
 800c574:	4603      	mov	r3, r0
 800c576:	041b      	lsls	r3, r3, #16
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c57e:	68fb      	ldr	r3, [r7, #12]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	331a      	adds	r3, #26
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	b292      	uxth	r2, r2
 800c59c:	4611      	mov	r1, r2
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fe ffdf 	bl	800b562 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d109      	bne.n	800c5c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f103 0214 	add.w	r2, r3, #20
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	0c1b      	lsrs	r3, r3, #16
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4610      	mov	r0, r2
 800c5bc:	f7fe ffd1 	bl	800b562 <st_word>
	}
}
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c5c8:	b590      	push	{r4, r7, lr}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	331a      	adds	r3, #26
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fe ff88 	bl	800b4ec <ld_word>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <cmp_lfn+0x1e>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e059      	b.n	800c69a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5ee:	1e5a      	subs	r2, r3, #1
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	005b      	lsls	r3, r3, #1
 800c5f4:	4413      	add	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	81fb      	strh	r3, [r7, #14]
 800c600:	2300      	movs	r3, #0
 800c602:	613b      	str	r3, [r7, #16]
 800c604:	e033      	b.n	800c66e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c606:	4a27      	ldr	r2, [pc, #156]	; (800c6a4 <cmp_lfn+0xdc>)
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	4413      	add	r3, r2
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	4413      	add	r3, r2
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe ff69 	bl	800b4ec <ld_word>
 800c61a:	4603      	mov	r3, r0
 800c61c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c61e:	89fb      	ldrh	r3, [r7, #14]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01a      	beq.n	800c65a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	2bfe      	cmp	r3, #254	; 0xfe
 800c628:	d812      	bhi.n	800c650 <cmp_lfn+0x88>
 800c62a:	89bb      	ldrh	r3, [r7, #12]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f002 fd23 	bl	800f078 <ff_wtoupper>
 800c632:	4603      	mov	r3, r0
 800c634:	461c      	mov	r4, r3
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	1c5a      	adds	r2, r3, #1
 800c63a:	617a      	str	r2, [r7, #20]
 800c63c:	005b      	lsls	r3, r3, #1
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4413      	add	r3, r2
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	4618      	mov	r0, r3
 800c646:	f002 fd17 	bl	800f078 <ff_wtoupper>
 800c64a:	4603      	mov	r3, r0
 800c64c:	429c      	cmp	r4, r3
 800c64e:	d001      	beq.n	800c654 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c650:	2300      	movs	r3, #0
 800c652:	e022      	b.n	800c69a <cmp_lfn+0xd2>
			}
			wc = uc;
 800c654:	89bb      	ldrh	r3, [r7, #12]
 800c656:	81fb      	strh	r3, [r7, #14]
 800c658:	e006      	b.n	800c668 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c65a:	89bb      	ldrh	r3, [r7, #12]
 800c65c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c660:	4293      	cmp	r3, r2
 800c662:	d001      	beq.n	800c668 <cmp_lfn+0xa0>
 800c664:	2300      	movs	r3, #0
 800c666:	e018      	b.n	800c69a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	3301      	adds	r3, #1
 800c66c:	613b      	str	r3, [r7, #16]
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	2b0c      	cmp	r3, #12
 800c672:	d9c8      	bls.n	800c606 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00b      	beq.n	800c698 <cmp_lfn+0xd0>
 800c680:	89fb      	ldrh	r3, [r7, #14]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d008      	beq.n	800c698 <cmp_lfn+0xd0>
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	4413      	add	r3, r2
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <cmp_lfn+0xd0>
 800c694:	2300      	movs	r3, #0
 800c696:	e000      	b.n	800c69a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c698:	2301      	movs	r3, #1
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd90      	pop	{r4, r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	08014140 	.word	0x08014140

0800c6a8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	331a      	adds	r3, #26
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fe ff18 	bl	800b4ec <ld_word>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <pick_lfn+0x1e>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e04d      	b.n	800c762 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6ce:	1e5a      	subs	r2, r3, #1
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	4413      	add	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4413      	add	r3, r2
 800c6da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c6dc:	2301      	movs	r3, #1
 800c6de:	81fb      	strh	r3, [r7, #14]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	613b      	str	r3, [r7, #16]
 800c6e4:	e028      	b.n	800c738 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c6e6:	4a21      	ldr	r2, [pc, #132]	; (800c76c <pick_lfn+0xc4>)
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe fef9 	bl	800b4ec <ld_word>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c6fe:	89fb      	ldrh	r3, [r7, #14]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00f      	beq.n	800c724 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	2bfe      	cmp	r3, #254	; 0xfe
 800c708:	d901      	bls.n	800c70e <pick_lfn+0x66>
 800c70a:	2300      	movs	r3, #0
 800c70c:	e029      	b.n	800c762 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c70e:	89bb      	ldrh	r3, [r7, #12]
 800c710:	81fb      	strh	r3, [r7, #14]
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	1c5a      	adds	r2, r3, #1
 800c716:	617a      	str	r2, [r7, #20]
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	4413      	add	r3, r2
 800c71e:	89fa      	ldrh	r2, [r7, #14]
 800c720:	801a      	strh	r2, [r3, #0]
 800c722:	e006      	b.n	800c732 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c724:	89bb      	ldrh	r3, [r7, #12]
 800c726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d001      	beq.n	800c732 <pick_lfn+0x8a>
 800c72e:	2300      	movs	r3, #0
 800c730:	e017      	b.n	800c762 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	3301      	adds	r3, #1
 800c736:	613b      	str	r3, [r7, #16]
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	2b0c      	cmp	r3, #12
 800c73c:	d9d3      	bls.n	800c6e6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00a      	beq.n	800c760 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	2bfe      	cmp	r3, #254	; 0xfe
 800c74e:	d901      	bls.n	800c754 <pick_lfn+0xac>
 800c750:	2300      	movs	r3, #0
 800c752:	e006      	b.n	800c762 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	4413      	add	r3, r2
 800c75c:	2200      	movs	r2, #0
 800c75e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c760:	2301      	movs	r3, #1
}
 800c762:	4618      	mov	r0, r3
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	08014140 	.word	0x08014140

0800c770 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b088      	sub	sp, #32
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	4611      	mov	r1, r2
 800c77c:	461a      	mov	r2, r3
 800c77e:	460b      	mov	r3, r1
 800c780:	71fb      	strb	r3, [r7, #7]
 800c782:	4613      	mov	r3, r2
 800c784:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	330d      	adds	r3, #13
 800c78a:	79ba      	ldrb	r2, [r7, #6]
 800c78c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	330b      	adds	r3, #11
 800c792:	220f      	movs	r2, #15
 800c794:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	330c      	adds	r3, #12
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	331a      	adds	r3, #26
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fe fedc 	bl	800b562 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c7aa:	79fb      	ldrb	r3, [r7, #7]
 800c7ac:	1e5a      	subs	r2, r3, #1
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4413      	add	r3, r2
 800c7b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	82fb      	strh	r3, [r7, #22]
 800c7be:	2300      	movs	r3, #0
 800c7c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c7c2:	8afb      	ldrh	r3, [r7, #22]
 800c7c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d007      	beq.n	800c7dc <put_lfn+0x6c>
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	61fa      	str	r2, [r7, #28]
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	881b      	ldrh	r3, [r3, #0]
 800c7da:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c7dc:	4a17      	ldr	r2, [pc, #92]	; (800c83c <put_lfn+0xcc>)
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	8afa      	ldrh	r2, [r7, #22]
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe feb7 	bl	800b562 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c7f4:	8afb      	ldrh	r3, [r7, #22]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d102      	bne.n	800c800 <put_lfn+0x90>
 800c7fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	3301      	adds	r3, #1
 800c804:	61bb      	str	r3, [r7, #24]
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	2b0c      	cmp	r3, #12
 800c80a:	d9da      	bls.n	800c7c2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c80c:	8afb      	ldrh	r3, [r7, #22]
 800c80e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c812:	4293      	cmp	r3, r2
 800c814:	d006      	beq.n	800c824 <put_lfn+0xb4>
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	4413      	add	r3, r2
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d103      	bne.n	800c82c <put_lfn+0xbc>
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c82a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	79fa      	ldrb	r2, [r7, #7]
 800c830:	701a      	strb	r2, [r3, #0]
}
 800c832:	bf00      	nop
 800c834:	3720      	adds	r7, #32
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	08014140 	.word	0x08014140

0800c840 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b08c      	sub	sp, #48	; 0x30
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
 800c84c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c84e:	220b      	movs	r2, #11
 800c850:	68b9      	ldr	r1, [r7, #8]
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7fe fecc 	bl	800b5f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	2b05      	cmp	r3, #5
 800c85c:	d92b      	bls.n	800c8b6 <gen_numname+0x76>
		sr = seq;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c862:	e022      	b.n	800c8aa <gen_numname+0x6a>
			wc = *lfn++;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	1c9a      	adds	r2, r3, #2
 800c868:	607a      	str	r2, [r7, #4]
 800c86a:	881b      	ldrh	r3, [r3, #0]
 800c86c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c86e:	2300      	movs	r3, #0
 800c870:	62bb      	str	r3, [r7, #40]	; 0x28
 800c872:	e017      	b.n	800c8a4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	005a      	lsls	r2, r3, #1
 800c878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c87a:	f003 0301 	and.w	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c884:	085b      	lsrs	r3, r3, #1
 800c886:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d005      	beq.n	800c89e <gen_numname+0x5e>
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c898:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c89c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	2b0f      	cmp	r3, #15
 800c8a8:	d9e4      	bls.n	800c874 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1d8      	bne.n	800c864 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c8b6:	2307      	movs	r3, #7
 800c8b8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	f003 030f 	and.w	r3, r3, #15
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	3330      	adds	r3, #48	; 0x30
 800c8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8ce:	2b39      	cmp	r3, #57	; 0x39
 800c8d0:	d904      	bls.n	800c8dc <gen_numname+0x9c>
 800c8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8d6:	3307      	adds	r3, #7
 800c8d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	1e5a      	subs	r2, r3, #1
 800c8e0:	62ba      	str	r2, [r7, #40]	; 0x28
 800c8e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c8ec:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	091b      	lsrs	r3, r3, #4
 800c8f4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1de      	bne.n	800c8ba <gen_numname+0x7a>
	ns[i] = '~';
 800c8fc:	f107 0214 	add.w	r2, r7, #20
 800c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c902:	4413      	add	r3, r2
 800c904:	227e      	movs	r2, #126	; 0x7e
 800c906:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c908:	2300      	movs	r3, #0
 800c90a:	627b      	str	r3, [r7, #36]	; 0x24
 800c90c:	e002      	b.n	800c914 <gen_numname+0xd4>
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	3301      	adds	r3, #1
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
 800c914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	429a      	cmp	r2, r3
 800c91a:	d205      	bcs.n	800c928 <gen_numname+0xe8>
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	4413      	add	r3, r2
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b20      	cmp	r3, #32
 800c926:	d1f2      	bne.n	800c90e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	2b07      	cmp	r3, #7
 800c92c:	d808      	bhi.n	800c940 <gen_numname+0x100>
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	1c5a      	adds	r2, r3, #1
 800c932:	62ba      	str	r2, [r7, #40]	; 0x28
 800c934:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c938:	4413      	add	r3, r2
 800c93a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c93e:	e000      	b.n	800c942 <gen_numname+0x102>
 800c940:	2120      	movs	r1, #32
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	1c5a      	adds	r2, r3, #1
 800c946:	627a      	str	r2, [r7, #36]	; 0x24
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	4413      	add	r3, r2
 800c94c:	460a      	mov	r2, r1
 800c94e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	2b07      	cmp	r3, #7
 800c954:	d9e8      	bls.n	800c928 <gen_numname+0xe8>
}
 800c956:	bf00      	nop
 800c958:	3730      	adds	r7, #48	; 0x30
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c95e:	b480      	push	{r7}
 800c960:	b085      	sub	sp, #20
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c96a:	230b      	movs	r3, #11
 800c96c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
 800c970:	b2da      	uxtb	r2, r3
 800c972:	0852      	lsrs	r2, r2, #1
 800c974:	01db      	lsls	r3, r3, #7
 800c976:	4313      	orrs	r3, r2
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	1c59      	adds	r1, r3, #1
 800c97e:	6079      	str	r1, [r7, #4]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	4413      	add	r3, r2
 800c984:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	3b01      	subs	r3, #1
 800c98a:	60bb      	str	r3, [r7, #8]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1ed      	bne.n	800c96e <sum_sfn+0x10>
	return sum;
 800c992:	7bfb      	ldrb	r3, [r7, #15]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c9aa:	2304      	movs	r3, #4
 800c9ac:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c9b4:	23ff      	movs	r3, #255	; 0xff
 800c9b6:	757b      	strb	r3, [r7, #21]
 800c9b8:	23ff      	movs	r3, #255	; 0xff
 800c9ba:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c9bc:	e081      	b.n	800cac2 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6938      	ldr	r0, [r7, #16]
 800c9c6:	f7ff f841 	bl	800ba4c <move_window>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d17c      	bne.n	800cace <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a1b      	ldr	r3, [r3, #32]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c9dc:	7dbb      	ldrb	r3, [r7, #22]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d102      	bne.n	800c9e8 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c9e2:	2304      	movs	r3, #4
 800c9e4:	75fb      	strb	r3, [r7, #23]
 800c9e6:	e077      	b.n	800cad8 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6a1b      	ldr	r3, [r3, #32]
 800c9ec:	330b      	adds	r3, #11
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9f4:	73fb      	strb	r3, [r7, #15]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	7bfa      	ldrb	r2, [r7, #15]
 800c9fa:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c9fc:	7dbb      	ldrb	r3, [r7, #22]
 800c9fe:	2be5      	cmp	r3, #229	; 0xe5
 800ca00:	d00e      	beq.n	800ca20 <dir_read+0x80>
 800ca02:	7dbb      	ldrb	r3, [r7, #22]
 800ca04:	2b2e      	cmp	r3, #46	; 0x2e
 800ca06:	d00b      	beq.n	800ca20 <dir_read+0x80>
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
 800ca0a:	f023 0320 	bic.w	r3, r3, #32
 800ca0e:	2b08      	cmp	r3, #8
 800ca10:	bf0c      	ite	eq
 800ca12:	2301      	moveq	r3, #1
 800ca14:	2300      	movne	r3, #0
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	461a      	mov	r2, r3
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d002      	beq.n	800ca26 <dir_read+0x86>
				ord = 0xFF;
 800ca20:	23ff      	movs	r3, #255	; 0xff
 800ca22:	757b      	strb	r3, [r7, #21]
 800ca24:	e044      	b.n	800cab0 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
 800ca28:	2b0f      	cmp	r3, #15
 800ca2a:	d12f      	bne.n	800ca8c <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca2c:	7dbb      	ldrb	r3, [r7, #22]
 800ca2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00d      	beq.n	800ca52 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	7b5b      	ldrb	r3, [r3, #13]
 800ca3c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca3e:	7dbb      	ldrb	r3, [r7, #22]
 800ca40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca44:	75bb      	strb	r3, [r7, #22]
 800ca46:	7dbb      	ldrb	r3, [r7, #22]
 800ca48:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	695a      	ldr	r2, [r3, #20]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca52:	7dba      	ldrb	r2, [r7, #22]
 800ca54:	7d7b      	ldrb	r3, [r7, #21]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d115      	bne.n	800ca86 <dir_read+0xe6>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a1b      	ldr	r3, [r3, #32]
 800ca5e:	330d      	adds	r3, #13
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	7d3a      	ldrb	r2, [r7, #20]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d10e      	bne.n	800ca86 <dir_read+0xe6>
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	691a      	ldr	r2, [r3, #16]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a1b      	ldr	r3, [r3, #32]
 800ca70:	4619      	mov	r1, r3
 800ca72:	4610      	mov	r0, r2
 800ca74:	f7ff fe18 	bl	800c6a8 <pick_lfn>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <dir_read+0xe6>
 800ca7e:	7d7b      	ldrb	r3, [r7, #21]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	e000      	b.n	800ca88 <dir_read+0xe8>
 800ca86:	23ff      	movs	r3, #255	; 0xff
 800ca88:	757b      	strb	r3, [r7, #21]
 800ca8a:	e011      	b.n	800cab0 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ca8c:	7d7b      	ldrb	r3, [r7, #21]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d109      	bne.n	800caa6 <dir_read+0x106>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7ff ff61 	bl	800c95e <sum_sfn>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	461a      	mov	r2, r3
 800caa0:	7d3b      	ldrb	r3, [r7, #20]
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d015      	beq.n	800cad2 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f04f 32ff 	mov.w	r2, #4294967295
 800caac:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800caae:	e010      	b.n	800cad2 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cab0:	2100      	movs	r1, #0
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fc2c 	bl	800c310 <dir_next>
 800cab8:	4603      	mov	r3, r0
 800caba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cabc:	7dfb      	ldrb	r3, [r7, #23]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d109      	bne.n	800cad6 <dir_read+0x136>
	while (dp->sect) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f47f af79 	bne.w	800c9be <dir_read+0x1e>
 800cacc:	e004      	b.n	800cad8 <dir_read+0x138>
		if (res != FR_OK) break;
 800cace:	bf00      	nop
 800cad0:	e002      	b.n	800cad8 <dir_read+0x138>
					break;
 800cad2:	bf00      	nop
 800cad4:	e000      	b.n	800cad8 <dir_read+0x138>
		if (res != FR_OK) break;
 800cad6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <dir_read+0x144>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	61da      	str	r2, [r3, #28]
	return res;
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3718      	adds	r7, #24
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b086      	sub	sp, #24
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cafc:	2100      	movs	r1, #0
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7ff fb7d 	bl	800c1fe <dir_sdi>
 800cb04:	4603      	mov	r3, r0
 800cb06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <dir_find+0x24>
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
 800cb10:	e0a9      	b.n	800cc66 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb12:	23ff      	movs	r3, #255	; 0xff
 800cb14:	753b      	strb	r3, [r7, #20]
 800cb16:	7d3b      	ldrb	r3, [r7, #20]
 800cb18:	757b      	strb	r3, [r7, #21]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb20:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	4619      	mov	r1, r3
 800cb28:	6938      	ldr	r0, [r7, #16]
 800cb2a:	f7fe ff8f 	bl	800ba4c <move_window>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb32:	7dfb      	ldrb	r3, [r7, #23]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f040 8090 	bne.w	800cc5a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a1b      	ldr	r3, [r3, #32]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb42:	7dbb      	ldrb	r3, [r7, #22]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <dir_find+0x60>
 800cb48:	2304      	movs	r3, #4
 800cb4a:	75fb      	strb	r3, [r7, #23]
 800cb4c:	e08a      	b.n	800cc64 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	330b      	adds	r3, #11
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb5a:	73fb      	strb	r3, [r7, #15]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7bfa      	ldrb	r2, [r7, #15]
 800cb60:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cb62:	7dbb      	ldrb	r3, [r7, #22]
 800cb64:	2be5      	cmp	r3, #229	; 0xe5
 800cb66:	d007      	beq.n	800cb78 <dir_find+0x8a>
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
 800cb6a:	f003 0308 	and.w	r3, r3, #8
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d009      	beq.n	800cb86 <dir_find+0x98>
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
 800cb74:	2b0f      	cmp	r3, #15
 800cb76:	d006      	beq.n	800cb86 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb78:	23ff      	movs	r3, #255	; 0xff
 800cb7a:	757b      	strb	r3, [r7, #21]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb82:	631a      	str	r2, [r3, #48]	; 0x30
 800cb84:	e05e      	b.n	800cc44 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
 800cb88:	2b0f      	cmp	r3, #15
 800cb8a:	d136      	bne.n	800cbfa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d154      	bne.n	800cc44 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cb9a:	7dbb      	ldrb	r3, [r7, #22]
 800cb9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00d      	beq.n	800cbc0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	7b5b      	ldrb	r3, [r3, #13]
 800cbaa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cbac:	7dbb      	ldrb	r3, [r7, #22]
 800cbae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbb2:	75bb      	strb	r3, [r7, #22]
 800cbb4:	7dbb      	ldrb	r3, [r7, #22]
 800cbb6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	695a      	ldr	r2, [r3, #20]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cbc0:	7dba      	ldrb	r2, [r7, #22]
 800cbc2:	7d7b      	ldrb	r3, [r7, #21]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d115      	bne.n	800cbf4 <dir_find+0x106>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a1b      	ldr	r3, [r3, #32]
 800cbcc:	330d      	adds	r3, #13
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	7d3a      	ldrb	r2, [r7, #20]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d10e      	bne.n	800cbf4 <dir_find+0x106>
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	691a      	ldr	r2, [r3, #16]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	f7ff fcf1 	bl	800c5c8 <cmp_lfn>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d003      	beq.n	800cbf4 <dir_find+0x106>
 800cbec:	7d7b      	ldrb	r3, [r7, #21]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	e000      	b.n	800cbf6 <dir_find+0x108>
 800cbf4:	23ff      	movs	r3, #255	; 0xff
 800cbf6:	757b      	strb	r3, [r7, #21]
 800cbf8:	e024      	b.n	800cc44 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cbfa:	7d7b      	ldrb	r3, [r7, #21]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d109      	bne.n	800cc14 <dir_find+0x126>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a1b      	ldr	r3, [r3, #32]
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff feaa 	bl	800c95e <sum_sfn>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	7d3b      	ldrb	r3, [r7, #20]
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d024      	beq.n	800cc5e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc1a:	f003 0301 	and.w	r3, r3, #1
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10a      	bne.n	800cc38 <dir_find+0x14a>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a18      	ldr	r0, [r3, #32]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3324      	adds	r3, #36	; 0x24
 800cc2a:	220b      	movs	r2, #11
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	f7fe fd1a 	bl	800b666 <mem_cmp>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d014      	beq.n	800cc62 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc38:	23ff      	movs	r3, #255	; 0xff
 800cc3a:	757b      	strb	r3, [r7, #21]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc42:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc44:	2100      	movs	r1, #0
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7ff fb62 	bl	800c310 <dir_next>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f43f af65 	beq.w	800cb22 <dir_find+0x34>
 800cc58:	e004      	b.n	800cc64 <dir_find+0x176>
		if (res != FR_OK) break;
 800cc5a:	bf00      	nop
 800cc5c:	e002      	b.n	800cc64 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc5e:	bf00      	nop
 800cc60:	e000      	b.n	800cc64 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cc62:	bf00      	nop

	return res;
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08c      	sub	sp, #48	; 0x30
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d001      	beq.n	800cc90 <dir_register+0x20>
 800cc8c:	2306      	movs	r3, #6
 800cc8e:	e0e0      	b.n	800ce52 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cc90:	2300      	movs	r3, #0
 800cc92:	627b      	str	r3, [r7, #36]	; 0x24
 800cc94:	e002      	b.n	800cc9c <dir_register+0x2c>
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	3301      	adds	r3, #1
 800cc9a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	691a      	ldr	r2, [r3, #16]
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	4413      	add	r3, r2
 800cca6:	881b      	ldrh	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1f4      	bne.n	800cc96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ccb2:	f107 030c 	add.w	r3, r7, #12
 800ccb6:	220c      	movs	r2, #12
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fe fc99 	bl	800b5f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
 800ccc0:	f003 0301 	and.w	r3, r3, #1
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d032      	beq.n	800cd2e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2240      	movs	r2, #64	; 0x40
 800cccc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccd4:	e016      	b.n	800cd04 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	691a      	ldr	r2, [r3, #16]
 800cce0:	f107 010c 	add.w	r1, r7, #12
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	f7ff fdab 	bl	800c840 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff feff 	bl	800caee <dir_find>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ccf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d106      	bne.n	800cd0c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	3301      	adds	r3, #1
 800cd02:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd06:	2b63      	cmp	r3, #99	; 0x63
 800cd08:	d9e5      	bls.n	800ccd6 <dir_register+0x66>
 800cd0a:	e000      	b.n	800cd0e <dir_register+0x9e>
			if (res != FR_OK) break;
 800cd0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd10:	2b64      	cmp	r3, #100	; 0x64
 800cd12:	d101      	bne.n	800cd18 <dir_register+0xa8>
 800cd14:	2307      	movs	r3, #7
 800cd16:	e09c      	b.n	800ce52 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cd18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	d002      	beq.n	800cd26 <dir_register+0xb6>
 800cd20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd24:	e095      	b.n	800ce52 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cd26:	7dfa      	ldrb	r2, [r7, #23]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	f003 0302 	and.w	r3, r3, #2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d007      	beq.n	800cd48 <dir_register+0xd8>
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	330c      	adds	r3, #12
 800cd3c:	4a47      	ldr	r2, [pc, #284]	; (800ce5c <dir_register+0x1ec>)
 800cd3e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd42:	089b      	lsrs	r3, r3, #2
 800cd44:	3301      	adds	r3, #1
 800cd46:	e000      	b.n	800cd4a <dir_register+0xda>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cd4c:	6a39      	ldr	r1, [r7, #32]
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7ff fbb4 	bl	800c4bc <dir_alloc>
 800cd54:	4603      	mov	r3, r0
 800cd56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cd5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d148      	bne.n	800cdf4 <dir_register+0x184>
 800cd62:	6a3b      	ldr	r3, [r7, #32]
 800cd64:	3b01      	subs	r3, #1
 800cd66:	623b      	str	r3, [r7, #32]
 800cd68:	6a3b      	ldr	r3, [r7, #32]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d042      	beq.n	800cdf4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	695a      	ldr	r2, [r3, #20]
 800cd72:	6a3b      	ldr	r3, [r7, #32]
 800cd74:	015b      	lsls	r3, r3, #5
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f7ff fa3f 	bl	800c1fe <dir_sdi>
 800cd80:	4603      	mov	r3, r0
 800cd82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cd86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d132      	bne.n	800cdf4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3324      	adds	r3, #36	; 0x24
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fde3 	bl	800c95e <sum_sfn>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	69db      	ldr	r3, [r3, #28]
 800cda0:	4619      	mov	r1, r3
 800cda2:	69f8      	ldr	r0, [r7, #28]
 800cda4:	f7fe fe52 	bl	800ba4c <move_window>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cdae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d11d      	bne.n	800cdf2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	6918      	ldr	r0, [r3, #16]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a19      	ldr	r1, [r3, #32]
 800cdbe:	6a3b      	ldr	r3, [r7, #32]
 800cdc0:	b2da      	uxtb	r2, r3
 800cdc2:	7efb      	ldrb	r3, [r7, #27]
 800cdc4:	f7ff fcd4 	bl	800c770 <put_lfn>
				fs->wflag = 1;
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cdce:	2100      	movs	r1, #0
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7ff fa9d 	bl	800c310 <dir_next>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d107      	bne.n	800cdf4 <dir_register+0x184>
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	623b      	str	r3, [r7, #32]
 800cdea:	6a3b      	ldr	r3, [r7, #32]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1d5      	bne.n	800cd9c <dir_register+0x12c>
 800cdf0:	e000      	b.n	800cdf4 <dir_register+0x184>
				if (res != FR_OK) break;
 800cdf2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cdf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d128      	bne.n	800ce4e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	4619      	mov	r1, r3
 800ce02:	69f8      	ldr	r0, [r7, #28]
 800ce04:	f7fe fe22 	bl	800ba4c <move_window>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ce0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d11b      	bne.n	800ce4e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	2220      	movs	r2, #32
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fe fc07 	bl	800b632 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a18      	ldr	r0, [r3, #32]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	3324      	adds	r3, #36	; 0x24
 800ce2c:	220b      	movs	r2, #11
 800ce2e:	4619      	mov	r1, r3
 800ce30:	f7fe fbde 	bl	800b5f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	330c      	adds	r3, #12
 800ce40:	f002 0218 	and.w	r2, r2, #24
 800ce44:	b2d2      	uxtb	r2, r2
 800ce46:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ce4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3730      	adds	r7, #48	; 0x30
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	4ec4ec4f 	.word	0x4ec4ec4f

0800ce60 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7c:	d007      	beq.n	800ce8e <dir_remove+0x2e>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce82:	4619      	mov	r1, r3
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7ff f9ba 	bl	800c1fe <dir_sdi>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	e000      	b.n	800ce90 <dir_remove+0x30>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d128      	bne.n	800ceea <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	69db      	ldr	r3, [r3, #28]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6938      	ldr	r0, [r7, #16]
 800cea0:	f7fe fdd4 	bl	800ba4c <move_window>
 800cea4:	4603      	mov	r3, r0
 800cea6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cea8:	7dfb      	ldrb	r3, [r7, #23]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d115      	bne.n	800ceda <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a1b      	ldr	r3, [r3, #32]
 800ceb2:	22e5      	movs	r2, #229	; 0xe5
 800ceb4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d90b      	bls.n	800cede <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800cec6:	2100      	movs	r1, #0
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7ff fa21 	bl	800c310 <dir_next>
 800cece:	4603      	mov	r3, r0
 800ced0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800ced2:	7dfb      	ldrb	r3, [r7, #23]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d0df      	beq.n	800ce98 <dir_remove+0x38>
 800ced8:	e002      	b.n	800cee0 <dir_remove+0x80>
			if (res != FR_OK) break;
 800ceda:	bf00      	nop
 800cedc:	e000      	b.n	800cee0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800cede:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d101      	bne.n	800ceea <dir_remove+0x8a>
 800cee6:	2302      	movs	r3, #2
 800cee8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08a      	sub	sp, #40	; 0x28
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	613b      	str	r3, [r7, #16]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	1c5a      	adds	r2, r3, #1
 800cf18:	61ba      	str	r2, [r7, #24]
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cf22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf24:	2b1f      	cmp	r3, #31
 800cf26:	d940      	bls.n	800cfaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cf28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf2a:	2b2f      	cmp	r3, #47	; 0x2f
 800cf2c:	d006      	beq.n	800cf3c <create_name+0x48>
 800cf2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf30:	2b5c      	cmp	r3, #92	; 0x5c
 800cf32:	d110      	bne.n	800cf56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cf34:	e002      	b.n	800cf3c <create_name+0x48>
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	61bb      	str	r3, [r7, #24]
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	4413      	add	r3, r2
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	2b2f      	cmp	r3, #47	; 0x2f
 800cf46:	d0f6      	beq.n	800cf36 <create_name+0x42>
 800cf48:	693a      	ldr	r2, [r7, #16]
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b5c      	cmp	r3, #92	; 0x5c
 800cf52:	d0f0      	beq.n	800cf36 <create_name+0x42>
			break;
 800cf54:	e02a      	b.n	800cfac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2bfe      	cmp	r3, #254	; 0xfe
 800cf5a:	d901      	bls.n	800cf60 <create_name+0x6c>
 800cf5c:	2306      	movs	r3, #6
 800cf5e:	e1c9      	b.n	800d2f4 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cf60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cf66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf68:	2101      	movs	r1, #1
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f002 f848 	bl	800f000 <ff_convert>
 800cf70:	4603      	mov	r3, r0
 800cf72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cf74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <create_name+0x8a>
 800cf7a:	2306      	movs	r3, #6
 800cf7c:	e1ba      	b.n	800d2f4 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cf7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf80:	2b7f      	cmp	r3, #127	; 0x7f
 800cf82:	d809      	bhi.n	800cf98 <create_name+0xa4>
 800cf84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf86:	4619      	mov	r1, r3
 800cf88:	48a5      	ldr	r0, [pc, #660]	; (800d220 <create_name+0x32c>)
 800cf8a:	f7fe fb93 	bl	800b6b4 <chk_chr>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <create_name+0xa4>
 800cf94:	2306      	movs	r3, #6
 800cf96:	e1ad      	b.n	800d2f4 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	617a      	str	r2, [r7, #20]
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cfa6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cfa8:	e7b4      	b.n	800cf14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cfaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cfac:	693a      	ldr	r2, [r7, #16]
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	441a      	add	r2, r3
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cfb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfb8:	2b1f      	cmp	r3, #31
 800cfba:	d801      	bhi.n	800cfc0 <create_name+0xcc>
 800cfbc:	2304      	movs	r3, #4
 800cfbe:	e000      	b.n	800cfc2 <create_name+0xce>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d109      	bne.n	800cfe0 <create_name+0xec>
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	4413      	add	r3, r2
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	2b2e      	cmp	r3, #46	; 0x2e
 800cfde:	d016      	beq.n	800d00e <create_name+0x11a>
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d14e      	bne.n	800d084 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cfec:	3b01      	subs	r3, #1
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	2b2e      	cmp	r3, #46	; 0x2e
 800cff8:	d144      	bne.n	800d084 <create_name+0x190>
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d000:	3b02      	subs	r3, #2
 800d002:	005b      	lsls	r3, r3, #1
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	4413      	add	r3, r2
 800d008:	881b      	ldrh	r3, [r3, #0]
 800d00a:	2b2e      	cmp	r3, #46	; 0x2e
 800d00c:	d13a      	bne.n	800d084 <create_name+0x190>
		lfn[di] = 0;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	4413      	add	r3, r2
 800d016:	2200      	movs	r2, #0
 800d018:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800d01a:	2300      	movs	r3, #0
 800d01c:	623b      	str	r3, [r7, #32]
 800d01e:	e00f      	b.n	800d040 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800d020:	6a3a      	ldr	r2, [r7, #32]
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	429a      	cmp	r2, r3
 800d026:	d201      	bcs.n	800d02c <create_name+0x138>
 800d028:	212e      	movs	r1, #46	; 0x2e
 800d02a:	e000      	b.n	800d02e <create_name+0x13a>
 800d02c:	2120      	movs	r1, #32
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	6a3b      	ldr	r3, [r7, #32]
 800d032:	4413      	add	r3, r2
 800d034:	3324      	adds	r3, #36	; 0x24
 800d036:	460a      	mov	r2, r1
 800d038:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800d03a:	6a3b      	ldr	r3, [r7, #32]
 800d03c:	3301      	adds	r3, #1
 800d03e:	623b      	str	r3, [r7, #32]
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	2b0a      	cmp	r3, #10
 800d044:	d9ec      	bls.n	800d020 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800d046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d04a:	f043 0320 	orr.w	r3, r3, #32
 800d04e:	b2d9      	uxtb	r1, r3
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	4413      	add	r3, r2
 800d056:	3324      	adds	r3, #36	; 0x24
 800d058:	460a      	mov	r2, r1
 800d05a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	e149      	b.n	800d2f4 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d066:	3b01      	subs	r3, #1
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	4413      	add	r3, r2
 800d06e:	881b      	ldrh	r3, [r3, #0]
 800d070:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d074:	2b20      	cmp	r3, #32
 800d076:	d002      	beq.n	800d07e <create_name+0x18a>
 800d078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d07a:	2b2e      	cmp	r3, #46	; 0x2e
 800d07c:	d106      	bne.n	800d08c <create_name+0x198>
		di--;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	3b01      	subs	r3, #1
 800d082:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1ea      	bne.n	800d060 <create_name+0x16c>
 800d08a:	e000      	b.n	800d08e <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800d08c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	4413      	add	r3, r2
 800d096:	2200      	movs	r2, #0
 800d098:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d101      	bne.n	800d0a4 <create_name+0x1b0>
 800d0a0:	2306      	movs	r3, #6
 800d0a2:	e127      	b.n	800d2f4 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	3324      	adds	r3, #36	; 0x24
 800d0a8:	220b      	movs	r2, #11
 800d0aa:	2120      	movs	r1, #32
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fe fac0 	bl	800b632 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	61bb      	str	r3, [r7, #24]
 800d0b6:	e002      	b.n	800d0be <create_name+0x1ca>
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	61bb      	str	r3, [r7, #24]
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	005b      	lsls	r3, r3, #1
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	2b20      	cmp	r3, #32
 800d0ca:	d0f5      	beq.n	800d0b8 <create_name+0x1c4>
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	881b      	ldrh	r3, [r3, #0]
 800d0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d0d8:	d0ee      	beq.n	800d0b8 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d009      	beq.n	800d0f4 <create_name+0x200>
 800d0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e4:	f043 0303 	orr.w	r3, r3, #3
 800d0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d0ec:	e002      	b.n	800d0f4 <create_name+0x200>
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	617b      	str	r3, [r7, #20]
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d009      	beq.n	800d10e <create_name+0x21a>
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d100:	3b01      	subs	r3, #1
 800d102:	005b      	lsls	r3, r3, #1
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	4413      	add	r3, r2
 800d108:	881b      	ldrh	r3, [r3, #0]
 800d10a:	2b2e      	cmp	r3, #46	; 0x2e
 800d10c:	d1ef      	bne.n	800d0ee <create_name+0x1fa>

	i = b = 0; ni = 8;
 800d10e:	2300      	movs	r3, #0
 800d110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d114:	2300      	movs	r3, #0
 800d116:	623b      	str	r3, [r7, #32]
 800d118:	2308      	movs	r3, #8
 800d11a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	1c5a      	adds	r2, r3, #1
 800d120:	61ba      	str	r2, [r7, #24]
 800d122:	005b      	lsls	r3, r3, #1
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	4413      	add	r3, r2
 800d128:	881b      	ldrh	r3, [r3, #0]
 800d12a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 8096 	beq.w	800d260 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d136:	2b20      	cmp	r3, #32
 800d138:	d006      	beq.n	800d148 <create_name+0x254>
 800d13a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d13c:	2b2e      	cmp	r3, #46	; 0x2e
 800d13e:	d10a      	bne.n	800d156 <create_name+0x262>
 800d140:	69ba      	ldr	r2, [r7, #24]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	429a      	cmp	r2, r3
 800d146:	d006      	beq.n	800d156 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800d148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d14c:	f043 0303 	orr.w	r3, r3, #3
 800d150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d154:	e083      	b.n	800d25e <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d156:	6a3a      	ldr	r2, [r7, #32]
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d203      	bcs.n	800d166 <create_name+0x272>
 800d15e:	69ba      	ldr	r2, [r7, #24]
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	429a      	cmp	r2, r3
 800d164:	d123      	bne.n	800d1ae <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	2b0b      	cmp	r3, #11
 800d16a:	d106      	bne.n	800d17a <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800d16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d170:	f043 0303 	orr.w	r3, r3, #3
 800d174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d178:	e075      	b.n	800d266 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d17a:	69ba      	ldr	r2, [r7, #24]
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d005      	beq.n	800d18e <create_name+0x29a>
 800d182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d186:	f043 0303 	orr.w	r3, r3, #3
 800d18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	429a      	cmp	r2, r3
 800d194:	d866      	bhi.n	800d264 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	61bb      	str	r3, [r7, #24]
 800d19a:	2308      	movs	r3, #8
 800d19c:	623b      	str	r3, [r7, #32]
 800d19e:	230b      	movs	r3, #11
 800d1a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d1a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d1ac:	e057      	b.n	800d25e <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d1ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1b0:	2b7f      	cmp	r3, #127	; 0x7f
 800d1b2:	d914      	bls.n	800d1de <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f001 ff21 	bl	800f000 <ff_convert>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d1c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d004      	beq.n	800d1d2 <create_name+0x2de>
 800d1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ca:	3b80      	subs	r3, #128	; 0x80
 800d1cc:	4a15      	ldr	r2, [pc, #84]	; (800d224 <create_name+0x330>)
 800d1ce:	5cd3      	ldrb	r3, [r2, r3]
 800d1d0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d6:	f043 0302 	orr.w	r3, r3, #2
 800d1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d1de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <create_name+0x300>
 800d1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	480f      	ldr	r0, [pc, #60]	; (800d228 <create_name+0x334>)
 800d1ea:	f7fe fa63 	bl	800b6b4 <chk_chr>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d008      	beq.n	800d206 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d1f4:	235f      	movs	r3, #95	; 0x5f
 800d1f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1fc:	f043 0303 	orr.w	r3, r3, #3
 800d200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d204:	e021      	b.n	800d24a <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d208:	2b40      	cmp	r3, #64	; 0x40
 800d20a:	d90f      	bls.n	800d22c <create_name+0x338>
 800d20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d20e:	2b5a      	cmp	r3, #90	; 0x5a
 800d210:	d80c      	bhi.n	800d22c <create_name+0x338>
					b |= 2;
 800d212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d216:	f043 0302 	orr.w	r3, r3, #2
 800d21a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d21e:	e014      	b.n	800d24a <create_name+0x356>
 800d220:	08014038 	.word	0x08014038
 800d224:	080140c0 	.word	0x080140c0
 800d228:	08014044 	.word	0x08014044
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d22c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d22e:	2b60      	cmp	r3, #96	; 0x60
 800d230:	d90b      	bls.n	800d24a <create_name+0x356>
 800d232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d234:	2b7a      	cmp	r3, #122	; 0x7a
 800d236:	d808      	bhi.n	800d24a <create_name+0x356>
						b |= 1; w -= 0x20;
 800d238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d23c:	f043 0301 	orr.w	r3, r3, #1
 800d240:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d246:	3b20      	subs	r3, #32
 800d248:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	623a      	str	r2, [r7, #32]
 800d250:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d252:	b2d1      	uxtb	r1, r2
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	4413      	add	r3, r2
 800d258:	460a      	mov	r2, r1
 800d25a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d25e:	e75d      	b.n	800d11c <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800d260:	bf00      	nop
 800d262:	e000      	b.n	800d266 <create_name+0x372>
			if (si > di) break;			/* No extension */
 800d264:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d26c:	2be5      	cmp	r3, #229	; 0xe5
 800d26e:	d103      	bne.n	800d278 <create_name+0x384>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2205      	movs	r2, #5
 800d274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	2b08      	cmp	r3, #8
 800d27c:	d104      	bne.n	800d288 <create_name+0x394>
 800d27e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d28c:	f003 030c 	and.w	r3, r3, #12
 800d290:	2b0c      	cmp	r3, #12
 800d292:	d005      	beq.n	800d2a0 <create_name+0x3ac>
 800d294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d298:	f003 0303 	and.w	r3, r3, #3
 800d29c:	2b03      	cmp	r3, #3
 800d29e:	d105      	bne.n	800d2ac <create_name+0x3b8>
 800d2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2a4:	f043 0302 	orr.w	r3, r3, #2
 800d2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b0:	f003 0302 	and.w	r3, r3, #2
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d117      	bne.n	800d2e8 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d2b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2bc:	f003 0303 	and.w	r3, r3, #3
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d105      	bne.n	800d2d0 <create_name+0x3dc>
 800d2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2c8:	f043 0310 	orr.w	r3, r3, #16
 800d2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d2d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2d4:	f003 030c 	and.w	r3, r3, #12
 800d2d8:	2b04      	cmp	r3, #4
 800d2da:	d105      	bne.n	800d2e8 <create_name+0x3f4>
 800d2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2e0:	f043 0308 	orr.w	r3, r3, #8
 800d2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d2ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d2f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3728      	adds	r7, #40	; 0x28
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b086      	sub	sp, #24
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b2f      	cmp	r3, #47	; 0x2f
 800d316:	d00b      	beq.n	800d330 <follow_path+0x34>
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2b5c      	cmp	r3, #92	; 0x5c
 800d31e:	d007      	beq.n	800d330 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	69da      	ldr	r2, [r3, #28]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	609a      	str	r2, [r3, #8]
 800d328:	e00d      	b.n	800d346 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	3301      	adds	r3, #1
 800d32e:	603b      	str	r3, [r7, #0]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b2f      	cmp	r3, #47	; 0x2f
 800d336:	d0f8      	beq.n	800d32a <follow_path+0x2e>
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	2b5c      	cmp	r3, #92	; 0x5c
 800d33e:	d0f4      	beq.n	800d32a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	2200      	movs	r2, #0
 800d344:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b1f      	cmp	r3, #31
 800d34c:	d80a      	bhi.n	800d364 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2280      	movs	r2, #128	; 0x80
 800d352:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d356:	2100      	movs	r1, #0
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7fe ff50 	bl	800c1fe <dir_sdi>
 800d35e:	4603      	mov	r3, r0
 800d360:	75fb      	strb	r3, [r7, #23]
 800d362:	e05b      	b.n	800d41c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d364:	463b      	mov	r3, r7
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff fdc3 	bl	800cef4 <create_name>
 800d36e:	4603      	mov	r3, r0
 800d370:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d372:	7dfb      	ldrb	r3, [r7, #23]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d14c      	bne.n	800d412 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7ff fbb8 	bl	800caee <dir_find>
 800d37e:	4603      	mov	r3, r0
 800d380:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d388:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d01b      	beq.n	800d3c8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d390:	7dfb      	ldrb	r3, [r7, #23]
 800d392:	2b04      	cmp	r3, #4
 800d394:	d13f      	bne.n	800d416 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800d396:	7afb      	ldrb	r3, [r7, #11]
 800d398:	f003 0320 	and.w	r3, r3, #32
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00b      	beq.n	800d3b8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800d3a0:	7afb      	ldrb	r3, [r7, #11]
 800d3a2:	f003 0304 	and.w	r3, r3, #4
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d031      	beq.n	800d40e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2280      	movs	r2, #128	; 0x80
 800d3ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800d3b6:	e02e      	b.n	800d416 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d3b8:	7afb      	ldrb	r3, [r7, #11]
 800d3ba:	f003 0304 	and.w	r3, r3, #4
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d129      	bne.n	800d416 <follow_path+0x11a>
 800d3c2:	2305      	movs	r3, #5
 800d3c4:	75fb      	strb	r3, [r7, #23]
				break;
 800d3c6:	e026      	b.n	800d416 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3c8:	7afb      	ldrb	r3, [r7, #11]
 800d3ca:	f003 0304 	and.w	r3, r3, #4
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d123      	bne.n	800d41a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	799b      	ldrb	r3, [r3, #6]
 800d3d6:	f003 0310 	and.w	r3, r3, #16
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d102      	bne.n	800d3e4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800d3de:	2305      	movs	r3, #5
 800d3e0:	75fb      	strb	r3, [r7, #23]
 800d3e2:	e01b      	b.n	800d41c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	8992      	ldrh	r2, [r2, #12]
 800d3f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d3f6:	fb02 f200 	mul.w	r2, r2, r0
 800d3fa:	1a9b      	subs	r3, r3, r2
 800d3fc:	440b      	add	r3, r1
 800d3fe:	4619      	mov	r1, r3
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f7ff f8a2 	bl	800c54a <ld_clust>
 800d406:	4602      	mov	r2, r0
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	609a      	str	r2, [r3, #8]
 800d40c:	e7aa      	b.n	800d364 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800d40e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d410:	e7a8      	b.n	800d364 <follow_path+0x68>
			if (res != FR_OK) break;
 800d412:	bf00      	nop
 800d414:	e002      	b.n	800d41c <follow_path+0x120>
				break;
 800d416:	bf00      	nop
 800d418:	e000      	b.n	800d41c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d41a:	bf00      	nop
			}
		}
	}

	return res;
 800d41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d426:	b480      	push	{r7}
 800d428:	b087      	sub	sp, #28
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d42e:	f04f 33ff 	mov.w	r3, #4294967295
 800d432:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d031      	beq.n	800d4a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	617b      	str	r3, [r7, #20]
 800d442:	e002      	b.n	800d44a <get_ldnumber+0x24>
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	3301      	adds	r3, #1
 800d448:	617b      	str	r3, [r7, #20]
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	2b1f      	cmp	r3, #31
 800d450:	d903      	bls.n	800d45a <get_ldnumber+0x34>
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b3a      	cmp	r3, #58	; 0x3a
 800d458:	d1f4      	bne.n	800d444 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b3a      	cmp	r3, #58	; 0x3a
 800d460:	d11c      	bne.n	800d49c <get_ldnumber+0x76>
			tp = *path;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	60fa      	str	r2, [r7, #12]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	3b30      	subs	r3, #48	; 0x30
 800d472:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b09      	cmp	r3, #9
 800d478:	d80e      	bhi.n	800d498 <get_ldnumber+0x72>
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d10a      	bne.n	800d498 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d107      	bne.n	800d498 <get_ldnumber+0x72>
					vol = (int)i;
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	3301      	adds	r3, #1
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	e002      	b.n	800d4a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d49c:	2300      	movs	r3, #0
 800d49e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d4a0:	693b      	ldr	r3, [r7, #16]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	371c      	adds	r7, #28
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
	...

0800d4b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	70da      	strb	r2, [r3, #3]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7fe fabe 	bl	800ba4c <move_window>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <check_fs+0x2a>
 800d4d6:	2304      	movs	r3, #4
 800d4d8:	e038      	b.n	800d54c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	333c      	adds	r3, #60	; 0x3c
 800d4de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fe f802 	bl	800b4ec <ld_word>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d001      	beq.n	800d4f8 <check_fs+0x48>
 800d4f4:	2303      	movs	r3, #3
 800d4f6:	e029      	b.n	800d54c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4fe:	2be9      	cmp	r3, #233	; 0xe9
 800d500:	d009      	beq.n	800d516 <check_fs+0x66>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d508:	2beb      	cmp	r3, #235	; 0xeb
 800d50a:	d11e      	bne.n	800d54a <check_fs+0x9a>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d512:	2b90      	cmp	r3, #144	; 0x90
 800d514:	d119      	bne.n	800d54a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	333c      	adds	r3, #60	; 0x3c
 800d51a:	3336      	adds	r3, #54	; 0x36
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7fd fffd 	bl	800b51c <ld_dword>
 800d522:	4603      	mov	r3, r0
 800d524:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d528:	4a0a      	ldr	r2, [pc, #40]	; (800d554 <check_fs+0xa4>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d101      	bne.n	800d532 <check_fs+0x82>
 800d52e:	2300      	movs	r3, #0
 800d530:	e00c      	b.n	800d54c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	333c      	adds	r3, #60	; 0x3c
 800d536:	3352      	adds	r3, #82	; 0x52
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fd ffef 	bl	800b51c <ld_dword>
 800d53e:	4602      	mov	r2, r0
 800d540:	4b05      	ldr	r3, [pc, #20]	; (800d558 <check_fs+0xa8>)
 800d542:	429a      	cmp	r2, r3
 800d544:	d101      	bne.n	800d54a <check_fs+0x9a>
 800d546:	2300      	movs	r3, #0
 800d548:	e000      	b.n	800d54c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d54a:	2302      	movs	r3, #2
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	00544146 	.word	0x00544146
 800d558:	33544146 	.word	0x33544146

0800d55c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b096      	sub	sp, #88	; 0x58
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	2200      	movs	r2, #0
 800d56e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7ff ff58 	bl	800d426 <get_ldnumber>
 800d576:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	da01      	bge.n	800d582 <find_volume+0x26>
 800d57e:	230b      	movs	r3, #11
 800d580:	e26b      	b.n	800da5a <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d582:	4ab0      	ldr	r2, [pc, #704]	; (800d844 <find_volume+0x2e8>)
 800d584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d58a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d101      	bne.n	800d596 <find_volume+0x3a>
 800d592:	230c      	movs	r3, #12
 800d594:	e261      	b.n	800da5a <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d59a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d59c:	79fb      	ldrb	r3, [r7, #7]
 800d59e:	f023 0301 	bic.w	r3, r3, #1
 800d5a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d01a      	beq.n	800d5e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ae:	785b      	ldrb	r3, [r3, #1]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7fd fefd 	bl	800b3b0 <disk_status>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d5bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10c      	bne.n	800d5e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d5c8:	79fb      	ldrb	r3, [r7, #7]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d007      	beq.n	800d5de <find_volume+0x82>
 800d5ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5d2:	f003 0304 	and.w	r3, r3, #4
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d001      	beq.n	800d5de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d5da:	230a      	movs	r3, #10
 800d5dc:	e23d      	b.n	800da5a <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e23b      	b.n	800da5a <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f2:	785b      	ldrb	r3, [r3, #1]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fd fef5 	bl	800b3e4 <disk_initialize>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d604:	f003 0301 	and.w	r3, r3, #1
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d60c:	2303      	movs	r3, #3
 800d60e:	e224      	b.n	800da5a <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d610:	79fb      	ldrb	r3, [r7, #7]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d007      	beq.n	800d626 <find_volume+0xca>
 800d616:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d61a:	f003 0304 	and.w	r3, r3, #4
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d001      	beq.n	800d626 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d622:	230a      	movs	r3, #10
 800d624:	e219      	b.n	800da5a <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	7858      	ldrb	r0, [r3, #1]
 800d62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62c:	330c      	adds	r3, #12
 800d62e:	461a      	mov	r2, r3
 800d630:	2102      	movs	r1, #2
 800d632:	f7fd ff3d 	bl	800b4b0 <disk_ioctl>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d001      	beq.n	800d640 <find_volume+0xe4>
 800d63c:	2301      	movs	r3, #1
 800d63e:	e20c      	b.n	800da5a <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d642:	899b      	ldrh	r3, [r3, #12]
 800d644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d648:	d80d      	bhi.n	800d666 <find_volume+0x10a>
 800d64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64c:	899b      	ldrh	r3, [r3, #12]
 800d64e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d652:	d308      	bcc.n	800d666 <find_volume+0x10a>
 800d654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d656:	899b      	ldrh	r3, [r3, #12]
 800d658:	461a      	mov	r2, r3
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	899b      	ldrh	r3, [r3, #12]
 800d65e:	3b01      	subs	r3, #1
 800d660:	4013      	ands	r3, r2
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <find_volume+0x10e>
 800d666:	2301      	movs	r3, #1
 800d668:	e1f7      	b.n	800da5a <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d66e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d672:	f7ff ff1d 	bl	800d4b0 <check_fs>
 800d676:	4603      	mov	r3, r0
 800d678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d67c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d680:	2b02      	cmp	r3, #2
 800d682:	d14b      	bne.n	800d71c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d684:	2300      	movs	r3, #0
 800d686:	643b      	str	r3, [r7, #64]	; 0x40
 800d688:	e01f      	b.n	800d6ca <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d692:	011b      	lsls	r3, r3, #4
 800d694:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d698:	4413      	add	r3, r2
 800d69a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69e:	3304      	adds	r3, #4
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d006      	beq.n	800d6b4 <find_volume+0x158>
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fd ff36 	bl	800b51c <ld_dword>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	e000      	b.n	800d6b6 <find_volume+0x15a>
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d6be:	440b      	add	r3, r1
 800d6c0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	643b      	str	r3, [r7, #64]	; 0x40
 800d6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6cc:	2b03      	cmp	r3, #3
 800d6ce:	d9dc      	bls.n	800d68a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d002      	beq.n	800d6e0 <find_volume+0x184>
 800d6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d6e8:	4413      	add	r3, r2
 800d6ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d6ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d005      	beq.n	800d702 <find_volume+0x1a6>
 800d6f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6fa:	f7ff fed9 	bl	800d4b0 <check_fs>
 800d6fe:	4603      	mov	r3, r0
 800d700:	e000      	b.n	800d704 <find_volume+0x1a8>
 800d702:	2303      	movs	r3, #3
 800d704:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d905      	bls.n	800d71c <find_volume+0x1c0>
 800d710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d712:	3301      	adds	r3, #1
 800d714:	643b      	str	r3, [r7, #64]	; 0x40
 800d716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d718:	2b03      	cmp	r3, #3
 800d71a:	d9e1      	bls.n	800d6e0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d71c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d720:	2b04      	cmp	r3, #4
 800d722:	d101      	bne.n	800d728 <find_volume+0x1cc>
 800d724:	2301      	movs	r3, #1
 800d726:	e198      	b.n	800da5a <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d901      	bls.n	800d734 <find_volume+0x1d8>
 800d730:	230d      	movs	r3, #13
 800d732:	e192      	b.n	800da5a <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d736:	333c      	adds	r3, #60	; 0x3c
 800d738:	330b      	adds	r3, #11
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fd fed6 	bl	800b4ec <ld_word>
 800d740:	4603      	mov	r3, r0
 800d742:	461a      	mov	r2, r3
 800d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d746:	899b      	ldrh	r3, [r3, #12]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d001      	beq.n	800d750 <find_volume+0x1f4>
 800d74c:	230d      	movs	r3, #13
 800d74e:	e184      	b.n	800da5a <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d752:	333c      	adds	r3, #60	; 0x3c
 800d754:	3316      	adds	r3, #22
 800d756:	4618      	mov	r0, r3
 800d758:	f7fd fec8 	bl	800b4ec <ld_word>
 800d75c:	4603      	mov	r3, r0
 800d75e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d762:	2b00      	cmp	r3, #0
 800d764:	d106      	bne.n	800d774 <find_volume+0x218>
 800d766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d768:	333c      	adds	r3, #60	; 0x3c
 800d76a:	3324      	adds	r3, #36	; 0x24
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fd fed5 	bl	800b51c <ld_dword>
 800d772:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d778:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	789b      	ldrb	r3, [r3, #2]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d005      	beq.n	800d798 <find_volume+0x23c>
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	789b      	ldrb	r3, [r3, #2]
 800d790:	2b02      	cmp	r3, #2
 800d792:	d001      	beq.n	800d798 <find_volume+0x23c>
 800d794:	230d      	movs	r3, #13
 800d796:	e160      	b.n	800da5a <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79a:	789b      	ldrb	r3, [r3, #2]
 800d79c:	461a      	mov	r2, r3
 800d79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7a0:	fb02 f303 	mul.w	r3, r2, r3
 800d7a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b4:	895b      	ldrh	r3, [r3, #10]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d008      	beq.n	800d7cc <find_volume+0x270>
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	895b      	ldrh	r3, [r3, #10]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c2:	895b      	ldrh	r3, [r3, #10]
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d001      	beq.n	800d7d0 <find_volume+0x274>
 800d7cc:	230d      	movs	r3, #13
 800d7ce:	e144      	b.n	800da5a <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d2:	333c      	adds	r3, #60	; 0x3c
 800d7d4:	3311      	adds	r3, #17
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fd fe88 	bl	800b4ec <ld_word>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	461a      	mov	r2, r3
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e6:	891b      	ldrh	r3, [r3, #8]
 800d7e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7ea:	8992      	ldrh	r2, [r2, #12]
 800d7ec:	0952      	lsrs	r2, r2, #5
 800d7ee:	b292      	uxth	r2, r2
 800d7f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7f4:	fb02 f201 	mul.w	r2, r2, r1
 800d7f8:	1a9b      	subs	r3, r3, r2
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <find_volume+0x2a8>
 800d800:	230d      	movs	r3, #13
 800d802:	e12a      	b.n	800da5a <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d806:	333c      	adds	r3, #60	; 0x3c
 800d808:	3313      	adds	r3, #19
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fd fe6e 	bl	800b4ec <ld_word>
 800d810:	4603      	mov	r3, r0
 800d812:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <find_volume+0x2cc>
 800d81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81c:	333c      	adds	r3, #60	; 0x3c
 800d81e:	3320      	adds	r3, #32
 800d820:	4618      	mov	r0, r3
 800d822:	f7fd fe7b 	bl	800b51c <ld_dword>
 800d826:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82a:	333c      	adds	r3, #60	; 0x3c
 800d82c:	330e      	adds	r3, #14
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fd fe5c 	bl	800b4ec <ld_word>
 800d834:	4603      	mov	r3, r0
 800d836:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d104      	bne.n	800d848 <find_volume+0x2ec>
 800d83e:	230d      	movs	r3, #13
 800d840:	e10b      	b.n	800da5a <find_volume+0x4fe>
 800d842:	bf00      	nop
 800d844:	20000580 	.word	0x20000580

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d848:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d84c:	4413      	add	r3, r2
 800d84e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d850:	8911      	ldrh	r1, [r2, #8]
 800d852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d854:	8992      	ldrh	r2, [r2, #12]
 800d856:	0952      	lsrs	r2, r2, #5
 800d858:	b292      	uxth	r2, r2
 800d85a:	fbb1 f2f2 	udiv	r2, r1, r2
 800d85e:	b292      	uxth	r2, r2
 800d860:	4413      	add	r3, r2
 800d862:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d868:	429a      	cmp	r2, r3
 800d86a:	d201      	bcs.n	800d870 <find_volume+0x314>
 800d86c:	230d      	movs	r3, #13
 800d86e:	e0f4      	b.n	800da5a <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d874:	1ad3      	subs	r3, r2, r3
 800d876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d878:	8952      	ldrh	r2, [r2, #10]
 800d87a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d87e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <find_volume+0x32e>
 800d886:	230d      	movs	r3, #13
 800d888:	e0e7      	b.n	800da5a <find_volume+0x4fe>
		fmt = FS_FAT32;
 800d88a:	2303      	movs	r3, #3
 800d88c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d896:	4293      	cmp	r3, r2
 800d898:	d802      	bhi.n	800d8a0 <find_volume+0x344>
 800d89a:	2302      	movs	r3, #2
 800d89c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d802      	bhi.n	800d8b0 <find_volume+0x354>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	1c9a      	adds	r2, r3, #2
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8bc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d8be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c2:	441a      	add	r2, r3
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d8c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	441a      	add	r2, r3
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d0:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800d8d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d11e      	bne.n	800d918 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8dc:	333c      	adds	r3, #60	; 0x3c
 800d8de:	332a      	adds	r3, #42	; 0x2a
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fd fe03 	bl	800b4ec <ld_word>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d001      	beq.n	800d8f0 <find_volume+0x394>
 800d8ec:	230d      	movs	r3, #13
 800d8ee:	e0b4      	b.n	800da5a <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f2:	891b      	ldrh	r3, [r3, #8]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <find_volume+0x3a0>
 800d8f8:	230d      	movs	r3, #13
 800d8fa:	e0ae      	b.n	800da5a <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	333c      	adds	r3, #60	; 0x3c
 800d900:	332c      	adds	r3, #44	; 0x2c
 800d902:	4618      	mov	r0, r3
 800d904:	f7fd fe0a 	bl	800b51c <ld_dword>
 800d908:	4602      	mov	r2, r0
 800d90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d910:	6a1b      	ldr	r3, [r3, #32]
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	647b      	str	r3, [r7, #68]	; 0x44
 800d916:	e01f      	b.n	800d958 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91a:	891b      	ldrh	r3, [r3, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <find_volume+0x3c8>
 800d920:	230d      	movs	r3, #13
 800d922:	e09a      	b.n	800da5a <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d92a:	441a      	add	r2, r3
 800d92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d934:	2b02      	cmp	r3, #2
 800d936:	d103      	bne.n	800d940 <find_volume+0x3e4>
 800d938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	005b      	lsls	r3, r3, #1
 800d93e:	e00a      	b.n	800d956 <find_volume+0x3fa>
 800d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d942:	6a1a      	ldr	r2, [r3, #32]
 800d944:	4613      	mov	r3, r2
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	4413      	add	r3, r2
 800d94a:	085a      	lsrs	r2, r3, #1
 800d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94e:	6a1b      	ldr	r3, [r3, #32]
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d956:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	899b      	ldrh	r3, [r3, #12]
 800d960:	4619      	mov	r1, r3
 800d962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d964:	440b      	add	r3, r1
 800d966:	3b01      	subs	r3, #1
 800d968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d96a:	8989      	ldrh	r1, [r1, #12]
 800d96c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d970:	429a      	cmp	r2, r3
 800d972:	d201      	bcs.n	800d978 <find_volume+0x41c>
 800d974:	230d      	movs	r3, #13
 800d976:	e070      	b.n	800da5a <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97a:	f04f 32ff 	mov.w	r2, #4294967295
 800d97e:	619a      	str	r2, [r3, #24]
 800d980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d982:	699a      	ldr	r2, [r3, #24]
 800d984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d986:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98a:	2280      	movs	r2, #128	; 0x80
 800d98c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d98e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d992:	2b03      	cmp	r3, #3
 800d994:	d149      	bne.n	800da2a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d998:	333c      	adds	r3, #60	; 0x3c
 800d99a:	3330      	adds	r3, #48	; 0x30
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fd fda5 	bl	800b4ec <ld_word>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d140      	bne.n	800da2a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9b0:	f7fe f84c 	bl	800ba4c <move_window>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d137      	bne.n	800da2a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800d9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9bc:	2200      	movs	r2, #0
 800d9be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	333c      	adds	r3, #60	; 0x3c
 800d9c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fd fd8f 	bl	800b4ec <ld_word>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d127      	bne.n	800da2a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	333c      	adds	r3, #60	; 0x3c
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fd fd9c 	bl	800b51c <ld_dword>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	4b1f      	ldr	r3, [pc, #124]	; (800da64 <find_volume+0x508>)
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d11e      	bne.n	800da2a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ee:	333c      	adds	r3, #60	; 0x3c
 800d9f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fd fd91 	bl	800b51c <ld_dword>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	4b1a      	ldr	r3, [pc, #104]	; (800da68 <find_volume+0x50c>)
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d113      	bne.n	800da2a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	333c      	adds	r3, #60	; 0x3c
 800da06:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd fd86 	bl	800b51c <ld_dword>
 800da10:	4602      	mov	r2, r0
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da18:	333c      	adds	r3, #60	; 0x3c
 800da1a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800da1e:	4618      	mov	r0, r3
 800da20:	f7fd fd7c 	bl	800b51c <ld_dword>
 800da24:	4602      	mov	r2, r0
 800da26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da28:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800da30:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da32:	4b0e      	ldr	r3, [pc, #56]	; (800da6c <find_volume+0x510>)
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	3301      	adds	r3, #1
 800da38:	b29a      	uxth	r2, r3
 800da3a:	4b0c      	ldr	r3, [pc, #48]	; (800da6c <find_volume+0x510>)
 800da3c:	801a      	strh	r2, [r3, #0]
 800da3e:	4b0b      	ldr	r3, [pc, #44]	; (800da6c <find_volume+0x510>)
 800da40:	881a      	ldrh	r2, [r3, #0]
 800da42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da44:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	4a09      	ldr	r2, [pc, #36]	; (800da70 <find_volume+0x514>)
 800da4a:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	2200      	movs	r2, #0
 800da50:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da54:	f7fd ff92 	bl	800b97c <clear_lock>
#endif
	return FR_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3758      	adds	r7, #88	; 0x58
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	41615252 	.word	0x41615252
 800da68:	61417272 	.word	0x61417272
 800da6c:	20000584 	.word	0x20000584
 800da70:	200005a8 	.word	0x200005a8

0800da74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800da7e:	2309      	movs	r3, #9
 800da80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d01c      	beq.n	800dac2 <validate+0x4e>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d018      	beq.n	800dac2 <validate+0x4e>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d013      	beq.n	800dac2 <validate+0x4e>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	889a      	ldrh	r2, [r3, #4]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	88db      	ldrh	r3, [r3, #6]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d10c      	bne.n	800dac2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	785b      	ldrb	r3, [r3, #1]
 800daae:	4618      	mov	r0, r3
 800dab0:	f7fd fc7e 	bl	800b3b0 <disk_status>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <validate+0x4e>
			res = FR_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dac2:	7bfb      	ldrb	r3, [r7, #15]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d102      	bne.n	800dace <validate+0x5a>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	e000      	b.n	800dad0 <validate+0x5c>
 800dace:	2300      	movs	r3, #0
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	6013      	str	r3, [r2, #0]
	return res;
 800dad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
	...

0800dae0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	4613      	mov	r3, r2
 800daec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800daf2:	f107 0310 	add.w	r3, r7, #16
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff fc95 	bl	800d426 <get_ldnumber>
 800dafc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	2b00      	cmp	r3, #0
 800db02:	da01      	bge.n	800db08 <f_mount+0x28>
 800db04:	230b      	movs	r3, #11
 800db06:	e02b      	b.n	800db60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db08:	4a17      	ldr	r2, [pc, #92]	; (800db68 <f_mount+0x88>)
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d005      	beq.n	800db24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db18:	69b8      	ldr	r0, [r7, #24]
 800db1a:	f7fd ff2f 	bl	800b97c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d002      	beq.n	800db30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	490d      	ldr	r1, [pc, #52]	; (800db68 <f_mount+0x88>)
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <f_mount+0x66>
 800db40:	79fb      	ldrb	r3, [r7, #7]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d001      	beq.n	800db4a <f_mount+0x6a>
 800db46:	2300      	movs	r3, #0
 800db48:	e00a      	b.n	800db60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db4a:	f107 010c 	add.w	r1, r7, #12
 800db4e:	f107 0308 	add.w	r3, r7, #8
 800db52:	2200      	movs	r2, #0
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fd01 	bl	800d55c <find_volume>
 800db5a:	4603      	mov	r3, r0
 800db5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3720      	adds	r7, #32
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	20000580 	.word	0x20000580

0800db6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b09a      	sub	sp, #104	; 0x68
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	4613      	mov	r3, r2
 800db78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <f_open+0x18>
 800db80:	2309      	movs	r3, #9
 800db82:	e1bb      	b.n	800defc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800db8c:	79fa      	ldrb	r2, [r7, #7]
 800db8e:	f107 0114 	add.w	r1, r7, #20
 800db92:	f107 0308 	add.w	r3, r7, #8
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff fce0 	bl	800d55c <find_volume>
 800db9c:	4603      	mov	r3, r0
 800db9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800dba2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f040 819f 	bne.w	800deea <f_open+0x37e>
		dj.obj.fs = fs;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	f107 0318 	add.w	r3, r7, #24
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fb9f 	bl	800d2fc <follow_path>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dbc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d11a      	bne.n	800dc02 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dbcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dbd0:	b25b      	sxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	da03      	bge.n	800dbde <f_open+0x72>
				res = FR_INVALID_NAME;
 800dbd6:	2306      	movs	r3, #6
 800dbd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dbdc:	e011      	b.n	800dc02 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbde:	79fb      	ldrb	r3, [r7, #7]
 800dbe0:	f023 0301 	bic.w	r3, r3, #1
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	bf14      	ite	ne
 800dbe8:	2301      	movne	r3, #1
 800dbea:	2300      	moveq	r3, #0
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f107 0318 	add.w	r3, r7, #24
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd fd78 	bl	800b6ec <chk_lock>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	f003 031c 	and.w	r3, r3, #28
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d07f      	beq.n	800dd0c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dc0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d017      	beq.n	800dc44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc18:	2b04      	cmp	r3, #4
 800dc1a:	d10e      	bne.n	800dc3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc1c:	f7fd fdc2 	bl	800b7a4 <enq_lock>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d006      	beq.n	800dc34 <f_open+0xc8>
 800dc26:	f107 0318 	add.w	r3, r7, #24
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff f820 	bl	800cc70 <dir_register>
 800dc30:	4603      	mov	r3, r0
 800dc32:	e000      	b.n	800dc36 <f_open+0xca>
 800dc34:	2312      	movs	r3, #18
 800dc36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc3a:	79fb      	ldrb	r3, [r7, #7]
 800dc3c:	f043 0308 	orr.w	r3, r3, #8
 800dc40:	71fb      	strb	r3, [r7, #7]
 800dc42:	e010      	b.n	800dc66 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc44:	7fbb      	ldrb	r3, [r7, #30]
 800dc46:	f003 0311 	and.w	r3, r3, #17
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <f_open+0xea>
					res = FR_DENIED;
 800dc4e:	2307      	movs	r3, #7
 800dc50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dc54:	e007      	b.n	800dc66 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc56:	79fb      	ldrb	r3, [r7, #7]
 800dc58:	f003 0304 	and.w	r3, r3, #4
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <f_open+0xfa>
 800dc60:	2308      	movs	r3, #8
 800dc62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d168      	bne.n	800dd40 <f_open+0x1d4>
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	f003 0308 	and.w	r3, r3, #8
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d063      	beq.n	800dd40 <f_open+0x1d4>
				dw = GET_FATTIME();
 800dc78:	f7fd f94a 	bl	800af10 <get_fattime>
 800dc7c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc80:	330e      	adds	r3, #14
 800dc82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fd fc87 	bl	800b598 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8c:	3316      	adds	r3, #22
 800dc8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fd fc81 	bl	800b598 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc98:	330b      	adds	r3, #11
 800dc9a:	2220      	movs	r2, #32
 800dc9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dca2:	4611      	mov	r1, r2
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fe fc50 	bl	800c54a <ld_clust>
 800dcaa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fe fc68 	bl	800c588 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcba:	331c      	adds	r3, #28
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fd fc6a 	bl	800b598 <st_dword>
					fs->wflag = 1;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dcca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d037      	beq.n	800dd40 <f_open+0x1d4>
						dw = fs->winsect;
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dcd6:	f107 0318 	add.w	r3, r7, #24
 800dcda:	2200      	movs	r2, #0
 800dcdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe f958 	bl	800bf94 <remove_chain>
 800dce4:	4603      	mov	r3, r0
 800dce6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dcea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d126      	bne.n	800dd40 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fd fea8 	bl	800ba4c <move_window>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd06:	3a01      	subs	r2, #1
 800dd08:	615a      	str	r2, [r3, #20]
 800dd0a:	e019      	b.n	800dd40 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d115      	bne.n	800dd40 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dd14:	7fbb      	ldrb	r3, [r7, #30]
 800dd16:	f003 0310 	and.w	r3, r3, #16
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <f_open+0x1ba>
					res = FR_NO_FILE;
 800dd1e:	2304      	movs	r3, #4
 800dd20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dd24:	e00c      	b.n	800dd40 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dd26:	79fb      	ldrb	r3, [r7, #7]
 800dd28:	f003 0302 	and.w	r3, r3, #2
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d007      	beq.n	800dd40 <f_open+0x1d4>
 800dd30:	7fbb      	ldrb	r3, [r7, #30]
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d002      	beq.n	800dd40 <f_open+0x1d4>
						res = FR_DENIED;
 800dd3a:	2307      	movs	r3, #7
 800dd3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dd40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d128      	bne.n	800dd9a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dd48:	79fb      	ldrb	r3, [r7, #7]
 800dd4a:	f003 0308 	and.w	r3, r3, #8
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d003      	beq.n	800dd5a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dd52:	79fb      	ldrb	r3, [r7, #7]
 800dd54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dd62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd68:	79fb      	ldrb	r3, [r7, #7]
 800dd6a:	f023 0301 	bic.w	r3, r3, #1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	bf14      	ite	ne
 800dd72:	2301      	movne	r3, #1
 800dd74:	2300      	moveq	r3, #0
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	461a      	mov	r2, r3
 800dd7a:	f107 0318 	add.w	r3, r7, #24
 800dd7e:	4611      	mov	r1, r2
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fd fd31 	bl	800b7e8 <inc_lock>
 800dd86:	4602      	mov	r2, r0
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d102      	bne.n	800dd9a <f_open+0x22e>
 800dd94:	2302      	movs	r3, #2
 800dd96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dd9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f040 80a3 	bne.w	800deea <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dda8:	4611      	mov	r1, r2
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fe fbcd 	bl	800c54a <ld_clust>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb8:	331c      	adds	r3, #28
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fd fbae 	bl	800b51c <ld_dword>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	88da      	ldrh	r2, [r3, #6]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	79fa      	ldrb	r2, [r7, #7]
 800ddde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2200      	movs	r2, #0
 800dde4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	3330      	adds	r3, #48	; 0x30
 800ddf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fd fc18 	bl	800b632 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800de02:	79fb      	ldrb	r3, [r7, #7]
 800de04:	f003 0320 	and.w	r3, r3, #32
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d06e      	beq.n	800deea <f_open+0x37e>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d06a      	beq.n	800deea <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	895b      	ldrh	r3, [r3, #10]
 800de20:	461a      	mov	r2, r3
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	899b      	ldrh	r3, [r3, #12]
 800de26:	fb03 f302 	mul.w	r3, r3, r2
 800de2a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de38:	e016      	b.n	800de68 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fd fec1 	bl	800bbc6 <get_fat>
 800de44:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800de46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d802      	bhi.n	800de52 <f_open+0x2e6>
 800de4c:	2302      	movs	r3, #2
 800de4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de58:	d102      	bne.n	800de60 <f_open+0x2f4>
 800de5a:	2301      	movs	r3, #1
 800de5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d103      	bne.n	800de78 <f_open+0x30c>
 800de70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de74:	429a      	cmp	r2, r3
 800de76:	d8e0      	bhi.n	800de3a <f_open+0x2ce>
				}
				fp->clust = clst;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de7c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de82:	2b00      	cmp	r3, #0
 800de84:	d131      	bne.n	800deea <f_open+0x37e>
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	899b      	ldrh	r3, [r3, #12]
 800de8a:	461a      	mov	r2, r3
 800de8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800de92:	fb02 f201 	mul.w	r2, r2, r1
 800de96:	1a9b      	subs	r3, r3, r2
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d026      	beq.n	800deea <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fd fe71 	bl	800bb88 <clust2sect>
 800dea6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d103      	bne.n	800deb6 <f_open+0x34a>
						res = FR_INT_ERR;
 800deae:	2302      	movs	r3, #2
 800deb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800deb4:	e019      	b.n	800deea <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	899b      	ldrh	r3, [r3, #12]
 800deba:	461a      	mov	r2, r3
 800debc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800debe:	fbb3 f2f2 	udiv	r2, r3, r2
 800dec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dec4:	441a      	add	r2, r3
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	7858      	ldrb	r0, [r3, #1]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6a1a      	ldr	r2, [r3, #32]
 800ded8:	2301      	movs	r3, #1
 800deda:	f7fd faa9 	bl	800b430 <disk_read>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <f_open+0x37e>
 800dee4:	2301      	movs	r3, #1
 800dee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800deea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800deee:	2b00      	cmp	r3, #0
 800def0:	d002      	beq.n	800def8 <f_open+0x38c>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800def8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800defc:	4618      	mov	r0, r3
 800defe:	3768      	adds	r7, #104	; 0x68
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08e      	sub	sp, #56	; 0x38
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f107 0214 	add.w	r2, r7, #20
 800df22:	4611      	mov	r1, r2
 800df24:	4618      	mov	r0, r3
 800df26:	f7ff fda5 	bl	800da74 <validate>
 800df2a:	4603      	mov	r3, r0
 800df2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df34:	2b00      	cmp	r3, #0
 800df36:	d107      	bne.n	800df48 <f_read+0x44>
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	7d5b      	ldrb	r3, [r3, #21]
 800df3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800df40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <f_read+0x4a>
 800df48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df4c:	e135      	b.n	800e1ba <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	7d1b      	ldrb	r3, [r3, #20]
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d101      	bne.n	800df5e <f_read+0x5a>
 800df5a:	2307      	movs	r3, #7
 800df5c:	e12d      	b.n	800e1ba <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	68da      	ldr	r2, [r3, #12]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	429a      	cmp	r2, r3
 800df70:	f240 811e 	bls.w	800e1b0 <f_read+0x2ac>
 800df74:	6a3b      	ldr	r3, [r7, #32]
 800df76:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800df78:	e11a      	b.n	800e1b0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	699b      	ldr	r3, [r3, #24]
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	8992      	ldrh	r2, [r2, #12]
 800df82:	fbb3 f1f2 	udiv	r1, r3, r2
 800df86:	fb02 f201 	mul.w	r2, r2, r1
 800df8a:	1a9b      	subs	r3, r3, r2
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f040 80d5 	bne.w	800e13c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	699b      	ldr	r3, [r3, #24]
 800df96:	697a      	ldr	r2, [r7, #20]
 800df98:	8992      	ldrh	r2, [r2, #12]
 800df9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800df9e:	697a      	ldr	r2, [r7, #20]
 800dfa0:	8952      	ldrh	r2, [r2, #10]
 800dfa2:	3a01      	subs	r2, #1
 800dfa4:	4013      	ands	r3, r2
 800dfa6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d12f      	bne.n	800e00e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	699b      	ldr	r3, [r3, #24]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d103      	bne.n	800dfbe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	633b      	str	r3, [r7, #48]	; 0x30
 800dfbc:	e013      	b.n	800dfe6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d007      	beq.n	800dfd6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f7fe f8de 	bl	800c18e <clmt_clust>
 800dfd2:	6338      	str	r0, [r7, #48]	; 0x30
 800dfd4:	e007      	b.n	800dfe6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	69db      	ldr	r3, [r3, #28]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	4610      	mov	r0, r2
 800dfe0:	f7fd fdf1 	bl	800bbc6 <get_fat>
 800dfe4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d804      	bhi.n	800dff6 <f_read+0xf2>
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2202      	movs	r2, #2
 800dff0:	755a      	strb	r2, [r3, #21]
 800dff2:	2302      	movs	r3, #2
 800dff4:	e0e1      	b.n	800e1ba <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffc:	d104      	bne.n	800e008 <f_read+0x104>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2201      	movs	r2, #1
 800e002:	755a      	strb	r2, [r3, #21]
 800e004:	2301      	movs	r3, #1
 800e006:	e0d8      	b.n	800e1ba <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e00c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	4619      	mov	r1, r3
 800e016:	4610      	mov	r0, r2
 800e018:	f7fd fdb6 	bl	800bb88 <clust2sect>
 800e01c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d104      	bne.n	800e02e <f_read+0x12a>
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2202      	movs	r2, #2
 800e028:	755a      	strb	r2, [r3, #21]
 800e02a:	2302      	movs	r3, #2
 800e02c:	e0c5      	b.n	800e1ba <f_read+0x2b6>
			sect += csect;
 800e02e:	69ba      	ldr	r2, [r7, #24]
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	4413      	add	r3, r2
 800e034:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	899b      	ldrh	r3, [r3, #12]
 800e03a:	461a      	mov	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e042:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	2b00      	cmp	r3, #0
 800e048:	d041      	beq.n	800e0ce <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04e:	4413      	add	r3, r2
 800e050:	697a      	ldr	r2, [r7, #20]
 800e052:	8952      	ldrh	r2, [r2, #10]
 800e054:	4293      	cmp	r3, r2
 800e056:	d905      	bls.n	800e064 <f_read+0x160>
					cc = fs->csize - csect;
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	895b      	ldrh	r3, [r3, #10]
 800e05c:	461a      	mov	r2, r3
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	7858      	ldrb	r0, [r3, #1]
 800e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06a:	69ba      	ldr	r2, [r7, #24]
 800e06c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e06e:	f7fd f9df 	bl	800b430 <disk_read>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d004      	beq.n	800e082 <f_read+0x17e>
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2201      	movs	r2, #1
 800e07c:	755a      	strb	r2, [r3, #21]
 800e07e:	2301      	movs	r3, #1
 800e080:	e09b      	b.n	800e1ba <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	7d1b      	ldrb	r3, [r3, #20]
 800e086:	b25b      	sxtb	r3, r3
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da18      	bge.n	800e0be <f_read+0x1ba>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6a1a      	ldr	r2, [r3, #32]
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e096:	429a      	cmp	r2, r3
 800e098:	d911      	bls.n	800e0be <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6a1a      	ldr	r2, [r3, #32]
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	8992      	ldrh	r2, [r2, #12]
 800e0a6:	fb02 f303 	mul.w	r3, r2, r3
 800e0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ac:	18d0      	adds	r0, r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	899b      	ldrh	r3, [r3, #12]
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	f7fd fa99 	bl	800b5f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c6:	fb02 f303 	mul.w	r3, r2, r3
 800e0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e0cc:	e05c      	b.n	800e188 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	69ba      	ldr	r2, [r7, #24]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d02e      	beq.n	800e136 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	7d1b      	ldrb	r3, [r3, #20]
 800e0dc:	b25b      	sxtb	r3, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da18      	bge.n	800e114 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	7858      	ldrb	r0, [r3, #1]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6a1a      	ldr	r2, [r3, #32]
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f7fd f9bd 	bl	800b470 <disk_write>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d004      	beq.n	800e106 <f_read+0x202>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2201      	movs	r2, #1
 800e100:	755a      	strb	r2, [r3, #21]
 800e102:	2301      	movs	r3, #1
 800e104:	e059      	b.n	800e1ba <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	7d1b      	ldrb	r3, [r3, #20]
 800e10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	7858      	ldrb	r0, [r3, #1]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e11e:	2301      	movs	r3, #1
 800e120:	69ba      	ldr	r2, [r7, #24]
 800e122:	f7fd f985 	bl	800b430 <disk_read>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d004      	beq.n	800e136 <f_read+0x232>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2201      	movs	r2, #1
 800e130:	755a      	strb	r2, [r3, #21]
 800e132:	2301      	movs	r3, #1
 800e134:	e041      	b.n	800e1ba <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	69ba      	ldr	r2, [r7, #24]
 800e13a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	899b      	ldrh	r3, [r3, #12]
 800e140:	4618      	mov	r0, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	699b      	ldr	r3, [r3, #24]
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	8992      	ldrh	r2, [r2, #12]
 800e14a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e14e:	fb02 f201 	mul.w	r2, r2, r1
 800e152:	1a9b      	subs	r3, r3, r2
 800e154:	1ac3      	subs	r3, r0, r3
 800e156:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d901      	bls.n	800e164 <f_read+0x260>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	699b      	ldr	r3, [r3, #24]
 800e16e:	697a      	ldr	r2, [r7, #20]
 800e170:	8992      	ldrh	r2, [r2, #12]
 800e172:	fbb3 f0f2 	udiv	r0, r3, r2
 800e176:	fb02 f200 	mul.w	r2, r2, r0
 800e17a:	1a9b      	subs	r3, r3, r2
 800e17c:	440b      	add	r3, r1
 800e17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e180:	4619      	mov	r1, r3
 800e182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e184:	f7fd fa34 	bl	800b5f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18c:	4413      	add	r3, r2
 800e18e:	627b      	str	r3, [r7, #36]	; 0x24
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	699a      	ldr	r2, [r3, #24]
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	441a      	add	r2, r3
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	619a      	str	r2, [r3, #24]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	441a      	add	r2, r3
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f47f aee1 	bne.w	800df7a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3738      	adds	r7, #56	; 0x38
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b08c      	sub	sp, #48	; 0x30
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	60b9      	str	r1, [r7, #8]
 800e1cc:	607a      	str	r2, [r7, #4]
 800e1ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f107 0210 	add.w	r2, r7, #16
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff fc46 	bl	800da74 <validate>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d107      	bne.n	800e206 <f_write+0x44>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	7d5b      	ldrb	r3, [r3, #21]
 800e1fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e1fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e202:	2b00      	cmp	r3, #0
 800e204:	d002      	beq.n	800e20c <f_write+0x4a>
 800e206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e20a:	e16a      	b.n	800e4e2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	7d1b      	ldrb	r3, [r3, #20]
 800e210:	f003 0302 	and.w	r3, r3, #2
 800e214:	2b00      	cmp	r3, #0
 800e216:	d101      	bne.n	800e21c <f_write+0x5a>
 800e218:	2307      	movs	r3, #7
 800e21a:	e162      	b.n	800e4e2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	699a      	ldr	r2, [r3, #24]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	441a      	add	r2, r3
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	429a      	cmp	r2, r3
 800e22a:	f080 814c 	bcs.w	800e4c6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	43db      	mvns	r3, r3
 800e234:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e236:	e146      	b.n	800e4c6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	693a      	ldr	r2, [r7, #16]
 800e23e:	8992      	ldrh	r2, [r2, #12]
 800e240:	fbb3 f1f2 	udiv	r1, r3, r2
 800e244:	fb02 f201 	mul.w	r2, r2, r1
 800e248:	1a9b      	subs	r3, r3, r2
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f040 80f1 	bne.w	800e432 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	699b      	ldr	r3, [r3, #24]
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	8992      	ldrh	r2, [r2, #12]
 800e258:	fbb3 f3f2 	udiv	r3, r3, r2
 800e25c:	693a      	ldr	r2, [r7, #16]
 800e25e:	8952      	ldrh	r2, [r2, #10]
 800e260:	3a01      	subs	r2, #1
 800e262:	4013      	ands	r3, r2
 800e264:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d143      	bne.n	800e2f4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10c      	bne.n	800e28e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d11a      	bne.n	800e2b6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2100      	movs	r1, #0
 800e284:	4618      	mov	r0, r3
 800e286:	f7fd feea 	bl	800c05e <create_chain>
 800e28a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e28c:	e013      	b.n	800e2b6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e292:	2b00      	cmp	r3, #0
 800e294:	d007      	beq.n	800e2a6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	699b      	ldr	r3, [r3, #24]
 800e29a:	4619      	mov	r1, r3
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f7fd ff76 	bl	800c18e <clmt_clust>
 800e2a2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e2a4:	e007      	b.n	800e2b6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	69db      	ldr	r3, [r3, #28]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	4610      	mov	r0, r2
 800e2b0:	f7fd fed5 	bl	800c05e <create_chain>
 800e2b4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f000 8109 	beq.w	800e4d0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d104      	bne.n	800e2ce <f_write+0x10c>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2202      	movs	r2, #2
 800e2c8:	755a      	strb	r2, [r3, #21]
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e109      	b.n	800e4e2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d4:	d104      	bne.n	800e2e0 <f_write+0x11e>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	755a      	strb	r2, [r3, #21]
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e100      	b.n	800e4e2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2e4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d102      	bne.n	800e2f4 <f_write+0x132>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2f2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	7d1b      	ldrb	r3, [r3, #20]
 800e2f8:	b25b      	sxtb	r3, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	da18      	bge.n	800e330 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	7858      	ldrb	r0, [r3, #1]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6a1a      	ldr	r2, [r3, #32]
 800e30c:	2301      	movs	r3, #1
 800e30e:	f7fd f8af 	bl	800b470 <disk_write>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d004      	beq.n	800e322 <f_write+0x160>
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2201      	movs	r2, #1
 800e31c:	755a      	strb	r2, [r3, #21]
 800e31e:	2301      	movs	r3, #1
 800e320:	e0df      	b.n	800e4e2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	7d1b      	ldrb	r3, [r3, #20]
 800e326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	69db      	ldr	r3, [r3, #28]
 800e336:	4619      	mov	r1, r3
 800e338:	4610      	mov	r0, r2
 800e33a:	f7fd fc25 	bl	800bb88 <clust2sect>
 800e33e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d104      	bne.n	800e350 <f_write+0x18e>
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2202      	movs	r2, #2
 800e34a:	755a      	strb	r2, [r3, #21]
 800e34c:	2302      	movs	r3, #2
 800e34e:	e0c8      	b.n	800e4e2 <f_write+0x320>
			sect += csect;
 800e350:	697a      	ldr	r2, [r7, #20]
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	4413      	add	r3, r2
 800e356:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	899b      	ldrh	r3, [r3, #12]
 800e35c:	461a      	mov	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	fbb3 f3f2 	udiv	r3, r3, r2
 800e364:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e366:	6a3b      	ldr	r3, [r7, #32]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d043      	beq.n	800e3f4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e36c:	69ba      	ldr	r2, [r7, #24]
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	4413      	add	r3, r2
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	8952      	ldrh	r2, [r2, #10]
 800e376:	4293      	cmp	r3, r2
 800e378:	d905      	bls.n	800e386 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	895b      	ldrh	r3, [r3, #10]
 800e37e:	461a      	mov	r2, r3
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	7858      	ldrb	r0, [r3, #1]
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	69f9      	ldr	r1, [r7, #28]
 800e390:	f7fd f86e 	bl	800b470 <disk_write>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d004      	beq.n	800e3a4 <f_write+0x1e2>
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2201      	movs	r2, #1
 800e39e:	755a      	strb	r2, [r3, #21]
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e09e      	b.n	800e4e2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6a1a      	ldr	r2, [r3, #32]
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	6a3a      	ldr	r2, [r7, #32]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d918      	bls.n	800e3e4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6a1a      	ldr	r2, [r3, #32]
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	693a      	ldr	r2, [r7, #16]
 800e3c2:	8992      	ldrh	r2, [r2, #12]
 800e3c4:	fb02 f303 	mul.w	r3, r2, r3
 800e3c8:	69fa      	ldr	r2, [r7, #28]
 800e3ca:	18d1      	adds	r1, r2, r3
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	899b      	ldrh	r3, [r3, #12]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	f7fd f90d 	bl	800b5f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	7d1b      	ldrb	r3, [r3, #20]
 800e3da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3de:	b2da      	uxtb	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	899b      	ldrh	r3, [r3, #12]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	6a3b      	ldr	r3, [r7, #32]
 800e3ec:	fb02 f303 	mul.w	r3, r2, r3
 800e3f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e3f2:	e04b      	b.n	800e48c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	6a1b      	ldr	r3, [r3, #32]
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d016      	beq.n	800e42c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	699a      	ldr	r2, [r3, #24]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e406:	429a      	cmp	r2, r3
 800e408:	d210      	bcs.n	800e42c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	7858      	ldrb	r0, [r3, #1]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e414:	2301      	movs	r3, #1
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	f7fd f80a 	bl	800b430 <disk_read>
 800e41c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d004      	beq.n	800e42c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2201      	movs	r2, #1
 800e426:	755a      	strb	r2, [r3, #21]
 800e428:	2301      	movs	r3, #1
 800e42a:	e05a      	b.n	800e4e2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	697a      	ldr	r2, [r7, #20]
 800e430:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	899b      	ldrh	r3, [r3, #12]
 800e436:	4618      	mov	r0, r3
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	693a      	ldr	r2, [r7, #16]
 800e43e:	8992      	ldrh	r2, [r2, #12]
 800e440:	fbb3 f1f2 	udiv	r1, r3, r2
 800e444:	fb02 f201 	mul.w	r2, r2, r1
 800e448:	1a9b      	subs	r3, r3, r2
 800e44a:	1ac3      	subs	r3, r0, r3
 800e44c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	429a      	cmp	r2, r3
 800e454:	d901      	bls.n	800e45a <f_write+0x298>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	693a      	ldr	r2, [r7, #16]
 800e466:	8992      	ldrh	r2, [r2, #12]
 800e468:	fbb3 f0f2 	udiv	r0, r3, r2
 800e46c:	fb02 f200 	mul.w	r2, r2, r0
 800e470:	1a9b      	subs	r3, r3, r2
 800e472:	440b      	add	r3, r1
 800e474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e476:	69f9      	ldr	r1, [r7, #28]
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fd f8b9 	bl	800b5f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	7d1b      	ldrb	r3, [r3, #20]
 800e482:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e486:	b2da      	uxtb	r2, r3
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e48c:	69fa      	ldr	r2, [r7, #28]
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	4413      	add	r3, r2
 800e492:	61fb      	str	r3, [r7, #28]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	699a      	ldr	r2, [r3, #24]
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	441a      	add	r2, r3
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	619a      	str	r2, [r3, #24]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	68da      	ldr	r2, [r3, #12]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	bf38      	it	cc
 800e4ac:	461a      	movcc	r2, r3
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	60da      	str	r2, [r3, #12]
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	441a      	add	r2, r3
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f47f aeb5 	bne.w	800e238 <f_write+0x76>
 800e4ce:	e000      	b.n	800e4d2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e4d0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	7d1b      	ldrb	r3, [r3, #20]
 800e4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3730      	adds	r7, #48	; 0x30
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b086      	sub	sp, #24
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f107 0208 	add.w	r2, r7, #8
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff faba 	bl	800da74 <validate>
 800e500:	4603      	mov	r3, r0
 800e502:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e504:	7dfb      	ldrb	r3, [r7, #23]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d168      	bne.n	800e5dc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	7d1b      	ldrb	r3, [r3, #20]
 800e50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e512:	2b00      	cmp	r3, #0
 800e514:	d062      	beq.n	800e5dc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	7d1b      	ldrb	r3, [r3, #20]
 800e51a:	b25b      	sxtb	r3, r3
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	da15      	bge.n	800e54c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	7858      	ldrb	r0, [r3, #1]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a1a      	ldr	r2, [r3, #32]
 800e52e:	2301      	movs	r3, #1
 800e530:	f7fc ff9e 	bl	800b470 <disk_write>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <f_sync+0x54>
 800e53a:	2301      	movs	r3, #1
 800e53c:	e04f      	b.n	800e5de <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	7d1b      	ldrb	r3, [r3, #20]
 800e542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e546:	b2da      	uxtb	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e54c:	f7fc fce0 	bl	800af10 <get_fattime>
 800e550:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e558:	4619      	mov	r1, r3
 800e55a:	4610      	mov	r0, r2
 800e55c:	f7fd fa76 	bl	800ba4c <move_window>
 800e560:	4603      	mov	r3, r0
 800e562:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e564:	7dfb      	ldrb	r3, [r7, #23]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d138      	bne.n	800e5dc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e56e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	330b      	adds	r3, #11
 800e574:	781a      	ldrb	r2, [r3, #0]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	330b      	adds	r3, #11
 800e57a:	f042 0220 	orr.w	r2, r2, #32
 800e57e:	b2d2      	uxtb	r2, r2
 800e580:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6818      	ldr	r0, [r3, #0]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	689b      	ldr	r3, [r3, #8]
 800e58a:	461a      	mov	r2, r3
 800e58c:	68f9      	ldr	r1, [r7, #12]
 800e58e:	f7fd fffb 	bl	800c588 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f103 021c 	add.w	r2, r3, #28
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	4619      	mov	r1, r3
 800e59e:	4610      	mov	r0, r2
 800e5a0:	f7fc fffa 	bl	800b598 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	3316      	adds	r3, #22
 800e5a8:	6939      	ldr	r1, [r7, #16]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fc fff4 	bl	800b598 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3312      	adds	r3, #18
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fc ffd3 	bl	800b562 <st_word>
					fs->wflag = 1;
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fd fa6f 	bl	800baa8 <sync_fs>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	7d1b      	ldrb	r3, [r3, #20]
 800e5d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3718      	adds	r7, #24
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b084      	sub	sp, #16
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff ff7b 	bl	800e4ea <f_sync>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d118      	bne.n	800e630 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f107 0208 	add.w	r2, r7, #8
 800e604:	4611      	mov	r1, r2
 800e606:	4618      	mov	r0, r3
 800e608:	f7ff fa34 	bl	800da74 <validate>
 800e60c:	4603      	mov	r3, r0
 800e60e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e610:	7bfb      	ldrb	r3, [r7, #15]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10c      	bne.n	800e630 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fd f972 	bl	800b904 <dec_lock>
 800e620:	4603      	mov	r3, r0
 800e622:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e624:	7bfb      	ldrb	r3, [r7, #15]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d102      	bne.n	800e630 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e630:	7bfb      	ldrb	r3, [r7, #15]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e63a:	b590      	push	{r4, r7, lr}
 800e63c:	b093      	sub	sp, #76	; 0x4c
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e642:	f107 010c 	add.w	r1, r7, #12
 800e646:	1d3b      	adds	r3, r7, #4
 800e648:	2200      	movs	r2, #0
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe ff86 	bl	800d55c <find_volume>
 800e650:	4603      	mov	r3, r0
 800e652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800e656:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d131      	bne.n	800e6c2 <f_chdir+0x88>
		dj.obj.fs = fs;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	f107 0310 	add.w	r3, r7, #16
 800e668:	4611      	mov	r1, r2
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fe fe46 	bl	800d2fc <follow_path>
 800e670:	4603      	mov	r3, r0
 800e672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 800e676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d11a      	bne.n	800e6b4 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800e67e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e682:	b25b      	sxtb	r3, r3
 800e684:	2b00      	cmp	r3, #0
 800e686:	da03      	bge.n	800e690 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	69ba      	ldr	r2, [r7, #24]
 800e68c:	61da      	str	r2, [r3, #28]
 800e68e:	e011      	b.n	800e6b4 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800e690:	7dbb      	ldrb	r3, [r7, #22]
 800e692:	f003 0310 	and.w	r3, r3, #16
 800e696:	2b00      	cmp	r3, #0
 800e698:	d009      	beq.n	800e6ae <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e69e:	68fc      	ldr	r4, [r7, #12]
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fd ff51 	bl	800c54a <ld_clust>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	61e3      	str	r3, [r4, #28]
 800e6ac:	e002      	b.n	800e6b4 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800e6ae:	2305      	movs	r3, #5
 800e6b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e6b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e6b8:	2b04      	cmp	r3, #4
 800e6ba:	d102      	bne.n	800e6c2 <f_chdir+0x88>
 800e6bc:	2305      	movs	r3, #5
 800e6be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 800e6c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	374c      	adds	r7, #76	; 0x4c
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd90      	pop	{r4, r7, pc}

0800e6ce <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b090      	sub	sp, #64	; 0x40
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f107 0208 	add.w	r2, r7, #8
 800e6de:	4611      	mov	r1, r2
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7ff f9c7 	bl	800da74 <validate>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e6ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d103      	bne.n	800e6fc <f_lseek+0x2e>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	7d5b      	ldrb	r3, [r3, #21]
 800e6f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e6fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e700:	2b00      	cmp	r3, #0
 800e702:	d002      	beq.n	800e70a <f_lseek+0x3c>
 800e704:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e708:	e201      	b.n	800eb0e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 80d9 	beq.w	800e8c6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e71a:	d15a      	bne.n	800e7d2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e720:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	1d1a      	adds	r2, r3, #4
 800e726:	627a      	str	r2, [r7, #36]	; 0x24
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	617b      	str	r3, [r7, #20]
 800e72c:	2302      	movs	r3, #2
 800e72e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d03a      	beq.n	800e7b2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73e:	613b      	str	r3, [r7, #16]
 800e740:	2300      	movs	r3, #0
 800e742:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e746:	3302      	adds	r3, #2
 800e748:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74c:	60fb      	str	r3, [r7, #12]
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	3301      	adds	r3, #1
 800e752:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fd fa34 	bl	800bbc6 <get_fat>
 800e75e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	2b01      	cmp	r3, #1
 800e764:	d804      	bhi.n	800e770 <f_lseek+0xa2>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2202      	movs	r2, #2
 800e76a:	755a      	strb	r2, [r3, #21]
 800e76c:	2302      	movs	r3, #2
 800e76e:	e1ce      	b.n	800eb0e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e776:	d104      	bne.n	800e782 <f_lseek+0xb4>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2201      	movs	r2, #1
 800e77c:	755a      	strb	r2, [r3, #21]
 800e77e:	2301      	movs	r3, #1
 800e780:	e1c5      	b.n	800eb0e <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	3301      	adds	r3, #1
 800e786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e788:	429a      	cmp	r2, r3
 800e78a:	d0de      	beq.n	800e74a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	429a      	cmp	r2, r3
 800e792:	d809      	bhi.n	800e7a8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e796:	1d1a      	adds	r2, r3, #4
 800e798:	627a      	str	r2, [r7, #36]	; 0x24
 800e79a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	1d1a      	adds	r2, r3, #4
 800e7a2:	627a      	str	r2, [r7, #36]	; 0x24
 800e7a4:	693a      	ldr	r2, [r7, #16]
 800e7a6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	6a1b      	ldr	r3, [r3, #32]
 800e7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d3c4      	bcc.n	800e73c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7b8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e7ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d803      	bhi.n	800e7ca <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	601a      	str	r2, [r3, #0]
 800e7c8:	e19f      	b.n	800eb0a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e7ca:	2311      	movs	r3, #17
 800e7cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e7d0:	e19b      	b.n	800eb0a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	683a      	ldr	r2, [r7, #0]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d902      	bls.n	800e7e2 <f_lseek+0x114>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	683a      	ldr	r2, [r7, #0]
 800e7e6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 818d 	beq.w	800eb0a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7fd fcc9 	bl	800c18e <clmt_clust>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e802:	68ba      	ldr	r2, [r7, #8]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	69db      	ldr	r3, [r3, #28]
 800e808:	4619      	mov	r1, r3
 800e80a:	4610      	mov	r0, r2
 800e80c:	f7fd f9bc 	bl	800bb88 <clust2sect>
 800e810:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d104      	bne.n	800e822 <f_lseek+0x154>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2202      	movs	r2, #2
 800e81c:	755a      	strb	r2, [r3, #21]
 800e81e:	2302      	movs	r3, #2
 800e820:	e175      	b.n	800eb0e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	3b01      	subs	r3, #1
 800e826:	68ba      	ldr	r2, [r7, #8]
 800e828:	8992      	ldrh	r2, [r2, #12]
 800e82a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	8952      	ldrh	r2, [r2, #10]
 800e832:	3a01      	subs	r2, #1
 800e834:	4013      	ands	r3, r2
 800e836:	69ba      	ldr	r2, [r7, #24]
 800e838:	4413      	add	r3, r2
 800e83a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	699b      	ldr	r3, [r3, #24]
 800e840:	68ba      	ldr	r2, [r7, #8]
 800e842:	8992      	ldrh	r2, [r2, #12]
 800e844:	fbb3 f1f2 	udiv	r1, r3, r2
 800e848:	fb02 f201 	mul.w	r2, r2, r1
 800e84c:	1a9b      	subs	r3, r3, r2
 800e84e:	2b00      	cmp	r3, #0
 800e850:	f000 815b 	beq.w	800eb0a <f_lseek+0x43c>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	69ba      	ldr	r2, [r7, #24]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	f000 8155 	beq.w	800eb0a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	7d1b      	ldrb	r3, [r3, #20]
 800e864:	b25b      	sxtb	r3, r3
 800e866:	2b00      	cmp	r3, #0
 800e868:	da18      	bge.n	800e89c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	7858      	ldrb	r0, [r3, #1]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a1a      	ldr	r2, [r3, #32]
 800e878:	2301      	movs	r3, #1
 800e87a:	f7fc fdf9 	bl	800b470 <disk_write>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d004      	beq.n	800e88e <f_lseek+0x1c0>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	755a      	strb	r2, [r3, #21]
 800e88a:	2301      	movs	r3, #1
 800e88c:	e13f      	b.n	800eb0e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	7d1b      	ldrb	r3, [r3, #20]
 800e892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e896:	b2da      	uxtb	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	7858      	ldrb	r0, [r3, #1]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	69ba      	ldr	r2, [r7, #24]
 800e8aa:	f7fc fdc1 	bl	800b430 <disk_read>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d004      	beq.n	800e8be <f_lseek+0x1f0>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	755a      	strb	r2, [r3, #21]
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e127      	b.n	800eb0e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	69ba      	ldr	r2, [r7, #24]
 800e8c2:	621a      	str	r2, [r3, #32]
 800e8c4:	e121      	b.n	800eb0a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	683a      	ldr	r2, [r7, #0]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d908      	bls.n	800e8e2 <f_lseek+0x214>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	7d1b      	ldrb	r3, [r3, #20]
 800e8d4:	f003 0302 	and.w	r3, r3, #2
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	699b      	ldr	r3, [r3, #24]
 800e8e6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	637b      	str	r3, [r7, #52]	; 0x34
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8f0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 80b5 	beq.w	800ea64 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	895b      	ldrh	r3, [r3, #10]
 800e8fe:	461a      	mov	r2, r3
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	899b      	ldrh	r3, [r3, #12]
 800e904:	fb03 f302 	mul.w	r3, r3, r2
 800e908:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e90a:	6a3b      	ldr	r3, [r7, #32]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01b      	beq.n	800e948 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	1e5a      	subs	r2, r3, #1
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	fbb2 f2f3 	udiv	r2, r2, r3
 800e91a:	6a3b      	ldr	r3, [r7, #32]
 800e91c:	1e59      	subs	r1, r3, #1
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e924:	429a      	cmp	r2, r3
 800e926:	d30f      	bcc.n	800e948 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	1e5a      	subs	r2, r3, #1
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	425b      	negs	r3, r3
 800e930:	401a      	ands	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	683a      	ldr	r2, [r7, #0]
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	63bb      	str	r3, [r7, #56]	; 0x38
 800e946:	e022      	b.n	800e98e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e950:	2b00      	cmp	r3, #0
 800e952:	d119      	bne.n	800e988 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2100      	movs	r1, #0
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fd fb80 	bl	800c05e <create_chain>
 800e95e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e962:	2b01      	cmp	r3, #1
 800e964:	d104      	bne.n	800e970 <f_lseek+0x2a2>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2202      	movs	r2, #2
 800e96a:	755a      	strb	r2, [r3, #21]
 800e96c:	2302      	movs	r3, #2
 800e96e:	e0ce      	b.n	800eb0e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e976:	d104      	bne.n	800e982 <f_lseek+0x2b4>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2201      	movs	r2, #1
 800e97c:	755a      	strb	r2, [r3, #21]
 800e97e:	2301      	movs	r3, #1
 800e980:	e0c5      	b.n	800eb0e <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e986:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e98c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e990:	2b00      	cmp	r3, #0
 800e992:	d067      	beq.n	800ea64 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e994:	e03a      	b.n	800ea0c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	603b      	str	r3, [r7, #0]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	699a      	ldr	r2, [r3, #24]
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	441a      	add	r2, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	7d1b      	ldrb	r3, [r3, #20]
 800e9ae:	f003 0302 	and.w	r3, r3, #2
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00b      	beq.n	800e9ce <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fd fb4f 	bl	800c05e <create_chain>
 800e9c0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d108      	bne.n	800e9da <f_lseek+0x30c>
							ofs = 0; break;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	603b      	str	r3, [r7, #0]
 800e9cc:	e022      	b.n	800ea14 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fd f8f7 	bl	800bbc6 <get_fat>
 800e9d8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e0:	d104      	bne.n	800e9ec <f_lseek+0x31e>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	755a      	strb	r2, [r3, #21]
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	e090      	b.n	800eb0e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d904      	bls.n	800e9fc <f_lseek+0x32e>
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	6a1b      	ldr	r3, [r3, #32]
 800e9f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d304      	bcc.n	800ea06 <f_lseek+0x338>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2202      	movs	r2, #2
 800ea00:	755a      	strb	r2, [r3, #21]
 800ea02:	2302      	movs	r3, #2
 800ea04:	e083      	b.n	800eb0e <f_lseek+0x440>
					fp->clust = clst;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea0a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d8c0      	bhi.n	800e996 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	699a      	ldr	r2, [r3, #24]
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	441a      	add	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	899b      	ldrh	r3, [r3, #12]
 800ea24:	461a      	mov	r2, r3
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea2c:	fb02 f201 	mul.w	r2, r2, r1
 800ea30:	1a9b      	subs	r3, r3, r2
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d016      	beq.n	800ea64 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7fd f8a4 	bl	800bb88 <clust2sect>
 800ea40:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ea42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d104      	bne.n	800ea52 <f_lseek+0x384>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	755a      	strb	r2, [r3, #21]
 800ea4e:	2302      	movs	r3, #2
 800ea50:	e05d      	b.n	800eb0e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	899b      	ldrh	r3, [r3, #12]
 800ea56:	461a      	mov	r2, r3
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea60:	4413      	add	r3, r2
 800ea62:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	699a      	ldr	r2, [r3, #24]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d90a      	bls.n	800ea86 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	699a      	ldr	r2, [r3, #24]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7d1b      	ldrb	r3, [r3, #20]
 800ea7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea80:	b2da      	uxtb	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	699b      	ldr	r3, [r3, #24]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	8992      	ldrh	r2, [r2, #12]
 800ea8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea92:	fb02 f201 	mul.w	r2, r2, r1
 800ea96:	1a9b      	subs	r3, r3, r2
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d036      	beq.n	800eb0a <f_lseek+0x43c>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6a1b      	ldr	r3, [r3, #32]
 800eaa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d031      	beq.n	800eb0a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	7d1b      	ldrb	r3, [r3, #20]
 800eaaa:	b25b      	sxtb	r3, r3
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	da18      	bge.n	800eae2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	7858      	ldrb	r0, [r3, #1]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6a1a      	ldr	r2, [r3, #32]
 800eabe:	2301      	movs	r3, #1
 800eac0:	f7fc fcd6 	bl	800b470 <disk_write>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d004      	beq.n	800ead4 <f_lseek+0x406>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	755a      	strb	r2, [r3, #21]
 800ead0:	2301      	movs	r3, #1
 800ead2:	e01c      	b.n	800eb0e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	7d1b      	ldrb	r3, [r3, #20]
 800ead8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	7858      	ldrb	r0, [r3, #1]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaec:	2301      	movs	r3, #1
 800eaee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaf0:	f7fc fc9e 	bl	800b430 <disk_read>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d004      	beq.n	800eb04 <f_lseek+0x436>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2201      	movs	r2, #1
 800eafe:	755a      	strb	r2, [r3, #21]
 800eb00:	2301      	movs	r3, #1
 800eb02:	e004      	b.n	800eb0e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb08:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800eb0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3740      	adds	r7, #64	; 0x40
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b0a0      	sub	sp, #128	; 0x80
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eb22:	f107 010c 	add.w	r1, r7, #12
 800eb26:	1d3b      	adds	r3, r7, #4
 800eb28:	2202      	movs	r2, #2
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fe fd16 	bl	800d55c <find_volume>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800eb3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f040 80a4 	bne.w	800ec8c <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fe fbd5 	bl	800d2fc <follow_path>
 800eb52:	4603      	mov	r3, r0
 800eb54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 800eb58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d108      	bne.n	800eb72 <f_unlink+0x5c>
 800eb60:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800eb64:	f003 0320 	and.w	r3, r3, #32
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d002      	beq.n	800eb72 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800eb6c:	2306      	movs	r3, #6
 800eb6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800eb72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d108      	bne.n	800eb8c <f_unlink+0x76>
 800eb7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800eb7e:	2102      	movs	r1, #2
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7fc fdb3 	bl	800b6ec <chk_lock>
 800eb86:	4603      	mov	r3, r0
 800eb88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800eb8c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d17b      	bne.n	800ec8c <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800eb94:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800eb98:	b25b      	sxtb	r3, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	da03      	bge.n	800eba6 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800eb9e:	2306      	movs	r3, #6
 800eba0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800eba4:	e008      	b.n	800ebb8 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800eba6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d002      	beq.n	800ebb8 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ebb2:	2307      	movs	r3, #7
 800ebb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800ebb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d13d      	bne.n	800ec3c <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ebc4:	4611      	mov	r1, r2
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fd fcbf 	bl	800c54a <ld_clust>
 800ebcc:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ebce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800ebd2:	f003 0310 	and.w	r3, r3, #16
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d030      	beq.n	800ec3c <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	69db      	ldr	r3, [r3, #28]
 800ebde:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d103      	bne.n	800ebec <f_unlink+0xd6>
						res = FR_DENIED;
 800ebe4:	2307      	movs	r3, #7
 800ebe6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ebea:	e027      	b.n	800ec3c <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ebf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebf2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ebf4:	f107 0310 	add.w	r3, r7, #16
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fd faff 	bl	800c1fe <dir_sdi>
 800ec00:	4603      	mov	r3, r0
 800ec02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800ec06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d116      	bne.n	800ec3c <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ec0e:	f107 0310 	add.w	r3, r7, #16
 800ec12:	2100      	movs	r1, #0
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fd fec3 	bl	800c9a0 <dir_read>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ec20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d102      	bne.n	800ec2e <f_unlink+0x118>
 800ec28:	2307      	movs	r3, #7
 800ec2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ec2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec32:	2b04      	cmp	r3, #4
 800ec34:	d102      	bne.n	800ec3c <f_unlink+0x126>
 800ec36:	2300      	movs	r3, #0
 800ec38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800ec3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d123      	bne.n	800ec8c <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ec44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe f909 	bl	800ce60 <dir_remove>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ec54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10c      	bne.n	800ec76 <f_unlink+0x160>
 800ec5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d009      	beq.n	800ec76 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ec62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ec66:	2200      	movs	r2, #0
 800ec68:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7fd f992 	bl	800bf94 <remove_chain>
 800ec70:	4603      	mov	r3, r0
 800ec72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ec76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d106      	bne.n	800ec8c <f_unlink+0x176>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fc ff11 	bl	800baa8 <sync_fs>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ec8c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3780      	adds	r7, #128	; 0x80
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b098      	sub	sp, #96	; 0x60
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eca0:	f107 010c 	add.w	r1, r7, #12
 800eca4:	1d3b      	adds	r3, r7, #4
 800eca6:	2202      	movs	r2, #2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe fc57 	bl	800d55c <find_volume>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800ecb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f040 80ff 	bne.w	800eec0 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	f107 0310 	add.w	r3, r7, #16
 800ecc8:	4611      	mov	r1, r2
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe fb16 	bl	800d2fc <follow_path>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ecd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d102      	bne.n	800ece4 <f_mkdir+0x4c>
 800ecde:	2308      	movs	r3, #8
 800ece0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800ece4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ece8:	2b04      	cmp	r3, #4
 800ecea:	d108      	bne.n	800ecfe <f_mkdir+0x66>
 800ecec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ecf0:	f003 0320 	and.w	r3, r3, #32
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800ecf8:	2306      	movs	r3, #6
 800ecfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ecfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	f040 80dc 	bne.w	800eec0 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ed08:	f107 0310 	add.w	r3, r7, #16
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fd f9a5 	bl	800c05e <create_chain>
 800ed14:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	895b      	ldrh	r3, [r3, #10]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	899b      	ldrh	r3, [r3, #12]
 800ed20:	fb03 f302 	mul.w	r3, r3, r2
 800ed24:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800ed26:	2300      	movs	r3, #0
 800ed28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ed2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d102      	bne.n	800ed38 <f_mkdir+0xa0>
 800ed32:	2307      	movs	r3, #7
 800ed34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800ed38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d102      	bne.n	800ed44 <f_mkdir+0xac>
 800ed3e:	2302      	movs	r3, #2
 800ed40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4a:	d102      	bne.n	800ed52 <f_mkdir+0xba>
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ed52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <f_mkdir+0xd0>
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fc fe31 	bl	800b9c4 <sync_window>
 800ed62:	4603      	mov	r3, r0
 800ed64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800ed68:	f7fc f8d2 	bl	800af10 <get_fattime>
 800ed6c:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ed6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d16c      	bne.n	800ee50 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fc ff04 	bl	800bb88 <clust2sect>
 800ed80:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	333c      	adds	r3, #60	; 0x3c
 800ed86:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	899b      	ldrh	r3, [r3, #12]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	2100      	movs	r1, #0
 800ed90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed92:	f7fc fc4e 	bl	800b632 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ed96:	220b      	movs	r2, #11
 800ed98:	2120      	movs	r1, #32
 800ed9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed9c:	f7fc fc49 	bl	800b632 <mem_set>
					dir[DIR_Name] = '.';
 800eda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda2:	222e      	movs	r2, #46	; 0x2e
 800eda4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800eda6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda8:	330b      	adds	r3, #11
 800edaa:	2210      	movs	r2, #16
 800edac:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800edae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edb0:	3316      	adds	r3, #22
 800edb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7fc fbef 	bl	800b598 <st_dword>
					st_clust(fs, dir, dcl);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800edbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fd fbe1 	bl	800c588 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800edc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edc8:	3320      	adds	r3, #32
 800edca:	2220      	movs	r2, #32
 800edcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fc fc0e 	bl	800b5f0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800edd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd6:	3321      	adds	r3, #33	; 0x21
 800edd8:	222e      	movs	r2, #46	; 0x2e
 800edda:	701a      	strb	r2, [r3, #0]
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	2b03      	cmp	r3, #3
 800ede6:	d106      	bne.n	800edf6 <f_mkdir+0x15e>
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edee:	429a      	cmp	r2, r3
 800edf0:	d101      	bne.n	800edf6 <f_mkdir+0x15e>
 800edf2:	2300      	movs	r3, #0
 800edf4:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edfa:	3320      	adds	r3, #32
 800edfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edfe:	4619      	mov	r1, r3
 800ee00:	f7fd fbc2 	bl	800c588 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	895b      	ldrh	r3, [r3, #10]
 800ee08:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee0a:	e01c      	b.n	800ee46 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800ee0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee0e:	1c5a      	adds	r2, r3, #1
 800ee10:	657a      	str	r2, [r7, #84]	; 0x54
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fc fdd0 	bl	800b9c4 <sync_window>
 800ee24:	4603      	mov	r3, r0
 800ee26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800ee2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d10d      	bne.n	800ee4e <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	899b      	ldrh	r3, [r3, #12]
 800ee36:	461a      	mov	r2, r3
 800ee38:	2100      	movs	r1, #0
 800ee3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee3c:	f7fc fbf9 	bl	800b632 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ee40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee42:	3b01      	subs	r3, #1
 800ee44:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1df      	bne.n	800ee0c <f_mkdir+0x174>
 800ee4c:	e000      	b.n	800ee50 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800ee4e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ee50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d107      	bne.n	800ee68 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ee58:	f107 0310 	add.w	r3, r7, #16
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fd ff07 	bl	800cc70 <dir_register>
 800ee62:	4603      	mov	r3, r0
 800ee64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800ee68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d120      	bne.n	800eeb2 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ee70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee72:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ee74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee76:	3316      	adds	r3, #22
 800ee78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fc fb8c 	bl	800b598 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fd fb7e 	bl	800c588 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ee8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee8e:	330b      	adds	r3, #11
 800ee90:	2210      	movs	r2, #16
 800ee92:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2201      	movs	r2, #1
 800ee98:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ee9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10e      	bne.n	800eec0 <f_mkdir+0x228>
					res = sync_fs(fs);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fc fdff 	bl	800baa8 <sync_fs>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eeb0:	e006      	b.n	800eec0 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800eeb2:	f107 0310 	add.w	r3, r7, #16
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fd f86a 	bl	800bf94 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800eec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3760      	adds	r7, #96	; 0x60
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b088      	sub	sp, #32
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
	int n = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800eee0:	e01b      	b.n	800ef1a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800eee2:	f107 0310 	add.w	r3, r7, #16
 800eee6:	f107 0114 	add.w	r1, r7, #20
 800eeea:	2201      	movs	r2, #1
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f7ff f809 	bl	800df04 <f_read>
		if (rc != 1) break;
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d116      	bne.n	800ef26 <f_gets+0x5a>
		c = s[0];
 800eef8:	7d3b      	ldrb	r3, [r7, #20]
 800eefa:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800eefc:	7dfb      	ldrb	r3, [r7, #23]
 800eefe:	2b0d      	cmp	r3, #13
 800ef00:	d100      	bne.n	800ef04 <f_gets+0x38>
 800ef02:	e00a      	b.n	800ef1a <f_gets+0x4e>
		*p++ = c;
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	61ba      	str	r2, [r7, #24]
 800ef0a:	7dfa      	ldrb	r2, [r7, #23]
 800ef0c:	701a      	strb	r2, [r3, #0]
		n++;
 800ef0e:	69fb      	ldr	r3, [r7, #28]
 800ef10:	3301      	adds	r3, #1
 800ef12:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ef14:	7dfb      	ldrb	r3, [r7, #23]
 800ef16:	2b0a      	cmp	r3, #10
 800ef18:	d007      	beq.n	800ef2a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	69fa      	ldr	r2, [r7, #28]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	dbde      	blt.n	800eee2 <f_gets+0x16>
 800ef24:	e002      	b.n	800ef2c <f_gets+0x60>
		if (rc != 1) break;
 800ef26:	bf00      	nop
 800ef28:	e000      	b.n	800ef2c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800ef2a:	bf00      	nop
	}
	*p = 0;
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <f_gets+0x70>
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	e000      	b.n	800ef3e <f_gets+0x72>
 800ef3c:	2300      	movs	r3, #0
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3720      	adds	r7, #32
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
	...

0800ef48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b087      	sub	sp, #28
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	4613      	mov	r3, r2
 800ef54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ef56:	2301      	movs	r3, #1
 800ef58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ef5e:	4b1f      	ldr	r3, [pc, #124]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800ef60:	7a5b      	ldrb	r3, [r3, #9]
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d131      	bne.n	800efcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ef68:	4b1c      	ldr	r3, [pc, #112]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800ef6a:	7a5b      	ldrb	r3, [r3, #9]
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	461a      	mov	r2, r3
 800ef70:	4b1a      	ldr	r3, [pc, #104]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800ef72:	2100      	movs	r1, #0
 800ef74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ef76:	4b19      	ldr	r3, [pc, #100]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800ef78:	7a5b      	ldrb	r3, [r3, #9]
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	4a17      	ldr	r2, [pc, #92]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4413      	add	r3, r2
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ef86:	4b15      	ldr	r3, [pc, #84]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800ef88:	7a5b      	ldrb	r3, [r3, #9]
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	4b13      	ldr	r3, [pc, #76]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800ef90:	4413      	add	r3, r2
 800ef92:	79fa      	ldrb	r2, [r7, #7]
 800ef94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ef96:	4b11      	ldr	r3, [pc, #68]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800ef98:	7a5b      	ldrb	r3, [r3, #9]
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	1c5a      	adds	r2, r3, #1
 800ef9e:	b2d1      	uxtb	r1, r2
 800efa0:	4a0e      	ldr	r2, [pc, #56]	; (800efdc <FATFS_LinkDriverEx+0x94>)
 800efa2:	7251      	strb	r1, [r2, #9]
 800efa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800efa6:	7dbb      	ldrb	r3, [r7, #22]
 800efa8:	3330      	adds	r3, #48	; 0x30
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	3301      	adds	r3, #1
 800efb4:	223a      	movs	r2, #58	; 0x3a
 800efb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	3302      	adds	r3, #2
 800efbc:	222f      	movs	r2, #47	; 0x2f
 800efbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	3303      	adds	r3, #3
 800efc4:	2200      	movs	r2, #0
 800efc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800efc8:	2300      	movs	r3, #0
 800efca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800efcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	371c      	adds	r7, #28
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	200007a8 	.word	0x200007a8

0800efe0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800efea:	2200      	movs	r2, #0
 800efec:	6839      	ldr	r1, [r7, #0]
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff ffaa 	bl	800ef48 <FATFS_LinkDriverEx>
 800eff4:	4603      	mov	r3, r0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
	...

0800f000 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	4603      	mov	r3, r0
 800f008:	6039      	str	r1, [r7, #0]
 800f00a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f00c:	88fb      	ldrh	r3, [r7, #6]
 800f00e:	2b7f      	cmp	r3, #127	; 0x7f
 800f010:	d802      	bhi.n	800f018 <ff_convert+0x18>
		c = chr;
 800f012:	88fb      	ldrh	r3, [r7, #6]
 800f014:	81fb      	strh	r3, [r7, #14]
 800f016:	e025      	b.n	800f064 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00b      	beq.n	800f036 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f01e:	88fb      	ldrh	r3, [r7, #6]
 800f020:	2bff      	cmp	r3, #255	; 0xff
 800f022:	d805      	bhi.n	800f030 <ff_convert+0x30>
 800f024:	88fb      	ldrh	r3, [r7, #6]
 800f026:	3b80      	subs	r3, #128	; 0x80
 800f028:	4a12      	ldr	r2, [pc, #72]	; (800f074 <ff_convert+0x74>)
 800f02a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f02e:	e000      	b.n	800f032 <ff_convert+0x32>
 800f030:	2300      	movs	r3, #0
 800f032:	81fb      	strh	r3, [r7, #14]
 800f034:	e016      	b.n	800f064 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f036:	2300      	movs	r3, #0
 800f038:	81fb      	strh	r3, [r7, #14]
 800f03a:	e009      	b.n	800f050 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f03c:	89fb      	ldrh	r3, [r7, #14]
 800f03e:	4a0d      	ldr	r2, [pc, #52]	; (800f074 <ff_convert+0x74>)
 800f040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f044:	88fa      	ldrh	r2, [r7, #6]
 800f046:	429a      	cmp	r2, r3
 800f048:	d006      	beq.n	800f058 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f04a:	89fb      	ldrh	r3, [r7, #14]
 800f04c:	3301      	adds	r3, #1
 800f04e:	81fb      	strh	r3, [r7, #14]
 800f050:	89fb      	ldrh	r3, [r7, #14]
 800f052:	2b7f      	cmp	r3, #127	; 0x7f
 800f054:	d9f2      	bls.n	800f03c <ff_convert+0x3c>
 800f056:	e000      	b.n	800f05a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f058:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f05a:	89fb      	ldrh	r3, [r7, #14]
 800f05c:	3380      	adds	r3, #128	; 0x80
 800f05e:	b29b      	uxth	r3, r3
 800f060:	b2db      	uxtb	r3, r3
 800f062:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f064:	89fb      	ldrh	r3, [r7, #14]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3714      	adds	r7, #20
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	08014150 	.word	0x08014150

0800f078 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	4603      	mov	r3, r0
 800f080:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f082:	88fb      	ldrh	r3, [r7, #6]
 800f084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f088:	d201      	bcs.n	800f08e <ff_wtoupper+0x16>
 800f08a:	4b3e      	ldr	r3, [pc, #248]	; (800f184 <ff_wtoupper+0x10c>)
 800f08c:	e000      	b.n	800f090 <ff_wtoupper+0x18>
 800f08e:	4b3e      	ldr	r3, [pc, #248]	; (800f188 <ff_wtoupper+0x110>)
 800f090:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	1c9a      	adds	r2, r3, #2
 800f096:	617a      	str	r2, [r7, #20]
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f09c:	8a7b      	ldrh	r3, [r7, #18]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d068      	beq.n	800f174 <ff_wtoupper+0xfc>
 800f0a2:	88fa      	ldrh	r2, [r7, #6]
 800f0a4:	8a7b      	ldrh	r3, [r7, #18]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d364      	bcc.n	800f174 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	1c9a      	adds	r2, r3, #2
 800f0ae:	617a      	str	r2, [r7, #20]
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	823b      	strh	r3, [r7, #16]
 800f0b4:	8a3b      	ldrh	r3, [r7, #16]
 800f0b6:	0a1b      	lsrs	r3, r3, #8
 800f0b8:	81fb      	strh	r3, [r7, #14]
 800f0ba:	8a3b      	ldrh	r3, [r7, #16]
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f0c0:	88fa      	ldrh	r2, [r7, #6]
 800f0c2:	8a79      	ldrh	r1, [r7, #18]
 800f0c4:	8a3b      	ldrh	r3, [r7, #16]
 800f0c6:	440b      	add	r3, r1
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	da49      	bge.n	800f160 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f0cc:	89fb      	ldrh	r3, [r7, #14]
 800f0ce:	2b08      	cmp	r3, #8
 800f0d0:	d84f      	bhi.n	800f172 <ff_wtoupper+0xfa>
 800f0d2:	a201      	add	r2, pc, #4	; (adr r2, 800f0d8 <ff_wtoupper+0x60>)
 800f0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d8:	0800f0fd 	.word	0x0800f0fd
 800f0dc:	0800f10f 	.word	0x0800f10f
 800f0e0:	0800f125 	.word	0x0800f125
 800f0e4:	0800f12d 	.word	0x0800f12d
 800f0e8:	0800f135 	.word	0x0800f135
 800f0ec:	0800f13d 	.word	0x0800f13d
 800f0f0:	0800f145 	.word	0x0800f145
 800f0f4:	0800f14d 	.word	0x0800f14d
 800f0f8:	0800f155 	.word	0x0800f155
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f0fc:	88fa      	ldrh	r2, [r7, #6]
 800f0fe:	8a7b      	ldrh	r3, [r7, #18]
 800f100:	1ad3      	subs	r3, r2, r3
 800f102:	005b      	lsls	r3, r3, #1
 800f104:	697a      	ldr	r2, [r7, #20]
 800f106:	4413      	add	r3, r2
 800f108:	881b      	ldrh	r3, [r3, #0]
 800f10a:	80fb      	strh	r3, [r7, #6]
 800f10c:	e027      	b.n	800f15e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f10e:	88fa      	ldrh	r2, [r7, #6]
 800f110:	8a7b      	ldrh	r3, [r7, #18]
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	b29b      	uxth	r3, r3
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	88fa      	ldrh	r2, [r7, #6]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	80fb      	strh	r3, [r7, #6]
 800f122:	e01c      	b.n	800f15e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f124:	88fb      	ldrh	r3, [r7, #6]
 800f126:	3b10      	subs	r3, #16
 800f128:	80fb      	strh	r3, [r7, #6]
 800f12a:	e018      	b.n	800f15e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f12c:	88fb      	ldrh	r3, [r7, #6]
 800f12e:	3b20      	subs	r3, #32
 800f130:	80fb      	strh	r3, [r7, #6]
 800f132:	e014      	b.n	800f15e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f134:	88fb      	ldrh	r3, [r7, #6]
 800f136:	3b30      	subs	r3, #48	; 0x30
 800f138:	80fb      	strh	r3, [r7, #6]
 800f13a:	e010      	b.n	800f15e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f13c:	88fb      	ldrh	r3, [r7, #6]
 800f13e:	3b1a      	subs	r3, #26
 800f140:	80fb      	strh	r3, [r7, #6]
 800f142:	e00c      	b.n	800f15e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f144:	88fb      	ldrh	r3, [r7, #6]
 800f146:	3308      	adds	r3, #8
 800f148:	80fb      	strh	r3, [r7, #6]
 800f14a:	e008      	b.n	800f15e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f14c:	88fb      	ldrh	r3, [r7, #6]
 800f14e:	3b50      	subs	r3, #80	; 0x50
 800f150:	80fb      	strh	r3, [r7, #6]
 800f152:	e004      	b.n	800f15e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f154:	88fb      	ldrh	r3, [r7, #6]
 800f156:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f15a:	80fb      	strh	r3, [r7, #6]
 800f15c:	bf00      	nop
			}
			break;
 800f15e:	e008      	b.n	800f172 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f160:	89fb      	ldrh	r3, [r7, #14]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d195      	bne.n	800f092 <ff_wtoupper+0x1a>
 800f166:	8a3b      	ldrh	r3, [r7, #16]
 800f168:	005b      	lsls	r3, r3, #1
 800f16a:	697a      	ldr	r2, [r7, #20]
 800f16c:	4413      	add	r3, r2
 800f16e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f170:	e78f      	b.n	800f092 <ff_wtoupper+0x1a>
			break;
 800f172:	bf00      	nop
	}

	return chr;
 800f174:	88fb      	ldrh	r3, [r7, #6]
}
 800f176:	4618      	mov	r0, r3
 800f178:	371c      	adds	r7, #28
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	08014250 	.word	0x08014250
 800f188:	08014444 	.word	0x08014444

0800f18c <__errno>:
 800f18c:	4b01      	ldr	r3, [pc, #4]	; (800f194 <__errno+0x8>)
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop
 800f194:	2000000c 	.word	0x2000000c

0800f198 <__libc_init_array>:
 800f198:	b570      	push	{r4, r5, r6, lr}
 800f19a:	4e0d      	ldr	r6, [pc, #52]	; (800f1d0 <__libc_init_array+0x38>)
 800f19c:	4c0d      	ldr	r4, [pc, #52]	; (800f1d4 <__libc_init_array+0x3c>)
 800f19e:	1ba4      	subs	r4, r4, r6
 800f1a0:	10a4      	asrs	r4, r4, #2
 800f1a2:	2500      	movs	r5, #0
 800f1a4:	42a5      	cmp	r5, r4
 800f1a6:	d109      	bne.n	800f1bc <__libc_init_array+0x24>
 800f1a8:	4e0b      	ldr	r6, [pc, #44]	; (800f1d8 <__libc_init_array+0x40>)
 800f1aa:	4c0c      	ldr	r4, [pc, #48]	; (800f1dc <__libc_init_array+0x44>)
 800f1ac:	f004 feec 	bl	8013f88 <_init>
 800f1b0:	1ba4      	subs	r4, r4, r6
 800f1b2:	10a4      	asrs	r4, r4, #2
 800f1b4:	2500      	movs	r5, #0
 800f1b6:	42a5      	cmp	r5, r4
 800f1b8:	d105      	bne.n	800f1c6 <__libc_init_array+0x2e>
 800f1ba:	bd70      	pop	{r4, r5, r6, pc}
 800f1bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1c0:	4798      	blx	r3
 800f1c2:	3501      	adds	r5, #1
 800f1c4:	e7ee      	b.n	800f1a4 <__libc_init_array+0xc>
 800f1c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1ca:	4798      	blx	r3
 800f1cc:	3501      	adds	r5, #1
 800f1ce:	e7f2      	b.n	800f1b6 <__libc_init_array+0x1e>
 800f1d0:	08014844 	.word	0x08014844
 800f1d4:	08014844 	.word	0x08014844
 800f1d8:	08014844 	.word	0x08014844
 800f1dc:	0801484c 	.word	0x0801484c

0800f1e0 <memset>:
 800f1e0:	4402      	add	r2, r0
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d100      	bne.n	800f1ea <memset+0xa>
 800f1e8:	4770      	bx	lr
 800f1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800f1ee:	e7f9      	b.n	800f1e4 <memset+0x4>

0800f1f0 <__cvt>:
 800f1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f4:	ec55 4b10 	vmov	r4, r5, d0
 800f1f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f1fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f1fe:	2d00      	cmp	r5, #0
 800f200:	460e      	mov	r6, r1
 800f202:	4691      	mov	r9, r2
 800f204:	4619      	mov	r1, r3
 800f206:	bfb8      	it	lt
 800f208:	4622      	movlt	r2, r4
 800f20a:	462b      	mov	r3, r5
 800f20c:	f027 0720 	bic.w	r7, r7, #32
 800f210:	bfbb      	ittet	lt
 800f212:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f216:	461d      	movlt	r5, r3
 800f218:	2300      	movge	r3, #0
 800f21a:	232d      	movlt	r3, #45	; 0x2d
 800f21c:	bfb8      	it	lt
 800f21e:	4614      	movlt	r4, r2
 800f220:	2f46      	cmp	r7, #70	; 0x46
 800f222:	700b      	strb	r3, [r1, #0]
 800f224:	d004      	beq.n	800f230 <__cvt+0x40>
 800f226:	2f45      	cmp	r7, #69	; 0x45
 800f228:	d100      	bne.n	800f22c <__cvt+0x3c>
 800f22a:	3601      	adds	r6, #1
 800f22c:	2102      	movs	r1, #2
 800f22e:	e000      	b.n	800f232 <__cvt+0x42>
 800f230:	2103      	movs	r1, #3
 800f232:	ab03      	add	r3, sp, #12
 800f234:	9301      	str	r3, [sp, #4]
 800f236:	ab02      	add	r3, sp, #8
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	4632      	mov	r2, r6
 800f23c:	4653      	mov	r3, sl
 800f23e:	ec45 4b10 	vmov	d0, r4, r5
 800f242:	f001 ff9d 	bl	8011180 <_dtoa_r>
 800f246:	2f47      	cmp	r7, #71	; 0x47
 800f248:	4680      	mov	r8, r0
 800f24a:	d102      	bne.n	800f252 <__cvt+0x62>
 800f24c:	f019 0f01 	tst.w	r9, #1
 800f250:	d026      	beq.n	800f2a0 <__cvt+0xb0>
 800f252:	2f46      	cmp	r7, #70	; 0x46
 800f254:	eb08 0906 	add.w	r9, r8, r6
 800f258:	d111      	bne.n	800f27e <__cvt+0x8e>
 800f25a:	f898 3000 	ldrb.w	r3, [r8]
 800f25e:	2b30      	cmp	r3, #48	; 0x30
 800f260:	d10a      	bne.n	800f278 <__cvt+0x88>
 800f262:	2200      	movs	r2, #0
 800f264:	2300      	movs	r3, #0
 800f266:	4620      	mov	r0, r4
 800f268:	4629      	mov	r1, r5
 800f26a:	f7f1 fc45 	bl	8000af8 <__aeabi_dcmpeq>
 800f26e:	b918      	cbnz	r0, 800f278 <__cvt+0x88>
 800f270:	f1c6 0601 	rsb	r6, r6, #1
 800f274:	f8ca 6000 	str.w	r6, [sl]
 800f278:	f8da 3000 	ldr.w	r3, [sl]
 800f27c:	4499      	add	r9, r3
 800f27e:	2200      	movs	r2, #0
 800f280:	2300      	movs	r3, #0
 800f282:	4620      	mov	r0, r4
 800f284:	4629      	mov	r1, r5
 800f286:	f7f1 fc37 	bl	8000af8 <__aeabi_dcmpeq>
 800f28a:	b938      	cbnz	r0, 800f29c <__cvt+0xac>
 800f28c:	2230      	movs	r2, #48	; 0x30
 800f28e:	9b03      	ldr	r3, [sp, #12]
 800f290:	454b      	cmp	r3, r9
 800f292:	d205      	bcs.n	800f2a0 <__cvt+0xb0>
 800f294:	1c59      	adds	r1, r3, #1
 800f296:	9103      	str	r1, [sp, #12]
 800f298:	701a      	strb	r2, [r3, #0]
 800f29a:	e7f8      	b.n	800f28e <__cvt+0x9e>
 800f29c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f2a0:	9b03      	ldr	r3, [sp, #12]
 800f2a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2a4:	eba3 0308 	sub.w	r3, r3, r8
 800f2a8:	4640      	mov	r0, r8
 800f2aa:	6013      	str	r3, [r2, #0]
 800f2ac:	b004      	add	sp, #16
 800f2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f2b2 <__exponent>:
 800f2b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2b4:	2900      	cmp	r1, #0
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	bfba      	itte	lt
 800f2ba:	4249      	neglt	r1, r1
 800f2bc:	232d      	movlt	r3, #45	; 0x2d
 800f2be:	232b      	movge	r3, #43	; 0x2b
 800f2c0:	2909      	cmp	r1, #9
 800f2c2:	f804 2b02 	strb.w	r2, [r4], #2
 800f2c6:	7043      	strb	r3, [r0, #1]
 800f2c8:	dd20      	ble.n	800f30c <__exponent+0x5a>
 800f2ca:	f10d 0307 	add.w	r3, sp, #7
 800f2ce:	461f      	mov	r7, r3
 800f2d0:	260a      	movs	r6, #10
 800f2d2:	fb91 f5f6 	sdiv	r5, r1, r6
 800f2d6:	fb06 1115 	mls	r1, r6, r5, r1
 800f2da:	3130      	adds	r1, #48	; 0x30
 800f2dc:	2d09      	cmp	r5, #9
 800f2de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f2e2:	f103 32ff 	add.w	r2, r3, #4294967295
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	dc09      	bgt.n	800f2fe <__exponent+0x4c>
 800f2ea:	3130      	adds	r1, #48	; 0x30
 800f2ec:	3b02      	subs	r3, #2
 800f2ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f2f2:	42bb      	cmp	r3, r7
 800f2f4:	4622      	mov	r2, r4
 800f2f6:	d304      	bcc.n	800f302 <__exponent+0x50>
 800f2f8:	1a10      	subs	r0, r2, r0
 800f2fa:	b003      	add	sp, #12
 800f2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2fe:	4613      	mov	r3, r2
 800f300:	e7e7      	b.n	800f2d2 <__exponent+0x20>
 800f302:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f306:	f804 2b01 	strb.w	r2, [r4], #1
 800f30a:	e7f2      	b.n	800f2f2 <__exponent+0x40>
 800f30c:	2330      	movs	r3, #48	; 0x30
 800f30e:	4419      	add	r1, r3
 800f310:	7083      	strb	r3, [r0, #2]
 800f312:	1d02      	adds	r2, r0, #4
 800f314:	70c1      	strb	r1, [r0, #3]
 800f316:	e7ef      	b.n	800f2f8 <__exponent+0x46>

0800f318 <_printf_float>:
 800f318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31c:	b08d      	sub	sp, #52	; 0x34
 800f31e:	460c      	mov	r4, r1
 800f320:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f324:	4616      	mov	r6, r2
 800f326:	461f      	mov	r7, r3
 800f328:	4605      	mov	r5, r0
 800f32a:	f003 f995 	bl	8012658 <_localeconv_r>
 800f32e:	6803      	ldr	r3, [r0, #0]
 800f330:	9304      	str	r3, [sp, #16]
 800f332:	4618      	mov	r0, r3
 800f334:	f7f0 ff64 	bl	8000200 <strlen>
 800f338:	2300      	movs	r3, #0
 800f33a:	930a      	str	r3, [sp, #40]	; 0x28
 800f33c:	f8d8 3000 	ldr.w	r3, [r8]
 800f340:	9005      	str	r0, [sp, #20]
 800f342:	3307      	adds	r3, #7
 800f344:	f023 0307 	bic.w	r3, r3, #7
 800f348:	f103 0208 	add.w	r2, r3, #8
 800f34c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f350:	f8d4 b000 	ldr.w	fp, [r4]
 800f354:	f8c8 2000 	str.w	r2, [r8]
 800f358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f360:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f364:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f368:	9307      	str	r3, [sp, #28]
 800f36a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f36e:	f04f 32ff 	mov.w	r2, #4294967295
 800f372:	4ba7      	ldr	r3, [pc, #668]	; (800f610 <_printf_float+0x2f8>)
 800f374:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f378:	f7f1 fbf0 	bl	8000b5c <__aeabi_dcmpun>
 800f37c:	bb70      	cbnz	r0, 800f3dc <_printf_float+0xc4>
 800f37e:	f04f 32ff 	mov.w	r2, #4294967295
 800f382:	4ba3      	ldr	r3, [pc, #652]	; (800f610 <_printf_float+0x2f8>)
 800f384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f388:	f7f1 fbca 	bl	8000b20 <__aeabi_dcmple>
 800f38c:	bb30      	cbnz	r0, 800f3dc <_printf_float+0xc4>
 800f38e:	2200      	movs	r2, #0
 800f390:	2300      	movs	r3, #0
 800f392:	4640      	mov	r0, r8
 800f394:	4649      	mov	r1, r9
 800f396:	f7f1 fbb9 	bl	8000b0c <__aeabi_dcmplt>
 800f39a:	b110      	cbz	r0, 800f3a2 <_printf_float+0x8a>
 800f39c:	232d      	movs	r3, #45	; 0x2d
 800f39e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3a2:	4a9c      	ldr	r2, [pc, #624]	; (800f614 <_printf_float+0x2fc>)
 800f3a4:	4b9c      	ldr	r3, [pc, #624]	; (800f618 <_printf_float+0x300>)
 800f3a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f3aa:	bf8c      	ite	hi
 800f3ac:	4690      	movhi	r8, r2
 800f3ae:	4698      	movls	r8, r3
 800f3b0:	2303      	movs	r3, #3
 800f3b2:	f02b 0204 	bic.w	r2, fp, #4
 800f3b6:	6123      	str	r3, [r4, #16]
 800f3b8:	6022      	str	r2, [r4, #0]
 800f3ba:	f04f 0900 	mov.w	r9, #0
 800f3be:	9700      	str	r7, [sp, #0]
 800f3c0:	4633      	mov	r3, r6
 800f3c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	f000 f9e6 	bl	800f798 <_printf_common>
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	f040 808d 	bne.w	800f4ec <_printf_float+0x1d4>
 800f3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d6:	b00d      	add	sp, #52	; 0x34
 800f3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3dc:	4642      	mov	r2, r8
 800f3de:	464b      	mov	r3, r9
 800f3e0:	4640      	mov	r0, r8
 800f3e2:	4649      	mov	r1, r9
 800f3e4:	f7f1 fbba 	bl	8000b5c <__aeabi_dcmpun>
 800f3e8:	b110      	cbz	r0, 800f3f0 <_printf_float+0xd8>
 800f3ea:	4a8c      	ldr	r2, [pc, #560]	; (800f61c <_printf_float+0x304>)
 800f3ec:	4b8c      	ldr	r3, [pc, #560]	; (800f620 <_printf_float+0x308>)
 800f3ee:	e7da      	b.n	800f3a6 <_printf_float+0x8e>
 800f3f0:	6861      	ldr	r1, [r4, #4]
 800f3f2:	1c4b      	adds	r3, r1, #1
 800f3f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f3f8:	a80a      	add	r0, sp, #40	; 0x28
 800f3fa:	d13e      	bne.n	800f47a <_printf_float+0x162>
 800f3fc:	2306      	movs	r3, #6
 800f3fe:	6063      	str	r3, [r4, #4]
 800f400:	2300      	movs	r3, #0
 800f402:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f406:	ab09      	add	r3, sp, #36	; 0x24
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	ec49 8b10 	vmov	d0, r8, r9
 800f40e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f412:	6022      	str	r2, [r4, #0]
 800f414:	f8cd a004 	str.w	sl, [sp, #4]
 800f418:	6861      	ldr	r1, [r4, #4]
 800f41a:	4628      	mov	r0, r5
 800f41c:	f7ff fee8 	bl	800f1f0 <__cvt>
 800f420:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f424:	2b47      	cmp	r3, #71	; 0x47
 800f426:	4680      	mov	r8, r0
 800f428:	d109      	bne.n	800f43e <_printf_float+0x126>
 800f42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f42c:	1cd8      	adds	r0, r3, #3
 800f42e:	db02      	blt.n	800f436 <_printf_float+0x11e>
 800f430:	6862      	ldr	r2, [r4, #4]
 800f432:	4293      	cmp	r3, r2
 800f434:	dd47      	ble.n	800f4c6 <_printf_float+0x1ae>
 800f436:	f1aa 0a02 	sub.w	sl, sl, #2
 800f43a:	fa5f fa8a 	uxtb.w	sl, sl
 800f43e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f442:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f444:	d824      	bhi.n	800f490 <_printf_float+0x178>
 800f446:	3901      	subs	r1, #1
 800f448:	4652      	mov	r2, sl
 800f44a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f44e:	9109      	str	r1, [sp, #36]	; 0x24
 800f450:	f7ff ff2f 	bl	800f2b2 <__exponent>
 800f454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f456:	1813      	adds	r3, r2, r0
 800f458:	2a01      	cmp	r2, #1
 800f45a:	4681      	mov	r9, r0
 800f45c:	6123      	str	r3, [r4, #16]
 800f45e:	dc02      	bgt.n	800f466 <_printf_float+0x14e>
 800f460:	6822      	ldr	r2, [r4, #0]
 800f462:	07d1      	lsls	r1, r2, #31
 800f464:	d501      	bpl.n	800f46a <_printf_float+0x152>
 800f466:	3301      	adds	r3, #1
 800f468:	6123      	str	r3, [r4, #16]
 800f46a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d0a5      	beq.n	800f3be <_printf_float+0xa6>
 800f472:	232d      	movs	r3, #45	; 0x2d
 800f474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f478:	e7a1      	b.n	800f3be <_printf_float+0xa6>
 800f47a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f47e:	f000 8177 	beq.w	800f770 <_printf_float+0x458>
 800f482:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f486:	d1bb      	bne.n	800f400 <_printf_float+0xe8>
 800f488:	2900      	cmp	r1, #0
 800f48a:	d1b9      	bne.n	800f400 <_printf_float+0xe8>
 800f48c:	2301      	movs	r3, #1
 800f48e:	e7b6      	b.n	800f3fe <_printf_float+0xe6>
 800f490:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f494:	d119      	bne.n	800f4ca <_printf_float+0x1b2>
 800f496:	2900      	cmp	r1, #0
 800f498:	6863      	ldr	r3, [r4, #4]
 800f49a:	dd0c      	ble.n	800f4b6 <_printf_float+0x19e>
 800f49c:	6121      	str	r1, [r4, #16]
 800f49e:	b913      	cbnz	r3, 800f4a6 <_printf_float+0x18e>
 800f4a0:	6822      	ldr	r2, [r4, #0]
 800f4a2:	07d2      	lsls	r2, r2, #31
 800f4a4:	d502      	bpl.n	800f4ac <_printf_float+0x194>
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	440b      	add	r3, r1
 800f4aa:	6123      	str	r3, [r4, #16]
 800f4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ae:	65a3      	str	r3, [r4, #88]	; 0x58
 800f4b0:	f04f 0900 	mov.w	r9, #0
 800f4b4:	e7d9      	b.n	800f46a <_printf_float+0x152>
 800f4b6:	b913      	cbnz	r3, 800f4be <_printf_float+0x1a6>
 800f4b8:	6822      	ldr	r2, [r4, #0]
 800f4ba:	07d0      	lsls	r0, r2, #31
 800f4bc:	d501      	bpl.n	800f4c2 <_printf_float+0x1aa>
 800f4be:	3302      	adds	r3, #2
 800f4c0:	e7f3      	b.n	800f4aa <_printf_float+0x192>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	e7f1      	b.n	800f4aa <_printf_float+0x192>
 800f4c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f4ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	db05      	blt.n	800f4de <_printf_float+0x1c6>
 800f4d2:	6822      	ldr	r2, [r4, #0]
 800f4d4:	6123      	str	r3, [r4, #16]
 800f4d6:	07d1      	lsls	r1, r2, #31
 800f4d8:	d5e8      	bpl.n	800f4ac <_printf_float+0x194>
 800f4da:	3301      	adds	r3, #1
 800f4dc:	e7e5      	b.n	800f4aa <_printf_float+0x192>
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	bfd4      	ite	le
 800f4e2:	f1c3 0302 	rsble	r3, r3, #2
 800f4e6:	2301      	movgt	r3, #1
 800f4e8:	4413      	add	r3, r2
 800f4ea:	e7de      	b.n	800f4aa <_printf_float+0x192>
 800f4ec:	6823      	ldr	r3, [r4, #0]
 800f4ee:	055a      	lsls	r2, r3, #21
 800f4f0:	d407      	bmi.n	800f502 <_printf_float+0x1ea>
 800f4f2:	6923      	ldr	r3, [r4, #16]
 800f4f4:	4642      	mov	r2, r8
 800f4f6:	4631      	mov	r1, r6
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	47b8      	blx	r7
 800f4fc:	3001      	adds	r0, #1
 800f4fe:	d12b      	bne.n	800f558 <_printf_float+0x240>
 800f500:	e767      	b.n	800f3d2 <_printf_float+0xba>
 800f502:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f506:	f240 80dc 	bls.w	800f6c2 <_printf_float+0x3aa>
 800f50a:	2200      	movs	r2, #0
 800f50c:	2300      	movs	r3, #0
 800f50e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f512:	f7f1 faf1 	bl	8000af8 <__aeabi_dcmpeq>
 800f516:	2800      	cmp	r0, #0
 800f518:	d033      	beq.n	800f582 <_printf_float+0x26a>
 800f51a:	2301      	movs	r3, #1
 800f51c:	4a41      	ldr	r2, [pc, #260]	; (800f624 <_printf_float+0x30c>)
 800f51e:	4631      	mov	r1, r6
 800f520:	4628      	mov	r0, r5
 800f522:	47b8      	blx	r7
 800f524:	3001      	adds	r0, #1
 800f526:	f43f af54 	beq.w	800f3d2 <_printf_float+0xba>
 800f52a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f52e:	429a      	cmp	r2, r3
 800f530:	db02      	blt.n	800f538 <_printf_float+0x220>
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	07d8      	lsls	r0, r3, #31
 800f536:	d50f      	bpl.n	800f558 <_printf_float+0x240>
 800f538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f53c:	4631      	mov	r1, r6
 800f53e:	4628      	mov	r0, r5
 800f540:	47b8      	blx	r7
 800f542:	3001      	adds	r0, #1
 800f544:	f43f af45 	beq.w	800f3d2 <_printf_float+0xba>
 800f548:	f04f 0800 	mov.w	r8, #0
 800f54c:	f104 091a 	add.w	r9, r4, #26
 800f550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f552:	3b01      	subs	r3, #1
 800f554:	4543      	cmp	r3, r8
 800f556:	dc09      	bgt.n	800f56c <_printf_float+0x254>
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	079b      	lsls	r3, r3, #30
 800f55c:	f100 8103 	bmi.w	800f766 <_printf_float+0x44e>
 800f560:	68e0      	ldr	r0, [r4, #12]
 800f562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f564:	4298      	cmp	r0, r3
 800f566:	bfb8      	it	lt
 800f568:	4618      	movlt	r0, r3
 800f56a:	e734      	b.n	800f3d6 <_printf_float+0xbe>
 800f56c:	2301      	movs	r3, #1
 800f56e:	464a      	mov	r2, r9
 800f570:	4631      	mov	r1, r6
 800f572:	4628      	mov	r0, r5
 800f574:	47b8      	blx	r7
 800f576:	3001      	adds	r0, #1
 800f578:	f43f af2b 	beq.w	800f3d2 <_printf_float+0xba>
 800f57c:	f108 0801 	add.w	r8, r8, #1
 800f580:	e7e6      	b.n	800f550 <_printf_float+0x238>
 800f582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f584:	2b00      	cmp	r3, #0
 800f586:	dc2b      	bgt.n	800f5e0 <_printf_float+0x2c8>
 800f588:	2301      	movs	r3, #1
 800f58a:	4a26      	ldr	r2, [pc, #152]	; (800f624 <_printf_float+0x30c>)
 800f58c:	4631      	mov	r1, r6
 800f58e:	4628      	mov	r0, r5
 800f590:	47b8      	blx	r7
 800f592:	3001      	adds	r0, #1
 800f594:	f43f af1d 	beq.w	800f3d2 <_printf_float+0xba>
 800f598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f59a:	b923      	cbnz	r3, 800f5a6 <_printf_float+0x28e>
 800f59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f59e:	b913      	cbnz	r3, 800f5a6 <_printf_float+0x28e>
 800f5a0:	6823      	ldr	r3, [r4, #0]
 800f5a2:	07d9      	lsls	r1, r3, #31
 800f5a4:	d5d8      	bpl.n	800f558 <_printf_float+0x240>
 800f5a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5aa:	4631      	mov	r1, r6
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	47b8      	blx	r7
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	f43f af0e 	beq.w	800f3d2 <_printf_float+0xba>
 800f5b6:	f04f 0900 	mov.w	r9, #0
 800f5ba:	f104 0a1a 	add.w	sl, r4, #26
 800f5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5c0:	425b      	negs	r3, r3
 800f5c2:	454b      	cmp	r3, r9
 800f5c4:	dc01      	bgt.n	800f5ca <_printf_float+0x2b2>
 800f5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5c8:	e794      	b.n	800f4f4 <_printf_float+0x1dc>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	4652      	mov	r2, sl
 800f5ce:	4631      	mov	r1, r6
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	47b8      	blx	r7
 800f5d4:	3001      	adds	r0, #1
 800f5d6:	f43f aefc 	beq.w	800f3d2 <_printf_float+0xba>
 800f5da:	f109 0901 	add.w	r9, r9, #1
 800f5de:	e7ee      	b.n	800f5be <_printf_float+0x2a6>
 800f5e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	bfa8      	it	ge
 800f5e8:	461a      	movge	r2, r3
 800f5ea:	2a00      	cmp	r2, #0
 800f5ec:	4691      	mov	r9, r2
 800f5ee:	dd07      	ble.n	800f600 <_printf_float+0x2e8>
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	4642      	mov	r2, r8
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	47b8      	blx	r7
 800f5fa:	3001      	adds	r0, #1
 800f5fc:	f43f aee9 	beq.w	800f3d2 <_printf_float+0xba>
 800f600:	f104 031a 	add.w	r3, r4, #26
 800f604:	f04f 0b00 	mov.w	fp, #0
 800f608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f60c:	9306      	str	r3, [sp, #24]
 800f60e:	e015      	b.n	800f63c <_printf_float+0x324>
 800f610:	7fefffff 	.word	0x7fefffff
 800f614:	08014508 	.word	0x08014508
 800f618:	08014504 	.word	0x08014504
 800f61c:	08014510 	.word	0x08014510
 800f620:	0801450c 	.word	0x0801450c
 800f624:	08014733 	.word	0x08014733
 800f628:	2301      	movs	r3, #1
 800f62a:	9a06      	ldr	r2, [sp, #24]
 800f62c:	4631      	mov	r1, r6
 800f62e:	4628      	mov	r0, r5
 800f630:	47b8      	blx	r7
 800f632:	3001      	adds	r0, #1
 800f634:	f43f aecd 	beq.w	800f3d2 <_printf_float+0xba>
 800f638:	f10b 0b01 	add.w	fp, fp, #1
 800f63c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f640:	ebaa 0309 	sub.w	r3, sl, r9
 800f644:	455b      	cmp	r3, fp
 800f646:	dcef      	bgt.n	800f628 <_printf_float+0x310>
 800f648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f64c:	429a      	cmp	r2, r3
 800f64e:	44d0      	add	r8, sl
 800f650:	db15      	blt.n	800f67e <_printf_float+0x366>
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	07da      	lsls	r2, r3, #31
 800f656:	d412      	bmi.n	800f67e <_printf_float+0x366>
 800f658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f65a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f65c:	eba3 020a 	sub.w	r2, r3, sl
 800f660:	eba3 0a01 	sub.w	sl, r3, r1
 800f664:	4592      	cmp	sl, r2
 800f666:	bfa8      	it	ge
 800f668:	4692      	movge	sl, r2
 800f66a:	f1ba 0f00 	cmp.w	sl, #0
 800f66e:	dc0e      	bgt.n	800f68e <_printf_float+0x376>
 800f670:	f04f 0800 	mov.w	r8, #0
 800f674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f678:	f104 091a 	add.w	r9, r4, #26
 800f67c:	e019      	b.n	800f6b2 <_printf_float+0x39a>
 800f67e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f682:	4631      	mov	r1, r6
 800f684:	4628      	mov	r0, r5
 800f686:	47b8      	blx	r7
 800f688:	3001      	adds	r0, #1
 800f68a:	d1e5      	bne.n	800f658 <_printf_float+0x340>
 800f68c:	e6a1      	b.n	800f3d2 <_printf_float+0xba>
 800f68e:	4653      	mov	r3, sl
 800f690:	4642      	mov	r2, r8
 800f692:	4631      	mov	r1, r6
 800f694:	4628      	mov	r0, r5
 800f696:	47b8      	blx	r7
 800f698:	3001      	adds	r0, #1
 800f69a:	d1e9      	bne.n	800f670 <_printf_float+0x358>
 800f69c:	e699      	b.n	800f3d2 <_printf_float+0xba>
 800f69e:	2301      	movs	r3, #1
 800f6a0:	464a      	mov	r2, r9
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	47b8      	blx	r7
 800f6a8:	3001      	adds	r0, #1
 800f6aa:	f43f ae92 	beq.w	800f3d2 <_printf_float+0xba>
 800f6ae:	f108 0801 	add.w	r8, r8, #1
 800f6b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6b6:	1a9b      	subs	r3, r3, r2
 800f6b8:	eba3 030a 	sub.w	r3, r3, sl
 800f6bc:	4543      	cmp	r3, r8
 800f6be:	dcee      	bgt.n	800f69e <_printf_float+0x386>
 800f6c0:	e74a      	b.n	800f558 <_printf_float+0x240>
 800f6c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6c4:	2a01      	cmp	r2, #1
 800f6c6:	dc01      	bgt.n	800f6cc <_printf_float+0x3b4>
 800f6c8:	07db      	lsls	r3, r3, #31
 800f6ca:	d53a      	bpl.n	800f742 <_printf_float+0x42a>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	4642      	mov	r2, r8
 800f6d0:	4631      	mov	r1, r6
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	47b8      	blx	r7
 800f6d6:	3001      	adds	r0, #1
 800f6d8:	f43f ae7b 	beq.w	800f3d2 <_printf_float+0xba>
 800f6dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6e0:	4631      	mov	r1, r6
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	47b8      	blx	r7
 800f6e6:	3001      	adds	r0, #1
 800f6e8:	f108 0801 	add.w	r8, r8, #1
 800f6ec:	f43f ae71 	beq.w	800f3d2 <_printf_float+0xba>
 800f6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f103 3aff 	add.w	sl, r3, #4294967295
 800f6f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	f7f1 f9fb 	bl	8000af8 <__aeabi_dcmpeq>
 800f702:	b9c8      	cbnz	r0, 800f738 <_printf_float+0x420>
 800f704:	4653      	mov	r3, sl
 800f706:	4642      	mov	r2, r8
 800f708:	4631      	mov	r1, r6
 800f70a:	4628      	mov	r0, r5
 800f70c:	47b8      	blx	r7
 800f70e:	3001      	adds	r0, #1
 800f710:	d10e      	bne.n	800f730 <_printf_float+0x418>
 800f712:	e65e      	b.n	800f3d2 <_printf_float+0xba>
 800f714:	2301      	movs	r3, #1
 800f716:	4652      	mov	r2, sl
 800f718:	4631      	mov	r1, r6
 800f71a:	4628      	mov	r0, r5
 800f71c:	47b8      	blx	r7
 800f71e:	3001      	adds	r0, #1
 800f720:	f43f ae57 	beq.w	800f3d2 <_printf_float+0xba>
 800f724:	f108 0801 	add.w	r8, r8, #1
 800f728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f72a:	3b01      	subs	r3, #1
 800f72c:	4543      	cmp	r3, r8
 800f72e:	dcf1      	bgt.n	800f714 <_printf_float+0x3fc>
 800f730:	464b      	mov	r3, r9
 800f732:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f736:	e6de      	b.n	800f4f6 <_printf_float+0x1de>
 800f738:	f04f 0800 	mov.w	r8, #0
 800f73c:	f104 0a1a 	add.w	sl, r4, #26
 800f740:	e7f2      	b.n	800f728 <_printf_float+0x410>
 800f742:	2301      	movs	r3, #1
 800f744:	e7df      	b.n	800f706 <_printf_float+0x3ee>
 800f746:	2301      	movs	r3, #1
 800f748:	464a      	mov	r2, r9
 800f74a:	4631      	mov	r1, r6
 800f74c:	4628      	mov	r0, r5
 800f74e:	47b8      	blx	r7
 800f750:	3001      	adds	r0, #1
 800f752:	f43f ae3e 	beq.w	800f3d2 <_printf_float+0xba>
 800f756:	f108 0801 	add.w	r8, r8, #1
 800f75a:	68e3      	ldr	r3, [r4, #12]
 800f75c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f75e:	1a9b      	subs	r3, r3, r2
 800f760:	4543      	cmp	r3, r8
 800f762:	dcf0      	bgt.n	800f746 <_printf_float+0x42e>
 800f764:	e6fc      	b.n	800f560 <_printf_float+0x248>
 800f766:	f04f 0800 	mov.w	r8, #0
 800f76a:	f104 0919 	add.w	r9, r4, #25
 800f76e:	e7f4      	b.n	800f75a <_printf_float+0x442>
 800f770:	2900      	cmp	r1, #0
 800f772:	f43f ae8b 	beq.w	800f48c <_printf_float+0x174>
 800f776:	2300      	movs	r3, #0
 800f778:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f77c:	ab09      	add	r3, sp, #36	; 0x24
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	ec49 8b10 	vmov	d0, r8, r9
 800f784:	6022      	str	r2, [r4, #0]
 800f786:	f8cd a004 	str.w	sl, [sp, #4]
 800f78a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f78e:	4628      	mov	r0, r5
 800f790:	f7ff fd2e 	bl	800f1f0 <__cvt>
 800f794:	4680      	mov	r8, r0
 800f796:	e648      	b.n	800f42a <_printf_float+0x112>

0800f798 <_printf_common>:
 800f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f79c:	4691      	mov	r9, r2
 800f79e:	461f      	mov	r7, r3
 800f7a0:	688a      	ldr	r2, [r1, #8]
 800f7a2:	690b      	ldr	r3, [r1, #16]
 800f7a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	bfb8      	it	lt
 800f7ac:	4613      	movlt	r3, r2
 800f7ae:	f8c9 3000 	str.w	r3, [r9]
 800f7b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	460c      	mov	r4, r1
 800f7ba:	b112      	cbz	r2, 800f7c2 <_printf_common+0x2a>
 800f7bc:	3301      	adds	r3, #1
 800f7be:	f8c9 3000 	str.w	r3, [r9]
 800f7c2:	6823      	ldr	r3, [r4, #0]
 800f7c4:	0699      	lsls	r1, r3, #26
 800f7c6:	bf42      	ittt	mi
 800f7c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f7cc:	3302      	addmi	r3, #2
 800f7ce:	f8c9 3000 	strmi.w	r3, [r9]
 800f7d2:	6825      	ldr	r5, [r4, #0]
 800f7d4:	f015 0506 	ands.w	r5, r5, #6
 800f7d8:	d107      	bne.n	800f7ea <_printf_common+0x52>
 800f7da:	f104 0a19 	add.w	sl, r4, #25
 800f7de:	68e3      	ldr	r3, [r4, #12]
 800f7e0:	f8d9 2000 	ldr.w	r2, [r9]
 800f7e4:	1a9b      	subs	r3, r3, r2
 800f7e6:	42ab      	cmp	r3, r5
 800f7e8:	dc28      	bgt.n	800f83c <_printf_common+0xa4>
 800f7ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f7ee:	6822      	ldr	r2, [r4, #0]
 800f7f0:	3300      	adds	r3, #0
 800f7f2:	bf18      	it	ne
 800f7f4:	2301      	movne	r3, #1
 800f7f6:	0692      	lsls	r2, r2, #26
 800f7f8:	d42d      	bmi.n	800f856 <_printf_common+0xbe>
 800f7fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7fe:	4639      	mov	r1, r7
 800f800:	4630      	mov	r0, r6
 800f802:	47c0      	blx	r8
 800f804:	3001      	adds	r0, #1
 800f806:	d020      	beq.n	800f84a <_printf_common+0xb2>
 800f808:	6823      	ldr	r3, [r4, #0]
 800f80a:	68e5      	ldr	r5, [r4, #12]
 800f80c:	f8d9 2000 	ldr.w	r2, [r9]
 800f810:	f003 0306 	and.w	r3, r3, #6
 800f814:	2b04      	cmp	r3, #4
 800f816:	bf08      	it	eq
 800f818:	1aad      	subeq	r5, r5, r2
 800f81a:	68a3      	ldr	r3, [r4, #8]
 800f81c:	6922      	ldr	r2, [r4, #16]
 800f81e:	bf0c      	ite	eq
 800f820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f824:	2500      	movne	r5, #0
 800f826:	4293      	cmp	r3, r2
 800f828:	bfc4      	itt	gt
 800f82a:	1a9b      	subgt	r3, r3, r2
 800f82c:	18ed      	addgt	r5, r5, r3
 800f82e:	f04f 0900 	mov.w	r9, #0
 800f832:	341a      	adds	r4, #26
 800f834:	454d      	cmp	r5, r9
 800f836:	d11a      	bne.n	800f86e <_printf_common+0xd6>
 800f838:	2000      	movs	r0, #0
 800f83a:	e008      	b.n	800f84e <_printf_common+0xb6>
 800f83c:	2301      	movs	r3, #1
 800f83e:	4652      	mov	r2, sl
 800f840:	4639      	mov	r1, r7
 800f842:	4630      	mov	r0, r6
 800f844:	47c0      	blx	r8
 800f846:	3001      	adds	r0, #1
 800f848:	d103      	bne.n	800f852 <_printf_common+0xba>
 800f84a:	f04f 30ff 	mov.w	r0, #4294967295
 800f84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f852:	3501      	adds	r5, #1
 800f854:	e7c3      	b.n	800f7de <_printf_common+0x46>
 800f856:	18e1      	adds	r1, r4, r3
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	2030      	movs	r0, #48	; 0x30
 800f85c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f860:	4422      	add	r2, r4
 800f862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f86a:	3302      	adds	r3, #2
 800f86c:	e7c5      	b.n	800f7fa <_printf_common+0x62>
 800f86e:	2301      	movs	r3, #1
 800f870:	4622      	mov	r2, r4
 800f872:	4639      	mov	r1, r7
 800f874:	4630      	mov	r0, r6
 800f876:	47c0      	blx	r8
 800f878:	3001      	adds	r0, #1
 800f87a:	d0e6      	beq.n	800f84a <_printf_common+0xb2>
 800f87c:	f109 0901 	add.w	r9, r9, #1
 800f880:	e7d8      	b.n	800f834 <_printf_common+0x9c>
	...

0800f884 <_printf_i>:
 800f884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f888:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f88c:	460c      	mov	r4, r1
 800f88e:	7e09      	ldrb	r1, [r1, #24]
 800f890:	b085      	sub	sp, #20
 800f892:	296e      	cmp	r1, #110	; 0x6e
 800f894:	4617      	mov	r7, r2
 800f896:	4606      	mov	r6, r0
 800f898:	4698      	mov	r8, r3
 800f89a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f89c:	f000 80b3 	beq.w	800fa06 <_printf_i+0x182>
 800f8a0:	d822      	bhi.n	800f8e8 <_printf_i+0x64>
 800f8a2:	2963      	cmp	r1, #99	; 0x63
 800f8a4:	d036      	beq.n	800f914 <_printf_i+0x90>
 800f8a6:	d80a      	bhi.n	800f8be <_printf_i+0x3a>
 800f8a8:	2900      	cmp	r1, #0
 800f8aa:	f000 80b9 	beq.w	800fa20 <_printf_i+0x19c>
 800f8ae:	2958      	cmp	r1, #88	; 0x58
 800f8b0:	f000 8083 	beq.w	800f9ba <_printf_i+0x136>
 800f8b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f8bc:	e032      	b.n	800f924 <_printf_i+0xa0>
 800f8be:	2964      	cmp	r1, #100	; 0x64
 800f8c0:	d001      	beq.n	800f8c6 <_printf_i+0x42>
 800f8c2:	2969      	cmp	r1, #105	; 0x69
 800f8c4:	d1f6      	bne.n	800f8b4 <_printf_i+0x30>
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	6813      	ldr	r3, [r2, #0]
 800f8ca:	0605      	lsls	r5, r0, #24
 800f8cc:	f103 0104 	add.w	r1, r3, #4
 800f8d0:	d52a      	bpl.n	800f928 <_printf_i+0xa4>
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	6011      	str	r1, [r2, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	da03      	bge.n	800f8e2 <_printf_i+0x5e>
 800f8da:	222d      	movs	r2, #45	; 0x2d
 800f8dc:	425b      	negs	r3, r3
 800f8de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f8e2:	486f      	ldr	r0, [pc, #444]	; (800faa0 <_printf_i+0x21c>)
 800f8e4:	220a      	movs	r2, #10
 800f8e6:	e039      	b.n	800f95c <_printf_i+0xd8>
 800f8e8:	2973      	cmp	r1, #115	; 0x73
 800f8ea:	f000 809d 	beq.w	800fa28 <_printf_i+0x1a4>
 800f8ee:	d808      	bhi.n	800f902 <_printf_i+0x7e>
 800f8f0:	296f      	cmp	r1, #111	; 0x6f
 800f8f2:	d020      	beq.n	800f936 <_printf_i+0xb2>
 800f8f4:	2970      	cmp	r1, #112	; 0x70
 800f8f6:	d1dd      	bne.n	800f8b4 <_printf_i+0x30>
 800f8f8:	6823      	ldr	r3, [r4, #0]
 800f8fa:	f043 0320 	orr.w	r3, r3, #32
 800f8fe:	6023      	str	r3, [r4, #0]
 800f900:	e003      	b.n	800f90a <_printf_i+0x86>
 800f902:	2975      	cmp	r1, #117	; 0x75
 800f904:	d017      	beq.n	800f936 <_printf_i+0xb2>
 800f906:	2978      	cmp	r1, #120	; 0x78
 800f908:	d1d4      	bne.n	800f8b4 <_printf_i+0x30>
 800f90a:	2378      	movs	r3, #120	; 0x78
 800f90c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f910:	4864      	ldr	r0, [pc, #400]	; (800faa4 <_printf_i+0x220>)
 800f912:	e055      	b.n	800f9c0 <_printf_i+0x13c>
 800f914:	6813      	ldr	r3, [r2, #0]
 800f916:	1d19      	adds	r1, r3, #4
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	6011      	str	r1, [r2, #0]
 800f91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f924:	2301      	movs	r3, #1
 800f926:	e08c      	b.n	800fa42 <_printf_i+0x1be>
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	6011      	str	r1, [r2, #0]
 800f92c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f930:	bf18      	it	ne
 800f932:	b21b      	sxthne	r3, r3
 800f934:	e7cf      	b.n	800f8d6 <_printf_i+0x52>
 800f936:	6813      	ldr	r3, [r2, #0]
 800f938:	6825      	ldr	r5, [r4, #0]
 800f93a:	1d18      	adds	r0, r3, #4
 800f93c:	6010      	str	r0, [r2, #0]
 800f93e:	0628      	lsls	r0, r5, #24
 800f940:	d501      	bpl.n	800f946 <_printf_i+0xc2>
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	e002      	b.n	800f94c <_printf_i+0xc8>
 800f946:	0668      	lsls	r0, r5, #25
 800f948:	d5fb      	bpl.n	800f942 <_printf_i+0xbe>
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	4854      	ldr	r0, [pc, #336]	; (800faa0 <_printf_i+0x21c>)
 800f94e:	296f      	cmp	r1, #111	; 0x6f
 800f950:	bf14      	ite	ne
 800f952:	220a      	movne	r2, #10
 800f954:	2208      	moveq	r2, #8
 800f956:	2100      	movs	r1, #0
 800f958:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f95c:	6865      	ldr	r5, [r4, #4]
 800f95e:	60a5      	str	r5, [r4, #8]
 800f960:	2d00      	cmp	r5, #0
 800f962:	f2c0 8095 	blt.w	800fa90 <_printf_i+0x20c>
 800f966:	6821      	ldr	r1, [r4, #0]
 800f968:	f021 0104 	bic.w	r1, r1, #4
 800f96c:	6021      	str	r1, [r4, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d13d      	bne.n	800f9ee <_printf_i+0x16a>
 800f972:	2d00      	cmp	r5, #0
 800f974:	f040 808e 	bne.w	800fa94 <_printf_i+0x210>
 800f978:	4665      	mov	r5, ip
 800f97a:	2a08      	cmp	r2, #8
 800f97c:	d10b      	bne.n	800f996 <_printf_i+0x112>
 800f97e:	6823      	ldr	r3, [r4, #0]
 800f980:	07db      	lsls	r3, r3, #31
 800f982:	d508      	bpl.n	800f996 <_printf_i+0x112>
 800f984:	6923      	ldr	r3, [r4, #16]
 800f986:	6862      	ldr	r2, [r4, #4]
 800f988:	429a      	cmp	r2, r3
 800f98a:	bfde      	ittt	le
 800f98c:	2330      	movle	r3, #48	; 0x30
 800f98e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f992:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f996:	ebac 0305 	sub.w	r3, ip, r5
 800f99a:	6123      	str	r3, [r4, #16]
 800f99c:	f8cd 8000 	str.w	r8, [sp]
 800f9a0:	463b      	mov	r3, r7
 800f9a2:	aa03      	add	r2, sp, #12
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f7ff fef6 	bl	800f798 <_printf_common>
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d14d      	bne.n	800fa4c <_printf_i+0x1c8>
 800f9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b4:	b005      	add	sp, #20
 800f9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9ba:	4839      	ldr	r0, [pc, #228]	; (800faa0 <_printf_i+0x21c>)
 800f9bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f9c0:	6813      	ldr	r3, [r2, #0]
 800f9c2:	6821      	ldr	r1, [r4, #0]
 800f9c4:	1d1d      	adds	r5, r3, #4
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6015      	str	r5, [r2, #0]
 800f9ca:	060a      	lsls	r2, r1, #24
 800f9cc:	d50b      	bpl.n	800f9e6 <_printf_i+0x162>
 800f9ce:	07ca      	lsls	r2, r1, #31
 800f9d0:	bf44      	itt	mi
 800f9d2:	f041 0120 	orrmi.w	r1, r1, #32
 800f9d6:	6021      	strmi	r1, [r4, #0]
 800f9d8:	b91b      	cbnz	r3, 800f9e2 <_printf_i+0x15e>
 800f9da:	6822      	ldr	r2, [r4, #0]
 800f9dc:	f022 0220 	bic.w	r2, r2, #32
 800f9e0:	6022      	str	r2, [r4, #0]
 800f9e2:	2210      	movs	r2, #16
 800f9e4:	e7b7      	b.n	800f956 <_printf_i+0xd2>
 800f9e6:	064d      	lsls	r5, r1, #25
 800f9e8:	bf48      	it	mi
 800f9ea:	b29b      	uxthmi	r3, r3
 800f9ec:	e7ef      	b.n	800f9ce <_printf_i+0x14a>
 800f9ee:	4665      	mov	r5, ip
 800f9f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9f4:	fb02 3311 	mls	r3, r2, r1, r3
 800f9f8:	5cc3      	ldrb	r3, [r0, r3]
 800f9fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f9fe:	460b      	mov	r3, r1
 800fa00:	2900      	cmp	r1, #0
 800fa02:	d1f5      	bne.n	800f9f0 <_printf_i+0x16c>
 800fa04:	e7b9      	b.n	800f97a <_printf_i+0xf6>
 800fa06:	6813      	ldr	r3, [r2, #0]
 800fa08:	6825      	ldr	r5, [r4, #0]
 800fa0a:	6961      	ldr	r1, [r4, #20]
 800fa0c:	1d18      	adds	r0, r3, #4
 800fa0e:	6010      	str	r0, [r2, #0]
 800fa10:	0628      	lsls	r0, r5, #24
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	d501      	bpl.n	800fa1a <_printf_i+0x196>
 800fa16:	6019      	str	r1, [r3, #0]
 800fa18:	e002      	b.n	800fa20 <_printf_i+0x19c>
 800fa1a:	066a      	lsls	r2, r5, #25
 800fa1c:	d5fb      	bpl.n	800fa16 <_printf_i+0x192>
 800fa1e:	8019      	strh	r1, [r3, #0]
 800fa20:	2300      	movs	r3, #0
 800fa22:	6123      	str	r3, [r4, #16]
 800fa24:	4665      	mov	r5, ip
 800fa26:	e7b9      	b.n	800f99c <_printf_i+0x118>
 800fa28:	6813      	ldr	r3, [r2, #0]
 800fa2a:	1d19      	adds	r1, r3, #4
 800fa2c:	6011      	str	r1, [r2, #0]
 800fa2e:	681d      	ldr	r5, [r3, #0]
 800fa30:	6862      	ldr	r2, [r4, #4]
 800fa32:	2100      	movs	r1, #0
 800fa34:	4628      	mov	r0, r5
 800fa36:	f7f0 fbeb 	bl	8000210 <memchr>
 800fa3a:	b108      	cbz	r0, 800fa40 <_printf_i+0x1bc>
 800fa3c:	1b40      	subs	r0, r0, r5
 800fa3e:	6060      	str	r0, [r4, #4]
 800fa40:	6863      	ldr	r3, [r4, #4]
 800fa42:	6123      	str	r3, [r4, #16]
 800fa44:	2300      	movs	r3, #0
 800fa46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa4a:	e7a7      	b.n	800f99c <_printf_i+0x118>
 800fa4c:	6923      	ldr	r3, [r4, #16]
 800fa4e:	462a      	mov	r2, r5
 800fa50:	4639      	mov	r1, r7
 800fa52:	4630      	mov	r0, r6
 800fa54:	47c0      	blx	r8
 800fa56:	3001      	adds	r0, #1
 800fa58:	d0aa      	beq.n	800f9b0 <_printf_i+0x12c>
 800fa5a:	6823      	ldr	r3, [r4, #0]
 800fa5c:	079b      	lsls	r3, r3, #30
 800fa5e:	d413      	bmi.n	800fa88 <_printf_i+0x204>
 800fa60:	68e0      	ldr	r0, [r4, #12]
 800fa62:	9b03      	ldr	r3, [sp, #12]
 800fa64:	4298      	cmp	r0, r3
 800fa66:	bfb8      	it	lt
 800fa68:	4618      	movlt	r0, r3
 800fa6a:	e7a3      	b.n	800f9b4 <_printf_i+0x130>
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	464a      	mov	r2, r9
 800fa70:	4639      	mov	r1, r7
 800fa72:	4630      	mov	r0, r6
 800fa74:	47c0      	blx	r8
 800fa76:	3001      	adds	r0, #1
 800fa78:	d09a      	beq.n	800f9b0 <_printf_i+0x12c>
 800fa7a:	3501      	adds	r5, #1
 800fa7c:	68e3      	ldr	r3, [r4, #12]
 800fa7e:	9a03      	ldr	r2, [sp, #12]
 800fa80:	1a9b      	subs	r3, r3, r2
 800fa82:	42ab      	cmp	r3, r5
 800fa84:	dcf2      	bgt.n	800fa6c <_printf_i+0x1e8>
 800fa86:	e7eb      	b.n	800fa60 <_printf_i+0x1dc>
 800fa88:	2500      	movs	r5, #0
 800fa8a:	f104 0919 	add.w	r9, r4, #25
 800fa8e:	e7f5      	b.n	800fa7c <_printf_i+0x1f8>
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1ac      	bne.n	800f9ee <_printf_i+0x16a>
 800fa94:	7803      	ldrb	r3, [r0, #0]
 800fa96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa9e:	e76c      	b.n	800f97a <_printf_i+0xf6>
 800faa0:	08014514 	.word	0x08014514
 800faa4:	08014525 	.word	0x08014525

0800faa8 <_scanf_float>:
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	469a      	mov	sl, r3
 800faae:	688b      	ldr	r3, [r1, #8]
 800fab0:	4616      	mov	r6, r2
 800fab2:	1e5a      	subs	r2, r3, #1
 800fab4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fab8:	b087      	sub	sp, #28
 800faba:	bf83      	ittte	hi
 800fabc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800fac0:	189b      	addhi	r3, r3, r2
 800fac2:	9301      	strhi	r3, [sp, #4]
 800fac4:	2300      	movls	r3, #0
 800fac6:	bf86      	itte	hi
 800fac8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800facc:	608b      	strhi	r3, [r1, #8]
 800face:	9301      	strls	r3, [sp, #4]
 800fad0:	680b      	ldr	r3, [r1, #0]
 800fad2:	4688      	mov	r8, r1
 800fad4:	f04f 0b00 	mov.w	fp, #0
 800fad8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fadc:	f848 3b1c 	str.w	r3, [r8], #28
 800fae0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800fae4:	4607      	mov	r7, r0
 800fae6:	460c      	mov	r4, r1
 800fae8:	4645      	mov	r5, r8
 800faea:	465a      	mov	r2, fp
 800faec:	46d9      	mov	r9, fp
 800faee:	f8cd b008 	str.w	fp, [sp, #8]
 800faf2:	68a1      	ldr	r1, [r4, #8]
 800faf4:	b181      	cbz	r1, 800fb18 <_scanf_float+0x70>
 800faf6:	6833      	ldr	r3, [r6, #0]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	2b49      	cmp	r3, #73	; 0x49
 800fafc:	d071      	beq.n	800fbe2 <_scanf_float+0x13a>
 800fafe:	d84d      	bhi.n	800fb9c <_scanf_float+0xf4>
 800fb00:	2b39      	cmp	r3, #57	; 0x39
 800fb02:	d840      	bhi.n	800fb86 <_scanf_float+0xde>
 800fb04:	2b31      	cmp	r3, #49	; 0x31
 800fb06:	f080 8088 	bcs.w	800fc1a <_scanf_float+0x172>
 800fb0a:	2b2d      	cmp	r3, #45	; 0x2d
 800fb0c:	f000 8090 	beq.w	800fc30 <_scanf_float+0x188>
 800fb10:	d815      	bhi.n	800fb3e <_scanf_float+0x96>
 800fb12:	2b2b      	cmp	r3, #43	; 0x2b
 800fb14:	f000 808c 	beq.w	800fc30 <_scanf_float+0x188>
 800fb18:	f1b9 0f00 	cmp.w	r9, #0
 800fb1c:	d003      	beq.n	800fb26 <_scanf_float+0x7e>
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	3a01      	subs	r2, #1
 800fb28:	2a01      	cmp	r2, #1
 800fb2a:	f200 80ea 	bhi.w	800fd02 <_scanf_float+0x25a>
 800fb2e:	4545      	cmp	r5, r8
 800fb30:	f200 80dc 	bhi.w	800fcec <_scanf_float+0x244>
 800fb34:	2601      	movs	r6, #1
 800fb36:	4630      	mov	r0, r6
 800fb38:	b007      	add	sp, #28
 800fb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3e:	2b2e      	cmp	r3, #46	; 0x2e
 800fb40:	f000 809f 	beq.w	800fc82 <_scanf_float+0x1da>
 800fb44:	2b30      	cmp	r3, #48	; 0x30
 800fb46:	d1e7      	bne.n	800fb18 <_scanf_float+0x70>
 800fb48:	6820      	ldr	r0, [r4, #0]
 800fb4a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800fb4e:	d064      	beq.n	800fc1a <_scanf_float+0x172>
 800fb50:	9b01      	ldr	r3, [sp, #4]
 800fb52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800fb56:	6020      	str	r0, [r4, #0]
 800fb58:	f109 0901 	add.w	r9, r9, #1
 800fb5c:	b11b      	cbz	r3, 800fb66 <_scanf_float+0xbe>
 800fb5e:	3b01      	subs	r3, #1
 800fb60:	3101      	adds	r1, #1
 800fb62:	9301      	str	r3, [sp, #4]
 800fb64:	60a1      	str	r1, [r4, #8]
 800fb66:	68a3      	ldr	r3, [r4, #8]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	60a3      	str	r3, [r4, #8]
 800fb6c:	6923      	ldr	r3, [r4, #16]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	6123      	str	r3, [r4, #16]
 800fb72:	6873      	ldr	r3, [r6, #4]
 800fb74:	3b01      	subs	r3, #1
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	6073      	str	r3, [r6, #4]
 800fb7a:	f340 80ac 	ble.w	800fcd6 <_scanf_float+0x22e>
 800fb7e:	6833      	ldr	r3, [r6, #0]
 800fb80:	3301      	adds	r3, #1
 800fb82:	6033      	str	r3, [r6, #0]
 800fb84:	e7b5      	b.n	800faf2 <_scanf_float+0x4a>
 800fb86:	2b45      	cmp	r3, #69	; 0x45
 800fb88:	f000 8085 	beq.w	800fc96 <_scanf_float+0x1ee>
 800fb8c:	2b46      	cmp	r3, #70	; 0x46
 800fb8e:	d06a      	beq.n	800fc66 <_scanf_float+0x1be>
 800fb90:	2b41      	cmp	r3, #65	; 0x41
 800fb92:	d1c1      	bne.n	800fb18 <_scanf_float+0x70>
 800fb94:	2a01      	cmp	r2, #1
 800fb96:	d1bf      	bne.n	800fb18 <_scanf_float+0x70>
 800fb98:	2202      	movs	r2, #2
 800fb9a:	e046      	b.n	800fc2a <_scanf_float+0x182>
 800fb9c:	2b65      	cmp	r3, #101	; 0x65
 800fb9e:	d07a      	beq.n	800fc96 <_scanf_float+0x1ee>
 800fba0:	d818      	bhi.n	800fbd4 <_scanf_float+0x12c>
 800fba2:	2b54      	cmp	r3, #84	; 0x54
 800fba4:	d066      	beq.n	800fc74 <_scanf_float+0x1cc>
 800fba6:	d811      	bhi.n	800fbcc <_scanf_float+0x124>
 800fba8:	2b4e      	cmp	r3, #78	; 0x4e
 800fbaa:	d1b5      	bne.n	800fb18 <_scanf_float+0x70>
 800fbac:	2a00      	cmp	r2, #0
 800fbae:	d146      	bne.n	800fc3e <_scanf_float+0x196>
 800fbb0:	f1b9 0f00 	cmp.w	r9, #0
 800fbb4:	d145      	bne.n	800fc42 <_scanf_float+0x19a>
 800fbb6:	6821      	ldr	r1, [r4, #0]
 800fbb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800fbbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800fbc0:	d13f      	bne.n	800fc42 <_scanf_float+0x19a>
 800fbc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800fbc6:	6021      	str	r1, [r4, #0]
 800fbc8:	2201      	movs	r2, #1
 800fbca:	e02e      	b.n	800fc2a <_scanf_float+0x182>
 800fbcc:	2b59      	cmp	r3, #89	; 0x59
 800fbce:	d01e      	beq.n	800fc0e <_scanf_float+0x166>
 800fbd0:	2b61      	cmp	r3, #97	; 0x61
 800fbd2:	e7de      	b.n	800fb92 <_scanf_float+0xea>
 800fbd4:	2b6e      	cmp	r3, #110	; 0x6e
 800fbd6:	d0e9      	beq.n	800fbac <_scanf_float+0x104>
 800fbd8:	d815      	bhi.n	800fc06 <_scanf_float+0x15e>
 800fbda:	2b66      	cmp	r3, #102	; 0x66
 800fbdc:	d043      	beq.n	800fc66 <_scanf_float+0x1be>
 800fbde:	2b69      	cmp	r3, #105	; 0x69
 800fbe0:	d19a      	bne.n	800fb18 <_scanf_float+0x70>
 800fbe2:	f1bb 0f00 	cmp.w	fp, #0
 800fbe6:	d138      	bne.n	800fc5a <_scanf_float+0x1b2>
 800fbe8:	f1b9 0f00 	cmp.w	r9, #0
 800fbec:	d197      	bne.n	800fb1e <_scanf_float+0x76>
 800fbee:	6821      	ldr	r1, [r4, #0]
 800fbf0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800fbf4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800fbf8:	d195      	bne.n	800fb26 <_scanf_float+0x7e>
 800fbfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800fbfe:	6021      	str	r1, [r4, #0]
 800fc00:	f04f 0b01 	mov.w	fp, #1
 800fc04:	e011      	b.n	800fc2a <_scanf_float+0x182>
 800fc06:	2b74      	cmp	r3, #116	; 0x74
 800fc08:	d034      	beq.n	800fc74 <_scanf_float+0x1cc>
 800fc0a:	2b79      	cmp	r3, #121	; 0x79
 800fc0c:	d184      	bne.n	800fb18 <_scanf_float+0x70>
 800fc0e:	f1bb 0f07 	cmp.w	fp, #7
 800fc12:	d181      	bne.n	800fb18 <_scanf_float+0x70>
 800fc14:	f04f 0b08 	mov.w	fp, #8
 800fc18:	e007      	b.n	800fc2a <_scanf_float+0x182>
 800fc1a:	eb12 0f0b 	cmn.w	r2, fp
 800fc1e:	f47f af7b 	bne.w	800fb18 <_scanf_float+0x70>
 800fc22:	6821      	ldr	r1, [r4, #0]
 800fc24:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800fc28:	6021      	str	r1, [r4, #0]
 800fc2a:	702b      	strb	r3, [r5, #0]
 800fc2c:	3501      	adds	r5, #1
 800fc2e:	e79a      	b.n	800fb66 <_scanf_float+0xbe>
 800fc30:	6821      	ldr	r1, [r4, #0]
 800fc32:	0608      	lsls	r0, r1, #24
 800fc34:	f57f af70 	bpl.w	800fb18 <_scanf_float+0x70>
 800fc38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fc3c:	e7f4      	b.n	800fc28 <_scanf_float+0x180>
 800fc3e:	2a02      	cmp	r2, #2
 800fc40:	d047      	beq.n	800fcd2 <_scanf_float+0x22a>
 800fc42:	f1bb 0f01 	cmp.w	fp, #1
 800fc46:	d003      	beq.n	800fc50 <_scanf_float+0x1a8>
 800fc48:	f1bb 0f04 	cmp.w	fp, #4
 800fc4c:	f47f af64 	bne.w	800fb18 <_scanf_float+0x70>
 800fc50:	f10b 0b01 	add.w	fp, fp, #1
 800fc54:	fa5f fb8b 	uxtb.w	fp, fp
 800fc58:	e7e7      	b.n	800fc2a <_scanf_float+0x182>
 800fc5a:	f1bb 0f03 	cmp.w	fp, #3
 800fc5e:	d0f7      	beq.n	800fc50 <_scanf_float+0x1a8>
 800fc60:	f1bb 0f05 	cmp.w	fp, #5
 800fc64:	e7f2      	b.n	800fc4c <_scanf_float+0x1a4>
 800fc66:	f1bb 0f02 	cmp.w	fp, #2
 800fc6a:	f47f af55 	bne.w	800fb18 <_scanf_float+0x70>
 800fc6e:	f04f 0b03 	mov.w	fp, #3
 800fc72:	e7da      	b.n	800fc2a <_scanf_float+0x182>
 800fc74:	f1bb 0f06 	cmp.w	fp, #6
 800fc78:	f47f af4e 	bne.w	800fb18 <_scanf_float+0x70>
 800fc7c:	f04f 0b07 	mov.w	fp, #7
 800fc80:	e7d3      	b.n	800fc2a <_scanf_float+0x182>
 800fc82:	6821      	ldr	r1, [r4, #0]
 800fc84:	0588      	lsls	r0, r1, #22
 800fc86:	f57f af47 	bpl.w	800fb18 <_scanf_float+0x70>
 800fc8a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800fc8e:	6021      	str	r1, [r4, #0]
 800fc90:	f8cd 9008 	str.w	r9, [sp, #8]
 800fc94:	e7c9      	b.n	800fc2a <_scanf_float+0x182>
 800fc96:	6821      	ldr	r1, [r4, #0]
 800fc98:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800fc9c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800fca0:	d006      	beq.n	800fcb0 <_scanf_float+0x208>
 800fca2:	0548      	lsls	r0, r1, #21
 800fca4:	f57f af38 	bpl.w	800fb18 <_scanf_float+0x70>
 800fca8:	f1b9 0f00 	cmp.w	r9, #0
 800fcac:	f43f af3b 	beq.w	800fb26 <_scanf_float+0x7e>
 800fcb0:	0588      	lsls	r0, r1, #22
 800fcb2:	bf58      	it	pl
 800fcb4:	9802      	ldrpl	r0, [sp, #8]
 800fcb6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800fcba:	bf58      	it	pl
 800fcbc:	eba9 0000 	subpl.w	r0, r9, r0
 800fcc0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800fcc4:	bf58      	it	pl
 800fcc6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800fcca:	6021      	str	r1, [r4, #0]
 800fccc:	f04f 0900 	mov.w	r9, #0
 800fcd0:	e7ab      	b.n	800fc2a <_scanf_float+0x182>
 800fcd2:	2203      	movs	r2, #3
 800fcd4:	e7a9      	b.n	800fc2a <_scanf_float+0x182>
 800fcd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fcda:	9205      	str	r2, [sp, #20]
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4638      	mov	r0, r7
 800fce0:	4798      	blx	r3
 800fce2:	9a05      	ldr	r2, [sp, #20]
 800fce4:	2800      	cmp	r0, #0
 800fce6:	f43f af04 	beq.w	800faf2 <_scanf_float+0x4a>
 800fcea:	e715      	b.n	800fb18 <_scanf_float+0x70>
 800fcec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fcf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	4798      	blx	r3
 800fcfa:	6923      	ldr	r3, [r4, #16]
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	6123      	str	r3, [r4, #16]
 800fd00:	e715      	b.n	800fb2e <_scanf_float+0x86>
 800fd02:	f10b 33ff 	add.w	r3, fp, #4294967295
 800fd06:	2b06      	cmp	r3, #6
 800fd08:	d80a      	bhi.n	800fd20 <_scanf_float+0x278>
 800fd0a:	f1bb 0f02 	cmp.w	fp, #2
 800fd0e:	d968      	bls.n	800fde2 <_scanf_float+0x33a>
 800fd10:	f1ab 0b03 	sub.w	fp, fp, #3
 800fd14:	fa5f fb8b 	uxtb.w	fp, fp
 800fd18:	eba5 0b0b 	sub.w	fp, r5, fp
 800fd1c:	455d      	cmp	r5, fp
 800fd1e:	d14b      	bne.n	800fdb8 <_scanf_float+0x310>
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	05da      	lsls	r2, r3, #23
 800fd24:	d51f      	bpl.n	800fd66 <_scanf_float+0x2be>
 800fd26:	055b      	lsls	r3, r3, #21
 800fd28:	d468      	bmi.n	800fdfc <_scanf_float+0x354>
 800fd2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fd2e:	6923      	ldr	r3, [r4, #16]
 800fd30:	2965      	cmp	r1, #101	; 0x65
 800fd32:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd36:	f105 3bff 	add.w	fp, r5, #4294967295
 800fd3a:	6123      	str	r3, [r4, #16]
 800fd3c:	d00d      	beq.n	800fd5a <_scanf_float+0x2b2>
 800fd3e:	2945      	cmp	r1, #69	; 0x45
 800fd40:	d00b      	beq.n	800fd5a <_scanf_float+0x2b2>
 800fd42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd46:	4632      	mov	r2, r6
 800fd48:	4638      	mov	r0, r7
 800fd4a:	4798      	blx	r3
 800fd4c:	6923      	ldr	r3, [r4, #16]
 800fd4e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800fd52:	3b01      	subs	r3, #1
 800fd54:	f1a5 0b02 	sub.w	fp, r5, #2
 800fd58:	6123      	str	r3, [r4, #16]
 800fd5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd5e:	4632      	mov	r2, r6
 800fd60:	4638      	mov	r0, r7
 800fd62:	4798      	blx	r3
 800fd64:	465d      	mov	r5, fp
 800fd66:	6826      	ldr	r6, [r4, #0]
 800fd68:	f016 0610 	ands.w	r6, r6, #16
 800fd6c:	d17a      	bne.n	800fe64 <_scanf_float+0x3bc>
 800fd6e:	702e      	strb	r6, [r5, #0]
 800fd70:	6823      	ldr	r3, [r4, #0]
 800fd72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fd76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd7a:	d142      	bne.n	800fe02 <_scanf_float+0x35a>
 800fd7c:	9b02      	ldr	r3, [sp, #8]
 800fd7e:	eba9 0303 	sub.w	r3, r9, r3
 800fd82:	425a      	negs	r2, r3
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d149      	bne.n	800fe1c <_scanf_float+0x374>
 800fd88:	2200      	movs	r2, #0
 800fd8a:	4641      	mov	r1, r8
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	f000 ffcb 	bl	8010d28 <_strtod_r>
 800fd92:	6825      	ldr	r5, [r4, #0]
 800fd94:	f8da 3000 	ldr.w	r3, [sl]
 800fd98:	f015 0f02 	tst.w	r5, #2
 800fd9c:	f103 0204 	add.w	r2, r3, #4
 800fda0:	ec59 8b10 	vmov	r8, r9, d0
 800fda4:	f8ca 2000 	str.w	r2, [sl]
 800fda8:	d043      	beq.n	800fe32 <_scanf_float+0x38a>
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	e9c3 8900 	strd	r8, r9, [r3]
 800fdb0:	68e3      	ldr	r3, [r4, #12]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	60e3      	str	r3, [r4, #12]
 800fdb6:	e6be      	b.n	800fb36 <_scanf_float+0x8e>
 800fdb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdbc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800fdc0:	4632      	mov	r2, r6
 800fdc2:	4638      	mov	r0, r7
 800fdc4:	4798      	blx	r3
 800fdc6:	6923      	ldr	r3, [r4, #16]
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	6123      	str	r3, [r4, #16]
 800fdcc:	e7a6      	b.n	800fd1c <_scanf_float+0x274>
 800fdce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdd2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800fdd6:	4632      	mov	r2, r6
 800fdd8:	4638      	mov	r0, r7
 800fdda:	4798      	blx	r3
 800fddc:	6923      	ldr	r3, [r4, #16]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	6123      	str	r3, [r4, #16]
 800fde2:	4545      	cmp	r5, r8
 800fde4:	d8f3      	bhi.n	800fdce <_scanf_float+0x326>
 800fde6:	e6a5      	b.n	800fb34 <_scanf_float+0x8c>
 800fde8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800fdf0:	4632      	mov	r2, r6
 800fdf2:	4638      	mov	r0, r7
 800fdf4:	4798      	blx	r3
 800fdf6:	6923      	ldr	r3, [r4, #16]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	6123      	str	r3, [r4, #16]
 800fdfc:	4545      	cmp	r5, r8
 800fdfe:	d8f3      	bhi.n	800fde8 <_scanf_float+0x340>
 800fe00:	e698      	b.n	800fb34 <_scanf_float+0x8c>
 800fe02:	9b03      	ldr	r3, [sp, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d0bf      	beq.n	800fd88 <_scanf_float+0x2e0>
 800fe08:	9904      	ldr	r1, [sp, #16]
 800fe0a:	230a      	movs	r3, #10
 800fe0c:	4632      	mov	r2, r6
 800fe0e:	3101      	adds	r1, #1
 800fe10:	4638      	mov	r0, r7
 800fe12:	f001 f815 	bl	8010e40 <_strtol_r>
 800fe16:	9b03      	ldr	r3, [sp, #12]
 800fe18:	9d04      	ldr	r5, [sp, #16]
 800fe1a:	1ac2      	subs	r2, r0, r3
 800fe1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fe20:	429d      	cmp	r5, r3
 800fe22:	bf28      	it	cs
 800fe24:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800fe28:	490f      	ldr	r1, [pc, #60]	; (800fe68 <_scanf_float+0x3c0>)
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	f000 f8d4 	bl	800ffd8 <siprintf>
 800fe30:	e7aa      	b.n	800fd88 <_scanf_float+0x2e0>
 800fe32:	f015 0504 	ands.w	r5, r5, #4
 800fe36:	d1b8      	bne.n	800fdaa <_scanf_float+0x302>
 800fe38:	681f      	ldr	r7, [r3, #0]
 800fe3a:	ee10 2a10 	vmov	r2, s0
 800fe3e:	464b      	mov	r3, r9
 800fe40:	ee10 0a10 	vmov	r0, s0
 800fe44:	4649      	mov	r1, r9
 800fe46:	f7f0 fe89 	bl	8000b5c <__aeabi_dcmpun>
 800fe4a:	b128      	cbz	r0, 800fe58 <_scanf_float+0x3b0>
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	f000 f889 	bl	800ff64 <nanf>
 800fe52:	ed87 0a00 	vstr	s0, [r7]
 800fe56:	e7ab      	b.n	800fdb0 <_scanf_float+0x308>
 800fe58:	4640      	mov	r0, r8
 800fe5a:	4649      	mov	r1, r9
 800fe5c:	f7f0 fedc 	bl	8000c18 <__aeabi_d2f>
 800fe60:	6038      	str	r0, [r7, #0]
 800fe62:	e7a5      	b.n	800fdb0 <_scanf_float+0x308>
 800fe64:	2600      	movs	r6, #0
 800fe66:	e666      	b.n	800fb36 <_scanf_float+0x8e>
 800fe68:	08014536 	.word	0x08014536

0800fe6c <iprintf>:
 800fe6c:	b40f      	push	{r0, r1, r2, r3}
 800fe6e:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <iprintf+0x2c>)
 800fe70:	b513      	push	{r0, r1, r4, lr}
 800fe72:	681c      	ldr	r4, [r3, #0]
 800fe74:	b124      	cbz	r4, 800fe80 <iprintf+0x14>
 800fe76:	69a3      	ldr	r3, [r4, #24]
 800fe78:	b913      	cbnz	r3, 800fe80 <iprintf+0x14>
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	f002 f828 	bl	8011ed0 <__sinit>
 800fe80:	ab05      	add	r3, sp, #20
 800fe82:	9a04      	ldr	r2, [sp, #16]
 800fe84:	68a1      	ldr	r1, [r4, #8]
 800fe86:	9301      	str	r3, [sp, #4]
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f003 fc69 	bl	8013760 <_vfiprintf_r>
 800fe8e:	b002      	add	sp, #8
 800fe90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe94:	b004      	add	sp, #16
 800fe96:	4770      	bx	lr
 800fe98:	2000000c 	.word	0x2000000c

0800fe9c <_puts_r>:
 800fe9c:	b570      	push	{r4, r5, r6, lr}
 800fe9e:	460e      	mov	r6, r1
 800fea0:	4605      	mov	r5, r0
 800fea2:	b118      	cbz	r0, 800feac <_puts_r+0x10>
 800fea4:	6983      	ldr	r3, [r0, #24]
 800fea6:	b90b      	cbnz	r3, 800feac <_puts_r+0x10>
 800fea8:	f002 f812 	bl	8011ed0 <__sinit>
 800feac:	69ab      	ldr	r3, [r5, #24]
 800feae:	68ac      	ldr	r4, [r5, #8]
 800feb0:	b913      	cbnz	r3, 800feb8 <_puts_r+0x1c>
 800feb2:	4628      	mov	r0, r5
 800feb4:	f002 f80c 	bl	8011ed0 <__sinit>
 800feb8:	4b23      	ldr	r3, [pc, #140]	; (800ff48 <_puts_r+0xac>)
 800feba:	429c      	cmp	r4, r3
 800febc:	d117      	bne.n	800feee <_puts_r+0x52>
 800febe:	686c      	ldr	r4, [r5, #4]
 800fec0:	89a3      	ldrh	r3, [r4, #12]
 800fec2:	071b      	lsls	r3, r3, #28
 800fec4:	d51d      	bpl.n	800ff02 <_puts_r+0x66>
 800fec6:	6923      	ldr	r3, [r4, #16]
 800fec8:	b1db      	cbz	r3, 800ff02 <_puts_r+0x66>
 800feca:	3e01      	subs	r6, #1
 800fecc:	68a3      	ldr	r3, [r4, #8]
 800fece:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fed2:	3b01      	subs	r3, #1
 800fed4:	60a3      	str	r3, [r4, #8]
 800fed6:	b9e9      	cbnz	r1, 800ff14 <_puts_r+0x78>
 800fed8:	2b00      	cmp	r3, #0
 800feda:	da2e      	bge.n	800ff3a <_puts_r+0x9e>
 800fedc:	4622      	mov	r2, r4
 800fede:	210a      	movs	r1, #10
 800fee0:	4628      	mov	r0, r5
 800fee2:	f000 ffdf 	bl	8010ea4 <__swbuf_r>
 800fee6:	3001      	adds	r0, #1
 800fee8:	d011      	beq.n	800ff0e <_puts_r+0x72>
 800feea:	200a      	movs	r0, #10
 800feec:	e011      	b.n	800ff12 <_puts_r+0x76>
 800feee:	4b17      	ldr	r3, [pc, #92]	; (800ff4c <_puts_r+0xb0>)
 800fef0:	429c      	cmp	r4, r3
 800fef2:	d101      	bne.n	800fef8 <_puts_r+0x5c>
 800fef4:	68ac      	ldr	r4, [r5, #8]
 800fef6:	e7e3      	b.n	800fec0 <_puts_r+0x24>
 800fef8:	4b15      	ldr	r3, [pc, #84]	; (800ff50 <_puts_r+0xb4>)
 800fefa:	429c      	cmp	r4, r3
 800fefc:	bf08      	it	eq
 800fefe:	68ec      	ldreq	r4, [r5, #12]
 800ff00:	e7de      	b.n	800fec0 <_puts_r+0x24>
 800ff02:	4621      	mov	r1, r4
 800ff04:	4628      	mov	r0, r5
 800ff06:	f001 f831 	bl	8010f6c <__swsetup_r>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d0dd      	beq.n	800feca <_puts_r+0x2e>
 800ff0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff12:	bd70      	pop	{r4, r5, r6, pc}
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	da04      	bge.n	800ff22 <_puts_r+0x86>
 800ff18:	69a2      	ldr	r2, [r4, #24]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	dc06      	bgt.n	800ff2c <_puts_r+0x90>
 800ff1e:	290a      	cmp	r1, #10
 800ff20:	d004      	beq.n	800ff2c <_puts_r+0x90>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	1c5a      	adds	r2, r3, #1
 800ff26:	6022      	str	r2, [r4, #0]
 800ff28:	7019      	strb	r1, [r3, #0]
 800ff2a:	e7cf      	b.n	800fecc <_puts_r+0x30>
 800ff2c:	4622      	mov	r2, r4
 800ff2e:	4628      	mov	r0, r5
 800ff30:	f000 ffb8 	bl	8010ea4 <__swbuf_r>
 800ff34:	3001      	adds	r0, #1
 800ff36:	d1c9      	bne.n	800fecc <_puts_r+0x30>
 800ff38:	e7e9      	b.n	800ff0e <_puts_r+0x72>
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	200a      	movs	r0, #10
 800ff3e:	1c5a      	adds	r2, r3, #1
 800ff40:	6022      	str	r2, [r4, #0]
 800ff42:	7018      	strb	r0, [r3, #0]
 800ff44:	e7e5      	b.n	800ff12 <_puts_r+0x76>
 800ff46:	bf00      	nop
 800ff48:	080145c0 	.word	0x080145c0
 800ff4c:	080145e0 	.word	0x080145e0
 800ff50:	080145a0 	.word	0x080145a0

0800ff54 <puts>:
 800ff54:	4b02      	ldr	r3, [pc, #8]	; (800ff60 <puts+0xc>)
 800ff56:	4601      	mov	r1, r0
 800ff58:	6818      	ldr	r0, [r3, #0]
 800ff5a:	f7ff bf9f 	b.w	800fe9c <_puts_r>
 800ff5e:	bf00      	nop
 800ff60:	2000000c 	.word	0x2000000c

0800ff64 <nanf>:
 800ff64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ff6c <nanf+0x8>
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop
 800ff6c:	7fc00000 	.word	0x7fc00000

0800ff70 <sniprintf>:
 800ff70:	b40c      	push	{r2, r3}
 800ff72:	b530      	push	{r4, r5, lr}
 800ff74:	4b17      	ldr	r3, [pc, #92]	; (800ffd4 <sniprintf+0x64>)
 800ff76:	1e0c      	subs	r4, r1, #0
 800ff78:	b09d      	sub	sp, #116	; 0x74
 800ff7a:	681d      	ldr	r5, [r3, #0]
 800ff7c:	da08      	bge.n	800ff90 <sniprintf+0x20>
 800ff7e:	238b      	movs	r3, #139	; 0x8b
 800ff80:	602b      	str	r3, [r5, #0]
 800ff82:	f04f 30ff 	mov.w	r0, #4294967295
 800ff86:	b01d      	add	sp, #116	; 0x74
 800ff88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff8c:	b002      	add	sp, #8
 800ff8e:	4770      	bx	lr
 800ff90:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ff94:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ff98:	bf14      	ite	ne
 800ff9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ff9e:	4623      	moveq	r3, r4
 800ffa0:	9304      	str	r3, [sp, #16]
 800ffa2:	9307      	str	r3, [sp, #28]
 800ffa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffa8:	9002      	str	r0, [sp, #8]
 800ffaa:	9006      	str	r0, [sp, #24]
 800ffac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ffb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ffb2:	ab21      	add	r3, sp, #132	; 0x84
 800ffb4:	a902      	add	r1, sp, #8
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	9301      	str	r3, [sp, #4]
 800ffba:	f003 f905 	bl	80131c8 <_svfiprintf_r>
 800ffbe:	1c43      	adds	r3, r0, #1
 800ffc0:	bfbc      	itt	lt
 800ffc2:	238b      	movlt	r3, #139	; 0x8b
 800ffc4:	602b      	strlt	r3, [r5, #0]
 800ffc6:	2c00      	cmp	r4, #0
 800ffc8:	d0dd      	beq.n	800ff86 <sniprintf+0x16>
 800ffca:	9b02      	ldr	r3, [sp, #8]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	701a      	strb	r2, [r3, #0]
 800ffd0:	e7d9      	b.n	800ff86 <sniprintf+0x16>
 800ffd2:	bf00      	nop
 800ffd4:	2000000c 	.word	0x2000000c

0800ffd8 <siprintf>:
 800ffd8:	b40e      	push	{r1, r2, r3}
 800ffda:	b500      	push	{lr}
 800ffdc:	b09c      	sub	sp, #112	; 0x70
 800ffde:	ab1d      	add	r3, sp, #116	; 0x74
 800ffe0:	9002      	str	r0, [sp, #8]
 800ffe2:	9006      	str	r0, [sp, #24]
 800ffe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ffe8:	4809      	ldr	r0, [pc, #36]	; (8010010 <siprintf+0x38>)
 800ffea:	9107      	str	r1, [sp, #28]
 800ffec:	9104      	str	r1, [sp, #16]
 800ffee:	4909      	ldr	r1, [pc, #36]	; (8010014 <siprintf+0x3c>)
 800fff0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fff4:	9105      	str	r1, [sp, #20]
 800fff6:	6800      	ldr	r0, [r0, #0]
 800fff8:	9301      	str	r3, [sp, #4]
 800fffa:	a902      	add	r1, sp, #8
 800fffc:	f003 f8e4 	bl	80131c8 <_svfiprintf_r>
 8010000:	9b02      	ldr	r3, [sp, #8]
 8010002:	2200      	movs	r2, #0
 8010004:	701a      	strb	r2, [r3, #0]
 8010006:	b01c      	add	sp, #112	; 0x70
 8010008:	f85d eb04 	ldr.w	lr, [sp], #4
 801000c:	b003      	add	sp, #12
 801000e:	4770      	bx	lr
 8010010:	2000000c 	.word	0x2000000c
 8010014:	ffff0208 	.word	0xffff0208

08010018 <siscanf>:
 8010018:	b40e      	push	{r1, r2, r3}
 801001a:	b530      	push	{r4, r5, lr}
 801001c:	b09c      	sub	sp, #112	; 0x70
 801001e:	ac1f      	add	r4, sp, #124	; 0x7c
 8010020:	f44f 7201 	mov.w	r2, #516	; 0x204
 8010024:	f854 5b04 	ldr.w	r5, [r4], #4
 8010028:	f8ad 2014 	strh.w	r2, [sp, #20]
 801002c:	9002      	str	r0, [sp, #8]
 801002e:	9006      	str	r0, [sp, #24]
 8010030:	f7f0 f8e6 	bl	8000200 <strlen>
 8010034:	4b0b      	ldr	r3, [pc, #44]	; (8010064 <siscanf+0x4c>)
 8010036:	9003      	str	r0, [sp, #12]
 8010038:	9007      	str	r0, [sp, #28]
 801003a:	930b      	str	r3, [sp, #44]	; 0x2c
 801003c:	480a      	ldr	r0, [pc, #40]	; (8010068 <siscanf+0x50>)
 801003e:	9401      	str	r4, [sp, #4]
 8010040:	2300      	movs	r3, #0
 8010042:	930f      	str	r3, [sp, #60]	; 0x3c
 8010044:	9314      	str	r3, [sp, #80]	; 0x50
 8010046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801004a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801004e:	462a      	mov	r2, r5
 8010050:	4623      	mov	r3, r4
 8010052:	a902      	add	r1, sp, #8
 8010054:	6800      	ldr	r0, [r0, #0]
 8010056:	f003 fa09 	bl	801346c <__ssvfiscanf_r>
 801005a:	b01c      	add	sp, #112	; 0x70
 801005c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010060:	b003      	add	sp, #12
 8010062:	4770      	bx	lr
 8010064:	0801008f 	.word	0x0801008f
 8010068:	2000000c 	.word	0x2000000c

0801006c <__sread>:
 801006c:	b510      	push	{r4, lr}
 801006e:	460c      	mov	r4, r1
 8010070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010074:	f003 fde2 	bl	8013c3c <_read_r>
 8010078:	2800      	cmp	r0, #0
 801007a:	bfab      	itete	ge
 801007c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801007e:	89a3      	ldrhlt	r3, [r4, #12]
 8010080:	181b      	addge	r3, r3, r0
 8010082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010086:	bfac      	ite	ge
 8010088:	6563      	strge	r3, [r4, #84]	; 0x54
 801008a:	81a3      	strhlt	r3, [r4, #12]
 801008c:	bd10      	pop	{r4, pc}

0801008e <__seofread>:
 801008e:	2000      	movs	r0, #0
 8010090:	4770      	bx	lr

08010092 <__swrite>:
 8010092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010096:	461f      	mov	r7, r3
 8010098:	898b      	ldrh	r3, [r1, #12]
 801009a:	05db      	lsls	r3, r3, #23
 801009c:	4605      	mov	r5, r0
 801009e:	460c      	mov	r4, r1
 80100a0:	4616      	mov	r6, r2
 80100a2:	d505      	bpl.n	80100b0 <__swrite+0x1e>
 80100a4:	2302      	movs	r3, #2
 80100a6:	2200      	movs	r2, #0
 80100a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ac:	f002 fae2 	bl	8012674 <_lseek_r>
 80100b0:	89a3      	ldrh	r3, [r4, #12]
 80100b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100ba:	81a3      	strh	r3, [r4, #12]
 80100bc:	4632      	mov	r2, r6
 80100be:	463b      	mov	r3, r7
 80100c0:	4628      	mov	r0, r5
 80100c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100c6:	f000 bf3f 	b.w	8010f48 <_write_r>

080100ca <__sseek>:
 80100ca:	b510      	push	{r4, lr}
 80100cc:	460c      	mov	r4, r1
 80100ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100d2:	f002 facf 	bl	8012674 <_lseek_r>
 80100d6:	1c43      	adds	r3, r0, #1
 80100d8:	89a3      	ldrh	r3, [r4, #12]
 80100da:	bf15      	itete	ne
 80100dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80100de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100e6:	81a3      	strheq	r3, [r4, #12]
 80100e8:	bf18      	it	ne
 80100ea:	81a3      	strhne	r3, [r4, #12]
 80100ec:	bd10      	pop	{r4, pc}

080100ee <__sclose>:
 80100ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100f2:	f000 bfa9 	b.w	8011048 <_close_r>

080100f6 <strcpy>:
 80100f6:	4603      	mov	r3, r0
 80100f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100fc:	f803 2b01 	strb.w	r2, [r3], #1
 8010100:	2a00      	cmp	r2, #0
 8010102:	d1f9      	bne.n	80100f8 <strcpy+0x2>
 8010104:	4770      	bx	lr

08010106 <sulp>:
 8010106:	b570      	push	{r4, r5, r6, lr}
 8010108:	4604      	mov	r4, r0
 801010a:	460d      	mov	r5, r1
 801010c:	ec45 4b10 	vmov	d0, r4, r5
 8010110:	4616      	mov	r6, r2
 8010112:	f002 fe15 	bl	8012d40 <__ulp>
 8010116:	ec51 0b10 	vmov	r0, r1, d0
 801011a:	b17e      	cbz	r6, 801013c <sulp+0x36>
 801011c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010120:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010124:	2b00      	cmp	r3, #0
 8010126:	dd09      	ble.n	801013c <sulp+0x36>
 8010128:	051b      	lsls	r3, r3, #20
 801012a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801012e:	2400      	movs	r4, #0
 8010130:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010134:	4622      	mov	r2, r4
 8010136:	462b      	mov	r3, r5
 8010138:	f7f0 fa76 	bl	8000628 <__aeabi_dmul>
 801013c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010140 <_strtod_l>:
 8010140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010144:	461f      	mov	r7, r3
 8010146:	b0a1      	sub	sp, #132	; 0x84
 8010148:	2300      	movs	r3, #0
 801014a:	4681      	mov	r9, r0
 801014c:	4638      	mov	r0, r7
 801014e:	460e      	mov	r6, r1
 8010150:	9217      	str	r2, [sp, #92]	; 0x5c
 8010152:	931c      	str	r3, [sp, #112]	; 0x70
 8010154:	f002 fa7e 	bl	8012654 <__localeconv_l>
 8010158:	4680      	mov	r8, r0
 801015a:	6800      	ldr	r0, [r0, #0]
 801015c:	f7f0 f850 	bl	8000200 <strlen>
 8010160:	f04f 0a00 	mov.w	sl, #0
 8010164:	4604      	mov	r4, r0
 8010166:	f04f 0b00 	mov.w	fp, #0
 801016a:	961b      	str	r6, [sp, #108]	; 0x6c
 801016c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801016e:	781a      	ldrb	r2, [r3, #0]
 8010170:	2a0d      	cmp	r2, #13
 8010172:	d832      	bhi.n	80101da <_strtod_l+0x9a>
 8010174:	2a09      	cmp	r2, #9
 8010176:	d236      	bcs.n	80101e6 <_strtod_l+0xa6>
 8010178:	2a00      	cmp	r2, #0
 801017a:	d03e      	beq.n	80101fa <_strtod_l+0xba>
 801017c:	2300      	movs	r3, #0
 801017e:	930d      	str	r3, [sp, #52]	; 0x34
 8010180:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010182:	782b      	ldrb	r3, [r5, #0]
 8010184:	2b30      	cmp	r3, #48	; 0x30
 8010186:	f040 80ac 	bne.w	80102e2 <_strtod_l+0x1a2>
 801018a:	786b      	ldrb	r3, [r5, #1]
 801018c:	2b58      	cmp	r3, #88	; 0x58
 801018e:	d001      	beq.n	8010194 <_strtod_l+0x54>
 8010190:	2b78      	cmp	r3, #120	; 0x78
 8010192:	d167      	bne.n	8010264 <_strtod_l+0x124>
 8010194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010196:	9301      	str	r3, [sp, #4]
 8010198:	ab1c      	add	r3, sp, #112	; 0x70
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	9702      	str	r7, [sp, #8]
 801019e:	ab1d      	add	r3, sp, #116	; 0x74
 80101a0:	4a88      	ldr	r2, [pc, #544]	; (80103c4 <_strtod_l+0x284>)
 80101a2:	a91b      	add	r1, sp, #108	; 0x6c
 80101a4:	4648      	mov	r0, r9
 80101a6:	f001 ff6c 	bl	8012082 <__gethex>
 80101aa:	f010 0407 	ands.w	r4, r0, #7
 80101ae:	4606      	mov	r6, r0
 80101b0:	d005      	beq.n	80101be <_strtod_l+0x7e>
 80101b2:	2c06      	cmp	r4, #6
 80101b4:	d12b      	bne.n	801020e <_strtod_l+0xce>
 80101b6:	3501      	adds	r5, #1
 80101b8:	2300      	movs	r3, #0
 80101ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80101bc:	930d      	str	r3, [sp, #52]	; 0x34
 80101be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	f040 859a 	bne.w	8010cfa <_strtod_l+0xbba>
 80101c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101c8:	b1e3      	cbz	r3, 8010204 <_strtod_l+0xc4>
 80101ca:	4652      	mov	r2, sl
 80101cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80101d0:	ec43 2b10 	vmov	d0, r2, r3
 80101d4:	b021      	add	sp, #132	; 0x84
 80101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101da:	2a2b      	cmp	r2, #43	; 0x2b
 80101dc:	d015      	beq.n	801020a <_strtod_l+0xca>
 80101de:	2a2d      	cmp	r2, #45	; 0x2d
 80101e0:	d004      	beq.n	80101ec <_strtod_l+0xac>
 80101e2:	2a20      	cmp	r2, #32
 80101e4:	d1ca      	bne.n	801017c <_strtod_l+0x3c>
 80101e6:	3301      	adds	r3, #1
 80101e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80101ea:	e7bf      	b.n	801016c <_strtod_l+0x2c>
 80101ec:	2201      	movs	r2, #1
 80101ee:	920d      	str	r2, [sp, #52]	; 0x34
 80101f0:	1c5a      	adds	r2, r3, #1
 80101f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80101f4:	785b      	ldrb	r3, [r3, #1]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d1c2      	bne.n	8010180 <_strtod_l+0x40>
 80101fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f040 8579 	bne.w	8010cf6 <_strtod_l+0xbb6>
 8010204:	4652      	mov	r2, sl
 8010206:	465b      	mov	r3, fp
 8010208:	e7e2      	b.n	80101d0 <_strtod_l+0x90>
 801020a:	2200      	movs	r2, #0
 801020c:	e7ef      	b.n	80101ee <_strtod_l+0xae>
 801020e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010210:	b13a      	cbz	r2, 8010222 <_strtod_l+0xe2>
 8010212:	2135      	movs	r1, #53	; 0x35
 8010214:	a81e      	add	r0, sp, #120	; 0x78
 8010216:	f002 fe8b 	bl	8012f30 <__copybits>
 801021a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801021c:	4648      	mov	r0, r9
 801021e:	f002 faf8 	bl	8012812 <_Bfree>
 8010222:	3c01      	subs	r4, #1
 8010224:	2c04      	cmp	r4, #4
 8010226:	d806      	bhi.n	8010236 <_strtod_l+0xf6>
 8010228:	e8df f004 	tbb	[pc, r4]
 801022c:	1714030a 	.word	0x1714030a
 8010230:	0a          	.byte	0x0a
 8010231:	00          	.byte	0x00
 8010232:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8010236:	0730      	lsls	r0, r6, #28
 8010238:	d5c1      	bpl.n	80101be <_strtod_l+0x7e>
 801023a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801023e:	e7be      	b.n	80101be <_strtod_l+0x7e>
 8010240:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8010244:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010246:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801024a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801024e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010252:	e7f0      	b.n	8010236 <_strtod_l+0xf6>
 8010254:	f8df b170 	ldr.w	fp, [pc, #368]	; 80103c8 <_strtod_l+0x288>
 8010258:	e7ed      	b.n	8010236 <_strtod_l+0xf6>
 801025a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801025e:	f04f 3aff 	mov.w	sl, #4294967295
 8010262:	e7e8      	b.n	8010236 <_strtod_l+0xf6>
 8010264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010266:	1c5a      	adds	r2, r3, #1
 8010268:	921b      	str	r2, [sp, #108]	; 0x6c
 801026a:	785b      	ldrb	r3, [r3, #1]
 801026c:	2b30      	cmp	r3, #48	; 0x30
 801026e:	d0f9      	beq.n	8010264 <_strtod_l+0x124>
 8010270:	2b00      	cmp	r3, #0
 8010272:	d0a4      	beq.n	80101be <_strtod_l+0x7e>
 8010274:	2301      	movs	r3, #1
 8010276:	2500      	movs	r5, #0
 8010278:	9306      	str	r3, [sp, #24]
 801027a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801027c:	9308      	str	r3, [sp, #32]
 801027e:	9507      	str	r5, [sp, #28]
 8010280:	9505      	str	r5, [sp, #20]
 8010282:	220a      	movs	r2, #10
 8010284:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010286:	7807      	ldrb	r7, [r0, #0]
 8010288:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801028c:	b2d9      	uxtb	r1, r3
 801028e:	2909      	cmp	r1, #9
 8010290:	d929      	bls.n	80102e6 <_strtod_l+0x1a6>
 8010292:	4622      	mov	r2, r4
 8010294:	f8d8 1000 	ldr.w	r1, [r8]
 8010298:	f003 fd24 	bl	8013ce4 <strncmp>
 801029c:	2800      	cmp	r0, #0
 801029e:	d031      	beq.n	8010304 <_strtod_l+0x1c4>
 80102a0:	2000      	movs	r0, #0
 80102a2:	9c05      	ldr	r4, [sp, #20]
 80102a4:	9004      	str	r0, [sp, #16]
 80102a6:	463b      	mov	r3, r7
 80102a8:	4602      	mov	r2, r0
 80102aa:	2b65      	cmp	r3, #101	; 0x65
 80102ac:	d001      	beq.n	80102b2 <_strtod_l+0x172>
 80102ae:	2b45      	cmp	r3, #69	; 0x45
 80102b0:	d114      	bne.n	80102dc <_strtod_l+0x19c>
 80102b2:	b924      	cbnz	r4, 80102be <_strtod_l+0x17e>
 80102b4:	b910      	cbnz	r0, 80102bc <_strtod_l+0x17c>
 80102b6:	9b06      	ldr	r3, [sp, #24]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d09e      	beq.n	80101fa <_strtod_l+0xba>
 80102bc:	2400      	movs	r4, #0
 80102be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80102c0:	1c73      	adds	r3, r6, #1
 80102c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80102c4:	7873      	ldrb	r3, [r6, #1]
 80102c6:	2b2b      	cmp	r3, #43	; 0x2b
 80102c8:	d078      	beq.n	80103bc <_strtod_l+0x27c>
 80102ca:	2b2d      	cmp	r3, #45	; 0x2d
 80102cc:	d070      	beq.n	80103b0 <_strtod_l+0x270>
 80102ce:	f04f 0c00 	mov.w	ip, #0
 80102d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80102d6:	2f09      	cmp	r7, #9
 80102d8:	d97c      	bls.n	80103d4 <_strtod_l+0x294>
 80102da:	961b      	str	r6, [sp, #108]	; 0x6c
 80102dc:	f04f 0e00 	mov.w	lr, #0
 80102e0:	e09a      	b.n	8010418 <_strtod_l+0x2d8>
 80102e2:	2300      	movs	r3, #0
 80102e4:	e7c7      	b.n	8010276 <_strtod_l+0x136>
 80102e6:	9905      	ldr	r1, [sp, #20]
 80102e8:	2908      	cmp	r1, #8
 80102ea:	bfdd      	ittte	le
 80102ec:	9907      	ldrle	r1, [sp, #28]
 80102ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80102f2:	9307      	strle	r3, [sp, #28]
 80102f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80102f8:	9b05      	ldr	r3, [sp, #20]
 80102fa:	3001      	adds	r0, #1
 80102fc:	3301      	adds	r3, #1
 80102fe:	9305      	str	r3, [sp, #20]
 8010300:	901b      	str	r0, [sp, #108]	; 0x6c
 8010302:	e7bf      	b.n	8010284 <_strtod_l+0x144>
 8010304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010306:	191a      	adds	r2, r3, r4
 8010308:	921b      	str	r2, [sp, #108]	; 0x6c
 801030a:	9a05      	ldr	r2, [sp, #20]
 801030c:	5d1b      	ldrb	r3, [r3, r4]
 801030e:	2a00      	cmp	r2, #0
 8010310:	d037      	beq.n	8010382 <_strtod_l+0x242>
 8010312:	9c05      	ldr	r4, [sp, #20]
 8010314:	4602      	mov	r2, r0
 8010316:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801031a:	2909      	cmp	r1, #9
 801031c:	d913      	bls.n	8010346 <_strtod_l+0x206>
 801031e:	2101      	movs	r1, #1
 8010320:	9104      	str	r1, [sp, #16]
 8010322:	e7c2      	b.n	80102aa <_strtod_l+0x16a>
 8010324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	921b      	str	r2, [sp, #108]	; 0x6c
 801032a:	785b      	ldrb	r3, [r3, #1]
 801032c:	3001      	adds	r0, #1
 801032e:	2b30      	cmp	r3, #48	; 0x30
 8010330:	d0f8      	beq.n	8010324 <_strtod_l+0x1e4>
 8010332:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010336:	2a08      	cmp	r2, #8
 8010338:	f200 84e4 	bhi.w	8010d04 <_strtod_l+0xbc4>
 801033c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801033e:	9208      	str	r2, [sp, #32]
 8010340:	4602      	mov	r2, r0
 8010342:	2000      	movs	r0, #0
 8010344:	4604      	mov	r4, r0
 8010346:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801034a:	f100 0101 	add.w	r1, r0, #1
 801034e:	d012      	beq.n	8010376 <_strtod_l+0x236>
 8010350:	440a      	add	r2, r1
 8010352:	eb00 0c04 	add.w	ip, r0, r4
 8010356:	4621      	mov	r1, r4
 8010358:	270a      	movs	r7, #10
 801035a:	458c      	cmp	ip, r1
 801035c:	d113      	bne.n	8010386 <_strtod_l+0x246>
 801035e:	1821      	adds	r1, r4, r0
 8010360:	2908      	cmp	r1, #8
 8010362:	f104 0401 	add.w	r4, r4, #1
 8010366:	4404      	add	r4, r0
 8010368:	dc19      	bgt.n	801039e <_strtod_l+0x25e>
 801036a:	9b07      	ldr	r3, [sp, #28]
 801036c:	210a      	movs	r1, #10
 801036e:	fb01 e303 	mla	r3, r1, r3, lr
 8010372:	9307      	str	r3, [sp, #28]
 8010374:	2100      	movs	r1, #0
 8010376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010378:	1c58      	adds	r0, r3, #1
 801037a:	901b      	str	r0, [sp, #108]	; 0x6c
 801037c:	785b      	ldrb	r3, [r3, #1]
 801037e:	4608      	mov	r0, r1
 8010380:	e7c9      	b.n	8010316 <_strtod_l+0x1d6>
 8010382:	9805      	ldr	r0, [sp, #20]
 8010384:	e7d3      	b.n	801032e <_strtod_l+0x1ee>
 8010386:	2908      	cmp	r1, #8
 8010388:	f101 0101 	add.w	r1, r1, #1
 801038c:	dc03      	bgt.n	8010396 <_strtod_l+0x256>
 801038e:	9b07      	ldr	r3, [sp, #28]
 8010390:	437b      	muls	r3, r7
 8010392:	9307      	str	r3, [sp, #28]
 8010394:	e7e1      	b.n	801035a <_strtod_l+0x21a>
 8010396:	2910      	cmp	r1, #16
 8010398:	bfd8      	it	le
 801039a:	437d      	mulle	r5, r7
 801039c:	e7dd      	b.n	801035a <_strtod_l+0x21a>
 801039e:	2c10      	cmp	r4, #16
 80103a0:	bfdc      	itt	le
 80103a2:	210a      	movle	r1, #10
 80103a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80103a8:	e7e4      	b.n	8010374 <_strtod_l+0x234>
 80103aa:	2301      	movs	r3, #1
 80103ac:	9304      	str	r3, [sp, #16]
 80103ae:	e781      	b.n	80102b4 <_strtod_l+0x174>
 80103b0:	f04f 0c01 	mov.w	ip, #1
 80103b4:	1cb3      	adds	r3, r6, #2
 80103b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80103b8:	78b3      	ldrb	r3, [r6, #2]
 80103ba:	e78a      	b.n	80102d2 <_strtod_l+0x192>
 80103bc:	f04f 0c00 	mov.w	ip, #0
 80103c0:	e7f8      	b.n	80103b4 <_strtod_l+0x274>
 80103c2:	bf00      	nop
 80103c4:	0801453c 	.word	0x0801453c
 80103c8:	7ff00000 	.word	0x7ff00000
 80103cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80103ce:	1c5f      	adds	r7, r3, #1
 80103d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80103d2:	785b      	ldrb	r3, [r3, #1]
 80103d4:	2b30      	cmp	r3, #48	; 0x30
 80103d6:	d0f9      	beq.n	80103cc <_strtod_l+0x28c>
 80103d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80103dc:	2f08      	cmp	r7, #8
 80103de:	f63f af7d 	bhi.w	80102dc <_strtod_l+0x19c>
 80103e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80103e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80103e8:	930a      	str	r3, [sp, #40]	; 0x28
 80103ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80103ec:	1c5f      	adds	r7, r3, #1
 80103ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80103f0:	785b      	ldrb	r3, [r3, #1]
 80103f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80103f6:	f1b8 0f09 	cmp.w	r8, #9
 80103fa:	d937      	bls.n	801046c <_strtod_l+0x32c>
 80103fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80103fe:	1a7f      	subs	r7, r7, r1
 8010400:	2f08      	cmp	r7, #8
 8010402:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010406:	dc37      	bgt.n	8010478 <_strtod_l+0x338>
 8010408:	45be      	cmp	lr, r7
 801040a:	bfa8      	it	ge
 801040c:	46be      	movge	lr, r7
 801040e:	f1bc 0f00 	cmp.w	ip, #0
 8010412:	d001      	beq.n	8010418 <_strtod_l+0x2d8>
 8010414:	f1ce 0e00 	rsb	lr, lr, #0
 8010418:	2c00      	cmp	r4, #0
 801041a:	d151      	bne.n	80104c0 <_strtod_l+0x380>
 801041c:	2800      	cmp	r0, #0
 801041e:	f47f aece 	bne.w	80101be <_strtod_l+0x7e>
 8010422:	9a06      	ldr	r2, [sp, #24]
 8010424:	2a00      	cmp	r2, #0
 8010426:	f47f aeca 	bne.w	80101be <_strtod_l+0x7e>
 801042a:	9a04      	ldr	r2, [sp, #16]
 801042c:	2a00      	cmp	r2, #0
 801042e:	f47f aee4 	bne.w	80101fa <_strtod_l+0xba>
 8010432:	2b4e      	cmp	r3, #78	; 0x4e
 8010434:	d027      	beq.n	8010486 <_strtod_l+0x346>
 8010436:	dc21      	bgt.n	801047c <_strtod_l+0x33c>
 8010438:	2b49      	cmp	r3, #73	; 0x49
 801043a:	f47f aede 	bne.w	80101fa <_strtod_l+0xba>
 801043e:	49a0      	ldr	r1, [pc, #640]	; (80106c0 <_strtod_l+0x580>)
 8010440:	a81b      	add	r0, sp, #108	; 0x6c
 8010442:	f002 f851 	bl	80124e8 <__match>
 8010446:	2800      	cmp	r0, #0
 8010448:	f43f aed7 	beq.w	80101fa <_strtod_l+0xba>
 801044c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801044e:	499d      	ldr	r1, [pc, #628]	; (80106c4 <_strtod_l+0x584>)
 8010450:	3b01      	subs	r3, #1
 8010452:	a81b      	add	r0, sp, #108	; 0x6c
 8010454:	931b      	str	r3, [sp, #108]	; 0x6c
 8010456:	f002 f847 	bl	80124e8 <__match>
 801045a:	b910      	cbnz	r0, 8010462 <_strtod_l+0x322>
 801045c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801045e:	3301      	adds	r3, #1
 8010460:	931b      	str	r3, [sp, #108]	; 0x6c
 8010462:	f8df b274 	ldr.w	fp, [pc, #628]	; 80106d8 <_strtod_l+0x598>
 8010466:	f04f 0a00 	mov.w	sl, #0
 801046a:	e6a8      	b.n	80101be <_strtod_l+0x7e>
 801046c:	210a      	movs	r1, #10
 801046e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010472:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010476:	e7b8      	b.n	80103ea <_strtod_l+0x2aa>
 8010478:	46be      	mov	lr, r7
 801047a:	e7c8      	b.n	801040e <_strtod_l+0x2ce>
 801047c:	2b69      	cmp	r3, #105	; 0x69
 801047e:	d0de      	beq.n	801043e <_strtod_l+0x2fe>
 8010480:	2b6e      	cmp	r3, #110	; 0x6e
 8010482:	f47f aeba 	bne.w	80101fa <_strtod_l+0xba>
 8010486:	4990      	ldr	r1, [pc, #576]	; (80106c8 <_strtod_l+0x588>)
 8010488:	a81b      	add	r0, sp, #108	; 0x6c
 801048a:	f002 f82d 	bl	80124e8 <__match>
 801048e:	2800      	cmp	r0, #0
 8010490:	f43f aeb3 	beq.w	80101fa <_strtod_l+0xba>
 8010494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	2b28      	cmp	r3, #40	; 0x28
 801049a:	d10e      	bne.n	80104ba <_strtod_l+0x37a>
 801049c:	aa1e      	add	r2, sp, #120	; 0x78
 801049e:	498b      	ldr	r1, [pc, #556]	; (80106cc <_strtod_l+0x58c>)
 80104a0:	a81b      	add	r0, sp, #108	; 0x6c
 80104a2:	f002 f835 	bl	8012510 <__hexnan>
 80104a6:	2805      	cmp	r0, #5
 80104a8:	d107      	bne.n	80104ba <_strtod_l+0x37a>
 80104aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80104ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80104b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80104b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80104b8:	e681      	b.n	80101be <_strtod_l+0x7e>
 80104ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80106e0 <_strtod_l+0x5a0>
 80104be:	e7d2      	b.n	8010466 <_strtod_l+0x326>
 80104c0:	ebae 0302 	sub.w	r3, lr, r2
 80104c4:	9306      	str	r3, [sp, #24]
 80104c6:	9b05      	ldr	r3, [sp, #20]
 80104c8:	9807      	ldr	r0, [sp, #28]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	bf08      	it	eq
 80104ce:	4623      	moveq	r3, r4
 80104d0:	2c10      	cmp	r4, #16
 80104d2:	9305      	str	r3, [sp, #20]
 80104d4:	46a0      	mov	r8, r4
 80104d6:	bfa8      	it	ge
 80104d8:	f04f 0810 	movge.w	r8, #16
 80104dc:	f7f0 f82a 	bl	8000534 <__aeabi_ui2d>
 80104e0:	2c09      	cmp	r4, #9
 80104e2:	4682      	mov	sl, r0
 80104e4:	468b      	mov	fp, r1
 80104e6:	dc13      	bgt.n	8010510 <_strtod_l+0x3d0>
 80104e8:	9b06      	ldr	r3, [sp, #24]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f43f ae67 	beq.w	80101be <_strtod_l+0x7e>
 80104f0:	9b06      	ldr	r3, [sp, #24]
 80104f2:	dd7a      	ble.n	80105ea <_strtod_l+0x4aa>
 80104f4:	2b16      	cmp	r3, #22
 80104f6:	dc61      	bgt.n	80105bc <_strtod_l+0x47c>
 80104f8:	4a75      	ldr	r2, [pc, #468]	; (80106d0 <_strtod_l+0x590>)
 80104fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80104fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8010502:	4652      	mov	r2, sl
 8010504:	465b      	mov	r3, fp
 8010506:	f7f0 f88f 	bl	8000628 <__aeabi_dmul>
 801050a:	4682      	mov	sl, r0
 801050c:	468b      	mov	fp, r1
 801050e:	e656      	b.n	80101be <_strtod_l+0x7e>
 8010510:	4b6f      	ldr	r3, [pc, #444]	; (80106d0 <_strtod_l+0x590>)
 8010512:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010516:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801051a:	f7f0 f885 	bl	8000628 <__aeabi_dmul>
 801051e:	4606      	mov	r6, r0
 8010520:	4628      	mov	r0, r5
 8010522:	460f      	mov	r7, r1
 8010524:	f7f0 f806 	bl	8000534 <__aeabi_ui2d>
 8010528:	4602      	mov	r2, r0
 801052a:	460b      	mov	r3, r1
 801052c:	4630      	mov	r0, r6
 801052e:	4639      	mov	r1, r7
 8010530:	f7ef fec4 	bl	80002bc <__adddf3>
 8010534:	2c0f      	cmp	r4, #15
 8010536:	4682      	mov	sl, r0
 8010538:	468b      	mov	fp, r1
 801053a:	ddd5      	ble.n	80104e8 <_strtod_l+0x3a8>
 801053c:	9b06      	ldr	r3, [sp, #24]
 801053e:	eba4 0808 	sub.w	r8, r4, r8
 8010542:	4498      	add	r8, r3
 8010544:	f1b8 0f00 	cmp.w	r8, #0
 8010548:	f340 8096 	ble.w	8010678 <_strtod_l+0x538>
 801054c:	f018 030f 	ands.w	r3, r8, #15
 8010550:	d00a      	beq.n	8010568 <_strtod_l+0x428>
 8010552:	495f      	ldr	r1, [pc, #380]	; (80106d0 <_strtod_l+0x590>)
 8010554:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010558:	4652      	mov	r2, sl
 801055a:	465b      	mov	r3, fp
 801055c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010560:	f7f0 f862 	bl	8000628 <__aeabi_dmul>
 8010564:	4682      	mov	sl, r0
 8010566:	468b      	mov	fp, r1
 8010568:	f038 080f 	bics.w	r8, r8, #15
 801056c:	d073      	beq.n	8010656 <_strtod_l+0x516>
 801056e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010572:	dd47      	ble.n	8010604 <_strtod_l+0x4c4>
 8010574:	2400      	movs	r4, #0
 8010576:	46a0      	mov	r8, r4
 8010578:	9407      	str	r4, [sp, #28]
 801057a:	9405      	str	r4, [sp, #20]
 801057c:	2322      	movs	r3, #34	; 0x22
 801057e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80106d8 <_strtod_l+0x598>
 8010582:	f8c9 3000 	str.w	r3, [r9]
 8010586:	f04f 0a00 	mov.w	sl, #0
 801058a:	9b07      	ldr	r3, [sp, #28]
 801058c:	2b00      	cmp	r3, #0
 801058e:	f43f ae16 	beq.w	80101be <_strtod_l+0x7e>
 8010592:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010594:	4648      	mov	r0, r9
 8010596:	f002 f93c 	bl	8012812 <_Bfree>
 801059a:	9905      	ldr	r1, [sp, #20]
 801059c:	4648      	mov	r0, r9
 801059e:	f002 f938 	bl	8012812 <_Bfree>
 80105a2:	4641      	mov	r1, r8
 80105a4:	4648      	mov	r0, r9
 80105a6:	f002 f934 	bl	8012812 <_Bfree>
 80105aa:	9907      	ldr	r1, [sp, #28]
 80105ac:	4648      	mov	r0, r9
 80105ae:	f002 f930 	bl	8012812 <_Bfree>
 80105b2:	4621      	mov	r1, r4
 80105b4:	4648      	mov	r0, r9
 80105b6:	f002 f92c 	bl	8012812 <_Bfree>
 80105ba:	e600      	b.n	80101be <_strtod_l+0x7e>
 80105bc:	9a06      	ldr	r2, [sp, #24]
 80105be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80105c2:	4293      	cmp	r3, r2
 80105c4:	dbba      	blt.n	801053c <_strtod_l+0x3fc>
 80105c6:	4d42      	ldr	r5, [pc, #264]	; (80106d0 <_strtod_l+0x590>)
 80105c8:	f1c4 040f 	rsb	r4, r4, #15
 80105cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80105d0:	4652      	mov	r2, sl
 80105d2:	465b      	mov	r3, fp
 80105d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105d8:	f7f0 f826 	bl	8000628 <__aeabi_dmul>
 80105dc:	9b06      	ldr	r3, [sp, #24]
 80105de:	1b1c      	subs	r4, r3, r4
 80105e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80105e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105e8:	e78d      	b.n	8010506 <_strtod_l+0x3c6>
 80105ea:	f113 0f16 	cmn.w	r3, #22
 80105ee:	dba5      	blt.n	801053c <_strtod_l+0x3fc>
 80105f0:	4a37      	ldr	r2, [pc, #220]	; (80106d0 <_strtod_l+0x590>)
 80105f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80105f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80105fa:	4650      	mov	r0, sl
 80105fc:	4659      	mov	r1, fp
 80105fe:	f7f0 f93d 	bl	800087c <__aeabi_ddiv>
 8010602:	e782      	b.n	801050a <_strtod_l+0x3ca>
 8010604:	2300      	movs	r3, #0
 8010606:	4e33      	ldr	r6, [pc, #204]	; (80106d4 <_strtod_l+0x594>)
 8010608:	ea4f 1828 	mov.w	r8, r8, asr #4
 801060c:	4650      	mov	r0, sl
 801060e:	4659      	mov	r1, fp
 8010610:	461d      	mov	r5, r3
 8010612:	f1b8 0f01 	cmp.w	r8, #1
 8010616:	dc21      	bgt.n	801065c <_strtod_l+0x51c>
 8010618:	b10b      	cbz	r3, 801061e <_strtod_l+0x4de>
 801061a:	4682      	mov	sl, r0
 801061c:	468b      	mov	fp, r1
 801061e:	4b2d      	ldr	r3, [pc, #180]	; (80106d4 <_strtod_l+0x594>)
 8010620:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010624:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010628:	4652      	mov	r2, sl
 801062a:	465b      	mov	r3, fp
 801062c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010630:	f7ef fffa 	bl	8000628 <__aeabi_dmul>
 8010634:	4b28      	ldr	r3, [pc, #160]	; (80106d8 <_strtod_l+0x598>)
 8010636:	460a      	mov	r2, r1
 8010638:	400b      	ands	r3, r1
 801063a:	4928      	ldr	r1, [pc, #160]	; (80106dc <_strtod_l+0x59c>)
 801063c:	428b      	cmp	r3, r1
 801063e:	4682      	mov	sl, r0
 8010640:	d898      	bhi.n	8010574 <_strtod_l+0x434>
 8010642:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010646:	428b      	cmp	r3, r1
 8010648:	bf86      	itte	hi
 801064a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80106e4 <_strtod_l+0x5a4>
 801064e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010652:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010656:	2300      	movs	r3, #0
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	e077      	b.n	801074c <_strtod_l+0x60c>
 801065c:	f018 0f01 	tst.w	r8, #1
 8010660:	d006      	beq.n	8010670 <_strtod_l+0x530>
 8010662:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8010666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066a:	f7ef ffdd 	bl	8000628 <__aeabi_dmul>
 801066e:	2301      	movs	r3, #1
 8010670:	3501      	adds	r5, #1
 8010672:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010676:	e7cc      	b.n	8010612 <_strtod_l+0x4d2>
 8010678:	d0ed      	beq.n	8010656 <_strtod_l+0x516>
 801067a:	f1c8 0800 	rsb	r8, r8, #0
 801067e:	f018 020f 	ands.w	r2, r8, #15
 8010682:	d00a      	beq.n	801069a <_strtod_l+0x55a>
 8010684:	4b12      	ldr	r3, [pc, #72]	; (80106d0 <_strtod_l+0x590>)
 8010686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801068a:	4650      	mov	r0, sl
 801068c:	4659      	mov	r1, fp
 801068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010692:	f7f0 f8f3 	bl	800087c <__aeabi_ddiv>
 8010696:	4682      	mov	sl, r0
 8010698:	468b      	mov	fp, r1
 801069a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801069e:	d0da      	beq.n	8010656 <_strtod_l+0x516>
 80106a0:	f1b8 0f1f 	cmp.w	r8, #31
 80106a4:	dd20      	ble.n	80106e8 <_strtod_l+0x5a8>
 80106a6:	2400      	movs	r4, #0
 80106a8:	46a0      	mov	r8, r4
 80106aa:	9407      	str	r4, [sp, #28]
 80106ac:	9405      	str	r4, [sp, #20]
 80106ae:	2322      	movs	r3, #34	; 0x22
 80106b0:	f04f 0a00 	mov.w	sl, #0
 80106b4:	f04f 0b00 	mov.w	fp, #0
 80106b8:	f8c9 3000 	str.w	r3, [r9]
 80106bc:	e765      	b.n	801058a <_strtod_l+0x44a>
 80106be:	bf00      	nop
 80106c0:	08014509 	.word	0x08014509
 80106c4:	08014593 	.word	0x08014593
 80106c8:	08014511 	.word	0x08014511
 80106cc:	08014550 	.word	0x08014550
 80106d0:	08014638 	.word	0x08014638
 80106d4:	08014610 	.word	0x08014610
 80106d8:	7ff00000 	.word	0x7ff00000
 80106dc:	7ca00000 	.word	0x7ca00000
 80106e0:	fff80000 	.word	0xfff80000
 80106e4:	7fefffff 	.word	0x7fefffff
 80106e8:	f018 0310 	ands.w	r3, r8, #16
 80106ec:	bf18      	it	ne
 80106ee:	236a      	movne	r3, #106	; 0x6a
 80106f0:	4da0      	ldr	r5, [pc, #640]	; (8010974 <_strtod_l+0x834>)
 80106f2:	9304      	str	r3, [sp, #16]
 80106f4:	4650      	mov	r0, sl
 80106f6:	4659      	mov	r1, fp
 80106f8:	2300      	movs	r3, #0
 80106fa:	f1b8 0f00 	cmp.w	r8, #0
 80106fe:	f300 810a 	bgt.w	8010916 <_strtod_l+0x7d6>
 8010702:	b10b      	cbz	r3, 8010708 <_strtod_l+0x5c8>
 8010704:	4682      	mov	sl, r0
 8010706:	468b      	mov	fp, r1
 8010708:	9b04      	ldr	r3, [sp, #16]
 801070a:	b1bb      	cbz	r3, 801073c <_strtod_l+0x5fc>
 801070c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010710:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010714:	2b00      	cmp	r3, #0
 8010716:	4659      	mov	r1, fp
 8010718:	dd10      	ble.n	801073c <_strtod_l+0x5fc>
 801071a:	2b1f      	cmp	r3, #31
 801071c:	f340 8107 	ble.w	801092e <_strtod_l+0x7ee>
 8010720:	2b34      	cmp	r3, #52	; 0x34
 8010722:	bfde      	ittt	le
 8010724:	3b20      	suble	r3, #32
 8010726:	f04f 32ff 	movle.w	r2, #4294967295
 801072a:	fa02 f303 	lslle.w	r3, r2, r3
 801072e:	f04f 0a00 	mov.w	sl, #0
 8010732:	bfcc      	ite	gt
 8010734:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010738:	ea03 0b01 	andle.w	fp, r3, r1
 801073c:	2200      	movs	r2, #0
 801073e:	2300      	movs	r3, #0
 8010740:	4650      	mov	r0, sl
 8010742:	4659      	mov	r1, fp
 8010744:	f7f0 f9d8 	bl	8000af8 <__aeabi_dcmpeq>
 8010748:	2800      	cmp	r0, #0
 801074a:	d1ac      	bne.n	80106a6 <_strtod_l+0x566>
 801074c:	9b07      	ldr	r3, [sp, #28]
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	9a05      	ldr	r2, [sp, #20]
 8010752:	9908      	ldr	r1, [sp, #32]
 8010754:	4623      	mov	r3, r4
 8010756:	4648      	mov	r0, r9
 8010758:	f002 f8ad 	bl	80128b6 <__s2b>
 801075c:	9007      	str	r0, [sp, #28]
 801075e:	2800      	cmp	r0, #0
 8010760:	f43f af08 	beq.w	8010574 <_strtod_l+0x434>
 8010764:	9a06      	ldr	r2, [sp, #24]
 8010766:	9b06      	ldr	r3, [sp, #24]
 8010768:	2a00      	cmp	r2, #0
 801076a:	f1c3 0300 	rsb	r3, r3, #0
 801076e:	bfa8      	it	ge
 8010770:	2300      	movge	r3, #0
 8010772:	930e      	str	r3, [sp, #56]	; 0x38
 8010774:	2400      	movs	r4, #0
 8010776:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801077a:	9316      	str	r3, [sp, #88]	; 0x58
 801077c:	46a0      	mov	r8, r4
 801077e:	9b07      	ldr	r3, [sp, #28]
 8010780:	4648      	mov	r0, r9
 8010782:	6859      	ldr	r1, [r3, #4]
 8010784:	f002 f811 	bl	80127aa <_Balloc>
 8010788:	9005      	str	r0, [sp, #20]
 801078a:	2800      	cmp	r0, #0
 801078c:	f43f aef6 	beq.w	801057c <_strtod_l+0x43c>
 8010790:	9b07      	ldr	r3, [sp, #28]
 8010792:	691a      	ldr	r2, [r3, #16]
 8010794:	3202      	adds	r2, #2
 8010796:	f103 010c 	add.w	r1, r3, #12
 801079a:	0092      	lsls	r2, r2, #2
 801079c:	300c      	adds	r0, #12
 801079e:	f001 fff9 	bl	8012794 <memcpy>
 80107a2:	aa1e      	add	r2, sp, #120	; 0x78
 80107a4:	a91d      	add	r1, sp, #116	; 0x74
 80107a6:	ec4b ab10 	vmov	d0, sl, fp
 80107aa:	4648      	mov	r0, r9
 80107ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80107b0:	f002 fb3c 	bl	8012e2c <__d2b>
 80107b4:	901c      	str	r0, [sp, #112]	; 0x70
 80107b6:	2800      	cmp	r0, #0
 80107b8:	f43f aee0 	beq.w	801057c <_strtod_l+0x43c>
 80107bc:	2101      	movs	r1, #1
 80107be:	4648      	mov	r0, r9
 80107c0:	f002 f905 	bl	80129ce <__i2b>
 80107c4:	4680      	mov	r8, r0
 80107c6:	2800      	cmp	r0, #0
 80107c8:	f43f aed8 	beq.w	801057c <_strtod_l+0x43c>
 80107cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80107ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80107d0:	2e00      	cmp	r6, #0
 80107d2:	bfab      	itete	ge
 80107d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80107d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80107d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80107da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80107dc:	bfac      	ite	ge
 80107de:	18f7      	addge	r7, r6, r3
 80107e0:	1b9d      	sublt	r5, r3, r6
 80107e2:	9b04      	ldr	r3, [sp, #16]
 80107e4:	1af6      	subs	r6, r6, r3
 80107e6:	4416      	add	r6, r2
 80107e8:	4b63      	ldr	r3, [pc, #396]	; (8010978 <_strtod_l+0x838>)
 80107ea:	3e01      	subs	r6, #1
 80107ec:	429e      	cmp	r6, r3
 80107ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80107f2:	f280 80af 	bge.w	8010954 <_strtod_l+0x814>
 80107f6:	1b9b      	subs	r3, r3, r6
 80107f8:	2b1f      	cmp	r3, #31
 80107fa:	eba2 0203 	sub.w	r2, r2, r3
 80107fe:	f04f 0101 	mov.w	r1, #1
 8010802:	f300 809b 	bgt.w	801093c <_strtod_l+0x7fc>
 8010806:	fa01 f303 	lsl.w	r3, r1, r3
 801080a:	930f      	str	r3, [sp, #60]	; 0x3c
 801080c:	2300      	movs	r3, #0
 801080e:	930a      	str	r3, [sp, #40]	; 0x28
 8010810:	18be      	adds	r6, r7, r2
 8010812:	9b04      	ldr	r3, [sp, #16]
 8010814:	42b7      	cmp	r7, r6
 8010816:	4415      	add	r5, r2
 8010818:	441d      	add	r5, r3
 801081a:	463b      	mov	r3, r7
 801081c:	bfa8      	it	ge
 801081e:	4633      	movge	r3, r6
 8010820:	42ab      	cmp	r3, r5
 8010822:	bfa8      	it	ge
 8010824:	462b      	movge	r3, r5
 8010826:	2b00      	cmp	r3, #0
 8010828:	bfc2      	ittt	gt
 801082a:	1af6      	subgt	r6, r6, r3
 801082c:	1aed      	subgt	r5, r5, r3
 801082e:	1aff      	subgt	r7, r7, r3
 8010830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010832:	b1bb      	cbz	r3, 8010864 <_strtod_l+0x724>
 8010834:	4641      	mov	r1, r8
 8010836:	461a      	mov	r2, r3
 8010838:	4648      	mov	r0, r9
 801083a:	f002 f967 	bl	8012b0c <__pow5mult>
 801083e:	4680      	mov	r8, r0
 8010840:	2800      	cmp	r0, #0
 8010842:	f43f ae9b 	beq.w	801057c <_strtod_l+0x43c>
 8010846:	4601      	mov	r1, r0
 8010848:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801084a:	4648      	mov	r0, r9
 801084c:	f002 f8c8 	bl	80129e0 <__multiply>
 8010850:	900c      	str	r0, [sp, #48]	; 0x30
 8010852:	2800      	cmp	r0, #0
 8010854:	f43f ae92 	beq.w	801057c <_strtod_l+0x43c>
 8010858:	991c      	ldr	r1, [sp, #112]	; 0x70
 801085a:	4648      	mov	r0, r9
 801085c:	f001 ffd9 	bl	8012812 <_Bfree>
 8010860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010862:	931c      	str	r3, [sp, #112]	; 0x70
 8010864:	2e00      	cmp	r6, #0
 8010866:	dc7a      	bgt.n	801095e <_strtod_l+0x81e>
 8010868:	9b06      	ldr	r3, [sp, #24]
 801086a:	2b00      	cmp	r3, #0
 801086c:	dd08      	ble.n	8010880 <_strtod_l+0x740>
 801086e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010870:	9905      	ldr	r1, [sp, #20]
 8010872:	4648      	mov	r0, r9
 8010874:	f002 f94a 	bl	8012b0c <__pow5mult>
 8010878:	9005      	str	r0, [sp, #20]
 801087a:	2800      	cmp	r0, #0
 801087c:	f43f ae7e 	beq.w	801057c <_strtod_l+0x43c>
 8010880:	2d00      	cmp	r5, #0
 8010882:	dd08      	ble.n	8010896 <_strtod_l+0x756>
 8010884:	462a      	mov	r2, r5
 8010886:	9905      	ldr	r1, [sp, #20]
 8010888:	4648      	mov	r0, r9
 801088a:	f002 f98d 	bl	8012ba8 <__lshift>
 801088e:	9005      	str	r0, [sp, #20]
 8010890:	2800      	cmp	r0, #0
 8010892:	f43f ae73 	beq.w	801057c <_strtod_l+0x43c>
 8010896:	2f00      	cmp	r7, #0
 8010898:	dd08      	ble.n	80108ac <_strtod_l+0x76c>
 801089a:	4641      	mov	r1, r8
 801089c:	463a      	mov	r2, r7
 801089e:	4648      	mov	r0, r9
 80108a0:	f002 f982 	bl	8012ba8 <__lshift>
 80108a4:	4680      	mov	r8, r0
 80108a6:	2800      	cmp	r0, #0
 80108a8:	f43f ae68 	beq.w	801057c <_strtod_l+0x43c>
 80108ac:	9a05      	ldr	r2, [sp, #20]
 80108ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80108b0:	4648      	mov	r0, r9
 80108b2:	f002 f9e7 	bl	8012c84 <__mdiff>
 80108b6:	4604      	mov	r4, r0
 80108b8:	2800      	cmp	r0, #0
 80108ba:	f43f ae5f 	beq.w	801057c <_strtod_l+0x43c>
 80108be:	68c3      	ldr	r3, [r0, #12]
 80108c0:	930c      	str	r3, [sp, #48]	; 0x30
 80108c2:	2300      	movs	r3, #0
 80108c4:	60c3      	str	r3, [r0, #12]
 80108c6:	4641      	mov	r1, r8
 80108c8:	f002 f9c2 	bl	8012c50 <__mcmp>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	da55      	bge.n	801097c <_strtod_l+0x83c>
 80108d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108d2:	b9e3      	cbnz	r3, 801090e <_strtod_l+0x7ce>
 80108d4:	f1ba 0f00 	cmp.w	sl, #0
 80108d8:	d119      	bne.n	801090e <_strtod_l+0x7ce>
 80108da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80108de:	b9b3      	cbnz	r3, 801090e <_strtod_l+0x7ce>
 80108e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80108e4:	0d1b      	lsrs	r3, r3, #20
 80108e6:	051b      	lsls	r3, r3, #20
 80108e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80108ec:	d90f      	bls.n	801090e <_strtod_l+0x7ce>
 80108ee:	6963      	ldr	r3, [r4, #20]
 80108f0:	b913      	cbnz	r3, 80108f8 <_strtod_l+0x7b8>
 80108f2:	6923      	ldr	r3, [r4, #16]
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	dd0a      	ble.n	801090e <_strtod_l+0x7ce>
 80108f8:	4621      	mov	r1, r4
 80108fa:	2201      	movs	r2, #1
 80108fc:	4648      	mov	r0, r9
 80108fe:	f002 f953 	bl	8012ba8 <__lshift>
 8010902:	4641      	mov	r1, r8
 8010904:	4604      	mov	r4, r0
 8010906:	f002 f9a3 	bl	8012c50 <__mcmp>
 801090a:	2800      	cmp	r0, #0
 801090c:	dc67      	bgt.n	80109de <_strtod_l+0x89e>
 801090e:	9b04      	ldr	r3, [sp, #16]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d171      	bne.n	80109f8 <_strtod_l+0x8b8>
 8010914:	e63d      	b.n	8010592 <_strtod_l+0x452>
 8010916:	f018 0f01 	tst.w	r8, #1
 801091a:	d004      	beq.n	8010926 <_strtod_l+0x7e6>
 801091c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010920:	f7ef fe82 	bl	8000628 <__aeabi_dmul>
 8010924:	2301      	movs	r3, #1
 8010926:	ea4f 0868 	mov.w	r8, r8, asr #1
 801092a:	3508      	adds	r5, #8
 801092c:	e6e5      	b.n	80106fa <_strtod_l+0x5ba>
 801092e:	f04f 32ff 	mov.w	r2, #4294967295
 8010932:	fa02 f303 	lsl.w	r3, r2, r3
 8010936:	ea03 0a0a 	and.w	sl, r3, sl
 801093a:	e6ff      	b.n	801073c <_strtod_l+0x5fc>
 801093c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010940:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010944:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010948:	36e2      	adds	r6, #226	; 0xe2
 801094a:	fa01 f306 	lsl.w	r3, r1, r6
 801094e:	930a      	str	r3, [sp, #40]	; 0x28
 8010950:	910f      	str	r1, [sp, #60]	; 0x3c
 8010952:	e75d      	b.n	8010810 <_strtod_l+0x6d0>
 8010954:	2300      	movs	r3, #0
 8010956:	930a      	str	r3, [sp, #40]	; 0x28
 8010958:	2301      	movs	r3, #1
 801095a:	930f      	str	r3, [sp, #60]	; 0x3c
 801095c:	e758      	b.n	8010810 <_strtod_l+0x6d0>
 801095e:	4632      	mov	r2, r6
 8010960:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010962:	4648      	mov	r0, r9
 8010964:	f002 f920 	bl	8012ba8 <__lshift>
 8010968:	901c      	str	r0, [sp, #112]	; 0x70
 801096a:	2800      	cmp	r0, #0
 801096c:	f47f af7c 	bne.w	8010868 <_strtod_l+0x728>
 8010970:	e604      	b.n	801057c <_strtod_l+0x43c>
 8010972:	bf00      	nop
 8010974:	08014568 	.word	0x08014568
 8010978:	fffffc02 	.word	0xfffffc02
 801097c:	465d      	mov	r5, fp
 801097e:	f040 8086 	bne.w	8010a8e <_strtod_l+0x94e>
 8010982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010984:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010988:	b32a      	cbz	r2, 80109d6 <_strtod_l+0x896>
 801098a:	4aaf      	ldr	r2, [pc, #700]	; (8010c48 <_strtod_l+0xb08>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d153      	bne.n	8010a38 <_strtod_l+0x8f8>
 8010990:	9b04      	ldr	r3, [sp, #16]
 8010992:	4650      	mov	r0, sl
 8010994:	b1d3      	cbz	r3, 80109cc <_strtod_l+0x88c>
 8010996:	4aad      	ldr	r2, [pc, #692]	; (8010c4c <_strtod_l+0xb0c>)
 8010998:	402a      	ands	r2, r5
 801099a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801099e:	f04f 31ff 	mov.w	r1, #4294967295
 80109a2:	d816      	bhi.n	80109d2 <_strtod_l+0x892>
 80109a4:	0d12      	lsrs	r2, r2, #20
 80109a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80109aa:	fa01 f303 	lsl.w	r3, r1, r3
 80109ae:	4298      	cmp	r0, r3
 80109b0:	d142      	bne.n	8010a38 <_strtod_l+0x8f8>
 80109b2:	4ba7      	ldr	r3, [pc, #668]	; (8010c50 <_strtod_l+0xb10>)
 80109b4:	429d      	cmp	r5, r3
 80109b6:	d102      	bne.n	80109be <_strtod_l+0x87e>
 80109b8:	3001      	adds	r0, #1
 80109ba:	f43f addf 	beq.w	801057c <_strtod_l+0x43c>
 80109be:	4ba3      	ldr	r3, [pc, #652]	; (8010c4c <_strtod_l+0xb0c>)
 80109c0:	402b      	ands	r3, r5
 80109c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80109c6:	f04f 0a00 	mov.w	sl, #0
 80109ca:	e7a0      	b.n	801090e <_strtod_l+0x7ce>
 80109cc:	f04f 33ff 	mov.w	r3, #4294967295
 80109d0:	e7ed      	b.n	80109ae <_strtod_l+0x86e>
 80109d2:	460b      	mov	r3, r1
 80109d4:	e7eb      	b.n	80109ae <_strtod_l+0x86e>
 80109d6:	bb7b      	cbnz	r3, 8010a38 <_strtod_l+0x8f8>
 80109d8:	f1ba 0f00 	cmp.w	sl, #0
 80109dc:	d12c      	bne.n	8010a38 <_strtod_l+0x8f8>
 80109de:	9904      	ldr	r1, [sp, #16]
 80109e0:	4a9a      	ldr	r2, [pc, #616]	; (8010c4c <_strtod_l+0xb0c>)
 80109e2:	465b      	mov	r3, fp
 80109e4:	b1f1      	cbz	r1, 8010a24 <_strtod_l+0x8e4>
 80109e6:	ea02 010b 	and.w	r1, r2, fp
 80109ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80109ee:	dc19      	bgt.n	8010a24 <_strtod_l+0x8e4>
 80109f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80109f4:	f77f ae5b 	ble.w	80106ae <_strtod_l+0x56e>
 80109f8:	4a96      	ldr	r2, [pc, #600]	; (8010c54 <_strtod_l+0xb14>)
 80109fa:	2300      	movs	r3, #0
 80109fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8010a00:	4650      	mov	r0, sl
 8010a02:	4659      	mov	r1, fp
 8010a04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010a08:	f7ef fe0e 	bl	8000628 <__aeabi_dmul>
 8010a0c:	4682      	mov	sl, r0
 8010a0e:	468b      	mov	fp, r1
 8010a10:	2900      	cmp	r1, #0
 8010a12:	f47f adbe 	bne.w	8010592 <_strtod_l+0x452>
 8010a16:	2800      	cmp	r0, #0
 8010a18:	f47f adbb 	bne.w	8010592 <_strtod_l+0x452>
 8010a1c:	2322      	movs	r3, #34	; 0x22
 8010a1e:	f8c9 3000 	str.w	r3, [r9]
 8010a22:	e5b6      	b.n	8010592 <_strtod_l+0x452>
 8010a24:	4013      	ands	r3, r2
 8010a26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010a2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010a2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010a32:	f04f 3aff 	mov.w	sl, #4294967295
 8010a36:	e76a      	b.n	801090e <_strtod_l+0x7ce>
 8010a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a3a:	b193      	cbz	r3, 8010a62 <_strtod_l+0x922>
 8010a3c:	422b      	tst	r3, r5
 8010a3e:	f43f af66 	beq.w	801090e <_strtod_l+0x7ce>
 8010a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a44:	9a04      	ldr	r2, [sp, #16]
 8010a46:	4650      	mov	r0, sl
 8010a48:	4659      	mov	r1, fp
 8010a4a:	b173      	cbz	r3, 8010a6a <_strtod_l+0x92a>
 8010a4c:	f7ff fb5b 	bl	8010106 <sulp>
 8010a50:	4602      	mov	r2, r0
 8010a52:	460b      	mov	r3, r1
 8010a54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a58:	f7ef fc30 	bl	80002bc <__adddf3>
 8010a5c:	4682      	mov	sl, r0
 8010a5e:	468b      	mov	fp, r1
 8010a60:	e755      	b.n	801090e <_strtod_l+0x7ce>
 8010a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a64:	ea13 0f0a 	tst.w	r3, sl
 8010a68:	e7e9      	b.n	8010a3e <_strtod_l+0x8fe>
 8010a6a:	f7ff fb4c 	bl	8010106 <sulp>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	460b      	mov	r3, r1
 8010a72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a76:	f7ef fc1f 	bl	80002b8 <__aeabi_dsub>
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	4682      	mov	sl, r0
 8010a80:	468b      	mov	fp, r1
 8010a82:	f7f0 f839 	bl	8000af8 <__aeabi_dcmpeq>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	f47f ae11 	bne.w	80106ae <_strtod_l+0x56e>
 8010a8c:	e73f      	b.n	801090e <_strtod_l+0x7ce>
 8010a8e:	4641      	mov	r1, r8
 8010a90:	4620      	mov	r0, r4
 8010a92:	f002 fa1a 	bl	8012eca <__ratio>
 8010a96:	ec57 6b10 	vmov	r6, r7, d0
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010aa0:	ee10 0a10 	vmov	r0, s0
 8010aa4:	4639      	mov	r1, r7
 8010aa6:	f7f0 f83b 	bl	8000b20 <__aeabi_dcmple>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d077      	beq.n	8010b9e <_strtod_l+0xa5e>
 8010aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d04a      	beq.n	8010b4a <_strtod_l+0xa0a>
 8010ab4:	4b68      	ldr	r3, [pc, #416]	; (8010c58 <_strtod_l+0xb18>)
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010abc:	4f66      	ldr	r7, [pc, #408]	; (8010c58 <_strtod_l+0xb18>)
 8010abe:	2600      	movs	r6, #0
 8010ac0:	4b62      	ldr	r3, [pc, #392]	; (8010c4c <_strtod_l+0xb0c>)
 8010ac2:	402b      	ands	r3, r5
 8010ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ac8:	4b64      	ldr	r3, [pc, #400]	; (8010c5c <_strtod_l+0xb1c>)
 8010aca:	429a      	cmp	r2, r3
 8010acc:	f040 80ce 	bne.w	8010c6c <_strtod_l+0xb2c>
 8010ad0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010ad4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010ad8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8010adc:	ec4b ab10 	vmov	d0, sl, fp
 8010ae0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8010ae4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010ae8:	f002 f92a 	bl	8012d40 <__ulp>
 8010aec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010af0:	ec53 2b10 	vmov	r2, r3, d0
 8010af4:	f7ef fd98 	bl	8000628 <__aeabi_dmul>
 8010af8:	4652      	mov	r2, sl
 8010afa:	465b      	mov	r3, fp
 8010afc:	f7ef fbde 	bl	80002bc <__adddf3>
 8010b00:	460b      	mov	r3, r1
 8010b02:	4952      	ldr	r1, [pc, #328]	; (8010c4c <_strtod_l+0xb0c>)
 8010b04:	4a56      	ldr	r2, [pc, #344]	; (8010c60 <_strtod_l+0xb20>)
 8010b06:	4019      	ands	r1, r3
 8010b08:	4291      	cmp	r1, r2
 8010b0a:	4682      	mov	sl, r0
 8010b0c:	d95b      	bls.n	8010bc6 <_strtod_l+0xa86>
 8010b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b10:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d103      	bne.n	8010b20 <_strtod_l+0x9e0>
 8010b18:	9b08      	ldr	r3, [sp, #32]
 8010b1a:	3301      	adds	r3, #1
 8010b1c:	f43f ad2e 	beq.w	801057c <_strtod_l+0x43c>
 8010b20:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8010c50 <_strtod_l+0xb10>
 8010b24:	f04f 3aff 	mov.w	sl, #4294967295
 8010b28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010b2a:	4648      	mov	r0, r9
 8010b2c:	f001 fe71 	bl	8012812 <_Bfree>
 8010b30:	9905      	ldr	r1, [sp, #20]
 8010b32:	4648      	mov	r0, r9
 8010b34:	f001 fe6d 	bl	8012812 <_Bfree>
 8010b38:	4641      	mov	r1, r8
 8010b3a:	4648      	mov	r0, r9
 8010b3c:	f001 fe69 	bl	8012812 <_Bfree>
 8010b40:	4621      	mov	r1, r4
 8010b42:	4648      	mov	r0, r9
 8010b44:	f001 fe65 	bl	8012812 <_Bfree>
 8010b48:	e619      	b.n	801077e <_strtod_l+0x63e>
 8010b4a:	f1ba 0f00 	cmp.w	sl, #0
 8010b4e:	d11a      	bne.n	8010b86 <_strtod_l+0xa46>
 8010b50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b54:	b9eb      	cbnz	r3, 8010b92 <_strtod_l+0xa52>
 8010b56:	2200      	movs	r2, #0
 8010b58:	4b3f      	ldr	r3, [pc, #252]	; (8010c58 <_strtod_l+0xb18>)
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	f7ef ffd5 	bl	8000b0c <__aeabi_dcmplt>
 8010b62:	b9c8      	cbnz	r0, 8010b98 <_strtod_l+0xa58>
 8010b64:	4630      	mov	r0, r6
 8010b66:	4639      	mov	r1, r7
 8010b68:	2200      	movs	r2, #0
 8010b6a:	4b3e      	ldr	r3, [pc, #248]	; (8010c64 <_strtod_l+0xb24>)
 8010b6c:	f7ef fd5c 	bl	8000628 <__aeabi_dmul>
 8010b70:	4606      	mov	r6, r0
 8010b72:	460f      	mov	r7, r1
 8010b74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010b78:	9618      	str	r6, [sp, #96]	; 0x60
 8010b7a:	9319      	str	r3, [sp, #100]	; 0x64
 8010b7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8010b80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010b84:	e79c      	b.n	8010ac0 <_strtod_l+0x980>
 8010b86:	f1ba 0f01 	cmp.w	sl, #1
 8010b8a:	d102      	bne.n	8010b92 <_strtod_l+0xa52>
 8010b8c:	2d00      	cmp	r5, #0
 8010b8e:	f43f ad8e 	beq.w	80106ae <_strtod_l+0x56e>
 8010b92:	2200      	movs	r2, #0
 8010b94:	4b34      	ldr	r3, [pc, #208]	; (8010c68 <_strtod_l+0xb28>)
 8010b96:	e78f      	b.n	8010ab8 <_strtod_l+0x978>
 8010b98:	2600      	movs	r6, #0
 8010b9a:	4f32      	ldr	r7, [pc, #200]	; (8010c64 <_strtod_l+0xb24>)
 8010b9c:	e7ea      	b.n	8010b74 <_strtod_l+0xa34>
 8010b9e:	4b31      	ldr	r3, [pc, #196]	; (8010c64 <_strtod_l+0xb24>)
 8010ba0:	4630      	mov	r0, r6
 8010ba2:	4639      	mov	r1, r7
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	f7ef fd3f 	bl	8000628 <__aeabi_dmul>
 8010baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bac:	4606      	mov	r6, r0
 8010bae:	460f      	mov	r7, r1
 8010bb0:	b933      	cbnz	r3, 8010bc0 <_strtod_l+0xa80>
 8010bb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bb6:	9010      	str	r0, [sp, #64]	; 0x40
 8010bb8:	9311      	str	r3, [sp, #68]	; 0x44
 8010bba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010bbe:	e7df      	b.n	8010b80 <_strtod_l+0xa40>
 8010bc0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010bc4:	e7f9      	b.n	8010bba <_strtod_l+0xa7a>
 8010bc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010bca:	9b04      	ldr	r3, [sp, #16]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d1ab      	bne.n	8010b28 <_strtod_l+0x9e8>
 8010bd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010bd4:	0d1b      	lsrs	r3, r3, #20
 8010bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010bd8:	051b      	lsls	r3, r3, #20
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	465d      	mov	r5, fp
 8010bde:	d1a3      	bne.n	8010b28 <_strtod_l+0x9e8>
 8010be0:	4639      	mov	r1, r7
 8010be2:	4630      	mov	r0, r6
 8010be4:	f7ef ffd0 	bl	8000b88 <__aeabi_d2iz>
 8010be8:	f7ef fcb4 	bl	8000554 <__aeabi_i2d>
 8010bec:	460b      	mov	r3, r1
 8010bee:	4602      	mov	r2, r0
 8010bf0:	4639      	mov	r1, r7
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f7ef fb60 	bl	80002b8 <__aeabi_dsub>
 8010bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	b933      	cbnz	r3, 8010c0e <_strtod_l+0xace>
 8010c00:	f1ba 0f00 	cmp.w	sl, #0
 8010c04:	d103      	bne.n	8010c0e <_strtod_l+0xace>
 8010c06:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8010c0a:	2d00      	cmp	r5, #0
 8010c0c:	d06d      	beq.n	8010cea <_strtod_l+0xbaa>
 8010c0e:	a30a      	add	r3, pc, #40	; (adr r3, 8010c38 <_strtod_l+0xaf8>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	4630      	mov	r0, r6
 8010c16:	4639      	mov	r1, r7
 8010c18:	f7ef ff78 	bl	8000b0c <__aeabi_dcmplt>
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	f47f acb8 	bne.w	8010592 <_strtod_l+0x452>
 8010c22:	a307      	add	r3, pc, #28	; (adr r3, 8010c40 <_strtod_l+0xb00>)
 8010c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c28:	4630      	mov	r0, r6
 8010c2a:	4639      	mov	r1, r7
 8010c2c:	f7ef ff8c 	bl	8000b48 <__aeabi_dcmpgt>
 8010c30:	2800      	cmp	r0, #0
 8010c32:	f43f af79 	beq.w	8010b28 <_strtod_l+0x9e8>
 8010c36:	e4ac      	b.n	8010592 <_strtod_l+0x452>
 8010c38:	94a03595 	.word	0x94a03595
 8010c3c:	3fdfffff 	.word	0x3fdfffff
 8010c40:	35afe535 	.word	0x35afe535
 8010c44:	3fe00000 	.word	0x3fe00000
 8010c48:	000fffff 	.word	0x000fffff
 8010c4c:	7ff00000 	.word	0x7ff00000
 8010c50:	7fefffff 	.word	0x7fefffff
 8010c54:	39500000 	.word	0x39500000
 8010c58:	3ff00000 	.word	0x3ff00000
 8010c5c:	7fe00000 	.word	0x7fe00000
 8010c60:	7c9fffff 	.word	0x7c9fffff
 8010c64:	3fe00000 	.word	0x3fe00000
 8010c68:	bff00000 	.word	0xbff00000
 8010c6c:	9b04      	ldr	r3, [sp, #16]
 8010c6e:	b333      	cbz	r3, 8010cbe <_strtod_l+0xb7e>
 8010c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010c76:	d822      	bhi.n	8010cbe <_strtod_l+0xb7e>
 8010c78:	a327      	add	r3, pc, #156	; (adr r3, 8010d18 <_strtod_l+0xbd8>)
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	4630      	mov	r0, r6
 8010c80:	4639      	mov	r1, r7
 8010c82:	f7ef ff4d 	bl	8000b20 <__aeabi_dcmple>
 8010c86:	b1a0      	cbz	r0, 8010cb2 <_strtod_l+0xb72>
 8010c88:	4639      	mov	r1, r7
 8010c8a:	4630      	mov	r0, r6
 8010c8c:	f7ef ffa4 	bl	8000bd8 <__aeabi_d2uiz>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	bf08      	it	eq
 8010c94:	2001      	moveq	r0, #1
 8010c96:	f7ef fc4d 	bl	8000534 <__aeabi_ui2d>
 8010c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	460f      	mov	r7, r1
 8010ca0:	bb03      	cbnz	r3, 8010ce4 <_strtod_l+0xba4>
 8010ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ca6:	9012      	str	r0, [sp, #72]	; 0x48
 8010ca8:	9313      	str	r3, [sp, #76]	; 0x4c
 8010caa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010cae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010cb6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010cba:	1a9b      	subs	r3, r3, r2
 8010cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cbe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8010cc2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8010cc6:	f002 f83b 	bl	8012d40 <__ulp>
 8010cca:	4650      	mov	r0, sl
 8010ccc:	ec53 2b10 	vmov	r2, r3, d0
 8010cd0:	4659      	mov	r1, fp
 8010cd2:	f7ef fca9 	bl	8000628 <__aeabi_dmul>
 8010cd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010cda:	f7ef faef 	bl	80002bc <__adddf3>
 8010cde:	4682      	mov	sl, r0
 8010ce0:	468b      	mov	fp, r1
 8010ce2:	e772      	b.n	8010bca <_strtod_l+0xa8a>
 8010ce4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8010ce8:	e7df      	b.n	8010caa <_strtod_l+0xb6a>
 8010cea:	a30d      	add	r3, pc, #52	; (adr r3, 8010d20 <_strtod_l+0xbe0>)
 8010cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf0:	f7ef ff0c 	bl	8000b0c <__aeabi_dcmplt>
 8010cf4:	e79c      	b.n	8010c30 <_strtod_l+0xaf0>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8010cfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010cfe:	6013      	str	r3, [r2, #0]
 8010d00:	f7ff ba61 	b.w	80101c6 <_strtod_l+0x86>
 8010d04:	2b65      	cmp	r3, #101	; 0x65
 8010d06:	f04f 0200 	mov.w	r2, #0
 8010d0a:	f43f ab4e 	beq.w	80103aa <_strtod_l+0x26a>
 8010d0e:	2101      	movs	r1, #1
 8010d10:	4614      	mov	r4, r2
 8010d12:	9104      	str	r1, [sp, #16]
 8010d14:	f7ff bacb 	b.w	80102ae <_strtod_l+0x16e>
 8010d18:	ffc00000 	.word	0xffc00000
 8010d1c:	41dfffff 	.word	0x41dfffff
 8010d20:	94a03595 	.word	0x94a03595
 8010d24:	3fcfffff 	.word	0x3fcfffff

08010d28 <_strtod_r>:
 8010d28:	4b05      	ldr	r3, [pc, #20]	; (8010d40 <_strtod_r+0x18>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	b410      	push	{r4}
 8010d2e:	6a1b      	ldr	r3, [r3, #32]
 8010d30:	4c04      	ldr	r4, [pc, #16]	; (8010d44 <_strtod_r+0x1c>)
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	bf08      	it	eq
 8010d36:	4623      	moveq	r3, r4
 8010d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d3c:	f7ff ba00 	b.w	8010140 <_strtod_l>
 8010d40:	2000000c 	.word	0x2000000c
 8010d44:	20000070 	.word	0x20000070

08010d48 <_strtol_l.isra.0>:
 8010d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d4c:	4680      	mov	r8, r0
 8010d4e:	4689      	mov	r9, r1
 8010d50:	4692      	mov	sl, r2
 8010d52:	461e      	mov	r6, r3
 8010d54:	460f      	mov	r7, r1
 8010d56:	463d      	mov	r5, r7
 8010d58:	9808      	ldr	r0, [sp, #32]
 8010d5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d5e:	f001 fc67 	bl	8012630 <__locale_ctype_ptr_l>
 8010d62:	4420      	add	r0, r4
 8010d64:	7843      	ldrb	r3, [r0, #1]
 8010d66:	f013 0308 	ands.w	r3, r3, #8
 8010d6a:	d132      	bne.n	8010dd2 <_strtol_l.isra.0+0x8a>
 8010d6c:	2c2d      	cmp	r4, #45	; 0x2d
 8010d6e:	d132      	bne.n	8010dd6 <_strtol_l.isra.0+0x8e>
 8010d70:	787c      	ldrb	r4, [r7, #1]
 8010d72:	1cbd      	adds	r5, r7, #2
 8010d74:	2201      	movs	r2, #1
 8010d76:	2e00      	cmp	r6, #0
 8010d78:	d05d      	beq.n	8010e36 <_strtol_l.isra.0+0xee>
 8010d7a:	2e10      	cmp	r6, #16
 8010d7c:	d109      	bne.n	8010d92 <_strtol_l.isra.0+0x4a>
 8010d7e:	2c30      	cmp	r4, #48	; 0x30
 8010d80:	d107      	bne.n	8010d92 <_strtol_l.isra.0+0x4a>
 8010d82:	782b      	ldrb	r3, [r5, #0]
 8010d84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010d88:	2b58      	cmp	r3, #88	; 0x58
 8010d8a:	d14f      	bne.n	8010e2c <_strtol_l.isra.0+0xe4>
 8010d8c:	786c      	ldrb	r4, [r5, #1]
 8010d8e:	2610      	movs	r6, #16
 8010d90:	3502      	adds	r5, #2
 8010d92:	2a00      	cmp	r2, #0
 8010d94:	bf14      	ite	ne
 8010d96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8010d9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8010d9e:	2700      	movs	r7, #0
 8010da0:	fbb1 fcf6 	udiv	ip, r1, r6
 8010da4:	4638      	mov	r0, r7
 8010da6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8010daa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010dae:	2b09      	cmp	r3, #9
 8010db0:	d817      	bhi.n	8010de2 <_strtol_l.isra.0+0x9a>
 8010db2:	461c      	mov	r4, r3
 8010db4:	42a6      	cmp	r6, r4
 8010db6:	dd23      	ble.n	8010e00 <_strtol_l.isra.0+0xb8>
 8010db8:	1c7b      	adds	r3, r7, #1
 8010dba:	d007      	beq.n	8010dcc <_strtol_l.isra.0+0x84>
 8010dbc:	4584      	cmp	ip, r0
 8010dbe:	d31c      	bcc.n	8010dfa <_strtol_l.isra.0+0xb2>
 8010dc0:	d101      	bne.n	8010dc6 <_strtol_l.isra.0+0x7e>
 8010dc2:	45a6      	cmp	lr, r4
 8010dc4:	db19      	blt.n	8010dfa <_strtol_l.isra.0+0xb2>
 8010dc6:	fb00 4006 	mla	r0, r0, r6, r4
 8010dca:	2701      	movs	r7, #1
 8010dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010dd0:	e7eb      	b.n	8010daa <_strtol_l.isra.0+0x62>
 8010dd2:	462f      	mov	r7, r5
 8010dd4:	e7bf      	b.n	8010d56 <_strtol_l.isra.0+0xe>
 8010dd6:	2c2b      	cmp	r4, #43	; 0x2b
 8010dd8:	bf04      	itt	eq
 8010dda:	1cbd      	addeq	r5, r7, #2
 8010ddc:	787c      	ldrbeq	r4, [r7, #1]
 8010dde:	461a      	mov	r2, r3
 8010de0:	e7c9      	b.n	8010d76 <_strtol_l.isra.0+0x2e>
 8010de2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010de6:	2b19      	cmp	r3, #25
 8010de8:	d801      	bhi.n	8010dee <_strtol_l.isra.0+0xa6>
 8010dea:	3c37      	subs	r4, #55	; 0x37
 8010dec:	e7e2      	b.n	8010db4 <_strtol_l.isra.0+0x6c>
 8010dee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010df2:	2b19      	cmp	r3, #25
 8010df4:	d804      	bhi.n	8010e00 <_strtol_l.isra.0+0xb8>
 8010df6:	3c57      	subs	r4, #87	; 0x57
 8010df8:	e7dc      	b.n	8010db4 <_strtol_l.isra.0+0x6c>
 8010dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8010dfe:	e7e5      	b.n	8010dcc <_strtol_l.isra.0+0x84>
 8010e00:	1c7b      	adds	r3, r7, #1
 8010e02:	d108      	bne.n	8010e16 <_strtol_l.isra.0+0xce>
 8010e04:	2322      	movs	r3, #34	; 0x22
 8010e06:	f8c8 3000 	str.w	r3, [r8]
 8010e0a:	4608      	mov	r0, r1
 8010e0c:	f1ba 0f00 	cmp.w	sl, #0
 8010e10:	d107      	bne.n	8010e22 <_strtol_l.isra.0+0xda>
 8010e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e16:	b102      	cbz	r2, 8010e1a <_strtol_l.isra.0+0xd2>
 8010e18:	4240      	negs	r0, r0
 8010e1a:	f1ba 0f00 	cmp.w	sl, #0
 8010e1e:	d0f8      	beq.n	8010e12 <_strtol_l.isra.0+0xca>
 8010e20:	b10f      	cbz	r7, 8010e26 <_strtol_l.isra.0+0xde>
 8010e22:	f105 39ff 	add.w	r9, r5, #4294967295
 8010e26:	f8ca 9000 	str.w	r9, [sl]
 8010e2a:	e7f2      	b.n	8010e12 <_strtol_l.isra.0+0xca>
 8010e2c:	2430      	movs	r4, #48	; 0x30
 8010e2e:	2e00      	cmp	r6, #0
 8010e30:	d1af      	bne.n	8010d92 <_strtol_l.isra.0+0x4a>
 8010e32:	2608      	movs	r6, #8
 8010e34:	e7ad      	b.n	8010d92 <_strtol_l.isra.0+0x4a>
 8010e36:	2c30      	cmp	r4, #48	; 0x30
 8010e38:	d0a3      	beq.n	8010d82 <_strtol_l.isra.0+0x3a>
 8010e3a:	260a      	movs	r6, #10
 8010e3c:	e7a9      	b.n	8010d92 <_strtol_l.isra.0+0x4a>
	...

08010e40 <_strtol_r>:
 8010e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e42:	4c06      	ldr	r4, [pc, #24]	; (8010e5c <_strtol_r+0x1c>)
 8010e44:	4d06      	ldr	r5, [pc, #24]	; (8010e60 <_strtol_r+0x20>)
 8010e46:	6824      	ldr	r4, [r4, #0]
 8010e48:	6a24      	ldr	r4, [r4, #32]
 8010e4a:	2c00      	cmp	r4, #0
 8010e4c:	bf08      	it	eq
 8010e4e:	462c      	moveq	r4, r5
 8010e50:	9400      	str	r4, [sp, #0]
 8010e52:	f7ff ff79 	bl	8010d48 <_strtol_l.isra.0>
 8010e56:	b003      	add	sp, #12
 8010e58:	bd30      	pop	{r4, r5, pc}
 8010e5a:	bf00      	nop
 8010e5c:	2000000c 	.word	0x2000000c
 8010e60:	20000070 	.word	0x20000070

08010e64 <_vsiprintf_r>:
 8010e64:	b500      	push	{lr}
 8010e66:	b09b      	sub	sp, #108	; 0x6c
 8010e68:	9100      	str	r1, [sp, #0]
 8010e6a:	9104      	str	r1, [sp, #16]
 8010e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e70:	9105      	str	r1, [sp, #20]
 8010e72:	9102      	str	r1, [sp, #8]
 8010e74:	4905      	ldr	r1, [pc, #20]	; (8010e8c <_vsiprintf_r+0x28>)
 8010e76:	9103      	str	r1, [sp, #12]
 8010e78:	4669      	mov	r1, sp
 8010e7a:	f002 f9a5 	bl	80131c8 <_svfiprintf_r>
 8010e7e:	9b00      	ldr	r3, [sp, #0]
 8010e80:	2200      	movs	r2, #0
 8010e82:	701a      	strb	r2, [r3, #0]
 8010e84:	b01b      	add	sp, #108	; 0x6c
 8010e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e8a:	bf00      	nop
 8010e8c:	ffff0208 	.word	0xffff0208

08010e90 <vsiprintf>:
 8010e90:	4613      	mov	r3, r2
 8010e92:	460a      	mov	r2, r1
 8010e94:	4601      	mov	r1, r0
 8010e96:	4802      	ldr	r0, [pc, #8]	; (8010ea0 <vsiprintf+0x10>)
 8010e98:	6800      	ldr	r0, [r0, #0]
 8010e9a:	f7ff bfe3 	b.w	8010e64 <_vsiprintf_r>
 8010e9e:	bf00      	nop
 8010ea0:	2000000c 	.word	0x2000000c

08010ea4 <__swbuf_r>:
 8010ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ea6:	460e      	mov	r6, r1
 8010ea8:	4614      	mov	r4, r2
 8010eaa:	4605      	mov	r5, r0
 8010eac:	b118      	cbz	r0, 8010eb6 <__swbuf_r+0x12>
 8010eae:	6983      	ldr	r3, [r0, #24]
 8010eb0:	b90b      	cbnz	r3, 8010eb6 <__swbuf_r+0x12>
 8010eb2:	f001 f80d 	bl	8011ed0 <__sinit>
 8010eb6:	4b21      	ldr	r3, [pc, #132]	; (8010f3c <__swbuf_r+0x98>)
 8010eb8:	429c      	cmp	r4, r3
 8010eba:	d12a      	bne.n	8010f12 <__swbuf_r+0x6e>
 8010ebc:	686c      	ldr	r4, [r5, #4]
 8010ebe:	69a3      	ldr	r3, [r4, #24]
 8010ec0:	60a3      	str	r3, [r4, #8]
 8010ec2:	89a3      	ldrh	r3, [r4, #12]
 8010ec4:	071a      	lsls	r2, r3, #28
 8010ec6:	d52e      	bpl.n	8010f26 <__swbuf_r+0x82>
 8010ec8:	6923      	ldr	r3, [r4, #16]
 8010eca:	b363      	cbz	r3, 8010f26 <__swbuf_r+0x82>
 8010ecc:	6923      	ldr	r3, [r4, #16]
 8010ece:	6820      	ldr	r0, [r4, #0]
 8010ed0:	1ac0      	subs	r0, r0, r3
 8010ed2:	6963      	ldr	r3, [r4, #20]
 8010ed4:	b2f6      	uxtb	r6, r6
 8010ed6:	4283      	cmp	r3, r0
 8010ed8:	4637      	mov	r7, r6
 8010eda:	dc04      	bgt.n	8010ee6 <__swbuf_r+0x42>
 8010edc:	4621      	mov	r1, r4
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f000 ff8c 	bl	8011dfc <_fflush_r>
 8010ee4:	bb28      	cbnz	r0, 8010f32 <__swbuf_r+0x8e>
 8010ee6:	68a3      	ldr	r3, [r4, #8]
 8010ee8:	3b01      	subs	r3, #1
 8010eea:	60a3      	str	r3, [r4, #8]
 8010eec:	6823      	ldr	r3, [r4, #0]
 8010eee:	1c5a      	adds	r2, r3, #1
 8010ef0:	6022      	str	r2, [r4, #0]
 8010ef2:	701e      	strb	r6, [r3, #0]
 8010ef4:	6963      	ldr	r3, [r4, #20]
 8010ef6:	3001      	adds	r0, #1
 8010ef8:	4283      	cmp	r3, r0
 8010efa:	d004      	beq.n	8010f06 <__swbuf_r+0x62>
 8010efc:	89a3      	ldrh	r3, [r4, #12]
 8010efe:	07db      	lsls	r3, r3, #31
 8010f00:	d519      	bpl.n	8010f36 <__swbuf_r+0x92>
 8010f02:	2e0a      	cmp	r6, #10
 8010f04:	d117      	bne.n	8010f36 <__swbuf_r+0x92>
 8010f06:	4621      	mov	r1, r4
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f000 ff77 	bl	8011dfc <_fflush_r>
 8010f0e:	b190      	cbz	r0, 8010f36 <__swbuf_r+0x92>
 8010f10:	e00f      	b.n	8010f32 <__swbuf_r+0x8e>
 8010f12:	4b0b      	ldr	r3, [pc, #44]	; (8010f40 <__swbuf_r+0x9c>)
 8010f14:	429c      	cmp	r4, r3
 8010f16:	d101      	bne.n	8010f1c <__swbuf_r+0x78>
 8010f18:	68ac      	ldr	r4, [r5, #8]
 8010f1a:	e7d0      	b.n	8010ebe <__swbuf_r+0x1a>
 8010f1c:	4b09      	ldr	r3, [pc, #36]	; (8010f44 <__swbuf_r+0xa0>)
 8010f1e:	429c      	cmp	r4, r3
 8010f20:	bf08      	it	eq
 8010f22:	68ec      	ldreq	r4, [r5, #12]
 8010f24:	e7cb      	b.n	8010ebe <__swbuf_r+0x1a>
 8010f26:	4621      	mov	r1, r4
 8010f28:	4628      	mov	r0, r5
 8010f2a:	f000 f81f 	bl	8010f6c <__swsetup_r>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d0cc      	beq.n	8010ecc <__swbuf_r+0x28>
 8010f32:	f04f 37ff 	mov.w	r7, #4294967295
 8010f36:	4638      	mov	r0, r7
 8010f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	080145c0 	.word	0x080145c0
 8010f40:	080145e0 	.word	0x080145e0
 8010f44:	080145a0 	.word	0x080145a0

08010f48 <_write_r>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	4c07      	ldr	r4, [pc, #28]	; (8010f68 <_write_r+0x20>)
 8010f4c:	4605      	mov	r5, r0
 8010f4e:	4608      	mov	r0, r1
 8010f50:	4611      	mov	r1, r2
 8010f52:	2200      	movs	r2, #0
 8010f54:	6022      	str	r2, [r4, #0]
 8010f56:	461a      	mov	r2, r3
 8010f58:	f7f1 fa75 	bl	8002446 <_write>
 8010f5c:	1c43      	adds	r3, r0, #1
 8010f5e:	d102      	bne.n	8010f66 <_write_r+0x1e>
 8010f60:	6823      	ldr	r3, [r4, #0]
 8010f62:	b103      	cbz	r3, 8010f66 <_write_r+0x1e>
 8010f64:	602b      	str	r3, [r5, #0]
 8010f66:	bd38      	pop	{r3, r4, r5, pc}
 8010f68:	20005098 	.word	0x20005098

08010f6c <__swsetup_r>:
 8010f6c:	4b32      	ldr	r3, [pc, #200]	; (8011038 <__swsetup_r+0xcc>)
 8010f6e:	b570      	push	{r4, r5, r6, lr}
 8010f70:	681d      	ldr	r5, [r3, #0]
 8010f72:	4606      	mov	r6, r0
 8010f74:	460c      	mov	r4, r1
 8010f76:	b125      	cbz	r5, 8010f82 <__swsetup_r+0x16>
 8010f78:	69ab      	ldr	r3, [r5, #24]
 8010f7a:	b913      	cbnz	r3, 8010f82 <__swsetup_r+0x16>
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	f000 ffa7 	bl	8011ed0 <__sinit>
 8010f82:	4b2e      	ldr	r3, [pc, #184]	; (801103c <__swsetup_r+0xd0>)
 8010f84:	429c      	cmp	r4, r3
 8010f86:	d10f      	bne.n	8010fa8 <__swsetup_r+0x3c>
 8010f88:	686c      	ldr	r4, [r5, #4]
 8010f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	0715      	lsls	r5, r2, #28
 8010f92:	d42c      	bmi.n	8010fee <__swsetup_r+0x82>
 8010f94:	06d0      	lsls	r0, r2, #27
 8010f96:	d411      	bmi.n	8010fbc <__swsetup_r+0x50>
 8010f98:	2209      	movs	r2, #9
 8010f9a:	6032      	str	r2, [r6, #0]
 8010f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fa0:	81a3      	strh	r3, [r4, #12]
 8010fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa6:	e03e      	b.n	8011026 <__swsetup_r+0xba>
 8010fa8:	4b25      	ldr	r3, [pc, #148]	; (8011040 <__swsetup_r+0xd4>)
 8010faa:	429c      	cmp	r4, r3
 8010fac:	d101      	bne.n	8010fb2 <__swsetup_r+0x46>
 8010fae:	68ac      	ldr	r4, [r5, #8]
 8010fb0:	e7eb      	b.n	8010f8a <__swsetup_r+0x1e>
 8010fb2:	4b24      	ldr	r3, [pc, #144]	; (8011044 <__swsetup_r+0xd8>)
 8010fb4:	429c      	cmp	r4, r3
 8010fb6:	bf08      	it	eq
 8010fb8:	68ec      	ldreq	r4, [r5, #12]
 8010fba:	e7e6      	b.n	8010f8a <__swsetup_r+0x1e>
 8010fbc:	0751      	lsls	r1, r2, #29
 8010fbe:	d512      	bpl.n	8010fe6 <__swsetup_r+0x7a>
 8010fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fc2:	b141      	cbz	r1, 8010fd6 <__swsetup_r+0x6a>
 8010fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fc8:	4299      	cmp	r1, r3
 8010fca:	d002      	beq.n	8010fd2 <__swsetup_r+0x66>
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f001 fff9 	bl	8012fc4 <_free_r>
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8010fd6:	89a3      	ldrh	r3, [r4, #12]
 8010fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010fdc:	81a3      	strh	r3, [r4, #12]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	6063      	str	r3, [r4, #4]
 8010fe2:	6923      	ldr	r3, [r4, #16]
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	89a3      	ldrh	r3, [r4, #12]
 8010fe8:	f043 0308 	orr.w	r3, r3, #8
 8010fec:	81a3      	strh	r3, [r4, #12]
 8010fee:	6923      	ldr	r3, [r4, #16]
 8010ff0:	b94b      	cbnz	r3, 8011006 <__swsetup_r+0x9a>
 8010ff2:	89a3      	ldrh	r3, [r4, #12]
 8010ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ffc:	d003      	beq.n	8011006 <__swsetup_r+0x9a>
 8010ffe:	4621      	mov	r1, r4
 8011000:	4630      	mov	r0, r6
 8011002:	f001 fb6d 	bl	80126e0 <__smakebuf_r>
 8011006:	89a2      	ldrh	r2, [r4, #12]
 8011008:	f012 0301 	ands.w	r3, r2, #1
 801100c:	d00c      	beq.n	8011028 <__swsetup_r+0xbc>
 801100e:	2300      	movs	r3, #0
 8011010:	60a3      	str	r3, [r4, #8]
 8011012:	6963      	ldr	r3, [r4, #20]
 8011014:	425b      	negs	r3, r3
 8011016:	61a3      	str	r3, [r4, #24]
 8011018:	6923      	ldr	r3, [r4, #16]
 801101a:	b953      	cbnz	r3, 8011032 <__swsetup_r+0xc6>
 801101c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011020:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011024:	d1ba      	bne.n	8010f9c <__swsetup_r+0x30>
 8011026:	bd70      	pop	{r4, r5, r6, pc}
 8011028:	0792      	lsls	r2, r2, #30
 801102a:	bf58      	it	pl
 801102c:	6963      	ldrpl	r3, [r4, #20]
 801102e:	60a3      	str	r3, [r4, #8]
 8011030:	e7f2      	b.n	8011018 <__swsetup_r+0xac>
 8011032:	2000      	movs	r0, #0
 8011034:	e7f7      	b.n	8011026 <__swsetup_r+0xba>
 8011036:	bf00      	nop
 8011038:	2000000c 	.word	0x2000000c
 801103c:	080145c0 	.word	0x080145c0
 8011040:	080145e0 	.word	0x080145e0
 8011044:	080145a0 	.word	0x080145a0

08011048 <_close_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4c06      	ldr	r4, [pc, #24]	; (8011064 <_close_r+0x1c>)
 801104c:	2300      	movs	r3, #0
 801104e:	4605      	mov	r5, r0
 8011050:	4608      	mov	r0, r1
 8011052:	6023      	str	r3, [r4, #0]
 8011054:	f7f2 ff35 	bl	8003ec2 <_close>
 8011058:	1c43      	adds	r3, r0, #1
 801105a:	d102      	bne.n	8011062 <_close_r+0x1a>
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	b103      	cbz	r3, 8011062 <_close_r+0x1a>
 8011060:	602b      	str	r3, [r5, #0]
 8011062:	bd38      	pop	{r3, r4, r5, pc}
 8011064:	20005098 	.word	0x20005098

08011068 <quorem>:
 8011068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	6903      	ldr	r3, [r0, #16]
 801106e:	690c      	ldr	r4, [r1, #16]
 8011070:	42a3      	cmp	r3, r4
 8011072:	4680      	mov	r8, r0
 8011074:	f2c0 8082 	blt.w	801117c <quorem+0x114>
 8011078:	3c01      	subs	r4, #1
 801107a:	f101 0714 	add.w	r7, r1, #20
 801107e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011082:	f100 0614 	add.w	r6, r0, #20
 8011086:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801108a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801108e:	eb06 030c 	add.w	r3, r6, ip
 8011092:	3501      	adds	r5, #1
 8011094:	eb07 090c 	add.w	r9, r7, ip
 8011098:	9301      	str	r3, [sp, #4]
 801109a:	fbb0 f5f5 	udiv	r5, r0, r5
 801109e:	b395      	cbz	r5, 8011106 <quorem+0x9e>
 80110a0:	f04f 0a00 	mov.w	sl, #0
 80110a4:	4638      	mov	r0, r7
 80110a6:	46b6      	mov	lr, r6
 80110a8:	46d3      	mov	fp, sl
 80110aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80110ae:	b293      	uxth	r3, r2
 80110b0:	fb05 a303 	mla	r3, r5, r3, sl
 80110b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	ebab 0303 	sub.w	r3, fp, r3
 80110be:	0c12      	lsrs	r2, r2, #16
 80110c0:	f8de b000 	ldr.w	fp, [lr]
 80110c4:	fb05 a202 	mla	r2, r5, r2, sl
 80110c8:	fa13 f38b 	uxtah	r3, r3, fp
 80110cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80110d0:	fa1f fb82 	uxth.w	fp, r2
 80110d4:	f8de 2000 	ldr.w	r2, [lr]
 80110d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80110dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110e6:	4581      	cmp	r9, r0
 80110e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80110ec:	f84e 3b04 	str.w	r3, [lr], #4
 80110f0:	d2db      	bcs.n	80110aa <quorem+0x42>
 80110f2:	f856 300c 	ldr.w	r3, [r6, ip]
 80110f6:	b933      	cbnz	r3, 8011106 <quorem+0x9e>
 80110f8:	9b01      	ldr	r3, [sp, #4]
 80110fa:	3b04      	subs	r3, #4
 80110fc:	429e      	cmp	r6, r3
 80110fe:	461a      	mov	r2, r3
 8011100:	d330      	bcc.n	8011164 <quorem+0xfc>
 8011102:	f8c8 4010 	str.w	r4, [r8, #16]
 8011106:	4640      	mov	r0, r8
 8011108:	f001 fda2 	bl	8012c50 <__mcmp>
 801110c:	2800      	cmp	r0, #0
 801110e:	db25      	blt.n	801115c <quorem+0xf4>
 8011110:	3501      	adds	r5, #1
 8011112:	4630      	mov	r0, r6
 8011114:	f04f 0c00 	mov.w	ip, #0
 8011118:	f857 2b04 	ldr.w	r2, [r7], #4
 801111c:	f8d0 e000 	ldr.w	lr, [r0]
 8011120:	b293      	uxth	r3, r2
 8011122:	ebac 0303 	sub.w	r3, ip, r3
 8011126:	0c12      	lsrs	r2, r2, #16
 8011128:	fa13 f38e 	uxtah	r3, r3, lr
 801112c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011130:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011134:	b29b      	uxth	r3, r3
 8011136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801113a:	45b9      	cmp	r9, r7
 801113c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011140:	f840 3b04 	str.w	r3, [r0], #4
 8011144:	d2e8      	bcs.n	8011118 <quorem+0xb0>
 8011146:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801114a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801114e:	b92a      	cbnz	r2, 801115c <quorem+0xf4>
 8011150:	3b04      	subs	r3, #4
 8011152:	429e      	cmp	r6, r3
 8011154:	461a      	mov	r2, r3
 8011156:	d30b      	bcc.n	8011170 <quorem+0x108>
 8011158:	f8c8 4010 	str.w	r4, [r8, #16]
 801115c:	4628      	mov	r0, r5
 801115e:	b003      	add	sp, #12
 8011160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011164:	6812      	ldr	r2, [r2, #0]
 8011166:	3b04      	subs	r3, #4
 8011168:	2a00      	cmp	r2, #0
 801116a:	d1ca      	bne.n	8011102 <quorem+0x9a>
 801116c:	3c01      	subs	r4, #1
 801116e:	e7c5      	b.n	80110fc <quorem+0x94>
 8011170:	6812      	ldr	r2, [r2, #0]
 8011172:	3b04      	subs	r3, #4
 8011174:	2a00      	cmp	r2, #0
 8011176:	d1ef      	bne.n	8011158 <quorem+0xf0>
 8011178:	3c01      	subs	r4, #1
 801117a:	e7ea      	b.n	8011152 <quorem+0xea>
 801117c:	2000      	movs	r0, #0
 801117e:	e7ee      	b.n	801115e <quorem+0xf6>

08011180 <_dtoa_r>:
 8011180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011184:	ec57 6b10 	vmov	r6, r7, d0
 8011188:	b097      	sub	sp, #92	; 0x5c
 801118a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801118c:	9106      	str	r1, [sp, #24]
 801118e:	4604      	mov	r4, r0
 8011190:	920b      	str	r2, [sp, #44]	; 0x2c
 8011192:	9312      	str	r3, [sp, #72]	; 0x48
 8011194:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011198:	e9cd 6700 	strd	r6, r7, [sp]
 801119c:	b93d      	cbnz	r5, 80111ae <_dtoa_r+0x2e>
 801119e:	2010      	movs	r0, #16
 80111a0:	f001 fade 	bl	8012760 <malloc>
 80111a4:	6260      	str	r0, [r4, #36]	; 0x24
 80111a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80111aa:	6005      	str	r5, [r0, #0]
 80111ac:	60c5      	str	r5, [r0, #12]
 80111ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111b0:	6819      	ldr	r1, [r3, #0]
 80111b2:	b151      	cbz	r1, 80111ca <_dtoa_r+0x4a>
 80111b4:	685a      	ldr	r2, [r3, #4]
 80111b6:	604a      	str	r2, [r1, #4]
 80111b8:	2301      	movs	r3, #1
 80111ba:	4093      	lsls	r3, r2
 80111bc:	608b      	str	r3, [r1, #8]
 80111be:	4620      	mov	r0, r4
 80111c0:	f001 fb27 	bl	8012812 <_Bfree>
 80111c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111c6:	2200      	movs	r2, #0
 80111c8:	601a      	str	r2, [r3, #0]
 80111ca:	1e3b      	subs	r3, r7, #0
 80111cc:	bfbb      	ittet	lt
 80111ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80111d2:	9301      	strlt	r3, [sp, #4]
 80111d4:	2300      	movge	r3, #0
 80111d6:	2201      	movlt	r2, #1
 80111d8:	bfac      	ite	ge
 80111da:	f8c8 3000 	strge.w	r3, [r8]
 80111de:	f8c8 2000 	strlt.w	r2, [r8]
 80111e2:	4baf      	ldr	r3, [pc, #700]	; (80114a0 <_dtoa_r+0x320>)
 80111e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80111e8:	ea33 0308 	bics.w	r3, r3, r8
 80111ec:	d114      	bne.n	8011218 <_dtoa_r+0x98>
 80111ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80111f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80111f4:	6013      	str	r3, [r2, #0]
 80111f6:	9b00      	ldr	r3, [sp, #0]
 80111f8:	b923      	cbnz	r3, 8011204 <_dtoa_r+0x84>
 80111fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80111fe:	2800      	cmp	r0, #0
 8011200:	f000 8542 	beq.w	8011c88 <_dtoa_r+0xb08>
 8011204:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011206:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80114b4 <_dtoa_r+0x334>
 801120a:	2b00      	cmp	r3, #0
 801120c:	f000 8544 	beq.w	8011c98 <_dtoa_r+0xb18>
 8011210:	f10b 0303 	add.w	r3, fp, #3
 8011214:	f000 bd3e 	b.w	8011c94 <_dtoa_r+0xb14>
 8011218:	e9dd 6700 	ldrd	r6, r7, [sp]
 801121c:	2200      	movs	r2, #0
 801121e:	2300      	movs	r3, #0
 8011220:	4630      	mov	r0, r6
 8011222:	4639      	mov	r1, r7
 8011224:	f7ef fc68 	bl	8000af8 <__aeabi_dcmpeq>
 8011228:	4681      	mov	r9, r0
 801122a:	b168      	cbz	r0, 8011248 <_dtoa_r+0xc8>
 801122c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801122e:	2301      	movs	r3, #1
 8011230:	6013      	str	r3, [r2, #0]
 8011232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011234:	2b00      	cmp	r3, #0
 8011236:	f000 8524 	beq.w	8011c82 <_dtoa_r+0xb02>
 801123a:	4b9a      	ldr	r3, [pc, #616]	; (80114a4 <_dtoa_r+0x324>)
 801123c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801123e:	f103 3bff 	add.w	fp, r3, #4294967295
 8011242:	6013      	str	r3, [r2, #0]
 8011244:	f000 bd28 	b.w	8011c98 <_dtoa_r+0xb18>
 8011248:	aa14      	add	r2, sp, #80	; 0x50
 801124a:	a915      	add	r1, sp, #84	; 0x54
 801124c:	ec47 6b10 	vmov	d0, r6, r7
 8011250:	4620      	mov	r0, r4
 8011252:	f001 fdeb 	bl	8012e2c <__d2b>
 8011256:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801125a:	9004      	str	r0, [sp, #16]
 801125c:	2d00      	cmp	r5, #0
 801125e:	d07c      	beq.n	801135a <_dtoa_r+0x1da>
 8011260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011264:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011268:	46b2      	mov	sl, r6
 801126a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801126e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011272:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011276:	2200      	movs	r2, #0
 8011278:	4b8b      	ldr	r3, [pc, #556]	; (80114a8 <_dtoa_r+0x328>)
 801127a:	4650      	mov	r0, sl
 801127c:	4659      	mov	r1, fp
 801127e:	f7ef f81b 	bl	80002b8 <__aeabi_dsub>
 8011282:	a381      	add	r3, pc, #516	; (adr r3, 8011488 <_dtoa_r+0x308>)
 8011284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011288:	f7ef f9ce 	bl	8000628 <__aeabi_dmul>
 801128c:	a380      	add	r3, pc, #512	; (adr r3, 8011490 <_dtoa_r+0x310>)
 801128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011292:	f7ef f813 	bl	80002bc <__adddf3>
 8011296:	4606      	mov	r6, r0
 8011298:	4628      	mov	r0, r5
 801129a:	460f      	mov	r7, r1
 801129c:	f7ef f95a 	bl	8000554 <__aeabi_i2d>
 80112a0:	a37d      	add	r3, pc, #500	; (adr r3, 8011498 <_dtoa_r+0x318>)
 80112a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a6:	f7ef f9bf 	bl	8000628 <__aeabi_dmul>
 80112aa:	4602      	mov	r2, r0
 80112ac:	460b      	mov	r3, r1
 80112ae:	4630      	mov	r0, r6
 80112b0:	4639      	mov	r1, r7
 80112b2:	f7ef f803 	bl	80002bc <__adddf3>
 80112b6:	4606      	mov	r6, r0
 80112b8:	460f      	mov	r7, r1
 80112ba:	f7ef fc65 	bl	8000b88 <__aeabi_d2iz>
 80112be:	2200      	movs	r2, #0
 80112c0:	4682      	mov	sl, r0
 80112c2:	2300      	movs	r3, #0
 80112c4:	4630      	mov	r0, r6
 80112c6:	4639      	mov	r1, r7
 80112c8:	f7ef fc20 	bl	8000b0c <__aeabi_dcmplt>
 80112cc:	b148      	cbz	r0, 80112e2 <_dtoa_r+0x162>
 80112ce:	4650      	mov	r0, sl
 80112d0:	f7ef f940 	bl	8000554 <__aeabi_i2d>
 80112d4:	4632      	mov	r2, r6
 80112d6:	463b      	mov	r3, r7
 80112d8:	f7ef fc0e 	bl	8000af8 <__aeabi_dcmpeq>
 80112dc:	b908      	cbnz	r0, 80112e2 <_dtoa_r+0x162>
 80112de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112e2:	f1ba 0f16 	cmp.w	sl, #22
 80112e6:	d859      	bhi.n	801139c <_dtoa_r+0x21c>
 80112e8:	4970      	ldr	r1, [pc, #448]	; (80114ac <_dtoa_r+0x32c>)
 80112ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80112ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112f6:	f7ef fc27 	bl	8000b48 <__aeabi_dcmpgt>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d050      	beq.n	80113a0 <_dtoa_r+0x220>
 80112fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011302:	2300      	movs	r3, #0
 8011304:	930f      	str	r3, [sp, #60]	; 0x3c
 8011306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011308:	1b5d      	subs	r5, r3, r5
 801130a:	f1b5 0801 	subs.w	r8, r5, #1
 801130e:	bf49      	itett	mi
 8011310:	f1c5 0301 	rsbmi	r3, r5, #1
 8011314:	2300      	movpl	r3, #0
 8011316:	9305      	strmi	r3, [sp, #20]
 8011318:	f04f 0800 	movmi.w	r8, #0
 801131c:	bf58      	it	pl
 801131e:	9305      	strpl	r3, [sp, #20]
 8011320:	f1ba 0f00 	cmp.w	sl, #0
 8011324:	db3e      	blt.n	80113a4 <_dtoa_r+0x224>
 8011326:	2300      	movs	r3, #0
 8011328:	44d0      	add	r8, sl
 801132a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801132e:	9307      	str	r3, [sp, #28]
 8011330:	9b06      	ldr	r3, [sp, #24]
 8011332:	2b09      	cmp	r3, #9
 8011334:	f200 8090 	bhi.w	8011458 <_dtoa_r+0x2d8>
 8011338:	2b05      	cmp	r3, #5
 801133a:	bfc4      	itt	gt
 801133c:	3b04      	subgt	r3, #4
 801133e:	9306      	strgt	r3, [sp, #24]
 8011340:	9b06      	ldr	r3, [sp, #24]
 8011342:	f1a3 0302 	sub.w	r3, r3, #2
 8011346:	bfcc      	ite	gt
 8011348:	2500      	movgt	r5, #0
 801134a:	2501      	movle	r5, #1
 801134c:	2b03      	cmp	r3, #3
 801134e:	f200 808f 	bhi.w	8011470 <_dtoa_r+0x2f0>
 8011352:	e8df f003 	tbb	[pc, r3]
 8011356:	7f7d      	.short	0x7f7d
 8011358:	7131      	.short	0x7131
 801135a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801135e:	441d      	add	r5, r3
 8011360:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011364:	2820      	cmp	r0, #32
 8011366:	dd13      	ble.n	8011390 <_dtoa_r+0x210>
 8011368:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801136c:	9b00      	ldr	r3, [sp, #0]
 801136e:	fa08 f800 	lsl.w	r8, r8, r0
 8011372:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011376:	fa23 f000 	lsr.w	r0, r3, r0
 801137a:	ea48 0000 	orr.w	r0, r8, r0
 801137e:	f7ef f8d9 	bl	8000534 <__aeabi_ui2d>
 8011382:	2301      	movs	r3, #1
 8011384:	4682      	mov	sl, r0
 8011386:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801138a:	3d01      	subs	r5, #1
 801138c:	9313      	str	r3, [sp, #76]	; 0x4c
 801138e:	e772      	b.n	8011276 <_dtoa_r+0xf6>
 8011390:	9b00      	ldr	r3, [sp, #0]
 8011392:	f1c0 0020 	rsb	r0, r0, #32
 8011396:	fa03 f000 	lsl.w	r0, r3, r0
 801139a:	e7f0      	b.n	801137e <_dtoa_r+0x1fe>
 801139c:	2301      	movs	r3, #1
 801139e:	e7b1      	b.n	8011304 <_dtoa_r+0x184>
 80113a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80113a2:	e7b0      	b.n	8011306 <_dtoa_r+0x186>
 80113a4:	9b05      	ldr	r3, [sp, #20]
 80113a6:	eba3 030a 	sub.w	r3, r3, sl
 80113aa:	9305      	str	r3, [sp, #20]
 80113ac:	f1ca 0300 	rsb	r3, sl, #0
 80113b0:	9307      	str	r3, [sp, #28]
 80113b2:	2300      	movs	r3, #0
 80113b4:	930e      	str	r3, [sp, #56]	; 0x38
 80113b6:	e7bb      	b.n	8011330 <_dtoa_r+0x1b0>
 80113b8:	2301      	movs	r3, #1
 80113ba:	930a      	str	r3, [sp, #40]	; 0x28
 80113bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113be:	2b00      	cmp	r3, #0
 80113c0:	dd59      	ble.n	8011476 <_dtoa_r+0x2f6>
 80113c2:	9302      	str	r3, [sp, #8]
 80113c4:	4699      	mov	r9, r3
 80113c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80113c8:	2200      	movs	r2, #0
 80113ca:	6072      	str	r2, [r6, #4]
 80113cc:	2204      	movs	r2, #4
 80113ce:	f102 0014 	add.w	r0, r2, #20
 80113d2:	4298      	cmp	r0, r3
 80113d4:	6871      	ldr	r1, [r6, #4]
 80113d6:	d953      	bls.n	8011480 <_dtoa_r+0x300>
 80113d8:	4620      	mov	r0, r4
 80113da:	f001 f9e6 	bl	80127aa <_Balloc>
 80113de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113e0:	6030      	str	r0, [r6, #0]
 80113e2:	f1b9 0f0e 	cmp.w	r9, #14
 80113e6:	f8d3 b000 	ldr.w	fp, [r3]
 80113ea:	f200 80e6 	bhi.w	80115ba <_dtoa_r+0x43a>
 80113ee:	2d00      	cmp	r5, #0
 80113f0:	f000 80e3 	beq.w	80115ba <_dtoa_r+0x43a>
 80113f4:	ed9d 7b00 	vldr	d7, [sp]
 80113f8:	f1ba 0f00 	cmp.w	sl, #0
 80113fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011400:	dd74      	ble.n	80114ec <_dtoa_r+0x36c>
 8011402:	4a2a      	ldr	r2, [pc, #168]	; (80114ac <_dtoa_r+0x32c>)
 8011404:	f00a 030f 	and.w	r3, sl, #15
 8011408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801140c:	ed93 7b00 	vldr	d7, [r3]
 8011410:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011414:	06f0      	lsls	r0, r6, #27
 8011416:	ed8d 7b08 	vstr	d7, [sp, #32]
 801141a:	d565      	bpl.n	80114e8 <_dtoa_r+0x368>
 801141c:	4b24      	ldr	r3, [pc, #144]	; (80114b0 <_dtoa_r+0x330>)
 801141e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011422:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011426:	f7ef fa29 	bl	800087c <__aeabi_ddiv>
 801142a:	e9cd 0100 	strd	r0, r1, [sp]
 801142e:	f006 060f 	and.w	r6, r6, #15
 8011432:	2503      	movs	r5, #3
 8011434:	4f1e      	ldr	r7, [pc, #120]	; (80114b0 <_dtoa_r+0x330>)
 8011436:	e04c      	b.n	80114d2 <_dtoa_r+0x352>
 8011438:	2301      	movs	r3, #1
 801143a:	930a      	str	r3, [sp, #40]	; 0x28
 801143c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801143e:	4453      	add	r3, sl
 8011440:	f103 0901 	add.w	r9, r3, #1
 8011444:	9302      	str	r3, [sp, #8]
 8011446:	464b      	mov	r3, r9
 8011448:	2b01      	cmp	r3, #1
 801144a:	bfb8      	it	lt
 801144c:	2301      	movlt	r3, #1
 801144e:	e7ba      	b.n	80113c6 <_dtoa_r+0x246>
 8011450:	2300      	movs	r3, #0
 8011452:	e7b2      	b.n	80113ba <_dtoa_r+0x23a>
 8011454:	2300      	movs	r3, #0
 8011456:	e7f0      	b.n	801143a <_dtoa_r+0x2ba>
 8011458:	2501      	movs	r5, #1
 801145a:	2300      	movs	r3, #0
 801145c:	9306      	str	r3, [sp, #24]
 801145e:	950a      	str	r5, [sp, #40]	; 0x28
 8011460:	f04f 33ff 	mov.w	r3, #4294967295
 8011464:	9302      	str	r3, [sp, #8]
 8011466:	4699      	mov	r9, r3
 8011468:	2200      	movs	r2, #0
 801146a:	2312      	movs	r3, #18
 801146c:	920b      	str	r2, [sp, #44]	; 0x2c
 801146e:	e7aa      	b.n	80113c6 <_dtoa_r+0x246>
 8011470:	2301      	movs	r3, #1
 8011472:	930a      	str	r3, [sp, #40]	; 0x28
 8011474:	e7f4      	b.n	8011460 <_dtoa_r+0x2e0>
 8011476:	2301      	movs	r3, #1
 8011478:	9302      	str	r3, [sp, #8]
 801147a:	4699      	mov	r9, r3
 801147c:	461a      	mov	r2, r3
 801147e:	e7f5      	b.n	801146c <_dtoa_r+0x2ec>
 8011480:	3101      	adds	r1, #1
 8011482:	6071      	str	r1, [r6, #4]
 8011484:	0052      	lsls	r2, r2, #1
 8011486:	e7a2      	b.n	80113ce <_dtoa_r+0x24e>
 8011488:	636f4361 	.word	0x636f4361
 801148c:	3fd287a7 	.word	0x3fd287a7
 8011490:	8b60c8b3 	.word	0x8b60c8b3
 8011494:	3fc68a28 	.word	0x3fc68a28
 8011498:	509f79fb 	.word	0x509f79fb
 801149c:	3fd34413 	.word	0x3fd34413
 80114a0:	7ff00000 	.word	0x7ff00000
 80114a4:	08014734 	.word	0x08014734
 80114a8:	3ff80000 	.word	0x3ff80000
 80114ac:	08014638 	.word	0x08014638
 80114b0:	08014610 	.word	0x08014610
 80114b4:	08014599 	.word	0x08014599
 80114b8:	07f1      	lsls	r1, r6, #31
 80114ba:	d508      	bpl.n	80114ce <_dtoa_r+0x34e>
 80114bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80114c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114c4:	f7ef f8b0 	bl	8000628 <__aeabi_dmul>
 80114c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80114cc:	3501      	adds	r5, #1
 80114ce:	1076      	asrs	r6, r6, #1
 80114d0:	3708      	adds	r7, #8
 80114d2:	2e00      	cmp	r6, #0
 80114d4:	d1f0      	bne.n	80114b8 <_dtoa_r+0x338>
 80114d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80114da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114de:	f7ef f9cd 	bl	800087c <__aeabi_ddiv>
 80114e2:	e9cd 0100 	strd	r0, r1, [sp]
 80114e6:	e01a      	b.n	801151e <_dtoa_r+0x39e>
 80114e8:	2502      	movs	r5, #2
 80114ea:	e7a3      	b.n	8011434 <_dtoa_r+0x2b4>
 80114ec:	f000 80a0 	beq.w	8011630 <_dtoa_r+0x4b0>
 80114f0:	f1ca 0600 	rsb	r6, sl, #0
 80114f4:	4b9f      	ldr	r3, [pc, #636]	; (8011774 <_dtoa_r+0x5f4>)
 80114f6:	4fa0      	ldr	r7, [pc, #640]	; (8011778 <_dtoa_r+0x5f8>)
 80114f8:	f006 020f 	and.w	r2, r6, #15
 80114fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011504:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011508:	f7ef f88e 	bl	8000628 <__aeabi_dmul>
 801150c:	e9cd 0100 	strd	r0, r1, [sp]
 8011510:	1136      	asrs	r6, r6, #4
 8011512:	2300      	movs	r3, #0
 8011514:	2502      	movs	r5, #2
 8011516:	2e00      	cmp	r6, #0
 8011518:	d17f      	bne.n	801161a <_dtoa_r+0x49a>
 801151a:	2b00      	cmp	r3, #0
 801151c:	d1e1      	bne.n	80114e2 <_dtoa_r+0x362>
 801151e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011520:	2b00      	cmp	r3, #0
 8011522:	f000 8087 	beq.w	8011634 <_dtoa_r+0x4b4>
 8011526:	e9dd 6700 	ldrd	r6, r7, [sp]
 801152a:	2200      	movs	r2, #0
 801152c:	4b93      	ldr	r3, [pc, #588]	; (801177c <_dtoa_r+0x5fc>)
 801152e:	4630      	mov	r0, r6
 8011530:	4639      	mov	r1, r7
 8011532:	f7ef faeb 	bl	8000b0c <__aeabi_dcmplt>
 8011536:	2800      	cmp	r0, #0
 8011538:	d07c      	beq.n	8011634 <_dtoa_r+0x4b4>
 801153a:	f1b9 0f00 	cmp.w	r9, #0
 801153e:	d079      	beq.n	8011634 <_dtoa_r+0x4b4>
 8011540:	9b02      	ldr	r3, [sp, #8]
 8011542:	2b00      	cmp	r3, #0
 8011544:	dd35      	ble.n	80115b2 <_dtoa_r+0x432>
 8011546:	f10a 33ff 	add.w	r3, sl, #4294967295
 801154a:	9308      	str	r3, [sp, #32]
 801154c:	4639      	mov	r1, r7
 801154e:	2200      	movs	r2, #0
 8011550:	4b8b      	ldr	r3, [pc, #556]	; (8011780 <_dtoa_r+0x600>)
 8011552:	4630      	mov	r0, r6
 8011554:	f7ef f868 	bl	8000628 <__aeabi_dmul>
 8011558:	e9cd 0100 	strd	r0, r1, [sp]
 801155c:	9f02      	ldr	r7, [sp, #8]
 801155e:	3501      	adds	r5, #1
 8011560:	4628      	mov	r0, r5
 8011562:	f7ee fff7 	bl	8000554 <__aeabi_i2d>
 8011566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801156a:	f7ef f85d 	bl	8000628 <__aeabi_dmul>
 801156e:	2200      	movs	r2, #0
 8011570:	4b84      	ldr	r3, [pc, #528]	; (8011784 <_dtoa_r+0x604>)
 8011572:	f7ee fea3 	bl	80002bc <__adddf3>
 8011576:	4605      	mov	r5, r0
 8011578:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801157c:	2f00      	cmp	r7, #0
 801157e:	d15d      	bne.n	801163c <_dtoa_r+0x4bc>
 8011580:	2200      	movs	r2, #0
 8011582:	4b81      	ldr	r3, [pc, #516]	; (8011788 <_dtoa_r+0x608>)
 8011584:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011588:	f7ee fe96 	bl	80002b8 <__aeabi_dsub>
 801158c:	462a      	mov	r2, r5
 801158e:	4633      	mov	r3, r6
 8011590:	e9cd 0100 	strd	r0, r1, [sp]
 8011594:	f7ef fad8 	bl	8000b48 <__aeabi_dcmpgt>
 8011598:	2800      	cmp	r0, #0
 801159a:	f040 8288 	bne.w	8011aae <_dtoa_r+0x92e>
 801159e:	462a      	mov	r2, r5
 80115a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80115a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115a8:	f7ef fab0 	bl	8000b0c <__aeabi_dcmplt>
 80115ac:	2800      	cmp	r0, #0
 80115ae:	f040 827c 	bne.w	8011aaa <_dtoa_r+0x92a>
 80115b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80115b6:	e9cd 2300 	strd	r2, r3, [sp]
 80115ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f2c0 8150 	blt.w	8011862 <_dtoa_r+0x6e2>
 80115c2:	f1ba 0f0e 	cmp.w	sl, #14
 80115c6:	f300 814c 	bgt.w	8011862 <_dtoa_r+0x6e2>
 80115ca:	4b6a      	ldr	r3, [pc, #424]	; (8011774 <_dtoa_r+0x5f4>)
 80115cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80115d0:	ed93 7b00 	vldr	d7, [r3]
 80115d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80115dc:	f280 80d8 	bge.w	8011790 <_dtoa_r+0x610>
 80115e0:	f1b9 0f00 	cmp.w	r9, #0
 80115e4:	f300 80d4 	bgt.w	8011790 <_dtoa_r+0x610>
 80115e8:	f040 825e 	bne.w	8011aa8 <_dtoa_r+0x928>
 80115ec:	2200      	movs	r2, #0
 80115ee:	4b66      	ldr	r3, [pc, #408]	; (8011788 <_dtoa_r+0x608>)
 80115f0:	ec51 0b17 	vmov	r0, r1, d7
 80115f4:	f7ef f818 	bl	8000628 <__aeabi_dmul>
 80115f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115fc:	f7ef fa9a 	bl	8000b34 <__aeabi_dcmpge>
 8011600:	464f      	mov	r7, r9
 8011602:	464e      	mov	r6, r9
 8011604:	2800      	cmp	r0, #0
 8011606:	f040 8234 	bne.w	8011a72 <_dtoa_r+0x8f2>
 801160a:	2331      	movs	r3, #49	; 0x31
 801160c:	f10b 0501 	add.w	r5, fp, #1
 8011610:	f88b 3000 	strb.w	r3, [fp]
 8011614:	f10a 0a01 	add.w	sl, sl, #1
 8011618:	e22f      	b.n	8011a7a <_dtoa_r+0x8fa>
 801161a:	07f2      	lsls	r2, r6, #31
 801161c:	d505      	bpl.n	801162a <_dtoa_r+0x4aa>
 801161e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011622:	f7ef f801 	bl	8000628 <__aeabi_dmul>
 8011626:	3501      	adds	r5, #1
 8011628:	2301      	movs	r3, #1
 801162a:	1076      	asrs	r6, r6, #1
 801162c:	3708      	adds	r7, #8
 801162e:	e772      	b.n	8011516 <_dtoa_r+0x396>
 8011630:	2502      	movs	r5, #2
 8011632:	e774      	b.n	801151e <_dtoa_r+0x39e>
 8011634:	f8cd a020 	str.w	sl, [sp, #32]
 8011638:	464f      	mov	r7, r9
 801163a:	e791      	b.n	8011560 <_dtoa_r+0x3e0>
 801163c:	4b4d      	ldr	r3, [pc, #308]	; (8011774 <_dtoa_r+0x5f4>)
 801163e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011642:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011648:	2b00      	cmp	r3, #0
 801164a:	d047      	beq.n	80116dc <_dtoa_r+0x55c>
 801164c:	4602      	mov	r2, r0
 801164e:	460b      	mov	r3, r1
 8011650:	2000      	movs	r0, #0
 8011652:	494e      	ldr	r1, [pc, #312]	; (801178c <_dtoa_r+0x60c>)
 8011654:	f7ef f912 	bl	800087c <__aeabi_ddiv>
 8011658:	462a      	mov	r2, r5
 801165a:	4633      	mov	r3, r6
 801165c:	f7ee fe2c 	bl	80002b8 <__aeabi_dsub>
 8011660:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011664:	465d      	mov	r5, fp
 8011666:	e9dd 0100 	ldrd	r0, r1, [sp]
 801166a:	f7ef fa8d 	bl	8000b88 <__aeabi_d2iz>
 801166e:	4606      	mov	r6, r0
 8011670:	f7ee ff70 	bl	8000554 <__aeabi_i2d>
 8011674:	4602      	mov	r2, r0
 8011676:	460b      	mov	r3, r1
 8011678:	e9dd 0100 	ldrd	r0, r1, [sp]
 801167c:	f7ee fe1c 	bl	80002b8 <__aeabi_dsub>
 8011680:	3630      	adds	r6, #48	; 0x30
 8011682:	f805 6b01 	strb.w	r6, [r5], #1
 8011686:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801168a:	e9cd 0100 	strd	r0, r1, [sp]
 801168e:	f7ef fa3d 	bl	8000b0c <__aeabi_dcmplt>
 8011692:	2800      	cmp	r0, #0
 8011694:	d163      	bne.n	801175e <_dtoa_r+0x5de>
 8011696:	e9dd 2300 	ldrd	r2, r3, [sp]
 801169a:	2000      	movs	r0, #0
 801169c:	4937      	ldr	r1, [pc, #220]	; (801177c <_dtoa_r+0x5fc>)
 801169e:	f7ee fe0b 	bl	80002b8 <__aeabi_dsub>
 80116a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80116a6:	f7ef fa31 	bl	8000b0c <__aeabi_dcmplt>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	f040 80b7 	bne.w	801181e <_dtoa_r+0x69e>
 80116b0:	eba5 030b 	sub.w	r3, r5, fp
 80116b4:	429f      	cmp	r7, r3
 80116b6:	f77f af7c 	ble.w	80115b2 <_dtoa_r+0x432>
 80116ba:	2200      	movs	r2, #0
 80116bc:	4b30      	ldr	r3, [pc, #192]	; (8011780 <_dtoa_r+0x600>)
 80116be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80116c2:	f7ee ffb1 	bl	8000628 <__aeabi_dmul>
 80116c6:	2200      	movs	r2, #0
 80116c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80116cc:	4b2c      	ldr	r3, [pc, #176]	; (8011780 <_dtoa_r+0x600>)
 80116ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116d2:	f7ee ffa9 	bl	8000628 <__aeabi_dmul>
 80116d6:	e9cd 0100 	strd	r0, r1, [sp]
 80116da:	e7c4      	b.n	8011666 <_dtoa_r+0x4e6>
 80116dc:	462a      	mov	r2, r5
 80116de:	4633      	mov	r3, r6
 80116e0:	f7ee ffa2 	bl	8000628 <__aeabi_dmul>
 80116e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80116e8:	eb0b 0507 	add.w	r5, fp, r7
 80116ec:	465e      	mov	r6, fp
 80116ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116f2:	f7ef fa49 	bl	8000b88 <__aeabi_d2iz>
 80116f6:	4607      	mov	r7, r0
 80116f8:	f7ee ff2c 	bl	8000554 <__aeabi_i2d>
 80116fc:	3730      	adds	r7, #48	; 0x30
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011706:	f7ee fdd7 	bl	80002b8 <__aeabi_dsub>
 801170a:	f806 7b01 	strb.w	r7, [r6], #1
 801170e:	42ae      	cmp	r6, r5
 8011710:	e9cd 0100 	strd	r0, r1, [sp]
 8011714:	f04f 0200 	mov.w	r2, #0
 8011718:	d126      	bne.n	8011768 <_dtoa_r+0x5e8>
 801171a:	4b1c      	ldr	r3, [pc, #112]	; (801178c <_dtoa_r+0x60c>)
 801171c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011720:	f7ee fdcc 	bl	80002bc <__adddf3>
 8011724:	4602      	mov	r2, r0
 8011726:	460b      	mov	r3, r1
 8011728:	e9dd 0100 	ldrd	r0, r1, [sp]
 801172c:	f7ef fa0c 	bl	8000b48 <__aeabi_dcmpgt>
 8011730:	2800      	cmp	r0, #0
 8011732:	d174      	bne.n	801181e <_dtoa_r+0x69e>
 8011734:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011738:	2000      	movs	r0, #0
 801173a:	4914      	ldr	r1, [pc, #80]	; (801178c <_dtoa_r+0x60c>)
 801173c:	f7ee fdbc 	bl	80002b8 <__aeabi_dsub>
 8011740:	4602      	mov	r2, r0
 8011742:	460b      	mov	r3, r1
 8011744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011748:	f7ef f9e0 	bl	8000b0c <__aeabi_dcmplt>
 801174c:	2800      	cmp	r0, #0
 801174e:	f43f af30 	beq.w	80115b2 <_dtoa_r+0x432>
 8011752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011756:	2b30      	cmp	r3, #48	; 0x30
 8011758:	f105 32ff 	add.w	r2, r5, #4294967295
 801175c:	d002      	beq.n	8011764 <_dtoa_r+0x5e4>
 801175e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011762:	e04a      	b.n	80117fa <_dtoa_r+0x67a>
 8011764:	4615      	mov	r5, r2
 8011766:	e7f4      	b.n	8011752 <_dtoa_r+0x5d2>
 8011768:	4b05      	ldr	r3, [pc, #20]	; (8011780 <_dtoa_r+0x600>)
 801176a:	f7ee ff5d 	bl	8000628 <__aeabi_dmul>
 801176e:	e9cd 0100 	strd	r0, r1, [sp]
 8011772:	e7bc      	b.n	80116ee <_dtoa_r+0x56e>
 8011774:	08014638 	.word	0x08014638
 8011778:	08014610 	.word	0x08014610
 801177c:	3ff00000 	.word	0x3ff00000
 8011780:	40240000 	.word	0x40240000
 8011784:	401c0000 	.word	0x401c0000
 8011788:	40140000 	.word	0x40140000
 801178c:	3fe00000 	.word	0x3fe00000
 8011790:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011794:	465d      	mov	r5, fp
 8011796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801179a:	4630      	mov	r0, r6
 801179c:	4639      	mov	r1, r7
 801179e:	f7ef f86d 	bl	800087c <__aeabi_ddiv>
 80117a2:	f7ef f9f1 	bl	8000b88 <__aeabi_d2iz>
 80117a6:	4680      	mov	r8, r0
 80117a8:	f7ee fed4 	bl	8000554 <__aeabi_i2d>
 80117ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117b0:	f7ee ff3a 	bl	8000628 <__aeabi_dmul>
 80117b4:	4602      	mov	r2, r0
 80117b6:	460b      	mov	r3, r1
 80117b8:	4630      	mov	r0, r6
 80117ba:	4639      	mov	r1, r7
 80117bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80117c0:	f7ee fd7a 	bl	80002b8 <__aeabi_dsub>
 80117c4:	f805 6b01 	strb.w	r6, [r5], #1
 80117c8:	eba5 060b 	sub.w	r6, r5, fp
 80117cc:	45b1      	cmp	r9, r6
 80117ce:	4602      	mov	r2, r0
 80117d0:	460b      	mov	r3, r1
 80117d2:	d139      	bne.n	8011848 <_dtoa_r+0x6c8>
 80117d4:	f7ee fd72 	bl	80002bc <__adddf3>
 80117d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117dc:	4606      	mov	r6, r0
 80117de:	460f      	mov	r7, r1
 80117e0:	f7ef f9b2 	bl	8000b48 <__aeabi_dcmpgt>
 80117e4:	b9c8      	cbnz	r0, 801181a <_dtoa_r+0x69a>
 80117e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117ea:	4630      	mov	r0, r6
 80117ec:	4639      	mov	r1, r7
 80117ee:	f7ef f983 	bl	8000af8 <__aeabi_dcmpeq>
 80117f2:	b110      	cbz	r0, 80117fa <_dtoa_r+0x67a>
 80117f4:	f018 0f01 	tst.w	r8, #1
 80117f8:	d10f      	bne.n	801181a <_dtoa_r+0x69a>
 80117fa:	9904      	ldr	r1, [sp, #16]
 80117fc:	4620      	mov	r0, r4
 80117fe:	f001 f808 	bl	8012812 <_Bfree>
 8011802:	2300      	movs	r3, #0
 8011804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011806:	702b      	strb	r3, [r5, #0]
 8011808:	f10a 0301 	add.w	r3, sl, #1
 801180c:	6013      	str	r3, [r2, #0]
 801180e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011810:	2b00      	cmp	r3, #0
 8011812:	f000 8241 	beq.w	8011c98 <_dtoa_r+0xb18>
 8011816:	601d      	str	r5, [r3, #0]
 8011818:	e23e      	b.n	8011c98 <_dtoa_r+0xb18>
 801181a:	f8cd a020 	str.w	sl, [sp, #32]
 801181e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011822:	2a39      	cmp	r2, #57	; 0x39
 8011824:	f105 33ff 	add.w	r3, r5, #4294967295
 8011828:	d108      	bne.n	801183c <_dtoa_r+0x6bc>
 801182a:	459b      	cmp	fp, r3
 801182c:	d10a      	bne.n	8011844 <_dtoa_r+0x6c4>
 801182e:	9b08      	ldr	r3, [sp, #32]
 8011830:	3301      	adds	r3, #1
 8011832:	9308      	str	r3, [sp, #32]
 8011834:	2330      	movs	r3, #48	; 0x30
 8011836:	f88b 3000 	strb.w	r3, [fp]
 801183a:	465b      	mov	r3, fp
 801183c:	781a      	ldrb	r2, [r3, #0]
 801183e:	3201      	adds	r2, #1
 8011840:	701a      	strb	r2, [r3, #0]
 8011842:	e78c      	b.n	801175e <_dtoa_r+0x5de>
 8011844:	461d      	mov	r5, r3
 8011846:	e7ea      	b.n	801181e <_dtoa_r+0x69e>
 8011848:	2200      	movs	r2, #0
 801184a:	4b9b      	ldr	r3, [pc, #620]	; (8011ab8 <_dtoa_r+0x938>)
 801184c:	f7ee feec 	bl	8000628 <__aeabi_dmul>
 8011850:	2200      	movs	r2, #0
 8011852:	2300      	movs	r3, #0
 8011854:	4606      	mov	r6, r0
 8011856:	460f      	mov	r7, r1
 8011858:	f7ef f94e 	bl	8000af8 <__aeabi_dcmpeq>
 801185c:	2800      	cmp	r0, #0
 801185e:	d09a      	beq.n	8011796 <_dtoa_r+0x616>
 8011860:	e7cb      	b.n	80117fa <_dtoa_r+0x67a>
 8011862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011864:	2a00      	cmp	r2, #0
 8011866:	f000 808b 	beq.w	8011980 <_dtoa_r+0x800>
 801186a:	9a06      	ldr	r2, [sp, #24]
 801186c:	2a01      	cmp	r2, #1
 801186e:	dc6e      	bgt.n	801194e <_dtoa_r+0x7ce>
 8011870:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011872:	2a00      	cmp	r2, #0
 8011874:	d067      	beq.n	8011946 <_dtoa_r+0x7c6>
 8011876:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801187a:	9f07      	ldr	r7, [sp, #28]
 801187c:	9d05      	ldr	r5, [sp, #20]
 801187e:	9a05      	ldr	r2, [sp, #20]
 8011880:	2101      	movs	r1, #1
 8011882:	441a      	add	r2, r3
 8011884:	4620      	mov	r0, r4
 8011886:	9205      	str	r2, [sp, #20]
 8011888:	4498      	add	r8, r3
 801188a:	f001 f8a0 	bl	80129ce <__i2b>
 801188e:	4606      	mov	r6, r0
 8011890:	2d00      	cmp	r5, #0
 8011892:	dd0c      	ble.n	80118ae <_dtoa_r+0x72e>
 8011894:	f1b8 0f00 	cmp.w	r8, #0
 8011898:	dd09      	ble.n	80118ae <_dtoa_r+0x72e>
 801189a:	4545      	cmp	r5, r8
 801189c:	9a05      	ldr	r2, [sp, #20]
 801189e:	462b      	mov	r3, r5
 80118a0:	bfa8      	it	ge
 80118a2:	4643      	movge	r3, r8
 80118a4:	1ad2      	subs	r2, r2, r3
 80118a6:	9205      	str	r2, [sp, #20]
 80118a8:	1aed      	subs	r5, r5, r3
 80118aa:	eba8 0803 	sub.w	r8, r8, r3
 80118ae:	9b07      	ldr	r3, [sp, #28]
 80118b0:	b1eb      	cbz	r3, 80118ee <_dtoa_r+0x76e>
 80118b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d067      	beq.n	8011988 <_dtoa_r+0x808>
 80118b8:	b18f      	cbz	r7, 80118de <_dtoa_r+0x75e>
 80118ba:	4631      	mov	r1, r6
 80118bc:	463a      	mov	r2, r7
 80118be:	4620      	mov	r0, r4
 80118c0:	f001 f924 	bl	8012b0c <__pow5mult>
 80118c4:	9a04      	ldr	r2, [sp, #16]
 80118c6:	4601      	mov	r1, r0
 80118c8:	4606      	mov	r6, r0
 80118ca:	4620      	mov	r0, r4
 80118cc:	f001 f888 	bl	80129e0 <__multiply>
 80118d0:	9904      	ldr	r1, [sp, #16]
 80118d2:	9008      	str	r0, [sp, #32]
 80118d4:	4620      	mov	r0, r4
 80118d6:	f000 ff9c 	bl	8012812 <_Bfree>
 80118da:	9b08      	ldr	r3, [sp, #32]
 80118dc:	9304      	str	r3, [sp, #16]
 80118de:	9b07      	ldr	r3, [sp, #28]
 80118e0:	1bda      	subs	r2, r3, r7
 80118e2:	d004      	beq.n	80118ee <_dtoa_r+0x76e>
 80118e4:	9904      	ldr	r1, [sp, #16]
 80118e6:	4620      	mov	r0, r4
 80118e8:	f001 f910 	bl	8012b0c <__pow5mult>
 80118ec:	9004      	str	r0, [sp, #16]
 80118ee:	2101      	movs	r1, #1
 80118f0:	4620      	mov	r0, r4
 80118f2:	f001 f86c 	bl	80129ce <__i2b>
 80118f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118f8:	4607      	mov	r7, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 81d0 	beq.w	8011ca0 <_dtoa_r+0xb20>
 8011900:	461a      	mov	r2, r3
 8011902:	4601      	mov	r1, r0
 8011904:	4620      	mov	r0, r4
 8011906:	f001 f901 	bl	8012b0c <__pow5mult>
 801190a:	9b06      	ldr	r3, [sp, #24]
 801190c:	2b01      	cmp	r3, #1
 801190e:	4607      	mov	r7, r0
 8011910:	dc40      	bgt.n	8011994 <_dtoa_r+0x814>
 8011912:	9b00      	ldr	r3, [sp, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d139      	bne.n	801198c <_dtoa_r+0x80c>
 8011918:	9b01      	ldr	r3, [sp, #4]
 801191a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801191e:	2b00      	cmp	r3, #0
 8011920:	d136      	bne.n	8011990 <_dtoa_r+0x810>
 8011922:	9b01      	ldr	r3, [sp, #4]
 8011924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011928:	0d1b      	lsrs	r3, r3, #20
 801192a:	051b      	lsls	r3, r3, #20
 801192c:	b12b      	cbz	r3, 801193a <_dtoa_r+0x7ba>
 801192e:	9b05      	ldr	r3, [sp, #20]
 8011930:	3301      	adds	r3, #1
 8011932:	9305      	str	r3, [sp, #20]
 8011934:	f108 0801 	add.w	r8, r8, #1
 8011938:	2301      	movs	r3, #1
 801193a:	9307      	str	r3, [sp, #28]
 801193c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801193e:	2b00      	cmp	r3, #0
 8011940:	d12a      	bne.n	8011998 <_dtoa_r+0x818>
 8011942:	2001      	movs	r0, #1
 8011944:	e030      	b.n	80119a8 <_dtoa_r+0x828>
 8011946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011948:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801194c:	e795      	b.n	801187a <_dtoa_r+0x6fa>
 801194e:	9b07      	ldr	r3, [sp, #28]
 8011950:	f109 37ff 	add.w	r7, r9, #4294967295
 8011954:	42bb      	cmp	r3, r7
 8011956:	bfbf      	itttt	lt
 8011958:	9b07      	ldrlt	r3, [sp, #28]
 801195a:	9707      	strlt	r7, [sp, #28]
 801195c:	1afa      	sublt	r2, r7, r3
 801195e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011960:	bfbb      	ittet	lt
 8011962:	189b      	addlt	r3, r3, r2
 8011964:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011966:	1bdf      	subge	r7, r3, r7
 8011968:	2700      	movlt	r7, #0
 801196a:	f1b9 0f00 	cmp.w	r9, #0
 801196e:	bfb5      	itete	lt
 8011970:	9b05      	ldrlt	r3, [sp, #20]
 8011972:	9d05      	ldrge	r5, [sp, #20]
 8011974:	eba3 0509 	sublt.w	r5, r3, r9
 8011978:	464b      	movge	r3, r9
 801197a:	bfb8      	it	lt
 801197c:	2300      	movlt	r3, #0
 801197e:	e77e      	b.n	801187e <_dtoa_r+0x6fe>
 8011980:	9f07      	ldr	r7, [sp, #28]
 8011982:	9d05      	ldr	r5, [sp, #20]
 8011984:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011986:	e783      	b.n	8011890 <_dtoa_r+0x710>
 8011988:	9a07      	ldr	r2, [sp, #28]
 801198a:	e7ab      	b.n	80118e4 <_dtoa_r+0x764>
 801198c:	2300      	movs	r3, #0
 801198e:	e7d4      	b.n	801193a <_dtoa_r+0x7ba>
 8011990:	9b00      	ldr	r3, [sp, #0]
 8011992:	e7d2      	b.n	801193a <_dtoa_r+0x7ba>
 8011994:	2300      	movs	r3, #0
 8011996:	9307      	str	r3, [sp, #28]
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801199e:	6918      	ldr	r0, [r3, #16]
 80119a0:	f000 ffc7 	bl	8012932 <__hi0bits>
 80119a4:	f1c0 0020 	rsb	r0, r0, #32
 80119a8:	4440      	add	r0, r8
 80119aa:	f010 001f 	ands.w	r0, r0, #31
 80119ae:	d047      	beq.n	8011a40 <_dtoa_r+0x8c0>
 80119b0:	f1c0 0320 	rsb	r3, r0, #32
 80119b4:	2b04      	cmp	r3, #4
 80119b6:	dd3b      	ble.n	8011a30 <_dtoa_r+0x8b0>
 80119b8:	9b05      	ldr	r3, [sp, #20]
 80119ba:	f1c0 001c 	rsb	r0, r0, #28
 80119be:	4403      	add	r3, r0
 80119c0:	9305      	str	r3, [sp, #20]
 80119c2:	4405      	add	r5, r0
 80119c4:	4480      	add	r8, r0
 80119c6:	9b05      	ldr	r3, [sp, #20]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	dd05      	ble.n	80119d8 <_dtoa_r+0x858>
 80119cc:	461a      	mov	r2, r3
 80119ce:	9904      	ldr	r1, [sp, #16]
 80119d0:	4620      	mov	r0, r4
 80119d2:	f001 f8e9 	bl	8012ba8 <__lshift>
 80119d6:	9004      	str	r0, [sp, #16]
 80119d8:	f1b8 0f00 	cmp.w	r8, #0
 80119dc:	dd05      	ble.n	80119ea <_dtoa_r+0x86a>
 80119de:	4639      	mov	r1, r7
 80119e0:	4642      	mov	r2, r8
 80119e2:	4620      	mov	r0, r4
 80119e4:	f001 f8e0 	bl	8012ba8 <__lshift>
 80119e8:	4607      	mov	r7, r0
 80119ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119ec:	b353      	cbz	r3, 8011a44 <_dtoa_r+0x8c4>
 80119ee:	4639      	mov	r1, r7
 80119f0:	9804      	ldr	r0, [sp, #16]
 80119f2:	f001 f92d 	bl	8012c50 <__mcmp>
 80119f6:	2800      	cmp	r0, #0
 80119f8:	da24      	bge.n	8011a44 <_dtoa_r+0x8c4>
 80119fa:	2300      	movs	r3, #0
 80119fc:	220a      	movs	r2, #10
 80119fe:	9904      	ldr	r1, [sp, #16]
 8011a00:	4620      	mov	r0, r4
 8011a02:	f000 ff1d 	bl	8012840 <__multadd>
 8011a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a08:	9004      	str	r0, [sp, #16]
 8011a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f000 814d 	beq.w	8011cae <_dtoa_r+0xb2e>
 8011a14:	2300      	movs	r3, #0
 8011a16:	4631      	mov	r1, r6
 8011a18:	220a      	movs	r2, #10
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	f000 ff10 	bl	8012840 <__multadd>
 8011a20:	9b02      	ldr	r3, [sp, #8]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	4606      	mov	r6, r0
 8011a26:	dc4f      	bgt.n	8011ac8 <_dtoa_r+0x948>
 8011a28:	9b06      	ldr	r3, [sp, #24]
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	dd4c      	ble.n	8011ac8 <_dtoa_r+0x948>
 8011a2e:	e011      	b.n	8011a54 <_dtoa_r+0x8d4>
 8011a30:	d0c9      	beq.n	80119c6 <_dtoa_r+0x846>
 8011a32:	9a05      	ldr	r2, [sp, #20]
 8011a34:	331c      	adds	r3, #28
 8011a36:	441a      	add	r2, r3
 8011a38:	9205      	str	r2, [sp, #20]
 8011a3a:	441d      	add	r5, r3
 8011a3c:	4498      	add	r8, r3
 8011a3e:	e7c2      	b.n	80119c6 <_dtoa_r+0x846>
 8011a40:	4603      	mov	r3, r0
 8011a42:	e7f6      	b.n	8011a32 <_dtoa_r+0x8b2>
 8011a44:	f1b9 0f00 	cmp.w	r9, #0
 8011a48:	dc38      	bgt.n	8011abc <_dtoa_r+0x93c>
 8011a4a:	9b06      	ldr	r3, [sp, #24]
 8011a4c:	2b02      	cmp	r3, #2
 8011a4e:	dd35      	ble.n	8011abc <_dtoa_r+0x93c>
 8011a50:	f8cd 9008 	str.w	r9, [sp, #8]
 8011a54:	9b02      	ldr	r3, [sp, #8]
 8011a56:	b963      	cbnz	r3, 8011a72 <_dtoa_r+0x8f2>
 8011a58:	4639      	mov	r1, r7
 8011a5a:	2205      	movs	r2, #5
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f000 feef 	bl	8012840 <__multadd>
 8011a62:	4601      	mov	r1, r0
 8011a64:	4607      	mov	r7, r0
 8011a66:	9804      	ldr	r0, [sp, #16]
 8011a68:	f001 f8f2 	bl	8012c50 <__mcmp>
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	f73f adcc 	bgt.w	801160a <_dtoa_r+0x48a>
 8011a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a74:	465d      	mov	r5, fp
 8011a76:	ea6f 0a03 	mvn.w	sl, r3
 8011a7a:	f04f 0900 	mov.w	r9, #0
 8011a7e:	4639      	mov	r1, r7
 8011a80:	4620      	mov	r0, r4
 8011a82:	f000 fec6 	bl	8012812 <_Bfree>
 8011a86:	2e00      	cmp	r6, #0
 8011a88:	f43f aeb7 	beq.w	80117fa <_dtoa_r+0x67a>
 8011a8c:	f1b9 0f00 	cmp.w	r9, #0
 8011a90:	d005      	beq.n	8011a9e <_dtoa_r+0x91e>
 8011a92:	45b1      	cmp	r9, r6
 8011a94:	d003      	beq.n	8011a9e <_dtoa_r+0x91e>
 8011a96:	4649      	mov	r1, r9
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f000 feba 	bl	8012812 <_Bfree>
 8011a9e:	4631      	mov	r1, r6
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f000 feb6 	bl	8012812 <_Bfree>
 8011aa6:	e6a8      	b.n	80117fa <_dtoa_r+0x67a>
 8011aa8:	2700      	movs	r7, #0
 8011aaa:	463e      	mov	r6, r7
 8011aac:	e7e1      	b.n	8011a72 <_dtoa_r+0x8f2>
 8011aae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011ab2:	463e      	mov	r6, r7
 8011ab4:	e5a9      	b.n	801160a <_dtoa_r+0x48a>
 8011ab6:	bf00      	nop
 8011ab8:	40240000 	.word	0x40240000
 8011abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011abe:	f8cd 9008 	str.w	r9, [sp, #8]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	f000 80fa 	beq.w	8011cbc <_dtoa_r+0xb3c>
 8011ac8:	2d00      	cmp	r5, #0
 8011aca:	dd05      	ble.n	8011ad8 <_dtoa_r+0x958>
 8011acc:	4631      	mov	r1, r6
 8011ace:	462a      	mov	r2, r5
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f001 f869 	bl	8012ba8 <__lshift>
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	9b07      	ldr	r3, [sp, #28]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d04c      	beq.n	8011b78 <_dtoa_r+0x9f8>
 8011ade:	6871      	ldr	r1, [r6, #4]
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f000 fe62 	bl	80127aa <_Balloc>
 8011ae6:	6932      	ldr	r2, [r6, #16]
 8011ae8:	3202      	adds	r2, #2
 8011aea:	4605      	mov	r5, r0
 8011aec:	0092      	lsls	r2, r2, #2
 8011aee:	f106 010c 	add.w	r1, r6, #12
 8011af2:	300c      	adds	r0, #12
 8011af4:	f000 fe4e 	bl	8012794 <memcpy>
 8011af8:	2201      	movs	r2, #1
 8011afa:	4629      	mov	r1, r5
 8011afc:	4620      	mov	r0, r4
 8011afe:	f001 f853 	bl	8012ba8 <__lshift>
 8011b02:	9b00      	ldr	r3, [sp, #0]
 8011b04:	f8cd b014 	str.w	fp, [sp, #20]
 8011b08:	f003 0301 	and.w	r3, r3, #1
 8011b0c:	46b1      	mov	r9, r6
 8011b0e:	9307      	str	r3, [sp, #28]
 8011b10:	4606      	mov	r6, r0
 8011b12:	4639      	mov	r1, r7
 8011b14:	9804      	ldr	r0, [sp, #16]
 8011b16:	f7ff faa7 	bl	8011068 <quorem>
 8011b1a:	4649      	mov	r1, r9
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011b22:	9804      	ldr	r0, [sp, #16]
 8011b24:	f001 f894 	bl	8012c50 <__mcmp>
 8011b28:	4632      	mov	r2, r6
 8011b2a:	9000      	str	r0, [sp, #0]
 8011b2c:	4639      	mov	r1, r7
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f001 f8a8 	bl	8012c84 <__mdiff>
 8011b34:	68c3      	ldr	r3, [r0, #12]
 8011b36:	4602      	mov	r2, r0
 8011b38:	bb03      	cbnz	r3, 8011b7c <_dtoa_r+0x9fc>
 8011b3a:	4601      	mov	r1, r0
 8011b3c:	9008      	str	r0, [sp, #32]
 8011b3e:	9804      	ldr	r0, [sp, #16]
 8011b40:	f001 f886 	bl	8012c50 <__mcmp>
 8011b44:	9a08      	ldr	r2, [sp, #32]
 8011b46:	4603      	mov	r3, r0
 8011b48:	4611      	mov	r1, r2
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	9308      	str	r3, [sp, #32]
 8011b4e:	f000 fe60 	bl	8012812 <_Bfree>
 8011b52:	9b08      	ldr	r3, [sp, #32]
 8011b54:	b9a3      	cbnz	r3, 8011b80 <_dtoa_r+0xa00>
 8011b56:	9a06      	ldr	r2, [sp, #24]
 8011b58:	b992      	cbnz	r2, 8011b80 <_dtoa_r+0xa00>
 8011b5a:	9a07      	ldr	r2, [sp, #28]
 8011b5c:	b982      	cbnz	r2, 8011b80 <_dtoa_r+0xa00>
 8011b5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011b62:	d029      	beq.n	8011bb8 <_dtoa_r+0xa38>
 8011b64:	9b00      	ldr	r3, [sp, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	dd01      	ble.n	8011b6e <_dtoa_r+0x9ee>
 8011b6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011b6e:	9b05      	ldr	r3, [sp, #20]
 8011b70:	1c5d      	adds	r5, r3, #1
 8011b72:	f883 8000 	strb.w	r8, [r3]
 8011b76:	e782      	b.n	8011a7e <_dtoa_r+0x8fe>
 8011b78:	4630      	mov	r0, r6
 8011b7a:	e7c2      	b.n	8011b02 <_dtoa_r+0x982>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e7e3      	b.n	8011b48 <_dtoa_r+0x9c8>
 8011b80:	9a00      	ldr	r2, [sp, #0]
 8011b82:	2a00      	cmp	r2, #0
 8011b84:	db04      	blt.n	8011b90 <_dtoa_r+0xa10>
 8011b86:	d125      	bne.n	8011bd4 <_dtoa_r+0xa54>
 8011b88:	9a06      	ldr	r2, [sp, #24]
 8011b8a:	bb1a      	cbnz	r2, 8011bd4 <_dtoa_r+0xa54>
 8011b8c:	9a07      	ldr	r2, [sp, #28]
 8011b8e:	bb0a      	cbnz	r2, 8011bd4 <_dtoa_r+0xa54>
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	ddec      	ble.n	8011b6e <_dtoa_r+0x9ee>
 8011b94:	2201      	movs	r2, #1
 8011b96:	9904      	ldr	r1, [sp, #16]
 8011b98:	4620      	mov	r0, r4
 8011b9a:	f001 f805 	bl	8012ba8 <__lshift>
 8011b9e:	4639      	mov	r1, r7
 8011ba0:	9004      	str	r0, [sp, #16]
 8011ba2:	f001 f855 	bl	8012c50 <__mcmp>
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	dc03      	bgt.n	8011bb2 <_dtoa_r+0xa32>
 8011baa:	d1e0      	bne.n	8011b6e <_dtoa_r+0x9ee>
 8011bac:	f018 0f01 	tst.w	r8, #1
 8011bb0:	d0dd      	beq.n	8011b6e <_dtoa_r+0x9ee>
 8011bb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011bb6:	d1d8      	bne.n	8011b6a <_dtoa_r+0x9ea>
 8011bb8:	9b05      	ldr	r3, [sp, #20]
 8011bba:	9a05      	ldr	r2, [sp, #20]
 8011bbc:	1c5d      	adds	r5, r3, #1
 8011bbe:	2339      	movs	r3, #57	; 0x39
 8011bc0:	7013      	strb	r3, [r2, #0]
 8011bc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011bc6:	2b39      	cmp	r3, #57	; 0x39
 8011bc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8011bcc:	d04f      	beq.n	8011c6e <_dtoa_r+0xaee>
 8011bce:	3301      	adds	r3, #1
 8011bd0:	7013      	strb	r3, [r2, #0]
 8011bd2:	e754      	b.n	8011a7e <_dtoa_r+0x8fe>
 8011bd4:	9a05      	ldr	r2, [sp, #20]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f102 0501 	add.w	r5, r2, #1
 8011bdc:	dd06      	ble.n	8011bec <_dtoa_r+0xa6c>
 8011bde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011be2:	d0e9      	beq.n	8011bb8 <_dtoa_r+0xa38>
 8011be4:	f108 0801 	add.w	r8, r8, #1
 8011be8:	9b05      	ldr	r3, [sp, #20]
 8011bea:	e7c2      	b.n	8011b72 <_dtoa_r+0x9f2>
 8011bec:	9a02      	ldr	r2, [sp, #8]
 8011bee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011bf2:	eba5 030b 	sub.w	r3, r5, fp
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	d021      	beq.n	8011c3e <_dtoa_r+0xabe>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	220a      	movs	r2, #10
 8011bfe:	9904      	ldr	r1, [sp, #16]
 8011c00:	4620      	mov	r0, r4
 8011c02:	f000 fe1d 	bl	8012840 <__multadd>
 8011c06:	45b1      	cmp	r9, r6
 8011c08:	9004      	str	r0, [sp, #16]
 8011c0a:	f04f 0300 	mov.w	r3, #0
 8011c0e:	f04f 020a 	mov.w	r2, #10
 8011c12:	4649      	mov	r1, r9
 8011c14:	4620      	mov	r0, r4
 8011c16:	d105      	bne.n	8011c24 <_dtoa_r+0xaa4>
 8011c18:	f000 fe12 	bl	8012840 <__multadd>
 8011c1c:	4681      	mov	r9, r0
 8011c1e:	4606      	mov	r6, r0
 8011c20:	9505      	str	r5, [sp, #20]
 8011c22:	e776      	b.n	8011b12 <_dtoa_r+0x992>
 8011c24:	f000 fe0c 	bl	8012840 <__multadd>
 8011c28:	4631      	mov	r1, r6
 8011c2a:	4681      	mov	r9, r0
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	220a      	movs	r2, #10
 8011c30:	4620      	mov	r0, r4
 8011c32:	f000 fe05 	bl	8012840 <__multadd>
 8011c36:	4606      	mov	r6, r0
 8011c38:	e7f2      	b.n	8011c20 <_dtoa_r+0xaa0>
 8011c3a:	f04f 0900 	mov.w	r9, #0
 8011c3e:	2201      	movs	r2, #1
 8011c40:	9904      	ldr	r1, [sp, #16]
 8011c42:	4620      	mov	r0, r4
 8011c44:	f000 ffb0 	bl	8012ba8 <__lshift>
 8011c48:	4639      	mov	r1, r7
 8011c4a:	9004      	str	r0, [sp, #16]
 8011c4c:	f001 f800 	bl	8012c50 <__mcmp>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	dcb6      	bgt.n	8011bc2 <_dtoa_r+0xa42>
 8011c54:	d102      	bne.n	8011c5c <_dtoa_r+0xadc>
 8011c56:	f018 0f01 	tst.w	r8, #1
 8011c5a:	d1b2      	bne.n	8011bc2 <_dtoa_r+0xa42>
 8011c5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c60:	2b30      	cmp	r3, #48	; 0x30
 8011c62:	f105 32ff 	add.w	r2, r5, #4294967295
 8011c66:	f47f af0a 	bne.w	8011a7e <_dtoa_r+0x8fe>
 8011c6a:	4615      	mov	r5, r2
 8011c6c:	e7f6      	b.n	8011c5c <_dtoa_r+0xadc>
 8011c6e:	4593      	cmp	fp, r2
 8011c70:	d105      	bne.n	8011c7e <_dtoa_r+0xafe>
 8011c72:	2331      	movs	r3, #49	; 0x31
 8011c74:	f10a 0a01 	add.w	sl, sl, #1
 8011c78:	f88b 3000 	strb.w	r3, [fp]
 8011c7c:	e6ff      	b.n	8011a7e <_dtoa_r+0x8fe>
 8011c7e:	4615      	mov	r5, r2
 8011c80:	e79f      	b.n	8011bc2 <_dtoa_r+0xa42>
 8011c82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011ce8 <_dtoa_r+0xb68>
 8011c86:	e007      	b.n	8011c98 <_dtoa_r+0xb18>
 8011c88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011cec <_dtoa_r+0xb6c>
 8011c8e:	b11b      	cbz	r3, 8011c98 <_dtoa_r+0xb18>
 8011c90:	f10b 0308 	add.w	r3, fp, #8
 8011c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c96:	6013      	str	r3, [r2, #0]
 8011c98:	4658      	mov	r0, fp
 8011c9a:	b017      	add	sp, #92	; 0x5c
 8011c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ca0:	9b06      	ldr	r3, [sp, #24]
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	f77f ae35 	ble.w	8011912 <_dtoa_r+0x792>
 8011ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011caa:	9307      	str	r3, [sp, #28]
 8011cac:	e649      	b.n	8011942 <_dtoa_r+0x7c2>
 8011cae:	9b02      	ldr	r3, [sp, #8]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	dc03      	bgt.n	8011cbc <_dtoa_r+0xb3c>
 8011cb4:	9b06      	ldr	r3, [sp, #24]
 8011cb6:	2b02      	cmp	r3, #2
 8011cb8:	f73f aecc 	bgt.w	8011a54 <_dtoa_r+0x8d4>
 8011cbc:	465d      	mov	r5, fp
 8011cbe:	4639      	mov	r1, r7
 8011cc0:	9804      	ldr	r0, [sp, #16]
 8011cc2:	f7ff f9d1 	bl	8011068 <quorem>
 8011cc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011cca:	f805 8b01 	strb.w	r8, [r5], #1
 8011cce:	9a02      	ldr	r2, [sp, #8]
 8011cd0:	eba5 030b 	sub.w	r3, r5, fp
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	ddb0      	ble.n	8011c3a <_dtoa_r+0xaba>
 8011cd8:	2300      	movs	r3, #0
 8011cda:	220a      	movs	r2, #10
 8011cdc:	9904      	ldr	r1, [sp, #16]
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f000 fdae 	bl	8012840 <__multadd>
 8011ce4:	9004      	str	r0, [sp, #16]
 8011ce6:	e7ea      	b.n	8011cbe <_dtoa_r+0xb3e>
 8011ce8:	08014733 	.word	0x08014733
 8011cec:	08014590 	.word	0x08014590

08011cf0 <__sflush_r>:
 8011cf0:	898a      	ldrh	r2, [r1, #12]
 8011cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf6:	4605      	mov	r5, r0
 8011cf8:	0710      	lsls	r0, r2, #28
 8011cfa:	460c      	mov	r4, r1
 8011cfc:	d458      	bmi.n	8011db0 <__sflush_r+0xc0>
 8011cfe:	684b      	ldr	r3, [r1, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	dc05      	bgt.n	8011d10 <__sflush_r+0x20>
 8011d04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	dc02      	bgt.n	8011d10 <__sflush_r+0x20>
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d12:	2e00      	cmp	r6, #0
 8011d14:	d0f9      	beq.n	8011d0a <__sflush_r+0x1a>
 8011d16:	2300      	movs	r3, #0
 8011d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d1c:	682f      	ldr	r7, [r5, #0]
 8011d1e:	6a21      	ldr	r1, [r4, #32]
 8011d20:	602b      	str	r3, [r5, #0]
 8011d22:	d032      	beq.n	8011d8a <__sflush_r+0x9a>
 8011d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d26:	89a3      	ldrh	r3, [r4, #12]
 8011d28:	075a      	lsls	r2, r3, #29
 8011d2a:	d505      	bpl.n	8011d38 <__sflush_r+0x48>
 8011d2c:	6863      	ldr	r3, [r4, #4]
 8011d2e:	1ac0      	subs	r0, r0, r3
 8011d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d32:	b10b      	cbz	r3, 8011d38 <__sflush_r+0x48>
 8011d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d36:	1ac0      	subs	r0, r0, r3
 8011d38:	2300      	movs	r3, #0
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d3e:	6a21      	ldr	r1, [r4, #32]
 8011d40:	4628      	mov	r0, r5
 8011d42:	47b0      	blx	r6
 8011d44:	1c43      	adds	r3, r0, #1
 8011d46:	89a3      	ldrh	r3, [r4, #12]
 8011d48:	d106      	bne.n	8011d58 <__sflush_r+0x68>
 8011d4a:	6829      	ldr	r1, [r5, #0]
 8011d4c:	291d      	cmp	r1, #29
 8011d4e:	d848      	bhi.n	8011de2 <__sflush_r+0xf2>
 8011d50:	4a29      	ldr	r2, [pc, #164]	; (8011df8 <__sflush_r+0x108>)
 8011d52:	40ca      	lsrs	r2, r1
 8011d54:	07d6      	lsls	r6, r2, #31
 8011d56:	d544      	bpl.n	8011de2 <__sflush_r+0xf2>
 8011d58:	2200      	movs	r2, #0
 8011d5a:	6062      	str	r2, [r4, #4]
 8011d5c:	04d9      	lsls	r1, r3, #19
 8011d5e:	6922      	ldr	r2, [r4, #16]
 8011d60:	6022      	str	r2, [r4, #0]
 8011d62:	d504      	bpl.n	8011d6e <__sflush_r+0x7e>
 8011d64:	1c42      	adds	r2, r0, #1
 8011d66:	d101      	bne.n	8011d6c <__sflush_r+0x7c>
 8011d68:	682b      	ldr	r3, [r5, #0]
 8011d6a:	b903      	cbnz	r3, 8011d6e <__sflush_r+0x7e>
 8011d6c:	6560      	str	r0, [r4, #84]	; 0x54
 8011d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d70:	602f      	str	r7, [r5, #0]
 8011d72:	2900      	cmp	r1, #0
 8011d74:	d0c9      	beq.n	8011d0a <__sflush_r+0x1a>
 8011d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d7a:	4299      	cmp	r1, r3
 8011d7c:	d002      	beq.n	8011d84 <__sflush_r+0x94>
 8011d7e:	4628      	mov	r0, r5
 8011d80:	f001 f920 	bl	8012fc4 <_free_r>
 8011d84:	2000      	movs	r0, #0
 8011d86:	6360      	str	r0, [r4, #52]	; 0x34
 8011d88:	e7c0      	b.n	8011d0c <__sflush_r+0x1c>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	47b0      	blx	r6
 8011d90:	1c41      	adds	r1, r0, #1
 8011d92:	d1c8      	bne.n	8011d26 <__sflush_r+0x36>
 8011d94:	682b      	ldr	r3, [r5, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d0c5      	beq.n	8011d26 <__sflush_r+0x36>
 8011d9a:	2b1d      	cmp	r3, #29
 8011d9c:	d001      	beq.n	8011da2 <__sflush_r+0xb2>
 8011d9e:	2b16      	cmp	r3, #22
 8011da0:	d101      	bne.n	8011da6 <__sflush_r+0xb6>
 8011da2:	602f      	str	r7, [r5, #0]
 8011da4:	e7b1      	b.n	8011d0a <__sflush_r+0x1a>
 8011da6:	89a3      	ldrh	r3, [r4, #12]
 8011da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dac:	81a3      	strh	r3, [r4, #12]
 8011dae:	e7ad      	b.n	8011d0c <__sflush_r+0x1c>
 8011db0:	690f      	ldr	r7, [r1, #16]
 8011db2:	2f00      	cmp	r7, #0
 8011db4:	d0a9      	beq.n	8011d0a <__sflush_r+0x1a>
 8011db6:	0793      	lsls	r3, r2, #30
 8011db8:	680e      	ldr	r6, [r1, #0]
 8011dba:	bf08      	it	eq
 8011dbc:	694b      	ldreq	r3, [r1, #20]
 8011dbe:	600f      	str	r7, [r1, #0]
 8011dc0:	bf18      	it	ne
 8011dc2:	2300      	movne	r3, #0
 8011dc4:	eba6 0807 	sub.w	r8, r6, r7
 8011dc8:	608b      	str	r3, [r1, #8]
 8011dca:	f1b8 0f00 	cmp.w	r8, #0
 8011dce:	dd9c      	ble.n	8011d0a <__sflush_r+0x1a>
 8011dd0:	4643      	mov	r3, r8
 8011dd2:	463a      	mov	r2, r7
 8011dd4:	6a21      	ldr	r1, [r4, #32]
 8011dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011dd8:	4628      	mov	r0, r5
 8011dda:	47b0      	blx	r6
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	dc06      	bgt.n	8011dee <__sflush_r+0xfe>
 8011de0:	89a3      	ldrh	r3, [r4, #12]
 8011de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011de6:	81a3      	strh	r3, [r4, #12]
 8011de8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dec:	e78e      	b.n	8011d0c <__sflush_r+0x1c>
 8011dee:	4407      	add	r7, r0
 8011df0:	eba8 0800 	sub.w	r8, r8, r0
 8011df4:	e7e9      	b.n	8011dca <__sflush_r+0xda>
 8011df6:	bf00      	nop
 8011df8:	20400001 	.word	0x20400001

08011dfc <_fflush_r>:
 8011dfc:	b538      	push	{r3, r4, r5, lr}
 8011dfe:	690b      	ldr	r3, [r1, #16]
 8011e00:	4605      	mov	r5, r0
 8011e02:	460c      	mov	r4, r1
 8011e04:	b1db      	cbz	r3, 8011e3e <_fflush_r+0x42>
 8011e06:	b118      	cbz	r0, 8011e10 <_fflush_r+0x14>
 8011e08:	6983      	ldr	r3, [r0, #24]
 8011e0a:	b90b      	cbnz	r3, 8011e10 <_fflush_r+0x14>
 8011e0c:	f000 f860 	bl	8011ed0 <__sinit>
 8011e10:	4b0c      	ldr	r3, [pc, #48]	; (8011e44 <_fflush_r+0x48>)
 8011e12:	429c      	cmp	r4, r3
 8011e14:	d109      	bne.n	8011e2a <_fflush_r+0x2e>
 8011e16:	686c      	ldr	r4, [r5, #4]
 8011e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e1c:	b17b      	cbz	r3, 8011e3e <_fflush_r+0x42>
 8011e1e:	4621      	mov	r1, r4
 8011e20:	4628      	mov	r0, r5
 8011e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e26:	f7ff bf63 	b.w	8011cf0 <__sflush_r>
 8011e2a:	4b07      	ldr	r3, [pc, #28]	; (8011e48 <_fflush_r+0x4c>)
 8011e2c:	429c      	cmp	r4, r3
 8011e2e:	d101      	bne.n	8011e34 <_fflush_r+0x38>
 8011e30:	68ac      	ldr	r4, [r5, #8]
 8011e32:	e7f1      	b.n	8011e18 <_fflush_r+0x1c>
 8011e34:	4b05      	ldr	r3, [pc, #20]	; (8011e4c <_fflush_r+0x50>)
 8011e36:	429c      	cmp	r4, r3
 8011e38:	bf08      	it	eq
 8011e3a:	68ec      	ldreq	r4, [r5, #12]
 8011e3c:	e7ec      	b.n	8011e18 <_fflush_r+0x1c>
 8011e3e:	2000      	movs	r0, #0
 8011e40:	bd38      	pop	{r3, r4, r5, pc}
 8011e42:	bf00      	nop
 8011e44:	080145c0 	.word	0x080145c0
 8011e48:	080145e0 	.word	0x080145e0
 8011e4c:	080145a0 	.word	0x080145a0

08011e50 <std>:
 8011e50:	2300      	movs	r3, #0
 8011e52:	b510      	push	{r4, lr}
 8011e54:	4604      	mov	r4, r0
 8011e56:	e9c0 3300 	strd	r3, r3, [r0]
 8011e5a:	6083      	str	r3, [r0, #8]
 8011e5c:	8181      	strh	r1, [r0, #12]
 8011e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8011e60:	81c2      	strh	r2, [r0, #14]
 8011e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e66:	6183      	str	r3, [r0, #24]
 8011e68:	4619      	mov	r1, r3
 8011e6a:	2208      	movs	r2, #8
 8011e6c:	305c      	adds	r0, #92	; 0x5c
 8011e6e:	f7fd f9b7 	bl	800f1e0 <memset>
 8011e72:	4b05      	ldr	r3, [pc, #20]	; (8011e88 <std+0x38>)
 8011e74:	6263      	str	r3, [r4, #36]	; 0x24
 8011e76:	4b05      	ldr	r3, [pc, #20]	; (8011e8c <std+0x3c>)
 8011e78:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e7a:	4b05      	ldr	r3, [pc, #20]	; (8011e90 <std+0x40>)
 8011e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e7e:	4b05      	ldr	r3, [pc, #20]	; (8011e94 <std+0x44>)
 8011e80:	6224      	str	r4, [r4, #32]
 8011e82:	6323      	str	r3, [r4, #48]	; 0x30
 8011e84:	bd10      	pop	{r4, pc}
 8011e86:	bf00      	nop
 8011e88:	0801006d 	.word	0x0801006d
 8011e8c:	08010093 	.word	0x08010093
 8011e90:	080100cb 	.word	0x080100cb
 8011e94:	080100ef 	.word	0x080100ef

08011e98 <_cleanup_r>:
 8011e98:	4901      	ldr	r1, [pc, #4]	; (8011ea0 <_cleanup_r+0x8>)
 8011e9a:	f000 b885 	b.w	8011fa8 <_fwalk_reent>
 8011e9e:	bf00      	nop
 8011ea0:	08011dfd 	.word	0x08011dfd

08011ea4 <__sfmoreglue>:
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	1e4a      	subs	r2, r1, #1
 8011ea8:	2568      	movs	r5, #104	; 0x68
 8011eaa:	4355      	muls	r5, r2
 8011eac:	460e      	mov	r6, r1
 8011eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011eb2:	f001 f8d5 	bl	8013060 <_malloc_r>
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	b140      	cbz	r0, 8011ecc <__sfmoreglue+0x28>
 8011eba:	2100      	movs	r1, #0
 8011ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8011ec0:	300c      	adds	r0, #12
 8011ec2:	60a0      	str	r0, [r4, #8]
 8011ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ec8:	f7fd f98a 	bl	800f1e0 <memset>
 8011ecc:	4620      	mov	r0, r4
 8011ece:	bd70      	pop	{r4, r5, r6, pc}

08011ed0 <__sinit>:
 8011ed0:	6983      	ldr	r3, [r0, #24]
 8011ed2:	b510      	push	{r4, lr}
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	bb33      	cbnz	r3, 8011f26 <__sinit+0x56>
 8011ed8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011edc:	6503      	str	r3, [r0, #80]	; 0x50
 8011ede:	4b12      	ldr	r3, [pc, #72]	; (8011f28 <__sinit+0x58>)
 8011ee0:	4a12      	ldr	r2, [pc, #72]	; (8011f2c <__sinit+0x5c>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	6282      	str	r2, [r0, #40]	; 0x28
 8011ee6:	4298      	cmp	r0, r3
 8011ee8:	bf04      	itt	eq
 8011eea:	2301      	moveq	r3, #1
 8011eec:	6183      	streq	r3, [r0, #24]
 8011eee:	f000 f81f 	bl	8011f30 <__sfp>
 8011ef2:	6060      	str	r0, [r4, #4]
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	f000 f81b 	bl	8011f30 <__sfp>
 8011efa:	60a0      	str	r0, [r4, #8]
 8011efc:	4620      	mov	r0, r4
 8011efe:	f000 f817 	bl	8011f30 <__sfp>
 8011f02:	2200      	movs	r2, #0
 8011f04:	60e0      	str	r0, [r4, #12]
 8011f06:	2104      	movs	r1, #4
 8011f08:	6860      	ldr	r0, [r4, #4]
 8011f0a:	f7ff ffa1 	bl	8011e50 <std>
 8011f0e:	2201      	movs	r2, #1
 8011f10:	2109      	movs	r1, #9
 8011f12:	68a0      	ldr	r0, [r4, #8]
 8011f14:	f7ff ff9c 	bl	8011e50 <std>
 8011f18:	2202      	movs	r2, #2
 8011f1a:	2112      	movs	r1, #18
 8011f1c:	68e0      	ldr	r0, [r4, #12]
 8011f1e:	f7ff ff97 	bl	8011e50 <std>
 8011f22:	2301      	movs	r3, #1
 8011f24:	61a3      	str	r3, [r4, #24]
 8011f26:	bd10      	pop	{r4, pc}
 8011f28:	08014500 	.word	0x08014500
 8011f2c:	08011e99 	.word	0x08011e99

08011f30 <__sfp>:
 8011f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f32:	4b1b      	ldr	r3, [pc, #108]	; (8011fa0 <__sfp+0x70>)
 8011f34:	681e      	ldr	r6, [r3, #0]
 8011f36:	69b3      	ldr	r3, [r6, #24]
 8011f38:	4607      	mov	r7, r0
 8011f3a:	b913      	cbnz	r3, 8011f42 <__sfp+0x12>
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	f7ff ffc7 	bl	8011ed0 <__sinit>
 8011f42:	3648      	adds	r6, #72	; 0x48
 8011f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011f48:	3b01      	subs	r3, #1
 8011f4a:	d503      	bpl.n	8011f54 <__sfp+0x24>
 8011f4c:	6833      	ldr	r3, [r6, #0]
 8011f4e:	b133      	cbz	r3, 8011f5e <__sfp+0x2e>
 8011f50:	6836      	ldr	r6, [r6, #0]
 8011f52:	e7f7      	b.n	8011f44 <__sfp+0x14>
 8011f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011f58:	b16d      	cbz	r5, 8011f76 <__sfp+0x46>
 8011f5a:	3468      	adds	r4, #104	; 0x68
 8011f5c:	e7f4      	b.n	8011f48 <__sfp+0x18>
 8011f5e:	2104      	movs	r1, #4
 8011f60:	4638      	mov	r0, r7
 8011f62:	f7ff ff9f 	bl	8011ea4 <__sfmoreglue>
 8011f66:	6030      	str	r0, [r6, #0]
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d1f1      	bne.n	8011f50 <__sfp+0x20>
 8011f6c:	230c      	movs	r3, #12
 8011f6e:	603b      	str	r3, [r7, #0]
 8011f70:	4604      	mov	r4, r0
 8011f72:	4620      	mov	r0, r4
 8011f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f76:	4b0b      	ldr	r3, [pc, #44]	; (8011fa4 <__sfp+0x74>)
 8011f78:	6665      	str	r5, [r4, #100]	; 0x64
 8011f7a:	e9c4 5500 	strd	r5, r5, [r4]
 8011f7e:	60a5      	str	r5, [r4, #8]
 8011f80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011f84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011f88:	2208      	movs	r2, #8
 8011f8a:	4629      	mov	r1, r5
 8011f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011f90:	f7fd f926 	bl	800f1e0 <memset>
 8011f94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011f98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011f9c:	e7e9      	b.n	8011f72 <__sfp+0x42>
 8011f9e:	bf00      	nop
 8011fa0:	08014500 	.word	0x08014500
 8011fa4:	ffff0001 	.word	0xffff0001

08011fa8 <_fwalk_reent>:
 8011fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fac:	4680      	mov	r8, r0
 8011fae:	4689      	mov	r9, r1
 8011fb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011fb4:	2600      	movs	r6, #0
 8011fb6:	b914      	cbnz	r4, 8011fbe <_fwalk_reent+0x16>
 8011fb8:	4630      	mov	r0, r6
 8011fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011fc2:	3f01      	subs	r7, #1
 8011fc4:	d501      	bpl.n	8011fca <_fwalk_reent+0x22>
 8011fc6:	6824      	ldr	r4, [r4, #0]
 8011fc8:	e7f5      	b.n	8011fb6 <_fwalk_reent+0xe>
 8011fca:	89ab      	ldrh	r3, [r5, #12]
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d907      	bls.n	8011fe0 <_fwalk_reent+0x38>
 8011fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	d003      	beq.n	8011fe0 <_fwalk_reent+0x38>
 8011fd8:	4629      	mov	r1, r5
 8011fda:	4640      	mov	r0, r8
 8011fdc:	47c8      	blx	r9
 8011fde:	4306      	orrs	r6, r0
 8011fe0:	3568      	adds	r5, #104	; 0x68
 8011fe2:	e7ee      	b.n	8011fc2 <_fwalk_reent+0x1a>

08011fe4 <rshift>:
 8011fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fe6:	6906      	ldr	r6, [r0, #16]
 8011fe8:	114b      	asrs	r3, r1, #5
 8011fea:	429e      	cmp	r6, r3
 8011fec:	f100 0414 	add.w	r4, r0, #20
 8011ff0:	dd30      	ble.n	8012054 <rshift+0x70>
 8011ff2:	f011 011f 	ands.w	r1, r1, #31
 8011ff6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011ffa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011ffe:	d108      	bne.n	8012012 <rshift+0x2e>
 8012000:	4621      	mov	r1, r4
 8012002:	42b2      	cmp	r2, r6
 8012004:	460b      	mov	r3, r1
 8012006:	d211      	bcs.n	801202c <rshift+0x48>
 8012008:	f852 3b04 	ldr.w	r3, [r2], #4
 801200c:	f841 3b04 	str.w	r3, [r1], #4
 8012010:	e7f7      	b.n	8012002 <rshift+0x1e>
 8012012:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012016:	f1c1 0c20 	rsb	ip, r1, #32
 801201a:	40cd      	lsrs	r5, r1
 801201c:	3204      	adds	r2, #4
 801201e:	4623      	mov	r3, r4
 8012020:	42b2      	cmp	r2, r6
 8012022:	4617      	mov	r7, r2
 8012024:	d30c      	bcc.n	8012040 <rshift+0x5c>
 8012026:	601d      	str	r5, [r3, #0]
 8012028:	b105      	cbz	r5, 801202c <rshift+0x48>
 801202a:	3304      	adds	r3, #4
 801202c:	1b1a      	subs	r2, r3, r4
 801202e:	42a3      	cmp	r3, r4
 8012030:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012034:	bf08      	it	eq
 8012036:	2300      	moveq	r3, #0
 8012038:	6102      	str	r2, [r0, #16]
 801203a:	bf08      	it	eq
 801203c:	6143      	streq	r3, [r0, #20]
 801203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012040:	683f      	ldr	r7, [r7, #0]
 8012042:	fa07 f70c 	lsl.w	r7, r7, ip
 8012046:	433d      	orrs	r5, r7
 8012048:	f843 5b04 	str.w	r5, [r3], #4
 801204c:	f852 5b04 	ldr.w	r5, [r2], #4
 8012050:	40cd      	lsrs	r5, r1
 8012052:	e7e5      	b.n	8012020 <rshift+0x3c>
 8012054:	4623      	mov	r3, r4
 8012056:	e7e9      	b.n	801202c <rshift+0x48>

08012058 <__hexdig_fun>:
 8012058:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801205c:	2b09      	cmp	r3, #9
 801205e:	d802      	bhi.n	8012066 <__hexdig_fun+0xe>
 8012060:	3820      	subs	r0, #32
 8012062:	b2c0      	uxtb	r0, r0
 8012064:	4770      	bx	lr
 8012066:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801206a:	2b05      	cmp	r3, #5
 801206c:	d801      	bhi.n	8012072 <__hexdig_fun+0x1a>
 801206e:	3847      	subs	r0, #71	; 0x47
 8012070:	e7f7      	b.n	8012062 <__hexdig_fun+0xa>
 8012072:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012076:	2b05      	cmp	r3, #5
 8012078:	d801      	bhi.n	801207e <__hexdig_fun+0x26>
 801207a:	3827      	subs	r0, #39	; 0x27
 801207c:	e7f1      	b.n	8012062 <__hexdig_fun+0xa>
 801207e:	2000      	movs	r0, #0
 8012080:	4770      	bx	lr

08012082 <__gethex>:
 8012082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012086:	b08b      	sub	sp, #44	; 0x2c
 8012088:	468a      	mov	sl, r1
 801208a:	9002      	str	r0, [sp, #8]
 801208c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801208e:	9306      	str	r3, [sp, #24]
 8012090:	4690      	mov	r8, r2
 8012092:	f000 fadf 	bl	8012654 <__localeconv_l>
 8012096:	6803      	ldr	r3, [r0, #0]
 8012098:	9303      	str	r3, [sp, #12]
 801209a:	4618      	mov	r0, r3
 801209c:	f7ee f8b0 	bl	8000200 <strlen>
 80120a0:	9b03      	ldr	r3, [sp, #12]
 80120a2:	9001      	str	r0, [sp, #4]
 80120a4:	4403      	add	r3, r0
 80120a6:	f04f 0b00 	mov.w	fp, #0
 80120aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80120ae:	9307      	str	r3, [sp, #28]
 80120b0:	f8da 3000 	ldr.w	r3, [sl]
 80120b4:	3302      	adds	r3, #2
 80120b6:	461f      	mov	r7, r3
 80120b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80120bc:	2830      	cmp	r0, #48	; 0x30
 80120be:	d06c      	beq.n	801219a <__gethex+0x118>
 80120c0:	f7ff ffca 	bl	8012058 <__hexdig_fun>
 80120c4:	4604      	mov	r4, r0
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d16a      	bne.n	80121a0 <__gethex+0x11e>
 80120ca:	9a01      	ldr	r2, [sp, #4]
 80120cc:	9903      	ldr	r1, [sp, #12]
 80120ce:	4638      	mov	r0, r7
 80120d0:	f001 fe08 	bl	8013ce4 <strncmp>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	d166      	bne.n	80121a6 <__gethex+0x124>
 80120d8:	9b01      	ldr	r3, [sp, #4]
 80120da:	5cf8      	ldrb	r0, [r7, r3]
 80120dc:	18fe      	adds	r6, r7, r3
 80120de:	f7ff ffbb 	bl	8012058 <__hexdig_fun>
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d062      	beq.n	80121ac <__gethex+0x12a>
 80120e6:	4633      	mov	r3, r6
 80120e8:	7818      	ldrb	r0, [r3, #0]
 80120ea:	2830      	cmp	r0, #48	; 0x30
 80120ec:	461f      	mov	r7, r3
 80120ee:	f103 0301 	add.w	r3, r3, #1
 80120f2:	d0f9      	beq.n	80120e8 <__gethex+0x66>
 80120f4:	f7ff ffb0 	bl	8012058 <__hexdig_fun>
 80120f8:	fab0 f580 	clz	r5, r0
 80120fc:	096d      	lsrs	r5, r5, #5
 80120fe:	4634      	mov	r4, r6
 8012100:	f04f 0b01 	mov.w	fp, #1
 8012104:	463a      	mov	r2, r7
 8012106:	4616      	mov	r6, r2
 8012108:	3201      	adds	r2, #1
 801210a:	7830      	ldrb	r0, [r6, #0]
 801210c:	f7ff ffa4 	bl	8012058 <__hexdig_fun>
 8012110:	2800      	cmp	r0, #0
 8012112:	d1f8      	bne.n	8012106 <__gethex+0x84>
 8012114:	9a01      	ldr	r2, [sp, #4]
 8012116:	9903      	ldr	r1, [sp, #12]
 8012118:	4630      	mov	r0, r6
 801211a:	f001 fde3 	bl	8013ce4 <strncmp>
 801211e:	b950      	cbnz	r0, 8012136 <__gethex+0xb4>
 8012120:	b954      	cbnz	r4, 8012138 <__gethex+0xb6>
 8012122:	9b01      	ldr	r3, [sp, #4]
 8012124:	18f4      	adds	r4, r6, r3
 8012126:	4622      	mov	r2, r4
 8012128:	4616      	mov	r6, r2
 801212a:	3201      	adds	r2, #1
 801212c:	7830      	ldrb	r0, [r6, #0]
 801212e:	f7ff ff93 	bl	8012058 <__hexdig_fun>
 8012132:	2800      	cmp	r0, #0
 8012134:	d1f8      	bne.n	8012128 <__gethex+0xa6>
 8012136:	b10c      	cbz	r4, 801213c <__gethex+0xba>
 8012138:	1ba4      	subs	r4, r4, r6
 801213a:	00a4      	lsls	r4, r4, #2
 801213c:	7833      	ldrb	r3, [r6, #0]
 801213e:	2b50      	cmp	r3, #80	; 0x50
 8012140:	d001      	beq.n	8012146 <__gethex+0xc4>
 8012142:	2b70      	cmp	r3, #112	; 0x70
 8012144:	d140      	bne.n	80121c8 <__gethex+0x146>
 8012146:	7873      	ldrb	r3, [r6, #1]
 8012148:	2b2b      	cmp	r3, #43	; 0x2b
 801214a:	d031      	beq.n	80121b0 <__gethex+0x12e>
 801214c:	2b2d      	cmp	r3, #45	; 0x2d
 801214e:	d033      	beq.n	80121b8 <__gethex+0x136>
 8012150:	1c71      	adds	r1, r6, #1
 8012152:	f04f 0900 	mov.w	r9, #0
 8012156:	7808      	ldrb	r0, [r1, #0]
 8012158:	f7ff ff7e 	bl	8012058 <__hexdig_fun>
 801215c:	1e43      	subs	r3, r0, #1
 801215e:	b2db      	uxtb	r3, r3
 8012160:	2b18      	cmp	r3, #24
 8012162:	d831      	bhi.n	80121c8 <__gethex+0x146>
 8012164:	f1a0 0210 	sub.w	r2, r0, #16
 8012168:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801216c:	f7ff ff74 	bl	8012058 <__hexdig_fun>
 8012170:	1e43      	subs	r3, r0, #1
 8012172:	b2db      	uxtb	r3, r3
 8012174:	2b18      	cmp	r3, #24
 8012176:	d922      	bls.n	80121be <__gethex+0x13c>
 8012178:	f1b9 0f00 	cmp.w	r9, #0
 801217c:	d000      	beq.n	8012180 <__gethex+0xfe>
 801217e:	4252      	negs	r2, r2
 8012180:	4414      	add	r4, r2
 8012182:	f8ca 1000 	str.w	r1, [sl]
 8012186:	b30d      	cbz	r5, 80121cc <__gethex+0x14a>
 8012188:	f1bb 0f00 	cmp.w	fp, #0
 801218c:	bf0c      	ite	eq
 801218e:	2706      	moveq	r7, #6
 8012190:	2700      	movne	r7, #0
 8012192:	4638      	mov	r0, r7
 8012194:	b00b      	add	sp, #44	; 0x2c
 8012196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801219a:	f10b 0b01 	add.w	fp, fp, #1
 801219e:	e78a      	b.n	80120b6 <__gethex+0x34>
 80121a0:	2500      	movs	r5, #0
 80121a2:	462c      	mov	r4, r5
 80121a4:	e7ae      	b.n	8012104 <__gethex+0x82>
 80121a6:	463e      	mov	r6, r7
 80121a8:	2501      	movs	r5, #1
 80121aa:	e7c7      	b.n	801213c <__gethex+0xba>
 80121ac:	4604      	mov	r4, r0
 80121ae:	e7fb      	b.n	80121a8 <__gethex+0x126>
 80121b0:	f04f 0900 	mov.w	r9, #0
 80121b4:	1cb1      	adds	r1, r6, #2
 80121b6:	e7ce      	b.n	8012156 <__gethex+0xd4>
 80121b8:	f04f 0901 	mov.w	r9, #1
 80121bc:	e7fa      	b.n	80121b4 <__gethex+0x132>
 80121be:	230a      	movs	r3, #10
 80121c0:	fb03 0202 	mla	r2, r3, r2, r0
 80121c4:	3a10      	subs	r2, #16
 80121c6:	e7cf      	b.n	8012168 <__gethex+0xe6>
 80121c8:	4631      	mov	r1, r6
 80121ca:	e7da      	b.n	8012182 <__gethex+0x100>
 80121cc:	1bf3      	subs	r3, r6, r7
 80121ce:	3b01      	subs	r3, #1
 80121d0:	4629      	mov	r1, r5
 80121d2:	2b07      	cmp	r3, #7
 80121d4:	dc49      	bgt.n	801226a <__gethex+0x1e8>
 80121d6:	9802      	ldr	r0, [sp, #8]
 80121d8:	f000 fae7 	bl	80127aa <_Balloc>
 80121dc:	9b01      	ldr	r3, [sp, #4]
 80121de:	f100 0914 	add.w	r9, r0, #20
 80121e2:	f04f 0b00 	mov.w	fp, #0
 80121e6:	f1c3 0301 	rsb	r3, r3, #1
 80121ea:	4605      	mov	r5, r0
 80121ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80121f0:	46da      	mov	sl, fp
 80121f2:	9308      	str	r3, [sp, #32]
 80121f4:	42b7      	cmp	r7, r6
 80121f6:	d33b      	bcc.n	8012270 <__gethex+0x1ee>
 80121f8:	9804      	ldr	r0, [sp, #16]
 80121fa:	f840 ab04 	str.w	sl, [r0], #4
 80121fe:	eba0 0009 	sub.w	r0, r0, r9
 8012202:	1080      	asrs	r0, r0, #2
 8012204:	6128      	str	r0, [r5, #16]
 8012206:	0147      	lsls	r7, r0, #5
 8012208:	4650      	mov	r0, sl
 801220a:	f000 fb92 	bl	8012932 <__hi0bits>
 801220e:	f8d8 6000 	ldr.w	r6, [r8]
 8012212:	1a3f      	subs	r7, r7, r0
 8012214:	42b7      	cmp	r7, r6
 8012216:	dd64      	ble.n	80122e2 <__gethex+0x260>
 8012218:	1bbf      	subs	r7, r7, r6
 801221a:	4639      	mov	r1, r7
 801221c:	4628      	mov	r0, r5
 801221e:	f000 fea1 	bl	8012f64 <__any_on>
 8012222:	4682      	mov	sl, r0
 8012224:	b178      	cbz	r0, 8012246 <__gethex+0x1c4>
 8012226:	1e7b      	subs	r3, r7, #1
 8012228:	1159      	asrs	r1, r3, #5
 801222a:	f003 021f 	and.w	r2, r3, #31
 801222e:	f04f 0a01 	mov.w	sl, #1
 8012232:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012236:	fa0a f202 	lsl.w	r2, sl, r2
 801223a:	420a      	tst	r2, r1
 801223c:	d003      	beq.n	8012246 <__gethex+0x1c4>
 801223e:	4553      	cmp	r3, sl
 8012240:	dc46      	bgt.n	80122d0 <__gethex+0x24e>
 8012242:	f04f 0a02 	mov.w	sl, #2
 8012246:	4639      	mov	r1, r7
 8012248:	4628      	mov	r0, r5
 801224a:	f7ff fecb 	bl	8011fe4 <rshift>
 801224e:	443c      	add	r4, r7
 8012250:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012254:	42a3      	cmp	r3, r4
 8012256:	da52      	bge.n	80122fe <__gethex+0x27c>
 8012258:	4629      	mov	r1, r5
 801225a:	9802      	ldr	r0, [sp, #8]
 801225c:	f000 fad9 	bl	8012812 <_Bfree>
 8012260:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012262:	2300      	movs	r3, #0
 8012264:	6013      	str	r3, [r2, #0]
 8012266:	27a3      	movs	r7, #163	; 0xa3
 8012268:	e793      	b.n	8012192 <__gethex+0x110>
 801226a:	3101      	adds	r1, #1
 801226c:	105b      	asrs	r3, r3, #1
 801226e:	e7b0      	b.n	80121d2 <__gethex+0x150>
 8012270:	1e73      	subs	r3, r6, #1
 8012272:	9305      	str	r3, [sp, #20]
 8012274:	9a07      	ldr	r2, [sp, #28]
 8012276:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801227a:	4293      	cmp	r3, r2
 801227c:	d018      	beq.n	80122b0 <__gethex+0x22e>
 801227e:	f1bb 0f20 	cmp.w	fp, #32
 8012282:	d107      	bne.n	8012294 <__gethex+0x212>
 8012284:	9b04      	ldr	r3, [sp, #16]
 8012286:	f8c3 a000 	str.w	sl, [r3]
 801228a:	3304      	adds	r3, #4
 801228c:	f04f 0a00 	mov.w	sl, #0
 8012290:	9304      	str	r3, [sp, #16]
 8012292:	46d3      	mov	fp, sl
 8012294:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012298:	f7ff fede 	bl	8012058 <__hexdig_fun>
 801229c:	f000 000f 	and.w	r0, r0, #15
 80122a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80122a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80122a8:	f10b 0b04 	add.w	fp, fp, #4
 80122ac:	9b05      	ldr	r3, [sp, #20]
 80122ae:	e00d      	b.n	80122cc <__gethex+0x24a>
 80122b0:	9b05      	ldr	r3, [sp, #20]
 80122b2:	9a08      	ldr	r2, [sp, #32]
 80122b4:	4413      	add	r3, r2
 80122b6:	42bb      	cmp	r3, r7
 80122b8:	d3e1      	bcc.n	801227e <__gethex+0x1fc>
 80122ba:	4618      	mov	r0, r3
 80122bc:	9a01      	ldr	r2, [sp, #4]
 80122be:	9903      	ldr	r1, [sp, #12]
 80122c0:	9309      	str	r3, [sp, #36]	; 0x24
 80122c2:	f001 fd0f 	bl	8013ce4 <strncmp>
 80122c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d1d8      	bne.n	801227e <__gethex+0x1fc>
 80122cc:	461e      	mov	r6, r3
 80122ce:	e791      	b.n	80121f4 <__gethex+0x172>
 80122d0:	1eb9      	subs	r1, r7, #2
 80122d2:	4628      	mov	r0, r5
 80122d4:	f000 fe46 	bl	8012f64 <__any_on>
 80122d8:	2800      	cmp	r0, #0
 80122da:	d0b2      	beq.n	8012242 <__gethex+0x1c0>
 80122dc:	f04f 0a03 	mov.w	sl, #3
 80122e0:	e7b1      	b.n	8012246 <__gethex+0x1c4>
 80122e2:	da09      	bge.n	80122f8 <__gethex+0x276>
 80122e4:	1bf7      	subs	r7, r6, r7
 80122e6:	4629      	mov	r1, r5
 80122e8:	463a      	mov	r2, r7
 80122ea:	9802      	ldr	r0, [sp, #8]
 80122ec:	f000 fc5c 	bl	8012ba8 <__lshift>
 80122f0:	1be4      	subs	r4, r4, r7
 80122f2:	4605      	mov	r5, r0
 80122f4:	f100 0914 	add.w	r9, r0, #20
 80122f8:	f04f 0a00 	mov.w	sl, #0
 80122fc:	e7a8      	b.n	8012250 <__gethex+0x1ce>
 80122fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012302:	42a0      	cmp	r0, r4
 8012304:	dd6a      	ble.n	80123dc <__gethex+0x35a>
 8012306:	1b04      	subs	r4, r0, r4
 8012308:	42a6      	cmp	r6, r4
 801230a:	dc2e      	bgt.n	801236a <__gethex+0x2e8>
 801230c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012310:	2b02      	cmp	r3, #2
 8012312:	d022      	beq.n	801235a <__gethex+0x2d8>
 8012314:	2b03      	cmp	r3, #3
 8012316:	d024      	beq.n	8012362 <__gethex+0x2e0>
 8012318:	2b01      	cmp	r3, #1
 801231a:	d115      	bne.n	8012348 <__gethex+0x2c6>
 801231c:	42a6      	cmp	r6, r4
 801231e:	d113      	bne.n	8012348 <__gethex+0x2c6>
 8012320:	2e01      	cmp	r6, #1
 8012322:	dc0b      	bgt.n	801233c <__gethex+0x2ba>
 8012324:	9a06      	ldr	r2, [sp, #24]
 8012326:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801232a:	6013      	str	r3, [r2, #0]
 801232c:	2301      	movs	r3, #1
 801232e:	612b      	str	r3, [r5, #16]
 8012330:	f8c9 3000 	str.w	r3, [r9]
 8012334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012336:	2762      	movs	r7, #98	; 0x62
 8012338:	601d      	str	r5, [r3, #0]
 801233a:	e72a      	b.n	8012192 <__gethex+0x110>
 801233c:	1e71      	subs	r1, r6, #1
 801233e:	4628      	mov	r0, r5
 8012340:	f000 fe10 	bl	8012f64 <__any_on>
 8012344:	2800      	cmp	r0, #0
 8012346:	d1ed      	bne.n	8012324 <__gethex+0x2a2>
 8012348:	4629      	mov	r1, r5
 801234a:	9802      	ldr	r0, [sp, #8]
 801234c:	f000 fa61 	bl	8012812 <_Bfree>
 8012350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012352:	2300      	movs	r3, #0
 8012354:	6013      	str	r3, [r2, #0]
 8012356:	2750      	movs	r7, #80	; 0x50
 8012358:	e71b      	b.n	8012192 <__gethex+0x110>
 801235a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801235c:	2b00      	cmp	r3, #0
 801235e:	d0e1      	beq.n	8012324 <__gethex+0x2a2>
 8012360:	e7f2      	b.n	8012348 <__gethex+0x2c6>
 8012362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1dd      	bne.n	8012324 <__gethex+0x2a2>
 8012368:	e7ee      	b.n	8012348 <__gethex+0x2c6>
 801236a:	1e67      	subs	r7, r4, #1
 801236c:	f1ba 0f00 	cmp.w	sl, #0
 8012370:	d131      	bne.n	80123d6 <__gethex+0x354>
 8012372:	b127      	cbz	r7, 801237e <__gethex+0x2fc>
 8012374:	4639      	mov	r1, r7
 8012376:	4628      	mov	r0, r5
 8012378:	f000 fdf4 	bl	8012f64 <__any_on>
 801237c:	4682      	mov	sl, r0
 801237e:	117a      	asrs	r2, r7, #5
 8012380:	2301      	movs	r3, #1
 8012382:	f007 071f 	and.w	r7, r7, #31
 8012386:	fa03 f707 	lsl.w	r7, r3, r7
 801238a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801238e:	4621      	mov	r1, r4
 8012390:	421f      	tst	r7, r3
 8012392:	4628      	mov	r0, r5
 8012394:	bf18      	it	ne
 8012396:	f04a 0a02 	orrne.w	sl, sl, #2
 801239a:	1b36      	subs	r6, r6, r4
 801239c:	f7ff fe22 	bl	8011fe4 <rshift>
 80123a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80123a4:	2702      	movs	r7, #2
 80123a6:	f1ba 0f00 	cmp.w	sl, #0
 80123aa:	d048      	beq.n	801243e <__gethex+0x3bc>
 80123ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80123b0:	2b02      	cmp	r3, #2
 80123b2:	d015      	beq.n	80123e0 <__gethex+0x35e>
 80123b4:	2b03      	cmp	r3, #3
 80123b6:	d017      	beq.n	80123e8 <__gethex+0x366>
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d109      	bne.n	80123d0 <__gethex+0x34e>
 80123bc:	f01a 0f02 	tst.w	sl, #2
 80123c0:	d006      	beq.n	80123d0 <__gethex+0x34e>
 80123c2:	f8d9 3000 	ldr.w	r3, [r9]
 80123c6:	ea4a 0a03 	orr.w	sl, sl, r3
 80123ca:	f01a 0f01 	tst.w	sl, #1
 80123ce:	d10e      	bne.n	80123ee <__gethex+0x36c>
 80123d0:	f047 0710 	orr.w	r7, r7, #16
 80123d4:	e033      	b.n	801243e <__gethex+0x3bc>
 80123d6:	f04f 0a01 	mov.w	sl, #1
 80123da:	e7d0      	b.n	801237e <__gethex+0x2fc>
 80123dc:	2701      	movs	r7, #1
 80123de:	e7e2      	b.n	80123a6 <__gethex+0x324>
 80123e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80123e2:	f1c3 0301 	rsb	r3, r3, #1
 80123e6:	9315      	str	r3, [sp, #84]	; 0x54
 80123e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d0f0      	beq.n	80123d0 <__gethex+0x34e>
 80123ee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80123f2:	f105 0314 	add.w	r3, r5, #20
 80123f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80123fa:	eb03 010a 	add.w	r1, r3, sl
 80123fe:	f04f 0c00 	mov.w	ip, #0
 8012402:	4618      	mov	r0, r3
 8012404:	f853 2b04 	ldr.w	r2, [r3], #4
 8012408:	f1b2 3fff 	cmp.w	r2, #4294967295
 801240c:	d01c      	beq.n	8012448 <__gethex+0x3c6>
 801240e:	3201      	adds	r2, #1
 8012410:	6002      	str	r2, [r0, #0]
 8012412:	2f02      	cmp	r7, #2
 8012414:	f105 0314 	add.w	r3, r5, #20
 8012418:	d138      	bne.n	801248c <__gethex+0x40a>
 801241a:	f8d8 2000 	ldr.w	r2, [r8]
 801241e:	3a01      	subs	r2, #1
 8012420:	42b2      	cmp	r2, r6
 8012422:	d10a      	bne.n	801243a <__gethex+0x3b8>
 8012424:	1171      	asrs	r1, r6, #5
 8012426:	2201      	movs	r2, #1
 8012428:	f006 061f 	and.w	r6, r6, #31
 801242c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012430:	fa02 f606 	lsl.w	r6, r2, r6
 8012434:	421e      	tst	r6, r3
 8012436:	bf18      	it	ne
 8012438:	4617      	movne	r7, r2
 801243a:	f047 0720 	orr.w	r7, r7, #32
 801243e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012440:	601d      	str	r5, [r3, #0]
 8012442:	9b06      	ldr	r3, [sp, #24]
 8012444:	601c      	str	r4, [r3, #0]
 8012446:	e6a4      	b.n	8012192 <__gethex+0x110>
 8012448:	4299      	cmp	r1, r3
 801244a:	f843 cc04 	str.w	ip, [r3, #-4]
 801244e:	d8d8      	bhi.n	8012402 <__gethex+0x380>
 8012450:	68ab      	ldr	r3, [r5, #8]
 8012452:	4599      	cmp	r9, r3
 8012454:	db12      	blt.n	801247c <__gethex+0x3fa>
 8012456:	6869      	ldr	r1, [r5, #4]
 8012458:	9802      	ldr	r0, [sp, #8]
 801245a:	3101      	adds	r1, #1
 801245c:	f000 f9a5 	bl	80127aa <_Balloc>
 8012460:	692a      	ldr	r2, [r5, #16]
 8012462:	3202      	adds	r2, #2
 8012464:	f105 010c 	add.w	r1, r5, #12
 8012468:	4683      	mov	fp, r0
 801246a:	0092      	lsls	r2, r2, #2
 801246c:	300c      	adds	r0, #12
 801246e:	f000 f991 	bl	8012794 <memcpy>
 8012472:	4629      	mov	r1, r5
 8012474:	9802      	ldr	r0, [sp, #8]
 8012476:	f000 f9cc 	bl	8012812 <_Bfree>
 801247a:	465d      	mov	r5, fp
 801247c:	692b      	ldr	r3, [r5, #16]
 801247e:	1c5a      	adds	r2, r3, #1
 8012480:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012484:	612a      	str	r2, [r5, #16]
 8012486:	2201      	movs	r2, #1
 8012488:	615a      	str	r2, [r3, #20]
 801248a:	e7c2      	b.n	8012412 <__gethex+0x390>
 801248c:	692a      	ldr	r2, [r5, #16]
 801248e:	454a      	cmp	r2, r9
 8012490:	dd0b      	ble.n	80124aa <__gethex+0x428>
 8012492:	2101      	movs	r1, #1
 8012494:	4628      	mov	r0, r5
 8012496:	f7ff fda5 	bl	8011fe4 <rshift>
 801249a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801249e:	3401      	adds	r4, #1
 80124a0:	42a3      	cmp	r3, r4
 80124a2:	f6ff aed9 	blt.w	8012258 <__gethex+0x1d6>
 80124a6:	2701      	movs	r7, #1
 80124a8:	e7c7      	b.n	801243a <__gethex+0x3b8>
 80124aa:	f016 061f 	ands.w	r6, r6, #31
 80124ae:	d0fa      	beq.n	80124a6 <__gethex+0x424>
 80124b0:	449a      	add	sl, r3
 80124b2:	f1c6 0620 	rsb	r6, r6, #32
 80124b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80124ba:	f000 fa3a 	bl	8012932 <__hi0bits>
 80124be:	42b0      	cmp	r0, r6
 80124c0:	dbe7      	blt.n	8012492 <__gethex+0x410>
 80124c2:	e7f0      	b.n	80124a6 <__gethex+0x424>

080124c4 <L_shift>:
 80124c4:	f1c2 0208 	rsb	r2, r2, #8
 80124c8:	0092      	lsls	r2, r2, #2
 80124ca:	b570      	push	{r4, r5, r6, lr}
 80124cc:	f1c2 0620 	rsb	r6, r2, #32
 80124d0:	6843      	ldr	r3, [r0, #4]
 80124d2:	6804      	ldr	r4, [r0, #0]
 80124d4:	fa03 f506 	lsl.w	r5, r3, r6
 80124d8:	432c      	orrs	r4, r5
 80124da:	40d3      	lsrs	r3, r2
 80124dc:	6004      	str	r4, [r0, #0]
 80124de:	f840 3f04 	str.w	r3, [r0, #4]!
 80124e2:	4288      	cmp	r0, r1
 80124e4:	d3f4      	bcc.n	80124d0 <L_shift+0xc>
 80124e6:	bd70      	pop	{r4, r5, r6, pc}

080124e8 <__match>:
 80124e8:	b530      	push	{r4, r5, lr}
 80124ea:	6803      	ldr	r3, [r0, #0]
 80124ec:	3301      	adds	r3, #1
 80124ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124f2:	b914      	cbnz	r4, 80124fa <__match+0x12>
 80124f4:	6003      	str	r3, [r0, #0]
 80124f6:	2001      	movs	r0, #1
 80124f8:	bd30      	pop	{r4, r5, pc}
 80124fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012502:	2d19      	cmp	r5, #25
 8012504:	bf98      	it	ls
 8012506:	3220      	addls	r2, #32
 8012508:	42a2      	cmp	r2, r4
 801250a:	d0f0      	beq.n	80124ee <__match+0x6>
 801250c:	2000      	movs	r0, #0
 801250e:	e7f3      	b.n	80124f8 <__match+0x10>

08012510 <__hexnan>:
 8012510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	680b      	ldr	r3, [r1, #0]
 8012516:	6801      	ldr	r1, [r0, #0]
 8012518:	115f      	asrs	r7, r3, #5
 801251a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801251e:	f013 031f 	ands.w	r3, r3, #31
 8012522:	b087      	sub	sp, #28
 8012524:	bf18      	it	ne
 8012526:	3704      	addne	r7, #4
 8012528:	2500      	movs	r5, #0
 801252a:	1f3e      	subs	r6, r7, #4
 801252c:	4682      	mov	sl, r0
 801252e:	4690      	mov	r8, r2
 8012530:	9301      	str	r3, [sp, #4]
 8012532:	f847 5c04 	str.w	r5, [r7, #-4]
 8012536:	46b1      	mov	r9, r6
 8012538:	4634      	mov	r4, r6
 801253a:	9502      	str	r5, [sp, #8]
 801253c:	46ab      	mov	fp, r5
 801253e:	784a      	ldrb	r2, [r1, #1]
 8012540:	1c4b      	adds	r3, r1, #1
 8012542:	9303      	str	r3, [sp, #12]
 8012544:	b342      	cbz	r2, 8012598 <__hexnan+0x88>
 8012546:	4610      	mov	r0, r2
 8012548:	9105      	str	r1, [sp, #20]
 801254a:	9204      	str	r2, [sp, #16]
 801254c:	f7ff fd84 	bl	8012058 <__hexdig_fun>
 8012550:	2800      	cmp	r0, #0
 8012552:	d143      	bne.n	80125dc <__hexnan+0xcc>
 8012554:	9a04      	ldr	r2, [sp, #16]
 8012556:	9905      	ldr	r1, [sp, #20]
 8012558:	2a20      	cmp	r2, #32
 801255a:	d818      	bhi.n	801258e <__hexnan+0x7e>
 801255c:	9b02      	ldr	r3, [sp, #8]
 801255e:	459b      	cmp	fp, r3
 8012560:	dd13      	ble.n	801258a <__hexnan+0x7a>
 8012562:	454c      	cmp	r4, r9
 8012564:	d206      	bcs.n	8012574 <__hexnan+0x64>
 8012566:	2d07      	cmp	r5, #7
 8012568:	dc04      	bgt.n	8012574 <__hexnan+0x64>
 801256a:	462a      	mov	r2, r5
 801256c:	4649      	mov	r1, r9
 801256e:	4620      	mov	r0, r4
 8012570:	f7ff ffa8 	bl	80124c4 <L_shift>
 8012574:	4544      	cmp	r4, r8
 8012576:	d944      	bls.n	8012602 <__hexnan+0xf2>
 8012578:	2300      	movs	r3, #0
 801257a:	f1a4 0904 	sub.w	r9, r4, #4
 801257e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012582:	f8cd b008 	str.w	fp, [sp, #8]
 8012586:	464c      	mov	r4, r9
 8012588:	461d      	mov	r5, r3
 801258a:	9903      	ldr	r1, [sp, #12]
 801258c:	e7d7      	b.n	801253e <__hexnan+0x2e>
 801258e:	2a29      	cmp	r2, #41	; 0x29
 8012590:	d14a      	bne.n	8012628 <__hexnan+0x118>
 8012592:	3102      	adds	r1, #2
 8012594:	f8ca 1000 	str.w	r1, [sl]
 8012598:	f1bb 0f00 	cmp.w	fp, #0
 801259c:	d044      	beq.n	8012628 <__hexnan+0x118>
 801259e:	454c      	cmp	r4, r9
 80125a0:	d206      	bcs.n	80125b0 <__hexnan+0xa0>
 80125a2:	2d07      	cmp	r5, #7
 80125a4:	dc04      	bgt.n	80125b0 <__hexnan+0xa0>
 80125a6:	462a      	mov	r2, r5
 80125a8:	4649      	mov	r1, r9
 80125aa:	4620      	mov	r0, r4
 80125ac:	f7ff ff8a 	bl	80124c4 <L_shift>
 80125b0:	4544      	cmp	r4, r8
 80125b2:	d928      	bls.n	8012606 <__hexnan+0xf6>
 80125b4:	4643      	mov	r3, r8
 80125b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80125ba:	f843 2b04 	str.w	r2, [r3], #4
 80125be:	42a6      	cmp	r6, r4
 80125c0:	d2f9      	bcs.n	80125b6 <__hexnan+0xa6>
 80125c2:	2200      	movs	r2, #0
 80125c4:	f843 2b04 	str.w	r2, [r3], #4
 80125c8:	429e      	cmp	r6, r3
 80125ca:	d2fb      	bcs.n	80125c4 <__hexnan+0xb4>
 80125cc:	6833      	ldr	r3, [r6, #0]
 80125ce:	b91b      	cbnz	r3, 80125d8 <__hexnan+0xc8>
 80125d0:	4546      	cmp	r6, r8
 80125d2:	d127      	bne.n	8012624 <__hexnan+0x114>
 80125d4:	2301      	movs	r3, #1
 80125d6:	6033      	str	r3, [r6, #0]
 80125d8:	2005      	movs	r0, #5
 80125da:	e026      	b.n	801262a <__hexnan+0x11a>
 80125dc:	3501      	adds	r5, #1
 80125de:	2d08      	cmp	r5, #8
 80125e0:	f10b 0b01 	add.w	fp, fp, #1
 80125e4:	dd06      	ble.n	80125f4 <__hexnan+0xe4>
 80125e6:	4544      	cmp	r4, r8
 80125e8:	d9cf      	bls.n	801258a <__hexnan+0x7a>
 80125ea:	2300      	movs	r3, #0
 80125ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80125f0:	2501      	movs	r5, #1
 80125f2:	3c04      	subs	r4, #4
 80125f4:	6822      	ldr	r2, [r4, #0]
 80125f6:	f000 000f 	and.w	r0, r0, #15
 80125fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80125fe:	6020      	str	r0, [r4, #0]
 8012600:	e7c3      	b.n	801258a <__hexnan+0x7a>
 8012602:	2508      	movs	r5, #8
 8012604:	e7c1      	b.n	801258a <__hexnan+0x7a>
 8012606:	9b01      	ldr	r3, [sp, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d0df      	beq.n	80125cc <__hexnan+0xbc>
 801260c:	f04f 32ff 	mov.w	r2, #4294967295
 8012610:	f1c3 0320 	rsb	r3, r3, #32
 8012614:	fa22 f303 	lsr.w	r3, r2, r3
 8012618:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801261c:	401a      	ands	r2, r3
 801261e:	f847 2c04 	str.w	r2, [r7, #-4]
 8012622:	e7d3      	b.n	80125cc <__hexnan+0xbc>
 8012624:	3e04      	subs	r6, #4
 8012626:	e7d1      	b.n	80125cc <__hexnan+0xbc>
 8012628:	2004      	movs	r0, #4
 801262a:	b007      	add	sp, #28
 801262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012630 <__locale_ctype_ptr_l>:
 8012630:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012634:	4770      	bx	lr
	...

08012638 <__locale_ctype_ptr>:
 8012638:	4b04      	ldr	r3, [pc, #16]	; (801264c <__locale_ctype_ptr+0x14>)
 801263a:	4a05      	ldr	r2, [pc, #20]	; (8012650 <__locale_ctype_ptr+0x18>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	6a1b      	ldr	r3, [r3, #32]
 8012640:	2b00      	cmp	r3, #0
 8012642:	bf08      	it	eq
 8012644:	4613      	moveq	r3, r2
 8012646:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801264a:	4770      	bx	lr
 801264c:	2000000c 	.word	0x2000000c
 8012650:	20000070 	.word	0x20000070

08012654 <__localeconv_l>:
 8012654:	30f0      	adds	r0, #240	; 0xf0
 8012656:	4770      	bx	lr

08012658 <_localeconv_r>:
 8012658:	4b04      	ldr	r3, [pc, #16]	; (801266c <_localeconv_r+0x14>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	6a18      	ldr	r0, [r3, #32]
 801265e:	4b04      	ldr	r3, [pc, #16]	; (8012670 <_localeconv_r+0x18>)
 8012660:	2800      	cmp	r0, #0
 8012662:	bf08      	it	eq
 8012664:	4618      	moveq	r0, r3
 8012666:	30f0      	adds	r0, #240	; 0xf0
 8012668:	4770      	bx	lr
 801266a:	bf00      	nop
 801266c:	2000000c 	.word	0x2000000c
 8012670:	20000070 	.word	0x20000070

08012674 <_lseek_r>:
 8012674:	b538      	push	{r3, r4, r5, lr}
 8012676:	4c07      	ldr	r4, [pc, #28]	; (8012694 <_lseek_r+0x20>)
 8012678:	4605      	mov	r5, r0
 801267a:	4608      	mov	r0, r1
 801267c:	4611      	mov	r1, r2
 801267e:	2200      	movs	r2, #0
 8012680:	6022      	str	r2, [r4, #0]
 8012682:	461a      	mov	r2, r3
 8012684:	f7f1 fc44 	bl	8003f10 <_lseek>
 8012688:	1c43      	adds	r3, r0, #1
 801268a:	d102      	bne.n	8012692 <_lseek_r+0x1e>
 801268c:	6823      	ldr	r3, [r4, #0]
 801268e:	b103      	cbz	r3, 8012692 <_lseek_r+0x1e>
 8012690:	602b      	str	r3, [r5, #0]
 8012692:	bd38      	pop	{r3, r4, r5, pc}
 8012694:	20005098 	.word	0x20005098

08012698 <__swhatbuf_r>:
 8012698:	b570      	push	{r4, r5, r6, lr}
 801269a:	460e      	mov	r6, r1
 801269c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126a0:	2900      	cmp	r1, #0
 80126a2:	b096      	sub	sp, #88	; 0x58
 80126a4:	4614      	mov	r4, r2
 80126a6:	461d      	mov	r5, r3
 80126a8:	da07      	bge.n	80126ba <__swhatbuf_r+0x22>
 80126aa:	2300      	movs	r3, #0
 80126ac:	602b      	str	r3, [r5, #0]
 80126ae:	89b3      	ldrh	r3, [r6, #12]
 80126b0:	061a      	lsls	r2, r3, #24
 80126b2:	d410      	bmi.n	80126d6 <__swhatbuf_r+0x3e>
 80126b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126b8:	e00e      	b.n	80126d8 <__swhatbuf_r+0x40>
 80126ba:	466a      	mov	r2, sp
 80126bc:	f001 fbf8 	bl	8013eb0 <_fstat_r>
 80126c0:	2800      	cmp	r0, #0
 80126c2:	dbf2      	blt.n	80126aa <__swhatbuf_r+0x12>
 80126c4:	9a01      	ldr	r2, [sp, #4]
 80126c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80126ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80126ce:	425a      	negs	r2, r3
 80126d0:	415a      	adcs	r2, r3
 80126d2:	602a      	str	r2, [r5, #0]
 80126d4:	e7ee      	b.n	80126b4 <__swhatbuf_r+0x1c>
 80126d6:	2340      	movs	r3, #64	; 0x40
 80126d8:	2000      	movs	r0, #0
 80126da:	6023      	str	r3, [r4, #0]
 80126dc:	b016      	add	sp, #88	; 0x58
 80126de:	bd70      	pop	{r4, r5, r6, pc}

080126e0 <__smakebuf_r>:
 80126e0:	898b      	ldrh	r3, [r1, #12]
 80126e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126e4:	079d      	lsls	r5, r3, #30
 80126e6:	4606      	mov	r6, r0
 80126e8:	460c      	mov	r4, r1
 80126ea:	d507      	bpl.n	80126fc <__smakebuf_r+0x1c>
 80126ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	6123      	str	r3, [r4, #16]
 80126f4:	2301      	movs	r3, #1
 80126f6:	6163      	str	r3, [r4, #20]
 80126f8:	b002      	add	sp, #8
 80126fa:	bd70      	pop	{r4, r5, r6, pc}
 80126fc:	ab01      	add	r3, sp, #4
 80126fe:	466a      	mov	r2, sp
 8012700:	f7ff ffca 	bl	8012698 <__swhatbuf_r>
 8012704:	9900      	ldr	r1, [sp, #0]
 8012706:	4605      	mov	r5, r0
 8012708:	4630      	mov	r0, r6
 801270a:	f000 fca9 	bl	8013060 <_malloc_r>
 801270e:	b948      	cbnz	r0, 8012724 <__smakebuf_r+0x44>
 8012710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012714:	059a      	lsls	r2, r3, #22
 8012716:	d4ef      	bmi.n	80126f8 <__smakebuf_r+0x18>
 8012718:	f023 0303 	bic.w	r3, r3, #3
 801271c:	f043 0302 	orr.w	r3, r3, #2
 8012720:	81a3      	strh	r3, [r4, #12]
 8012722:	e7e3      	b.n	80126ec <__smakebuf_r+0xc>
 8012724:	4b0d      	ldr	r3, [pc, #52]	; (801275c <__smakebuf_r+0x7c>)
 8012726:	62b3      	str	r3, [r6, #40]	; 0x28
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	6020      	str	r0, [r4, #0]
 801272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012730:	81a3      	strh	r3, [r4, #12]
 8012732:	9b00      	ldr	r3, [sp, #0]
 8012734:	6163      	str	r3, [r4, #20]
 8012736:	9b01      	ldr	r3, [sp, #4]
 8012738:	6120      	str	r0, [r4, #16]
 801273a:	b15b      	cbz	r3, 8012754 <__smakebuf_r+0x74>
 801273c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012740:	4630      	mov	r0, r6
 8012742:	f001 fbc7 	bl	8013ed4 <_isatty_r>
 8012746:	b128      	cbz	r0, 8012754 <__smakebuf_r+0x74>
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	f023 0303 	bic.w	r3, r3, #3
 801274e:	f043 0301 	orr.w	r3, r3, #1
 8012752:	81a3      	strh	r3, [r4, #12]
 8012754:	89a3      	ldrh	r3, [r4, #12]
 8012756:	431d      	orrs	r5, r3
 8012758:	81a5      	strh	r5, [r4, #12]
 801275a:	e7cd      	b.n	80126f8 <__smakebuf_r+0x18>
 801275c:	08011e99 	.word	0x08011e99

08012760 <malloc>:
 8012760:	4b02      	ldr	r3, [pc, #8]	; (801276c <malloc+0xc>)
 8012762:	4601      	mov	r1, r0
 8012764:	6818      	ldr	r0, [r3, #0]
 8012766:	f000 bc7b 	b.w	8013060 <_malloc_r>
 801276a:	bf00      	nop
 801276c:	2000000c 	.word	0x2000000c

08012770 <__ascii_mbtowc>:
 8012770:	b082      	sub	sp, #8
 8012772:	b901      	cbnz	r1, 8012776 <__ascii_mbtowc+0x6>
 8012774:	a901      	add	r1, sp, #4
 8012776:	b142      	cbz	r2, 801278a <__ascii_mbtowc+0x1a>
 8012778:	b14b      	cbz	r3, 801278e <__ascii_mbtowc+0x1e>
 801277a:	7813      	ldrb	r3, [r2, #0]
 801277c:	600b      	str	r3, [r1, #0]
 801277e:	7812      	ldrb	r2, [r2, #0]
 8012780:	1c10      	adds	r0, r2, #0
 8012782:	bf18      	it	ne
 8012784:	2001      	movne	r0, #1
 8012786:	b002      	add	sp, #8
 8012788:	4770      	bx	lr
 801278a:	4610      	mov	r0, r2
 801278c:	e7fb      	b.n	8012786 <__ascii_mbtowc+0x16>
 801278e:	f06f 0001 	mvn.w	r0, #1
 8012792:	e7f8      	b.n	8012786 <__ascii_mbtowc+0x16>

08012794 <memcpy>:
 8012794:	b510      	push	{r4, lr}
 8012796:	1e43      	subs	r3, r0, #1
 8012798:	440a      	add	r2, r1
 801279a:	4291      	cmp	r1, r2
 801279c:	d100      	bne.n	80127a0 <memcpy+0xc>
 801279e:	bd10      	pop	{r4, pc}
 80127a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127a8:	e7f7      	b.n	801279a <memcpy+0x6>

080127aa <_Balloc>:
 80127aa:	b570      	push	{r4, r5, r6, lr}
 80127ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80127ae:	4604      	mov	r4, r0
 80127b0:	460e      	mov	r6, r1
 80127b2:	b93d      	cbnz	r5, 80127c4 <_Balloc+0x1a>
 80127b4:	2010      	movs	r0, #16
 80127b6:	f7ff ffd3 	bl	8012760 <malloc>
 80127ba:	6260      	str	r0, [r4, #36]	; 0x24
 80127bc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80127c0:	6005      	str	r5, [r0, #0]
 80127c2:	60c5      	str	r5, [r0, #12]
 80127c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80127c6:	68eb      	ldr	r3, [r5, #12]
 80127c8:	b183      	cbz	r3, 80127ec <_Balloc+0x42>
 80127ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80127d2:	b9b8      	cbnz	r0, 8012804 <_Balloc+0x5a>
 80127d4:	2101      	movs	r1, #1
 80127d6:	fa01 f506 	lsl.w	r5, r1, r6
 80127da:	1d6a      	adds	r2, r5, #5
 80127dc:	0092      	lsls	r2, r2, #2
 80127de:	4620      	mov	r0, r4
 80127e0:	f000 fbe1 	bl	8012fa6 <_calloc_r>
 80127e4:	b160      	cbz	r0, 8012800 <_Balloc+0x56>
 80127e6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80127ea:	e00e      	b.n	801280a <_Balloc+0x60>
 80127ec:	2221      	movs	r2, #33	; 0x21
 80127ee:	2104      	movs	r1, #4
 80127f0:	4620      	mov	r0, r4
 80127f2:	f000 fbd8 	bl	8012fa6 <_calloc_r>
 80127f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127f8:	60e8      	str	r0, [r5, #12]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d1e4      	bne.n	80127ca <_Balloc+0x20>
 8012800:	2000      	movs	r0, #0
 8012802:	bd70      	pop	{r4, r5, r6, pc}
 8012804:	6802      	ldr	r2, [r0, #0]
 8012806:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801280a:	2300      	movs	r3, #0
 801280c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012810:	e7f7      	b.n	8012802 <_Balloc+0x58>

08012812 <_Bfree>:
 8012812:	b570      	push	{r4, r5, r6, lr}
 8012814:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012816:	4606      	mov	r6, r0
 8012818:	460d      	mov	r5, r1
 801281a:	b93c      	cbnz	r4, 801282c <_Bfree+0x1a>
 801281c:	2010      	movs	r0, #16
 801281e:	f7ff ff9f 	bl	8012760 <malloc>
 8012822:	6270      	str	r0, [r6, #36]	; 0x24
 8012824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012828:	6004      	str	r4, [r0, #0]
 801282a:	60c4      	str	r4, [r0, #12]
 801282c:	b13d      	cbz	r5, 801283e <_Bfree+0x2c>
 801282e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012830:	686a      	ldr	r2, [r5, #4]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012838:	6029      	str	r1, [r5, #0]
 801283a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801283e:	bd70      	pop	{r4, r5, r6, pc}

08012840 <__multadd>:
 8012840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012844:	690d      	ldr	r5, [r1, #16]
 8012846:	461f      	mov	r7, r3
 8012848:	4606      	mov	r6, r0
 801284a:	460c      	mov	r4, r1
 801284c:	f101 0c14 	add.w	ip, r1, #20
 8012850:	2300      	movs	r3, #0
 8012852:	f8dc 0000 	ldr.w	r0, [ip]
 8012856:	b281      	uxth	r1, r0
 8012858:	fb02 7101 	mla	r1, r2, r1, r7
 801285c:	0c0f      	lsrs	r7, r1, #16
 801285e:	0c00      	lsrs	r0, r0, #16
 8012860:	fb02 7000 	mla	r0, r2, r0, r7
 8012864:	b289      	uxth	r1, r1
 8012866:	3301      	adds	r3, #1
 8012868:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801286c:	429d      	cmp	r5, r3
 801286e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012872:	f84c 1b04 	str.w	r1, [ip], #4
 8012876:	dcec      	bgt.n	8012852 <__multadd+0x12>
 8012878:	b1d7      	cbz	r7, 80128b0 <__multadd+0x70>
 801287a:	68a3      	ldr	r3, [r4, #8]
 801287c:	42ab      	cmp	r3, r5
 801287e:	dc12      	bgt.n	80128a6 <__multadd+0x66>
 8012880:	6861      	ldr	r1, [r4, #4]
 8012882:	4630      	mov	r0, r6
 8012884:	3101      	adds	r1, #1
 8012886:	f7ff ff90 	bl	80127aa <_Balloc>
 801288a:	6922      	ldr	r2, [r4, #16]
 801288c:	3202      	adds	r2, #2
 801288e:	f104 010c 	add.w	r1, r4, #12
 8012892:	4680      	mov	r8, r0
 8012894:	0092      	lsls	r2, r2, #2
 8012896:	300c      	adds	r0, #12
 8012898:	f7ff ff7c 	bl	8012794 <memcpy>
 801289c:	4621      	mov	r1, r4
 801289e:	4630      	mov	r0, r6
 80128a0:	f7ff ffb7 	bl	8012812 <_Bfree>
 80128a4:	4644      	mov	r4, r8
 80128a6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80128aa:	3501      	adds	r5, #1
 80128ac:	615f      	str	r7, [r3, #20]
 80128ae:	6125      	str	r5, [r4, #16]
 80128b0:	4620      	mov	r0, r4
 80128b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080128b6 <__s2b>:
 80128b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128ba:	460c      	mov	r4, r1
 80128bc:	4615      	mov	r5, r2
 80128be:	461f      	mov	r7, r3
 80128c0:	2209      	movs	r2, #9
 80128c2:	3308      	adds	r3, #8
 80128c4:	4606      	mov	r6, r0
 80128c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80128ca:	2100      	movs	r1, #0
 80128cc:	2201      	movs	r2, #1
 80128ce:	429a      	cmp	r2, r3
 80128d0:	db20      	blt.n	8012914 <__s2b+0x5e>
 80128d2:	4630      	mov	r0, r6
 80128d4:	f7ff ff69 	bl	80127aa <_Balloc>
 80128d8:	9b08      	ldr	r3, [sp, #32]
 80128da:	6143      	str	r3, [r0, #20]
 80128dc:	2d09      	cmp	r5, #9
 80128de:	f04f 0301 	mov.w	r3, #1
 80128e2:	6103      	str	r3, [r0, #16]
 80128e4:	dd19      	ble.n	801291a <__s2b+0x64>
 80128e6:	f104 0809 	add.w	r8, r4, #9
 80128ea:	46c1      	mov	r9, r8
 80128ec:	442c      	add	r4, r5
 80128ee:	f819 3b01 	ldrb.w	r3, [r9], #1
 80128f2:	4601      	mov	r1, r0
 80128f4:	3b30      	subs	r3, #48	; 0x30
 80128f6:	220a      	movs	r2, #10
 80128f8:	4630      	mov	r0, r6
 80128fa:	f7ff ffa1 	bl	8012840 <__multadd>
 80128fe:	45a1      	cmp	r9, r4
 8012900:	d1f5      	bne.n	80128ee <__s2b+0x38>
 8012902:	eb08 0405 	add.w	r4, r8, r5
 8012906:	3c08      	subs	r4, #8
 8012908:	1b2d      	subs	r5, r5, r4
 801290a:	1963      	adds	r3, r4, r5
 801290c:	42bb      	cmp	r3, r7
 801290e:	db07      	blt.n	8012920 <__s2b+0x6a>
 8012910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012914:	0052      	lsls	r2, r2, #1
 8012916:	3101      	adds	r1, #1
 8012918:	e7d9      	b.n	80128ce <__s2b+0x18>
 801291a:	340a      	adds	r4, #10
 801291c:	2509      	movs	r5, #9
 801291e:	e7f3      	b.n	8012908 <__s2b+0x52>
 8012920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012924:	4601      	mov	r1, r0
 8012926:	3b30      	subs	r3, #48	; 0x30
 8012928:	220a      	movs	r2, #10
 801292a:	4630      	mov	r0, r6
 801292c:	f7ff ff88 	bl	8012840 <__multadd>
 8012930:	e7eb      	b.n	801290a <__s2b+0x54>

08012932 <__hi0bits>:
 8012932:	0c02      	lsrs	r2, r0, #16
 8012934:	0412      	lsls	r2, r2, #16
 8012936:	4603      	mov	r3, r0
 8012938:	b9b2      	cbnz	r2, 8012968 <__hi0bits+0x36>
 801293a:	0403      	lsls	r3, r0, #16
 801293c:	2010      	movs	r0, #16
 801293e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012942:	bf04      	itt	eq
 8012944:	021b      	lsleq	r3, r3, #8
 8012946:	3008      	addeq	r0, #8
 8012948:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801294c:	bf04      	itt	eq
 801294e:	011b      	lsleq	r3, r3, #4
 8012950:	3004      	addeq	r0, #4
 8012952:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012956:	bf04      	itt	eq
 8012958:	009b      	lsleq	r3, r3, #2
 801295a:	3002      	addeq	r0, #2
 801295c:	2b00      	cmp	r3, #0
 801295e:	db06      	blt.n	801296e <__hi0bits+0x3c>
 8012960:	005b      	lsls	r3, r3, #1
 8012962:	d503      	bpl.n	801296c <__hi0bits+0x3a>
 8012964:	3001      	adds	r0, #1
 8012966:	4770      	bx	lr
 8012968:	2000      	movs	r0, #0
 801296a:	e7e8      	b.n	801293e <__hi0bits+0xc>
 801296c:	2020      	movs	r0, #32
 801296e:	4770      	bx	lr

08012970 <__lo0bits>:
 8012970:	6803      	ldr	r3, [r0, #0]
 8012972:	f013 0207 	ands.w	r2, r3, #7
 8012976:	4601      	mov	r1, r0
 8012978:	d00b      	beq.n	8012992 <__lo0bits+0x22>
 801297a:	07da      	lsls	r2, r3, #31
 801297c:	d423      	bmi.n	80129c6 <__lo0bits+0x56>
 801297e:	0798      	lsls	r0, r3, #30
 8012980:	bf49      	itett	mi
 8012982:	085b      	lsrmi	r3, r3, #1
 8012984:	089b      	lsrpl	r3, r3, #2
 8012986:	2001      	movmi	r0, #1
 8012988:	600b      	strmi	r3, [r1, #0]
 801298a:	bf5c      	itt	pl
 801298c:	600b      	strpl	r3, [r1, #0]
 801298e:	2002      	movpl	r0, #2
 8012990:	4770      	bx	lr
 8012992:	b298      	uxth	r0, r3
 8012994:	b9a8      	cbnz	r0, 80129c2 <__lo0bits+0x52>
 8012996:	0c1b      	lsrs	r3, r3, #16
 8012998:	2010      	movs	r0, #16
 801299a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801299e:	bf04      	itt	eq
 80129a0:	0a1b      	lsreq	r3, r3, #8
 80129a2:	3008      	addeq	r0, #8
 80129a4:	071a      	lsls	r2, r3, #28
 80129a6:	bf04      	itt	eq
 80129a8:	091b      	lsreq	r3, r3, #4
 80129aa:	3004      	addeq	r0, #4
 80129ac:	079a      	lsls	r2, r3, #30
 80129ae:	bf04      	itt	eq
 80129b0:	089b      	lsreq	r3, r3, #2
 80129b2:	3002      	addeq	r0, #2
 80129b4:	07da      	lsls	r2, r3, #31
 80129b6:	d402      	bmi.n	80129be <__lo0bits+0x4e>
 80129b8:	085b      	lsrs	r3, r3, #1
 80129ba:	d006      	beq.n	80129ca <__lo0bits+0x5a>
 80129bc:	3001      	adds	r0, #1
 80129be:	600b      	str	r3, [r1, #0]
 80129c0:	4770      	bx	lr
 80129c2:	4610      	mov	r0, r2
 80129c4:	e7e9      	b.n	801299a <__lo0bits+0x2a>
 80129c6:	2000      	movs	r0, #0
 80129c8:	4770      	bx	lr
 80129ca:	2020      	movs	r0, #32
 80129cc:	4770      	bx	lr

080129ce <__i2b>:
 80129ce:	b510      	push	{r4, lr}
 80129d0:	460c      	mov	r4, r1
 80129d2:	2101      	movs	r1, #1
 80129d4:	f7ff fee9 	bl	80127aa <_Balloc>
 80129d8:	2201      	movs	r2, #1
 80129da:	6144      	str	r4, [r0, #20]
 80129dc:	6102      	str	r2, [r0, #16]
 80129de:	bd10      	pop	{r4, pc}

080129e0 <__multiply>:
 80129e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	4614      	mov	r4, r2
 80129e6:	690a      	ldr	r2, [r1, #16]
 80129e8:	6923      	ldr	r3, [r4, #16]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	bfb8      	it	lt
 80129ee:	460b      	movlt	r3, r1
 80129f0:	4688      	mov	r8, r1
 80129f2:	bfbc      	itt	lt
 80129f4:	46a0      	movlt	r8, r4
 80129f6:	461c      	movlt	r4, r3
 80129f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80129fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012a00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012a08:	eb07 0609 	add.w	r6, r7, r9
 8012a0c:	42b3      	cmp	r3, r6
 8012a0e:	bfb8      	it	lt
 8012a10:	3101      	addlt	r1, #1
 8012a12:	f7ff feca 	bl	80127aa <_Balloc>
 8012a16:	f100 0514 	add.w	r5, r0, #20
 8012a1a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012a1e:	462b      	mov	r3, r5
 8012a20:	2200      	movs	r2, #0
 8012a22:	4573      	cmp	r3, lr
 8012a24:	d316      	bcc.n	8012a54 <__multiply+0x74>
 8012a26:	f104 0214 	add.w	r2, r4, #20
 8012a2a:	f108 0114 	add.w	r1, r8, #20
 8012a2e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012a32:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	9b00      	ldr	r3, [sp, #0]
 8012a3a:	9201      	str	r2, [sp, #4]
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	d80c      	bhi.n	8012a5a <__multiply+0x7a>
 8012a40:	2e00      	cmp	r6, #0
 8012a42:	dd03      	ble.n	8012a4c <__multiply+0x6c>
 8012a44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d05d      	beq.n	8012b08 <__multiply+0x128>
 8012a4c:	6106      	str	r6, [r0, #16]
 8012a4e:	b003      	add	sp, #12
 8012a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a54:	f843 2b04 	str.w	r2, [r3], #4
 8012a58:	e7e3      	b.n	8012a22 <__multiply+0x42>
 8012a5a:	f8b2 b000 	ldrh.w	fp, [r2]
 8012a5e:	f1bb 0f00 	cmp.w	fp, #0
 8012a62:	d023      	beq.n	8012aac <__multiply+0xcc>
 8012a64:	4689      	mov	r9, r1
 8012a66:	46ac      	mov	ip, r5
 8012a68:	f04f 0800 	mov.w	r8, #0
 8012a6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012a70:	f8dc a000 	ldr.w	sl, [ip]
 8012a74:	b2a3      	uxth	r3, r4
 8012a76:	fa1f fa8a 	uxth.w	sl, sl
 8012a7a:	fb0b a303 	mla	r3, fp, r3, sl
 8012a7e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012a82:	f8dc 4000 	ldr.w	r4, [ip]
 8012a86:	4443      	add	r3, r8
 8012a88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012a8c:	fb0b 840a 	mla	r4, fp, sl, r8
 8012a90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012a94:	46e2      	mov	sl, ip
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012a9c:	454f      	cmp	r7, r9
 8012a9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012aa2:	f84a 3b04 	str.w	r3, [sl], #4
 8012aa6:	d82b      	bhi.n	8012b00 <__multiply+0x120>
 8012aa8:	f8cc 8004 	str.w	r8, [ip, #4]
 8012aac:	9b01      	ldr	r3, [sp, #4]
 8012aae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012ab2:	3204      	adds	r2, #4
 8012ab4:	f1ba 0f00 	cmp.w	sl, #0
 8012ab8:	d020      	beq.n	8012afc <__multiply+0x11c>
 8012aba:	682b      	ldr	r3, [r5, #0]
 8012abc:	4689      	mov	r9, r1
 8012abe:	46a8      	mov	r8, r5
 8012ac0:	f04f 0b00 	mov.w	fp, #0
 8012ac4:	f8b9 c000 	ldrh.w	ip, [r9]
 8012ac8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012acc:	fb0a 440c 	mla	r4, sl, ip, r4
 8012ad0:	445c      	add	r4, fp
 8012ad2:	46c4      	mov	ip, r8
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012ada:	f84c 3b04 	str.w	r3, [ip], #4
 8012ade:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ae2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012ae6:	0c1b      	lsrs	r3, r3, #16
 8012ae8:	fb0a b303 	mla	r3, sl, r3, fp
 8012aec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012af0:	454f      	cmp	r7, r9
 8012af2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012af6:	d805      	bhi.n	8012b04 <__multiply+0x124>
 8012af8:	f8c8 3004 	str.w	r3, [r8, #4]
 8012afc:	3504      	adds	r5, #4
 8012afe:	e79b      	b.n	8012a38 <__multiply+0x58>
 8012b00:	46d4      	mov	ip, sl
 8012b02:	e7b3      	b.n	8012a6c <__multiply+0x8c>
 8012b04:	46e0      	mov	r8, ip
 8012b06:	e7dd      	b.n	8012ac4 <__multiply+0xe4>
 8012b08:	3e01      	subs	r6, #1
 8012b0a:	e799      	b.n	8012a40 <__multiply+0x60>

08012b0c <__pow5mult>:
 8012b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b10:	4615      	mov	r5, r2
 8012b12:	f012 0203 	ands.w	r2, r2, #3
 8012b16:	4606      	mov	r6, r0
 8012b18:	460f      	mov	r7, r1
 8012b1a:	d007      	beq.n	8012b2c <__pow5mult+0x20>
 8012b1c:	3a01      	subs	r2, #1
 8012b1e:	4c21      	ldr	r4, [pc, #132]	; (8012ba4 <__pow5mult+0x98>)
 8012b20:	2300      	movs	r3, #0
 8012b22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b26:	f7ff fe8b 	bl	8012840 <__multadd>
 8012b2a:	4607      	mov	r7, r0
 8012b2c:	10ad      	asrs	r5, r5, #2
 8012b2e:	d035      	beq.n	8012b9c <__pow5mult+0x90>
 8012b30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b32:	b93c      	cbnz	r4, 8012b44 <__pow5mult+0x38>
 8012b34:	2010      	movs	r0, #16
 8012b36:	f7ff fe13 	bl	8012760 <malloc>
 8012b3a:	6270      	str	r0, [r6, #36]	; 0x24
 8012b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b40:	6004      	str	r4, [r0, #0]
 8012b42:	60c4      	str	r4, [r0, #12]
 8012b44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b4c:	b94c      	cbnz	r4, 8012b62 <__pow5mult+0x56>
 8012b4e:	f240 2171 	movw	r1, #625	; 0x271
 8012b52:	4630      	mov	r0, r6
 8012b54:	f7ff ff3b 	bl	80129ce <__i2b>
 8012b58:	2300      	movs	r3, #0
 8012b5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b5e:	4604      	mov	r4, r0
 8012b60:	6003      	str	r3, [r0, #0]
 8012b62:	f04f 0800 	mov.w	r8, #0
 8012b66:	07eb      	lsls	r3, r5, #31
 8012b68:	d50a      	bpl.n	8012b80 <__pow5mult+0x74>
 8012b6a:	4639      	mov	r1, r7
 8012b6c:	4622      	mov	r2, r4
 8012b6e:	4630      	mov	r0, r6
 8012b70:	f7ff ff36 	bl	80129e0 <__multiply>
 8012b74:	4639      	mov	r1, r7
 8012b76:	4681      	mov	r9, r0
 8012b78:	4630      	mov	r0, r6
 8012b7a:	f7ff fe4a 	bl	8012812 <_Bfree>
 8012b7e:	464f      	mov	r7, r9
 8012b80:	106d      	asrs	r5, r5, #1
 8012b82:	d00b      	beq.n	8012b9c <__pow5mult+0x90>
 8012b84:	6820      	ldr	r0, [r4, #0]
 8012b86:	b938      	cbnz	r0, 8012b98 <__pow5mult+0x8c>
 8012b88:	4622      	mov	r2, r4
 8012b8a:	4621      	mov	r1, r4
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7ff ff27 	bl	80129e0 <__multiply>
 8012b92:	6020      	str	r0, [r4, #0]
 8012b94:	f8c0 8000 	str.w	r8, [r0]
 8012b98:	4604      	mov	r4, r0
 8012b9a:	e7e4      	b.n	8012b66 <__pow5mult+0x5a>
 8012b9c:	4638      	mov	r0, r7
 8012b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08014700 	.word	0x08014700

08012ba8 <__lshift>:
 8012ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bac:	460c      	mov	r4, r1
 8012bae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bb2:	6923      	ldr	r3, [r4, #16]
 8012bb4:	6849      	ldr	r1, [r1, #4]
 8012bb6:	eb0a 0903 	add.w	r9, sl, r3
 8012bba:	68a3      	ldr	r3, [r4, #8]
 8012bbc:	4607      	mov	r7, r0
 8012bbe:	4616      	mov	r6, r2
 8012bc0:	f109 0501 	add.w	r5, r9, #1
 8012bc4:	42ab      	cmp	r3, r5
 8012bc6:	db32      	blt.n	8012c2e <__lshift+0x86>
 8012bc8:	4638      	mov	r0, r7
 8012bca:	f7ff fdee 	bl	80127aa <_Balloc>
 8012bce:	2300      	movs	r3, #0
 8012bd0:	4680      	mov	r8, r0
 8012bd2:	f100 0114 	add.w	r1, r0, #20
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	4553      	cmp	r3, sl
 8012bda:	db2b      	blt.n	8012c34 <__lshift+0x8c>
 8012bdc:	6920      	ldr	r0, [r4, #16]
 8012bde:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012be2:	f104 0314 	add.w	r3, r4, #20
 8012be6:	f016 021f 	ands.w	r2, r6, #31
 8012bea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012bee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012bf2:	d025      	beq.n	8012c40 <__lshift+0x98>
 8012bf4:	f1c2 0e20 	rsb	lr, r2, #32
 8012bf8:	2000      	movs	r0, #0
 8012bfa:	681e      	ldr	r6, [r3, #0]
 8012bfc:	468a      	mov	sl, r1
 8012bfe:	4096      	lsls	r6, r2
 8012c00:	4330      	orrs	r0, r6
 8012c02:	f84a 0b04 	str.w	r0, [sl], #4
 8012c06:	f853 0b04 	ldr.w	r0, [r3], #4
 8012c0a:	459c      	cmp	ip, r3
 8012c0c:	fa20 f00e 	lsr.w	r0, r0, lr
 8012c10:	d814      	bhi.n	8012c3c <__lshift+0x94>
 8012c12:	6048      	str	r0, [r1, #4]
 8012c14:	b108      	cbz	r0, 8012c1a <__lshift+0x72>
 8012c16:	f109 0502 	add.w	r5, r9, #2
 8012c1a:	3d01      	subs	r5, #1
 8012c1c:	4638      	mov	r0, r7
 8012c1e:	f8c8 5010 	str.w	r5, [r8, #16]
 8012c22:	4621      	mov	r1, r4
 8012c24:	f7ff fdf5 	bl	8012812 <_Bfree>
 8012c28:	4640      	mov	r0, r8
 8012c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c2e:	3101      	adds	r1, #1
 8012c30:	005b      	lsls	r3, r3, #1
 8012c32:	e7c7      	b.n	8012bc4 <__lshift+0x1c>
 8012c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012c38:	3301      	adds	r3, #1
 8012c3a:	e7cd      	b.n	8012bd8 <__lshift+0x30>
 8012c3c:	4651      	mov	r1, sl
 8012c3e:	e7dc      	b.n	8012bfa <__lshift+0x52>
 8012c40:	3904      	subs	r1, #4
 8012c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c46:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c4a:	459c      	cmp	ip, r3
 8012c4c:	d8f9      	bhi.n	8012c42 <__lshift+0x9a>
 8012c4e:	e7e4      	b.n	8012c1a <__lshift+0x72>

08012c50 <__mcmp>:
 8012c50:	6903      	ldr	r3, [r0, #16]
 8012c52:	690a      	ldr	r2, [r1, #16]
 8012c54:	1a9b      	subs	r3, r3, r2
 8012c56:	b530      	push	{r4, r5, lr}
 8012c58:	d10c      	bne.n	8012c74 <__mcmp+0x24>
 8012c5a:	0092      	lsls	r2, r2, #2
 8012c5c:	3014      	adds	r0, #20
 8012c5e:	3114      	adds	r1, #20
 8012c60:	1884      	adds	r4, r0, r2
 8012c62:	4411      	add	r1, r2
 8012c64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012c68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012c6c:	4295      	cmp	r5, r2
 8012c6e:	d003      	beq.n	8012c78 <__mcmp+0x28>
 8012c70:	d305      	bcc.n	8012c7e <__mcmp+0x2e>
 8012c72:	2301      	movs	r3, #1
 8012c74:	4618      	mov	r0, r3
 8012c76:	bd30      	pop	{r4, r5, pc}
 8012c78:	42a0      	cmp	r0, r4
 8012c7a:	d3f3      	bcc.n	8012c64 <__mcmp+0x14>
 8012c7c:	e7fa      	b.n	8012c74 <__mcmp+0x24>
 8012c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c82:	e7f7      	b.n	8012c74 <__mcmp+0x24>

08012c84 <__mdiff>:
 8012c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c88:	460d      	mov	r5, r1
 8012c8a:	4607      	mov	r7, r0
 8012c8c:	4611      	mov	r1, r2
 8012c8e:	4628      	mov	r0, r5
 8012c90:	4614      	mov	r4, r2
 8012c92:	f7ff ffdd 	bl	8012c50 <__mcmp>
 8012c96:	1e06      	subs	r6, r0, #0
 8012c98:	d108      	bne.n	8012cac <__mdiff+0x28>
 8012c9a:	4631      	mov	r1, r6
 8012c9c:	4638      	mov	r0, r7
 8012c9e:	f7ff fd84 	bl	80127aa <_Balloc>
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cac:	bfa4      	itt	ge
 8012cae:	4623      	movge	r3, r4
 8012cb0:	462c      	movge	r4, r5
 8012cb2:	4638      	mov	r0, r7
 8012cb4:	6861      	ldr	r1, [r4, #4]
 8012cb6:	bfa6      	itte	ge
 8012cb8:	461d      	movge	r5, r3
 8012cba:	2600      	movge	r6, #0
 8012cbc:	2601      	movlt	r6, #1
 8012cbe:	f7ff fd74 	bl	80127aa <_Balloc>
 8012cc2:	692b      	ldr	r3, [r5, #16]
 8012cc4:	60c6      	str	r6, [r0, #12]
 8012cc6:	6926      	ldr	r6, [r4, #16]
 8012cc8:	f105 0914 	add.w	r9, r5, #20
 8012ccc:	f104 0214 	add.w	r2, r4, #20
 8012cd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012cd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012cd8:	f100 0514 	add.w	r5, r0, #20
 8012cdc:	f04f 0e00 	mov.w	lr, #0
 8012ce0:	f852 ab04 	ldr.w	sl, [r2], #4
 8012ce4:	f859 4b04 	ldr.w	r4, [r9], #4
 8012ce8:	fa1e f18a 	uxtah	r1, lr, sl
 8012cec:	b2a3      	uxth	r3, r4
 8012cee:	1ac9      	subs	r1, r1, r3
 8012cf0:	0c23      	lsrs	r3, r4, #16
 8012cf2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012cf6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012cfa:	b289      	uxth	r1, r1
 8012cfc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012d00:	45c8      	cmp	r8, r9
 8012d02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012d06:	4694      	mov	ip, r2
 8012d08:	f845 3b04 	str.w	r3, [r5], #4
 8012d0c:	d8e8      	bhi.n	8012ce0 <__mdiff+0x5c>
 8012d0e:	45bc      	cmp	ip, r7
 8012d10:	d304      	bcc.n	8012d1c <__mdiff+0x98>
 8012d12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012d16:	b183      	cbz	r3, 8012d3a <__mdiff+0xb6>
 8012d18:	6106      	str	r6, [r0, #16]
 8012d1a:	e7c5      	b.n	8012ca8 <__mdiff+0x24>
 8012d1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012d20:	fa1e f381 	uxtah	r3, lr, r1
 8012d24:	141a      	asrs	r2, r3, #16
 8012d26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012d34:	f845 3b04 	str.w	r3, [r5], #4
 8012d38:	e7e9      	b.n	8012d0e <__mdiff+0x8a>
 8012d3a:	3e01      	subs	r6, #1
 8012d3c:	e7e9      	b.n	8012d12 <__mdiff+0x8e>
	...

08012d40 <__ulp>:
 8012d40:	4b12      	ldr	r3, [pc, #72]	; (8012d8c <__ulp+0x4c>)
 8012d42:	ee10 2a90 	vmov	r2, s1
 8012d46:	401a      	ands	r2, r3
 8012d48:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	dd04      	ble.n	8012d5a <__ulp+0x1a>
 8012d50:	2000      	movs	r0, #0
 8012d52:	4619      	mov	r1, r3
 8012d54:	ec41 0b10 	vmov	d0, r0, r1
 8012d58:	4770      	bx	lr
 8012d5a:	425b      	negs	r3, r3
 8012d5c:	151b      	asrs	r3, r3, #20
 8012d5e:	2b13      	cmp	r3, #19
 8012d60:	f04f 0000 	mov.w	r0, #0
 8012d64:	f04f 0100 	mov.w	r1, #0
 8012d68:	dc04      	bgt.n	8012d74 <__ulp+0x34>
 8012d6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012d6e:	fa42 f103 	asr.w	r1, r2, r3
 8012d72:	e7ef      	b.n	8012d54 <__ulp+0x14>
 8012d74:	3b14      	subs	r3, #20
 8012d76:	2b1e      	cmp	r3, #30
 8012d78:	f04f 0201 	mov.w	r2, #1
 8012d7c:	bfda      	itte	le
 8012d7e:	f1c3 031f 	rsble	r3, r3, #31
 8012d82:	fa02 f303 	lslle.w	r3, r2, r3
 8012d86:	4613      	movgt	r3, r2
 8012d88:	4618      	mov	r0, r3
 8012d8a:	e7e3      	b.n	8012d54 <__ulp+0x14>
 8012d8c:	7ff00000 	.word	0x7ff00000

08012d90 <__b2d>:
 8012d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d92:	6905      	ldr	r5, [r0, #16]
 8012d94:	f100 0714 	add.w	r7, r0, #20
 8012d98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012d9c:	1f2e      	subs	r6, r5, #4
 8012d9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012da2:	4620      	mov	r0, r4
 8012da4:	f7ff fdc5 	bl	8012932 <__hi0bits>
 8012da8:	f1c0 0320 	rsb	r3, r0, #32
 8012dac:	280a      	cmp	r0, #10
 8012dae:	600b      	str	r3, [r1, #0]
 8012db0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8012e28 <__b2d+0x98>
 8012db4:	dc14      	bgt.n	8012de0 <__b2d+0x50>
 8012db6:	f1c0 0e0b 	rsb	lr, r0, #11
 8012dba:	fa24 f10e 	lsr.w	r1, r4, lr
 8012dbe:	42b7      	cmp	r7, r6
 8012dc0:	ea41 030c 	orr.w	r3, r1, ip
 8012dc4:	bf34      	ite	cc
 8012dc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012dca:	2100      	movcs	r1, #0
 8012dcc:	3015      	adds	r0, #21
 8012dce:	fa04 f000 	lsl.w	r0, r4, r0
 8012dd2:	fa21 f10e 	lsr.w	r1, r1, lr
 8012dd6:	ea40 0201 	orr.w	r2, r0, r1
 8012dda:	ec43 2b10 	vmov	d0, r2, r3
 8012dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012de0:	42b7      	cmp	r7, r6
 8012de2:	bf3a      	itte	cc
 8012de4:	f1a5 0608 	subcc.w	r6, r5, #8
 8012de8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012dec:	2100      	movcs	r1, #0
 8012dee:	380b      	subs	r0, #11
 8012df0:	d015      	beq.n	8012e1e <__b2d+0x8e>
 8012df2:	4084      	lsls	r4, r0
 8012df4:	f1c0 0520 	rsb	r5, r0, #32
 8012df8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8012dfc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8012e00:	42be      	cmp	r6, r7
 8012e02:	fa21 fc05 	lsr.w	ip, r1, r5
 8012e06:	ea44 030c 	orr.w	r3, r4, ip
 8012e0a:	bf8c      	ite	hi
 8012e0c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012e10:	2400      	movls	r4, #0
 8012e12:	fa01 f000 	lsl.w	r0, r1, r0
 8012e16:	40ec      	lsrs	r4, r5
 8012e18:	ea40 0204 	orr.w	r2, r0, r4
 8012e1c:	e7dd      	b.n	8012dda <__b2d+0x4a>
 8012e1e:	ea44 030c 	orr.w	r3, r4, ip
 8012e22:	460a      	mov	r2, r1
 8012e24:	e7d9      	b.n	8012dda <__b2d+0x4a>
 8012e26:	bf00      	nop
 8012e28:	3ff00000 	.word	0x3ff00000

08012e2c <__d2b>:
 8012e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e30:	460e      	mov	r6, r1
 8012e32:	2101      	movs	r1, #1
 8012e34:	ec59 8b10 	vmov	r8, r9, d0
 8012e38:	4615      	mov	r5, r2
 8012e3a:	f7ff fcb6 	bl	80127aa <_Balloc>
 8012e3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012e42:	4607      	mov	r7, r0
 8012e44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e48:	bb34      	cbnz	r4, 8012e98 <__d2b+0x6c>
 8012e4a:	9301      	str	r3, [sp, #4]
 8012e4c:	f1b8 0300 	subs.w	r3, r8, #0
 8012e50:	d027      	beq.n	8012ea2 <__d2b+0x76>
 8012e52:	a802      	add	r0, sp, #8
 8012e54:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012e58:	f7ff fd8a 	bl	8012970 <__lo0bits>
 8012e5c:	9900      	ldr	r1, [sp, #0]
 8012e5e:	b1f0      	cbz	r0, 8012e9e <__d2b+0x72>
 8012e60:	9a01      	ldr	r2, [sp, #4]
 8012e62:	f1c0 0320 	rsb	r3, r0, #32
 8012e66:	fa02 f303 	lsl.w	r3, r2, r3
 8012e6a:	430b      	orrs	r3, r1
 8012e6c:	40c2      	lsrs	r2, r0
 8012e6e:	617b      	str	r3, [r7, #20]
 8012e70:	9201      	str	r2, [sp, #4]
 8012e72:	9b01      	ldr	r3, [sp, #4]
 8012e74:	61bb      	str	r3, [r7, #24]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	bf14      	ite	ne
 8012e7a:	2102      	movne	r1, #2
 8012e7c:	2101      	moveq	r1, #1
 8012e7e:	6139      	str	r1, [r7, #16]
 8012e80:	b1c4      	cbz	r4, 8012eb4 <__d2b+0x88>
 8012e82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012e86:	4404      	add	r4, r0
 8012e88:	6034      	str	r4, [r6, #0]
 8012e8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012e8e:	6028      	str	r0, [r5, #0]
 8012e90:	4638      	mov	r0, r7
 8012e92:	b003      	add	sp, #12
 8012e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e9c:	e7d5      	b.n	8012e4a <__d2b+0x1e>
 8012e9e:	6179      	str	r1, [r7, #20]
 8012ea0:	e7e7      	b.n	8012e72 <__d2b+0x46>
 8012ea2:	a801      	add	r0, sp, #4
 8012ea4:	f7ff fd64 	bl	8012970 <__lo0bits>
 8012ea8:	9b01      	ldr	r3, [sp, #4]
 8012eaa:	617b      	str	r3, [r7, #20]
 8012eac:	2101      	movs	r1, #1
 8012eae:	6139      	str	r1, [r7, #16]
 8012eb0:	3020      	adds	r0, #32
 8012eb2:	e7e5      	b.n	8012e80 <__d2b+0x54>
 8012eb4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012eb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ebc:	6030      	str	r0, [r6, #0]
 8012ebe:	6918      	ldr	r0, [r3, #16]
 8012ec0:	f7ff fd37 	bl	8012932 <__hi0bits>
 8012ec4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012ec8:	e7e1      	b.n	8012e8e <__d2b+0x62>

08012eca <__ratio>:
 8012eca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ece:	4688      	mov	r8, r1
 8012ed0:	4669      	mov	r1, sp
 8012ed2:	4681      	mov	r9, r0
 8012ed4:	f7ff ff5c 	bl	8012d90 <__b2d>
 8012ed8:	a901      	add	r1, sp, #4
 8012eda:	4640      	mov	r0, r8
 8012edc:	ec57 6b10 	vmov	r6, r7, d0
 8012ee0:	f7ff ff56 	bl	8012d90 <__b2d>
 8012ee4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ee8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012eec:	eba3 0c02 	sub.w	ip, r3, r2
 8012ef0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ef4:	1a9b      	subs	r3, r3, r2
 8012ef6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012efa:	ec5b ab10 	vmov	sl, fp, d0
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	bfce      	itee	gt
 8012f02:	463a      	movgt	r2, r7
 8012f04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012f08:	465a      	movle	r2, fp
 8012f0a:	4659      	mov	r1, fp
 8012f0c:	463d      	mov	r5, r7
 8012f0e:	bfd4      	ite	le
 8012f10:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8012f14:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8012f18:	4630      	mov	r0, r6
 8012f1a:	ee10 2a10 	vmov	r2, s0
 8012f1e:	460b      	mov	r3, r1
 8012f20:	4629      	mov	r1, r5
 8012f22:	f7ed fcab 	bl	800087c <__aeabi_ddiv>
 8012f26:	ec41 0b10 	vmov	d0, r0, r1
 8012f2a:	b003      	add	sp, #12
 8012f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f30 <__copybits>:
 8012f30:	3901      	subs	r1, #1
 8012f32:	b510      	push	{r4, lr}
 8012f34:	1149      	asrs	r1, r1, #5
 8012f36:	6914      	ldr	r4, [r2, #16]
 8012f38:	3101      	adds	r1, #1
 8012f3a:	f102 0314 	add.w	r3, r2, #20
 8012f3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012f42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012f46:	42a3      	cmp	r3, r4
 8012f48:	4602      	mov	r2, r0
 8012f4a:	d303      	bcc.n	8012f54 <__copybits+0x24>
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	428a      	cmp	r2, r1
 8012f50:	d305      	bcc.n	8012f5e <__copybits+0x2e>
 8012f52:	bd10      	pop	{r4, pc}
 8012f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f58:	f840 2b04 	str.w	r2, [r0], #4
 8012f5c:	e7f3      	b.n	8012f46 <__copybits+0x16>
 8012f5e:	f842 3b04 	str.w	r3, [r2], #4
 8012f62:	e7f4      	b.n	8012f4e <__copybits+0x1e>

08012f64 <__any_on>:
 8012f64:	f100 0214 	add.w	r2, r0, #20
 8012f68:	6900      	ldr	r0, [r0, #16]
 8012f6a:	114b      	asrs	r3, r1, #5
 8012f6c:	4298      	cmp	r0, r3
 8012f6e:	b510      	push	{r4, lr}
 8012f70:	db11      	blt.n	8012f96 <__any_on+0x32>
 8012f72:	dd0a      	ble.n	8012f8a <__any_on+0x26>
 8012f74:	f011 011f 	ands.w	r1, r1, #31
 8012f78:	d007      	beq.n	8012f8a <__any_on+0x26>
 8012f7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012f7e:	fa24 f001 	lsr.w	r0, r4, r1
 8012f82:	fa00 f101 	lsl.w	r1, r0, r1
 8012f86:	428c      	cmp	r4, r1
 8012f88:	d10b      	bne.n	8012fa2 <__any_on+0x3e>
 8012f8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d803      	bhi.n	8012f9a <__any_on+0x36>
 8012f92:	2000      	movs	r0, #0
 8012f94:	bd10      	pop	{r4, pc}
 8012f96:	4603      	mov	r3, r0
 8012f98:	e7f7      	b.n	8012f8a <__any_on+0x26>
 8012f9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012f9e:	2900      	cmp	r1, #0
 8012fa0:	d0f5      	beq.n	8012f8e <__any_on+0x2a>
 8012fa2:	2001      	movs	r0, #1
 8012fa4:	e7f6      	b.n	8012f94 <__any_on+0x30>

08012fa6 <_calloc_r>:
 8012fa6:	b538      	push	{r3, r4, r5, lr}
 8012fa8:	fb02 f401 	mul.w	r4, r2, r1
 8012fac:	4621      	mov	r1, r4
 8012fae:	f000 f857 	bl	8013060 <_malloc_r>
 8012fb2:	4605      	mov	r5, r0
 8012fb4:	b118      	cbz	r0, 8012fbe <_calloc_r+0x18>
 8012fb6:	4622      	mov	r2, r4
 8012fb8:	2100      	movs	r1, #0
 8012fba:	f7fc f911 	bl	800f1e0 <memset>
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08012fc4 <_free_r>:
 8012fc4:	b538      	push	{r3, r4, r5, lr}
 8012fc6:	4605      	mov	r5, r0
 8012fc8:	2900      	cmp	r1, #0
 8012fca:	d045      	beq.n	8013058 <_free_r+0x94>
 8012fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fd0:	1f0c      	subs	r4, r1, #4
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	bfb8      	it	lt
 8012fd6:	18e4      	addlt	r4, r4, r3
 8012fd8:	f000 ffa5 	bl	8013f26 <__malloc_lock>
 8012fdc:	4a1f      	ldr	r2, [pc, #124]	; (801305c <_free_r+0x98>)
 8012fde:	6813      	ldr	r3, [r2, #0]
 8012fe0:	4610      	mov	r0, r2
 8012fe2:	b933      	cbnz	r3, 8012ff2 <_free_r+0x2e>
 8012fe4:	6063      	str	r3, [r4, #4]
 8012fe6:	6014      	str	r4, [r2, #0]
 8012fe8:	4628      	mov	r0, r5
 8012fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fee:	f000 bf9b 	b.w	8013f28 <__malloc_unlock>
 8012ff2:	42a3      	cmp	r3, r4
 8012ff4:	d90c      	bls.n	8013010 <_free_r+0x4c>
 8012ff6:	6821      	ldr	r1, [r4, #0]
 8012ff8:	1862      	adds	r2, r4, r1
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	bf04      	itt	eq
 8012ffe:	681a      	ldreq	r2, [r3, #0]
 8013000:	685b      	ldreq	r3, [r3, #4]
 8013002:	6063      	str	r3, [r4, #4]
 8013004:	bf04      	itt	eq
 8013006:	1852      	addeq	r2, r2, r1
 8013008:	6022      	streq	r2, [r4, #0]
 801300a:	6004      	str	r4, [r0, #0]
 801300c:	e7ec      	b.n	8012fe8 <_free_r+0x24>
 801300e:	4613      	mov	r3, r2
 8013010:	685a      	ldr	r2, [r3, #4]
 8013012:	b10a      	cbz	r2, 8013018 <_free_r+0x54>
 8013014:	42a2      	cmp	r2, r4
 8013016:	d9fa      	bls.n	801300e <_free_r+0x4a>
 8013018:	6819      	ldr	r1, [r3, #0]
 801301a:	1858      	adds	r0, r3, r1
 801301c:	42a0      	cmp	r0, r4
 801301e:	d10b      	bne.n	8013038 <_free_r+0x74>
 8013020:	6820      	ldr	r0, [r4, #0]
 8013022:	4401      	add	r1, r0
 8013024:	1858      	adds	r0, r3, r1
 8013026:	4282      	cmp	r2, r0
 8013028:	6019      	str	r1, [r3, #0]
 801302a:	d1dd      	bne.n	8012fe8 <_free_r+0x24>
 801302c:	6810      	ldr	r0, [r2, #0]
 801302e:	6852      	ldr	r2, [r2, #4]
 8013030:	605a      	str	r2, [r3, #4]
 8013032:	4401      	add	r1, r0
 8013034:	6019      	str	r1, [r3, #0]
 8013036:	e7d7      	b.n	8012fe8 <_free_r+0x24>
 8013038:	d902      	bls.n	8013040 <_free_r+0x7c>
 801303a:	230c      	movs	r3, #12
 801303c:	602b      	str	r3, [r5, #0]
 801303e:	e7d3      	b.n	8012fe8 <_free_r+0x24>
 8013040:	6820      	ldr	r0, [r4, #0]
 8013042:	1821      	adds	r1, r4, r0
 8013044:	428a      	cmp	r2, r1
 8013046:	bf04      	itt	eq
 8013048:	6811      	ldreq	r1, [r2, #0]
 801304a:	6852      	ldreq	r2, [r2, #4]
 801304c:	6062      	str	r2, [r4, #4]
 801304e:	bf04      	itt	eq
 8013050:	1809      	addeq	r1, r1, r0
 8013052:	6021      	streq	r1, [r4, #0]
 8013054:	605c      	str	r4, [r3, #4]
 8013056:	e7c7      	b.n	8012fe8 <_free_r+0x24>
 8013058:	bd38      	pop	{r3, r4, r5, pc}
 801305a:	bf00      	nop
 801305c:	200007b4 	.word	0x200007b4

08013060 <_malloc_r>:
 8013060:	b570      	push	{r4, r5, r6, lr}
 8013062:	1ccd      	adds	r5, r1, #3
 8013064:	f025 0503 	bic.w	r5, r5, #3
 8013068:	3508      	adds	r5, #8
 801306a:	2d0c      	cmp	r5, #12
 801306c:	bf38      	it	cc
 801306e:	250c      	movcc	r5, #12
 8013070:	2d00      	cmp	r5, #0
 8013072:	4606      	mov	r6, r0
 8013074:	db01      	blt.n	801307a <_malloc_r+0x1a>
 8013076:	42a9      	cmp	r1, r5
 8013078:	d903      	bls.n	8013082 <_malloc_r+0x22>
 801307a:	230c      	movs	r3, #12
 801307c:	6033      	str	r3, [r6, #0]
 801307e:	2000      	movs	r0, #0
 8013080:	bd70      	pop	{r4, r5, r6, pc}
 8013082:	f000 ff50 	bl	8013f26 <__malloc_lock>
 8013086:	4a21      	ldr	r2, [pc, #132]	; (801310c <_malloc_r+0xac>)
 8013088:	6814      	ldr	r4, [r2, #0]
 801308a:	4621      	mov	r1, r4
 801308c:	b991      	cbnz	r1, 80130b4 <_malloc_r+0x54>
 801308e:	4c20      	ldr	r4, [pc, #128]	; (8013110 <_malloc_r+0xb0>)
 8013090:	6823      	ldr	r3, [r4, #0]
 8013092:	b91b      	cbnz	r3, 801309c <_malloc_r+0x3c>
 8013094:	4630      	mov	r0, r6
 8013096:	f000 fde3 	bl	8013c60 <_sbrk_r>
 801309a:	6020      	str	r0, [r4, #0]
 801309c:	4629      	mov	r1, r5
 801309e:	4630      	mov	r0, r6
 80130a0:	f000 fdde 	bl	8013c60 <_sbrk_r>
 80130a4:	1c43      	adds	r3, r0, #1
 80130a6:	d124      	bne.n	80130f2 <_malloc_r+0x92>
 80130a8:	230c      	movs	r3, #12
 80130aa:	6033      	str	r3, [r6, #0]
 80130ac:	4630      	mov	r0, r6
 80130ae:	f000 ff3b 	bl	8013f28 <__malloc_unlock>
 80130b2:	e7e4      	b.n	801307e <_malloc_r+0x1e>
 80130b4:	680b      	ldr	r3, [r1, #0]
 80130b6:	1b5b      	subs	r3, r3, r5
 80130b8:	d418      	bmi.n	80130ec <_malloc_r+0x8c>
 80130ba:	2b0b      	cmp	r3, #11
 80130bc:	d90f      	bls.n	80130de <_malloc_r+0x7e>
 80130be:	600b      	str	r3, [r1, #0]
 80130c0:	50cd      	str	r5, [r1, r3]
 80130c2:	18cc      	adds	r4, r1, r3
 80130c4:	4630      	mov	r0, r6
 80130c6:	f000 ff2f 	bl	8013f28 <__malloc_unlock>
 80130ca:	f104 000b 	add.w	r0, r4, #11
 80130ce:	1d23      	adds	r3, r4, #4
 80130d0:	f020 0007 	bic.w	r0, r0, #7
 80130d4:	1ac3      	subs	r3, r0, r3
 80130d6:	d0d3      	beq.n	8013080 <_malloc_r+0x20>
 80130d8:	425a      	negs	r2, r3
 80130da:	50e2      	str	r2, [r4, r3]
 80130dc:	e7d0      	b.n	8013080 <_malloc_r+0x20>
 80130de:	428c      	cmp	r4, r1
 80130e0:	684b      	ldr	r3, [r1, #4]
 80130e2:	bf16      	itet	ne
 80130e4:	6063      	strne	r3, [r4, #4]
 80130e6:	6013      	streq	r3, [r2, #0]
 80130e8:	460c      	movne	r4, r1
 80130ea:	e7eb      	b.n	80130c4 <_malloc_r+0x64>
 80130ec:	460c      	mov	r4, r1
 80130ee:	6849      	ldr	r1, [r1, #4]
 80130f0:	e7cc      	b.n	801308c <_malloc_r+0x2c>
 80130f2:	1cc4      	adds	r4, r0, #3
 80130f4:	f024 0403 	bic.w	r4, r4, #3
 80130f8:	42a0      	cmp	r0, r4
 80130fa:	d005      	beq.n	8013108 <_malloc_r+0xa8>
 80130fc:	1a21      	subs	r1, r4, r0
 80130fe:	4630      	mov	r0, r6
 8013100:	f000 fdae 	bl	8013c60 <_sbrk_r>
 8013104:	3001      	adds	r0, #1
 8013106:	d0cf      	beq.n	80130a8 <_malloc_r+0x48>
 8013108:	6025      	str	r5, [r4, #0]
 801310a:	e7db      	b.n	80130c4 <_malloc_r+0x64>
 801310c:	200007b4 	.word	0x200007b4
 8013110:	200007b8 	.word	0x200007b8

08013114 <__ssputs_r>:
 8013114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013118:	688e      	ldr	r6, [r1, #8]
 801311a:	429e      	cmp	r6, r3
 801311c:	4682      	mov	sl, r0
 801311e:	460c      	mov	r4, r1
 8013120:	4690      	mov	r8, r2
 8013122:	4699      	mov	r9, r3
 8013124:	d837      	bhi.n	8013196 <__ssputs_r+0x82>
 8013126:	898a      	ldrh	r2, [r1, #12]
 8013128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801312c:	d031      	beq.n	8013192 <__ssputs_r+0x7e>
 801312e:	6825      	ldr	r5, [r4, #0]
 8013130:	6909      	ldr	r1, [r1, #16]
 8013132:	1a6f      	subs	r7, r5, r1
 8013134:	6965      	ldr	r5, [r4, #20]
 8013136:	2302      	movs	r3, #2
 8013138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801313c:	fb95 f5f3 	sdiv	r5, r5, r3
 8013140:	f109 0301 	add.w	r3, r9, #1
 8013144:	443b      	add	r3, r7
 8013146:	429d      	cmp	r5, r3
 8013148:	bf38      	it	cc
 801314a:	461d      	movcc	r5, r3
 801314c:	0553      	lsls	r3, r2, #21
 801314e:	d530      	bpl.n	80131b2 <__ssputs_r+0x9e>
 8013150:	4629      	mov	r1, r5
 8013152:	f7ff ff85 	bl	8013060 <_malloc_r>
 8013156:	4606      	mov	r6, r0
 8013158:	b950      	cbnz	r0, 8013170 <__ssputs_r+0x5c>
 801315a:	230c      	movs	r3, #12
 801315c:	f8ca 3000 	str.w	r3, [sl]
 8013160:	89a3      	ldrh	r3, [r4, #12]
 8013162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013166:	81a3      	strh	r3, [r4, #12]
 8013168:	f04f 30ff 	mov.w	r0, #4294967295
 801316c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013170:	463a      	mov	r2, r7
 8013172:	6921      	ldr	r1, [r4, #16]
 8013174:	f7ff fb0e 	bl	8012794 <memcpy>
 8013178:	89a3      	ldrh	r3, [r4, #12]
 801317a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801317e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013182:	81a3      	strh	r3, [r4, #12]
 8013184:	6126      	str	r6, [r4, #16]
 8013186:	6165      	str	r5, [r4, #20]
 8013188:	443e      	add	r6, r7
 801318a:	1bed      	subs	r5, r5, r7
 801318c:	6026      	str	r6, [r4, #0]
 801318e:	60a5      	str	r5, [r4, #8]
 8013190:	464e      	mov	r6, r9
 8013192:	454e      	cmp	r6, r9
 8013194:	d900      	bls.n	8013198 <__ssputs_r+0x84>
 8013196:	464e      	mov	r6, r9
 8013198:	4632      	mov	r2, r6
 801319a:	4641      	mov	r1, r8
 801319c:	6820      	ldr	r0, [r4, #0]
 801319e:	f000 fea9 	bl	8013ef4 <memmove>
 80131a2:	68a3      	ldr	r3, [r4, #8]
 80131a4:	1b9b      	subs	r3, r3, r6
 80131a6:	60a3      	str	r3, [r4, #8]
 80131a8:	6823      	ldr	r3, [r4, #0]
 80131aa:	441e      	add	r6, r3
 80131ac:	6026      	str	r6, [r4, #0]
 80131ae:	2000      	movs	r0, #0
 80131b0:	e7dc      	b.n	801316c <__ssputs_r+0x58>
 80131b2:	462a      	mov	r2, r5
 80131b4:	f000 feb9 	bl	8013f2a <_realloc_r>
 80131b8:	4606      	mov	r6, r0
 80131ba:	2800      	cmp	r0, #0
 80131bc:	d1e2      	bne.n	8013184 <__ssputs_r+0x70>
 80131be:	6921      	ldr	r1, [r4, #16]
 80131c0:	4650      	mov	r0, sl
 80131c2:	f7ff feff 	bl	8012fc4 <_free_r>
 80131c6:	e7c8      	b.n	801315a <__ssputs_r+0x46>

080131c8 <_svfiprintf_r>:
 80131c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131cc:	461d      	mov	r5, r3
 80131ce:	898b      	ldrh	r3, [r1, #12]
 80131d0:	061f      	lsls	r7, r3, #24
 80131d2:	b09d      	sub	sp, #116	; 0x74
 80131d4:	4680      	mov	r8, r0
 80131d6:	460c      	mov	r4, r1
 80131d8:	4616      	mov	r6, r2
 80131da:	d50f      	bpl.n	80131fc <_svfiprintf_r+0x34>
 80131dc:	690b      	ldr	r3, [r1, #16]
 80131de:	b96b      	cbnz	r3, 80131fc <_svfiprintf_r+0x34>
 80131e0:	2140      	movs	r1, #64	; 0x40
 80131e2:	f7ff ff3d 	bl	8013060 <_malloc_r>
 80131e6:	6020      	str	r0, [r4, #0]
 80131e8:	6120      	str	r0, [r4, #16]
 80131ea:	b928      	cbnz	r0, 80131f8 <_svfiprintf_r+0x30>
 80131ec:	230c      	movs	r3, #12
 80131ee:	f8c8 3000 	str.w	r3, [r8]
 80131f2:	f04f 30ff 	mov.w	r0, #4294967295
 80131f6:	e0c8      	b.n	801338a <_svfiprintf_r+0x1c2>
 80131f8:	2340      	movs	r3, #64	; 0x40
 80131fa:	6163      	str	r3, [r4, #20]
 80131fc:	2300      	movs	r3, #0
 80131fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013200:	2320      	movs	r3, #32
 8013202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013206:	2330      	movs	r3, #48	; 0x30
 8013208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801320c:	9503      	str	r5, [sp, #12]
 801320e:	f04f 0b01 	mov.w	fp, #1
 8013212:	4637      	mov	r7, r6
 8013214:	463d      	mov	r5, r7
 8013216:	f815 3b01 	ldrb.w	r3, [r5], #1
 801321a:	b10b      	cbz	r3, 8013220 <_svfiprintf_r+0x58>
 801321c:	2b25      	cmp	r3, #37	; 0x25
 801321e:	d13e      	bne.n	801329e <_svfiprintf_r+0xd6>
 8013220:	ebb7 0a06 	subs.w	sl, r7, r6
 8013224:	d00b      	beq.n	801323e <_svfiprintf_r+0x76>
 8013226:	4653      	mov	r3, sl
 8013228:	4632      	mov	r2, r6
 801322a:	4621      	mov	r1, r4
 801322c:	4640      	mov	r0, r8
 801322e:	f7ff ff71 	bl	8013114 <__ssputs_r>
 8013232:	3001      	adds	r0, #1
 8013234:	f000 80a4 	beq.w	8013380 <_svfiprintf_r+0x1b8>
 8013238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801323a:	4453      	add	r3, sl
 801323c:	9309      	str	r3, [sp, #36]	; 0x24
 801323e:	783b      	ldrb	r3, [r7, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	f000 809d 	beq.w	8013380 <_svfiprintf_r+0x1b8>
 8013246:	2300      	movs	r3, #0
 8013248:	f04f 32ff 	mov.w	r2, #4294967295
 801324c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013250:	9304      	str	r3, [sp, #16]
 8013252:	9307      	str	r3, [sp, #28]
 8013254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013258:	931a      	str	r3, [sp, #104]	; 0x68
 801325a:	462f      	mov	r7, r5
 801325c:	2205      	movs	r2, #5
 801325e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013262:	4850      	ldr	r0, [pc, #320]	; (80133a4 <_svfiprintf_r+0x1dc>)
 8013264:	f7ec ffd4 	bl	8000210 <memchr>
 8013268:	9b04      	ldr	r3, [sp, #16]
 801326a:	b9d0      	cbnz	r0, 80132a2 <_svfiprintf_r+0xda>
 801326c:	06d9      	lsls	r1, r3, #27
 801326e:	bf44      	itt	mi
 8013270:	2220      	movmi	r2, #32
 8013272:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013276:	071a      	lsls	r2, r3, #28
 8013278:	bf44      	itt	mi
 801327a:	222b      	movmi	r2, #43	; 0x2b
 801327c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013280:	782a      	ldrb	r2, [r5, #0]
 8013282:	2a2a      	cmp	r2, #42	; 0x2a
 8013284:	d015      	beq.n	80132b2 <_svfiprintf_r+0xea>
 8013286:	9a07      	ldr	r2, [sp, #28]
 8013288:	462f      	mov	r7, r5
 801328a:	2000      	movs	r0, #0
 801328c:	250a      	movs	r5, #10
 801328e:	4639      	mov	r1, r7
 8013290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013294:	3b30      	subs	r3, #48	; 0x30
 8013296:	2b09      	cmp	r3, #9
 8013298:	d94d      	bls.n	8013336 <_svfiprintf_r+0x16e>
 801329a:	b1b8      	cbz	r0, 80132cc <_svfiprintf_r+0x104>
 801329c:	e00f      	b.n	80132be <_svfiprintf_r+0xf6>
 801329e:	462f      	mov	r7, r5
 80132a0:	e7b8      	b.n	8013214 <_svfiprintf_r+0x4c>
 80132a2:	4a40      	ldr	r2, [pc, #256]	; (80133a4 <_svfiprintf_r+0x1dc>)
 80132a4:	1a80      	subs	r0, r0, r2
 80132a6:	fa0b f000 	lsl.w	r0, fp, r0
 80132aa:	4318      	orrs	r0, r3
 80132ac:	9004      	str	r0, [sp, #16]
 80132ae:	463d      	mov	r5, r7
 80132b0:	e7d3      	b.n	801325a <_svfiprintf_r+0x92>
 80132b2:	9a03      	ldr	r2, [sp, #12]
 80132b4:	1d11      	adds	r1, r2, #4
 80132b6:	6812      	ldr	r2, [r2, #0]
 80132b8:	9103      	str	r1, [sp, #12]
 80132ba:	2a00      	cmp	r2, #0
 80132bc:	db01      	blt.n	80132c2 <_svfiprintf_r+0xfa>
 80132be:	9207      	str	r2, [sp, #28]
 80132c0:	e004      	b.n	80132cc <_svfiprintf_r+0x104>
 80132c2:	4252      	negs	r2, r2
 80132c4:	f043 0302 	orr.w	r3, r3, #2
 80132c8:	9207      	str	r2, [sp, #28]
 80132ca:	9304      	str	r3, [sp, #16]
 80132cc:	783b      	ldrb	r3, [r7, #0]
 80132ce:	2b2e      	cmp	r3, #46	; 0x2e
 80132d0:	d10c      	bne.n	80132ec <_svfiprintf_r+0x124>
 80132d2:	787b      	ldrb	r3, [r7, #1]
 80132d4:	2b2a      	cmp	r3, #42	; 0x2a
 80132d6:	d133      	bne.n	8013340 <_svfiprintf_r+0x178>
 80132d8:	9b03      	ldr	r3, [sp, #12]
 80132da:	1d1a      	adds	r2, r3, #4
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	9203      	str	r2, [sp, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	bfb8      	it	lt
 80132e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80132e8:	3702      	adds	r7, #2
 80132ea:	9305      	str	r3, [sp, #20]
 80132ec:	4d2e      	ldr	r5, [pc, #184]	; (80133a8 <_svfiprintf_r+0x1e0>)
 80132ee:	7839      	ldrb	r1, [r7, #0]
 80132f0:	2203      	movs	r2, #3
 80132f2:	4628      	mov	r0, r5
 80132f4:	f7ec ff8c 	bl	8000210 <memchr>
 80132f8:	b138      	cbz	r0, 801330a <_svfiprintf_r+0x142>
 80132fa:	2340      	movs	r3, #64	; 0x40
 80132fc:	1b40      	subs	r0, r0, r5
 80132fe:	fa03 f000 	lsl.w	r0, r3, r0
 8013302:	9b04      	ldr	r3, [sp, #16]
 8013304:	4303      	orrs	r3, r0
 8013306:	3701      	adds	r7, #1
 8013308:	9304      	str	r3, [sp, #16]
 801330a:	7839      	ldrb	r1, [r7, #0]
 801330c:	4827      	ldr	r0, [pc, #156]	; (80133ac <_svfiprintf_r+0x1e4>)
 801330e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013312:	2206      	movs	r2, #6
 8013314:	1c7e      	adds	r6, r7, #1
 8013316:	f7ec ff7b 	bl	8000210 <memchr>
 801331a:	2800      	cmp	r0, #0
 801331c:	d038      	beq.n	8013390 <_svfiprintf_r+0x1c8>
 801331e:	4b24      	ldr	r3, [pc, #144]	; (80133b0 <_svfiprintf_r+0x1e8>)
 8013320:	bb13      	cbnz	r3, 8013368 <_svfiprintf_r+0x1a0>
 8013322:	9b03      	ldr	r3, [sp, #12]
 8013324:	3307      	adds	r3, #7
 8013326:	f023 0307 	bic.w	r3, r3, #7
 801332a:	3308      	adds	r3, #8
 801332c:	9303      	str	r3, [sp, #12]
 801332e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013330:	444b      	add	r3, r9
 8013332:	9309      	str	r3, [sp, #36]	; 0x24
 8013334:	e76d      	b.n	8013212 <_svfiprintf_r+0x4a>
 8013336:	fb05 3202 	mla	r2, r5, r2, r3
 801333a:	2001      	movs	r0, #1
 801333c:	460f      	mov	r7, r1
 801333e:	e7a6      	b.n	801328e <_svfiprintf_r+0xc6>
 8013340:	2300      	movs	r3, #0
 8013342:	3701      	adds	r7, #1
 8013344:	9305      	str	r3, [sp, #20]
 8013346:	4619      	mov	r1, r3
 8013348:	250a      	movs	r5, #10
 801334a:	4638      	mov	r0, r7
 801334c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013350:	3a30      	subs	r2, #48	; 0x30
 8013352:	2a09      	cmp	r2, #9
 8013354:	d903      	bls.n	801335e <_svfiprintf_r+0x196>
 8013356:	2b00      	cmp	r3, #0
 8013358:	d0c8      	beq.n	80132ec <_svfiprintf_r+0x124>
 801335a:	9105      	str	r1, [sp, #20]
 801335c:	e7c6      	b.n	80132ec <_svfiprintf_r+0x124>
 801335e:	fb05 2101 	mla	r1, r5, r1, r2
 8013362:	2301      	movs	r3, #1
 8013364:	4607      	mov	r7, r0
 8013366:	e7f0      	b.n	801334a <_svfiprintf_r+0x182>
 8013368:	ab03      	add	r3, sp, #12
 801336a:	9300      	str	r3, [sp, #0]
 801336c:	4622      	mov	r2, r4
 801336e:	4b11      	ldr	r3, [pc, #68]	; (80133b4 <_svfiprintf_r+0x1ec>)
 8013370:	a904      	add	r1, sp, #16
 8013372:	4640      	mov	r0, r8
 8013374:	f7fb ffd0 	bl	800f318 <_printf_float>
 8013378:	f1b0 3fff 	cmp.w	r0, #4294967295
 801337c:	4681      	mov	r9, r0
 801337e:	d1d6      	bne.n	801332e <_svfiprintf_r+0x166>
 8013380:	89a3      	ldrh	r3, [r4, #12]
 8013382:	065b      	lsls	r3, r3, #25
 8013384:	f53f af35 	bmi.w	80131f2 <_svfiprintf_r+0x2a>
 8013388:	9809      	ldr	r0, [sp, #36]	; 0x24
 801338a:	b01d      	add	sp, #116	; 0x74
 801338c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013390:	ab03      	add	r3, sp, #12
 8013392:	9300      	str	r3, [sp, #0]
 8013394:	4622      	mov	r2, r4
 8013396:	4b07      	ldr	r3, [pc, #28]	; (80133b4 <_svfiprintf_r+0x1ec>)
 8013398:	a904      	add	r1, sp, #16
 801339a:	4640      	mov	r0, r8
 801339c:	f7fc fa72 	bl	800f884 <_printf_i>
 80133a0:	e7ea      	b.n	8013378 <_svfiprintf_r+0x1b0>
 80133a2:	bf00      	nop
 80133a4:	0801470c 	.word	0x0801470c
 80133a8:	08014712 	.word	0x08014712
 80133ac:	08014716 	.word	0x08014716
 80133b0:	0800f319 	.word	0x0800f319
 80133b4:	08013115 	.word	0x08013115

080133b8 <_sungetc_r>:
 80133b8:	b538      	push	{r3, r4, r5, lr}
 80133ba:	1c4b      	adds	r3, r1, #1
 80133bc:	4614      	mov	r4, r2
 80133be:	d103      	bne.n	80133c8 <_sungetc_r+0x10>
 80133c0:	f04f 35ff 	mov.w	r5, #4294967295
 80133c4:	4628      	mov	r0, r5
 80133c6:	bd38      	pop	{r3, r4, r5, pc}
 80133c8:	8993      	ldrh	r3, [r2, #12]
 80133ca:	f023 0320 	bic.w	r3, r3, #32
 80133ce:	8193      	strh	r3, [r2, #12]
 80133d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80133d2:	6852      	ldr	r2, [r2, #4]
 80133d4:	b2cd      	uxtb	r5, r1
 80133d6:	b18b      	cbz	r3, 80133fc <_sungetc_r+0x44>
 80133d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80133da:	4293      	cmp	r3, r2
 80133dc:	dd08      	ble.n	80133f0 <_sungetc_r+0x38>
 80133de:	6823      	ldr	r3, [r4, #0]
 80133e0:	1e5a      	subs	r2, r3, #1
 80133e2:	6022      	str	r2, [r4, #0]
 80133e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80133e8:	6863      	ldr	r3, [r4, #4]
 80133ea:	3301      	adds	r3, #1
 80133ec:	6063      	str	r3, [r4, #4]
 80133ee:	e7e9      	b.n	80133c4 <_sungetc_r+0xc>
 80133f0:	4621      	mov	r1, r4
 80133f2:	f000 fd15 	bl	8013e20 <__submore>
 80133f6:	2800      	cmp	r0, #0
 80133f8:	d0f1      	beq.n	80133de <_sungetc_r+0x26>
 80133fa:	e7e1      	b.n	80133c0 <_sungetc_r+0x8>
 80133fc:	6921      	ldr	r1, [r4, #16]
 80133fe:	6823      	ldr	r3, [r4, #0]
 8013400:	b151      	cbz	r1, 8013418 <_sungetc_r+0x60>
 8013402:	4299      	cmp	r1, r3
 8013404:	d208      	bcs.n	8013418 <_sungetc_r+0x60>
 8013406:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801340a:	42a9      	cmp	r1, r5
 801340c:	d104      	bne.n	8013418 <_sungetc_r+0x60>
 801340e:	3b01      	subs	r3, #1
 8013410:	3201      	adds	r2, #1
 8013412:	6023      	str	r3, [r4, #0]
 8013414:	6062      	str	r2, [r4, #4]
 8013416:	e7d5      	b.n	80133c4 <_sungetc_r+0xc>
 8013418:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801341c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013420:	6363      	str	r3, [r4, #52]	; 0x34
 8013422:	2303      	movs	r3, #3
 8013424:	63a3      	str	r3, [r4, #56]	; 0x38
 8013426:	4623      	mov	r3, r4
 8013428:	f803 5f46 	strb.w	r5, [r3, #70]!
 801342c:	6023      	str	r3, [r4, #0]
 801342e:	2301      	movs	r3, #1
 8013430:	e7dc      	b.n	80133ec <_sungetc_r+0x34>

08013432 <__ssrefill_r>:
 8013432:	b510      	push	{r4, lr}
 8013434:	460c      	mov	r4, r1
 8013436:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013438:	b169      	cbz	r1, 8013456 <__ssrefill_r+0x24>
 801343a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801343e:	4299      	cmp	r1, r3
 8013440:	d001      	beq.n	8013446 <__ssrefill_r+0x14>
 8013442:	f7ff fdbf 	bl	8012fc4 <_free_r>
 8013446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013448:	6063      	str	r3, [r4, #4]
 801344a:	2000      	movs	r0, #0
 801344c:	6360      	str	r0, [r4, #52]	; 0x34
 801344e:	b113      	cbz	r3, 8013456 <__ssrefill_r+0x24>
 8013450:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013452:	6023      	str	r3, [r4, #0]
 8013454:	bd10      	pop	{r4, pc}
 8013456:	6923      	ldr	r3, [r4, #16]
 8013458:	6023      	str	r3, [r4, #0]
 801345a:	2300      	movs	r3, #0
 801345c:	6063      	str	r3, [r4, #4]
 801345e:	89a3      	ldrh	r3, [r4, #12]
 8013460:	f043 0320 	orr.w	r3, r3, #32
 8013464:	81a3      	strh	r3, [r4, #12]
 8013466:	f04f 30ff 	mov.w	r0, #4294967295
 801346a:	e7f3      	b.n	8013454 <__ssrefill_r+0x22>

0801346c <__ssvfiscanf_r>:
 801346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013470:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013474:	460c      	mov	r4, r1
 8013476:	2100      	movs	r1, #0
 8013478:	9144      	str	r1, [sp, #272]	; 0x110
 801347a:	9145      	str	r1, [sp, #276]	; 0x114
 801347c:	499f      	ldr	r1, [pc, #636]	; (80136fc <__ssvfiscanf_r+0x290>)
 801347e:	91a0      	str	r1, [sp, #640]	; 0x280
 8013480:	f10d 0804 	add.w	r8, sp, #4
 8013484:	499e      	ldr	r1, [pc, #632]	; (8013700 <__ssvfiscanf_r+0x294>)
 8013486:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8013704 <__ssvfiscanf_r+0x298>
 801348a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801348e:	4606      	mov	r6, r0
 8013490:	4692      	mov	sl, r2
 8013492:	91a1      	str	r1, [sp, #644]	; 0x284
 8013494:	9300      	str	r3, [sp, #0]
 8013496:	270a      	movs	r7, #10
 8013498:	f89a 3000 	ldrb.w	r3, [sl]
 801349c:	2b00      	cmp	r3, #0
 801349e:	f000 812a 	beq.w	80136f6 <__ssvfiscanf_r+0x28a>
 80134a2:	4655      	mov	r5, sl
 80134a4:	f7ff f8c8 	bl	8012638 <__locale_ctype_ptr>
 80134a8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80134ac:	4458      	add	r0, fp
 80134ae:	7843      	ldrb	r3, [r0, #1]
 80134b0:	f013 0308 	ands.w	r3, r3, #8
 80134b4:	d01c      	beq.n	80134f0 <__ssvfiscanf_r+0x84>
 80134b6:	6863      	ldr	r3, [r4, #4]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	dd12      	ble.n	80134e2 <__ssvfiscanf_r+0x76>
 80134bc:	f7ff f8bc 	bl	8012638 <__locale_ctype_ptr>
 80134c0:	6823      	ldr	r3, [r4, #0]
 80134c2:	781a      	ldrb	r2, [r3, #0]
 80134c4:	4410      	add	r0, r2
 80134c6:	7842      	ldrb	r2, [r0, #1]
 80134c8:	0712      	lsls	r2, r2, #28
 80134ca:	d401      	bmi.n	80134d0 <__ssvfiscanf_r+0x64>
 80134cc:	46aa      	mov	sl, r5
 80134ce:	e7e3      	b.n	8013498 <__ssvfiscanf_r+0x2c>
 80134d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80134d2:	3201      	adds	r2, #1
 80134d4:	9245      	str	r2, [sp, #276]	; 0x114
 80134d6:	6862      	ldr	r2, [r4, #4]
 80134d8:	3301      	adds	r3, #1
 80134da:	3a01      	subs	r2, #1
 80134dc:	6062      	str	r2, [r4, #4]
 80134de:	6023      	str	r3, [r4, #0]
 80134e0:	e7e9      	b.n	80134b6 <__ssvfiscanf_r+0x4a>
 80134e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80134e4:	4621      	mov	r1, r4
 80134e6:	4630      	mov	r0, r6
 80134e8:	4798      	blx	r3
 80134ea:	2800      	cmp	r0, #0
 80134ec:	d0e6      	beq.n	80134bc <__ssvfiscanf_r+0x50>
 80134ee:	e7ed      	b.n	80134cc <__ssvfiscanf_r+0x60>
 80134f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80134f4:	f040 8082 	bne.w	80135fc <__ssvfiscanf_r+0x190>
 80134f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80134fa:	9341      	str	r3, [sp, #260]	; 0x104
 80134fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8013500:	2b2a      	cmp	r3, #42	; 0x2a
 8013502:	d103      	bne.n	801350c <__ssvfiscanf_r+0xa0>
 8013504:	2310      	movs	r3, #16
 8013506:	9341      	str	r3, [sp, #260]	; 0x104
 8013508:	f10a 0502 	add.w	r5, sl, #2
 801350c:	46aa      	mov	sl, r5
 801350e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8013512:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013516:	2a09      	cmp	r2, #9
 8013518:	d922      	bls.n	8013560 <__ssvfiscanf_r+0xf4>
 801351a:	2203      	movs	r2, #3
 801351c:	4879      	ldr	r0, [pc, #484]	; (8013704 <__ssvfiscanf_r+0x298>)
 801351e:	f7ec fe77 	bl	8000210 <memchr>
 8013522:	b138      	cbz	r0, 8013534 <__ssvfiscanf_r+0xc8>
 8013524:	eba0 0309 	sub.w	r3, r0, r9
 8013528:	2001      	movs	r0, #1
 801352a:	4098      	lsls	r0, r3
 801352c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801352e:	4318      	orrs	r0, r3
 8013530:	9041      	str	r0, [sp, #260]	; 0x104
 8013532:	46aa      	mov	sl, r5
 8013534:	f89a 3000 	ldrb.w	r3, [sl]
 8013538:	2b67      	cmp	r3, #103	; 0x67
 801353a:	f10a 0501 	add.w	r5, sl, #1
 801353e:	d82b      	bhi.n	8013598 <__ssvfiscanf_r+0x12c>
 8013540:	2b65      	cmp	r3, #101	; 0x65
 8013542:	f080 809f 	bcs.w	8013684 <__ssvfiscanf_r+0x218>
 8013546:	2b47      	cmp	r3, #71	; 0x47
 8013548:	d810      	bhi.n	801356c <__ssvfiscanf_r+0x100>
 801354a:	2b45      	cmp	r3, #69	; 0x45
 801354c:	f080 809a 	bcs.w	8013684 <__ssvfiscanf_r+0x218>
 8013550:	2b00      	cmp	r3, #0
 8013552:	d06c      	beq.n	801362e <__ssvfiscanf_r+0x1c2>
 8013554:	2b25      	cmp	r3, #37	; 0x25
 8013556:	d051      	beq.n	80135fc <__ssvfiscanf_r+0x190>
 8013558:	2303      	movs	r3, #3
 801355a:	9347      	str	r3, [sp, #284]	; 0x11c
 801355c:	9742      	str	r7, [sp, #264]	; 0x108
 801355e:	e027      	b.n	80135b0 <__ssvfiscanf_r+0x144>
 8013560:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013562:	fb07 1303 	mla	r3, r7, r3, r1
 8013566:	3b30      	subs	r3, #48	; 0x30
 8013568:	9343      	str	r3, [sp, #268]	; 0x10c
 801356a:	e7cf      	b.n	801350c <__ssvfiscanf_r+0xa0>
 801356c:	2b5b      	cmp	r3, #91	; 0x5b
 801356e:	d06a      	beq.n	8013646 <__ssvfiscanf_r+0x1da>
 8013570:	d80c      	bhi.n	801358c <__ssvfiscanf_r+0x120>
 8013572:	2b58      	cmp	r3, #88	; 0x58
 8013574:	d1f0      	bne.n	8013558 <__ssvfiscanf_r+0xec>
 8013576:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801357c:	9241      	str	r2, [sp, #260]	; 0x104
 801357e:	2210      	movs	r2, #16
 8013580:	9242      	str	r2, [sp, #264]	; 0x108
 8013582:	2b6e      	cmp	r3, #110	; 0x6e
 8013584:	bf8c      	ite	hi
 8013586:	2304      	movhi	r3, #4
 8013588:	2303      	movls	r3, #3
 801358a:	e010      	b.n	80135ae <__ssvfiscanf_r+0x142>
 801358c:	2b63      	cmp	r3, #99	; 0x63
 801358e:	d065      	beq.n	801365c <__ssvfiscanf_r+0x1f0>
 8013590:	2b64      	cmp	r3, #100	; 0x64
 8013592:	d1e1      	bne.n	8013558 <__ssvfiscanf_r+0xec>
 8013594:	9742      	str	r7, [sp, #264]	; 0x108
 8013596:	e7f4      	b.n	8013582 <__ssvfiscanf_r+0x116>
 8013598:	2b70      	cmp	r3, #112	; 0x70
 801359a:	d04b      	beq.n	8013634 <__ssvfiscanf_r+0x1c8>
 801359c:	d826      	bhi.n	80135ec <__ssvfiscanf_r+0x180>
 801359e:	2b6e      	cmp	r3, #110	; 0x6e
 80135a0:	d062      	beq.n	8013668 <__ssvfiscanf_r+0x1fc>
 80135a2:	d84c      	bhi.n	801363e <__ssvfiscanf_r+0x1d2>
 80135a4:	2b69      	cmp	r3, #105	; 0x69
 80135a6:	d1d7      	bne.n	8013558 <__ssvfiscanf_r+0xec>
 80135a8:	2300      	movs	r3, #0
 80135aa:	9342      	str	r3, [sp, #264]	; 0x108
 80135ac:	2303      	movs	r3, #3
 80135ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80135b0:	6863      	ldr	r3, [r4, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	dd68      	ble.n	8013688 <__ssvfiscanf_r+0x21c>
 80135b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80135b8:	0659      	lsls	r1, r3, #25
 80135ba:	d407      	bmi.n	80135cc <__ssvfiscanf_r+0x160>
 80135bc:	f7ff f83c 	bl	8012638 <__locale_ctype_ptr>
 80135c0:	6823      	ldr	r3, [r4, #0]
 80135c2:	781a      	ldrb	r2, [r3, #0]
 80135c4:	4410      	add	r0, r2
 80135c6:	7842      	ldrb	r2, [r0, #1]
 80135c8:	0712      	lsls	r2, r2, #28
 80135ca:	d464      	bmi.n	8013696 <__ssvfiscanf_r+0x22a>
 80135cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80135ce:	2b02      	cmp	r3, #2
 80135d0:	dc73      	bgt.n	80136ba <__ssvfiscanf_r+0x24e>
 80135d2:	466b      	mov	r3, sp
 80135d4:	4622      	mov	r2, r4
 80135d6:	a941      	add	r1, sp, #260	; 0x104
 80135d8:	4630      	mov	r0, r6
 80135da:	f000 f9d7 	bl	801398c <_scanf_chars>
 80135de:	2801      	cmp	r0, #1
 80135e0:	f000 8089 	beq.w	80136f6 <__ssvfiscanf_r+0x28a>
 80135e4:	2802      	cmp	r0, #2
 80135e6:	f47f af71 	bne.w	80134cc <__ssvfiscanf_r+0x60>
 80135ea:	e01d      	b.n	8013628 <__ssvfiscanf_r+0x1bc>
 80135ec:	2b75      	cmp	r3, #117	; 0x75
 80135ee:	d0d1      	beq.n	8013594 <__ssvfiscanf_r+0x128>
 80135f0:	2b78      	cmp	r3, #120	; 0x78
 80135f2:	d0c0      	beq.n	8013576 <__ssvfiscanf_r+0x10a>
 80135f4:	2b73      	cmp	r3, #115	; 0x73
 80135f6:	d1af      	bne.n	8013558 <__ssvfiscanf_r+0xec>
 80135f8:	2302      	movs	r3, #2
 80135fa:	e7d8      	b.n	80135ae <__ssvfiscanf_r+0x142>
 80135fc:	6863      	ldr	r3, [r4, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	dd0c      	ble.n	801361c <__ssvfiscanf_r+0x1b0>
 8013602:	6823      	ldr	r3, [r4, #0]
 8013604:	781a      	ldrb	r2, [r3, #0]
 8013606:	455a      	cmp	r2, fp
 8013608:	d175      	bne.n	80136f6 <__ssvfiscanf_r+0x28a>
 801360a:	3301      	adds	r3, #1
 801360c:	6862      	ldr	r2, [r4, #4]
 801360e:	6023      	str	r3, [r4, #0]
 8013610:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013612:	3a01      	subs	r2, #1
 8013614:	3301      	adds	r3, #1
 8013616:	6062      	str	r2, [r4, #4]
 8013618:	9345      	str	r3, [sp, #276]	; 0x114
 801361a:	e757      	b.n	80134cc <__ssvfiscanf_r+0x60>
 801361c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801361e:	4621      	mov	r1, r4
 8013620:	4630      	mov	r0, r6
 8013622:	4798      	blx	r3
 8013624:	2800      	cmp	r0, #0
 8013626:	d0ec      	beq.n	8013602 <__ssvfiscanf_r+0x196>
 8013628:	9844      	ldr	r0, [sp, #272]	; 0x110
 801362a:	2800      	cmp	r0, #0
 801362c:	d159      	bne.n	80136e2 <__ssvfiscanf_r+0x276>
 801362e:	f04f 30ff 	mov.w	r0, #4294967295
 8013632:	e05c      	b.n	80136ee <__ssvfiscanf_r+0x282>
 8013634:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013636:	f042 0220 	orr.w	r2, r2, #32
 801363a:	9241      	str	r2, [sp, #260]	; 0x104
 801363c:	e79b      	b.n	8013576 <__ssvfiscanf_r+0x10a>
 801363e:	2308      	movs	r3, #8
 8013640:	9342      	str	r3, [sp, #264]	; 0x108
 8013642:	2304      	movs	r3, #4
 8013644:	e7b3      	b.n	80135ae <__ssvfiscanf_r+0x142>
 8013646:	4629      	mov	r1, r5
 8013648:	4640      	mov	r0, r8
 801364a:	f000 fb19 	bl	8013c80 <__sccl>
 801364e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013654:	9341      	str	r3, [sp, #260]	; 0x104
 8013656:	4605      	mov	r5, r0
 8013658:	2301      	movs	r3, #1
 801365a:	e7a8      	b.n	80135ae <__ssvfiscanf_r+0x142>
 801365c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801365e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013662:	9341      	str	r3, [sp, #260]	; 0x104
 8013664:	2300      	movs	r3, #0
 8013666:	e7a2      	b.n	80135ae <__ssvfiscanf_r+0x142>
 8013668:	9841      	ldr	r0, [sp, #260]	; 0x104
 801366a:	06c3      	lsls	r3, r0, #27
 801366c:	f53f af2e 	bmi.w	80134cc <__ssvfiscanf_r+0x60>
 8013670:	9b00      	ldr	r3, [sp, #0]
 8013672:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013674:	1d19      	adds	r1, r3, #4
 8013676:	9100      	str	r1, [sp, #0]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	07c0      	lsls	r0, r0, #31
 801367c:	bf4c      	ite	mi
 801367e:	801a      	strhmi	r2, [r3, #0]
 8013680:	601a      	strpl	r2, [r3, #0]
 8013682:	e723      	b.n	80134cc <__ssvfiscanf_r+0x60>
 8013684:	2305      	movs	r3, #5
 8013686:	e792      	b.n	80135ae <__ssvfiscanf_r+0x142>
 8013688:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801368a:	4621      	mov	r1, r4
 801368c:	4630      	mov	r0, r6
 801368e:	4798      	blx	r3
 8013690:	2800      	cmp	r0, #0
 8013692:	d090      	beq.n	80135b6 <__ssvfiscanf_r+0x14a>
 8013694:	e7c8      	b.n	8013628 <__ssvfiscanf_r+0x1bc>
 8013696:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013698:	3201      	adds	r2, #1
 801369a:	9245      	str	r2, [sp, #276]	; 0x114
 801369c:	6862      	ldr	r2, [r4, #4]
 801369e:	3a01      	subs	r2, #1
 80136a0:	2a00      	cmp	r2, #0
 80136a2:	6062      	str	r2, [r4, #4]
 80136a4:	dd02      	ble.n	80136ac <__ssvfiscanf_r+0x240>
 80136a6:	3301      	adds	r3, #1
 80136a8:	6023      	str	r3, [r4, #0]
 80136aa:	e787      	b.n	80135bc <__ssvfiscanf_r+0x150>
 80136ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80136ae:	4621      	mov	r1, r4
 80136b0:	4630      	mov	r0, r6
 80136b2:	4798      	blx	r3
 80136b4:	2800      	cmp	r0, #0
 80136b6:	d081      	beq.n	80135bc <__ssvfiscanf_r+0x150>
 80136b8:	e7b6      	b.n	8013628 <__ssvfiscanf_r+0x1bc>
 80136ba:	2b04      	cmp	r3, #4
 80136bc:	dc06      	bgt.n	80136cc <__ssvfiscanf_r+0x260>
 80136be:	466b      	mov	r3, sp
 80136c0:	4622      	mov	r2, r4
 80136c2:	a941      	add	r1, sp, #260	; 0x104
 80136c4:	4630      	mov	r0, r6
 80136c6:	f000 f9c5 	bl	8013a54 <_scanf_i>
 80136ca:	e788      	b.n	80135de <__ssvfiscanf_r+0x172>
 80136cc:	4b0e      	ldr	r3, [pc, #56]	; (8013708 <__ssvfiscanf_r+0x29c>)
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	f43f aefc 	beq.w	80134cc <__ssvfiscanf_r+0x60>
 80136d4:	466b      	mov	r3, sp
 80136d6:	4622      	mov	r2, r4
 80136d8:	a941      	add	r1, sp, #260	; 0x104
 80136da:	4630      	mov	r0, r6
 80136dc:	f7fc f9e4 	bl	800faa8 <_scanf_float>
 80136e0:	e77d      	b.n	80135de <__ssvfiscanf_r+0x172>
 80136e2:	89a3      	ldrh	r3, [r4, #12]
 80136e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80136e8:	bf18      	it	ne
 80136ea:	f04f 30ff 	movne.w	r0, #4294967295
 80136ee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80136f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80136f8:	e7f9      	b.n	80136ee <__ssvfiscanf_r+0x282>
 80136fa:	bf00      	nop
 80136fc:	080133b9 	.word	0x080133b9
 8013700:	08013433 	.word	0x08013433
 8013704:	08014712 	.word	0x08014712
 8013708:	0800faa9 	.word	0x0800faa9

0801370c <__sfputc_r>:
 801370c:	6893      	ldr	r3, [r2, #8]
 801370e:	3b01      	subs	r3, #1
 8013710:	2b00      	cmp	r3, #0
 8013712:	b410      	push	{r4}
 8013714:	6093      	str	r3, [r2, #8]
 8013716:	da08      	bge.n	801372a <__sfputc_r+0x1e>
 8013718:	6994      	ldr	r4, [r2, #24]
 801371a:	42a3      	cmp	r3, r4
 801371c:	db01      	blt.n	8013722 <__sfputc_r+0x16>
 801371e:	290a      	cmp	r1, #10
 8013720:	d103      	bne.n	801372a <__sfputc_r+0x1e>
 8013722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013726:	f7fd bbbd 	b.w	8010ea4 <__swbuf_r>
 801372a:	6813      	ldr	r3, [r2, #0]
 801372c:	1c58      	adds	r0, r3, #1
 801372e:	6010      	str	r0, [r2, #0]
 8013730:	7019      	strb	r1, [r3, #0]
 8013732:	4608      	mov	r0, r1
 8013734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013738:	4770      	bx	lr

0801373a <__sfputs_r>:
 801373a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801373c:	4606      	mov	r6, r0
 801373e:	460f      	mov	r7, r1
 8013740:	4614      	mov	r4, r2
 8013742:	18d5      	adds	r5, r2, r3
 8013744:	42ac      	cmp	r4, r5
 8013746:	d101      	bne.n	801374c <__sfputs_r+0x12>
 8013748:	2000      	movs	r0, #0
 801374a:	e007      	b.n	801375c <__sfputs_r+0x22>
 801374c:	463a      	mov	r2, r7
 801374e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013752:	4630      	mov	r0, r6
 8013754:	f7ff ffda 	bl	801370c <__sfputc_r>
 8013758:	1c43      	adds	r3, r0, #1
 801375a:	d1f3      	bne.n	8013744 <__sfputs_r+0xa>
 801375c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013760 <_vfiprintf_r>:
 8013760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013764:	460c      	mov	r4, r1
 8013766:	b09d      	sub	sp, #116	; 0x74
 8013768:	4617      	mov	r7, r2
 801376a:	461d      	mov	r5, r3
 801376c:	4606      	mov	r6, r0
 801376e:	b118      	cbz	r0, 8013778 <_vfiprintf_r+0x18>
 8013770:	6983      	ldr	r3, [r0, #24]
 8013772:	b90b      	cbnz	r3, 8013778 <_vfiprintf_r+0x18>
 8013774:	f7fe fbac 	bl	8011ed0 <__sinit>
 8013778:	4b7c      	ldr	r3, [pc, #496]	; (801396c <_vfiprintf_r+0x20c>)
 801377a:	429c      	cmp	r4, r3
 801377c:	d158      	bne.n	8013830 <_vfiprintf_r+0xd0>
 801377e:	6874      	ldr	r4, [r6, #4]
 8013780:	89a3      	ldrh	r3, [r4, #12]
 8013782:	0718      	lsls	r0, r3, #28
 8013784:	d55e      	bpl.n	8013844 <_vfiprintf_r+0xe4>
 8013786:	6923      	ldr	r3, [r4, #16]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d05b      	beq.n	8013844 <_vfiprintf_r+0xe4>
 801378c:	2300      	movs	r3, #0
 801378e:	9309      	str	r3, [sp, #36]	; 0x24
 8013790:	2320      	movs	r3, #32
 8013792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013796:	2330      	movs	r3, #48	; 0x30
 8013798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801379c:	9503      	str	r5, [sp, #12]
 801379e:	f04f 0b01 	mov.w	fp, #1
 80137a2:	46b8      	mov	r8, r7
 80137a4:	4645      	mov	r5, r8
 80137a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80137aa:	b10b      	cbz	r3, 80137b0 <_vfiprintf_r+0x50>
 80137ac:	2b25      	cmp	r3, #37	; 0x25
 80137ae:	d154      	bne.n	801385a <_vfiprintf_r+0xfa>
 80137b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80137b4:	d00b      	beq.n	80137ce <_vfiprintf_r+0x6e>
 80137b6:	4653      	mov	r3, sl
 80137b8:	463a      	mov	r2, r7
 80137ba:	4621      	mov	r1, r4
 80137bc:	4630      	mov	r0, r6
 80137be:	f7ff ffbc 	bl	801373a <__sfputs_r>
 80137c2:	3001      	adds	r0, #1
 80137c4:	f000 80c2 	beq.w	801394c <_vfiprintf_r+0x1ec>
 80137c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137ca:	4453      	add	r3, sl
 80137cc:	9309      	str	r3, [sp, #36]	; 0x24
 80137ce:	f898 3000 	ldrb.w	r3, [r8]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	f000 80ba 	beq.w	801394c <_vfiprintf_r+0x1ec>
 80137d8:	2300      	movs	r3, #0
 80137da:	f04f 32ff 	mov.w	r2, #4294967295
 80137de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137e2:	9304      	str	r3, [sp, #16]
 80137e4:	9307      	str	r3, [sp, #28]
 80137e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137ea:	931a      	str	r3, [sp, #104]	; 0x68
 80137ec:	46a8      	mov	r8, r5
 80137ee:	2205      	movs	r2, #5
 80137f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80137f4:	485e      	ldr	r0, [pc, #376]	; (8013970 <_vfiprintf_r+0x210>)
 80137f6:	f7ec fd0b 	bl	8000210 <memchr>
 80137fa:	9b04      	ldr	r3, [sp, #16]
 80137fc:	bb78      	cbnz	r0, 801385e <_vfiprintf_r+0xfe>
 80137fe:	06d9      	lsls	r1, r3, #27
 8013800:	bf44      	itt	mi
 8013802:	2220      	movmi	r2, #32
 8013804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013808:	071a      	lsls	r2, r3, #28
 801380a:	bf44      	itt	mi
 801380c:	222b      	movmi	r2, #43	; 0x2b
 801380e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013812:	782a      	ldrb	r2, [r5, #0]
 8013814:	2a2a      	cmp	r2, #42	; 0x2a
 8013816:	d02a      	beq.n	801386e <_vfiprintf_r+0x10e>
 8013818:	9a07      	ldr	r2, [sp, #28]
 801381a:	46a8      	mov	r8, r5
 801381c:	2000      	movs	r0, #0
 801381e:	250a      	movs	r5, #10
 8013820:	4641      	mov	r1, r8
 8013822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013826:	3b30      	subs	r3, #48	; 0x30
 8013828:	2b09      	cmp	r3, #9
 801382a:	d969      	bls.n	8013900 <_vfiprintf_r+0x1a0>
 801382c:	b360      	cbz	r0, 8013888 <_vfiprintf_r+0x128>
 801382e:	e024      	b.n	801387a <_vfiprintf_r+0x11a>
 8013830:	4b50      	ldr	r3, [pc, #320]	; (8013974 <_vfiprintf_r+0x214>)
 8013832:	429c      	cmp	r4, r3
 8013834:	d101      	bne.n	801383a <_vfiprintf_r+0xda>
 8013836:	68b4      	ldr	r4, [r6, #8]
 8013838:	e7a2      	b.n	8013780 <_vfiprintf_r+0x20>
 801383a:	4b4f      	ldr	r3, [pc, #316]	; (8013978 <_vfiprintf_r+0x218>)
 801383c:	429c      	cmp	r4, r3
 801383e:	bf08      	it	eq
 8013840:	68f4      	ldreq	r4, [r6, #12]
 8013842:	e79d      	b.n	8013780 <_vfiprintf_r+0x20>
 8013844:	4621      	mov	r1, r4
 8013846:	4630      	mov	r0, r6
 8013848:	f7fd fb90 	bl	8010f6c <__swsetup_r>
 801384c:	2800      	cmp	r0, #0
 801384e:	d09d      	beq.n	801378c <_vfiprintf_r+0x2c>
 8013850:	f04f 30ff 	mov.w	r0, #4294967295
 8013854:	b01d      	add	sp, #116	; 0x74
 8013856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801385a:	46a8      	mov	r8, r5
 801385c:	e7a2      	b.n	80137a4 <_vfiprintf_r+0x44>
 801385e:	4a44      	ldr	r2, [pc, #272]	; (8013970 <_vfiprintf_r+0x210>)
 8013860:	1a80      	subs	r0, r0, r2
 8013862:	fa0b f000 	lsl.w	r0, fp, r0
 8013866:	4318      	orrs	r0, r3
 8013868:	9004      	str	r0, [sp, #16]
 801386a:	4645      	mov	r5, r8
 801386c:	e7be      	b.n	80137ec <_vfiprintf_r+0x8c>
 801386e:	9a03      	ldr	r2, [sp, #12]
 8013870:	1d11      	adds	r1, r2, #4
 8013872:	6812      	ldr	r2, [r2, #0]
 8013874:	9103      	str	r1, [sp, #12]
 8013876:	2a00      	cmp	r2, #0
 8013878:	db01      	blt.n	801387e <_vfiprintf_r+0x11e>
 801387a:	9207      	str	r2, [sp, #28]
 801387c:	e004      	b.n	8013888 <_vfiprintf_r+0x128>
 801387e:	4252      	negs	r2, r2
 8013880:	f043 0302 	orr.w	r3, r3, #2
 8013884:	9207      	str	r2, [sp, #28]
 8013886:	9304      	str	r3, [sp, #16]
 8013888:	f898 3000 	ldrb.w	r3, [r8]
 801388c:	2b2e      	cmp	r3, #46	; 0x2e
 801388e:	d10e      	bne.n	80138ae <_vfiprintf_r+0x14e>
 8013890:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013894:	2b2a      	cmp	r3, #42	; 0x2a
 8013896:	d138      	bne.n	801390a <_vfiprintf_r+0x1aa>
 8013898:	9b03      	ldr	r3, [sp, #12]
 801389a:	1d1a      	adds	r2, r3, #4
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	9203      	str	r2, [sp, #12]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	bfb8      	it	lt
 80138a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80138a8:	f108 0802 	add.w	r8, r8, #2
 80138ac:	9305      	str	r3, [sp, #20]
 80138ae:	4d33      	ldr	r5, [pc, #204]	; (801397c <_vfiprintf_r+0x21c>)
 80138b0:	f898 1000 	ldrb.w	r1, [r8]
 80138b4:	2203      	movs	r2, #3
 80138b6:	4628      	mov	r0, r5
 80138b8:	f7ec fcaa 	bl	8000210 <memchr>
 80138bc:	b140      	cbz	r0, 80138d0 <_vfiprintf_r+0x170>
 80138be:	2340      	movs	r3, #64	; 0x40
 80138c0:	1b40      	subs	r0, r0, r5
 80138c2:	fa03 f000 	lsl.w	r0, r3, r0
 80138c6:	9b04      	ldr	r3, [sp, #16]
 80138c8:	4303      	orrs	r3, r0
 80138ca:	f108 0801 	add.w	r8, r8, #1
 80138ce:	9304      	str	r3, [sp, #16]
 80138d0:	f898 1000 	ldrb.w	r1, [r8]
 80138d4:	482a      	ldr	r0, [pc, #168]	; (8013980 <_vfiprintf_r+0x220>)
 80138d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138da:	2206      	movs	r2, #6
 80138dc:	f108 0701 	add.w	r7, r8, #1
 80138e0:	f7ec fc96 	bl	8000210 <memchr>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d037      	beq.n	8013958 <_vfiprintf_r+0x1f8>
 80138e8:	4b26      	ldr	r3, [pc, #152]	; (8013984 <_vfiprintf_r+0x224>)
 80138ea:	bb1b      	cbnz	r3, 8013934 <_vfiprintf_r+0x1d4>
 80138ec:	9b03      	ldr	r3, [sp, #12]
 80138ee:	3307      	adds	r3, #7
 80138f0:	f023 0307 	bic.w	r3, r3, #7
 80138f4:	3308      	adds	r3, #8
 80138f6:	9303      	str	r3, [sp, #12]
 80138f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138fa:	444b      	add	r3, r9
 80138fc:	9309      	str	r3, [sp, #36]	; 0x24
 80138fe:	e750      	b.n	80137a2 <_vfiprintf_r+0x42>
 8013900:	fb05 3202 	mla	r2, r5, r2, r3
 8013904:	2001      	movs	r0, #1
 8013906:	4688      	mov	r8, r1
 8013908:	e78a      	b.n	8013820 <_vfiprintf_r+0xc0>
 801390a:	2300      	movs	r3, #0
 801390c:	f108 0801 	add.w	r8, r8, #1
 8013910:	9305      	str	r3, [sp, #20]
 8013912:	4619      	mov	r1, r3
 8013914:	250a      	movs	r5, #10
 8013916:	4640      	mov	r0, r8
 8013918:	f810 2b01 	ldrb.w	r2, [r0], #1
 801391c:	3a30      	subs	r2, #48	; 0x30
 801391e:	2a09      	cmp	r2, #9
 8013920:	d903      	bls.n	801392a <_vfiprintf_r+0x1ca>
 8013922:	2b00      	cmp	r3, #0
 8013924:	d0c3      	beq.n	80138ae <_vfiprintf_r+0x14e>
 8013926:	9105      	str	r1, [sp, #20]
 8013928:	e7c1      	b.n	80138ae <_vfiprintf_r+0x14e>
 801392a:	fb05 2101 	mla	r1, r5, r1, r2
 801392e:	2301      	movs	r3, #1
 8013930:	4680      	mov	r8, r0
 8013932:	e7f0      	b.n	8013916 <_vfiprintf_r+0x1b6>
 8013934:	ab03      	add	r3, sp, #12
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	4622      	mov	r2, r4
 801393a:	4b13      	ldr	r3, [pc, #76]	; (8013988 <_vfiprintf_r+0x228>)
 801393c:	a904      	add	r1, sp, #16
 801393e:	4630      	mov	r0, r6
 8013940:	f7fb fcea 	bl	800f318 <_printf_float>
 8013944:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013948:	4681      	mov	r9, r0
 801394a:	d1d5      	bne.n	80138f8 <_vfiprintf_r+0x198>
 801394c:	89a3      	ldrh	r3, [r4, #12]
 801394e:	065b      	lsls	r3, r3, #25
 8013950:	f53f af7e 	bmi.w	8013850 <_vfiprintf_r+0xf0>
 8013954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013956:	e77d      	b.n	8013854 <_vfiprintf_r+0xf4>
 8013958:	ab03      	add	r3, sp, #12
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	4622      	mov	r2, r4
 801395e:	4b0a      	ldr	r3, [pc, #40]	; (8013988 <_vfiprintf_r+0x228>)
 8013960:	a904      	add	r1, sp, #16
 8013962:	4630      	mov	r0, r6
 8013964:	f7fb ff8e 	bl	800f884 <_printf_i>
 8013968:	e7ec      	b.n	8013944 <_vfiprintf_r+0x1e4>
 801396a:	bf00      	nop
 801396c:	080145c0 	.word	0x080145c0
 8013970:	0801470c 	.word	0x0801470c
 8013974:	080145e0 	.word	0x080145e0
 8013978:	080145a0 	.word	0x080145a0
 801397c:	08014712 	.word	0x08014712
 8013980:	08014716 	.word	0x08014716
 8013984:	0800f319 	.word	0x0800f319
 8013988:	0801373b 	.word	0x0801373b

0801398c <_scanf_chars>:
 801398c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013990:	4615      	mov	r5, r2
 8013992:	688a      	ldr	r2, [r1, #8]
 8013994:	4680      	mov	r8, r0
 8013996:	460c      	mov	r4, r1
 8013998:	b932      	cbnz	r2, 80139a8 <_scanf_chars+0x1c>
 801399a:	698a      	ldr	r2, [r1, #24]
 801399c:	2a00      	cmp	r2, #0
 801399e:	bf14      	ite	ne
 80139a0:	f04f 32ff 	movne.w	r2, #4294967295
 80139a4:	2201      	moveq	r2, #1
 80139a6:	608a      	str	r2, [r1, #8]
 80139a8:	6822      	ldr	r2, [r4, #0]
 80139aa:	06d1      	lsls	r1, r2, #27
 80139ac:	bf5f      	itttt	pl
 80139ae:	681a      	ldrpl	r2, [r3, #0]
 80139b0:	1d11      	addpl	r1, r2, #4
 80139b2:	6019      	strpl	r1, [r3, #0]
 80139b4:	6817      	ldrpl	r7, [r2, #0]
 80139b6:	2600      	movs	r6, #0
 80139b8:	69a3      	ldr	r3, [r4, #24]
 80139ba:	b1db      	cbz	r3, 80139f4 <_scanf_chars+0x68>
 80139bc:	2b01      	cmp	r3, #1
 80139be:	d107      	bne.n	80139d0 <_scanf_chars+0x44>
 80139c0:	682b      	ldr	r3, [r5, #0]
 80139c2:	6962      	ldr	r2, [r4, #20]
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	5cd3      	ldrb	r3, [r2, r3]
 80139c8:	b9a3      	cbnz	r3, 80139f4 <_scanf_chars+0x68>
 80139ca:	2e00      	cmp	r6, #0
 80139cc:	d132      	bne.n	8013a34 <_scanf_chars+0xa8>
 80139ce:	e006      	b.n	80139de <_scanf_chars+0x52>
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d007      	beq.n	80139e4 <_scanf_chars+0x58>
 80139d4:	2e00      	cmp	r6, #0
 80139d6:	d12d      	bne.n	8013a34 <_scanf_chars+0xa8>
 80139d8:	69a3      	ldr	r3, [r4, #24]
 80139da:	2b01      	cmp	r3, #1
 80139dc:	d12a      	bne.n	8013a34 <_scanf_chars+0xa8>
 80139de:	2001      	movs	r0, #1
 80139e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139e4:	f7fe fe28 	bl	8012638 <__locale_ctype_ptr>
 80139e8:	682b      	ldr	r3, [r5, #0]
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	4418      	add	r0, r3
 80139ee:	7843      	ldrb	r3, [r0, #1]
 80139f0:	071b      	lsls	r3, r3, #28
 80139f2:	d4ef      	bmi.n	80139d4 <_scanf_chars+0x48>
 80139f4:	6823      	ldr	r3, [r4, #0]
 80139f6:	06da      	lsls	r2, r3, #27
 80139f8:	bf5e      	ittt	pl
 80139fa:	682b      	ldrpl	r3, [r5, #0]
 80139fc:	781b      	ldrbpl	r3, [r3, #0]
 80139fe:	703b      	strbpl	r3, [r7, #0]
 8013a00:	682a      	ldr	r2, [r5, #0]
 8013a02:	686b      	ldr	r3, [r5, #4]
 8013a04:	f102 0201 	add.w	r2, r2, #1
 8013a08:	602a      	str	r2, [r5, #0]
 8013a0a:	68a2      	ldr	r2, [r4, #8]
 8013a0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013a10:	f102 32ff 	add.w	r2, r2, #4294967295
 8013a14:	606b      	str	r3, [r5, #4]
 8013a16:	f106 0601 	add.w	r6, r6, #1
 8013a1a:	bf58      	it	pl
 8013a1c:	3701      	addpl	r7, #1
 8013a1e:	60a2      	str	r2, [r4, #8]
 8013a20:	b142      	cbz	r2, 8013a34 <_scanf_chars+0xa8>
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	dcc8      	bgt.n	80139b8 <_scanf_chars+0x2c>
 8013a26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	4640      	mov	r0, r8
 8013a2e:	4798      	blx	r3
 8013a30:	2800      	cmp	r0, #0
 8013a32:	d0c1      	beq.n	80139b8 <_scanf_chars+0x2c>
 8013a34:	6823      	ldr	r3, [r4, #0]
 8013a36:	f013 0310 	ands.w	r3, r3, #16
 8013a3a:	d105      	bne.n	8013a48 <_scanf_chars+0xbc>
 8013a3c:	68e2      	ldr	r2, [r4, #12]
 8013a3e:	3201      	adds	r2, #1
 8013a40:	60e2      	str	r2, [r4, #12]
 8013a42:	69a2      	ldr	r2, [r4, #24]
 8013a44:	b102      	cbz	r2, 8013a48 <_scanf_chars+0xbc>
 8013a46:	703b      	strb	r3, [r7, #0]
 8013a48:	6923      	ldr	r3, [r4, #16]
 8013a4a:	441e      	add	r6, r3
 8013a4c:	6126      	str	r6, [r4, #16]
 8013a4e:	2000      	movs	r0, #0
 8013a50:	e7c6      	b.n	80139e0 <_scanf_chars+0x54>
	...

08013a54 <_scanf_i>:
 8013a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a58:	469a      	mov	sl, r3
 8013a5a:	4b74      	ldr	r3, [pc, #464]	; (8013c2c <_scanf_i+0x1d8>)
 8013a5c:	460c      	mov	r4, r1
 8013a5e:	4683      	mov	fp, r0
 8013a60:	4616      	mov	r6, r2
 8013a62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013a66:	b087      	sub	sp, #28
 8013a68:	ab03      	add	r3, sp, #12
 8013a6a:	68a7      	ldr	r7, [r4, #8]
 8013a6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013a70:	4b6f      	ldr	r3, [pc, #444]	; (8013c30 <_scanf_i+0x1dc>)
 8013a72:	69a1      	ldr	r1, [r4, #24]
 8013a74:	4a6f      	ldr	r2, [pc, #444]	; (8013c34 <_scanf_i+0x1e0>)
 8013a76:	2903      	cmp	r1, #3
 8013a78:	bf08      	it	eq
 8013a7a:	461a      	moveq	r2, r3
 8013a7c:	1e7b      	subs	r3, r7, #1
 8013a7e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8013a82:	bf84      	itt	hi
 8013a84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013a88:	60a3      	strhi	r3, [r4, #8]
 8013a8a:	6823      	ldr	r3, [r4, #0]
 8013a8c:	9200      	str	r2, [sp, #0]
 8013a8e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013a92:	bf88      	it	hi
 8013a94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013a98:	f104 091c 	add.w	r9, r4, #28
 8013a9c:	6023      	str	r3, [r4, #0]
 8013a9e:	bf8c      	ite	hi
 8013aa0:	197f      	addhi	r7, r7, r5
 8013aa2:	2700      	movls	r7, #0
 8013aa4:	464b      	mov	r3, r9
 8013aa6:	f04f 0800 	mov.w	r8, #0
 8013aaa:	9301      	str	r3, [sp, #4]
 8013aac:	6831      	ldr	r1, [r6, #0]
 8013aae:	ab03      	add	r3, sp, #12
 8013ab0:	2202      	movs	r2, #2
 8013ab2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013ab6:	7809      	ldrb	r1, [r1, #0]
 8013ab8:	f7ec fbaa 	bl	8000210 <memchr>
 8013abc:	9b01      	ldr	r3, [sp, #4]
 8013abe:	b330      	cbz	r0, 8013b0e <_scanf_i+0xba>
 8013ac0:	f1b8 0f01 	cmp.w	r8, #1
 8013ac4:	d15a      	bne.n	8013b7c <_scanf_i+0x128>
 8013ac6:	6862      	ldr	r2, [r4, #4]
 8013ac8:	b92a      	cbnz	r2, 8013ad6 <_scanf_i+0x82>
 8013aca:	6822      	ldr	r2, [r4, #0]
 8013acc:	2108      	movs	r1, #8
 8013ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ad2:	6061      	str	r1, [r4, #4]
 8013ad4:	6022      	str	r2, [r4, #0]
 8013ad6:	6822      	ldr	r2, [r4, #0]
 8013ad8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013adc:	6022      	str	r2, [r4, #0]
 8013ade:	68a2      	ldr	r2, [r4, #8]
 8013ae0:	1e51      	subs	r1, r2, #1
 8013ae2:	60a1      	str	r1, [r4, #8]
 8013ae4:	b19a      	cbz	r2, 8013b0e <_scanf_i+0xba>
 8013ae6:	6832      	ldr	r2, [r6, #0]
 8013ae8:	1c51      	adds	r1, r2, #1
 8013aea:	6031      	str	r1, [r6, #0]
 8013aec:	7812      	ldrb	r2, [r2, #0]
 8013aee:	701a      	strb	r2, [r3, #0]
 8013af0:	1c5d      	adds	r5, r3, #1
 8013af2:	6873      	ldr	r3, [r6, #4]
 8013af4:	3b01      	subs	r3, #1
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	6073      	str	r3, [r6, #4]
 8013afa:	dc07      	bgt.n	8013b0c <_scanf_i+0xb8>
 8013afc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013b00:	4631      	mov	r1, r6
 8013b02:	4658      	mov	r0, fp
 8013b04:	4798      	blx	r3
 8013b06:	2800      	cmp	r0, #0
 8013b08:	f040 8086 	bne.w	8013c18 <_scanf_i+0x1c4>
 8013b0c:	462b      	mov	r3, r5
 8013b0e:	f108 0801 	add.w	r8, r8, #1
 8013b12:	f1b8 0f03 	cmp.w	r8, #3
 8013b16:	d1c8      	bne.n	8013aaa <_scanf_i+0x56>
 8013b18:	6862      	ldr	r2, [r4, #4]
 8013b1a:	b90a      	cbnz	r2, 8013b20 <_scanf_i+0xcc>
 8013b1c:	220a      	movs	r2, #10
 8013b1e:	6062      	str	r2, [r4, #4]
 8013b20:	6862      	ldr	r2, [r4, #4]
 8013b22:	4945      	ldr	r1, [pc, #276]	; (8013c38 <_scanf_i+0x1e4>)
 8013b24:	6960      	ldr	r0, [r4, #20]
 8013b26:	9301      	str	r3, [sp, #4]
 8013b28:	1a89      	subs	r1, r1, r2
 8013b2a:	f000 f8a9 	bl	8013c80 <__sccl>
 8013b2e:	9b01      	ldr	r3, [sp, #4]
 8013b30:	f04f 0800 	mov.w	r8, #0
 8013b34:	461d      	mov	r5, r3
 8013b36:	68a3      	ldr	r3, [r4, #8]
 8013b38:	6822      	ldr	r2, [r4, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d03a      	beq.n	8013bb4 <_scanf_i+0x160>
 8013b3e:	6831      	ldr	r1, [r6, #0]
 8013b40:	6960      	ldr	r0, [r4, #20]
 8013b42:	f891 c000 	ldrb.w	ip, [r1]
 8013b46:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013b4a:	2800      	cmp	r0, #0
 8013b4c:	d032      	beq.n	8013bb4 <_scanf_i+0x160>
 8013b4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013b52:	d121      	bne.n	8013b98 <_scanf_i+0x144>
 8013b54:	0510      	lsls	r0, r2, #20
 8013b56:	d51f      	bpl.n	8013b98 <_scanf_i+0x144>
 8013b58:	f108 0801 	add.w	r8, r8, #1
 8013b5c:	b117      	cbz	r7, 8013b64 <_scanf_i+0x110>
 8013b5e:	3301      	adds	r3, #1
 8013b60:	3f01      	subs	r7, #1
 8013b62:	60a3      	str	r3, [r4, #8]
 8013b64:	6873      	ldr	r3, [r6, #4]
 8013b66:	3b01      	subs	r3, #1
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	6073      	str	r3, [r6, #4]
 8013b6c:	dd1b      	ble.n	8013ba6 <_scanf_i+0x152>
 8013b6e:	6833      	ldr	r3, [r6, #0]
 8013b70:	3301      	adds	r3, #1
 8013b72:	6033      	str	r3, [r6, #0]
 8013b74:	68a3      	ldr	r3, [r4, #8]
 8013b76:	3b01      	subs	r3, #1
 8013b78:	60a3      	str	r3, [r4, #8]
 8013b7a:	e7dc      	b.n	8013b36 <_scanf_i+0xe2>
 8013b7c:	f1b8 0f02 	cmp.w	r8, #2
 8013b80:	d1ad      	bne.n	8013ade <_scanf_i+0x8a>
 8013b82:	6822      	ldr	r2, [r4, #0]
 8013b84:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013b88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013b8c:	d1bf      	bne.n	8013b0e <_scanf_i+0xba>
 8013b8e:	2110      	movs	r1, #16
 8013b90:	6061      	str	r1, [r4, #4]
 8013b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013b96:	e7a1      	b.n	8013adc <_scanf_i+0x88>
 8013b98:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013b9c:	6022      	str	r2, [r4, #0]
 8013b9e:	780b      	ldrb	r3, [r1, #0]
 8013ba0:	702b      	strb	r3, [r5, #0]
 8013ba2:	3501      	adds	r5, #1
 8013ba4:	e7de      	b.n	8013b64 <_scanf_i+0x110>
 8013ba6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013baa:	4631      	mov	r1, r6
 8013bac:	4658      	mov	r0, fp
 8013bae:	4798      	blx	r3
 8013bb0:	2800      	cmp	r0, #0
 8013bb2:	d0df      	beq.n	8013b74 <_scanf_i+0x120>
 8013bb4:	6823      	ldr	r3, [r4, #0]
 8013bb6:	05d9      	lsls	r1, r3, #23
 8013bb8:	d50c      	bpl.n	8013bd4 <_scanf_i+0x180>
 8013bba:	454d      	cmp	r5, r9
 8013bbc:	d908      	bls.n	8013bd0 <_scanf_i+0x17c>
 8013bbe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013bc6:	4632      	mov	r2, r6
 8013bc8:	4658      	mov	r0, fp
 8013bca:	4798      	blx	r3
 8013bcc:	1e6f      	subs	r7, r5, #1
 8013bce:	463d      	mov	r5, r7
 8013bd0:	454d      	cmp	r5, r9
 8013bd2:	d029      	beq.n	8013c28 <_scanf_i+0x1d4>
 8013bd4:	6822      	ldr	r2, [r4, #0]
 8013bd6:	f012 0210 	ands.w	r2, r2, #16
 8013bda:	d113      	bne.n	8013c04 <_scanf_i+0x1b0>
 8013bdc:	702a      	strb	r2, [r5, #0]
 8013bde:	6863      	ldr	r3, [r4, #4]
 8013be0:	9e00      	ldr	r6, [sp, #0]
 8013be2:	4649      	mov	r1, r9
 8013be4:	4658      	mov	r0, fp
 8013be6:	47b0      	blx	r6
 8013be8:	f8da 3000 	ldr.w	r3, [sl]
 8013bec:	6821      	ldr	r1, [r4, #0]
 8013bee:	1d1a      	adds	r2, r3, #4
 8013bf0:	f8ca 2000 	str.w	r2, [sl]
 8013bf4:	f011 0f20 	tst.w	r1, #32
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	d010      	beq.n	8013c1e <_scanf_i+0x1ca>
 8013bfc:	6018      	str	r0, [r3, #0]
 8013bfe:	68e3      	ldr	r3, [r4, #12]
 8013c00:	3301      	adds	r3, #1
 8013c02:	60e3      	str	r3, [r4, #12]
 8013c04:	eba5 0509 	sub.w	r5, r5, r9
 8013c08:	44a8      	add	r8, r5
 8013c0a:	6925      	ldr	r5, [r4, #16]
 8013c0c:	4445      	add	r5, r8
 8013c0e:	6125      	str	r5, [r4, #16]
 8013c10:	2000      	movs	r0, #0
 8013c12:	b007      	add	sp, #28
 8013c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c18:	f04f 0800 	mov.w	r8, #0
 8013c1c:	e7ca      	b.n	8013bb4 <_scanf_i+0x160>
 8013c1e:	07ca      	lsls	r2, r1, #31
 8013c20:	bf4c      	ite	mi
 8013c22:	8018      	strhmi	r0, [r3, #0]
 8013c24:	6018      	strpl	r0, [r3, #0]
 8013c26:	e7ea      	b.n	8013bfe <_scanf_i+0x1aa>
 8013c28:	2001      	movs	r0, #1
 8013c2a:	e7f2      	b.n	8013c12 <_scanf_i+0x1be>
 8013c2c:	08014080 	.word	0x08014080
 8013c30:	08010e41 	.word	0x08010e41
 8013c34:	08013dfd 	.word	0x08013dfd
 8013c38:	0801472d 	.word	0x0801472d

08013c3c <_read_r>:
 8013c3c:	b538      	push	{r3, r4, r5, lr}
 8013c3e:	4c07      	ldr	r4, [pc, #28]	; (8013c5c <_read_r+0x20>)
 8013c40:	4605      	mov	r5, r0
 8013c42:	4608      	mov	r0, r1
 8013c44:	4611      	mov	r1, r2
 8013c46:	2200      	movs	r2, #0
 8013c48:	6022      	str	r2, [r4, #0]
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	f7f0 f91c 	bl	8003e88 <_read>
 8013c50:	1c43      	adds	r3, r0, #1
 8013c52:	d102      	bne.n	8013c5a <_read_r+0x1e>
 8013c54:	6823      	ldr	r3, [r4, #0]
 8013c56:	b103      	cbz	r3, 8013c5a <_read_r+0x1e>
 8013c58:	602b      	str	r3, [r5, #0]
 8013c5a:	bd38      	pop	{r3, r4, r5, pc}
 8013c5c:	20005098 	.word	0x20005098

08013c60 <_sbrk_r>:
 8013c60:	b538      	push	{r3, r4, r5, lr}
 8013c62:	4c06      	ldr	r4, [pc, #24]	; (8013c7c <_sbrk_r+0x1c>)
 8013c64:	2300      	movs	r3, #0
 8013c66:	4605      	mov	r5, r0
 8013c68:	4608      	mov	r0, r1
 8013c6a:	6023      	str	r3, [r4, #0]
 8013c6c:	f7f0 f95e 	bl	8003f2c <_sbrk>
 8013c70:	1c43      	adds	r3, r0, #1
 8013c72:	d102      	bne.n	8013c7a <_sbrk_r+0x1a>
 8013c74:	6823      	ldr	r3, [r4, #0]
 8013c76:	b103      	cbz	r3, 8013c7a <_sbrk_r+0x1a>
 8013c78:	602b      	str	r3, [r5, #0]
 8013c7a:	bd38      	pop	{r3, r4, r5, pc}
 8013c7c:	20005098 	.word	0x20005098

08013c80 <__sccl>:
 8013c80:	b570      	push	{r4, r5, r6, lr}
 8013c82:	780b      	ldrb	r3, [r1, #0]
 8013c84:	2b5e      	cmp	r3, #94	; 0x5e
 8013c86:	bf13      	iteet	ne
 8013c88:	1c4a      	addne	r2, r1, #1
 8013c8a:	1c8a      	addeq	r2, r1, #2
 8013c8c:	784b      	ldrbeq	r3, [r1, #1]
 8013c8e:	2100      	movne	r1, #0
 8013c90:	bf08      	it	eq
 8013c92:	2101      	moveq	r1, #1
 8013c94:	1e44      	subs	r4, r0, #1
 8013c96:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8013c9a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8013c9e:	42ac      	cmp	r4, r5
 8013ca0:	d1fb      	bne.n	8013c9a <__sccl+0x1a>
 8013ca2:	b913      	cbnz	r3, 8013caa <__sccl+0x2a>
 8013ca4:	3a01      	subs	r2, #1
 8013ca6:	4610      	mov	r0, r2
 8013ca8:	bd70      	pop	{r4, r5, r6, pc}
 8013caa:	f081 0401 	eor.w	r4, r1, #1
 8013cae:	54c4      	strb	r4, [r0, r3]
 8013cb0:	1c51      	adds	r1, r2, #1
 8013cb2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8013cb6:	2d2d      	cmp	r5, #45	; 0x2d
 8013cb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8013cbc:	460a      	mov	r2, r1
 8013cbe:	d006      	beq.n	8013cce <__sccl+0x4e>
 8013cc0:	2d5d      	cmp	r5, #93	; 0x5d
 8013cc2:	d0f0      	beq.n	8013ca6 <__sccl+0x26>
 8013cc4:	b90d      	cbnz	r5, 8013cca <__sccl+0x4a>
 8013cc6:	4632      	mov	r2, r6
 8013cc8:	e7ed      	b.n	8013ca6 <__sccl+0x26>
 8013cca:	462b      	mov	r3, r5
 8013ccc:	e7ef      	b.n	8013cae <__sccl+0x2e>
 8013cce:	780e      	ldrb	r6, [r1, #0]
 8013cd0:	2e5d      	cmp	r6, #93	; 0x5d
 8013cd2:	d0fa      	beq.n	8013cca <__sccl+0x4a>
 8013cd4:	42b3      	cmp	r3, r6
 8013cd6:	dcf8      	bgt.n	8013cca <__sccl+0x4a>
 8013cd8:	3301      	adds	r3, #1
 8013cda:	429e      	cmp	r6, r3
 8013cdc:	54c4      	strb	r4, [r0, r3]
 8013cde:	dcfb      	bgt.n	8013cd8 <__sccl+0x58>
 8013ce0:	3102      	adds	r1, #2
 8013ce2:	e7e6      	b.n	8013cb2 <__sccl+0x32>

08013ce4 <strncmp>:
 8013ce4:	b510      	push	{r4, lr}
 8013ce6:	b16a      	cbz	r2, 8013d04 <strncmp+0x20>
 8013ce8:	3901      	subs	r1, #1
 8013cea:	1884      	adds	r4, r0, r2
 8013cec:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013cf0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d103      	bne.n	8013d00 <strncmp+0x1c>
 8013cf8:	42a0      	cmp	r0, r4
 8013cfa:	d001      	beq.n	8013d00 <strncmp+0x1c>
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d1f5      	bne.n	8013cec <strncmp+0x8>
 8013d00:	1a98      	subs	r0, r3, r2
 8013d02:	bd10      	pop	{r4, pc}
 8013d04:	4610      	mov	r0, r2
 8013d06:	e7fc      	b.n	8013d02 <strncmp+0x1e>

08013d08 <_strtoul_l.isra.0>:
 8013d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d0c:	4680      	mov	r8, r0
 8013d0e:	4689      	mov	r9, r1
 8013d10:	4692      	mov	sl, r2
 8013d12:	461e      	mov	r6, r3
 8013d14:	460f      	mov	r7, r1
 8013d16:	463d      	mov	r5, r7
 8013d18:	9808      	ldr	r0, [sp, #32]
 8013d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d1e:	f7fe fc87 	bl	8012630 <__locale_ctype_ptr_l>
 8013d22:	4420      	add	r0, r4
 8013d24:	7843      	ldrb	r3, [r0, #1]
 8013d26:	f013 0308 	ands.w	r3, r3, #8
 8013d2a:	d130      	bne.n	8013d8e <_strtoul_l.isra.0+0x86>
 8013d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8013d2e:	d130      	bne.n	8013d92 <_strtoul_l.isra.0+0x8a>
 8013d30:	787c      	ldrb	r4, [r7, #1]
 8013d32:	1cbd      	adds	r5, r7, #2
 8013d34:	2101      	movs	r1, #1
 8013d36:	2e00      	cmp	r6, #0
 8013d38:	d05c      	beq.n	8013df4 <_strtoul_l.isra.0+0xec>
 8013d3a:	2e10      	cmp	r6, #16
 8013d3c:	d109      	bne.n	8013d52 <_strtoul_l.isra.0+0x4a>
 8013d3e:	2c30      	cmp	r4, #48	; 0x30
 8013d40:	d107      	bne.n	8013d52 <_strtoul_l.isra.0+0x4a>
 8013d42:	782b      	ldrb	r3, [r5, #0]
 8013d44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013d48:	2b58      	cmp	r3, #88	; 0x58
 8013d4a:	d14e      	bne.n	8013dea <_strtoul_l.isra.0+0xe2>
 8013d4c:	786c      	ldrb	r4, [r5, #1]
 8013d4e:	2610      	movs	r6, #16
 8013d50:	3502      	adds	r5, #2
 8013d52:	f04f 32ff 	mov.w	r2, #4294967295
 8013d56:	2300      	movs	r3, #0
 8013d58:	fbb2 f2f6 	udiv	r2, r2, r6
 8013d5c:	fb06 fc02 	mul.w	ip, r6, r2
 8013d60:	ea6f 0c0c 	mvn.w	ip, ip
 8013d64:	4618      	mov	r0, r3
 8013d66:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013d6a:	2f09      	cmp	r7, #9
 8013d6c:	d817      	bhi.n	8013d9e <_strtoul_l.isra.0+0x96>
 8013d6e:	463c      	mov	r4, r7
 8013d70:	42a6      	cmp	r6, r4
 8013d72:	dd23      	ble.n	8013dbc <_strtoul_l.isra.0+0xb4>
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	db1e      	blt.n	8013db6 <_strtoul_l.isra.0+0xae>
 8013d78:	4282      	cmp	r2, r0
 8013d7a:	d31c      	bcc.n	8013db6 <_strtoul_l.isra.0+0xae>
 8013d7c:	d101      	bne.n	8013d82 <_strtoul_l.isra.0+0x7a>
 8013d7e:	45a4      	cmp	ip, r4
 8013d80:	db19      	blt.n	8013db6 <_strtoul_l.isra.0+0xae>
 8013d82:	fb00 4006 	mla	r0, r0, r6, r4
 8013d86:	2301      	movs	r3, #1
 8013d88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d8c:	e7eb      	b.n	8013d66 <_strtoul_l.isra.0+0x5e>
 8013d8e:	462f      	mov	r7, r5
 8013d90:	e7c1      	b.n	8013d16 <_strtoul_l.isra.0+0xe>
 8013d92:	2c2b      	cmp	r4, #43	; 0x2b
 8013d94:	bf04      	itt	eq
 8013d96:	1cbd      	addeq	r5, r7, #2
 8013d98:	787c      	ldrbeq	r4, [r7, #1]
 8013d9a:	4619      	mov	r1, r3
 8013d9c:	e7cb      	b.n	8013d36 <_strtoul_l.isra.0+0x2e>
 8013d9e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013da2:	2f19      	cmp	r7, #25
 8013da4:	d801      	bhi.n	8013daa <_strtoul_l.isra.0+0xa2>
 8013da6:	3c37      	subs	r4, #55	; 0x37
 8013da8:	e7e2      	b.n	8013d70 <_strtoul_l.isra.0+0x68>
 8013daa:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013dae:	2f19      	cmp	r7, #25
 8013db0:	d804      	bhi.n	8013dbc <_strtoul_l.isra.0+0xb4>
 8013db2:	3c57      	subs	r4, #87	; 0x57
 8013db4:	e7dc      	b.n	8013d70 <_strtoul_l.isra.0+0x68>
 8013db6:	f04f 33ff 	mov.w	r3, #4294967295
 8013dba:	e7e5      	b.n	8013d88 <_strtoul_l.isra.0+0x80>
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	da09      	bge.n	8013dd4 <_strtoul_l.isra.0+0xcc>
 8013dc0:	2322      	movs	r3, #34	; 0x22
 8013dc2:	f8c8 3000 	str.w	r3, [r8]
 8013dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8013dca:	f1ba 0f00 	cmp.w	sl, #0
 8013dce:	d107      	bne.n	8013de0 <_strtoul_l.isra.0+0xd8>
 8013dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dd4:	b101      	cbz	r1, 8013dd8 <_strtoul_l.isra.0+0xd0>
 8013dd6:	4240      	negs	r0, r0
 8013dd8:	f1ba 0f00 	cmp.w	sl, #0
 8013ddc:	d0f8      	beq.n	8013dd0 <_strtoul_l.isra.0+0xc8>
 8013dde:	b10b      	cbz	r3, 8013de4 <_strtoul_l.isra.0+0xdc>
 8013de0:	f105 39ff 	add.w	r9, r5, #4294967295
 8013de4:	f8ca 9000 	str.w	r9, [sl]
 8013de8:	e7f2      	b.n	8013dd0 <_strtoul_l.isra.0+0xc8>
 8013dea:	2430      	movs	r4, #48	; 0x30
 8013dec:	2e00      	cmp	r6, #0
 8013dee:	d1b0      	bne.n	8013d52 <_strtoul_l.isra.0+0x4a>
 8013df0:	2608      	movs	r6, #8
 8013df2:	e7ae      	b.n	8013d52 <_strtoul_l.isra.0+0x4a>
 8013df4:	2c30      	cmp	r4, #48	; 0x30
 8013df6:	d0a4      	beq.n	8013d42 <_strtoul_l.isra.0+0x3a>
 8013df8:	260a      	movs	r6, #10
 8013dfa:	e7aa      	b.n	8013d52 <_strtoul_l.isra.0+0x4a>

08013dfc <_strtoul_r>:
 8013dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dfe:	4c06      	ldr	r4, [pc, #24]	; (8013e18 <_strtoul_r+0x1c>)
 8013e00:	4d06      	ldr	r5, [pc, #24]	; (8013e1c <_strtoul_r+0x20>)
 8013e02:	6824      	ldr	r4, [r4, #0]
 8013e04:	6a24      	ldr	r4, [r4, #32]
 8013e06:	2c00      	cmp	r4, #0
 8013e08:	bf08      	it	eq
 8013e0a:	462c      	moveq	r4, r5
 8013e0c:	9400      	str	r4, [sp, #0]
 8013e0e:	f7ff ff7b 	bl	8013d08 <_strtoul_l.isra.0>
 8013e12:	b003      	add	sp, #12
 8013e14:	bd30      	pop	{r4, r5, pc}
 8013e16:	bf00      	nop
 8013e18:	2000000c 	.word	0x2000000c
 8013e1c:	20000070 	.word	0x20000070

08013e20 <__submore>:
 8013e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e24:	460c      	mov	r4, r1
 8013e26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e2c:	4299      	cmp	r1, r3
 8013e2e:	d11d      	bne.n	8013e6c <__submore+0x4c>
 8013e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013e34:	f7ff f914 	bl	8013060 <_malloc_r>
 8013e38:	b918      	cbnz	r0, 8013e42 <__submore+0x22>
 8013e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e46:	63a3      	str	r3, [r4, #56]	; 0x38
 8013e48:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8013e4e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013e52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013e56:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013e5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013e5e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013e62:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013e66:	6020      	str	r0, [r4, #0]
 8013e68:	2000      	movs	r0, #0
 8013e6a:	e7e8      	b.n	8013e3e <__submore+0x1e>
 8013e6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013e6e:	0077      	lsls	r7, r6, #1
 8013e70:	463a      	mov	r2, r7
 8013e72:	f000 f85a 	bl	8013f2a <_realloc_r>
 8013e76:	4605      	mov	r5, r0
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	d0de      	beq.n	8013e3a <__submore+0x1a>
 8013e7c:	eb00 0806 	add.w	r8, r0, r6
 8013e80:	4601      	mov	r1, r0
 8013e82:	4632      	mov	r2, r6
 8013e84:	4640      	mov	r0, r8
 8013e86:	f7fe fc85 	bl	8012794 <memcpy>
 8013e8a:	f8c4 8000 	str.w	r8, [r4]
 8013e8e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013e92:	e7e9      	b.n	8013e68 <__submore+0x48>

08013e94 <__ascii_wctomb>:
 8013e94:	b149      	cbz	r1, 8013eaa <__ascii_wctomb+0x16>
 8013e96:	2aff      	cmp	r2, #255	; 0xff
 8013e98:	bf85      	ittet	hi
 8013e9a:	238a      	movhi	r3, #138	; 0x8a
 8013e9c:	6003      	strhi	r3, [r0, #0]
 8013e9e:	700a      	strbls	r2, [r1, #0]
 8013ea0:	f04f 30ff 	movhi.w	r0, #4294967295
 8013ea4:	bf98      	it	ls
 8013ea6:	2001      	movls	r0, #1
 8013ea8:	4770      	bx	lr
 8013eaa:	4608      	mov	r0, r1
 8013eac:	4770      	bx	lr
	...

08013eb0 <_fstat_r>:
 8013eb0:	b538      	push	{r3, r4, r5, lr}
 8013eb2:	4c07      	ldr	r4, [pc, #28]	; (8013ed0 <_fstat_r+0x20>)
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	4605      	mov	r5, r0
 8013eb8:	4608      	mov	r0, r1
 8013eba:	4611      	mov	r1, r2
 8013ebc:	6023      	str	r3, [r4, #0]
 8013ebe:	f7f0 f80c 	bl	8003eda <_fstat>
 8013ec2:	1c43      	adds	r3, r0, #1
 8013ec4:	d102      	bne.n	8013ecc <_fstat_r+0x1c>
 8013ec6:	6823      	ldr	r3, [r4, #0]
 8013ec8:	b103      	cbz	r3, 8013ecc <_fstat_r+0x1c>
 8013eca:	602b      	str	r3, [r5, #0]
 8013ecc:	bd38      	pop	{r3, r4, r5, pc}
 8013ece:	bf00      	nop
 8013ed0:	20005098 	.word	0x20005098

08013ed4 <_isatty_r>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	4c06      	ldr	r4, [pc, #24]	; (8013ef0 <_isatty_r+0x1c>)
 8013ed8:	2300      	movs	r3, #0
 8013eda:	4605      	mov	r5, r0
 8013edc:	4608      	mov	r0, r1
 8013ede:	6023      	str	r3, [r4, #0]
 8013ee0:	f7f0 f80b 	bl	8003efa <_isatty>
 8013ee4:	1c43      	adds	r3, r0, #1
 8013ee6:	d102      	bne.n	8013eee <_isatty_r+0x1a>
 8013ee8:	6823      	ldr	r3, [r4, #0]
 8013eea:	b103      	cbz	r3, 8013eee <_isatty_r+0x1a>
 8013eec:	602b      	str	r3, [r5, #0]
 8013eee:	bd38      	pop	{r3, r4, r5, pc}
 8013ef0:	20005098 	.word	0x20005098

08013ef4 <memmove>:
 8013ef4:	4288      	cmp	r0, r1
 8013ef6:	b510      	push	{r4, lr}
 8013ef8:	eb01 0302 	add.w	r3, r1, r2
 8013efc:	d807      	bhi.n	8013f0e <memmove+0x1a>
 8013efe:	1e42      	subs	r2, r0, #1
 8013f00:	4299      	cmp	r1, r3
 8013f02:	d00a      	beq.n	8013f1a <memmove+0x26>
 8013f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013f0c:	e7f8      	b.n	8013f00 <memmove+0xc>
 8013f0e:	4283      	cmp	r3, r0
 8013f10:	d9f5      	bls.n	8013efe <memmove+0xa>
 8013f12:	1881      	adds	r1, r0, r2
 8013f14:	1ad2      	subs	r2, r2, r3
 8013f16:	42d3      	cmn	r3, r2
 8013f18:	d100      	bne.n	8013f1c <memmove+0x28>
 8013f1a:	bd10      	pop	{r4, pc}
 8013f1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013f24:	e7f7      	b.n	8013f16 <memmove+0x22>

08013f26 <__malloc_lock>:
 8013f26:	4770      	bx	lr

08013f28 <__malloc_unlock>:
 8013f28:	4770      	bx	lr

08013f2a <_realloc_r>:
 8013f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f2c:	4607      	mov	r7, r0
 8013f2e:	4614      	mov	r4, r2
 8013f30:	460e      	mov	r6, r1
 8013f32:	b921      	cbnz	r1, 8013f3e <_realloc_r+0x14>
 8013f34:	4611      	mov	r1, r2
 8013f36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013f3a:	f7ff b891 	b.w	8013060 <_malloc_r>
 8013f3e:	b922      	cbnz	r2, 8013f4a <_realloc_r+0x20>
 8013f40:	f7ff f840 	bl	8012fc4 <_free_r>
 8013f44:	4625      	mov	r5, r4
 8013f46:	4628      	mov	r0, r5
 8013f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f4a:	f000 f814 	bl	8013f76 <_malloc_usable_size_r>
 8013f4e:	42a0      	cmp	r0, r4
 8013f50:	d20f      	bcs.n	8013f72 <_realloc_r+0x48>
 8013f52:	4621      	mov	r1, r4
 8013f54:	4638      	mov	r0, r7
 8013f56:	f7ff f883 	bl	8013060 <_malloc_r>
 8013f5a:	4605      	mov	r5, r0
 8013f5c:	2800      	cmp	r0, #0
 8013f5e:	d0f2      	beq.n	8013f46 <_realloc_r+0x1c>
 8013f60:	4631      	mov	r1, r6
 8013f62:	4622      	mov	r2, r4
 8013f64:	f7fe fc16 	bl	8012794 <memcpy>
 8013f68:	4631      	mov	r1, r6
 8013f6a:	4638      	mov	r0, r7
 8013f6c:	f7ff f82a 	bl	8012fc4 <_free_r>
 8013f70:	e7e9      	b.n	8013f46 <_realloc_r+0x1c>
 8013f72:	4635      	mov	r5, r6
 8013f74:	e7e7      	b.n	8013f46 <_realloc_r+0x1c>

08013f76 <_malloc_usable_size_r>:
 8013f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f7a:	1f18      	subs	r0, r3, #4
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	bfbc      	itt	lt
 8013f80:	580b      	ldrlt	r3, [r1, r0]
 8013f82:	18c0      	addlt	r0, r0, r3
 8013f84:	4770      	bx	lr
	...

08013f88 <_init>:
 8013f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f8a:	bf00      	nop
 8013f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f8e:	bc08      	pop	{r3}
 8013f90:	469e      	mov	lr, r3
 8013f92:	4770      	bx	lr

08013f94 <_fini>:
 8013f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f96:	bf00      	nop
 8013f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f9a:	bc08      	pop	{r3}
 8013f9c:	469e      	mov	lr, r3
 8013f9e:	4770      	bx	lr
